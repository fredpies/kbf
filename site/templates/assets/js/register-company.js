(function () {
  'use strict';

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties$1(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass$1(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties$1(Constructor, staticProps);
    return Constructor;
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function getAugmentedNamespace(n) {
  	if (n.__esModule) return n;
  	var a = Object.defineProperty({}, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  function createCommonjsModule(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  var runtime_1 = createCommonjsModule(function (module) {
    var runtime = function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }

      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};

      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);

      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };

      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      Gp[iteratorSymbol] = function () {
        return this;
      };

      Gp.toString = function () {
        return "[object Generator]";
      };

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports );

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  });

  var regenerator = runtime_1;

  var errors = {}; // Wyjatki
  // Nie znaleziono elementu DOM

  errors.elementNotFound = function (selector) {
    return new Error("Cannot find elements with selector \"".concat(selector, "\""));
  }; // Nie znaleziono formularza


  errors.formNotFound = function (formName) {
    return new Error("Cannot find form with name \"".concat(formName, "\""));
  }; // Nie podano argumentu


  errors.argumentNotFound = function (argumentName) {
    return new Error("".concat(argumentName.substring(0, 1).toUpperCase() + argumentName.substring(1), " argument cannot be empty"));
  }; // Brak walidatora dla formularza


  errors.noValidator = function () {
    return new Error("No JQuery validator plugin");
  }; // Nie podano wspolrzednych geograficznych


  errors.noGeoCoords = function () {
    return new Error("You must provide geo coordinates.");
  };

  if (typeof Object.getPrototypeOf !== "function") {
    Object.getPrototypeOf = _typeof("test".__proto__) === "object" ? function (object) {
      return object.__proto__;
    } : function (object) {
      return object.constructor.prototype;
    };
  }

  var BACKSPACE = 8;
  var BACKSPACE_SAFARI = 127;
  var DELETE = 46;
  var DOWN = 40;
  var END = 35;
  var ENTER = 13;
  var ESCAPE = 27;
  var HOME = 36;
  var INSERT = 45;
  var LEFT = 37;
  var PAGE_DOWN = 34;
  var PAGE_UP = 33;
  var RIGHT = 39;
  var SPACE = 32;
  var TAB = 9;
  var UP = 38;
  var X = 88;
  var CONTROL = 17;
  var KEY_229 = 229;
  var keyCode = {
  	BACKSPACE: BACKSPACE,
  	BACKSPACE_SAFARI: BACKSPACE_SAFARI,
  	DELETE: DELETE,
  	DOWN: DOWN,
  	END: END,
  	ENTER: ENTER,
  	ESCAPE: ESCAPE,
  	HOME: HOME,
  	INSERT: INSERT,
  	LEFT: LEFT,
  	PAGE_DOWN: PAGE_DOWN,
  	PAGE_UP: PAGE_UP,
  	RIGHT: RIGHT,
  	SPACE: SPACE,
  	TAB: TAB,
  	UP: UP,
  	X: X,
  	CONTROL: CONTROL,
  	KEY_229: KEY_229
  };

  function getLocator(tst, align) {
    //need to align the locators to be correct
    var locator = (tst.alternation != undefined ? tst.mloc[getDecisionTaker(tst)] : tst.locator).join("");
    if (locator !== "") while (locator.length < align) {
      locator += "0";
    }
    return locator;
  }

  function getDecisionTaker(tst) {
    var decisionTaker = tst.locator[tst.alternation];

    if (typeof decisionTaker == "string" && decisionTaker.length > 0) {
      //no decision taken ~ take first one as decider
      decisionTaker = decisionTaker.split(",")[0];
    }

    return decisionTaker !== undefined ? decisionTaker.toString() : "";
  } //tobe put on prototype?


  function getPlaceholder(pos, test, returnPL) {
    var inputmask = this,
        opts = this.opts,
        maskset = this.maskset;
    test = test || getTest.call(inputmask, pos).match;

    if (test.placeholder !== undefined || returnPL === true) {
      return typeof test.placeholder === "function" ? test.placeholder(opts) : test.placeholder;
    } else if (test.static === true) {
      if (pos > -1 && maskset.validPositions[pos] === undefined) {
        var tests = getTests.call(inputmask, pos),
            staticAlternations = [],
            prevTest;

        if (tests.length > 1 + (tests[tests.length - 1].match.def === "" ? 1 : 0)) {
          for (var i = 0; i < tests.length; i++) {
            if (tests[i].match.def !== "" && tests[i].match.optionality !== true && tests[i].match.optionalQuantifier !== true && (tests[i].match.static === true || prevTest === undefined || tests[i].match.fn.test(prevTest.match.def, maskset, pos, true, opts) !== false)) {
              staticAlternations.push(tests[i]);
              if (tests[i].match.static === true) prevTest = tests[i];

              if (staticAlternations.length > 1) {
                if (/[0-9a-bA-Z]/.test(staticAlternations[0].match.def)) {
                  return opts.placeholder.charAt(pos % opts.placeholder.length);
                }
              }
            }
          }
        }
      }

      return test.def;
    }

    return opts.placeholder.charAt(pos % opts.placeholder.length);
  } //tobe put on prototype?


  function getMaskTemplate(baseOnInput, minimalPos, includeMode, noJit, clearOptionalTail) {
    //includeMode true => input, undefined => placeholder, false => mask
    var inputmask = this,
        opts = this.opts,
        maskset = this.maskset;
    var greedy = opts.greedy;
    if (clearOptionalTail) opts.greedy = false;
    minimalPos = minimalPos || 0;
    var maskTemplate = [],
        ndxIntlzr,
        pos = 0,
        test,
        testPos,
        jitRenderStatic;

    do {
      if (baseOnInput === true && maskset.validPositions[pos]) {
        testPos = clearOptionalTail && maskset.validPositions[pos].match.optionality === true && maskset.validPositions[pos + 1] === undefined && (maskset.validPositions[pos].generatedInput === true || maskset.validPositions[pos].input == opts.skipOptionalPartCharacter && pos > 0) ? determineTestTemplate.call(inputmask, pos, getTests.call(inputmask, pos, ndxIntlzr, pos - 1)) : maskset.validPositions[pos];
        test = testPos.match;
        ndxIntlzr = testPos.locator.slice();
        maskTemplate.push(includeMode === true ? testPos.input : includeMode === false ? test.nativeDef : getPlaceholder.call(inputmask, pos, test));
      } else {
        testPos = getTestTemplate.call(inputmask, pos, ndxIntlzr, pos - 1);
        test = testPos.match;
        ndxIntlzr = testPos.locator.slice();
        var jitMasking = noJit === true ? false : opts.jitMasking !== false ? opts.jitMasking : test.jit; //check for groupSeparator is a hack for the numerics as we don't want the render of the groupSeparator beforehand

        jitRenderStatic = jitRenderStatic && test.static && test.def !== opts.groupSeparator && test.fn === null || maskset.validPositions[pos - 1] && test.static && test.def !== opts.groupSeparator && test.fn === null;

        if (jitRenderStatic || jitMasking === false || jitMasking === undefined
        /*|| pos < lvp*/
        || typeof jitMasking === "number" && isFinite(jitMasking) && jitMasking > pos) {
          maskTemplate.push(includeMode === false ? test.nativeDef : getPlaceholder.call(inputmask, pos, test));
        } else {
          jitRenderStatic = false;
        }
      }

      pos++;
    } while ((inputmask.maxLength === undefined || pos < inputmask.maxLength) && (test.static !== true || test.def !== "") || minimalPos > pos);

    if (maskTemplate[maskTemplate.length - 1] === "") {
      maskTemplate.pop(); //drop the last one which is empty
    }

    if (includeMode !== false || //do not alter the masklength when just retrieving the maskdefinition
    maskset.maskLength === undefined) //just make sure the maskLength gets initialized in all cases (needed for isValid)
      {
        maskset.maskLength = pos - 1;
      }

    opts.greedy = greedy;
    return maskTemplate;
  } //tobe put on prototype?


  function getTestTemplate(pos, ndxIntlzr, tstPs) {
    var inputmask = this,
        maskset = this.maskset;
    return maskset.validPositions[pos] || determineTestTemplate.call(inputmask, pos, getTests.call(inputmask, pos, ndxIntlzr ? ndxIntlzr.slice() : ndxIntlzr, tstPs));
  } //tobe put on prototype?


  function determineTestTemplate(pos, tests) {
    var inputmask = this,
        opts = this.opts;
    pos = pos > 0 ? pos - 1 : 0;
    var altTest = getTest.call(inputmask, pos),
        targetLocator = getLocator(altTest),
        tstLocator,
        closest,
        bestMatch;

    for (var ndx = 0; ndx < tests.length; ndx++) {
      //find best matching
      var tst = tests[ndx];
      tstLocator = getLocator(tst, targetLocator.length);
      var distance = Math.abs(tstLocator - targetLocator);

      if (closest === undefined || tstLocator !== "" && distance < closest || bestMatch && !opts.greedy && bestMatch.match.optionality && bestMatch.match.newBlockMarker === "master" && (!tst.match.optionality || !tst.match.newBlockMarker) || bestMatch && bestMatch.match.optionalQuantifier && !tst.match.optionalQuantifier) {
        closest = distance;
        bestMatch = tst;
      }
    }

    return bestMatch;
  } //tobe put on prototype?


  function getTest(pos, tests) {
    var inputmask = this,
        maskset = this.maskset;

    if (maskset.validPositions[pos]) {
      return maskset.validPositions[pos];
    }

    return (tests || getTests.call(inputmask, pos))[0];
  } //tobe put on prototype?


  function getTests(pos, ndxIntlzr, tstPs) {
    var inputmask = this,
        $ = this.dependencyLib,
        maskset = this.maskset,
        opts = this.opts,
        el = this.el,
        maskTokens = maskset.maskToken,
        testPos = ndxIntlzr ? tstPs : 0,
        ndxInitializer = ndxIntlzr ? ndxIntlzr.slice() : [0],
        matches = [],
        insertStop = false,
        latestMatch,
        cacheDependency = ndxIntlzr ? ndxIntlzr.join("") : "";

    function resolveTestFromToken(maskToken, ndxInitializer, loopNdx, quantifierRecurse) {
      //ndxInitializer contains a set of indexes to speedup searches in the mtokens
      function handleMatch(match, loopNdx, quantifierRecurse) {
        function isFirstMatch(latestMatch, tokenGroup) {
          var firstMatch = tokenGroup.matches.indexOf(latestMatch) === 0;

          if (!firstMatch) {
            tokenGroup.matches.every(function (match, ndx) {
              if (match.isQuantifier === true) {
                firstMatch = isFirstMatch(latestMatch, tokenGroup.matches[ndx - 1]);
              } else if (Object.prototype.hasOwnProperty.call(match, "matches")) firstMatch = isFirstMatch(latestMatch, match);

              if (firstMatch) return false;
              return true;
            });
          }

          return firstMatch;
        }

        function resolveNdxInitializer(pos, alternateNdx, targetAlternation) {
          var bestMatch, indexPos;

          if (maskset.tests[pos] || maskset.validPositions[pos]) {
            (maskset.tests[pos] || [maskset.validPositions[pos]]).every(function (lmnt, ndx) {
              if (lmnt.mloc[alternateNdx]) {
                bestMatch = lmnt;
                return false; //break
              }

              var alternation = targetAlternation !== undefined ? targetAlternation : lmnt.alternation,
                  ndxPos = lmnt.locator[alternation] !== undefined ? lmnt.locator[alternation].toString().indexOf(alternateNdx) : -1;

              if ((indexPos === undefined || ndxPos < indexPos) && ndxPos !== -1) {
                bestMatch = lmnt;
                indexPos = ndxPos;
              }

              return true;
            });
          }

          if (bestMatch) {
            var bestMatchAltIndex = bestMatch.locator[bestMatch.alternation];
            var locator = bestMatch.mloc[alternateNdx] || bestMatch.mloc[bestMatchAltIndex] || bestMatch.locator;
            return locator.slice((targetAlternation !== undefined ? targetAlternation : bestMatch.alternation) + 1);
          } else {
            return targetAlternation !== undefined ? resolveNdxInitializer(pos, alternateNdx) : undefined;
          }
        }

        function isSubsetOf(source, target) {
          function expand(pattern) {
            var expanded = [],
                start = -1,
                end;

            for (var i = 0, l = pattern.length; i < l; i++) {
              if (pattern.charAt(i) === "-") {
                end = pattern.charCodeAt(i + 1);

                while (++start < end) {
                  expanded.push(String.fromCharCode(start));
                }
              } else {
                start = pattern.charCodeAt(i);
                expanded.push(pattern.charAt(i));
              }
            }

            return expanded.join("");
          }

          if (source.match.def === target.match.nativeDef) return true;

          if ((opts.regex || source.match.fn instanceof RegExp && target.match.fn instanceof RegExp) && source.match.static !== true && target.match.static !== true) {
            //is regex a subset
            return expand(target.match.fn.toString().replace(/[[\]/]/g, "")).indexOf(expand(source.match.fn.toString().replace(/[[\]/]/g, ""))) !== -1;
          }

          return false;
        }

        function staticCanMatchDefinition(source, target) {
          return source.match.static === true && target.match.static !== true ? target.match.fn.test(source.match.def, maskset, pos, false, opts, false) : false;
        } //mergelocators for retrieving the correct locator match when merging


        function setMergeLocators(targetMatch, altMatch) {
          var alternationNdx = targetMatch.alternation,
              shouldMerge = altMatch === undefined || alternationNdx === altMatch.alternation && targetMatch.locator[alternationNdx].toString().indexOf(altMatch.locator[alternationNdx]) === -1;

          if (!shouldMerge && alternationNdx > altMatch.alternation) {
            for (var i = altMatch.alternation; i < alternationNdx; i++) {
              if (targetMatch.locator[i] !== altMatch.locator[i]) {
                alternationNdx = i;
                shouldMerge = true;
                break;
              }
            }
          }

          if (shouldMerge) {
            targetMatch.mloc = targetMatch.mloc || {};
            var locNdx = targetMatch.locator[alternationNdx];

            if (locNdx === undefined) {
              targetMatch.alternation = undefined;
            } else {
              if (typeof locNdx === "string") locNdx = locNdx.split(",")[0];
              if (targetMatch.mloc[locNdx] === undefined) targetMatch.mloc[locNdx] = targetMatch.locator.slice();

              if (altMatch !== undefined) {
                for (var ndx in altMatch.mloc) {
                  if (typeof ndx === "string") ndx = ndx.split(",")[0];
                  if (targetMatch.mloc[ndx] === undefined) targetMatch.mloc[ndx] = altMatch.mloc[ndx];
                }

                targetMatch.locator[alternationNdx] = Object.keys(targetMatch.mloc).join(",");
              }

              return true;
            }
          }

          return false;
        }

        function isSameLevel(targetMatch, altMatch) {
          if (targetMatch.locator.length !== altMatch.locator.length) {
            return false;
          }

          for (var locNdx = targetMatch.alternation + 1; locNdx < targetMatch.locator.length; locNdx++) {
            if (targetMatch.locator[locNdx] !== altMatch.locator[locNdx]) {
              return false;
            }
          }

          return true;
        }

        if (testPos > pos + opts._maxTestPos) {
          throw "Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. " + maskset.mask;
        }

        if (testPos === pos && match.matches === undefined) {
          matches.push({
            "match": match,
            "locator": loopNdx.reverse(),
            "cd": cacheDependency,
            "mloc": {}
          });
          return true;
        } else if (match.matches !== undefined) {
          if (match.isGroup && quantifierRecurse !== match) {
            //when a group pass along to the quantifier
            match = handleMatch(maskToken.matches[maskToken.matches.indexOf(match) + 1], loopNdx, quantifierRecurse);
            if (match) return true;
          } else if (match.isOptional) {
            var optionalToken = match,
                mtchsNdx = matches.length;
            match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse);

            if (match) {
              //mark optionality in matches
              matches.forEach(function (mtch, ndx) {
                if (ndx >= mtchsNdx) {
                  mtch.match.optionality = true;
                }
              });
              latestMatch = matches[matches.length - 1].match;

              if (quantifierRecurse === undefined && isFirstMatch(latestMatch, optionalToken)) {
                //prevent loop see #698
                insertStop = true; //insert a stop

                testPos = pos; //match the position after the group
              } else {
                return true;
              }
            }
          } else if (match.isAlternator) {
            var alternateToken = match,
                malternateMatches = [],
                maltMatches,
                currentMatches = matches.slice(),
                loopNdxCnt = loopNdx.length;
            var altIndex = ndxInitializer.length > 0 ? ndxInitializer.shift() : -1;

            if (altIndex === -1 || typeof altIndex === "string") {
              var currentPos = testPos,
                  ndxInitializerClone = ndxInitializer.slice(),
                  altIndexArr = [],
                  amndx;

              if (typeof altIndex == "string") {
                altIndexArr = altIndex.split(",");
              } else {
                for (amndx = 0; amndx < alternateToken.matches.length; amndx++) {
                  altIndexArr.push(amndx.toString());
                }
              }

              if (maskset.excludes[pos] !== undefined) {
                var altIndexArrClone = altIndexArr.slice();

                for (var i = 0, exl = maskset.excludes[pos].length; i < exl; i++) {
                  var excludeSet = maskset.excludes[pos][i].toString().split(":");

                  if (loopNdx.length == excludeSet[1]) {
                    altIndexArr.splice(altIndexArr.indexOf(excludeSet[0]), 1);
                  }
                }

                if (altIndexArr.length === 0) {
                  //fully alternated => reset
                  delete maskset.excludes[pos];
                  altIndexArr = altIndexArrClone;
                }
              }

              if (opts.keepStatic === true || isFinite(parseInt(opts.keepStatic)) && currentPos >= opts.keepStatic) altIndexArr = altIndexArr.slice(0, 1);
              var unMatchedAlternation = false;

              for (var ndx = 0; ndx < altIndexArr.length; ndx++) {
                amndx = parseInt(altIndexArr[ndx]);
                matches = []; //set the correct ndxInitializer

                ndxInitializer = typeof altIndex === "string" ? resolveNdxInitializer(testPos, amndx, loopNdxCnt) || ndxInitializerClone.slice() : ndxInitializerClone.slice();

                if (alternateToken.matches[amndx] && handleMatch(alternateToken.matches[amndx], [amndx].concat(loopNdx), quantifierRecurse)) {
                  match = true;
                } else if (ndx === 0) {
                  unMatchedAlternation = true;
                }

                maltMatches = matches.slice();
                testPos = currentPos;
                matches = []; //fuzzy merge matches

                for (var ndx1 = 0; ndx1 < maltMatches.length; ndx1++) {
                  var altMatch = maltMatches[ndx1],
                      dropMatch = false;
                  altMatch.match.jit = altMatch.match.jit || unMatchedAlternation; //mark jit when there are unmatched alternations  ex: mask: "(a|aa)"

                  altMatch.alternation = altMatch.alternation || loopNdxCnt;
                  setMergeLocators(altMatch);

                  for (var ndx2 = 0; ndx2 < malternateMatches.length; ndx2++) {
                    var altMatch2 = malternateMatches[ndx2];

                    if (typeof altIndex !== "string" || altMatch.alternation !== undefined && altIndexArr.includes(altMatch.locator[altMatch.alternation].toString())) {
                      if (altMatch.match.nativeDef === altMatch2.match.nativeDef) {
                        dropMatch = true;
                        setMergeLocators(altMatch2, altMatch);
                        break;
                      } else if (isSubsetOf(altMatch, altMatch2)) {
                        if (setMergeLocators(altMatch, altMatch2)) {
                          dropMatch = true;
                          malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch);
                        }

                        break;
                      } else if (isSubsetOf(altMatch2, altMatch)) {
                        setMergeLocators(altMatch2, altMatch);
                        break;
                      } else if (staticCanMatchDefinition(altMatch, altMatch2)) {
                        if (!isSameLevel(altMatch, altMatch2) && el.inputmask.userOptions.keepStatic === undefined) {
                          opts.keepStatic = true;
                        } else if (setMergeLocators(altMatch, altMatch2)) {
                          //insert match above general match
                          dropMatch = true;
                          malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch);
                        }

                        break;
                      }
                    }
                  }

                  if (!dropMatch) {
                    malternateMatches.push(altMatch);
                  }
                }
              }

              matches = currentMatches.concat(malternateMatches);
              testPos = pos;
              insertStop = matches.length > 0; //insert a stopelemnt when there is an alternate - needed for non-greedy option

              match = malternateMatches.length > 0; //set correct match state
              //cloneback

              ndxInitializer = ndxInitializerClone.slice();
            } else {
              match = handleMatch(alternateToken.matches[altIndex] || maskToken.matches[altIndex], [altIndex].concat(loopNdx), quantifierRecurse);
            }

            if (match) return true;
          } else if (match.isQuantifier && quantifierRecurse !== maskToken.matches[maskToken.matches.indexOf(match) - 1]) {
            var qt = match;

            for (var qndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; qndx < (isNaN(qt.quantifier.max) ? qndx + 1 : qt.quantifier.max) && testPos <= pos; qndx++) {
              var tokenGroup = maskToken.matches[maskToken.matches.indexOf(qt) - 1];
              match = handleMatch(tokenGroup, [qndx].concat(loopNdx), tokenGroup); //set the tokenGroup as quantifierRecurse marker

              if (match) {
                //get latest match
                latestMatch = matches[matches.length - 1].match; //mark optionality
                //TODO FIX RECURSIVE QUANTIFIERS

                latestMatch.optionalQuantifier = qndx >= qt.quantifier.min; // console.log(pos + " " + qt.quantifier.min + " " + latestMatch.optionalQuantifier);

                latestMatch.jit = (qndx || 1) * tokenGroup.matches.indexOf(latestMatch) >= qt.quantifier.jit;

                if (latestMatch.optionalQuantifier && isFirstMatch(latestMatch, tokenGroup)) {
                  insertStop = true;
                  testPos = pos; //match the position after the group

                  break; //stop quantifierloop && search for next possible match
                }

                if (latestMatch.jit
                /*&& !latestMatch.optionalQuantifier*/
                ) {
                    //always set jitOffset, isvalid checks when to apply
                    maskset.jitOffset[pos] = tokenGroup.matches.length - tokenGroup.matches.indexOf(latestMatch);
                  }

                return true;
              }
            }
          } else {
            match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse);
            if (match) return true;
          }
        } else {
          testPos++;
        }
      } //the offset is set in the quantifierloop when git masking is used


      for (var tndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; tndx < maskToken.matches.length; tndx++) {
        if (maskToken.matches[tndx].isQuantifier !== true) {
          var match = handleMatch(maskToken.matches[tndx], [tndx].concat(loopNdx), quantifierRecurse);

          if (match && testPos === pos) {
            return match;
          } else if (testPos > pos) {
            break;
          }
        }
      }
    }

    function mergeLocators(pos, tests) {
      var locator = [],
          alternation;
      if (!Array.isArray(tests)) tests = [tests];

      if (tests.length > 0) {
        if (tests[0].alternation === undefined || opts.keepStatic === true) {
          locator = determineTestTemplate.call(inputmask, pos, tests.slice()).locator.slice();
          if (locator.length === 0) locator = tests[0].locator.slice();
        } else {
          tests.forEach(function (tst) {
            if (tst.def !== "") {
              if (locator.length === 0) {
                alternation = tst.alternation;
                locator = tst.locator.slice();
              } else {
                if (tst.locator[alternation] && locator[alternation].toString().indexOf(tst.locator[alternation]) === -1) {
                  locator[alternation] += "," + tst.locator[alternation];
                }
              }
            }
          });
        }
      }

      return locator;
    }

    if (pos > -1 && (inputmask.maxLength === undefined || pos < inputmask.maxLength)) {
      if (ndxIntlzr === undefined) {
        //determine index initializer
        var previousPos = pos - 1,
            test;

        while ((test = maskset.validPositions[previousPos] || maskset.tests[previousPos]) === undefined && previousPos > -1) {
          previousPos--;
        }

        if (test !== undefined && previousPos > -1) {
          ndxInitializer = mergeLocators(previousPos, test);
          cacheDependency = ndxInitializer.join("");
          testPos = previousPos;
        }
      }

      if (maskset.tests[pos] && maskset.tests[pos][0].cd === cacheDependency) {
        //cacheDependency is set on all tests, just check on the first
        return maskset.tests[pos];
      }

      for (var mtndx = ndxInitializer.shift(); mtndx < maskTokens.length; mtndx++) {
        var match = resolveTestFromToken(maskTokens[mtndx], ndxInitializer, [mtndx]);

        if (match && testPos === pos || testPos > pos) {
          break;
        }
      }
    }

    if (matches.length === 0 || insertStop) {
      matches.push({
        match: {
          fn: null,
          static: true,
          optionality: false,
          casing: null,
          def: "",
          placeholder: ""
        },
        locator: [],
        mloc: {},
        cd: cacheDependency
      });
    }

    if (ndxIntlzr !== undefined && maskset.tests[pos]) {
      //prioritize full tests for caching
      return $.extend(true, [], matches);
    }

    maskset.tests[pos] = $.extend(true, [], matches); //set a clone to prevent overwriting some props
    // console.log(pos + " - " + JSON.stringify(matches));

    return maskset.tests[pos];
  }

  var ua = window.navigator && window.navigator.userAgent || "",
      ie = ua.indexOf("MSIE ") > 0 || ua.indexOf("Trident/") > 0,
      mobile = ("ontouchstart" in window),
      //not entirely correct but will currently do
  iemobile = /iemobile/i.test(ua),
      iphone = /iphone/i.test(ua) && !iemobile;

  function applyInputValue(input, value) {
    var inputmask = input ? input.inputmask : this,
        opts = inputmask.opts;
    input.inputmask.refreshValue = false;
    if (typeof opts.onBeforeMask === "function") value = opts.onBeforeMask.call(inputmask, value, opts) || value;
    value = value.toString().split("");
    checkVal(input, true, false, value);
    inputmask.undoValue = getBuffer.call(inputmask).join("");

    if ((opts.clearMaskOnLostFocus || opts.clearIncomplete) && input.inputmask._valueGet() === getBufferTemplate.call(inputmask).join("") && getLastValidPosition.call(inputmask) === -1) {
      input.inputmask._valueSet("");
    }
  } //todo put on prototype?


  function clearOptionalTail(buffer) {
    var inputmask = this;
    buffer.length = 0;
    var template = getMaskTemplate.call(inputmask, true, 0, true, undefined, true),
        lmnt;

    while ((lmnt = template.shift()) !== undefined) {
      buffer.push(lmnt);
    }

    return buffer;
  }

  function checkVal(input, writeOut, strict, nptvl, initiatingEvent) {
    var inputmask = input ? input.inputmask : this,
        maskset = inputmask.maskset,
        opts = inputmask.opts,
        $ = inputmask.dependencyLib;
    var inputValue = nptvl.slice(),
        charCodes = "",
        initialNdx = -1,
        result = undefined,
        skipOptionalPartCharacter = opts.skipOptionalPartCharacter;
    opts.skipOptionalPartCharacter = ""; //see issue #2311

    function isTemplateMatch(ndx, charCodes) {
      var targetTemplate = getMaskTemplate.call(inputmask, true, 0).slice(ndx, seekNext.call(inputmask, ndx)).join("").replace(/'/g, ""),
          charCodeNdx = targetTemplate.indexOf(charCodes); //strip spaces from targetTemplate

      while (charCodeNdx > 0 && targetTemplate[charCodeNdx - 1] === " ") {
        charCodeNdx--;
      }

      var match = charCodeNdx === 0 && !isMask.call(inputmask, ndx) && (getTest.call(inputmask, ndx).match.nativeDef === charCodes.charAt(0) || getTest.call(inputmask, ndx).match.static === true && getTest.call(inputmask, ndx).match.nativeDef === "'" + charCodes.charAt(0) || getTest.call(inputmask, ndx).match.nativeDef === " " && (getTest.call(inputmask, ndx + 1).match.nativeDef === charCodes.charAt(0) || getTest.call(inputmask, ndx + 1).match.static === true && getTest.call(inputmask, ndx + 1).match.nativeDef === "'" + charCodes.charAt(0)));

      if (!match && charCodeNdx > 0 && !isMask.call(inputmask, ndx, false, true)) {
        var nextPos = seekNext.call(inputmask, ndx);

        if (inputmask.caretPos.begin < nextPos) {
          inputmask.caretPos = {
            begin: nextPos
          };
        }
      }

      return match;
    }

    resetMaskSet.call(inputmask);
    maskset.tests = {}; //reset tests ~ possible after alternating

    initialNdx = opts.radixPoint ? determineNewCaretPosition.call(inputmask, {
      begin: 0,
      end: 0
    }).begin : 0;
    maskset.p = initialNdx;
    inputmask.caretPos = {
      begin: initialNdx
    };
    var staticMatches = [],
        prevCaretPos = inputmask.caretPos;
    inputValue.forEach(function (charCode, ndx) {
      if (charCode !== undefined) {
        //inputfallback strips some elements out of the inputarray.  $.each logically presents them as undefined
        if (maskset.validPositions[ndx] === undefined && inputValue[ndx] === getPlaceholder.call(inputmask, ndx) && isMask.call(inputmask, ndx, true) && isValid.call(inputmask, ndx, inputValue[ndx], true, undefined, undefined, true) === false) {
          maskset.p++;
        } else {
          var keypress = new $.Event("_checkval");
          keypress.which = charCode.toString().charCodeAt(0);
          charCodes += charCode;
          var lvp = getLastValidPosition.call(inputmask, undefined, true);

          if (!isTemplateMatch(initialNdx, charCodes)) {
            result = EventHandlers.keypressEvent.call(input || inputmask, keypress, true, false, strict, inputmask.caretPos.begin);

            if (result) {
              initialNdx = inputmask.caretPos.begin + 1;
              charCodes = "";
            }
          } else {
            result = EventHandlers.keypressEvent.call(input || inputmask, keypress, true, false, strict, lvp + 1);
          }

          if (result) {
            if (result.pos !== undefined && maskset.validPositions[result.pos] && maskset.validPositions[result.pos].match.static === true && maskset.validPositions[result.pos].alternation === undefined) {
              staticMatches.push(result.pos);

              if (!inputmask.isRTL) {
                result.forwardPosition = result.pos + 1;
              }
            }

            writeBuffer.call(inputmask, undefined, getBuffer.call(inputmask), result.forwardPosition, keypress, false);
            inputmask.caretPos = {
              begin: result.forwardPosition,
              end: result.forwardPosition
            };
            prevCaretPos = inputmask.caretPos;
          } else {
            inputmask.caretPos = prevCaretPos;
          } //restore the caret position from before the failed validation

        }
      }
    });

    if (staticMatches.length > 0) {
      var sndx,
          validPos,
          nextValid = seekNext.call(inputmask, -1, undefined, false);

      if (!isComplete.call(inputmask, getBuffer.call(inputmask)) && staticMatches.length <= nextValid || isComplete.call(inputmask, getBuffer.call(inputmask)) && staticMatches.length > 0 && staticMatches.length !== nextValid && staticMatches[0] === 0) {
        //should check if is sequence starting from 0
        var nextSndx = nextValid;

        while ((sndx = staticMatches.shift()) !== undefined) {
          var keypress = new $.Event("_checkval");
          validPos = maskset.validPositions[sndx];
          validPos.generatedInput = true;
          keypress.which = validPos.input.charCodeAt(0);
          result = EventHandlers.keypressEvent.call(input, keypress, true, false, strict, nextSndx);

          if (result && result.pos !== undefined && result.pos !== sndx && maskset.validPositions[result.pos] && maskset.validPositions[result.pos].match.static === true) {
            staticMatches.push(result.pos);
          } else if (!result) break;

          nextSndx++;
        }
      }
    }

    if (writeOut) {
      writeBuffer.call(inputmask, input, getBuffer.call(inputmask), result ? result.forwardPosition : inputmask.caretPos.begin, initiatingEvent || new $.Event("checkval"), initiatingEvent && initiatingEvent.type === "input" && inputmask.undoValue !== getBuffer.call(inputmask).join("")); // for (var vndx in maskset.validPositions) {
      // 	if (maskset.validPositions[vndx].match.generated !== true) { //only remove non forced generated
      // 		delete maskset.validPositions[vndx].generatedInput; //clear generated markings ~ consider initializing with a  value as fully typed
      // 	}
      // }
    }

    opts.skipOptionalPartCharacter = skipOptionalPartCharacter;
  }

  function HandleNativePlaceholder(npt, value) {
    var inputmask = npt ? npt.inputmask : this;

    if (ie) {
      if (npt.inputmask._valueGet() !== value && (npt.placeholder !== value || npt.placeholder === "")) {
        var buffer = getBuffer.call(inputmask).slice(),
            nptValue = npt.inputmask._valueGet();

        if (nptValue !== value) {
          var lvp = getLastValidPosition.call(inputmask);

          if (lvp === -1 && nptValue === getBufferTemplate.call(inputmask).join("")) {
            buffer = [];
          } else if (lvp !== -1) {
            //clearout optional tail of the mask
            clearOptionalTail.call(inputmask, buffer);
          }

          writeBuffer(npt, buffer);
        }
      }
    } else if (npt.placeholder !== value) {
      npt.placeholder = value;
      if (npt.placeholder === "") npt.removeAttribute("placeholder");
    }
  }

  function unmaskedvalue(input) {
    var inputmask = input ? input.inputmask : this,
        opts = inputmask.opts,
        maskset = inputmask.maskset;

    if (input) {
      if (input.inputmask === undefined) {
        return input.value;
      }

      if (input.inputmask && input.inputmask.refreshValue) {
        //forced refresh from the value form.reset
        applyInputValue(input, input.inputmask._valueGet(true));
      }
    }

    var umValue = [],
        vps = maskset.validPositions;

    for (var pndx in vps) {
      if (vps[pndx] && vps[pndx].match && (vps[pndx].match.static != true || Array.isArray(maskset.metadata) && vps[pndx].generatedInput !== true)) {
        //only include generated input with multiple masks (check on metadata)
        umValue.push(vps[pndx].input);
      }
    }

    var unmaskedValue = umValue.length === 0 ? "" : (inputmask.isRTL ? umValue.reverse() : umValue).join("");

    if (typeof opts.onUnMask === "function") {
      var bufferValue = (inputmask.isRTL ? getBuffer.call(inputmask).slice().reverse() : getBuffer.call(inputmask)).join("");
      unmaskedValue = opts.onUnMask.call(inputmask, bufferValue, unmaskedValue, opts);
    }

    return unmaskedValue;
  }

  function writeBuffer(input, buffer, caretPos, event, triggerEvents) {
    var inputmask = input ? input.inputmask : this,
        opts = inputmask.opts,
        $ = inputmask.dependencyLib;

    if (event && typeof opts.onBeforeWrite === "function") {
      //    buffer = buffer.slice(); //prevent uncontrolled manipulation of the internal buffer
      var result = opts.onBeforeWrite.call(inputmask, event, buffer, caretPos, opts);

      if (result) {
        if (result.refreshFromBuffer) {
          var refresh = result.refreshFromBuffer;
          refreshFromBuffer.call(inputmask, refresh === true ? refresh : refresh.start, refresh.end, result.buffer || buffer);
          buffer = getBuffer.call(inputmask, true);
        }

        if (caretPos !== undefined) caretPos = result.caret !== undefined ? result.caret : caretPos;
      }
    }

    if (input !== undefined) {
      input.inputmask._valueSet(buffer.join(""));

      if (caretPos !== undefined && (event === undefined || event.type !== "blur")) {
        caret.call(inputmask, input, caretPos, undefined, undefined, event !== undefined && event.type === "keydown" && (event.keyCode === keyCode.DELETE || event.keyCode === keyCode.BACKSPACE));
      }

      if (triggerEvents === true) {
        var $input = $(input),
            nptVal = input.inputmask._valueGet();

        input.inputmask.skipInputEvent = true;
        $input.trigger("input");
        setTimeout(function () {
          //timeout needed for IE
          if (nptVal === getBufferTemplate.call(inputmask).join("")) {
            $input.trigger("cleared");
          } else if (isComplete.call(inputmask, buffer) === true) {
            $input.trigger("complete");
          }
        }, 0);
      }
    }
  }

  var EventHandlers = {
    keydownEvent: function keydownEvent(e) {
      var inputmask = this.inputmask,
          opts = inputmask.opts,
          $ = inputmask.dependencyLib,
          maskset = inputmask.maskset;
      var input = this,
          $input = $(input),
          k = e.keyCode,
          pos = caret.call(inputmask, input);
      var kdResult = opts.onKeyDown.call(this, e, getBuffer.call(inputmask), pos, opts);
      if (kdResult !== undefined) return kdResult; //backspace, delete, and escape get special treatment

      if (k === keyCode.BACKSPACE || k === keyCode.DELETE || iphone && k === keyCode.BACKSPACE_SAFARI || e.ctrlKey && k === keyCode.X && !("oncut" in input)) {
        //backspace/delete
        e.preventDefault(); //stop default action but allow propagation

        handleRemove.call(inputmask, input, k, pos);
        writeBuffer(input, getBuffer.call(inputmask, true), maskset.p, e, input.inputmask._valueGet() !== getBuffer.call(inputmask).join(""));
      } else if (k === keyCode.END || k === keyCode.PAGE_DOWN) {
        //when END or PAGE_DOWN pressed set position at lastmatch
        e.preventDefault();
        var caretPos = seekNext.call(inputmask, getLastValidPosition.call(inputmask));
        caret.call(inputmask, input, e.shiftKey ? pos.begin : caretPos, caretPos, true);
      } else if (k === keyCode.HOME && !e.shiftKey || k === keyCode.PAGE_UP) {
        //Home or page_up
        e.preventDefault();
        caret.call(inputmask, input, 0, e.shiftKey ? pos.begin : 0, true);
      } else if ((opts.undoOnEscape && k === keyCode.ESCAPE || k === 90 && e.ctrlKey) && e.altKey !== true) {
        //escape && undo && #762
        checkVal(input, true, false, inputmask.undoValue.split(""));
        $input.trigger("click"); // } else if (k === keyCode.INSERT && !(e.shiftKey || e.ctrlKey) && inputmask.userOptions.insertMode === undefined) { //insert
        // 	opts.insertMode = !opts.insertMode;
        // 	caret(input, pos.begin, pos.end);
      } else if (opts.tabThrough === true && k === keyCode.TAB) {
        if (e.shiftKey === true) {
          pos.end = seekPrevious.call(inputmask, pos.end, true);

          if (getTest.call(inputmask, pos.end - 1).match.static === true) {
            pos.end--;
          }

          pos.begin = seekPrevious.call(inputmask, pos.end, true);

          if (pos.begin >= 0 && pos.end > 0) {
            e.preventDefault();
            caret.call(inputmask, input, pos.begin, pos.end);
          }
        } else {
          pos.begin = seekNext.call(inputmask, pos.begin, true);
          pos.end = seekNext.call(inputmask, pos.begin, true);
          if (pos.end < maskset.maskLength) pos.end--;

          if (pos.begin <= maskset.maskLength) {
            e.preventDefault();
            caret.call(inputmask, input, pos.begin, pos.end);
          }
        }
      } else if (!e.shiftKey) {
        if (opts.insertModeVisual && opts.insertMode === false) {
          if (k === keyCode.RIGHT) {
            setTimeout(function () {
              var caretPos = caret.call(inputmask, input);
              caret.call(inputmask, input, caretPos.begin);
            }, 0);
          } else if (k === keyCode.LEFT) {
            setTimeout(function () {
              var caretPos = {
                begin: translatePosition.call(inputmask, input.inputmask.caretPos.begin),
                end: translatePosition.call(inputmask, input.inputmask.caretPos.end)
              };

              if (inputmask.isRTL) {
                caret.call(inputmask, input, caretPos.begin + (caretPos.begin === maskset.maskLength ? 0 : 1));
              } else {
                caret.call(inputmask, input, caretPos.begin - (caretPos.begin === 0 ? 0 : 1));
              }
            }, 0);
          }
        }
      }

      inputmask.ignorable = opts.ignorables.includes(k);
    },
    keypressEvent: function keypressEvent(e, checkval, writeOut, strict, ndx) {
      var inputmask = this.inputmask || this,
          opts = inputmask.opts,
          $ = inputmask.dependencyLib,
          maskset = inputmask.maskset;
      var input = inputmask.el,
          $input = $(input),
          k = e.which || e.charCode || e.keyCode;

      if (checkval !== true && !(e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || inputmask.ignorable)) {
        if (k === keyCode.ENTER && inputmask.undoValue !== getBuffer.call(inputmask).join("")) {
          inputmask.undoValue = getBuffer.call(inputmask).join(""); // e.preventDefault();

          setTimeout(function () {
            $input.trigger("change");
          }, 0);
        }

        inputmask.skipInputEvent = true; //skip the input as otherwise the skipped char could be picked up for validation by the inputfallback

        return true;
      } else if (k) {
        //special treat the decimal separator
        if ((k === 44 || k === 46) && e.location === 3 && opts.radixPoint !== "") k = opts.radixPoint.charCodeAt(0);
        var pos = checkval ? {
          begin: ndx,
          end: ndx
        } : caret.call(inputmask, input),
            forwardPosition,
            c = String.fromCharCode(k);
        maskset.writeOutBuffer = true;
        var valResult = isValid.call(inputmask, pos, c, strict, undefined, undefined, undefined, checkval);

        if (valResult !== false) {
          resetMaskSet.call(inputmask, true);
          forwardPosition = valResult.caret !== undefined ? valResult.caret : seekNext.call(inputmask, valResult.pos.begin ? valResult.pos.begin : valResult.pos);
          maskset.p = forwardPosition; //needed for checkval
        }

        forwardPosition = opts.numericInput && valResult.caret === undefined ? seekPrevious.call(inputmask, forwardPosition) : forwardPosition;

        if (writeOut !== false) {
          setTimeout(function () {
            opts.onKeyValidation.call(input, k, valResult);
          }, 0);

          if (maskset.writeOutBuffer && valResult !== false) {
            var buffer = getBuffer.call(inputmask);
            writeBuffer(input, buffer, forwardPosition, e, checkval !== true);
          }
        }

        e.preventDefault();

        if (checkval) {
          if (valResult !== false) valResult.forwardPosition = forwardPosition;
          return valResult;
        }
      }
    },
    keyupEvent: function keyupEvent(e) {
      var inputmask = this.inputmask;

      if (inputmask.isComposing && (e.keyCode === keyCode.KEY_229 || e.keyCode === keyCode.ENTER)) {
        inputmask.$el.trigger("input");
      }
    },
    pasteEvent: function pasteEvent(e) {
      var inputmask = this.inputmask,
          opts = inputmask.opts;

      var input = this,
          inputValue = inputmask._valueGet(true),
          caretPos = caret.call(inputmask, input),
          tempValue;

      if (inputmask.isRTL) {
        tempValue = caretPos.end;
        caretPos.end = caretPos.begin;
        caretPos.begin = tempValue;
      }

      var valueBeforeCaret = inputValue.substr(0, caretPos.begin),
          valueAfterCaret = inputValue.substr(caretPos.end, inputValue.length);
      if (valueBeforeCaret == (inputmask.isRTL ? getBufferTemplate.call(inputmask).slice().reverse() : getBufferTemplate.call(inputmask)).slice(0, caretPos.begin).join("")) valueBeforeCaret = "";
      if (valueAfterCaret == (inputmask.isRTL ? getBufferTemplate.call(inputmask).slice().reverse() : getBufferTemplate.call(inputmask)).slice(caretPos.end).join("")) valueAfterCaret = "";

      if (window.clipboardData && window.clipboardData.getData) {
        // IE
        inputValue = valueBeforeCaret + window.clipboardData.getData("Text") + valueAfterCaret;
      } else if (e.clipboardData && e.clipboardData.getData) {
        inputValue = valueBeforeCaret + e.clipboardData.getData("text/plain") + valueAfterCaret;
      } else {
        return true;
      } //allow native paste event as fallback ~ masking will continue by inputfallback


      var pasteValue = inputValue;

      if (typeof opts.onBeforePaste === "function") {
        pasteValue = opts.onBeforePaste.call(inputmask, inputValue, opts);

        if (pasteValue === false) {
          return e.preventDefault();
        }

        if (!pasteValue) {
          pasteValue = inputValue;
        }
      }

      checkVal(input, true, false, pasteValue.toString().split(""), e); // writeBuffer(input, getBuffer(), seekNext(getLastValidPosition()), e, inputmask.undoValue !== getBuffer().join(""));

      return e.preventDefault();
    },
    inputFallBackEvent: function inputFallBackEvent(e) {
      //fallback when keypress is not triggered
      var inputmask = this.inputmask,
          opts = inputmask.opts,
          $ = inputmask.dependencyLib;

      function ieMobileHandler(input, inputValue, caretPos) {
        if (iemobile) {
          //iemobile just sets the character at the end althought the caret position is correctly set
          var inputChar = inputValue.replace(getBuffer.call(inputmask).join(""), "");

          if (inputChar.length === 1) {
            var iv = inputValue.split("");
            iv.splice(caretPos.begin, 0, inputChar);
            inputValue = iv.join("");
          }
        }

        return inputValue;
      }

      function analyseChanges(inputValue, buffer, caretPos) {
        var frontPart = inputValue.substr(0, caretPos.begin).split(""),
            backPart = inputValue.substr(caretPos.begin).split(""),
            frontBufferPart = buffer.substr(0, caretPos.begin).split(""),
            backBufferPart = buffer.substr(caretPos.begin).split("");
        var fpl = frontPart.length >= frontBufferPart.length ? frontPart.length : frontBufferPart.length,
            bpl = backPart.length >= backBufferPart.length ? backPart.length : backBufferPart.length,
            bl,
            i,
            action = "",
            data = [],
            marker = "~",
            placeholder; //align buffers

        while (frontPart.length < fpl) {
          frontPart.push(marker);
        }

        while (frontBufferPart.length < fpl) {
          frontBufferPart.push(marker);
        }

        while (backPart.length < bpl) {
          backPart.unshift(marker);
        }

        while (backBufferPart.length < bpl) {
          backBufferPart.unshift(marker);
        }

        var newBuffer = frontPart.concat(backPart);
        var oldBuffer = frontBufferPart.concat(backBufferPart); // console.log("N " + newBuffer);
        // console.log("O " + oldBuffer);

        for (i = 0, bl = newBuffer.length; i < bl; i++) {
          placeholder = getPlaceholder.call(inputmask, translatePosition.call(inputmask, i));

          switch (action) {
            case "insertText":
              if (oldBuffer[i - 1] === newBuffer[i] && caretPos.begin == newBuffer.length - 1) {
                data.push(newBuffer[i]);
              }

              i = bl;
              break;

            case "insertReplacementText":
              if (newBuffer[i] === marker) {
                //extend selection
                caretPos.end++;
              } else {
                // breakout loop
                i = bl;
              }

              break;

            case "deleteContentBackward":
              if (newBuffer[i] === marker) {
                caretPos.end++;
              } else {
                //breakout loop
                i = bl;
              }

              break;

            default:
              if (newBuffer[i] !== oldBuffer[i]) {
                if ((newBuffer[i + 1] === marker || newBuffer[i + 1] === placeholder || newBuffer[i + 1] === undefined) && (oldBuffer[i] === placeholder && oldBuffer[i + 1] === marker || oldBuffer[i] === marker)) {
                  //basic insert
                  action = "insertText";
                  data.push(newBuffer[i]);
                  caretPos.begin--;
                  caretPos.end--;
                } else if (oldBuffer[i + 1] === marker && oldBuffer[i] === newBuffer[i + 1]) {
                  //insert between
                  action = "insertText";
                  data.push(newBuffer[i]);
                  caretPos.begin--;
                  caretPos.end--;
                } else if (newBuffer[i] !== placeholder && newBuffer[i] !== marker && (newBuffer[i + 1] === marker || oldBuffer[i] !== newBuffer[i] && oldBuffer[i + 1] === newBuffer[i + 1]
                /*single char replacement*/
                )) {
                  //replace selection
                  action = "insertReplacementText";
                  data.push(newBuffer[i]);
                  caretPos.begin--;
                } else if (newBuffer[i] === marker) {
                  //delete~backspace
                  action = "deleteContentBackward";
                  if (isMask.call(inputmask, translatePosition.call(inputmask, i), true) || oldBuffer[i] === opts.radixPoint) caretPos.end++;
                } else {
                  i = bl;
                }
              }

              break;
          }
        }

        return {
          action: action,
          data: data,
          caret: caretPos
        };
      }

      var input = this,
          inputValue = input.inputmask._valueGet(true),
          buffer = (inputmask.isRTL ? getBuffer.call(inputmask).slice().reverse() : getBuffer.call(inputmask)).join(""),
          caretPos = caret.call(inputmask, input, undefined, undefined, true);

      if (buffer !== inputValue) {
        // inputValue = radixPointHandler(input, inputValue, caretPos);
        inputValue = ieMobileHandler(input, inputValue, caretPos);
        var changes = analyseChanges(inputValue, buffer, caretPos); // console.log(JSON.stringify(changes));

        if ((input.inputmask.shadowRoot || document).activeElement !== input) {
          input.focus();
        }

        writeBuffer(input, getBuffer.call(inputmask));
        caret.call(inputmask, input, caretPos.begin, caretPos.end, true);

        switch (changes.action) {
          case "insertText":
          case "insertReplacementText":
            changes.data.forEach(function (entry, ndx) {
              var keypress = new $.Event("keypress");
              keypress.which = entry.charCodeAt(0);
              inputmask.ignorable = false; //make sure ignorable is ignored ;-)

              EventHandlers.keypressEvent.call(input, keypress);
            });
            setTimeout(function () {
              //#2195 trigger keyup to help some other plugins to track changes
              inputmask.$el.trigger("keyup");
            }, 0);
            break;

          case "deleteContentBackward":
            var keydown = new $.Event("keydown");
            keydown.keyCode = keyCode.BACKSPACE;
            EventHandlers.keydownEvent.call(input, keydown);
            break;

          default:
            applyInputValue(input, inputValue);
            break;
        }

        e.preventDefault();
      }
    },
    compositionendEvent: function compositionendEvent(e) {
      var inputmask = this.inputmask;
      inputmask.isComposing = false;
      inputmask.$el.trigger("input");
    },
    setValueEvent: function setValueEvent(e) {
      var inputmask = this.inputmask;
      var input = this,
          value = e && e.detail ? e.detail[0] : arguments[1];

      if (value === undefined) {
        value = input.inputmask._valueGet(true);
      }

      applyInputValue(input, value);

      if (e.detail && e.detail[1] !== undefined || arguments[2] !== undefined) {
        caret.call(inputmask, input, e.detail ? e.detail[1] : arguments[2]);
      }
    },
    focusEvent: function focusEvent(e) {
      var inputmask = this.inputmask,
          opts = inputmask.opts;

      var input = this,
          nptValue = input.inputmask._valueGet();

      if (opts.showMaskOnFocus) {
        if (nptValue !== getBuffer.call(inputmask).join("")) {
          writeBuffer(input, getBuffer.call(inputmask), seekNext.call(inputmask, getLastValidPosition.call(inputmask)));
        }
        /*else if (mouseEnter === false) { //only executed on focus without mouseenter
        caret(input, seekNext(getLastValidPosition()));
        }*/

      }

      if (opts.positionCaretOnTab === true && inputmask.mouseEnter === false && (!isComplete.call(inputmask, getBuffer.call(inputmask)) || getLastValidPosition.call(inputmask) === -1)) {
        EventHandlers.clickEvent.apply(input, [e, true]);
      }

      inputmask.undoValue = getBuffer.call(inputmask).join("");
    },
    invalidEvent: function invalidEvent(e) {
      this.inputmask.validationEvent = true;
    },
    mouseleaveEvent: function mouseleaveEvent() {
      var inputmask = this.inputmask,
          opts = inputmask.opts;
      var input = this;
      inputmask.mouseEnter = false;

      if (opts.clearMaskOnLostFocus && (input.inputmask.shadowRoot || document).activeElement !== input) {
        HandleNativePlaceholder(input, inputmask.originalPlaceholder);
      }
    },
    clickEvent: function clickEvent(e, tabbed) {
      var inputmask = this.inputmask;
      var input = this;

      if ((input.inputmask.shadowRoot || document).activeElement === input) {
        var newCaretPosition = determineNewCaretPosition.call(inputmask, caret.call(inputmask, input), tabbed);

        if (newCaretPosition !== undefined) {
          caret.call(inputmask, input, newCaretPosition);
        }
      }
    },
    cutEvent: function cutEvent(e) {
      var inputmask = this.inputmask,
          maskset = inputmask.maskset;
      var input = this,
          pos = caret.call(inputmask, input); //correct clipboardData

      var clipboardData = window.clipboardData || e.clipboardData,
          clipData = inputmask.isRTL ? getBuffer.call(inputmask).slice(pos.end, pos.begin) : getBuffer.call(inputmask).slice(pos.begin, pos.end);
      clipboardData.setData("text", inputmask.isRTL ? clipData.reverse().join("") : clipData.join(""));
      if (document.execCommand) document.execCommand("copy"); // copy selected content to system clipbaord

      handleRemove.call(inputmask, input, keyCode.DELETE, pos);
      writeBuffer(input, getBuffer.call(inputmask), maskset.p, e, inputmask.undoValue !== getBuffer.call(inputmask).join(""));
    },
    blurEvent: function blurEvent(e) {
      var inputmask = this.inputmask,
          opts = inputmask.opts,
          $ = inputmask.dependencyLib;
      var $input = $(this),
          input = this;

      if (input.inputmask) {
        HandleNativePlaceholder(input, inputmask.originalPlaceholder);

        var nptValue = input.inputmask._valueGet(),
            buffer = getBuffer.call(inputmask).slice();

        if (nptValue !== "") {
          if (opts.clearMaskOnLostFocus) {
            if (getLastValidPosition.call(inputmask) === -1 && nptValue === getBufferTemplate.call(inputmask).join("")) {
              buffer = [];
            } else {
              //clearout optional tail of the mask
              clearOptionalTail.call(inputmask, buffer);
            }
          }

          if (isComplete.call(inputmask, buffer) === false) {
            setTimeout(function () {
              $input.trigger("incomplete");
            }, 0);

            if (opts.clearIncomplete) {
              resetMaskSet.call(inputmask);

              if (opts.clearMaskOnLostFocus) {
                buffer = [];
              } else {
                buffer = getBufferTemplate.call(inputmask).slice();
              }
            }
          }

          writeBuffer(input, buffer, undefined, e);
        }

        if (inputmask.undoValue !== getBuffer.call(inputmask).join("")) {
          inputmask.undoValue = getBuffer.call(inputmask).join("");
          $input.trigger("change");
        }
      }
    },
    mouseenterEvent: function mouseenterEvent() {
      var inputmask = this.inputmask,
          opts = inputmask.opts;
      var input = this;
      inputmask.mouseEnter = true;

      if ((input.inputmask.shadowRoot || document).activeElement !== input) {
        if (inputmask.originalPlaceholder == undefined && input.placeholder !== inputmask.originalPlaceholder) {
          inputmask.originalPlaceholder = input.placeholder;
        }

        if (opts.showMaskOnHover) {
          HandleNativePlaceholder(input, (inputmask.isRTL ? getBufferTemplate.call(inputmask).slice().reverse() : getBufferTemplate.call(inputmask)).join(""));
        }
      }
    },
    submitEvent: function submitEvent() {
      //trigger change on submit if any
      var inputmask = this.inputmask,
          opts = inputmask.opts;

      if (inputmask.undoValue !== getBuffer.call(inputmask).join("")) {
        inputmask.$el.trigger("change");
      }

      if (opts.clearMaskOnLostFocus && getLastValidPosition.call(inputmask) === -1 && inputmask._valueGet && inputmask._valueGet() === getBufferTemplate.call(inputmask).join("")) {
        inputmask._valueSet(""); //clear masktemplete on submit and still has focus

      }

      if (opts.clearIncomplete && isComplete.call(inputmask, getBuffer.call(inputmask)) === false) {
        inputmask._valueSet("");
      }

      if (opts.removeMaskOnSubmit) {
        inputmask._valueSet(inputmask.unmaskedvalue(), true);

        setTimeout(function () {
          writeBuffer(inputmask.el, getBuffer.call(inputmask));
        }, 0);
      }
    },
    resetEvent: function resetEvent() {
      var inputmask = this.inputmask;
      inputmask.refreshValue = true; //indicate a forced refresh when there is a call to the value before leaving the triggering event fn

      setTimeout(function () {
        applyInputValue(inputmask.el, inputmask._valueGet(true));
      }, 0);
    }
  };

  function alternate(maskPos, c, strict, fromIsValid, rAltPos, selection) {
    //pos == true => generalize
    var inputmask = this,
        $ = this.dependencyLib,
        opts = this.opts,
        maskset = inputmask.maskset;
    var validPsClone = $.extend(true, {}, maskset.validPositions),
        tstClone = $.extend(true, {}, maskset.tests),
        lastAlt,
        alternation,
        isValidRslt = false,
        returnRslt = false,
        altPos,
        prevAltPos,
        i,
        validPos,
        decisionPos,
        lAltPos = rAltPos !== undefined ? rAltPos : getLastValidPosition.call(inputmask),
        nextPos,
        input,
        begin,
        end;

    if (selection) {
      begin = selection.begin;
      end = selection.end;

      if (selection.begin > selection.end) {
        begin = selection.end;
        end = selection.begin;
      }
    }

    if (lAltPos === -1 && rAltPos === undefined) {
      //do not recurse when already paste the beginning
      lastAlt = 0;
      prevAltPos = getTest.call(inputmask, lastAlt);
      alternation = prevAltPos.alternation;
    } else {
      //find last modified alternation
      for (; lAltPos >= 0; lAltPos--) {
        altPos = maskset.validPositions[lAltPos];

        if (altPos && altPos.alternation !== undefined) {
          if (prevAltPos && prevAltPos.locator[altPos.alternation] !== altPos.locator[altPos.alternation]) {
            break;
          }

          lastAlt = lAltPos;
          alternation = maskset.validPositions[lastAlt].alternation;
          prevAltPos = altPos;
        }
      }
    }

    if (alternation !== undefined) {
      decisionPos = parseInt(lastAlt);
      maskset.excludes[decisionPos] = maskset.excludes[decisionPos] || [];

      if (maskPos !== true) {
        //generalize
        maskset.excludes[decisionPos].push(getDecisionTaker(prevAltPos) + ":" + prevAltPos.alternation);
      }

      var validInputs = [],
          resultPos = -1;

      for (i = decisionPos; i < getLastValidPosition.call(inputmask, undefined, true) + 1; i++) {
        if (resultPos === -1 && maskPos <= i && c !== undefined) {
          validInputs.push(c);
          resultPos = validInputs.length - 1;
        }

        validPos = maskset.validPositions[i];

        if (validPos && validPos.generatedInput !== true && (selection === undefined || i < begin || i >= end)) {
          validInputs.push(validPos.input);
        }

        delete maskset.validPositions[i];
      }

      if (resultPos === -1 && c !== undefined) {
        validInputs.push(c);
        resultPos = validInputs.length - 1;
      }

      while (maskset.excludes[decisionPos] !== undefined && maskset.excludes[decisionPos].length < 10) {
        // maskset.tests[decisionPos] = undefined; //clear decisionPos
        maskset.tests = {}; //clear all

        resetMaskSet.call(inputmask, true); //clear getbuffer

        isValidRslt = true;

        for (i = 0; i < validInputs.length; i++) {
          nextPos = isValidRslt.caret || getLastValidPosition.call(inputmask, undefined, true) + 1;
          input = validInputs[i];

          if (!(isValidRslt = isValid.call(inputmask, nextPos, input, false, fromIsValid, true))) {
            break;
          }

          if (i === resultPos) {
            returnRslt = isValidRslt;
          }

          if (maskPos == true && isValidRslt) {
            //return validposition on generalise
            returnRslt = {
              caretPos: i
            };
          }
        }

        if (!isValidRslt) {
          resetMaskSet.call(inputmask);
          prevAltPos = getTest.call(inputmask, decisionPos); //get the current decisionPos to exclude ~ needs to be before restoring the initial validation
          //reset & revert

          maskset.validPositions = $.extend(true, {}, validPsClone);
          maskset.tests = $.extend(true, {}, tstClone); //refresh tests after possible alternating

          if (maskset.excludes[decisionPos]) {
            var decisionTaker = getDecisionTaker(prevAltPos);

            if (maskset.excludes[decisionPos].indexOf(decisionTaker + ":" + prevAltPos.alternation) !== -1) {
              returnRslt = alternate.call(inputmask, maskPos, c, strict, fromIsValid, decisionPos - 1, selection);
              break;
            }

            maskset.excludes[decisionPos].push(decisionTaker + ":" + prevAltPos.alternation);

            for (i = decisionPos; i < getLastValidPosition.call(inputmask, undefined, true) + 1; i++) {
              delete maskset.validPositions[i];
            }
          } else {
            //latest alternation
            returnRslt = alternate.call(inputmask, maskPos, c, strict, fromIsValid, decisionPos - 1, selection);
            break;
          }
        } else {
          break;
        }
      }
    } //reset alternation excludes


    if (!returnRslt || opts.keepStatic !== false) {
      delete maskset.excludes[decisionPos];
    }

    return returnRslt;
  }

  function casing(elem, test, pos) {
    var opts = this.opts,
        maskset = this.maskset;

    switch (opts.casing || test.casing) {
      case "upper":
        elem = elem.toUpperCase();
        break;

      case "lower":
        elem = elem.toLowerCase();
        break;

      case "title":
        var posBefore = maskset.validPositions[pos - 1];

        if (pos === 0 || posBefore && posBefore.input === String.fromCharCode(keyCode.SPACE)) {
          elem = elem.toUpperCase();
        } else {
          elem = elem.toLowerCase();
        }

        break;

      default:
        if (typeof opts.casing === "function") {
          var args = Array.prototype.slice.call(arguments);
          args.push(maskset.validPositions);
          elem = opts.casing.apply(this, args);
        }

    }

    return elem;
  } //tobe put on prototype?


  function checkAlternationMatch(altArr1, altArr2, na) {
    var opts = this.opts;
    var altArrC = opts.greedy ? altArr2 : altArr2.slice(0, 1),
        isMatch = false,
        naArr = na !== undefined ? na.split(",") : [],
        naNdx; //remove no alternate indexes from alternation array

    for (var i = 0; i < naArr.length; i++) {
      if ((naNdx = altArr1.indexOf(naArr[i])) !== -1) {
        altArr1.splice(naNdx, 1);
      }
    }

    for (var alndx = 0; alndx < altArr1.length; alndx++) {
      if (altArrC.includes(altArr1[alndx])) {
        isMatch = true;
        break;
      }
    }

    return isMatch;
  } //tobe put on prototype?


  function handleRemove(input, k, pos, strict, fromIsValid) {
    var inputmask = this,
        maskset = this.maskset,
        opts = this.opts;

    if (opts.numericInput || inputmask.isRTL) {
      if (k === keyCode.BACKSPACE) {
        k = keyCode.DELETE;
      } else if (k === keyCode.DELETE) {
        k = keyCode.BACKSPACE;
      }

      if (inputmask.isRTL) {
        var pend = pos.end;
        pos.end = pos.begin;
        pos.begin = pend;
      }
    }

    var lvp = getLastValidPosition.call(inputmask, undefined, true);

    if (pos.end >= getBuffer.call(inputmask).length && lvp >= pos.end) {
      //handle numeric negate symbol offset, due to  dynamic jit masking
      pos.end = lvp + 1;
    }

    if (k === keyCode.BACKSPACE) {
      if (pos.end - pos.begin < 1) {
        pos.begin = seekPrevious.call(inputmask, pos.begin);
      }
    } else if (k === keyCode.DELETE) {
      if (pos.begin === pos.end) {
        pos.end = isMask.call(inputmask, pos.end, true, true) ? pos.end + 1 : seekNext.call(inputmask, pos.end) + 1;
      }
    }

    var offset;

    if ((offset = revalidateMask.call(inputmask, pos)) !== false) {
      if (strict !== true && opts.keepStatic !== false || opts.regex !== null && getTest.call(inputmask, pos.begin).match.def.indexOf("|") !== -1) {
        //TODO NEEDS BETTER CHECK WHEN TO ALTERNATE  ~ opts regex isn"t good enough
        var result = alternate.call(inputmask, true);

        if (result) {
          var newPos = result.caret !== undefined ? result.caret : result.pos ? seekNext.call(inputmask, result.pos.begin ? result.pos.begin : result.pos) : getLastValidPosition.call(inputmask, -1, true);

          if (k !== keyCode.DELETE || pos.begin > newPos) {
            pos.begin == newPos;
          }
        }
      }

      if (strict !== true) {
        maskset.p = k === keyCode.DELETE ? pos.begin + offset : pos.begin;
      }
    }
  } //tobe put on prototype?


  function isComplete(buffer) {
    //return true / false / undefined (repeat *)
    var inputmask = this,
        opts = this.opts,
        maskset = this.maskset;
    if (typeof opts.isComplete === "function") return opts.isComplete(buffer, opts);
    if (opts.repeat === "*") return undefined;
    var complete = false,
        lrp = determineLastRequiredPosition.call(inputmask, true),
        aml = seekPrevious.call(inputmask, lrp.l);

    if (lrp.def === undefined || lrp.def.newBlockMarker || lrp.def.optionality || lrp.def.optionalQuantifier) {
      complete = true;

      for (var i = 0; i <= aml; i++) {
        var test = getTestTemplate.call(inputmask, i).match;

        if (test.static !== true && maskset.validPositions[i] === undefined && test.optionality !== true && test.optionalQuantifier !== true || test.static === true && buffer[i] !== getPlaceholder.call(inputmask, i, test)) {
          complete = false;
          break;
        }
      }
    }

    return complete;
  } //tobe put on prototype?


  function isValid(pos, c, strict, fromIsValid, fromAlternate, validateOnly, fromCheckval) {
    //strict true ~ no correction or autofill
    var inputmask = this,
        $ = this.dependencyLib,
        opts = this.opts,
        el = inputmask.el,
        maskset = inputmask.maskset;

    function isSelection(posObj) {
      return inputmask.isRTL ? posObj.begin - posObj.end > 1 || posObj.begin - posObj.end === 1 : posObj.end - posObj.begin > 1 || posObj.end - posObj.begin === 1;
    }

    strict = strict === true; //always set a value to strict to prevent possible strange behavior in the extensions

    var maskPos = pos;

    if (pos.begin !== undefined) {
      //position was a position object - used to handle a delete by typing over a selection
      maskPos = inputmask.isRTL ? pos.end : pos.begin;
    }

    function processCommandObject(commandObj) {
      if (commandObj !== undefined) {
        if (commandObj.remove !== undefined) {
          //remove position(s)
          if (!Array.isArray(commandObj.remove)) commandObj.remove = [commandObj.remove];
          commandObj.remove.sort(function (a, b) {
            return b.pos - a.pos;
          }).forEach(function (lmnt) {
            revalidateMask.call(inputmask, {
              begin: lmnt,
              end: lmnt + 1
            });
          });
          commandObj.remove = undefined;
        }

        if (commandObj.insert !== undefined) {
          //insert position(s)
          if (!Array.isArray(commandObj.insert)) commandObj.insert = [commandObj.insert];
          commandObj.insert.sort(function (a, b) {
            return a.pos - b.pos;
          }).forEach(function (lmnt) {
            if (lmnt.c !== "") {
              isValid.call(inputmask, lmnt.pos, lmnt.c, lmnt.strict !== undefined ? lmnt.strict : true, lmnt.fromIsValid !== undefined ? lmnt.fromIsValid : fromIsValid);
            }
          });
          commandObj.insert = undefined;
        }

        if (commandObj.refreshFromBuffer && commandObj.buffer) {
          var refresh = commandObj.refreshFromBuffer;
          refreshFromBuffer.call(inputmask, refresh === true ? refresh : refresh.start, refresh.end, commandObj.buffer);
          commandObj.refreshFromBuffer = undefined;
        }

        if (commandObj.rewritePosition !== undefined) {
          maskPos = commandObj.rewritePosition; // commandObj.rewritePosition = undefined;

          commandObj = true;
        }
      }

      return commandObj;
    }

    function _isValid(position, c, strict) {
      var rslt = false;
      getTests.call(inputmask, position).every(function (tst, ndx) {
        var test = tst.match; //make sure the buffer is set and correct

        getBuffer.call(inputmask, true); //return is false or a json object => { pos: ??, c: ??} or true

        rslt = test.fn != null ? test.fn.test(c, maskset, position, strict, opts, isSelection(pos)) : (c === test.def || c === opts.skipOptionalPartCharacter) && test.def !== "" ? //non mask
        {
          c: getPlaceholder.call(inputmask, position, test, true) || test.def,
          pos: position
        } : false;

        if (rslt !== false) {
          var elem = rslt.c !== undefined ? rslt.c : c,
              validatedPos = position;
          elem = elem === opts.skipOptionalPartCharacter && test.static === true ? getPlaceholder.call(inputmask, position, test, true) || test.def : elem;
          rslt = processCommandObject(rslt);

          if (rslt !== true && rslt.pos !== undefined && rslt.pos !== position) {
            //their is a position offset
            validatedPos = rslt.pos;
          }

          if (rslt !== true && rslt.pos === undefined && rslt.c === undefined) {
            return false; //breakout if nothing to insert
          }

          if (revalidateMask.call(inputmask, pos, $.extend({}, tst, {
            "input": casing.call(inputmask, elem, test, validatedPos)
          }), fromIsValid, validatedPos) === false) {
            rslt = false;
          }

          return false; //break from loop
        }

        return true;
      });
      return rslt;
    }

    var result = true,
        positionsClone = $.extend(true, {}, maskset.validPositions); //clone the currentPositions

    if (opts.keepStatic === false && maskset.excludes[maskPos] !== undefined && fromAlternate !== true && fromIsValid !== true) {
      for (var i = maskPos; i < (inputmask.isRTL ? pos.begin : pos.end); i++) {
        if (maskset.excludes[i] !== undefined) {
          maskset.excludes[i] = undefined;
          delete maskset.tests[i];
        }
      }
    }

    if (typeof opts.preValidation === "function" && fromIsValid !== true && validateOnly !== true) {
      result = opts.preValidation.call(el, getBuffer.call(inputmask), maskPos, c, isSelection(pos), opts, maskset, pos, strict || fromAlternate);
      result = processCommandObject(result);
    }

    if (result === true) {
      //preValidation result
      if (inputmask.maxLength === undefined || maskPos < inputmask.maxLength) {
        result = _isValid(maskPos, c, strict);

        if ((!strict || fromIsValid === true) && result === false && validateOnly !== true) {
          var currentPosValid = maskset.validPositions[maskPos];

          if (currentPosValid && currentPosValid.match.static === true && (currentPosValid.match.def === c || c === opts.skipOptionalPartCharacter)) {
            result = {
              "caret": seekNext.call(inputmask, maskPos)
            };
          } else {
            if (opts.insertMode || maskset.validPositions[seekNext.call(inputmask, maskPos)] === undefined || pos.end > maskPos) {
              //does the input match on a further position?
              var skip = false;

              if (maskset.jitOffset[maskPos] && maskset.validPositions[seekNext.call(inputmask, maskPos)] === undefined) {
                result = isValid.call(inputmask, maskPos + maskset.jitOffset[maskPos], c, true);

                if (result !== false) {
                  if (fromAlternate !== true) result.caret = maskPos;
                  skip = true;
                }
              }

              if (pos.end > maskPos) {
                maskset.validPositions[maskPos] = undefined;
              }

              if (!skip && !isMask.call(inputmask, maskPos, opts.keepStatic && maskPos === 0)) {
                for (var nPos = maskPos + 1, snPos = seekNext.call(inputmask, maskPos, false, maskPos !== 0); nPos <= snPos; nPos++) {
                  // if (!isMask(nPos, true)) {
                  // 	continue;
                  // }
                  result = _isValid(nPos, c, strict);

                  if (result !== false) {
                    result = trackbackPositions.call(inputmask, maskPos, result.pos !== undefined ? result.pos : nPos) || result;
                    maskPos = nPos;
                    break;
                  }
                }
              }
            }
          }
        }
      } else {
        result = false;
      }

      if (result === false && opts.keepStatic && (isComplete.call(inputmask, getBuffer.call(inputmask)) || maskPos === 0) && !strict && fromAlternate !== true) {
        //try fuzzy alternator logic
        result = alternate.call(inputmask, maskPos, c, strict, fromIsValid, undefined, pos);
      } else if (isSelection(pos) && maskset.tests[maskPos] && maskset.tests[maskPos].length > 1 && opts.keepStatic && !strict && fromAlternate !== true) {
        //selection clears an alternated keepstatic mask ~ #2189
        result = alternate.call(inputmask, true);
      }

      if (result === true) {
        result = {
          "pos": maskPos
        };
      }
    }

    if (typeof opts.postValidation === "function" && fromIsValid !== true && validateOnly !== true) {
      var postResult = opts.postValidation.call(el, getBuffer.call(inputmask, true), pos.begin !== undefined ? inputmask.isRTL ? pos.end : pos.begin : pos, c, result, opts, maskset, strict, fromCheckval);

      if (postResult !== undefined) {
        result = postResult === true ? result : postResult;
      }
    }

    if (result && result.pos === undefined) {
      result.pos = maskPos;
    }

    if (result === false || validateOnly === true) {
      resetMaskSet.call(inputmask, true);
      maskset.validPositions = $.extend(true, {}, positionsClone); //revert validation changes
    } else {
      trackbackPositions.call(inputmask, undefined, maskPos, true);
    }

    var endResult = processCommandObject(result); // console.log("returned result " + JSON.stringify(endResult));

    return endResult;
  } //tobe put on prototype?


  function positionCanMatchDefinition(pos, testDefinition, opts) {
    var inputmask = this,
        maskset = this.maskset;
    var valid = false,
        tests = getTests.call(inputmask, pos);

    for (var tndx = 0; tndx < tests.length; tndx++) {
      if (tests[tndx].match && (tests[tndx].match["nativeDef"] === testDefinition.match[opts.shiftPositions ? "def" : "nativeDef"] && (!opts.shiftPositions || !testDefinition.match.static) || tests[tndx].match["nativeDef"] === testDefinition.match["nativeDef"])) {
        valid = true;
        break;
      } else if (tests[tndx].match && tests[tndx].match["def"] === testDefinition.match["nativeDef"]) {
        valid = undefined;
        break;
      }
    }

    if (valid === false) {
      if (maskset.jitOffset[pos] !== undefined) {
        valid = positionCanMatchDefinition.call(inputmask, pos + maskset.jitOffset[pos], testDefinition, opts);
      }
    }

    return valid;
  } //tobe put on prototype?


  function refreshFromBuffer(start, end, buffer) {
    var inputmask = this,
        maskset = this.maskset,
        opts = this.opts,
        $ = this.dependencyLib,
        el = inputmask.el; // checkVal.call(inputmask, el, false, true, isRTL ? buffer.reverse() : buffer);

    var i,
        p,
        skipOptionalPartCharacter = opts.skipOptionalPartCharacter,
        bffr = inputmask.isRTL ? buffer.slice().reverse() : buffer;
    opts.skipOptionalPartCharacter = "";

    if (start === true) {
      resetMaskSet.call(inputmask);
      maskset.tests = {}; //refresh tests after possible alternating

      start = 0;
      end = buffer.length;
      p = determineNewCaretPosition.call(inputmask, {
        begin: 0,
        end: 0
      }, false).begin;
    } else {
      for (i = start; i < end; i++) {
        delete maskset.validPositions[i];
      }

      p = start;
    }

    var keypress = new $.Event("keypress");

    for (i = start; i < end; i++) {
      keypress.which = bffr[i].toString().charCodeAt(0);
      inputmask.ignorable = false; //make sure ignorable is ignored ;-)

      var valResult = EventHandlers.keypressEvent.call(el, keypress, true, false, false, p);

      if (valResult !== false) {
        p = valResult.forwardPosition;
      }
    }

    opts.skipOptionalPartCharacter = skipOptionalPartCharacter;
  } //tobe put on prototype?
  //fill in best positions according the current input


  function trackbackPositions(originalPos, newPos, fillOnly) {
    var inputmask = this,
        maskset = this.maskset,
        $ = this.dependencyLib; // console.log("trackbackPositions " + originalPos + " " + newPos);

    if (originalPos === undefined) {
      //find previous valid
      for (originalPos = newPos - 1; originalPos > 0; originalPos--) {
        if (maskset.validPositions[originalPos]) break;
      }
    }

    for (var ps = originalPos; ps < newPos; ps++) {
      if (maskset.validPositions[ps] === undefined && !isMask.call(inputmask, ps, true)) {
        var vp = ps == 0 ? getTest.call(inputmask, ps) : maskset.validPositions[ps - 1];

        if (vp) {
          var tests = getTests.call(inputmask, ps).slice();
          if (tests[tests.length - 1].match.def === "") tests.pop();
          var bestMatch = determineTestTemplate.call(inputmask, ps, tests),
              np;

          if (bestMatch && (bestMatch.match.jit !== true || bestMatch.match.newBlockMarker === "master" && (np = maskset.validPositions[ps + 1]) && np.match.optionalQuantifier === true)) {
            bestMatch = $.extend({}, bestMatch, {
              "input": getPlaceholder.call(inputmask, ps, bestMatch.match, true) || bestMatch.match.def
            });
            bestMatch.generatedInput = true;
            revalidateMask.call(inputmask, ps, bestMatch, true);

            if (fillOnly !== true) {
              //revalidate the new position to update the locator value
              var cvpInput = maskset.validPositions[newPos].input;
              maskset.validPositions[newPos] = undefined;
              return isValid.call(inputmask, newPos, cvpInput, true, true);
            }
          }
        }
      }
    }
  } //tobe put on prototype?


  function revalidateMask(pos, validTest, fromIsValid, validatedPos) {
    var inputmask = this,
        maskset = this.maskset,
        opts = this.opts,
        $ = this.dependencyLib;

    function IsEnclosedStatic(pos, valids, selection) {
      var posMatch = valids[pos];

      if (posMatch !== undefined && posMatch.match.static === true && posMatch.match.optionality !== true && (valids[0] === undefined || valids[0].alternation === undefined)) {
        var prevMatch = selection.begin <= pos - 1 ? valids[pos - 1] && valids[pos - 1].match.static === true && valids[pos - 1] : valids[pos - 1],
            nextMatch = selection.end > pos + 1 ? valids[pos + 1] && valids[pos + 1].match.static === true && valids[pos + 1] : valids[pos + 1];
        return prevMatch && nextMatch;
      }

      return false;
    }

    var offset = 0,
        begin = pos.begin !== undefined ? pos.begin : pos,
        end = pos.end !== undefined ? pos.end : pos;

    if (pos.begin > pos.end) {
      begin = pos.end;
      end = pos.begin;
    }

    validatedPos = validatedPos !== undefined ? validatedPos : begin;

    if (begin !== end || opts.insertMode && maskset.validPositions[validatedPos] !== undefined && fromIsValid === undefined || validTest === undefined) {
      //reposition & revalidate others
      var positionsClone = $.extend(true, {}, maskset.validPositions),
          lvp = getLastValidPosition.call(inputmask, undefined, true),
          i;
      maskset.p = begin; //needed for alternated position after overtype selection

      for (i = lvp; i >= begin; i--) {
        delete maskset.validPositions[i];
        if (validTest === undefined) delete maskset.tests[i + 1];
      }

      var valid = true,
          j = validatedPos,
          posMatch = j,
          t,
          canMatch;

      if (validTest) {
        maskset.validPositions[validatedPos] = $.extend(true, {}, validTest);
        posMatch++;
        j++;
      }

      for (i = validTest ? end : end - 1; i <= lvp; i++) {
        if ((t = positionsClone[i]) !== undefined && t.generatedInput !== true && (i >= end || i >= begin && IsEnclosedStatic(i, positionsClone, {
          begin: begin,
          end: end
        }))) {
          while (getTest.call(inputmask, posMatch).match.def !== "") {
            //loop needed to match further positions
            if ((canMatch = positionCanMatchDefinition.call(inputmask, posMatch, t, opts)) !== false || t.match.def === "+") {
              //validated match //we still need some hackery for the + validator (numeric alias)
              if (t.match.def === "+") getBuffer.call(inputmask, true);
              var result = isValid.call(inputmask, posMatch, t.input, t.match.def !== "+", t.match.def !== "+");
              valid = result !== false;
              j = (result.pos || posMatch) + 1;
              if (!valid && canMatch) break;
            } else {
              valid = false;
            }

            if (valid) {
              if (validTest === undefined && t.match.static && i === pos.begin) offset++;
              break;
            }

            if (!valid && posMatch > maskset.maskLength) {
              break;
            }

            posMatch++;
          }

          if (getTest.call(inputmask, posMatch).match.def == "") {
            valid = false;
          } //restore position


          posMatch = j;
        }

        if (!valid) break;
      }

      if (!valid) {
        maskset.validPositions = $.extend(true, {}, positionsClone);
        resetMaskSet.call(inputmask, true);
        return false;
      }
    } else if (validTest && getTest.call(inputmask, validatedPos).match.cd === validTest.match.cd) {
      maskset.validPositions[validatedPos] = $.extend(true, {}, validTest);
    }

    resetMaskSet.call(inputmask, true);
    return offset;
  }

  function caret(input, begin, end, notranslate, isDelete) {
    var inputmask = this,
        opts = this.opts;
    var range;

    if (begin !== undefined) {
      if (Array.isArray(begin)) {
        end = inputmask.isRTL ? begin[0] : begin[1];
        begin = inputmask.isRTL ? begin[1] : begin[0];
      }

      if (begin.begin !== undefined) {
        end = inputmask.isRTL ? begin.begin : begin.end;
        begin = inputmask.isRTL ? begin.end : begin.begin;
      }

      if (typeof begin === "number") {
        begin = notranslate ? begin : translatePosition.call(inputmask, begin);
        end = notranslate ? end : translatePosition.call(inputmask, end);
        end = typeof end == "number" ? end : begin; // if (!$(input).is(":visible")) {
        // 	return;
        // }

        var scrollCalc = parseInt(((input.ownerDocument.defaultView || window).getComputedStyle ? (input.ownerDocument.defaultView || window).getComputedStyle(input, null) : input.currentStyle).fontSize) * end;
        input.scrollLeft = scrollCalc > input.scrollWidth ? scrollCalc : 0;
        input.inputmask.caretPos = {
          begin: begin,
          end: end
        }; //track caret internally

        if (opts.insertModeVisual && opts.insertMode === false && begin === end) {
          if (!isDelete) {
            end++; //set visualization for insert/overwrite mode
          }
        }

        if (input === (input.inputmask.shadowRoot || document).activeElement) {
          if ("setSelectionRange" in input) {
            input.setSelectionRange(begin, end);
          } else if (window.getSelection) {
            range = document.createRange();

            if (input.firstChild === undefined || input.firstChild === null) {
              var textNode = document.createTextNode("");
              input.appendChild(textNode);
            }

            range.setStart(input.firstChild, begin < input.inputmask._valueGet().length ? begin : input.inputmask._valueGet().length);
            range.setEnd(input.firstChild, end < input.inputmask._valueGet().length ? end : input.inputmask._valueGet().length);
            range.collapse(true);
            var sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range); //input.focus();
          } else if (input.createTextRange) {
            range = input.createTextRange();
            range.collapse(true);
            range.moveEnd("character", end);
            range.moveStart("character", begin);
            range.select();
          }
        }
      }
    } else {
      if ("selectionStart" in input && "selectionEnd" in input) {
        begin = input.selectionStart;
        end = input.selectionEnd;
      } else if (window.getSelection) {
        range = window.getSelection().getRangeAt(0);

        if (range.commonAncestorContainer.parentNode === input || range.commonAncestorContainer === input) {
          begin = range.startOffset;
          end = range.endOffset;
        }
      } else if (document.selection && document.selection.createRange) {
        range = document.selection.createRange();
        begin = 0 - range.duplicate().moveStart("character", -input.inputmask._valueGet().length);
        end = begin + range.text.length;
      } // if (opts.insertModeVisual && opts.insertMode === false && begin === (end - 1)) end--; //correct caret for insert/overwrite mode

      /*eslint-disable consistent-return */


      return {
        "begin": notranslate ? begin : translatePosition.call(inputmask, begin),
        "end": notranslate ? end : translatePosition.call(inputmask, end)
      };
      /*eslint-enable consistent-return */
    }
  } //tobe put on prototype?


  function determineLastRequiredPosition(returnDefinition) {
    var inputmask = this,
        maskset = this.maskset,
        $ = this.dependencyLib;
    var buffer = getMaskTemplate.call(inputmask, true, getLastValidPosition.call(inputmask), true, true),
        bl = buffer.length,
        pos,
        lvp = getLastValidPosition.call(inputmask),
        positions = {},
        lvTest = maskset.validPositions[lvp],
        ndxIntlzr = lvTest !== undefined ? lvTest.locator.slice() : undefined,
        testPos;

    for (pos = lvp + 1; pos < buffer.length; pos++) {
      testPos = getTestTemplate.call(inputmask, pos, ndxIntlzr, pos - 1);
      ndxIntlzr = testPos.locator.slice();
      positions[pos] = $.extend(true, {}, testPos);
    }

    var lvTestAlt = lvTest && lvTest.alternation !== undefined ? lvTest.locator[lvTest.alternation] : undefined;

    for (pos = bl - 1; pos > lvp; pos--) {
      testPos = positions[pos];

      if ((testPos.match.optionality || testPos.match.optionalQuantifier && testPos.match.newBlockMarker || lvTestAlt && (lvTestAlt !== positions[pos].locator[lvTest.alternation] && testPos.match.static != true || testPos.match.static === true && testPos.locator[lvTest.alternation] && checkAlternationMatch.call(inputmask, testPos.locator[lvTest.alternation].toString().split(","), lvTestAlt.toString().split(",")) && getTests.call(inputmask, pos)[0].def !== "")) && buffer[pos] === getPlaceholder.call(inputmask, pos, testPos.match)) {
        bl--;
      } else {
        break;
      }
    }

    return returnDefinition ? {
      "l": bl,
      "def": positions[bl] ? positions[bl].match : undefined
    } : bl;
  } //tobe put on prototype?


  function determineNewCaretPosition(selectedCaret, tabbed) {
    var inputmask = this,
        maskset = this.maskset,
        opts = this.opts;

    function doRadixFocus(clickPos) {
      if (opts.radixPoint !== "" && opts.digits !== 0) {
        var vps = maskset.validPositions;

        if (vps[clickPos] === undefined || vps[clickPos].input === getPlaceholder.call(inputmask, clickPos)) {
          if (clickPos < seekNext.call(inputmask, -1)) return true;
          var radixPos = getBuffer.call(inputmask).indexOf(opts.radixPoint);

          if (radixPos !== -1) {
            for (var vp in vps) {
              if (vps[vp] && radixPos < vp && vps[vp].input !== getPlaceholder.call(inputmask, vp)) {
                return false;
              }
            }

            return true;
          }
        }
      }

      return false;
    }

    if (tabbed) {
      if (inputmask.isRTL) {
        selectedCaret.end = selectedCaret.begin;
      } else {
        selectedCaret.begin = selectedCaret.end;
      }
    }

    if (selectedCaret.begin === selectedCaret.end) {
      switch (opts.positionCaretOnClick) {
        case "none":
          break;

        case "select":
          selectedCaret = {
            begin: 0,
            end: getBuffer.call(inputmask).length
          };
          break;

        case "ignore":
          selectedCaret.end = selectedCaret.begin = seekNext.call(inputmask, getLastValidPosition.call(inputmask));
          break;

        case "radixFocus":
          if (doRadixFocus(selectedCaret.begin)) {
            var radixPos = getBuffer.call(inputmask).join("").indexOf(opts.radixPoint);
            selectedCaret.end = selectedCaret.begin = opts.numericInput ? seekNext.call(inputmask, radixPos) : radixPos;
            break;
          }

        //fallback to lvp
        // eslint-disable-next-line no-fallthrough

        default:
          //lvp:
          var clickPosition = selectedCaret.begin,
              lvclickPosition = getLastValidPosition.call(inputmask, clickPosition, true),
              lastPosition = seekNext.call(inputmask, lvclickPosition === -1 && !isMask.call(inputmask, 0) ? -1 : lvclickPosition);

          if (clickPosition <= lastPosition) {
            selectedCaret.end = selectedCaret.begin = !isMask.call(inputmask, clickPosition, false, true) ? seekNext.call(inputmask, clickPosition) : clickPosition;
          } else {
            var lvp = maskset.validPositions[lvclickPosition],
                tt = getTestTemplate.call(inputmask, lastPosition, lvp ? lvp.match.locator : undefined, lvp),
                placeholder = getPlaceholder.call(inputmask, lastPosition, tt.match);

            if (placeholder !== "" && getBuffer.call(inputmask)[lastPosition] !== placeholder && tt.match.optionalQuantifier !== true && tt.match.newBlockMarker !== true || !isMask.call(inputmask, lastPosition, opts.keepStatic, true) && tt.match.def === placeholder) {
              var newPos = seekNext.call(inputmask, lastPosition);

              if (clickPosition >= newPos || clickPosition === lastPosition) {
                lastPosition = newPos;
              }
            }

            selectedCaret.end = selectedCaret.begin = lastPosition;
          }

      }

      return selectedCaret;
    }
  } //tobe put on prototype?


  function getBuffer(noCache) {
    var inputmask = this,
        maskset = this.maskset;

    if (maskset.buffer === undefined || noCache === true) {
      maskset.buffer = getMaskTemplate.call(inputmask, true, getLastValidPosition.call(inputmask), true);
      if (maskset._buffer === undefined) maskset._buffer = maskset.buffer.slice();
    }

    return maskset.buffer;
  } //tobe put on prototype?


  function getBufferTemplate() {
    var inputmask = this,
        maskset = this.maskset;

    if (maskset._buffer === undefined) {
      //generate template
      maskset._buffer = getMaskTemplate.call(inputmask, false, 1);
      if (maskset.buffer === undefined) maskset.buffer = maskset._buffer.slice();
    }

    return maskset._buffer;
  } //tobe put on prototype?


  function getLastValidPosition(closestTo, strict, validPositions) {
    var maskset = this.maskset;
    var before = -1,
        after = -1,
        valids = validPositions || maskset.validPositions; //for use in valhook ~ context switch

    if (closestTo === undefined) closestTo = -1;

    for (var posNdx in valids) {
      var psNdx = parseInt(posNdx);

      if (valids[psNdx] && (strict || valids[psNdx].generatedInput !== true)) {
        if (psNdx <= closestTo) before = psNdx;
        if (psNdx >= closestTo) after = psNdx;
      }
    }

    return before === -1 || before == closestTo ? after : after == -1 ? before : closestTo - before < after - closestTo ? before : after;
  } //tobe put on prototype?


  function isMask(pos, strict, fuzzy) {
    var inputmask = this,
        maskset = this.maskset;
    var test = getTestTemplate.call(inputmask, pos).match;
    if (test.def === "") test = getTest.call(inputmask, pos).match;

    if (test.static !== true) {
      return test.fn;
    }

    if (fuzzy === true && maskset.validPositions[pos] !== undefined && maskset.validPositions[pos].generatedInput !== true) {
      return true;
    }

    if (strict !== true && pos > -1) {
      if (fuzzy) {
        //check on the number of tests
        var tests = getTests.call(inputmask, pos);
        return tests.length > 1 + (tests[tests.length - 1].match.def === "" ? 1 : 0);
      } //else based on the template


      var testTemplate = determineTestTemplate.call(inputmask, pos, getTests.call(inputmask, pos));
      var testPlaceHolder = getPlaceholder.call(inputmask, pos, testTemplate.match);
      return testTemplate.match.def !== testPlaceHolder;
    }

    return false;
  } //tobe put on prototype?


  function resetMaskSet(soft) {
    var maskset = this.maskset;
    maskset.buffer = undefined;

    if (soft !== true) {
      maskset.validPositions = {};
      maskset.p = 0;
    }
  } //tobe put on prototype?


  function seekNext(pos, newBlock, fuzzy) {
    var inputmask = this;
    if (fuzzy === undefined) fuzzy = true;
    var position = pos + 1;

    while (getTest.call(inputmask, position).match.def !== "" && (newBlock === true && (getTest.call(inputmask, position).match.newBlockMarker !== true || !isMask.call(inputmask, position, undefined, true)) || newBlock !== true && !isMask.call(inputmask, position, undefined, fuzzy))) {
      position++;
    }

    return position;
  } //tobe put on prototype?


  function seekPrevious(pos, newBlock) {
    var inputmask = this;
    var position = pos - 1;
    if (pos <= 0) return 0;

    while (position > 0 && (newBlock === true && (getTest.call(inputmask, position).match.newBlockMarker !== true || !isMask.call(inputmask, position, undefined, true)) || newBlock !== true && !isMask.call(inputmask, position, undefined, true))) {
      position--;
    }

    return position;
  } //tobe put on prototype?


  function translatePosition(pos) {
    var inputmask = this,
        opts = this.opts,
        el = this.el;

    if (inputmask.isRTL && typeof pos === "number" && (!opts.greedy || opts.placeholder !== "") && el) {
      pos = inputmask._valueGet().length - pos;
    }

    return pos;
  }

  var EventRuler = {
    on: function on(input, eventName, eventHandler) {
      var $ = input.inputmask.dependencyLib;

      var ev = function ev(e) {
        if (e.originalEvent) {
          e = e.originalEvent || e; //get original event from jquery evenbt

          arguments[0] = e;
        } // console.log(e.type);


        var that = this,
            args,
            inputmask = that.inputmask,
            opts = inputmask ? inputmask.opts : undefined,
            $ = inputmask.dependencyLib;

        if (inputmask === undefined && this.nodeName !== "FORM") {
          //happens when cloning an object with jquery.clone
          var imOpts = $.data(that, "_inputmask_opts");
          $(that).off(); //unbind all events

          if (imOpts) {
            new Inputmask$1(imOpts).mask(that);
          }
        } else if (e.type !== "setvalue" && this.nodeName !== "FORM" && (that.disabled || that.readOnly && !(e.type === "keydown" && e.ctrlKey && e.keyCode === 67 || opts.tabThrough === false && e.keyCode === keyCode.TAB))) {
          e.preventDefault();
        } else {
          switch (e.type) {
            case "input":
              if (inputmask.skipInputEvent === true || e.inputType && e.inputType === "insertCompositionText") {
                inputmask.skipInputEvent = false;
                return e.preventDefault();
              } // if (mobile) { //this causes problem see #2220
              // 	args = arguments;
              // 	setTimeout(function () { //needed for caret selection when entering a char on Android 8 - #1818
              // 		eventHandler.apply(that, args);
              // 		caret(that, that.inputmask.caretPos, undefined, true);
              // 	}, 0);
              // 	return false;
              // }


              break;

            case "keydown":
              //Safari 5.1.x - modal dialog fires keypress twice workaround
              inputmask.skipKeyPressEvent = false;
              inputmask.skipInputEvent = inputmask.isComposing = e.keyCode === keyCode.KEY_229;
              break;

            case "keyup":
            case "compositionend":
              if (inputmask.isComposing) {
                inputmask.skipInputEvent = false;
              }

              break;

            case "keypress":
              if (inputmask.skipKeyPressEvent === true) {
                return e.preventDefault();
              }

              inputmask.skipKeyPressEvent = true;
              break;

            case "click":
            case "focus":
              if (inputmask.validationEvent) {
                // #841
                inputmask.validationEvent = false;
                input.blur();
                HandleNativePlaceholder(input, (inputmask.isRTL ? getBufferTemplate.call(inputmask).slice().reverse() : getBufferTemplate.call(inputmask)).join(""));
                setTimeout(function () {
                  input.focus();
                }, 3000);
                return false;
              }

              args = arguments;
              setTimeout(function () {
                //needed for Chrome ~ initial selection clears after the clickevent
                if (!input.inputmask) {
                  // `inputmask.remove()` was called before this callback
                  return;
                }

                eventHandler.apply(that, args);
              }, 0);
              return false;
          }

          var returnVal = eventHandler.apply(that, arguments);

          if (returnVal === false) {
            e.preventDefault();
            e.stopPropagation();
          }

          return returnVal;
        }
      }; //keep instance of the event


      input.inputmask.events[eventName] = input.inputmask.events[eventName] || [];
      input.inputmask.events[eventName].push(ev);

      if (["submit", "reset"].includes(eventName)) {
        if (input.form !== null) $(input.form).on(eventName, ev.bind(input));
      } else {
        $(input).on(eventName, ev);
      }
    },
    off: function off(input, event) {
      if (input.inputmask && input.inputmask.events) {
        var $ = input.inputmask.dependencyLib;
        var events = input.inputmask.events;

        if (event) {
          events = [];
          events[event] = input.inputmask.events[event];
        }

        for (var eventName in events) {
          var evArr = events[eventName];

          while (evArr.length > 0) {
            var ev = evArr.pop();

            if (["submit", "reset"].includes(eventName)) {
              if (input.form !== null) $(input.form).off(eventName, ev);
            } else {
              $(input).off(eventName, ev);
            }
          }

          delete input.inputmask.events[eventName];
        }
      }
    }
  };

  function mask$1() {
    var inputmask = this,
        opts = this.opts,
        el = this.el,
        $ = this.dependencyLib;

    function isElementTypeSupported(input, opts) {
      function patchValueProperty(npt) {
        var valueGet;
        var valueSet;

        function patchValhook(type) {
          if ($.valHooks && ($.valHooks[type] === undefined || $.valHooks[type].inputmaskpatch !== true)) {
            var valhookGet = $.valHooks[type] && $.valHooks[type].get ? $.valHooks[type].get : function (elem) {
              return elem.value;
            };
            var valhookSet = $.valHooks[type] && $.valHooks[type].set ? $.valHooks[type].set : function (elem, value) {
              elem.value = value;
              return elem;
            };
            $.valHooks[type] = {
              get: function get(elem) {
                if (elem.inputmask) {
                  if (elem.inputmask.opts.autoUnmask) {
                    return elem.inputmask.unmaskedvalue();
                  } else {
                    var result = valhookGet(elem);
                    return getLastValidPosition.call(inputmask, undefined, undefined, elem.inputmask.maskset.validPositions) !== -1 || opts.nullable !== true ? result : "";
                  }
                } else {
                  return valhookGet(elem);
                }
              },
              set: function set(elem, value) {
                var result = valhookSet(elem, value);

                if (elem.inputmask) {
                  applyInputValue(elem, value);
                }

                return result;
              },
              inputmaskpatch: true
            };
          }
        }

        function getter() {
          if (this.inputmask) {
            return this.inputmask.opts.autoUnmask ? this.inputmask.unmaskedvalue() : getLastValidPosition.call(inputmask) !== -1 || opts.nullable !== true ? (this.inputmask.shadowRoot || document.activeElement) === this && opts.clearMaskOnLostFocus ? (inputmask.isRTL ? clearOptionalTail.call(inputmask, getBuffer.call(inputmask).slice()).reverse() : clearOptionalTail.call(inputmask, getBuffer.call(inputmask).slice())).join("") : valueGet.call(this) : "";
          } else {
            return valueGet.call(this);
          }
        }

        function setter(value) {
          valueSet.call(this, value);

          if (this.inputmask) {
            applyInputValue(this, value);
          }
        }

        function installNativeValueSetFallback(npt) {
          EventRuler.on(npt, "mouseenter", function () {
            var input = this,
                value = input.inputmask._valueGet(true);

            if (value !== (inputmask.isRTL ? getBuffer.call(inputmask).reverse() : getBuffer.call(inputmask)).join("")) {
              //Is this correct? to apply RTL? TOCHECK
              applyInputValue(input, value);
            }
          });
        }

        if (!npt.inputmask.__valueGet) {
          if (opts.noValuePatching !== true) {
            if (Object.getOwnPropertyDescriptor) {
              var valueProperty = Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(npt), "value") : undefined;

              if (valueProperty && valueProperty.get && valueProperty.set) {
                valueGet = valueProperty.get;
                valueSet = valueProperty.set;
                Object.defineProperty(npt, "value", {
                  get: getter,
                  set: setter,
                  configurable: true
                });
              } else if (npt.tagName.toLowerCase() !== "input") {
                valueGet = function valueGet() {
                  return this.textContent;
                };

                valueSet = function valueSet(value) {
                  this.textContent = value;
                };

                Object.defineProperty(npt, "value", {
                  get: getter,
                  set: setter,
                  configurable: true
                });
              }
            } else if (document.__lookupGetter__ && npt.__lookupGetter__("value")) {
              valueGet = npt.__lookupGetter__("value");
              valueSet = npt.__lookupSetter__("value");

              npt.__defineGetter__("value", getter);

              npt.__defineSetter__("value", setter);
            }

            npt.inputmask.__valueGet = valueGet; //store native property getter

            npt.inputmask.__valueSet = valueSet; //store native property setter
          }

          npt.inputmask._valueGet = function (overruleRTL) {
            return inputmask.isRTL && overruleRTL !== true ? valueGet.call(this.el).split("").reverse().join("") : valueGet.call(this.el);
          };

          npt.inputmask._valueSet = function (value, overruleRTL) {
            //null check is needed for IE8 => otherwise converts to "null"
            valueSet.call(this.el, value === null || value === undefined ? "" : overruleRTL !== true && inputmask.isRTL ? value.split("").reverse().join("") : value);
          };

          if (valueGet === undefined) {
            //jquery.val fallback
            valueGet = function valueGet() {
              return this.value;
            };

            valueSet = function valueSet(value) {
              this.value = value;
            };

            patchValhook(npt.type);
            installNativeValueSetFallback(npt);
          }
        }
      }

      if (input.tagName.toLowerCase() !== "textarea") {
        opts.ignorables.push(keyCode.ENTER);
      }

      var elementType = input.getAttribute("type");
      var isSupported = input.tagName.toLowerCase() === "input" && opts.supportsInputType.includes(elementType) || input.isContentEditable || input.tagName.toLowerCase() === "textarea";

      if (!isSupported) {
        if (input.tagName.toLowerCase() === "input") {
          var el = document.createElement("input");
          el.setAttribute("type", elementType);
          isSupported = el.type === "text"; //apply mask only if the type is not natively supported

          el = null;
        } else {
          isSupported = "partial";
        }
      }

      if (isSupported !== false) {
        patchValueProperty(input);
      } else {
        input.inputmask = undefined;
      }

      return isSupported;
    } //unbind all events - to make sure that no other mask will interfere when re-masking


    EventRuler.off(el);
    var isSupported = isElementTypeSupported(el, opts);

    if (isSupported !== false) {
      inputmask.originalPlaceholder = el.placeholder; //read maxlength prop from el

      inputmask.maxLength = el !== undefined ? el.maxLength : undefined;
      if (inputmask.maxLength === -1) inputmask.maxLength = undefined;

      if ("inputMode" in el && el.getAttribute("inputmode") === null) {
        el.inputMode = opts.inputmode;
        el.setAttribute("inputmode", opts.inputmode);
      }

      if (isSupported === true) {
        opts.showMaskOnFocus = opts.showMaskOnFocus && ["cc-number", "cc-exp"].indexOf(el.autocomplete) === -1;

        if (iphone) {
          //selecting the caret shows as a slection on iphone
          opts.insertModeVisual = false;
        } //bind events


        EventRuler.on(el, "submit", EventHandlers.submitEvent);
        EventRuler.on(el, "reset", EventHandlers.resetEvent);
        EventRuler.on(el, "blur", EventHandlers.blurEvent);
        EventRuler.on(el, "focus", EventHandlers.focusEvent);
        EventRuler.on(el, "invalid", EventHandlers.invalidEvent);
        EventRuler.on(el, "click", EventHandlers.clickEvent);
        EventRuler.on(el, "mouseleave", EventHandlers.mouseleaveEvent);
        EventRuler.on(el, "mouseenter", EventHandlers.mouseenterEvent);
        EventRuler.on(el, "paste", EventHandlers.pasteEvent);
        EventRuler.on(el, "cut", EventHandlers.cutEvent);
        EventRuler.on(el, "complete", opts.oncomplete);
        EventRuler.on(el, "incomplete", opts.onincomplete);
        EventRuler.on(el, "cleared", opts.oncleared);

        if (opts.inputEventOnly !== true) {
          EventRuler.on(el, "keydown", EventHandlers.keydownEvent);
          EventRuler.on(el, "keypress", EventHandlers.keypressEvent);
          EventRuler.on(el, "keyup", EventHandlers.keyupEvent);
        }

        if (mobile || opts.inputEventOnly) {
          el.removeAttribute("maxLength");
        }

        EventRuler.on(el, "input", EventHandlers.inputFallBackEvent);
        EventRuler.on(el, "compositionend", EventHandlers.compositionendEvent); // EventRuler.on(el, "beforeinput", EventHandlers.beforeInputEvent); //https://github.com/w3c/input-events - to implement
      }

      EventRuler.on(el, "setvalue", EventHandlers.setValueEvent); //apply mask

      inputmask.undoValue = getBufferTemplate.call(inputmask).join(""); //initialize the buffer and getmasklength

      var activeElement = (el.inputmask.shadowRoot || document).activeElement;

      if (el.inputmask._valueGet(true) !== "" || opts.clearMaskOnLostFocus === false || activeElement === el) {
        applyInputValue(el, el.inputmask._valueGet(true));
        var buffer = getBuffer.call(inputmask).slice();

        if (isComplete.call(inputmask, buffer) === false) {
          if (opts.clearIncomplete) {
            resetMaskSet.call(inputmask);
          }
        }

        if (opts.clearMaskOnLostFocus && activeElement !== el) {
          if (getLastValidPosition.call(inputmask) === -1) {
            buffer = [];
          } else {
            clearOptionalTail.call(inputmask, buffer);
          }
        }

        if (opts.clearMaskOnLostFocus === false || opts.showMaskOnFocus && activeElement === el || el.inputmask._valueGet(true) !== "") {
          writeBuffer(el, buffer);
        }

        if (activeElement === el) {
          //position the caret when in focus
          caret.call(inputmask, el, seekNext.call(inputmask, getLastValidPosition.call(inputmask)));
        }
      }
    }
  }

  function extend$2() {
    var options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false; // Handle a deep copy situation

    if (typeof target === "boolean") {
      deep = target; // Skip the boolean and the target

      target = arguments[i] || {};
      i++;
    } // Handle case when target is a string or something (possible in deep copy)


    if (_typeof(target) !== "object" && typeof target !== "function") {
      target = {};
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name]; // Prevent never-ending loop

          if (target === copy) {
            continue;
          } // Recurse if we're merging plain objects or arrays


          if (deep && copy && (Object.prototype.toString.call(copy) === "[object Object]" || (copyIsArray = Array.isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = src && Array.isArray(src) ? src : [];
            } else {
              clone = src && Object.prototype.toString.call(src) === "[object Object]" ? src : {};
            } // Never move original objects, clone them


            target[name] = extend$2(deep, clone, copy); // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    } // Return the modified object


    return target;
  }

  var window$1 = typeof window !== "undefined" ? window : new (eval("require('jsdom').JSDOM"))("").window;

  function data (owner, key, value) {
    if (value === undefined) {
      return owner.__data ? owner.__data[key] : null;
    } else {
      owner.__data = owner.__data || {};
      owner.__data[key] = value;
    }
  }

  function isValidElement(elem) {
    return elem instanceof Element;
  }

  var Event$1;

  if (typeof window$1.CustomEvent === "function") {
    Event$1 = window$1.CustomEvent;
  } else {
    Event$1 = function Event(event, params) {
      params = params || {
        bubbles: false,
        cancelable: false,
        detail: undefined
      };
      var evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
      return evt;
    };

    Event$1.prototype = window$1.Event.prototype;
  }

  function on(events, handler) {
    function addEvent(ev, namespace) {
      //register domevent
      if (elem.addEventListener) {
        // all browsers except IE before version 9
        elem.addEventListener(ev, handler, false);
      } else if (elem.attachEvent) {
        // IE before version 9
        elem.attachEvent("on" + ev, handler);
      }

      eventRegistry[ev] = eventRegistry[ev] || {};
      eventRegistry[ev][namespace] = eventRegistry[ev][namespace] || [];
      eventRegistry[ev][namespace].push(handler);
    }

    if (isValidElement(this[0])) {
      var eventRegistry = this[0].eventRegistry,
          elem = this[0];

      var _events = events.split(" ");

      for (var endx = 0; endx < _events.length; endx++) {
        var nsEvent = _events[endx].split("."),
            ev = nsEvent[0],
            namespace = nsEvent[1] || "global";

        addEvent(ev, namespace);
      }
    }

    return this;
  }

  function off(events, handler) {
    var eventRegistry, elem;

    function removeEvent(ev, namespace, handler) {
      if (ev in eventRegistry === true) {
        //unbind to dom events
        if (elem.removeEventListener) {
          // all browsers except IE before version 9
          elem.removeEventListener(ev, handler, false);
        } else if (elem.detachEvent) {
          // IE before version 9
          elem.detachEvent("on" + ev, handler);
        }

        if (namespace === "global") {
          for (var nmsp in eventRegistry[ev]) {
            eventRegistry[ev][nmsp].splice(eventRegistry[ev][nmsp].indexOf(handler), 1);
          }
        } else {
          eventRegistry[ev][namespace].splice(eventRegistry[ev][namespace].indexOf(handler), 1);
        }
      }
    }

    function resolveNamespace(ev, namespace) {
      var evts = [],
          hndx,
          hndL;

      if (ev.length > 0) {
        if (handler === undefined) {
          for (hndx = 0, hndL = eventRegistry[ev][namespace].length; hndx < hndL; hndx++) {
            evts.push({
              ev: ev,
              namespace: namespace && namespace.length > 0 ? namespace : "global",
              handler: eventRegistry[ev][namespace][hndx]
            });
          }
        } else {
          evts.push({
            ev: ev,
            namespace: namespace && namespace.length > 0 ? namespace : "global",
            handler: handler
          });
        }
      } else if (namespace.length > 0) {
        for (var evNdx in eventRegistry) {
          for (var nmsp in eventRegistry[evNdx]) {
            if (nmsp === namespace) {
              if (handler === undefined) {
                for (hndx = 0, hndL = eventRegistry[evNdx][nmsp].length; hndx < hndL; hndx++) {
                  evts.push({
                    ev: evNdx,
                    namespace: nmsp,
                    handler: eventRegistry[evNdx][nmsp][hndx]
                  });
                }
              } else {
                evts.push({
                  ev: evNdx,
                  namespace: nmsp,
                  handler: handler
                });
              }
            }
          }
        }
      }

      return evts;
    }

    if (isValidElement(this[0])) {
      eventRegistry = this[0].eventRegistry;
      elem = this[0];

      var _events = events.split(" ");

      for (var endx = 0; endx < _events.length; endx++) {
        var nsEvent = _events[endx].split("."),
            offEvents = resolveNamespace(nsEvent[0], nsEvent[1]);

        for (var i = 0, offEventsL = offEvents.length; i < offEventsL; i++) {
          removeEvent(offEvents[i].ev, offEvents[i].namespace, offEvents[i].handler);
        }
      }
    }

    return this;
  }

  function trigger(events
  /* , args... */
  ) {
    if (isValidElement(this[0])) {
      var eventRegistry = this[0].eventRegistry,
          elem = this[0];

      var _events = typeof events === "string" ? events.split(" ") : [events.type];

      for (var endx = 0; endx < _events.length; endx++) {
        var nsEvent = _events[endx].split("."),
            ev = nsEvent[0],
            namespace = nsEvent[1] || "global";

        if (document !== undefined && namespace === "global") {
          //trigger domevent
          var evnt,
              i,
              params = {
            bubbles: true,
            cancelable: true,
            detail: arguments[1]
          }; // The custom event that will be created

          if (document.createEvent) {
            try {
              evnt = new CustomEvent(ev, params);
            } catch (e) {
              evnt = document.createEvent("CustomEvent");
              evnt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);
            }

            if (events.type) extend$2(evnt, events);
            elem.dispatchEvent(evnt);
          } else {
            evnt = document.createEventObject();
            evnt.eventType = ev;
            evnt.detail = arguments[1];
            if (events.type) extend$2(evnt, events);
            elem.fireEvent("on" + evnt.eventType, evnt);
          }
        } else if (eventRegistry[ev] !== undefined) {
          arguments[0] = arguments[0].type ? arguments[0] : DependencyLib.Event(arguments[0]);
          arguments[0].detail = arguments.slice(1);

          if (namespace === "global") {
            for (var nmsp in eventRegistry[ev]) {
              for (i = 0; i < eventRegistry[ev][nmsp].length; i++) {
                eventRegistry[ev][nmsp][i].apply(elem, arguments);
              }
            }
          } else {
            for (i = 0; i < eventRegistry[ev][namespace].length; i++) {
              eventRegistry[ev][namespace][i].apply(elem, arguments);
            }
          }
        }
      }
    }

    return this;
  }

  /*
   Input Mask plugin dependencyLib
   http://github.com/RobinHerbots/jquery.inputmask
   Copyright (c) Robin Herbots
   Licensed under the MIT license
   */
  var document$2 = window$1.document;

  function DependencyLib(elem) {
    if (elem instanceof DependencyLib) {
      return elem;
    }

    if (!(this instanceof DependencyLib)) {
      return new DependencyLib(elem);
    }

    if (elem !== undefined && elem !== null && elem !== window$1) {
      this[0] = elem.nodeName ? elem : elem[0] !== undefined && elem[0].nodeName ? elem[0] : document$2.querySelector(elem);

      if (this[0] !== undefined && this[0] !== null) {
        this[0].eventRegistry = this[0].eventRegistry || {};
      }
    }
  }

  DependencyLib.prototype = {
    on: on,
    off: off,
    trigger: trigger
  }; //static

  DependencyLib.extend = extend$2;
  DependencyLib.data = data;
  DependencyLib.Event = Event$1;

  function generateMaskSet(opts, nocache) {
    var ms;

    function generateMask(mask, metadata, opts) {
      var regexMask = false;

      if (mask === null || mask === "") {
        regexMask = opts.regex !== null;

        if (regexMask) {
          mask = opts.regex;
          mask = mask.replace(/^(\^)(.*)(\$)$/, "$2");
        } else {
          regexMask = true;
          mask = ".*";
        }
      }

      if (mask.length === 1 && opts.greedy === false && opts.repeat !== 0) {
        opts.placeholder = "";
      } //hide placeholder with single non-greedy mask


      if (opts.repeat > 0 || opts.repeat === "*" || opts.repeat === "+") {
        var repeatStart = opts.repeat === "*" ? 0 : opts.repeat === "+" ? 1 : opts.repeat;
        mask = opts.groupmarker[0] + mask + opts.groupmarker[1] + opts.quantifiermarker[0] + repeatStart + "," + opts.repeat + opts.quantifiermarker[1];
      } // console.log(mask);


      var masksetDefinition, maskdefKey;
      maskdefKey = regexMask ? "regex_" + opts.regex : opts.numericInput ? mask.split("").reverse().join("") : mask;

      if (opts.keepStatic !== false) {
        //keepstatic modifies the output from the testdefinitions ~ so differentiate in the maskcache
        maskdefKey = "ks_" + maskdefKey;
      }

      if (Inputmask.prototype.masksCache[maskdefKey] === undefined || nocache === true) {
        masksetDefinition = {
          "mask": mask,
          "maskToken": Inputmask.prototype.analyseMask(mask, regexMask, opts),
          "validPositions": {},
          "_buffer": undefined,
          "buffer": undefined,
          "tests": {},
          "excludes": {},
          //excluded alternations
          "metadata": metadata,
          "maskLength": undefined,
          "jitOffset": {}
        };

        if (nocache !== true) {
          Inputmask.prototype.masksCache[maskdefKey] = masksetDefinition;
          masksetDefinition = DependencyLib.extend(true, {}, Inputmask.prototype.masksCache[maskdefKey]);
        }
      } else {
        masksetDefinition = DependencyLib.extend(true, {}, Inputmask.prototype.masksCache[maskdefKey]);
      }

      return masksetDefinition;
    }

    if (typeof opts.mask === "function") {
      //allow mask to be a preprocessing fn - should return a valid mask
      opts.mask = opts.mask(opts);
    }

    if (Array.isArray(opts.mask)) {
      if (opts.mask.length > 1) {
        if (opts.keepStatic === null) {
          //enable by default when passing multiple masks when the option is not explicitly specified
          opts.keepStatic = true;
        }

        var altMask = opts.groupmarker[0];
        (opts.isRTL ? opts.mask.reverse() : opts.mask).forEach(function (msk) {
          if (altMask.length > 1) {
            altMask += opts.groupmarker[1] + opts.alternatormarker + opts.groupmarker[0];
          }

          if (msk.mask !== undefined && typeof msk.mask !== "function") {
            altMask += msk.mask;
          } else {
            altMask += msk;
          }
        });
        altMask += opts.groupmarker[1]; // console.log(altMask);

        return generateMask(altMask, opts.mask, opts);
      } else {
        opts.mask = opts.mask.pop();
      }
    }

    if (opts.keepStatic === null) opts.keepStatic = false;

    if (opts.mask && opts.mask.mask !== undefined && typeof opts.mask.mask !== "function") {
      ms = generateMask(opts.mask.mask, opts.mask, opts);
    } else {
      ms = generateMask(opts.mask, opts.mask, opts);
    }

    return ms;
  }

  function analyseMask(mask, regexMask, opts) {
    var tokenizer = /(?:[?*+]|\{[0-9+*]+(?:,[0-9+*]*)?(?:\|[0-9+*]*)?\})|[^.?*+^${[]()|\\]+|./g,
        //Thx to https://github.com/slevithan/regex-colorizer for the regexTokenizer regex
    regexTokenizer = /\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g;
    var escaped = false,
        currentToken = new MaskToken(),
        match,
        m,
        openenings = [],
        maskTokens = [],
        openingToken,
        currentOpeningToken,
        alternator,
        lastMatch,
        closeRegexGroup = false;

    function MaskToken(isGroup, isOptional, isQuantifier, isAlternator) {
      this.matches = [];
      this.openGroup = isGroup || false;
      this.alternatorGroup = false;
      this.isGroup = isGroup || false;
      this.isOptional = isOptional || false;
      this.isQuantifier = isQuantifier || false;
      this.isAlternator = isAlternator || false;
      this.quantifier = {
        min: 1,
        max: 1
      };
    } //test definition => {fn: RegExp/function, static: true/false optionality: bool, newBlockMarker: bool, casing: null/upper/lower, def: definitionSymbol, placeholder: placeholder, mask: real maskDefinition}


    function insertTestDefinition(mtoken, element, position) {
      position = position !== undefined ? position : mtoken.matches.length;
      var prevMatch = mtoken.matches[position - 1];

      if (regexMask) {
        if (element.indexOf("[") === 0 || escaped && /\\d|\\s|\\w]/i.test(element) || element === ".") {
          mtoken.matches.splice(position++, 0, {
            fn: new RegExp(element, opts.casing ? "i" : ""),
            static: false,
            optionality: false,
            newBlockMarker: prevMatch === undefined ? "master" : prevMatch.def !== element,
            casing: null,
            def: element,
            placeholder: undefined,
            nativeDef: element
          });
        } else {
          if (escaped) element = element[element.length - 1];
          element.split("").forEach(function (lmnt, ndx) {
            prevMatch = mtoken.matches[position - 1];
            mtoken.matches.splice(position++, 0, {
              fn: /[a-z]/i.test(opts.staticDefinitionSymbol || lmnt) ? new RegExp("[" + (opts.staticDefinitionSymbol || lmnt) + "]", opts.casing ? "i" : "") : null,
              static: true,
              optionality: false,
              newBlockMarker: prevMatch === undefined ? "master" : prevMatch.def !== lmnt && prevMatch.static !== true,
              casing: null,
              def: opts.staticDefinitionSymbol || lmnt,
              placeholder: opts.staticDefinitionSymbol !== undefined ? lmnt : undefined,
              nativeDef: (escaped ? "'" : "") + lmnt
            });
          });
        }

        escaped = false;
      } else {
        var maskdef = opts.definitions && opts.definitions[element] || opts.usePrototypeDefinitions && Inputmask.prototype.definitions[element];

        if (maskdef && !escaped) {
          mtoken.matches.splice(position++, 0, {
            fn: maskdef.validator ? typeof maskdef.validator == "string" ? new RegExp(maskdef.validator, opts.casing ? "i" : "") : new function () {
              this.test = maskdef.validator;
            }() : new RegExp("."),
            static: maskdef.static || false,
            optionality: false,
            newBlockMarker: prevMatch === undefined ? "master" : prevMatch.def !== (maskdef.definitionSymbol || element),
            casing: maskdef.casing,
            def: maskdef.definitionSymbol || element,
            placeholder: maskdef.placeholder,
            nativeDef: element,
            generated: maskdef.generated
          });
        } else {
          mtoken.matches.splice(position++, 0, {
            fn: /[a-z]/i.test(opts.staticDefinitionSymbol || element) ? new RegExp("[" + (opts.staticDefinitionSymbol || element) + "]", opts.casing ? "i" : "") : null,
            static: true,
            optionality: false,
            newBlockMarker: prevMatch === undefined ? "master" : prevMatch.def !== element && prevMatch.static !== true,
            casing: null,
            def: opts.staticDefinitionSymbol || element,
            placeholder: opts.staticDefinitionSymbol !== undefined ? element : undefined,
            nativeDef: (escaped ? "'" : "") + element
          });
          escaped = false;
        }
      }
    }

    function verifyGroupMarker(maskToken) {
      if (maskToken && maskToken.matches) {
        maskToken.matches.forEach(function (token, ndx) {
          var nextToken = maskToken.matches[ndx + 1];

          if ((nextToken === undefined || nextToken.matches === undefined || nextToken.isQuantifier === false) && token && token.isGroup) {
            //this is not a group but a normal mask => convert
            token.isGroup = false;

            if (!regexMask) {
              insertTestDefinition(token, opts.groupmarker[0], 0);

              if (token.openGroup !== true) {
                insertTestDefinition(token, opts.groupmarker[1]);
              }
            }
          }

          verifyGroupMarker(token);
        });
      }
    }

    function defaultCase() {
      if (openenings.length > 0) {
        currentOpeningToken = openenings[openenings.length - 1];
        insertTestDefinition(currentOpeningToken, m);

        if (currentOpeningToken.isAlternator) {
          //handle alternator a | b case
          alternator = openenings.pop();

          for (var mndx = 0; mndx < alternator.matches.length; mndx++) {
            if (alternator.matches[mndx].isGroup) alternator.matches[mndx].isGroup = false; //don't mark alternate groups as group
          }

          if (openenings.length > 0) {
            currentOpeningToken = openenings[openenings.length - 1];
            currentOpeningToken.matches.push(alternator);
          } else {
            currentToken.matches.push(alternator);
          }
        }
      } else {
        insertTestDefinition(currentToken, m);
      }
    }

    function reverseTokens(maskToken) {
      function reverseStatic(st) {
        if (st === opts.optionalmarker[0]) {
          st = opts.optionalmarker[1];
        } else if (st === opts.optionalmarker[1]) {
          st = opts.optionalmarker[0];
        } else if (st === opts.groupmarker[0]) {
          st = opts.groupmarker[1];
        } else if (st === opts.groupmarker[1]) st = opts.groupmarker[0];

        return st;
      }

      maskToken.matches = maskToken.matches.reverse();

      for (var match in maskToken.matches) {
        if (Object.prototype.hasOwnProperty.call(maskToken.matches, match)) {
          var intMatch = parseInt(match);

          if (maskToken.matches[match].isQuantifier && maskToken.matches[intMatch + 1] && maskToken.matches[intMatch + 1].isGroup) {
            //reposition quantifier
            var qt = maskToken.matches[match];
            maskToken.matches.splice(match, 1);
            maskToken.matches.splice(intMatch + 1, 0, qt);
          }

          if (maskToken.matches[match].matches !== undefined) {
            maskToken.matches[match] = reverseTokens(maskToken.matches[match]);
          } else {
            maskToken.matches[match] = reverseStatic(maskToken.matches[match]);
          }
        }
      }

      return maskToken;
    }

    function groupify(matches) {
      var groupToken = new MaskToken(true);
      groupToken.openGroup = false;
      groupToken.matches = matches;
      return groupToken;
    }

    function closeGroup() {
      // Group closing
      openingToken = openenings.pop();
      openingToken.openGroup = false; //mark group as complete

      if (openingToken !== undefined) {
        if (openenings.length > 0) {
          currentOpeningToken = openenings[openenings.length - 1];
          currentOpeningToken.matches.push(openingToken);

          if (currentOpeningToken.isAlternator) {
            //handle alternator (a) | (b) case
            alternator = openenings.pop();

            for (var mndx = 0; mndx < alternator.matches.length; mndx++) {
              alternator.matches[mndx].isGroup = false; //don't mark alternate groups as group

              alternator.matches[mndx].alternatorGroup = false;
            }

            if (openenings.length > 0) {
              currentOpeningToken = openenings[openenings.length - 1];
              currentOpeningToken.matches.push(alternator);
            } else {
              currentToken.matches.push(alternator);
            }
          }
        } else {
          currentToken.matches.push(openingToken);
        }
      } else {
        defaultCase();
      }
    }

    function groupQuantifier(matches) {
      var lastMatch = matches.pop();

      if (lastMatch.isQuantifier) {
        lastMatch = groupify([matches.pop(), lastMatch]);
      }

      return lastMatch;
    }

    if (regexMask) {
      opts.optionalmarker[0] = undefined;
      opts.optionalmarker[1] = undefined;
    }

    while (match = regexMask ? regexTokenizer.exec(mask) : tokenizer.exec(mask)) {
      m = match[0];

      if (regexMask) {
        switch (m.charAt(0)) {
          //Quantifier
          case "?":
            m = "{0,1}";
            break;

          case "+":
          case "*":
            m = "{" + m + "}";
            break;

          case "|":
            //regex mask alternator  ex: [01][0-9]|2[0-3] => ([01][0-9]|2[0-3])
            if (openenings.length === 0) {
              //wrap the mask in a group to form a regex alternator  ([01][0-9]|2[0-3])
              var altRegexGroup = groupify(currentToken.matches);
              altRegexGroup.openGroup = true;
              openenings.push(altRegexGroup);
              currentToken.matches = [];
              closeRegexGroup = true;
            }

            break;
        }
      }

      if (escaped) {
        defaultCase();
        continue;
      }

      switch (m.charAt(0)) {
        case "$":
        case "^":
          //ignore beginswith and endswith as in masking this makes no point
          if (!regexMask) {
            defaultCase();
          }

          break;

        case "(?=":
          //lookahead
          break;

        case "(?!":
          //negative lookahead
          break;

        case "(?<=":
          //lookbehind
          break;

        case "(?<!":
          //negative lookbehind
          break;

        case opts.escapeChar:
          escaped = true;

          if (regexMask) {
            defaultCase();
          }

          break;
        // optional closing

        case opts.optionalmarker[1]:
        case opts.groupmarker[1]:
          closeGroup();
          break;

        case opts.optionalmarker[0]:
          // optional opening
          openenings.push(new MaskToken(false, true));
          break;

        case opts.groupmarker[0]:
          // Group opening
          openenings.push(new MaskToken(true));
          break;

        case opts.quantifiermarker[0]:
          //Quantifier
          var quantifier = new MaskToken(false, false, true);
          m = m.replace(/[{}]/g, "");
          var mqj = m.split("|"),
              mq = mqj[0].split(","),
              mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]),
              mq1 = mq.length === 1 ? mq0 : isNaN(mq[1]) ? mq[1] : parseInt(mq[1]);

          if (mq0 === "*" || mq0 === "+") {
            mq0 = mq1 === "*" ? 0 : 1;
          }

          quantifier.quantifier = {
            min: mq0,
            max: mq1,
            jit: mqj[1]
          };
          var matches = openenings.length > 0 ? openenings[openenings.length - 1].matches : currentToken.matches;
          match = matches.pop();

          if (match.isAlternator) {
            //handle quantifier in an alternation [0-9]{2}|[0-9]{3}
            matches.push(match); //push back alternator

            matches = match.matches; //remap target matches

            var groupToken = new MaskToken(true);
            var tmpMatch = matches.pop();
            matches.push(groupToken); //push the group

            matches = groupToken.matches;
            match = tmpMatch;
          }

          if (!match.isGroup) {
            // if (regexMask && match.fn === null) { //why is this needed???
            //     if (match.def === ".") match.fn = new RegExp(match.def, opts.casing ? "i" : "");
            // }
            match = groupify([match]);
          }

          matches.push(match);
          matches.push(quantifier);
          break;

        case opts.alternatormarker:
          if (openenings.length > 0) {
            currentOpeningToken = openenings[openenings.length - 1];
            var subToken = currentOpeningToken.matches[currentOpeningToken.matches.length - 1];

            if (currentOpeningToken.openGroup && ( //regexp alt syntax
            subToken.matches === undefined || subToken.isGroup === false && subToken.isAlternator === false)) {
              //alternations within group
              lastMatch = openenings.pop();
            } else {
              lastMatch = groupQuantifier(currentOpeningToken.matches);
            }
          } else {
            lastMatch = groupQuantifier(currentToken.matches);
          }

          if (lastMatch.isAlternator) {
            openenings.push(lastMatch);
          } else {
            if (lastMatch.alternatorGroup) {
              alternator = openenings.pop();
              lastMatch.alternatorGroup = false;
            } else {
              alternator = new MaskToken(false, false, false, true);
            }

            alternator.matches.push(lastMatch);
            openenings.push(alternator);

            if (lastMatch.openGroup) {
              //regexp alt syntax
              lastMatch.openGroup = false;
              var alternatorGroup = new MaskToken(true);
              alternatorGroup.alternatorGroup = true;
              openenings.push(alternatorGroup);
            }
          }

          break;

        default:
          defaultCase();
      }
    }

    if (closeRegexGroup) closeGroup();

    while (openenings.length > 0) {
      openingToken = openenings.pop();
      currentToken.matches.push(openingToken);
    }

    if (currentToken.matches.length > 0) {
      verifyGroupMarker(currentToken);
      maskTokens.push(currentToken);
    }

    if (opts.numericInput || opts.isRTL) {
      reverseTokens(maskTokens[0]);
    } // console.log(JSON.stringify(maskTokens));


    return maskTokens;
  }

  var definitions = {
    "9": {
      //\uFF11-\uFF19 #1606
      validator: "[0-9\uFF10-\uFF19]",
      definitionSymbol: "*"
    },
    "a": {
      //\u0410-\u044F\u0401\u0451\u00C0-\u00FF\u00B5 #76
      validator: "[A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]",
      definitionSymbol: "*"
    },
    "*": {
      validator: "[0-9\uFF10-\uFF19A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]"
    }
  };

  var defaults = {
    _maxTestPos: 500,
    placeholder: "_",
    optionalmarker: ["[", "]"],
    quantifiermarker: ["{", "}"],
    groupmarker: ["(", ")"],
    alternatormarker: "|",
    escapeChar: "\\",
    mask: null,
    //needs tobe null instead of undefined as the extend method does not consider props with the undefined value
    regex: null,
    //regular expression as a mask
    oncomplete: function oncomplete() {},
    //executes when the mask is complete
    onincomplete: function onincomplete() {},
    //executes when the mask is incomplete and focus is lost
    oncleared: function oncleared() {},
    //executes when the mask is cleared
    repeat: 0,
    //repetitions of the mask: * ~ forever, otherwise specify an integer
    greedy: false,
    //true: allocated buffer for the mask and repetitions - false: allocate only if needed
    autoUnmask: false,
    //automatically unmask when retrieving the value with $.fn.val or value if the browser supports __lookupGetter__ or getOwnPropertyDescriptor
    removeMaskOnSubmit: false,
    //remove the mask before submitting the form.
    clearMaskOnLostFocus: true,
    insertMode: true,
    //insert the input or overwrite the input
    insertModeVisual: true,
    //show selected caret when insertmode = false
    clearIncomplete: false,
    //clear the incomplete input on blur
    alias: null,
    onKeyDown: function onKeyDown() {},
    //callback to implement autocomplete on certain keys for example. args => event, buffer, caretPos, opts
    onBeforeMask: null,
    //executes before masking the initial value to allow preprocessing of the initial value.	args => initialValue, opts => return processedValue
    onBeforePaste: function onBeforePaste(pastedValue, opts) {
      return typeof opts.onBeforeMask === "function" ? opts.onBeforeMask.call(this, pastedValue, opts) : pastedValue;
    },
    //executes before masking the pasted value to allow preprocessing of the pasted value.	args => pastedValue, opts => return processedValue
    onBeforeWrite: null,
    //executes before writing to the masked element. args => event, opts
    onUnMask: null,
    //executes after unmasking to allow postprocessing of the unmaskedvalue.	args => maskedValue, unmaskedValue, opts
    showMaskOnFocus: true,
    //show the mask-placeholder when the input has focus
    showMaskOnHover: true,
    //show the mask-placeholder when hovering the empty input
    onKeyValidation: function onKeyValidation() {},
    //executes on every key-press with the result of isValid. Params: key, result, opts
    skipOptionalPartCharacter: " ",
    //a character which can be used to skip an optional part of a mask
    numericInput: false,
    //numericInput input direction style (input shifts to the left while holding the caret position)
    rightAlign: false,
    //align to the right
    undoOnEscape: true,
    //pressing escape reverts the value to the value before focus
    //numeric basic properties
    radixPoint: "",
    //".", // | ","
    _radixDance: false,
    //dance around the radixPoint
    groupSeparator: "",
    //",", // | "."
    //numeric basic properties
    keepStatic: null,
    //try to keep the mask static while typing. Decisions to alter the mask will be posponed if possible
    positionCaretOnTab: true,
    //when enabled the caret position is set after the latest valid position on TAB
    tabThrough: false,
    //allows for tabbing through the different parts of the masked field
    supportsInputType: ["text", "tel", "url", "password", "search"],
    //list with the supported input types
    //specify keyCodes which should not be considered in the keypress event, otherwise the preventDefault will stop their default behavior especially in FF
    ignorables: [8, 9, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 0, 229],
    isComplete: null,
    //override for isComplete - args => buffer, opts - return true || false
    preValidation: null,
    //hook to preValidate the input.  Usefull for validating regardless the definition.	args => buffer, pos, char, isSelection, opts, maskset, caretPos, strict => return true/false/command object
    postValidation: null,
    //hook to postValidate the result from isValid.	Usefull for validating the entry as a whole.	args => buffer, pos, c, currentResult, opts, maskset, strict, fromCheckval => return true/false/json
    staticDefinitionSymbol: undefined,
    //specify a definitionSymbol for static content, used to make matches for alternators
    jitMasking: false,
    //just in time masking ~ only mask while typing, can n (number), true or false
    nullable: true,
    //return nothing instead of the buffertemplate when the user hasn't entered anything.
    inputEventOnly: false,
    //dev option - testing inputfallback behavior
    noValuePatching: false,
    //disable value property patching
    positionCaretOnClick: "lvp",
    //none, lvp (based on the last valid position (default), radixFocus (position caret to radixpoint on initial click), select (select the whole input), ignore (ignore the click and continue the mask)
    casing: null,
    //mask-level casing. Options: null, "upper", "lower" or "title" or callback args => elem, test, pos, validPositions return charValue
    inputmode: "text",
    //specify the inputmode
    importDataAttributes: true,
    //import data-inputmask attributes
    shiftPositions: true,
    //shift position of the mask entries on entry and deletion.
    usePrototypeDefinitions: true //use the default defined definitions from the prototype

  };

  var document$1 = window$1.document,
      dataKey = "_inputmask_opts";

  function Inputmask$1(alias, options, internal) {
    //allow instanciating without new
    if (!(this instanceof Inputmask$1)) {
      return new Inputmask$1(alias, options, internal);
    }

    this.dependencyLib = DependencyLib;
    this.el = undefined;
    this.events = {};
    this.maskset = undefined;

    if (internal !== true) {
      //init options
      if (Object.prototype.toString.call(alias) === "[object Object]") {
        options = alias;
      } else {
        options = options || {};
        if (alias) options.alias = alias;
      }

      this.opts = DependencyLib.extend(true, {}, this.defaults, options);
      this.noMasksCache = options && options.definitions !== undefined;
      this.userOptions = options || {}; //user passed options

      resolveAlias(this.opts.alias, options, this.opts);
    } //maskscope properties


    this.refreshValue = false; //indicate a refresh from the inputvalue is needed (form.reset)

    this.undoValue = undefined;
    this.$el = undefined;
    this.skipKeyPressEvent = false; //Safari 5.1.x - modal dialog fires keypress twice workaround

    this.skipInputEvent = false; //skip when triggered from within inputmask

    this.validationEvent = false;
    this.ignorable = false;
    this.maxLength;
    this.mouseEnter = false;
    this.originalPlaceholder = undefined; //needed for FF

    this.isComposing = false; //keydowncode == 229  compositionevent fallback
  }

  Inputmask$1.prototype = {
    dataAttribute: "data-inputmask",
    //data attribute prefix used for attribute binding
    //options default
    defaults: defaults,
    definitions: definitions,
    aliases: {},
    //aliases definitions
    masksCache: {},

    get isRTL() {
      return this.opts.isRTL || this.opts.numericInput;
    },

    mask: function mask(elems) {
      var that = this;

      if (typeof elems === "string") {
        elems = document$1.getElementById(elems) || document$1.querySelectorAll(elems);
      }

      elems = elems.nodeName ? [elems] : elems;
      elems.forEach(function (el, ndx) {
        var scopedOpts = DependencyLib.extend(true, {}, that.opts);

        if (importAttributeOptions(el, scopedOpts, DependencyLib.extend(true, {}, that.userOptions), that.dataAttribute)) {
          var maskset = generateMaskSet(scopedOpts, that.noMasksCache);

          if (maskset !== undefined) {
            if (el.inputmask !== undefined) {
              el.inputmask.opts.autoUnmask = true; //force autounmasking when remasking

              el.inputmask.remove();
            } //store inputmask instance on the input with element reference


            el.inputmask = new Inputmask$1(undefined, undefined, true);
            el.inputmask.opts = scopedOpts;
            el.inputmask.noMasksCache = that.noMasksCache;
            el.inputmask.userOptions = DependencyLib.extend(true, {}, that.userOptions); // el.inputmask.isRTL = scopedOpts.isRTL || scopedOpts.numericInput;

            el.inputmask.el = el;
            el.inputmask.$el = DependencyLib(el);
            el.inputmask.maskset = maskset;
            DependencyLib.data(el, dataKey, that.userOptions);

            mask$1.call(el.inputmask);
          }
        }
      });
      return elems && elems[0] ? elems[0].inputmask || this : this;
    },
    option: function option(options, noremask) {
      //set extra options || retrieve value of a current option
      if (typeof options === "string") {
        return this.opts[options];
      } else if (_typeof(options) === "object") {
        DependencyLib.extend(this.userOptions, options); //user passed options
        //remask

        if (this.el && noremask !== true) {
          this.mask(this.el);
        }

        return this;
      }
    },
    unmaskedvalue: function unmaskedvalue$1(value) {
      this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);

      if (this.el === undefined || value !== undefined) {
        var valueBuffer = (typeof this.opts.onBeforeMask === "function" ? this.opts.onBeforeMask.call(this, value, this.opts) || value : value).split("");
        checkVal.call(this, undefined, false, false, valueBuffer);
        if (typeof this.opts.onBeforeWrite === "function") this.opts.onBeforeWrite.call(this, undefined, getBuffer.call(this), 0, this.opts);
      }

      return unmaskedvalue.call(this, this.el);
    },
    remove: function remove() {
      if (this.el) {
        DependencyLib.data(this.el, dataKey, null); //invalidate
        //writeout the value

        var cv = this.opts.autoUnmask ? unmaskedvalue(this.el) : this._valueGet(this.opts.autoUnmask);
        if (cv !== getBufferTemplate.call(this).join("")) this._valueSet(cv, this.opts.autoUnmask);else this._valueSet(""); //unbind all events

        EventRuler.off(this.el); //restore the value property

        var valueProperty;

        if (Object.getOwnPropertyDescriptor && Object.getPrototypeOf) {
          valueProperty = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.el), "value");

          if (valueProperty) {
            if (this.__valueGet) {
              Object.defineProperty(this.el, "value", {
                get: this.__valueGet,
                set: this.__valueSet,
                configurable: true
              });
            }
          }
        } else if (document$1.__lookupGetter__ && this.el.__lookupGetter__("value")) {
          if (this.__valueGet) {
            this.el.__defineGetter__("value", this.__valueGet);

            this.el.__defineSetter__("value", this.__valueSet);
          }
        } //clear data


        this.el.inputmask = undefined;
      }

      return this.el;
    },
    getemptymask: function getemptymask() {
      //return the default (empty) mask value, usefull for setting the default value in validation
      this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);
      return getBufferTemplate.call(this).join("");
    },
    hasMaskedValue: function hasMaskedValue() {
      //check wheter the returned value is masked or not; currently only works reliable when using jquery.val fn to retrieve the value
      return !this.opts.autoUnmask;
    },
    isComplete: function isComplete$1() {
      this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);
      return isComplete.call(this, getBuffer.call(this));
    },
    getmetadata: function getmetadata() {
      //return mask metadata if exists
      this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);

      if (Array.isArray(this.maskset.metadata)) {
        var maskTarget = getMaskTemplate.call(this, true, 0, false).join("");
        this.maskset.metadata.forEach(function (mtdt) {
          if (mtdt.mask === maskTarget) {
            maskTarget = mtdt;
            return false;
          }

          return true;
        });
        return maskTarget;
      }

      return this.maskset.metadata;
    },
    isValid: function isValid(value) {
      this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);

      if (value) {
        var valueBuffer = (typeof this.opts.onBeforeMask === "function" ? this.opts.onBeforeMask.call(this, value, this.opts) || value : value).split("");
        checkVal.call(this, undefined, true, false, valueBuffer);
      } else {
        value = this.isRTL ? getBuffer.call(this).slice().reverse().join("") : getBuffer.call(this).join("");
      }

      var buffer = getBuffer.call(this);
      var rl = determineLastRequiredPosition.call(this),
          lmib = buffer.length - 1;

      for (; lmib > rl; lmib--) {
        if (isMask.call(this, lmib)) break;
      }

      buffer.splice(rl, lmib + 1 - rl);
      return isComplete.call(this, buffer) && value === (this.isRTL ? getBuffer.call(this).slice().reverse().join("") : getBuffer.call(this).join(""));
    },
    format: function format(value, metadata) {
      this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);
      var valueBuffer = (typeof this.opts.onBeforeMask === "function" ? this.opts.onBeforeMask.call(this, value, this.opts) || value : value).split("");
      checkVal.call(this, undefined, true, false, valueBuffer);
      var formattedValue = this.isRTL ? getBuffer.call(this).slice().reverse().join("") : getBuffer.call(this).join("");
      return metadata ? {
        value: formattedValue,
        metadata: this.getmetadata()
      } : formattedValue;
    },
    setValue: function setValue(value) {
      if (this.el) {
        DependencyLib(this.el).trigger("setvalue", [value]);
      }
    },
    analyseMask: analyseMask
  };

  function resolveAlias(aliasStr, options, opts) {
    var aliasDefinition = Inputmask$1.prototype.aliases[aliasStr];

    if (aliasDefinition) {
      if (aliasDefinition.alias) resolveAlias(aliasDefinition.alias, undefined, opts); //alias is another alias

      DependencyLib.extend(true, opts, aliasDefinition); //merge alias definition in the options

      DependencyLib.extend(true, opts, options); //reapply extra given options

      return true;
    } else //alias not found - try as mask
      if (opts.mask === null) {
        opts.mask = aliasStr;
      }

    return false;
  }

  function importAttributeOptions(npt, opts, userOptions, dataAttribute) {
    function importOption(option, optionData) {
      var attrOption = dataAttribute === "" ? option : dataAttribute + "-" + option;
      optionData = optionData !== undefined ? optionData : npt.getAttribute(attrOption);

      if (optionData !== null) {
        if (typeof optionData === "string") {
          if (option.indexOf("on") === 0) {
            optionData = window$1[optionData];
          } //get function definition
          else if (optionData === "false") {
              optionData = false;
            } else if (optionData === "true") optionData = true;
        }

        userOptions[option] = optionData;
      }
    }

    if (opts.importDataAttributes === true) {
      var attrOptions = npt.getAttribute(dataAttribute),
          option,
          dataoptions,
          optionData,
          p;

      if (attrOptions && attrOptions !== "") {
        attrOptions = attrOptions.replace(/'/g, "\"");
        dataoptions = JSON.parse("{" + attrOptions + "}");
      } //resolve aliases


      if (dataoptions) {
        //pickup alias from dataAttribute
        optionData = undefined;

        for (p in dataoptions) {
          if (p.toLowerCase() === "alias") {
            optionData = dataoptions[p];
            break;
          }
        }
      }

      importOption("alias", optionData); //pickup alias from dataAttribute-alias

      if (userOptions.alias) {
        resolveAlias(userOptions.alias, userOptions, opts);
      }

      for (option in opts) {
        if (dataoptions) {
          optionData = undefined;

          for (p in dataoptions) {
            if (p.toLowerCase() === option.toLowerCase()) {
              optionData = dataoptions[p];
              break;
            }
          }
        }

        importOption(option, optionData);
      }
    }

    DependencyLib.extend(true, opts, userOptions); //handle dir=rtl

    if (npt.dir === "rtl" || opts.rightAlign) {
      npt.style.textAlign = "right";
    }

    if (npt.dir === "rtl" || opts.numericInput) {
      npt.dir = "ltr";
      npt.removeAttribute("dir");
      opts.isRTL = true;
    }

    return Object.keys(userOptions).length;
  } //apply defaults, definitions, aliases


  Inputmask$1.extendDefaults = function (options) {
    DependencyLib.extend(true, Inputmask$1.prototype.defaults, options);
  };

  Inputmask$1.extendDefinitions = function (definition) {
    DependencyLib.extend(true, Inputmask$1.prototype.definitions, definition);
  };

  Inputmask$1.extendAliases = function (alias) {
    DependencyLib.extend(true, Inputmask$1.prototype.aliases, alias);
  }; //static fn on inputmask


  Inputmask$1.format = function (value, options, metadata) {
    return Inputmask$1(options).format(value, metadata);
  };

  Inputmask$1.unmask = function (value, options) {
    return Inputmask$1(options).unmaskedvalue(value);
  };

  Inputmask$1.isValid = function (value, options) {
    return Inputmask$1(options).isValid(value);
  };

  Inputmask$1.remove = function (elems) {
    if (typeof elems === "string") {
      elems = document$1.getElementById(elems) || document$1.querySelectorAll(elems);
    }

    elems = elems.nodeName ? [elems] : elems;
    elems.forEach(function (el) {
      if (el.inputmask) el.inputmask.remove();
    });
  };

  Inputmask$1.setValue = function (elems, value) {
    if (typeof elems === "string") {
      elems = document$1.getElementById(elems) || document$1.querySelectorAll(elems);
    }

    elems = elems.nodeName ? [elems] : elems;
    elems.forEach(function (el) {
      if (el.inputmask) el.inputmask.setValue(value);else DependencyLib(el).trigger("setvalue", [value]);
    });
  };

  Inputmask$1.dependencyLib = DependencyLib; //make inputmask available

  window$1.Inputmask = Inputmask$1;

  var KbfStepper = /*#__PURE__*/function () {
    function KbfStepper(selector, validatorConfig) {
      _classCallCheck$1(this, KbfStepper);

      var $ = window.$;
      this.$kbfStepper = $(selector); // Emituj wyjatek gdy nie podano selektora albo element nie zostal znaleziony

      if (!selector || this.$kbfStepper.length === 0) throw errors.elementNotFound(selector);
      this.validatorConfig = validatorConfig;
      this.init();
      this.addListeners();
    }

    _createClass$1(KbfStepper, [{
      key: "init",
      value: function init() {
        this.currentPageIdx = 0; // Biezacy index strony

        this.$pages = this.$kbfStepper.find('.page');
        this.$pages.eq(0).removeClass('d-none');
        this.lastPageIdx = this.$pages.length - 1; // Ostatni index
        // Elementy $

        this.$infoMessages = this.$kbfStepper.find('.top-message');
        this.$infoMessages.hide().eq(0).addClass('d-flex'); // Pokaz tylko pierwszy message

        this.$errorMessageElement = $('.kbf-error-message'); // Komunikaty bledow

        this.$errorStepper = $('.error-stepper'); // Dolny komunikat o bledzie

        this.$stepsTop = this.$kbfStepper.find('.container > .steps > .step'); // Krok u gory

        this.$stepsBottom = this.$kbfStepper.find('form > .steps > .step'); // Kroki na dole
        // Maski wprowadzania

        this.$formInputs = $('.form-control');
        this.$formInputs.each(function () {
          if (this.name === 'company_regon') new Inputmask$1({
            placeholder: ''
          }).mask(this);else new Inputmask$1().mask(this);
        });
      }
    }, {
      key: "addListeners",
      value: function addListeners() {} // Zmienia na nastepna strone

    }, {
      key: "nextPage",
      value: function nextPage(e) {
        e.stopPropagation();

        if (this.validateCurrentPage()) {
          // Zmienia strone tylko w przypadku jej poprawnosci
          // if (true) { // Zmienia strone tylko w przypadku jej poprawnosci
          if (this.currentPageIdx === this.lastPageIdx) return;
          this.$stepsTop.eq(this.currentPageIdx).addClass('done');
          this.$stepsTop.eq(this.currentPageIdx).removeClass('active');
          this.$stepsBottom.eq(this.currentPageIdx).addClass('done');
          this.$stepsBottom.eq(this.currentPageIdx).removeClass('active');
          this.currentPageIdx++;
          this.$stepsTop.eq(this.currentPageIdx).addClass('active');
          this.$stepsBottom.eq(this.currentPageIdx).addClass('active');
          this.goToPage(this.currentPageIdx);
          this.setMessages();
        }
      } // Zmienia na poprzednia strone

    }, {
      key: "prevPage",
      value: function prevPage(e) {
        e.stopPropagation();
        if (this.currentPageIdx === 0) return;
        this.$stepsTop.eq(this.currentPageIdx).removeClass('active');
        this.$stepsBottom.eq(this.currentPageIdx).removeClass('active');
        this.currentPageIdx--;
        this.$stepsTop.eq(this.currentPageIdx).removeClass('done');
        this.$stepsTop.eq(this.currentPageIdx).addClass('active');
        this.$stepsBottom.eq(this.currentPageIdx).removeClass('done');
        this.$stepsBottom.eq(this.currentPageIdx).addClass('active');
        this.goToPage(this.currentPageIdx);
        this.setMessages();
      }
    }, {
      key: "goToPage",
      value: function goToPage(pageIdx) {
        this.$pages.addClass('d-none');
        this.$pages.eq(pageIdx).removeClass('d-none');
        document.body.scrollTop = 0; // For Safari

        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
      } // Ustawia komunikaty dla stron

    }, {
      key: "setMessages",
      value: function setMessages() {
        this.$infoMessages.eq(this.currentPageIdx).addClass('d-flex').show();
        this.$infoMessages.eq(this.currentPageIdx).siblings('.top-message').removeClass('d-flex').hide();
        $('.error-stepper').addClass('d-none');
      } // Sprawdza poprawnosc formularza na danej stronie

    }, {
      key: "validateCurrentPage",
      value: function validateCurrentPage() {
        if (!this.$errorStepper.hasClass('d-none')) this.$errorStepper.addClass('d-none');
        var $pages = $('.page');
        var $currentInputs = $pages.eq(this.currentPageIdx).find('.form-control').not('.kbf-keywords');
        var $currentRepeaterInputs = $pages.eq(this.currentPageIdx).find('.repeater-hidden-input');
        var $currentPageInputs = $currentInputs.add($currentRepeaterInputs);
        var fieldsAreValid = true;

        if ($currentPageInputs.length) {
          var validator = $("[name=\"".concat(this.validatorConfig.formName, "\"]")).validate(this.validatorConfig);
          var valids = [];
          $currentPageInputs.each(function () {
            valids.push(validator.element(this));
          });
          fieldsAreValid = !valids.includes(false);
        } // Wyswietl komunikat o bledzie jeżeli pole komunikatu istnieje


        if (this.$errorMessageElement.length > 0) {
          if (fieldsAreValid && !this.$errorMessageElement.hasClass('d-none')) this.$errorMessageElement.addClass('d-none');
          if (!fieldsAreValid && this.$errorMessageElement.hasClass('d-none')) this.$errorMessageElement.removeClass('d-none');
        }

        if (!fieldsAreValid) this.$errorStepper.removeClass('d-none');
        return fieldsAreValid;
      }
    }]);

    return KbfStepper;
  }();

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _isNativeReflectConstruct$5() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct$5()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var KbfPreloaderButton = /*#__PURE__*/function (_EventTarget) {
    _inherits(KbfPreloaderButton, _EventTarget);

    var _super = _createSuper$4(KbfPreloaderButton);

    function KbfPreloaderButton(selector) {
      var _this;

      var auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      _classCallCheck$1(this, KbfPreloaderButton);

      _this = _super.call(this);
      var $ = window.$;
      _this.$preloaderButton = $(selector); // Emituj wyjatek gdy nie podano selektora albo element nie zostal znaleziony

      if (!selector || _this.$preloaderButton.length === 0) throw errors.elementNotFound(selector);
      _this.auto = auto; // Czy automatycznie dodawac listener

      _this.init();

      _this.addListeners();

      return _this;
    }

    _createClass$1(KbfPreloaderButton, [{
      key: "init",
      value: function init() {
        // Aliasy
        this.on = this.addEventListener;
        this.off = this.removeEventListener;
        this.emit = this.dispatchEvent;
        this.buttonCurrentContents = this.$preloaderButton.html(); // Aktualna zawartosc
      }
    }, {
      key: "triggerStart",
      value: function triggerStart(buttonElement) {
        var buttonGeometry = buttonElement.getBoundingClientRect(); // Aktualna geometria

        var $buttonElement = $(buttonElement);
        var bgColor;
        $buttonElement.on('click', function () {
          bgColor = getComputedStyle(buttonElement, ':hover').backgroundColor;
        });
        this.$preloaderButton.trigger({
          type: 'start-preloader',
          buttonGeometry: buttonGeometry,
          bgColor: bgColor
        });
        this.emit(new CustomEvent('click'));
      } // Startuje preloader

    }, {
      key: "startPreloader",
      value: function startPreloader(buttonElement, buttonGeometry, bgColor) {
        var $ = window.$;
        var $buttonElement = $(buttonElement);
        $buttonElement.attr('disabled', 'disabled');
        $buttonElement.css('width', buttonGeometry.width + 'px');
        $buttonElement.css('height', buttonGeometry.height + 'px');
        $buttonElement.css('padding', 0);
        $buttonElement.css('background-color', bgColor);
        $buttonElement.html(KbfPreloaderButton.preloaderMarkup);
      } // Zatrzymuje preloader

    }, {
      key: "stopPreloader",
      value: function stopPreloader() {
        this.$preloaderButton.html(this.buttonCurrentContents).attr('style', '');
        this.$preloaderButton.removeAttr('disabled');
      }
    }, {
      key: "addListeners",
      value: function addListeners() {
        var instance = this; // Rejestruj handler warunkowo

        if (this.auto) {
          this.$preloaderButton.on('click', function () {
            instance.triggerStart(this);
          });
        }

        this.$preloaderButton.on('start-preloader', function (e) {
          instance.startPreloader(this, e.buttonGeometry, e.bgColor);
        });
      }
    }]);

    return KbfPreloaderButton;
  }( /*#__PURE__*/_wrapNativeSuper(EventTarget));

  KbfPreloaderButton.preloaderMarkup = '<div class="kbf-button-preloader"><div id="dots"><span></span><span></span><span></span></div></div>';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  /*!
   * perfect-scrollbar v1.5.0
   * Copyright 2020 Hyunje Jun, MDBootstrap and Contributors
   * Licensed under MIT
   */
  function get(element) {
    return getComputedStyle(element);
  }

  function set(element, obj) {
    for (var key in obj) {
      var val = obj[key];

      if (typeof val === 'number') {
        val = val + "px";
      }

      element.style[key] = val;
    }

    return element;
  }

  function div(className) {
    var div = document.createElement('div');
    div.className = className;
    return div;
  }

  var elMatches = typeof Element !== 'undefined' && (Element.prototype.matches || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector);

  function matches(element, query) {
    if (!elMatches) {
      throw new Error('No element matching method supported');
    }

    return elMatches.call(element, query);
  }

  function remove(element) {
    if (element.remove) {
      element.remove();
    } else {
      if (element.parentNode) {
        element.parentNode.removeChild(element);
      }
    }
  }

  function queryChildren(element, selector) {
    return Array.prototype.filter.call(element.children, function (child) {
      return matches(child, selector);
    });
  }

  var cls = {
    main: 'ps',
    rtl: 'ps__rtl',
    element: {
      thumb: function thumb(x) {
        return "ps__thumb-" + x;
      },
      rail: function rail(x) {
        return "ps__rail-" + x;
      },
      consuming: 'ps__child--consume'
    },
    state: {
      focus: 'ps--focus',
      clicking: 'ps--clicking',
      active: function active(x) {
        return "ps--active-" + x;
      },
      scrolling: function scrolling(x) {
        return "ps--scrolling-" + x;
      }
    }
  };
  /*
   * Helper methods
   */

  var scrollingClassTimeout = {
    x: null,
    y: null
  };

  function addScrollingClass(i, x) {
    var classList = i.element.classList;
    var className = cls.state.scrolling(x);

    if (classList.contains(className)) {
      clearTimeout(scrollingClassTimeout[x]);
    } else {
      classList.add(className);
    }
  }

  function removeScrollingClass(i, x) {
    scrollingClassTimeout[x] = setTimeout(function () {
      return i.isAlive && i.element.classList.remove(cls.state.scrolling(x));
    }, i.settings.scrollingThreshold);
  }

  function setScrollingClassInstantly(i, x) {
    addScrollingClass(i, x);
    removeScrollingClass(i, x);
  }

  var EventElement = function EventElement(element) {
    this.element = element;
    this.handlers = {};
  };

  var prototypeAccessors = {
    isEmpty: {
      configurable: true
    }
  };

  EventElement.prototype.bind = function bind(eventName, handler) {
    if (typeof this.handlers[eventName] === 'undefined') {
      this.handlers[eventName] = [];
    }

    this.handlers[eventName].push(handler);
    this.element.addEventListener(eventName, handler, false);
  };

  EventElement.prototype.unbind = function unbind(eventName, target) {
    var this$1 = this;
    this.handlers[eventName] = this.handlers[eventName].filter(function (handler) {
      if (target && handler !== target) {
        return true;
      }

      this$1.element.removeEventListener(eventName, handler, false);
      return false;
    });
  };

  EventElement.prototype.unbindAll = function unbindAll() {
    for (var name in this.handlers) {
      this.unbind(name);
    }
  };

  prototypeAccessors.isEmpty.get = function () {
    var this$1 = this;
    return Object.keys(this.handlers).every(function (key) {
      return this$1.handlers[key].length === 0;
    });
  };

  Object.defineProperties(EventElement.prototype, prototypeAccessors);

  var EventManager = function EventManager() {
    this.eventElements = [];
  };

  EventManager.prototype.eventElement = function eventElement(element) {
    var ee = this.eventElements.filter(function (ee) {
      return ee.element === element;
    })[0];

    if (!ee) {
      ee = new EventElement(element);
      this.eventElements.push(ee);
    }

    return ee;
  };

  EventManager.prototype.bind = function bind(element, eventName, handler) {
    this.eventElement(element).bind(eventName, handler);
  };

  EventManager.prototype.unbind = function unbind(element, eventName, handler) {
    var ee = this.eventElement(element);
    ee.unbind(eventName, handler);

    if (ee.isEmpty) {
      // remove
      this.eventElements.splice(this.eventElements.indexOf(ee), 1);
    }
  };

  EventManager.prototype.unbindAll = function unbindAll() {
    this.eventElements.forEach(function (e) {
      return e.unbindAll();
    });
    this.eventElements = [];
  };

  EventManager.prototype.once = function once(element, eventName, handler) {
    var ee = this.eventElement(element);

    var onceHandler = function onceHandler(evt) {
      ee.unbind(eventName, onceHandler);
      handler(evt);
    };

    ee.bind(eventName, onceHandler);
  };

  function createEvent(name) {
    if (typeof window.CustomEvent === 'function') {
      return new CustomEvent(name);
    } else {
      var evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(name, false, false, undefined);
      return evt;
    }
  }

  function processScrollDiff(i, axis, diff, useScrollingClass, forceFireReachEvent) {
    if (useScrollingClass === void 0) useScrollingClass = true;
    if (forceFireReachEvent === void 0) forceFireReachEvent = false;
    var fields;

    if (axis === 'top') {
      fields = ['contentHeight', 'containerHeight', 'scrollTop', 'y', 'up', 'down'];
    } else if (axis === 'left') {
      fields = ['contentWidth', 'containerWidth', 'scrollLeft', 'x', 'left', 'right'];
    } else {
      throw new Error('A proper axis should be provided');
    }

    processScrollDiff$1(i, diff, fields, useScrollingClass, forceFireReachEvent);
  }

  function processScrollDiff$1(i, diff, ref, useScrollingClass, forceFireReachEvent) {
    var contentHeight = ref[0];
    var containerHeight = ref[1];
    var scrollTop = ref[2];
    var y = ref[3];
    var up = ref[4];
    var down = ref[5];
    if (useScrollingClass === void 0) useScrollingClass = true;
    if (forceFireReachEvent === void 0) forceFireReachEvent = false;
    var element = i.element; // reset reach

    i.reach[y] = null; // 1 for subpixel rounding

    if (element[scrollTop] < 1) {
      i.reach[y] = 'start';
    } // 1 for subpixel rounding


    if (element[scrollTop] > i[contentHeight] - i[containerHeight] - 1) {
      i.reach[y] = 'end';
    }

    if (diff) {
      element.dispatchEvent(createEvent("ps-scroll-" + y));

      if (diff < 0) {
        element.dispatchEvent(createEvent("ps-scroll-" + up));
      } else if (diff > 0) {
        element.dispatchEvent(createEvent("ps-scroll-" + down));
      }

      if (useScrollingClass) {
        setScrollingClassInstantly(i, y);
      }
    }

    if (i.reach[y] && (diff || forceFireReachEvent)) {
      element.dispatchEvent(createEvent("ps-" + y + "-reach-" + i.reach[y]));
    }
  }

  function toInt(x) {
    return parseInt(x, 10) || 0;
  }

  function isEditable(el) {
    return matches(el, 'input,[contenteditable]') || matches(el, 'select,[contenteditable]') || matches(el, 'textarea,[contenteditable]') || matches(el, 'button,[contenteditable]');
  }

  function outerWidth(element) {
    var styles = get(element);
    return toInt(styles.width) + toInt(styles.paddingLeft) + toInt(styles.paddingRight) + toInt(styles.borderLeftWidth) + toInt(styles.borderRightWidth);
  }

  var env = {
    isWebKit: typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style,
    supportsTouch: typeof window !== 'undefined' && ('ontouchstart' in window || 'maxTouchPoints' in window.navigator && window.navigator.maxTouchPoints > 0 || window.DocumentTouch && document instanceof window.DocumentTouch),
    supportsIePointer: typeof navigator !== 'undefined' && navigator.msMaxTouchPoints,
    isChrome: typeof navigator !== 'undefined' && /Chrome/i.test(navigator && navigator.userAgent)
  };

  function updateGeometry(i) {
    var element = i.element;
    var roundedScrollTop = Math.floor(element.scrollTop);
    var rect = element.getBoundingClientRect();
    i.containerWidth = Math.ceil(rect.width);
    i.containerHeight = Math.ceil(rect.height);
    i.contentWidth = element.scrollWidth;
    i.contentHeight = element.scrollHeight;

    if (!element.contains(i.scrollbarXRail)) {
      // clean up and append
      queryChildren(element, cls.element.rail('x')).forEach(function (el) {
        return remove(el);
      });
      element.appendChild(i.scrollbarXRail);
    }

    if (!element.contains(i.scrollbarYRail)) {
      // clean up and append
      queryChildren(element, cls.element.rail('y')).forEach(function (el) {
        return remove(el);
      });
      element.appendChild(i.scrollbarYRail);
    }

    if (!i.settings.suppressScrollX && i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth) {
      i.scrollbarXActive = true;
      i.railXWidth = i.containerWidth - i.railXMarginWidth;
      i.railXRatio = i.containerWidth / i.railXWidth;
      i.scrollbarXWidth = getThumbSize(i, toInt(i.railXWidth * i.containerWidth / i.contentWidth));
      i.scrollbarXLeft = toInt((i.negativeScrollAdjustment + element.scrollLeft) * (i.railXWidth - i.scrollbarXWidth) / (i.contentWidth - i.containerWidth));
    } else {
      i.scrollbarXActive = false;
    }

    if (!i.settings.suppressScrollY && i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight) {
      i.scrollbarYActive = true;
      i.railYHeight = i.containerHeight - i.railYMarginHeight;
      i.railYRatio = i.containerHeight / i.railYHeight;
      i.scrollbarYHeight = getThumbSize(i, toInt(i.railYHeight * i.containerHeight / i.contentHeight));
      i.scrollbarYTop = toInt(roundedScrollTop * (i.railYHeight - i.scrollbarYHeight) / (i.contentHeight - i.containerHeight));
    } else {
      i.scrollbarYActive = false;
    }

    if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {
      i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth;
    }

    if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {
      i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;
    }

    updateCss(element, i);

    if (i.scrollbarXActive) {
      element.classList.add(cls.state.active('x'));
    } else {
      element.classList.remove(cls.state.active('x'));
      i.scrollbarXWidth = 0;
      i.scrollbarXLeft = 0;
      element.scrollLeft = i.isRtl === true ? i.contentWidth : 0;
    }

    if (i.scrollbarYActive) {
      element.classList.add(cls.state.active('y'));
    } else {
      element.classList.remove(cls.state.active('y'));
      i.scrollbarYHeight = 0;
      i.scrollbarYTop = 0;
      element.scrollTop = 0;
    }
  }

  function getThumbSize(i, thumbSize) {
    if (i.settings.minScrollbarLength) {
      thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);
    }

    if (i.settings.maxScrollbarLength) {
      thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);
    }

    return thumbSize;
  }

  function updateCss(element, i) {
    var xRailOffset = {
      width: i.railXWidth
    };
    var roundedScrollTop = Math.floor(element.scrollTop);

    if (i.isRtl) {
      xRailOffset.left = i.negativeScrollAdjustment + element.scrollLeft + i.containerWidth - i.contentWidth;
    } else {
      xRailOffset.left = element.scrollLeft;
    }

    if (i.isScrollbarXUsingBottom) {
      xRailOffset.bottom = i.scrollbarXBottom - roundedScrollTop;
    } else {
      xRailOffset.top = i.scrollbarXTop + roundedScrollTop;
    }

    set(i.scrollbarXRail, xRailOffset);
    var yRailOffset = {
      top: roundedScrollTop,
      height: i.railYHeight
    };

    if (i.isScrollbarYUsingRight) {
      if (i.isRtl) {
        yRailOffset.right = i.contentWidth - (i.negativeScrollAdjustment + element.scrollLeft) - i.scrollbarYRight - i.scrollbarYOuterWidth - 9;
      } else {
        yRailOffset.right = i.scrollbarYRight - element.scrollLeft;
      }
    } else {
      if (i.isRtl) {
        yRailOffset.left = i.negativeScrollAdjustment + element.scrollLeft + i.containerWidth * 2 - i.contentWidth - i.scrollbarYLeft - i.scrollbarYOuterWidth;
      } else {
        yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;
      }
    }

    set(i.scrollbarYRail, yRailOffset);
    set(i.scrollbarX, {
      left: i.scrollbarXLeft,
      width: i.scrollbarXWidth - i.railBorderXWidth
    });
    set(i.scrollbarY, {
      top: i.scrollbarYTop,
      height: i.scrollbarYHeight - i.railBorderYWidth
    });
  }

  function clickRail(i) {
    i.element;
    i.event.bind(i.scrollbarY, 'mousedown', function (e) {
      return e.stopPropagation();
    });
    i.event.bind(i.scrollbarYRail, 'mousedown', function (e) {
      var positionTop = e.pageY - window.pageYOffset - i.scrollbarYRail.getBoundingClientRect().top;
      var direction = positionTop > i.scrollbarYTop ? 1 : -1;
      i.element.scrollTop += direction * i.containerHeight;
      updateGeometry(i);
      e.stopPropagation();
    });
    i.event.bind(i.scrollbarX, 'mousedown', function (e) {
      return e.stopPropagation();
    });
    i.event.bind(i.scrollbarXRail, 'mousedown', function (e) {
      var positionLeft = e.pageX - window.pageXOffset - i.scrollbarXRail.getBoundingClientRect().left;
      var direction = positionLeft > i.scrollbarXLeft ? 1 : -1;
      i.element.scrollLeft += direction * i.containerWidth;
      updateGeometry(i);
      e.stopPropagation();
    });
  }

  function dragThumb(i) {
    bindMouseScrollHandler(i, ['containerWidth', 'contentWidth', 'pageX', 'railXWidth', 'scrollbarX', 'scrollbarXWidth', 'scrollLeft', 'x', 'scrollbarXRail']);
    bindMouseScrollHandler(i, ['containerHeight', 'contentHeight', 'pageY', 'railYHeight', 'scrollbarY', 'scrollbarYHeight', 'scrollTop', 'y', 'scrollbarYRail']);
  }

  function bindMouseScrollHandler(i, ref) {
    var containerHeight = ref[0];
    var contentHeight = ref[1];
    var pageY = ref[2];
    var railYHeight = ref[3];
    var scrollbarY = ref[4];
    var scrollbarYHeight = ref[5];
    var scrollTop = ref[6];
    var y = ref[7];
    var scrollbarYRail = ref[8];
    var element = i.element;
    var startingScrollTop = null;
    var startingMousePageY = null;
    var scrollBy = null;

    function mouseMoveHandler(e) {
      if (e.touches && e.touches[0]) {
        e[pageY] = e.touches[0].pageY;
      }

      element[scrollTop] = startingScrollTop + scrollBy * (e[pageY] - startingMousePageY);
      addScrollingClass(i, y);
      updateGeometry(i);
      e.stopPropagation();
      e.preventDefault();
    }

    function mouseUpHandler() {
      removeScrollingClass(i, y);
      i[scrollbarYRail].classList.remove(cls.state.clicking);
      i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);
    }

    function bindMoves(e, touchMode) {
      startingScrollTop = element[scrollTop];

      if (touchMode && e.touches) {
        e[pageY] = e.touches[0].pageY;
      }

      startingMousePageY = e[pageY];
      scrollBy = (i[contentHeight] - i[containerHeight]) / (i[railYHeight] - i[scrollbarYHeight]);

      if (!touchMode) {
        i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);
        i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);
        e.preventDefault();
      } else {
        i.event.bind(i.ownerDocument, 'touchmove', mouseMoveHandler);
      }

      i[scrollbarYRail].classList.add(cls.state.clicking);
      e.stopPropagation();
    }

    i.event.bind(i[scrollbarY], 'mousedown', function (e) {
      bindMoves(e);
    });
    i.event.bind(i[scrollbarY], 'touchstart', function (e) {
      bindMoves(e, true);
    });
  }

  function keyboard(i) {
    var element = i.element;

    var elementHovered = function elementHovered() {
      return matches(element, ':hover');
    };

    var scrollbarFocused = function scrollbarFocused() {
      return matches(i.scrollbarX, ':focus') || matches(i.scrollbarY, ':focus');
    };

    function shouldPreventDefault(deltaX, deltaY) {
      var scrollTop = Math.floor(element.scrollTop);

      if (deltaX === 0) {
        if (!i.scrollbarYActive) {
          return false;
        }

        if (scrollTop === 0 && deltaY > 0 || scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0) {
          return !i.settings.wheelPropagation;
        }
      }

      var scrollLeft = element.scrollLeft;

      if (deltaY === 0) {
        if (!i.scrollbarXActive) {
          return false;
        }

        if (scrollLeft === 0 && deltaX < 0 || scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0) {
          return !i.settings.wheelPropagation;
        }
      }

      return true;
    }

    i.event.bind(i.ownerDocument, 'keydown', function (e) {
      if (e.isDefaultPrevented && e.isDefaultPrevented() || e.defaultPrevented) {
        return;
      }

      if (!elementHovered() && !scrollbarFocused()) {
        return;
      }

      var activeElement = document.activeElement ? document.activeElement : i.ownerDocument.activeElement;

      if (activeElement) {
        if (activeElement.tagName === 'IFRAME') {
          activeElement = activeElement.contentDocument.activeElement;
        } else {
          // go deeper if element is a webcomponent
          while (activeElement.shadowRoot) {
            activeElement = activeElement.shadowRoot.activeElement;
          }
        }

        if (isEditable(activeElement)) {
          return;
        }
      }

      var deltaX = 0;
      var deltaY = 0;

      switch (e.which) {
        case 37:
          // left
          if (e.metaKey) {
            deltaX = -i.contentWidth;
          } else if (e.altKey) {
            deltaX = -i.containerWidth;
          } else {
            deltaX = -30;
          }

          break;

        case 38:
          // up
          if (e.metaKey) {
            deltaY = i.contentHeight;
          } else if (e.altKey) {
            deltaY = i.containerHeight;
          } else {
            deltaY = 30;
          }

          break;

        case 39:
          // right
          if (e.metaKey) {
            deltaX = i.contentWidth;
          } else if (e.altKey) {
            deltaX = i.containerWidth;
          } else {
            deltaX = 30;
          }

          break;

        case 40:
          // down
          if (e.metaKey) {
            deltaY = -i.contentHeight;
          } else if (e.altKey) {
            deltaY = -i.containerHeight;
          } else {
            deltaY = -30;
          }

          break;

        case 32:
          // space bar
          if (e.shiftKey) {
            deltaY = i.containerHeight;
          } else {
            deltaY = -i.containerHeight;
          }

          break;

        case 33:
          // page up
          deltaY = i.containerHeight;
          break;

        case 34:
          // page down
          deltaY = -i.containerHeight;
          break;

        case 36:
          // home
          deltaY = i.contentHeight;
          break;

        case 35:
          // end
          deltaY = -i.contentHeight;
          break;

        default:
          return;
      }

      if (i.settings.suppressScrollX && deltaX !== 0) {
        return;
      }

      if (i.settings.suppressScrollY && deltaY !== 0) {
        return;
      }

      element.scrollTop -= deltaY;
      element.scrollLeft += deltaX;
      updateGeometry(i);

      if (shouldPreventDefault(deltaX, deltaY)) {
        e.preventDefault();
      }
    });
  }

  function wheel(i) {
    var element = i.element;

    function shouldPreventDefault(deltaX, deltaY) {
      var roundedScrollTop = Math.floor(element.scrollTop);
      var isTop = element.scrollTop === 0;
      var isBottom = roundedScrollTop + element.offsetHeight === element.scrollHeight;
      var isLeft = element.scrollLeft === 0;
      var isRight = element.scrollLeft + element.offsetWidth === element.scrollWidth;
      var hitsBound; // pick axis with primary direction

      if (Math.abs(deltaY) > Math.abs(deltaX)) {
        hitsBound = isTop || isBottom;
      } else {
        hitsBound = isLeft || isRight;
      }

      return hitsBound ? !i.settings.wheelPropagation : true;
    }

    function getDeltaFromEvent(e) {
      var deltaX = e.deltaX;
      var deltaY = -1 * e.deltaY;

      if (typeof deltaX === 'undefined' || typeof deltaY === 'undefined') {
        // OS X Safari
        deltaX = -1 * e.wheelDeltaX / 6;
        deltaY = e.wheelDeltaY / 6;
      }

      if (e.deltaMode && e.deltaMode === 1) {
        // Firefox in deltaMode 1: Line scrolling
        deltaX *= 10;
        deltaY *= 10;
      }

      if (deltaX !== deltaX && deltaY !== deltaY
      /* NaN checks */
      ) {
          // IE in some mouse drivers
          deltaX = 0;
          deltaY = e.wheelDelta;
        }

      if (e.shiftKey) {
        // reverse axis with shift key
        return [-deltaY, -deltaX];
      }

      return [deltaX, deltaY];
    }

    function shouldBeConsumedByChild(target, deltaX, deltaY) {
      // FIXME: this is a workaround for <select> issue in FF and IE #571
      if (!env.isWebKit && element.querySelector('select:focus')) {
        return true;
      }

      if (!element.contains(target)) {
        return false;
      }

      var cursor = target;

      while (cursor && cursor !== element) {
        if (cursor.classList.contains(cls.element.consuming)) {
          return true;
        }

        var style = get(cursor); // if deltaY && vertical scrollable

        if (deltaY && style.overflowY.match(/(scroll|auto)/)) {
          var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;

          if (maxScrollTop > 0) {
            if (cursor.scrollTop > 0 && deltaY < 0 || cursor.scrollTop < maxScrollTop && deltaY > 0) {
              return true;
            }
          }
        } // if deltaX && horizontal scrollable


        if (deltaX && style.overflowX.match(/(scroll|auto)/)) {
          var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;

          if (maxScrollLeft > 0) {
            if (cursor.scrollLeft > 0 && deltaX < 0 || cursor.scrollLeft < maxScrollLeft && deltaX > 0) {
              return true;
            }
          }
        }

        cursor = cursor.parentNode;
      }

      return false;
    }

    function mousewheelHandler(e) {
      var ref = getDeltaFromEvent(e);
      var deltaX = ref[0];
      var deltaY = ref[1];

      if (shouldBeConsumedByChild(e.target, deltaX, deltaY)) {
        return;
      }

      var shouldPrevent = false;

      if (!i.settings.useBothWheelAxes) {
        // deltaX will only be used for horizontal scrolling and deltaY will
        // only be used for vertical scrolling - this is the default
        element.scrollTop -= deltaY * i.settings.wheelSpeed;
        element.scrollLeft += deltaX * i.settings.wheelSpeed;
      } else if (i.scrollbarYActive && !i.scrollbarXActive) {
        // only vertical scrollbar is active and useBothWheelAxes option is
        // active, so let's scroll vertical bar using both mouse wheel axes
        if (deltaY) {
          element.scrollTop -= deltaY * i.settings.wheelSpeed;
        } else {
          element.scrollTop += deltaX * i.settings.wheelSpeed;
        }

        shouldPrevent = true;
      } else if (i.scrollbarXActive && !i.scrollbarYActive) {
        // useBothWheelAxes and only horizontal bar is active, so use both
        // wheel axes for horizontal bar
        if (deltaX) {
          element.scrollLeft += deltaX * i.settings.wheelSpeed;
        } else {
          element.scrollLeft -= deltaY * i.settings.wheelSpeed;
        }

        shouldPrevent = true;
      }

      updateGeometry(i);
      shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY);

      if (shouldPrevent && !e.ctrlKey) {
        e.stopPropagation();
        e.preventDefault();
      }
    }

    if (typeof window.onwheel !== 'undefined') {
      i.event.bind(element, 'wheel', mousewheelHandler);
    } else if (typeof window.onmousewheel !== 'undefined') {
      i.event.bind(element, 'mousewheel', mousewheelHandler);
    }
  }

  function touch(i) {
    if (!env.supportsTouch && !env.supportsIePointer) {
      return;
    }

    var element = i.element;

    function shouldPrevent(deltaX, deltaY) {
      var scrollTop = Math.floor(element.scrollTop);
      var scrollLeft = element.scrollLeft;
      var magnitudeX = Math.abs(deltaX);
      var magnitudeY = Math.abs(deltaY);

      if (magnitudeY > magnitudeX) {
        // user is perhaps trying to swipe up/down the page
        if (deltaY < 0 && scrollTop === i.contentHeight - i.containerHeight || deltaY > 0 && scrollTop === 0) {
          // set prevent for mobile Chrome refresh
          return window.scrollY === 0 && deltaY > 0 && env.isChrome;
        }
      } else if (magnitudeX > magnitudeY) {
        // user is perhaps trying to swipe left/right across the page
        if (deltaX < 0 && scrollLeft === i.contentWidth - i.containerWidth || deltaX > 0 && scrollLeft === 0) {
          return true;
        }
      }

      return true;
    }

    function applyTouchMove(differenceX, differenceY) {
      element.scrollTop -= differenceY;
      element.scrollLeft -= differenceX;
      updateGeometry(i);
    }

    var startOffset = {};
    var startTime = 0;
    var speed = {};
    var easingLoop = null;

    function getTouch(e) {
      if (e.targetTouches) {
        return e.targetTouches[0];
      } else {
        // Maybe IE pointer
        return e;
      }
    }

    function shouldHandle(e) {
      if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {
        return false;
      }

      if (e.targetTouches && e.targetTouches.length === 1) {
        return true;
      }

      if (e.pointerType && e.pointerType !== 'mouse' && e.pointerType !== e.MSPOINTER_TYPE_MOUSE) {
        return true;
      }

      return false;
    }

    function touchStart(e) {
      if (!shouldHandle(e)) {
        return;
      }

      var touch = getTouch(e);
      startOffset.pageX = touch.pageX;
      startOffset.pageY = touch.pageY;
      startTime = new Date().getTime();

      if (easingLoop !== null) {
        clearInterval(easingLoop);
      }
    }

    function shouldBeConsumedByChild(target, deltaX, deltaY) {
      if (!element.contains(target)) {
        return false;
      }

      var cursor = target;

      while (cursor && cursor !== element) {
        if (cursor.classList.contains(cls.element.consuming)) {
          return true;
        }

        var style = get(cursor); // if deltaY && vertical scrollable

        if (deltaY && style.overflowY.match(/(scroll|auto)/)) {
          var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;

          if (maxScrollTop > 0) {
            if (cursor.scrollTop > 0 && deltaY < 0 || cursor.scrollTop < maxScrollTop && deltaY > 0) {
              return true;
            }
          }
        } // if deltaX && horizontal scrollable


        if (deltaX && style.overflowX.match(/(scroll|auto)/)) {
          var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;

          if (maxScrollLeft > 0) {
            if (cursor.scrollLeft > 0 && deltaX < 0 || cursor.scrollLeft < maxScrollLeft && deltaX > 0) {
              return true;
            }
          }
        }

        cursor = cursor.parentNode;
      }

      return false;
    }

    function touchMove(e) {
      if (shouldHandle(e)) {
        var touch = getTouch(e);
        var currentOffset = {
          pageX: touch.pageX,
          pageY: touch.pageY
        };
        var differenceX = currentOffset.pageX - startOffset.pageX;
        var differenceY = currentOffset.pageY - startOffset.pageY;

        if (shouldBeConsumedByChild(e.target, differenceX, differenceY)) {
          return;
        }

        applyTouchMove(differenceX, differenceY);
        startOffset = currentOffset;
        var currentTime = new Date().getTime();
        var timeGap = currentTime - startTime;

        if (timeGap > 0) {
          speed.x = differenceX / timeGap;
          speed.y = differenceY / timeGap;
          startTime = currentTime;
        }

        if (shouldPrevent(differenceX, differenceY)) {
          e.preventDefault();
        }
      }
    }

    function touchEnd() {
      if (i.settings.swipeEasing) {
        clearInterval(easingLoop);
        easingLoop = setInterval(function () {
          if (i.isInitialized) {
            clearInterval(easingLoop);
            return;
          }

          if (!speed.x && !speed.y) {
            clearInterval(easingLoop);
            return;
          }

          if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {
            clearInterval(easingLoop);
            return;
          }

          applyTouchMove(speed.x * 30, speed.y * 30);
          speed.x *= 0.8;
          speed.y *= 0.8;
        }, 10);
      }
    }

    if (env.supportsTouch) {
      i.event.bind(element, 'touchstart', touchStart);
      i.event.bind(element, 'touchmove', touchMove);
      i.event.bind(element, 'touchend', touchEnd);
    } else if (env.supportsIePointer) {
      if (window.PointerEvent) {
        i.event.bind(element, 'pointerdown', touchStart);
        i.event.bind(element, 'pointermove', touchMove);
        i.event.bind(element, 'pointerup', touchEnd);
      } else if (window.MSPointerEvent) {
        i.event.bind(element, 'MSPointerDown', touchStart);
        i.event.bind(element, 'MSPointerMove', touchMove);
        i.event.bind(element, 'MSPointerUp', touchEnd);
      }
    }
  }

  var defaultSettings$2 = function defaultSettings() {
    return {
      handlers: ['click-rail', 'drag-thumb', 'keyboard', 'wheel', 'touch'],
      maxScrollbarLength: null,
      minScrollbarLength: null,
      scrollingThreshold: 1000,
      scrollXMarginOffset: 0,
      scrollYMarginOffset: 0,
      suppressScrollX: false,
      suppressScrollY: false,
      swipeEasing: true,
      useBothWheelAxes: false,
      wheelPropagation: true,
      wheelSpeed: 1
    };
  };

  var handlers = {
    'click-rail': clickRail,
    'drag-thumb': dragThumb,
    keyboard: keyboard,
    wheel: wheel,
    touch: touch
  };

  var PerfectScrollbar = function PerfectScrollbar(element, userSettings) {
    var this$1 = this;
    if (userSettings === void 0) userSettings = {};

    if (typeof element === 'string') {
      element = document.querySelector(element);
    }

    if (!element || !element.nodeName) {
      throw new Error('no element is specified to initialize PerfectScrollbar');
    }

    this.element = element;
    element.classList.add(cls.main);
    this.settings = defaultSettings$2();

    for (var key in userSettings) {
      this.settings[key] = userSettings[key];
    }

    this.containerWidth = null;
    this.containerHeight = null;
    this.contentWidth = null;
    this.contentHeight = null;

    var focus = function focus() {
      return element.classList.add(cls.state.focus);
    };

    var blur = function blur() {
      return element.classList.remove(cls.state.focus);
    };

    this.isRtl = get(element).direction === 'rtl';

    if (this.isRtl === true) {
      element.classList.add(cls.rtl);
    }

    this.isNegativeScroll = function () {
      var originalScrollLeft = element.scrollLeft;
      var result = null;
      element.scrollLeft = -1;
      result = element.scrollLeft < 0;
      element.scrollLeft = originalScrollLeft;
      return result;
    }();

    this.negativeScrollAdjustment = this.isNegativeScroll ? element.scrollWidth - element.clientWidth : 0;
    this.event = new EventManager();
    this.ownerDocument = element.ownerDocument || document;
    this.scrollbarXRail = div(cls.element.rail('x'));
    element.appendChild(this.scrollbarXRail);
    this.scrollbarX = div(cls.element.thumb('x'));
    this.scrollbarXRail.appendChild(this.scrollbarX);
    this.scrollbarX.setAttribute('tabindex', 0);
    this.event.bind(this.scrollbarX, 'focus', focus);
    this.event.bind(this.scrollbarX, 'blur', blur);
    this.scrollbarXActive = null;
    this.scrollbarXWidth = null;
    this.scrollbarXLeft = null;
    var railXStyle = get(this.scrollbarXRail);
    this.scrollbarXBottom = parseInt(railXStyle.bottom, 10);

    if (isNaN(this.scrollbarXBottom)) {
      this.isScrollbarXUsingBottom = false;
      this.scrollbarXTop = toInt(railXStyle.top);
    } else {
      this.isScrollbarXUsingBottom = true;
    }

    this.railBorderXWidth = toInt(railXStyle.borderLeftWidth) + toInt(railXStyle.borderRightWidth); // Set rail to display:block to calculate margins

    set(this.scrollbarXRail, {
      display: 'block'
    });
    this.railXMarginWidth = toInt(railXStyle.marginLeft) + toInt(railXStyle.marginRight);
    set(this.scrollbarXRail, {
      display: ''
    });
    this.railXWidth = null;
    this.railXRatio = null;
    this.scrollbarYRail = div(cls.element.rail('y'));
    element.appendChild(this.scrollbarYRail);
    this.scrollbarY = div(cls.element.thumb('y'));
    this.scrollbarYRail.appendChild(this.scrollbarY);
    this.scrollbarY.setAttribute('tabindex', 0);
    this.event.bind(this.scrollbarY, 'focus', focus);
    this.event.bind(this.scrollbarY, 'blur', blur);
    this.scrollbarYActive = null;
    this.scrollbarYHeight = null;
    this.scrollbarYTop = null;
    var railYStyle = get(this.scrollbarYRail);
    this.scrollbarYRight = parseInt(railYStyle.right, 10);

    if (isNaN(this.scrollbarYRight)) {
      this.isScrollbarYUsingRight = false;
      this.scrollbarYLeft = toInt(railYStyle.left);
    } else {
      this.isScrollbarYUsingRight = true;
    }

    this.scrollbarYOuterWidth = this.isRtl ? outerWidth(this.scrollbarY) : null;
    this.railBorderYWidth = toInt(railYStyle.borderTopWidth) + toInt(railYStyle.borderBottomWidth);
    set(this.scrollbarYRail, {
      display: 'block'
    });
    this.railYMarginHeight = toInt(railYStyle.marginTop) + toInt(railYStyle.marginBottom);
    set(this.scrollbarYRail, {
      display: ''
    });
    this.railYHeight = null;
    this.railYRatio = null;
    this.reach = {
      x: element.scrollLeft <= 0 ? 'start' : element.scrollLeft >= this.contentWidth - this.containerWidth ? 'end' : null,
      y: element.scrollTop <= 0 ? 'start' : element.scrollTop >= this.contentHeight - this.containerHeight ? 'end' : null
    };
    this.isAlive = true;
    this.settings.handlers.forEach(function (handlerName) {
      return handlers[handlerName](this$1);
    });
    this.lastScrollTop = Math.floor(element.scrollTop); // for onScroll only

    this.lastScrollLeft = element.scrollLeft; // for onScroll only

    this.event.bind(this.element, 'scroll', function (e) {
      return this$1.onScroll(e);
    });
    updateGeometry(this);
  };

  PerfectScrollbar.prototype.update = function update() {
    if (!this.isAlive) {
      return;
    } // Recalcuate negative scrollLeft adjustment


    this.negativeScrollAdjustment = this.isNegativeScroll ? this.element.scrollWidth - this.element.clientWidth : 0; // Recalculate rail margins

    set(this.scrollbarXRail, {
      display: 'block'
    });
    set(this.scrollbarYRail, {
      display: 'block'
    });
    this.railXMarginWidth = toInt(get(this.scrollbarXRail).marginLeft) + toInt(get(this.scrollbarXRail).marginRight);
    this.railYMarginHeight = toInt(get(this.scrollbarYRail).marginTop) + toInt(get(this.scrollbarYRail).marginBottom); // Hide scrollbars not to affect scrollWidth and scrollHeight

    set(this.scrollbarXRail, {
      display: 'none'
    });
    set(this.scrollbarYRail, {
      display: 'none'
    });
    updateGeometry(this);
    processScrollDiff(this, 'top', 0, false, true);
    processScrollDiff(this, 'left', 0, false, true);
    set(this.scrollbarXRail, {
      display: ''
    });
    set(this.scrollbarYRail, {
      display: ''
    });
  };

  PerfectScrollbar.prototype.onScroll = function onScroll(e) {
    if (!this.isAlive) {
      return;
    }

    updateGeometry(this);
    processScrollDiff(this, 'top', this.element.scrollTop - this.lastScrollTop);
    processScrollDiff(this, 'left', this.element.scrollLeft - this.lastScrollLeft);
    this.lastScrollTop = Math.floor(this.element.scrollTop);
    this.lastScrollLeft = this.element.scrollLeft;
  };

  PerfectScrollbar.prototype.destroy = function destroy() {
    if (!this.isAlive) {
      return;
    }

    this.event.unbindAll();
    remove(this.scrollbarX);
    remove(this.scrollbarY);
    remove(this.scrollbarXRail);
    remove(this.scrollbarYRail);
    this.removePsClasses(); // unset elements

    this.element = null;
    this.scrollbarX = null;
    this.scrollbarY = null;
    this.scrollbarXRail = null;
    this.scrollbarYRail = null;
    this.isAlive = false;
  };

  PerfectScrollbar.prototype.removePsClasses = function removePsClasses() {
    this.element.className = this.element.className.split(' ').filter(function (name) {
      return !name.match(/^ps([-_].+|)$/);
    }).join(' ');
  };

  function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var KbfDropdown = /*#__PURE__*/function (_EventTarget) {
    _inherits(KbfDropdown, _EventTarget);

    var _super = _createSuper$3(KbfDropdown);

    function KbfDropdown(selector) {
      var _this;

      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var scrollBlock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      _classCallCheck$1(this, KbfDropdown);

      _this = _super.call(this);

      if (selector === undefined) throw errors.argumentNotFound('selector');
      _this.selector = selector;
      _this.opts = opts;
      _this.scrollBlock = scrollBlock; // Czy blokowac scroll po otwarciu dropdown

      _this.init(); // Inicjalizuj


      _this.addListeners(); // Dodaj event listenery


      _this.initScrollBar(); // Inicjuj scrollbar


      return _this;
    }

    _createClass$1(KbfDropdown, [{
      key: "init",
      value: function init() {
        var $ = window.$; // Aliasy

        this.on = this.addEventListener;
        this.off = this.removeEventListener;
        this.emit = this.dispatchEvent;
        this.$dropdowns = $(this.selector); // Ustaw opcje z atrybuty data-options

        var dataOptions = this.$dropdowns.data('options');
        if (dataOptions) this.opts = dataOptions.split(','); // Wartosc poczatkowa

        this.startValue = this.$dropdowns.data('value');
        if (this.$dropdowns.length === 0) throw errors.elementNotFound(this.selector);
        this.$dropdownButtons = this.$dropdowns.find('button'); // Przyciski dropdown
        // Wstaw ukryte pole formularza

        this.$dropdowns.append($('<input class="form-control" type="hidden">'));
        this.$hiddenInputs = this.$dropdowns.find('input[type="hidden"]'); // Ustaw opcje

        this.setOptions(this.opts);
        this.$dropdownItems = this.$dropdowns.find('.dropdown-item'); // Elementy menu

        if (this.startValue) this.setActive(this.startValue);
      } // Dodaje listenery

    }, {
      key: "addListeners",
      value: function addListeners() {
        var $ = window.$;
        var instance = this; // Ustaw kontekst

        this.$dropdownItems.off('click');
        var wheelEvent = 'onwheel' in document.createElement('div') ? 'wheel' : 'mousewheel';

        function preventDefault(e) {
          e.preventDefault();
        }

        function disableScroll() {
          window.addEventListener('DOMMouseScroll', preventDefault, {
            passive: false
          }); // older FF

          window.addEventListener(wheelEvent, preventDefault, {
            passive: false
          }); // modern desktop

          window.addEventListener('touchmove', preventDefault, {
            passive: false
          }); // mobile
        }

        function enableScroll() {
          window.removeEventListener('DOMMouseScroll', preventDefault, {
            passive: false
          });
          window.removeEventListener(wheelEvent, preventDefault, {
            passive: false
          });
          window.removeEventListener('touchmove', preventDefault, {
            passive: false
          });
        }

        if (this.scrollBlock) {
          // Blokowanie scrollingu body kiedy dropdown jest widoczny
          this.$dropdowns.on('shown.bs.dropdown', function (e) {
            e.stopPropagation();
            disableScroll();
          });
          this.$dropdowns.on('hidden.bs.dropdown', function (e) {
            e.stopPropagation();
            enableScroll();
          });
        } // Gdy klikniemy na dropdown item


        this.$dropdownItems.on('click', function (e) {
          e.preventDefault();
          var $this = $(this); // Sprawdz czy wartosci sie zmienila

          if ($this.text() !== instance.displayed) {
            // Wyswietl nowa wartosc na przycisku
            instance.displayed = $this.text();
            instance.$dropdownButtons.text(instance.displayed); // Ustaw ukryte pole
            // Jeżeli opts jest obiektem

            if (Array.isArray(instance.opts) === false && _typeof(instance.opts) === 'object') {
              instance.$hiddenInputs.attr({
                name: instance.$dropdowns.data('name'),
                value: instance.opts[instance.displayed]
              });
              instance.emit(new CustomEvent('change', {
                detail: instance.opts[instance.displayed]
              })); // Emituj nowa wartosc
            } else // Jezeli opts jest tablica
              if (Array.isArray(instance.opts) === true) {
                instance.$hiddenInputs.attr({
                  name: instance.$dropdowns.data('name'),
                  value: instance.displayed
                });
                instance.emit(new CustomEvent('change', {
                  detail: instance.displayed
                })); // Emituj nowa wartosc
              }
          }
        });
      } // Inicjalizuje opcje

    }, {
      key: "setOptions",
      value: function setOptions(opts) {
        var $ = window.$;
        var dropdownMenu, optionsLastIdx, idx;
        var ariaLabelledBy = this.$dropdownButtons.attr('id');
        var instance = this; // Ustaw kontekst
        // Jeżeli opts jest obiektem

        if (Array.isArray(opts) === false && _typeof(opts) === 'object') {
          var keys = Object.keys(opts);
          optionsLastIdx = keys.length - 1;
          idx = 0; // Ustaw stan

          this.setState(); // Aktualizuj ukryte pole

          this.updateHiddenInput(); // Przygotuj elementy menu

          dropdownMenu = "<div class=\"dropdown-menu\" aria-labelledby=\"".concat(ariaLabelledBy, "\">");

          do {
            dropdownMenu += "<a class=\"dropdown-item\" href=\"#\">".concat(keys[idx], "</a>");
          } while (idx++ < optionsLastIdx);

          dropdownMenu += '</div>';
        } else // Jezeli opts jest tablica
          if (Array.isArray(opts) === true) {
            optionsLastIdx = opts.length - 1;
            idx = 0; // Ustaw stan

            this.setState(); // Aktualizuj ukryte pole

            this.updateHiddenInput(); // Przygotuj elementy menu

            dropdownMenu = "<div class=\"dropdown-menu\" aria-labelledby=\"".concat(ariaLabelledBy, "\">");

            do {
              dropdownMenu += "<a class=\"dropdown-item\" href=\"#\">".concat(opts[idx], "</a>");
            } while (idx++ < optionsLastIdx);

            dropdownMenu += '</div>';
          }

        this.$dropdownButtons.text(this.displayed); // Ustaw tekst na przycisku

        this.$dropdownButtons.on('click', function () {
          instance.initScrollBar(); // Scrollbar fix !

          instance.$dropdownMenu.on('click', function (e) {
            if (e.target.className.indexOf('ps__') !== -1) {
              e.stopPropagation();
            }
          });
        });
        this.$dropdowns.find('.dropdown-menu').remove();
        this.$dropdownMenu = $(dropdownMenu);
        this.$dropdownButtons.after(this.$dropdownMenu); // Ustaw szerokosc dropdown menu na szerokosc przycisku - fix

        this.$dropdownButtons.off('mouseenter');
        this.$dropdownButtons.on('mouseenter', function () {
          var $this = $(this);
          $this.next().css('width', $this.css('width'));
        });
        this.$dropdownMenu.css({
          width: this.$dropdownMenu.prev('button').css('width')
        });
      } // Ustawia nowe opcje

    }, {
      key: "updateOptions",
      value: function updateOptions(opts) {
        var newMenuItemsHtml = ''; // Generowany kod html dla elementow menu

        this.opts = opts; // Jeżeli opts jest obiektem

        if (Array.isArray(this.opts) === false && _typeof(this.opts) === 'object') {
          var keys = Object.keys(this.opts); // Usun istniejace elementy menu

          this.$dropdownItems.remove(); // Generuj nowy kod html dla elementow menu <a class="dropdown-item" href="#">Wszystkie</a>

          keys.forEach(function (key) {
            newMenuItemsHtml += "<a class=\"dropdown-item\" href=\"#\">".concat(key, "</a>");
          });
          this.$dropdownButtons.text(keys[0]); // Aktualizuj przycisk

          this.$dropdownMenu.html(newMenuItemsHtml);
          this.$dropdownItems = this.$dropdownMenu.find('.dropdown-item');
          this.addListeners(); // Dodaj ponownie listenery
          // Ustaw stan

          this.setState();
          this.initScrollBar();
        } else // Jezeli opts jest tablica
          if (Array.isArray(this.opts) === true) {
            // Usun istniejace elementy menu
            this.$dropdownItems.off('click');
            this.$dropdownItems.remove();
            this.opts.forEach(function (opt) {
              newMenuItemsHtml += "<a class=\"dropdown-item\" href=\"#\">".concat(opt, "</a>");
            });
            this.$dropdownButtons.text(this.opts[0]); // Aktualizuj przycisk

            this.$dropdownMenu.html(newMenuItemsHtml);
            this.$dropdownItems = this.$dropdownMenu.find('.dropdown-item');
            this.addListeners(); // Dodaj ponownie listenery
            // Ustaw stan

            this.setState();
          } // Aktualizuj ukryte pole


        this.updateHiddenInput();
      } // Aktualizuje ukryte pole input

    }, {
      key: "updateHiddenInput",
      value: function updateHiddenInput() {
        // Ustaw ukryte pola
        this.$hiddenInputs.attr({
          name: this.$dropdowns.data('name'),
          value: this.value
        });
      } // Ustawia aktywna opcje

    }, {
      key: "setActive",
      value: function setActive(optionName) {
        // Sprawdz poprawnosc argumentow
        if (optionName === undefined) throw errors.argumentNotFound('optionName'); // Jeżeli opts jest obiektem

        if (Array.isArray(this.opts) === false && _typeof(this.opts) === 'object') {
          // Sprawdz czy opcja istnieje
          if (optionName in this.opts === false) throw new Error("Option ".concat(optionName, " does not exist")); // Ustaw stan

          this.displayed = optionName;
          this.value = this.opts[optionName];
        } // Jezeli opts jest tablica


        if (Array.isArray(this.opts) === true) {
          // Sprawdz czy opcja istnieje
          if (this.opts.includes(optionName) === false) throw new Error("Option ".concat(optionName, " does not exist")); // Ustaw stan

          this.displayed = optionName;
          this.value = optionName;
        }

        this.$dropdownButtons.text(this.displayed); // Wyswietl nowa wartosc na przycisku

        this.updateHiddenInput(); // Aktualizuj ukryty input
      } // Ustawia stan

    }, {
      key: "setState",
      value: function setState() {
        // Jeżeli opts jest obiektem
        if (Array.isArray(this.opts) === false && _typeof(this.opts) === 'object') {
          var keys = Object.keys(this.opts); // Ustaw stan

          this.value = this.opts[keys[0]];
          this.displayed = keys[0];
          this.items = keys;
        } // Jezeli opts jest tablica


        if (Array.isArray(this.opts) === true) {
          // Ustaw stan
          this.value = this.opts[0];
          this.displayed = this.opts[0];
          this.items = this.opts;
        }
      } // Aktywuje scrollbar

    }, {
      key: "initScrollBar",
      value: function initScrollBar() {
        var instance = this;
        if (this.scrollbar) this.scrollbar.destroy(); // Inicjuj scrollbar

        this.scrollbar = new PerfectScrollbar(this.$dropdownMenu[0], {
          minScrollbarLength: 20
        });
        this.$psRail = this.$dropdowns.find('[class*="ps__rail-y"]');
        this.$psThumb = this.$dropdowns.find('[class*="ps__thumb-y"]'); // Wylacz pan mapy gdy kursor znajduje sie na scrollbar i mapa istnieje

        this.$psRail.on('mouseenter', function () {
          if (window.map) window.map.dragging.disable();
        });
        this.$dropdownMenu.on('mouseenter', function (e) {
          e.stopPropagation();
          instance.scrollbar.update();

          if (window.map) {
            if (window.map.scrollWheelZoom && window.map.dragging) {
              window.map.scrollWheelZoom.disable();
              window.map.dragging.disable();
            }
          }
        }); // Wlacz pan mapy gdy kursor opuszcza dropdown i mapa istnieje

        this.$psRail.on('mouseleave', function () {
          if (window.map) {
            if (window.map.dragging) window.map.dragging.enable();
          }
        });
        this.$dropdownMenu.on('mouseleave', function () {
          if (window.map) {
            if (window.map.scrollWheelZoom && window.map.dragging) {
              window.map.scrollWheelZoom.enable();
              window.map.dragging.enable();
            }
          }
        });
        this.$psRail.on('mousedown mouseup click', function (e) {
          e.stopPropagation();
        });
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.$dropdownItems.off('click');
        this.$hiddenInputs.remove();
        this.$dropdownMenu.remove();
      }
    }]);

    return KbfDropdown;
  }( /*#__PURE__*/_wrapNativeSuper(EventTarget));

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  var config = {
    env: 'dev',
    url: 'https://webplanet.biz',
    apiEndpoint: 'https://webplanet.biz/kbf/'
  };

  var apiEndpoint = config.apiEndpoint; // Sprawdza czy urzadzenie jest dotykowe

  function capitalizeIndustry(industry) {
    var _industry = industry.toLowerCase();

    return _industry.trim().substr(0, 1).toUpperCase() + _industry.trim().substr(1);
  } // Tworzy skrot

  function getEllipsis(string, length) {
    var ellipsis;
    if (string.length - 4 >= length - 4) ellipsis = string.trim().substring(0, length - 5) + ' ...';
    if (string.length - 4 < length - 4) ellipsis = string;
    return ellipsis;
  } // Przygotowuje opcje dla dropdown branz

  function getIndustriesOptions(industries) {
    var ellipsis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    // Utworz tablice branz
    var capitalizedIndustries = [];
    industries.forEach(function (industry) {
      if (ellipsis) capitalizedIndustries.push(capitalizeIndustry(getEllipsis(industry, 34)));else capitalizedIndustries.push(capitalizeIndustry(industry));
    }); // Utworz opcje

    var opts = {};
    var idx = 0;
    capitalizedIndustries.forEach(function (capitalizedIndustry) {
      opts[capitalizedIndustry] = industries[idx];
      idx++;
    });
    return opts;
  } // Pobiera nazwy branz z rest api

  function getIndustries() {
    return _getIndustries.apply(this, arguments);
  } // Pobiera nazwy sub branz z rest api dla danej branzy

  function _getIndustries() {
    _getIndustries = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
      var $;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              $ = window.$;
              _context.next = 3;
              return $.get("".concat(apiEndpoint, "/api/industries/"));

            case 3:
              return _context.abrupt("return", _context.sent);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _getIndustries.apply(this, arguments);
  }

  function getSubIndustries(_x) {
    return _getSubIndustries.apply(this, arguments);
  } // Pobiera dane do markerow dla mapy

  function _getSubIndustries() {
    _getSubIndustries = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(industryName) {
      var $;
      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              $ = window.$;
              _context2.next = 3;
              return $.get("".concat(apiEndpoint, "/api/sub-industries/?industry=").concat(industryName));

            case 3:
              return _context2.abrupt("return", _context2.sent);

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _getSubIndustries.apply(this, arguments);
  }

  function replacePlaceholders(placeholderMap, string) {
    for (var _i = 0, _Object$entries = Object.entries(placeholderMap); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          placeholder = _Object$entries$_i[0],
          value = _Object$entries$_i[1];

      string = string.replace(placeholder, value);
    }

    return string;
  }

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var KbfIndustrySwitcher = /*#__PURE__*/function (_EventTarget) {
    _inherits(KbfIndustrySwitcher, _EventTarget);

    var _super = _createSuper$2(KbfIndustrySwitcher);

    function KbfIndustrySwitcher(industriesId, subIndustriesId) {
      var _this;

      var firstOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Wszystkie';
      var ellipsis = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var scrollBlock = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

      _classCallCheck$1(this, KbfIndustrySwitcher);

      // Sprawdz czy podano argumenty
      if (!industriesId) throw errors.argumentNotFound(industriesId);
      if (!subIndustriesId) throw errors.argumentNotFound(subIndustriesId);
      _this = _super.call(this);
      _this.firstOption = firstOption; // Pierwsza opcja

      _this.scrollBlock = scrollBlock; // Czy blokowac scroll

      _this.ellipsis = ellipsis; // Czy stosowac skroty
      // Aliasy

      _this.on = _this.addEventListener;
      _this.off = _this.removeEventListener;
      _this.emit = _this.dispatchEvent;

      var instance = _assertThisInitialized(_this); // Ustaw kontekst


      _this.industriesId = industriesId;
      _this.subIndustriesId = subIndustriesId;
      _this.industries = []; // Lista branz

      _this.subIndustries = []; // Aktualna lista sub branz

      _this.currentIndustry = _this.firstOption; // Aktualnie wybrana branza

      _this.currentSubIndustry = _this.firstOption; // Aktualnie wybrana sub branza
      // Inicjalizuj

      _this.init().then(function () {
        instance.addListeners(); // Dodaj listenery
      });

      return _this;
    } // Dodaje listenery


    _createClass$1(KbfIndustrySwitcher, [{
      key: "addListeners",
      value: function addListeners() {
        var instance = this;
        this.industriesDropdown.on('change', /*#__PURE__*/function () {
          var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(e) {
            var subIndustriesResult;
            return regenerator.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    instance.currentIndustry = e.detail;

                    if (!(instance.currentIndustry !== instance.firstOption)) {
                      _context.next = 7;
                      break;
                    }

                    _context.next = 4;
                    return getSubIndustries(instance.currentIndustry);

                  case 4:
                    subIndustriesResult = _context.sent;
                    instance.subIndustries = subIndustriesResult.sub_industries; // Pobierz liste sub-branz

                    instance.updateEllipsis(); // Aktualizuj skroty

                  case 7:
                    if (instance.currentIndustry === instance.firstOption) {
                      instance.subIndustriesDropdown.updateOptions([instance.firstOption]);
                    }

                    instance.emitCurrentIndustries(); // Emituj aktualne ustawienie branz

                  case 9:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          return function (_x) {
            return _ref.apply(this, arguments);
          };
        }());
        this.subIndustriesDropdown.on('change', function (e) {
          instance.currentSubIndustry = e.detail;
          instance.emitCurrentIndustries(); // Emituj aktualne ustawienie branz
        });
      } // Inicjalizuje

    }, {
      key: "init",
      value: function () {
        var _init = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var instance, $, opts;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  instance = this; // Ustaw kontekst

                  $ = window.$; // Pobierz nazwy branz z rest api a nastepnie inicjuj dropdown z nazwami branz

                  _context2.next = 4;
                  return getIndustries();

                case 4:
                  this.industries = _context2.sent;
                  // Przygotuj opcje dropdown branz jako obiekt opts
                  opts = _objectSpread$1(_defineProperty({}, instance.firstOption, instance.firstOption), getIndustriesOptions(this.industries, this.ellipsis)); // Inicjuj dropdowny

                  this.industriesDropdown = new KbfDropdown('#' + this.industriesId, opts, this.scrollBlock); // Inicjalizuj dropdown z nazwami branz

                  this.subIndustriesDropdown = new KbfDropdown('#' + this.subIndustriesId, [this.firstOption], this.scrollBlock); // Inicjalizuj dropdown dla sub branz
                  // Ustaw responsywnosc dropdown'ow

                  $(window).off('resize', instance.resetDropdowns);
                  $(window).on('resize', instance.resetDropdowns.bind(instance));

                case 10:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function init() {
          return _init.apply(this, arguments);
        }

        return init;
      }()
    }, {
      key: "updateEllipsis",
      value: function updateEllipsis() {
        var opts = _objectSpread$1(_defineProperty({}, this.firstOption, this.firstOption), getIndustriesOptions(this.subIndustries, this.ellipsis));

        this.subIndustriesDropdown.updateOptions(opts);
        this.currentSubIndustry = this.firstOption;
      } // Emituje aktualne ustawienie branz

    }, {
      key: "emitCurrentIndustries",
      value: function emitCurrentIndustries() {
        var instance = this;
        this.emit(new CustomEvent('industries-changed', {
          detail: {
            industry: instance.currentIndustry,
            'sub-industry': instance.currentSubIndustry
          }
        }));
      } // Resetuje dropdown'y

    }, {
      key: "resetDropdowns",
      value: function resetDropdowns() {
        this.industriesDropdown.setActive(this.firstOption);
        this.subIndustries = [];
        this.subIndustriesDropdown.updateOptions([this.firstOption].concat(_toConsumableArray(this.subIndustries)));
        this.subIndustriesDropdown.setActive(this.firstOption);
      } // Usuwa komponent

    }, {
      key: "destroy",
      value: function destroy() {
        if (this.industriesDropdown) {
          this.industriesDropdown.destroy();
          this.industriesDropdown = undefined;
        }

        if (this.subIndustriesDropdown) {
          this.subIndustriesDropdown.destroy();
          this.subIndustriesDropdown = undefined;
        }
      }
    }]);

    return KbfIndustrySwitcher;
  }( /*#__PURE__*/_wrapNativeSuper(EventTarget));

  function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var KbfTagify = /*#__PURE__*/function (_EventTarget) {
    _inherits(KbfTagify, _EventTarget);

    var _super = _createSuper$1(KbfTagify);

    function KbfTagify(selector) {
      var _this;

      _classCallCheck$1(this, KbfTagify);

      _this = _super.call(this);
      var $ = window.$; // Sprawdz czy podano argumenty

      if (!selector) throw errors.argumentNotFound("Selector");
      _this.$tagifyElement = $(selector);
      if (_this.$tagifyElement.length === 0) throw errors.elementNotFound(selector);

      _this.init();

      _this.addListeners();

      return _this;
    }

    _createClass$1(KbfTagify, [{
      key: "init",
      value: function init() {
        var instance = this;
        this.$tagifyElement.tagify().on('change', function (e, value) {
          // Aktualizuj wartosc pola
          if (value) {
            var currentValue = JSON.parse(value);
            currentValue = currentValue.map(function (nextValue) {
              return nextValue.value;
            });
            instance.$tagifyElement.val(currentValue.join(','));
          } else instance.$tagifyElement.val('');
        });
      }
    }, {
      key: "addListeners",
      value: function addListeners() {}
    }]);

    return KbfTagify;
  }( /*#__PURE__*/_wrapNativeSuper(EventTarget));

  var quill = createCommonjsModule(function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
      module.exports = factory();
    })(typeof self !== 'undefined' ? self : commonjsGlobal, function () {
      return (
        /******/
        function (modules) {
          // webpackBootstrap

          /******/
          // The module cache

          /******/
          var installedModules = {};
          /******/

          /******/
          // The require function

          /******/

          function __webpack_require__(moduleId) {
            /******/

            /******/
            // Check if module is in cache

            /******/
            if (installedModules[moduleId]) {
              /******/
              return installedModules[moduleId].exports;
              /******/
            }
            /******/
            // Create a new module (and put it into the cache)

            /******/


            var module = installedModules[moduleId] = {
              /******/
              i: moduleId,

              /******/
              l: false,

              /******/
              exports: {}
              /******/

            };
            /******/

            /******/
            // Execute the module function

            /******/

            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/

            /******/
            // Flag the module as loaded

            /******/

            module.l = true;
            /******/

            /******/
            // Return the exports of the module

            /******/

            return module.exports;
            /******/
          }
          /******/

          /******/

          /******/
          // expose the modules object (__webpack_modules__)

          /******/


          __webpack_require__.m = modules;
          /******/

          /******/
          // expose the module cache

          /******/

          __webpack_require__.c = installedModules;
          /******/

          /******/
          // define getter function for harmony exports

          /******/

          __webpack_require__.d = function (exports, name, getter) {
            /******/
            if (!__webpack_require__.o(exports, name)) {
              /******/
              Object.defineProperty(exports, name, {
                /******/
                configurable: false,

                /******/
                enumerable: true,

                /******/
                get: getter
                /******/

              });
              /******/
            }
            /******/

          };
          /******/

          /******/
          // getDefaultExport function for compatibility with non-harmony modules

          /******/


          __webpack_require__.n = function (module) {
            /******/
            var getter = module && module.__esModule ?
            /******/
            function getDefault() {
              return module['default'];
            } :
            /******/
            function getModuleExports() {
              return module;
            };
            /******/

            __webpack_require__.d(getter, 'a', getter);
            /******/


            return getter;
            /******/
          };
          /******/

          /******/
          // Object.prototype.hasOwnProperty.call

          /******/


          __webpack_require__.o = function (object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          /******/

          /******/
          // __webpack_public_path__

          /******/


          __webpack_require__.p = "";
          /******/

          /******/
          // Load entry module and return exports

          /******/

          return __webpack_require__(__webpack_require__.s = 109);
          /******/
        }(
        /************************************************************************/

        /******/
        [
        /* 0 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var container_1 = __webpack_require__(17);

          var format_1 = __webpack_require__(18);

          var leaf_1 = __webpack_require__(19);

          var scroll_1 = __webpack_require__(45);

          var inline_1 = __webpack_require__(46);

          var block_1 = __webpack_require__(47);

          var embed_1 = __webpack_require__(48);

          var text_1 = __webpack_require__(49);

          var attributor_1 = __webpack_require__(12);

          var class_1 = __webpack_require__(32);

          var style_1 = __webpack_require__(33);

          var store_1 = __webpack_require__(31);

          var Registry = __webpack_require__(1);

          var Parchment = {
            Scope: Registry.Scope,
            create: Registry.create,
            find: Registry.find,
            query: Registry.query,
            register: Registry.register,
            Container: container_1.default,
            Format: format_1.default,
            Leaf: leaf_1.default,
            Embed: embed_1.default,
            Scroll: scroll_1.default,
            Block: block_1.default,
            Inline: inline_1.default,
            Text: text_1.default,
            Attributor: {
              Attribute: attributor_1.default,
              Class: class_1.default,
              Style: style_1.default,
              Store: store_1.default
            }
          };
          exports.default = Parchment;
          /***/
        },
        /* 1 */

        /***/
        function (module, exports, __webpack_require__) {

          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var ParchmentError =
          /** @class */
          function (_super) {
            __extends(ParchmentError, _super);

            function ParchmentError(message) {
              var _this = this;

              message = '[Parchment] ' + message;
              _this = _super.call(this, message) || this;
              _this.message = message;
              _this.name = _this.constructor.name;
              return _this;
            }

            return ParchmentError;
          }(Error);

          exports.ParchmentError = ParchmentError;
          var attributes = {};
          var classes = {};
          var tags = {};
          var types = {};
          exports.DATA_KEY = '__blot';
          var Scope;

          (function (Scope) {
            Scope[Scope["TYPE"] = 3] = "TYPE";
            Scope[Scope["LEVEL"] = 12] = "LEVEL";
            Scope[Scope["ATTRIBUTE"] = 13] = "ATTRIBUTE";
            Scope[Scope["BLOT"] = 14] = "BLOT";
            Scope[Scope["INLINE"] = 7] = "INLINE";
            Scope[Scope["BLOCK"] = 11] = "BLOCK";
            Scope[Scope["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
            Scope[Scope["INLINE_BLOT"] = 6] = "INLINE_BLOT";
            Scope[Scope["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
            Scope[Scope["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
            Scope[Scope["ANY"] = 15] = "ANY";
          })(Scope = exports.Scope || (exports.Scope = {}));

          function create(input, value) {
            var match = query(input);

            if (match == null) {
              throw new ParchmentError("Unable to create " + input + " blot");
            }

            var BlotClass = match;
            var node = // @ts-ignore
            input instanceof Node || input['nodeType'] === Node.TEXT_NODE ? input : BlotClass.create(value);
            return new BlotClass(node, value);
          }

          exports.create = create;

          function find(node, bubble) {
            if (bubble === void 0) {
              bubble = false;
            }

            if (node == null) return null; // @ts-ignore

            if (node[exports.DATA_KEY] != null) return node[exports.DATA_KEY].blot;
            if (bubble) return find(node.parentNode, bubble);
            return null;
          }

          exports.find = find;

          function query(query, scope) {
            if (scope === void 0) {
              scope = Scope.ANY;
            }

            var match;

            if (typeof query === 'string') {
              match = types[query] || attributes[query]; // @ts-ignore
            } else if (query instanceof Text || query['nodeType'] === Node.TEXT_NODE) {
              match = types['text'];
            } else if (typeof query === 'number') {
              if (query & Scope.LEVEL & Scope.BLOCK) {
                match = types['block'];
              } else if (query & Scope.LEVEL & Scope.INLINE) {
                match = types['inline'];
              }
            } else if (query instanceof HTMLElement) {
              var names = (query.getAttribute('class') || '').split(/\s+/);

              for (var i in names) {
                match = classes[names[i]];
                if (match) break;
              }

              match = match || tags[query.tagName];
            }

            if (match == null) return null; // @ts-ignore

            if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope) return match;
            return null;
          }

          exports.query = query;

          function register() {
            var Definitions = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              Definitions[_i] = arguments[_i];
            }

            if (Definitions.length > 1) {
              return Definitions.map(function (d) {
                return register(d);
              });
            }

            var Definition = Definitions[0];

            if (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {
              throw new ParchmentError('Invalid definition');
            } else if (Definition.blotName === 'abstract') {
              throw new ParchmentError('Cannot register abstract class');
            }

            types[Definition.blotName || Definition.attrName] = Definition;

            if (typeof Definition.keyName === 'string') {
              attributes[Definition.keyName] = Definition;
            } else {
              if (Definition.className != null) {
                classes[Definition.className] = Definition;
              }

              if (Definition.tagName != null) {
                if (Array.isArray(Definition.tagName)) {
                  Definition.tagName = Definition.tagName.map(function (tagName) {
                    return tagName.toUpperCase();
                  });
                } else {
                  Definition.tagName = Definition.tagName.toUpperCase();
                }

                var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];
                tagNames.forEach(function (tag) {
                  if (tags[tag] == null || Definition.className == null) {
                    tags[tag] = Definition;
                  }
                });
              }
            }

            return Definition;
          }

          exports.register = register;
          /***/
        },
        /* 2 */

        /***/
        function (module, exports, __webpack_require__) {
          var diff = __webpack_require__(51);

          var equal = __webpack_require__(11);

          var extend = __webpack_require__(3);

          var op = __webpack_require__(20);

          var NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()

          var Delta = function Delta(ops) {
            // Assume we are given a well formed ops
            if (Array.isArray(ops)) {
              this.ops = ops;
            } else if (ops != null && Array.isArray(ops.ops)) {
              this.ops = ops.ops;
            } else {
              this.ops = [];
            }
          };

          Delta.prototype.insert = function (text, attributes) {
            var newOp = {};
            if (text.length === 0) return this;
            newOp.insert = text;

            if (attributes != null && _typeof(attributes) === 'object' && Object.keys(attributes).length > 0) {
              newOp.attributes = attributes;
            }

            return this.push(newOp);
          };

          Delta.prototype['delete'] = function (length) {
            if (length <= 0) return this;
            return this.push({
              'delete': length
            });
          };

          Delta.prototype.retain = function (length, attributes) {
            if (length <= 0) return this;
            var newOp = {
              retain: length
            };

            if (attributes != null && _typeof(attributes) === 'object' && Object.keys(attributes).length > 0) {
              newOp.attributes = attributes;
            }

            return this.push(newOp);
          };

          Delta.prototype.push = function (newOp) {
            var index = this.ops.length;
            var lastOp = this.ops[index - 1];
            newOp = extend(true, {}, newOp);

            if (_typeof(lastOp) === 'object') {
              if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {
                this.ops[index - 1] = {
                  'delete': lastOp['delete'] + newOp['delete']
                };
                return this;
              } // Since it does not matter if we insert before or after deleting at the same index,
              // always prefer to insert first


              if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {
                index -= 1;
                lastOp = this.ops[index - 1];

                if (_typeof(lastOp) !== 'object') {
                  this.ops.unshift(newOp);
                  return this;
                }
              }

              if (equal(newOp.attributes, lastOp.attributes)) {
                if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
                  this.ops[index - 1] = {
                    insert: lastOp.insert + newOp.insert
                  };
                  if (_typeof(newOp.attributes) === 'object') this.ops[index - 1].attributes = newOp.attributes;
                  return this;
                } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
                  this.ops[index - 1] = {
                    retain: lastOp.retain + newOp.retain
                  };
                  if (_typeof(newOp.attributes) === 'object') this.ops[index - 1].attributes = newOp.attributes;
                  return this;
                }
              }
            }

            if (index === this.ops.length) {
              this.ops.push(newOp);
            } else {
              this.ops.splice(index, 0, newOp);
            }

            return this;
          };

          Delta.prototype.chop = function () {
            var lastOp = this.ops[this.ops.length - 1];

            if (lastOp && lastOp.retain && !lastOp.attributes) {
              this.ops.pop();
            }

            return this;
          };

          Delta.prototype.filter = function (predicate) {
            return this.ops.filter(predicate);
          };

          Delta.prototype.forEach = function (predicate) {
            this.ops.forEach(predicate);
          };

          Delta.prototype.map = function (predicate) {
            return this.ops.map(predicate);
          };

          Delta.prototype.partition = function (predicate) {
            var passed = [],
                failed = [];
            this.forEach(function (op) {
              var target = predicate(op) ? passed : failed;
              target.push(op);
            });
            return [passed, failed];
          };

          Delta.prototype.reduce = function (predicate, initial) {
            return this.ops.reduce(predicate, initial);
          };

          Delta.prototype.changeLength = function () {
            return this.reduce(function (length, elem) {
              if (elem.insert) {
                return length + op.length(elem);
              } else if (elem.delete) {
                return length - elem.delete;
              }

              return length;
            }, 0);
          };

          Delta.prototype.length = function () {
            return this.reduce(function (length, elem) {
              return length + op.length(elem);
            }, 0);
          };

          Delta.prototype.slice = function (start, end) {
            start = start || 0;
            if (typeof end !== 'number') end = Infinity;
            var ops = [];
            var iter = op.iterator(this.ops);
            var index = 0;

            while (index < end && iter.hasNext()) {
              var nextOp;

              if (index < start) {
                nextOp = iter.next(start - index);
              } else {
                nextOp = iter.next(end - index);
                ops.push(nextOp);
              }

              index += op.length(nextOp);
            }

            return new Delta(ops);
          };

          Delta.prototype.compose = function (other) {
            var thisIter = op.iterator(this.ops);
            var otherIter = op.iterator(other.ops);
            var ops = [];
            var firstOther = otherIter.peek();

            if (firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null) {
              var firstLeft = firstOther.retain;

              while (thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft) {
                firstLeft -= thisIter.peekLength();
                ops.push(thisIter.next());
              }

              if (firstOther.retain - firstLeft > 0) {
                otherIter.next(firstOther.retain - firstLeft);
              }
            }

            var delta = new Delta(ops);

            while (thisIter.hasNext() || otherIter.hasNext()) {
              if (otherIter.peekType() === 'insert') {
                delta.push(otherIter.next());
              } else if (thisIter.peekType() === 'delete') {
                delta.push(thisIter.next());
              } else {
                var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
                var thisOp = thisIter.next(length);
                var otherOp = otherIter.next(length);

                if (typeof otherOp.retain === 'number') {
                  var newOp = {};

                  if (typeof thisOp.retain === 'number') {
                    newOp.retain = length;
                  } else {
                    newOp.insert = thisOp.insert;
                  } // Preserve null when composing with a retain, otherwise remove it for inserts


                  var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
                  if (attributes) newOp.attributes = attributes;
                  delta.push(newOp); // Optimization if rest of other is just retain

                  if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {
                    var rest = new Delta(thisIter.rest());
                    return delta.concat(rest).chop();
                  } // Other op should be delete, we could be an insert or retain
                  // Insert + delete cancels out

                } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {
                  delta.push(otherOp);
                }
              }
            }

            return delta.chop();
          };

          Delta.prototype.concat = function (other) {
            var delta = new Delta(this.ops.slice());

            if (other.ops.length > 0) {
              delta.push(other.ops[0]);
              delta.ops = delta.ops.concat(other.ops.slice(1));
            }

            return delta;
          };

          Delta.prototype.diff = function (other, index) {
            if (this.ops === other.ops) {
              return new Delta();
            }

            var strings = [this, other].map(function (delta) {
              return delta.map(function (op) {
                if (op.insert != null) {
                  return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
                }

                var prep = delta === other ? 'on' : 'with';
                throw new Error('diff() called ' + prep + ' non-document');
              }).join('');
            });
            var delta = new Delta();
            var diffResult = diff(strings[0], strings[1], index);
            var thisIter = op.iterator(this.ops);
            var otherIter = op.iterator(other.ops);
            diffResult.forEach(function (component) {
              var length = component[1].length;

              while (length > 0) {
                var opLength = 0;

                switch (component[0]) {
                  case diff.INSERT:
                    opLength = Math.min(otherIter.peekLength(), length);
                    delta.push(otherIter.next(opLength));
                    break;

                  case diff.DELETE:
                    opLength = Math.min(length, thisIter.peekLength());
                    thisIter.next(opLength);
                    delta['delete'](opLength);
                    break;

                  case diff.EQUAL:
                    opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
                    var thisOp = thisIter.next(opLength);
                    var otherOp = otherIter.next(opLength);

                    if (equal(thisOp.insert, otherOp.insert)) {
                      delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
                    } else {
                      delta.push(otherOp)['delete'](opLength);
                    }

                    break;
                }

                length -= opLength;
              }
            });
            return delta.chop();
          };

          Delta.prototype.eachLine = function (predicate, newline) {
            newline = newline || '\n';
            var iter = op.iterator(this.ops);
            var line = new Delta();
            var i = 0;

            while (iter.hasNext()) {
              if (iter.peekType() !== 'insert') return;
              var thisOp = iter.peek();
              var start = op.length(thisOp) - iter.peekLength();
              var index = typeof thisOp.insert === 'string' ? thisOp.insert.indexOf(newline, start) - start : -1;

              if (index < 0) {
                line.push(iter.next());
              } else if (index > 0) {
                line.push(iter.next(index));
              } else {
                if (predicate(line, iter.next(1).attributes || {}, i) === false) {
                  return;
                }

                i += 1;
                line = new Delta();
              }
            }

            if (line.length() > 0) {
              predicate(line, {}, i);
            }
          };

          Delta.prototype.transform = function (other, priority) {
            priority = !!priority;

            if (typeof other === 'number') {
              return this.transformPosition(other, priority);
            }

            var thisIter = op.iterator(this.ops);
            var otherIter = op.iterator(other.ops);
            var delta = new Delta();

            while (thisIter.hasNext() || otherIter.hasNext()) {
              if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {
                delta.retain(op.length(thisIter.next()));
              } else if (otherIter.peekType() === 'insert') {
                delta.push(otherIter.next());
              } else {
                var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
                var thisOp = thisIter.next(length);
                var otherOp = otherIter.next(length);

                if (thisOp['delete']) {
                  // Our delete either makes their delete redundant or removes their retain
                  continue;
                } else if (otherOp['delete']) {
                  delta.push(otherOp);
                } else {
                  // We retain either their retain or insert
                  delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
                }
              }
            }

            return delta.chop();
          };

          Delta.prototype.transformPosition = function (index, priority) {
            priority = !!priority;
            var thisIter = op.iterator(this.ops);
            var offset = 0;

            while (thisIter.hasNext() && offset <= index) {
              var length = thisIter.peekLength();
              var nextType = thisIter.peekType();
              thisIter.next();

              if (nextType === 'delete') {
                index -= Math.min(length, index - offset);
                continue;
              } else if (nextType === 'insert' && (offset < index || !priority)) {
                index += length;
              }

              offset += length;
            }

            return index;
          };

          module.exports = Delta;
          /***/
        },
        /* 3 */

        /***/
        function (module, exports) {

          var hasOwn = Object.prototype.hasOwnProperty;
          var toStr = Object.prototype.toString;
          var defineProperty = Object.defineProperty;
          var gOPD = Object.getOwnPropertyDescriptor;

          var isArray = function isArray(arr) {
            if (typeof Array.isArray === 'function') {
              return Array.isArray(arr);
            }

            return toStr.call(arr) === '[object Array]';
          };

          var isPlainObject = function isPlainObject(obj) {
            if (!obj || toStr.call(obj) !== '[object Object]') {
              return false;
            }

            var hasOwnConstructor = hasOwn.call(obj, 'constructor');
            var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf'); // Not own constructor property must be Object

            if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
              return false;
            } // Own properties are enumerated firstly, so to speed up,
            // if last one is own, then all properties are own.


            var key;

            for (key in obj) {
              /**/
            }

            return typeof key === 'undefined' || hasOwn.call(obj, key);
          }; // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target


          var setProperty = function setProperty(target, options) {
            if (defineProperty && options.name === '__proto__') {
              defineProperty(target, options.name, {
                enumerable: true,
                configurable: true,
                value: options.newValue,
                writable: true
              });
            } else {
              target[options.name] = options.newValue;
            }
          }; // Return undefined instead of __proto__ if '__proto__' is not an own property


          var getProperty = function getProperty(obj, name) {
            if (name === '__proto__') {
              if (!hasOwn.call(obj, name)) {
                return void 0;
              } else if (gOPD) {
                // In early versions of node, obj['__proto__'] is buggy when obj has
                // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
                return gOPD(obj, name).value;
              }
            }

            return obj[name];
          };

          module.exports = function extend() {
            var options, name, src, copy, copyIsArray, clone;
            var target = arguments[0];
            var i = 1;
            var length = arguments.length;
            var deep = false; // Handle a deep copy situation

            if (typeof target === 'boolean') {
              deep = target;
              target = arguments[1] || {}; // skip the boolean and the target

              i = 2;
            }

            if (target == null || _typeof(target) !== 'object' && typeof target !== 'function') {
              target = {};
            }

            for (; i < length; ++i) {
              options = arguments[i]; // Only deal with non-null/undefined values

              if (options != null) {
                // Extend the base object
                for (name in options) {
                  src = getProperty(target, name);
                  copy = getProperty(options, name); // Prevent never-ending loop

                  if (target !== copy) {
                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                      if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && isArray(src) ? src : [];
                      } else {
                        clone = src && isPlainObject(src) ? src : {};
                      } // Never move original objects, clone them


                      setProperty(target, {
                        name: name,
                        newValue: extend(deep, clone, copy)
                      }); // Don't bring in undefined values
                    } else if (typeof copy !== 'undefined') {
                      setProperty(target, {
                        name: name,
                        newValue: copy
                      });
                    }
                  }
                }
              }
            } // Return the modified object


            return target;
          };
          /***/

        },
        /* 4 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _break = __webpack_require__(16);

          var _break2 = _interopRequireDefault(_break);

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          var _text = __webpack_require__(7);

          var _text2 = _interopRequireDefault(_text);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var NEWLINE_LENGTH = 1;

          var BlockEmbed = function (_Parchment$Embed) {
            _inherits(BlockEmbed, _Parchment$Embed);

            function BlockEmbed() {
              _classCallCheck(this, BlockEmbed);

              return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));
            }

            _createClass(BlockEmbed, [{
              key: 'attach',
              value: function attach() {
                _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);

                this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
              }
            }, {
              key: 'delta',
              value: function delta() {
                return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
              }
            }, {
              key: 'format',
              value: function format(name, value) {
                var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);

                if (attribute != null) {
                  this.attributes.attribute(attribute, value);
                }
              }
            }, {
              key: 'formatAt',
              value: function formatAt(index, length, name, value) {
                this.format(name, value);
              }
            }, {
              key: 'insertAt',
              value: function insertAt(index, value, def) {
                if (typeof value === 'string' && value.endsWith('\n')) {
                  var block = _parchment2.default.create(Block.blotName);

                  this.parent.insertBefore(block, index === 0 ? this : this.next);
                  block.insertAt(0, value.slice(0, -1));
                } else {
                  _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);
                }
              }
            }]);

            return BlockEmbed;
          }(_parchment2.default.Embed);

          BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT; // It is important for cursor behavior BlockEmbeds use tags that are block level elements

          var Block = function (_Parchment$Block) {
            _inherits(Block, _Parchment$Block);

            function Block(domNode) {
              _classCallCheck(this, Block);

              var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));

              _this2.cache = {};
              return _this2;
            }

            _createClass(Block, [{
              key: 'delta',
              value: function delta() {
                if (this.cache.delta == null) {
                  this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function (delta, leaf) {
                    if (leaf.length() === 0) {
                      return delta;
                    } else {
                      return delta.insert(leaf.value(), bubbleFormats(leaf));
                    }
                  }, new _quillDelta2.default()).insert('\n', bubbleFormats(this));
                }

                return this.cache.delta;
              }
            }, {
              key: 'deleteAt',
              value: function deleteAt(index, length) {
                _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);

                this.cache = {};
              }
            }, {
              key: 'formatAt',
              value: function formatAt(index, length, name, value) {
                if (length <= 0) return;

                if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
                  if (index + length === this.length()) {
                    this.format(name, value);
                  }
                } else {
                  _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);
                }

                this.cache = {};
              }
            }, {
              key: 'insertAt',
              value: function insertAt(index, value, def) {
                if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);
                if (value.length === 0) return;
                var lines = value.split('\n');
                var text = lines.shift();

                if (text.length > 0) {
                  if (index < this.length() - 1 || this.children.tail == null) {
                    _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);
                  } else {
                    this.children.tail.insertAt(this.children.tail.length(), text);
                  }

                  this.cache = {};
                }

                var block = this;
                lines.reduce(function (index, line) {
                  block = block.split(index, true);
                  block.insertAt(0, line);
                  return line.length;
                }, index + text.length);
              }
            }, {
              key: 'insertBefore',
              value: function insertBefore(blot, ref) {
                var head = this.children.head;

                _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);

                if (head instanceof _break2.default) {
                  head.remove();
                }

                this.cache = {};
              }
            }, {
              key: 'length',
              value: function length() {
                if (this.cache.length == null) {
                  this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;
                }

                return this.cache.length;
              }
            }, {
              key: 'moveChildren',
              value: function moveChildren(target, ref) {
                _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);

                this.cache = {};
              }
            }, {
              key: 'optimize',
              value: function optimize(context) {
                _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this, context);

                this.cache = {};
              }
            }, {
              key: 'path',
              value: function path(index) {
                return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);
              }
            }, {
              key: 'removeChild',
              value: function removeChild(child) {
                _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);

                this.cache = {};
              }
            }, {
              key: 'split',
              value: function split(index) {
                var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
                  var clone = this.clone();

                  if (index === 0) {
                    this.parent.insertBefore(clone, this);
                    return this;
                  } else {
                    this.parent.insertBefore(clone, this.next);
                    return clone;
                  }
                } else {
                  var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);

                  this.cache = {};
                  return next;
                }
              }
            }]);

            return Block;
          }(_parchment2.default.Block);

          Block.blotName = 'block';
          Block.tagName = 'P';
          Block.defaultChild = 'break';
          Block.allowedChildren = [_inline2.default, _parchment2.default.Embed, _text2.default];

          function bubbleFormats(blot) {
            var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            if (blot == null) return formats;

            if (typeof blot.formats === 'function') {
              formats = (0, _extend2.default)(formats, blot.formats());
            }

            if (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
              return formats;
            }

            return bubbleFormats(blot.parent, formats);
          }

          exports.bubbleFormats = bubbleFormats;
          exports.BlockEmbed = BlockEmbed;
          exports.default = Block;
          /***/
        },
        /* 5 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.overload = exports.expandConfig = undefined;

          var _typeof$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
            return _typeof(obj);
          } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof(obj);
          };

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          __webpack_require__(50);

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _editor = __webpack_require__(14);

          var _editor2 = _interopRequireDefault(_editor);

          var _emitter3 = __webpack_require__(8);

          var _emitter4 = _interopRequireDefault(_emitter3);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _selection = __webpack_require__(15);

          var _selection2 = _interopRequireDefault(_selection);

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          var _logger = __webpack_require__(10);

          var _logger2 = _interopRequireDefault(_logger);

          var _theme = __webpack_require__(34);

          var _theme2 = _interopRequireDefault(_theme);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var debug = (0, _logger2.default)('quill');

          var Quill = function () {
            _createClass(Quill, null, [{
              key: 'debug',
              value: function debug(limit) {
                if (limit === true) {
                  limit = 'log';
                }

                _logger2.default.level(limit);
              }
            }, {
              key: 'find',
              value: function find(node) {
                return node.__quill || _parchment2.default.find(node);
              }
            }, {
              key: 'import',
              value: function _import(name) {
                if (this.imports[name] == null) {
                  debug.error('Cannot import ' + name + '. Are you sure it was registered?');
                }

                return this.imports[name];
              }
            }, {
              key: 'register',
              value: function register(path, target) {
                var _this = this;

                var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                if (typeof path !== 'string') {
                  var name = path.attrName || path.blotName;

                  if (typeof name === 'string') {
                    // register(Blot | Attributor, overwrite)
                    this.register('formats/' + name, path, target);
                  } else {
                    Object.keys(path).forEach(function (key) {
                      _this.register(key, path[key], target);
                    });
                  }
                } else {
                  if (this.imports[path] != null && !overwrite) {
                    debug.warn('Overwriting ' + path + ' with', target);
                  }

                  this.imports[path] = target;

                  if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {
                    _parchment2.default.register(target);
                  } else if (path.startsWith('modules') && typeof target.register === 'function') {
                    target.register();
                  }
                }
              }
            }]);

            function Quill(container) {
              var _this2 = this;

              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              _classCallCheck(this, Quill);

              this.options = expandConfig(container, options);
              this.container = this.options.container;

              if (this.container == null) {
                return debug.error('Invalid Quill container', container);
              }

              if (this.options.debug) {
                Quill.debug(this.options.debug);
              }

              var html = this.container.innerHTML.trim();
              this.container.classList.add('ql-container');
              this.container.innerHTML = '';
              this.container.__quill = this;
              this.root = this.addContainer('ql-editor');
              this.root.classList.add('ql-blank');
              this.root.setAttribute('data-gramm', false);
              this.scrollingContainer = this.options.scrollingContainer || this.root;
              this.emitter = new _emitter4.default();
              this.scroll = _parchment2.default.create(this.root, {
                emitter: this.emitter,
                whitelist: this.options.formats
              });
              this.editor = new _editor2.default(this.scroll);
              this.selection = new _selection2.default(this.scroll, this.emitter);
              this.theme = new this.options.theme(this, this.options);
              this.keyboard = this.theme.addModule('keyboard');
              this.clipboard = this.theme.addModule('clipboard');
              this.history = this.theme.addModule('history');
              this.theme.init();
              this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type) {
                if (type === _emitter4.default.events.TEXT_CHANGE) {
                  _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());
                }
              });
              this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function (source, mutations) {
                var range = _this2.selection.lastRange;
                var index = range && range.length === 0 ? range.index : undefined;
                modify.call(_this2, function () {
                  return _this2.editor.update(null, mutations, index);
                }, source);
              });
              var contents = this.clipboard.convert('<div class=\'ql-editor\' style="white-space: normal;">' + html + '<p><br></p></div>');
              this.setContents(contents);
              this.history.clear();

              if (this.options.placeholder) {
                this.root.setAttribute('data-placeholder', this.options.placeholder);
              }

              if (this.options.readOnly) {
                this.disable();
              }
            }

            _createClass(Quill, [{
              key: 'addContainer',
              value: function addContainer(container) {
                var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

                if (typeof container === 'string') {
                  var className = container;
                  container = document.createElement('div');
                  container.classList.add(className);
                }

                this.container.insertBefore(container, refNode);
                return container;
              }
            }, {
              key: 'blur',
              value: function blur() {
                this.selection.setRange(null);
              }
            }, {
              key: 'deleteText',
              value: function deleteText(index, length, source) {
                var _this3 = this;

                var _overload = overload(index, length, source);

                var _overload2 = _slicedToArray(_overload, 4);

                index = _overload2[0];
                length = _overload2[1];
                source = _overload2[3];
                return modify.call(this, function () {
                  return _this3.editor.deleteText(index, length);
                }, source, index, -1 * length);
              }
            }, {
              key: 'disable',
              value: function disable() {
                this.enable(false);
              }
            }, {
              key: 'enable',
              value: function enable() {
                var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                this.scroll.enable(enabled);
                this.container.classList.toggle('ql-disabled', !enabled);
              }
            }, {
              key: 'focus',
              value: function focus() {
                var scrollTop = this.scrollingContainer.scrollTop;
                this.selection.focus();
                this.scrollingContainer.scrollTop = scrollTop;
                this.scrollIntoView();
              }
            }, {
              key: 'format',
              value: function format(name, value) {
                var _this4 = this;

                var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;
                return modify.call(this, function () {
                  var range = _this4.getSelection(true);

                  var change = new _quillDelta2.default();

                  if (range == null) {
                    return change;
                  } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
                    change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));
                  } else if (range.length === 0) {
                    _this4.selection.format(name, value);

                    return change;
                  } else {
                    change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));
                  }

                  _this4.setSelection(range, _emitter4.default.sources.SILENT);

                  return change;
                }, source);
              }
            }, {
              key: 'formatLine',
              value: function formatLine(index, length, name, value, source) {
                var _this5 = this;

                var formats = void 0;

                var _overload3 = overload(index, length, name, value, source);

                var _overload4 = _slicedToArray(_overload3, 4);

                index = _overload4[0];
                length = _overload4[1];
                formats = _overload4[2];
                source = _overload4[3];
                return modify.call(this, function () {
                  return _this5.editor.formatLine(index, length, formats);
                }, source, index, 0);
              }
            }, {
              key: 'formatText',
              value: function formatText(index, length, name, value, source) {
                var _this6 = this;

                var formats = void 0;

                var _overload5 = overload(index, length, name, value, source);

                var _overload6 = _slicedToArray(_overload5, 4);

                index = _overload6[0];
                length = _overload6[1];
                formats = _overload6[2];
                source = _overload6[3];
                return modify.call(this, function () {
                  return _this6.editor.formatText(index, length, formats);
                }, source, index, 0);
              }
            }, {
              key: 'getBounds',
              value: function getBounds(index) {
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var bounds = void 0;

                if (typeof index === 'number') {
                  bounds = this.selection.getBounds(index, length);
                } else {
                  bounds = this.selection.getBounds(index.index, index.length);
                }

                var containerBounds = this.container.getBoundingClientRect();
                return {
                  bottom: bounds.bottom - containerBounds.top,
                  height: bounds.height,
                  left: bounds.left - containerBounds.left,
                  right: bounds.right - containerBounds.left,
                  top: bounds.top - containerBounds.top,
                  width: bounds.width
                };
              }
            }, {
              key: 'getContents',
              value: function getContents() {
                var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

                var _overload7 = overload(index, length);

                var _overload8 = _slicedToArray(_overload7, 2);

                index = _overload8[0];
                length = _overload8[1];
                return this.editor.getContents(index, length);
              }
            }, {
              key: 'getFormat',
              value: function getFormat() {
                var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

                if (typeof index === 'number') {
                  return this.editor.getFormat(index, length);
                } else {
                  return this.editor.getFormat(index.index, index.length);
                }
              }
            }, {
              key: 'getIndex',
              value: function getIndex(blot) {
                return blot.offset(this.scroll);
              }
            }, {
              key: 'getLength',
              value: function getLength() {
                return this.scroll.length();
              }
            }, {
              key: 'getLeaf',
              value: function getLeaf(index) {
                return this.scroll.leaf(index);
              }
            }, {
              key: 'getLine',
              value: function getLine(index) {
                return this.scroll.line(index);
              }
            }, {
              key: 'getLines',
              value: function getLines() {
                var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

                if (typeof index !== 'number') {
                  return this.scroll.lines(index.index, index.length);
                } else {
                  return this.scroll.lines(index, length);
                }
              }
            }, {
              key: 'getModule',
              value: function getModule(name) {
                return this.theme.modules[name];
              }
            }, {
              key: 'getSelection',
              value: function getSelection() {
                var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                if (focus) this.focus();
                this.update(); // Make sure we access getRange with editor in consistent state

                return this.selection.getRange()[0];
              }
            }, {
              key: 'getText',
              value: function getText() {
                var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

                var _overload9 = overload(index, length);

                var _overload10 = _slicedToArray(_overload9, 2);

                index = _overload10[0];
                length = _overload10[1];
                return this.editor.getText(index, length);
              }
            }, {
              key: 'hasFocus',
              value: function hasFocus() {
                return this.selection.hasFocus();
              }
            }, {
              key: 'insertEmbed',
              value: function insertEmbed(index, embed, value) {
                var _this7 = this;

                var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;
                return modify.call(this, function () {
                  return _this7.editor.insertEmbed(index, embed, value);
                }, source, index);
              }
            }, {
              key: 'insertText',
              value: function insertText(index, text, name, value, source) {
                var _this8 = this;

                var formats = void 0;

                var _overload11 = overload(index, 0, name, value, source);

                var _overload12 = _slicedToArray(_overload11, 4);

                index = _overload12[0];
                formats = _overload12[2];
                source = _overload12[3];
                return modify.call(this, function () {
                  return _this8.editor.insertText(index, text, formats);
                }, source, index, text.length);
              }
            }, {
              key: 'isEnabled',
              value: function isEnabled() {
                return !this.container.classList.contains('ql-disabled');
              }
            }, {
              key: 'off',
              value: function off() {
                return this.emitter.off.apply(this.emitter, arguments);
              }
            }, {
              key: 'on',
              value: function on() {
                return this.emitter.on.apply(this.emitter, arguments);
              }
            }, {
              key: 'once',
              value: function once() {
                return this.emitter.once.apply(this.emitter, arguments);
              }
            }, {
              key: 'pasteHTML',
              value: function pasteHTML(index, html, source) {
                this.clipboard.dangerouslyPasteHTML(index, html, source);
              }
            }, {
              key: 'removeFormat',
              value: function removeFormat(index, length, source) {
                var _this9 = this;

                var _overload13 = overload(index, length, source);

                var _overload14 = _slicedToArray(_overload13, 4);

                index = _overload14[0];
                length = _overload14[1];
                source = _overload14[3];
                return modify.call(this, function () {
                  return _this9.editor.removeFormat(index, length);
                }, source, index);
              }
            }, {
              key: 'scrollIntoView',
              value: function scrollIntoView() {
                this.selection.scrollIntoView(this.scrollingContainer);
              }
            }, {
              key: 'setContents',
              value: function setContents(delta) {
                var _this10 = this;

                var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;
                return modify.call(this, function () {
                  delta = new _quillDelta2.default(delta);

                  var length = _this10.getLength();

                  var deleted = _this10.editor.deleteText(0, length);

                  var applied = _this10.editor.applyDelta(delta);

                  var lastOp = applied.ops[applied.ops.length - 1];

                  if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\n') {
                    _this10.editor.deleteText(_this10.getLength() - 1, 1);

                    applied.delete(1);
                  }

                  var ret = deleted.compose(applied);
                  return ret;
                }, source);
              }
            }, {
              key: 'setSelection',
              value: function setSelection(index, length, source) {
                if (index == null) {
                  this.selection.setRange(null, length || Quill.sources.API);
                } else {
                  var _overload15 = overload(index, length, source);

                  var _overload16 = _slicedToArray(_overload15, 4);

                  index = _overload16[0];
                  length = _overload16[1];
                  source = _overload16[3];
                  this.selection.setRange(new _selection.Range(index, length), source);

                  if (source !== _emitter4.default.sources.SILENT) {
                    this.selection.scrollIntoView(this.scrollingContainer);
                  }
                }
              }
            }, {
              key: 'setText',
              value: function setText(text) {
                var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;
                var delta = new _quillDelta2.default().insert(text);
                return this.setContents(delta, source);
              }
            }, {
              key: 'update',
              value: function update() {
                var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;
                var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes

                this.selection.update(source);
                return change;
              }
            }, {
              key: 'updateContents',
              value: function updateContents(delta) {
                var _this11 = this;

                var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;
                return modify.call(this, function () {
                  delta = new _quillDelta2.default(delta);
                  return _this11.editor.applyDelta(delta, source);
                }, source, true);
              }
            }]);

            return Quill;
          }();

          Quill.DEFAULTS = {
            bounds: null,
            formats: null,
            modules: {},
            placeholder: '',
            readOnly: false,
            scrollingContainer: null,
            strict: true,
            theme: 'default'
          };
          Quill.events = _emitter4.default.events;
          Quill.sources = _emitter4.default.sources; // eslint-disable-next-line no-undef

          Quill.version = "1.3.7";
          Quill.imports = {
            'delta': _quillDelta2.default,
            'parchment': _parchment2.default,
            'core/module': _module2.default,
            'core/theme': _theme2.default
          };

          function expandConfig(container, userConfig) {
            userConfig = (0, _extend2.default)(true, {
              container: container,
              modules: {
                clipboard: true,
                keyboard: true,
                history: true
              }
            }, userConfig);

            if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
              userConfig.theme = _theme2.default;
            } else {
              userConfig.theme = Quill.import('themes/' + userConfig.theme);

              if (userConfig.theme == null) {
                throw new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');
              }
            }

            var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
            [themeConfig, userConfig].forEach(function (config) {
              config.modules = config.modules || {};
              Object.keys(config.modules).forEach(function (module) {
                if (config.modules[module] === true) {
                  config.modules[module] = {};
                }
              });
            });
            var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
            var moduleConfig = moduleNames.reduce(function (config, name) {
              var moduleClass = Quill.import('modules/' + name);

              if (moduleClass == null) {
                debug.error('Cannot load ' + name + ' module. Are you sure you registered it?');
              } else {
                config[name] = moduleClass.DEFAULTS || {};
              }

              return config;
            }, {}); // Special case toolbar shorthand

            if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
              userConfig.modules.toolbar = {
                container: userConfig.modules.toolbar
              };
            }

            userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, {
              modules: moduleConfig
            }, themeConfig, userConfig);
            ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {
              if (typeof userConfig[key] === 'string') {
                userConfig[key] = document.querySelector(userConfig[key]);
              }
            });
            userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {
              if (userConfig.modules[name]) {
                config[name] = userConfig.modules[name];
              }

              return config;
            }, {});
            return userConfig;
          } // Handle selection preservation and TEXT_CHANGE emission
          // common to modification APIs


          function modify(modifier, source, index, shift) {
            if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {
              return new _quillDelta2.default();
            }

            var range = index == null ? null : this.getSelection();
            var oldDelta = this.editor.delta;
            var change = modifier();

            if (range != null) {
              if (index === true) index = range.index;

              if (shift == null) {
                range = shiftRange(range, change, source);
              } else if (shift !== 0) {
                range = shiftRange(range, index, shift, source);
              }

              this.setSelection(range, _emitter4.default.sources.SILENT);
            }

            if (change.length() > 0) {
              var _emitter;

              var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];

              (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));

              if (source !== _emitter4.default.sources.SILENT) {
                var _emitter2;

                (_emitter2 = this.emitter).emit.apply(_emitter2, args);
              }
            }

            return change;
          }

          function overload(index, length, name, value, source) {
            var formats = {};

            if (typeof index.index === 'number' && typeof index.length === 'number') {
              // Allow for throwaway end (used by insertText/insertEmbed)
              if (typeof length !== 'number') {
                source = value, value = name, name = length, length = index.length, index = index.index;
              } else {
                length = index.length, index = index.index;
              }
            } else if (typeof length !== 'number') {
              source = value, value = name, name = length, length = 0;
            } // Handle format being object, two format name/value strings or excluded


            if ((typeof name === 'undefined' ? 'undefined' : _typeof$1(name)) === 'object') {
              formats = name;
              source = value;
            } else if (typeof name === 'string') {
              if (value != null) {
                formats[name] = value;
              } else {
                source = name;
              }
            } // Handle optional source


            source = source || _emitter4.default.sources.API;
            return [index, length, formats, source];
          }

          function shiftRange(range, index, length, source) {
            if (range == null) return null;
            var start = void 0,
                end = void 0;

            if (index instanceof _quillDelta2.default) {
              var _map = [range.index, range.index + range.length].map(function (pos) {
                return index.transformPosition(pos, source !== _emitter4.default.sources.USER);
              });

              var _map2 = _slicedToArray(_map, 2);

              start = _map2[0];
              end = _map2[1];
            } else {
              var _map3 = [range.index, range.index + range.length].map(function (pos) {
                if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;

                if (length >= 0) {
                  return pos + length;
                } else {
                  return Math.max(index, pos + length);
                }
              });

              var _map4 = _slicedToArray(_map3, 2);

              start = _map4[0];
              end = _map4[1];
            }

            return new _selection.Range(start, end - start);
          }

          exports.expandConfig = expandConfig;
          exports.overload = overload;
          exports.default = Quill;
          /***/
        },
        /* 6 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _text = __webpack_require__(7);

          var _text2 = _interopRequireDefault(_text);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Inline = function (_Parchment$Inline) {
            _inherits(Inline, _Parchment$Inline);

            function Inline() {
              _classCallCheck(this, Inline);

              return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));
            }

            _createClass(Inline, [{
              key: 'formatAt',
              value: function formatAt(index, length, name, value) {
                if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
                  var blot = this.isolate(index, length);

                  if (value) {
                    blot.wrap(name, value);
                  }
                } else {
                  _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);
                }
              }
            }, {
              key: 'optimize',
              value: function optimize(context) {
                _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this, context);

                if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
                  var parent = this.parent.isolate(this.offset(), this.length());
                  this.moveChildren(parent);
                  parent.wrap(this);
                }
              }
            }], [{
              key: 'compare',
              value: function compare(self, other) {
                var selfIndex = Inline.order.indexOf(self);
                var otherIndex = Inline.order.indexOf(other);

                if (selfIndex >= 0 || otherIndex >= 0) {
                  return selfIndex - otherIndex;
                } else if (self === other) {
                  return 0;
                } else if (self < other) {
                  return -1;
                } else {
                  return 1;
                }
              }
            }]);

            return Inline;
          }(_parchment2.default.Inline);

          Inline.allowedChildren = [Inline, _parchment2.default.Embed, _text2.default]; // Lower index means deeper in the DOM tree, since not found (-1) is for embeds

          Inline.order = ['cursor', 'inline', // Must be lower
          'underline', 'strike', 'italic', 'bold', 'script', 'link', 'code' // Must be higher
          ];
          exports.default = Inline;
          /***/
        },
        /* 7 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var TextBlot = function (_Parchment$Text) {
            _inherits(TextBlot, _Parchment$Text);

            function TextBlot() {
              _classCallCheck(this, TextBlot);

              return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));
            }

            return TextBlot;
          }(_parchment2.default.Text);

          exports.default = TextBlot;
          /***/
        },
        /* 8 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _eventemitter = __webpack_require__(54);

          var _eventemitter2 = _interopRequireDefault(_eventemitter);

          var _logger = __webpack_require__(10);

          var _logger2 = _interopRequireDefault(_logger);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var debug = (0, _logger2.default)('quill:events');
          var EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];
          EVENTS.forEach(function (eventName) {
            document.addEventListener(eventName, function () {
              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              [].slice.call(document.querySelectorAll('.ql-container')).forEach(function (node) {
                // TODO use WeakMap
                if (node.__quill && node.__quill.emitter) {
                  var _node$__quill$emitter;

                  (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
                }
              });
            });
          });

          var Emitter = function (_EventEmitter) {
            _inherits(Emitter, _EventEmitter);

            function Emitter() {
              _classCallCheck(this, Emitter);

              var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));

              _this.listeners = {};

              _this.on('error', debug.error);

              return _this;
            }

            _createClass(Emitter, [{
              key: 'emit',
              value: function emit() {
                debug.log.apply(debug, arguments);

                _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);
              }
            }, {
              key: 'handleDOM',
              value: function handleDOM(event) {
                for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }

                (this.listeners[event.type] || []).forEach(function (_ref) {
                  var node = _ref.node,
                      handler = _ref.handler;

                  if (event.target === node || node.contains(event.target)) {
                    handler.apply(undefined, [event].concat(args));
                  }
                });
              }
            }, {
              key: 'listenDOM',
              value: function listenDOM(eventName, node, handler) {
                if (!this.listeners[eventName]) {
                  this.listeners[eventName] = [];
                }

                this.listeners[eventName].push({
                  node: node,
                  handler: handler
                });
              }
            }]);

            return Emitter;
          }(_eventemitter2.default);

          Emitter.events = {
            EDITOR_CHANGE: 'editor-change',
            SCROLL_BEFORE_UPDATE: 'scroll-before-update',
            SCROLL_OPTIMIZE: 'scroll-optimize',
            SCROLL_UPDATE: 'scroll-update',
            SELECTION_CHANGE: 'selection-change',
            TEXT_CHANGE: 'text-change'
          };
          Emitter.sources = {
            API: 'api',
            SILENT: 'silent',
            USER: 'user'
          };
          exports.default = Emitter;
          /***/
        },
        /* 9 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var Module = function Module(quill) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            _classCallCheck(this, Module);

            this.quill = quill;
            this.options = options;
          };

          Module.DEFAULTS = {};
          exports.default = Module;
          /***/
        },
        /* 10 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          var levels = ['error', 'warn', 'log', 'info'];
          var level = 'warn';

          function debug(method) {
            if (levels.indexOf(method) <= levels.indexOf(level)) {
              var _console;

              for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }

              (_console = console)[method].apply(_console, args); // eslint-disable-line no-console

            }
          }

          function namespace(ns) {
            return levels.reduce(function (logger, method) {
              logger[method] = debug.bind(console, method, ns);
              return logger;
            }, {});
          }

          debug.level = namespace.level = function (newLevel) {
            level = newLevel;
          };

          exports.default = namespace;
          /***/
        },
        /* 11 */

        /***/
        function (module, exports, __webpack_require__) {
          var pSlice = Array.prototype.slice;

          var objectKeys = __webpack_require__(52);

          var isArguments = __webpack_require__(53);

          var deepEqual = module.exports = function (actual, expected, opts) {
            if (!opts) opts = {}; // 7.1. All identical values are equivalent, as determined by ===.

            if (actual === expected) {
              return true;
            } else if (actual instanceof Date && expected instanceof Date) {
              return actual.getTime() === expected.getTime(); // 7.3. Other pairs that do not both pass typeof value == 'object',
              // equivalence is determined by ==.
            } else if (!actual || !expected || _typeof(actual) != 'object' && _typeof(expected) != 'object') {
              return opts.strict ? actual === expected : actual == expected; // 7.4. For all other Object pairs, including Array objects, equivalence is
              // determined by having the same number of owned properties (as verified
              // with Object.prototype.hasOwnProperty.call), the same set of keys
              // (although not necessarily the same order), equivalent values for every
              // corresponding key, and an identical 'prototype' property. Note: this
              // accounts for both named and indexed properties on Arrays.
            } else {
              return objEquiv(actual, expected, opts);
            }
          };

          function isUndefinedOrNull(value) {
            return value === null || value === undefined;
          }

          function isBuffer(x) {
            if (!x || _typeof(x) !== 'object' || typeof x.length !== 'number') return false;

            if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
              return false;
            }

            if (x.length > 0 && typeof x[0] !== 'number') return false;
            return true;
          }

          function objEquiv(a, b, opts) {
            var i, key;
            if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return false; // an identical 'prototype' property.

            if (a.prototype !== b.prototype) return false; //~~~I've managed to break Object.keys through screwy arguments passing.
            //   Converting to array solves the problem.

            if (isArguments(a)) {
              if (!isArguments(b)) {
                return false;
              }

              a = pSlice.call(a);
              b = pSlice.call(b);
              return deepEqual(a, b, opts);
            }

            if (isBuffer(a)) {
              if (!isBuffer(b)) {
                return false;
              }

              if (a.length !== b.length) return false;

              for (i = 0; i < a.length; i++) {
                if (a[i] !== b[i]) return false;
              }

              return true;
            }

            try {
              var ka = objectKeys(a),
                  kb = objectKeys(b);
            } catch (e) {
              //happens when one is a string literal and the other isn't
              return false;
            } // having the same number of owned properties (keys incorporates
            // hasOwnProperty)


            if (ka.length != kb.length) return false; //the same set of keys (although not necessarily the same order),

            ka.sort();
            kb.sort(); //~~~cheap key test

            for (i = ka.length - 1; i >= 0; i--) {
              if (ka[i] != kb[i]) return false;
            } //equivalent values for every corresponding key, and
            //~~~possibly expensive deep test


            for (i = ka.length - 1; i >= 0; i--) {
              key = ka[i];
              if (!deepEqual(a[key], b[key], opts)) return false;
            }

            return _typeof(a) === _typeof(b);
          }
          /***/

        },
        /* 12 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var Registry = __webpack_require__(1);

          var Attributor =
          /** @class */
          function () {
            function Attributor(attrName, keyName, options) {
              if (options === void 0) {
                options = {};
              }

              this.attrName = attrName;
              this.keyName = keyName;
              var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;

              if (options.scope != null) {
                // Ignore type bits, force attribute bit
                this.scope = options.scope & Registry.Scope.LEVEL | attributeBit;
              } else {
                this.scope = Registry.Scope.ATTRIBUTE;
              }

              if (options.whitelist != null) this.whitelist = options.whitelist;
            }

            Attributor.keys = function (node) {
              return [].map.call(node.attributes, function (item) {
                return item.name;
              });
            };

            Attributor.prototype.add = function (node, value) {
              if (!this.canAdd(node, value)) return false;
              node.setAttribute(this.keyName, value);
              return true;
            };

            Attributor.prototype.canAdd = function (node, value) {
              var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
              if (match == null) return false;
              if (this.whitelist == null) return true;

              if (typeof value === 'string') {
                return this.whitelist.indexOf(value.replace(/["']/g, '')) > -1;
              } else {
                return this.whitelist.indexOf(value) > -1;
              }
            };

            Attributor.prototype.remove = function (node) {
              node.removeAttribute(this.keyName);
            };

            Attributor.prototype.value = function (node) {
              var value = node.getAttribute(this.keyName);

              if (this.canAdd(node, value) && value) {
                return value;
              }

              return '';
            };

            return Attributor;
          }();

          exports.default = Attributor;
          /***/
        },
        /* 13 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.Code = undefined;

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          var _text = __webpack_require__(7);

          var _text2 = _interopRequireDefault(_text);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Code = function (_Inline) {
            _inherits(Code, _Inline);

            function Code() {
              _classCallCheck(this, Code);

              return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));
            }

            return Code;
          }(_inline2.default);

          Code.blotName = 'code';
          Code.tagName = 'CODE';

          var CodeBlock = function (_Block) {
            _inherits(CodeBlock, _Block);

            function CodeBlock() {
              _classCallCheck(this, CodeBlock);

              return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));
            }

            _createClass(CodeBlock, [{
              key: 'delta',
              value: function delta() {
                var _this3 = this;

                var text = this.domNode.textContent;

                if (text.endsWith('\n')) {
                  // Should always be true
                  text = text.slice(0, -1);
                }

                return text.split('\n').reduce(function (delta, frag) {
                  return delta.insert(frag).insert('\n', _this3.formats());
                }, new _quillDelta2.default());
              }
            }, {
              key: 'format',
              value: function format(name, value) {
                if (name === this.statics.blotName && value) return;

                var _descendant = this.descendant(_text2.default, this.length() - 1),
                    _descendant2 = _slicedToArray(_descendant, 1),
                    text = _descendant2[0];

                if (text != null) {
                  text.deleteAt(text.length() - 1, 1);
                }

                _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);
              }
            }, {
              key: 'formatAt',
              value: function formatAt(index, length, name, value) {
                if (length === 0) return;

                if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
                  return;
                }

                var nextNewline = this.newlineIndex(index);
                if (nextNewline < 0 || nextNewline >= index + length) return;
                var prevNewline = this.newlineIndex(index, true) + 1;
                var isolateLength = nextNewline - prevNewline + 1;
                var blot = this.isolate(prevNewline, isolateLength);
                var next = blot.next;
                blot.format(name, value);

                if (next instanceof CodeBlock) {
                  next.formatAt(0, index - prevNewline + length - isolateLength, name, value);
                }
              }
            }, {
              key: 'insertAt',
              value: function insertAt(index, value, def) {
                if (def != null) return;

                var _descendant3 = this.descendant(_text2.default, index),
                    _descendant4 = _slicedToArray(_descendant3, 2),
                    text = _descendant4[0],
                    offset = _descendant4[1];

                text.insertAt(offset, value);
              }
            }, {
              key: 'length',
              value: function length() {
                var length = this.domNode.textContent.length;

                if (!this.domNode.textContent.endsWith('\n')) {
                  return length + 1;
                }

                return length;
              }
            }, {
              key: 'newlineIndex',
              value: function newlineIndex(searchIndex) {
                var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                if (!reverse) {
                  var offset = this.domNode.textContent.slice(searchIndex).indexOf('\n');
                  return offset > -1 ? searchIndex + offset : -1;
                } else {
                  return this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\n');
                }
              }
            }, {
              key: 'optimize',
              value: function optimize(context) {
                if (!this.domNode.textContent.endsWith('\n')) {
                  this.appendChild(_parchment2.default.create('text', '\n'));
                }

                _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this, context);

                var next = this.next;

                if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
                  next.optimize(context);
                  next.moveChildren(this);
                  next.remove();
                }
              }
            }, {
              key: 'replace',
              value: function replace(target) {
                _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);

                [].slice.call(this.domNode.querySelectorAll('*')).forEach(function (node) {
                  var blot = _parchment2.default.find(node);

                  if (blot == null) {
                    node.parentNode.removeChild(node);
                  } else if (blot instanceof _parchment2.default.Embed) {
                    blot.remove();
                  } else {
                    blot.unwrap();
                  }
                });
              }
            }], [{
              key: 'create',
              value: function create(value) {
                var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);

                domNode.setAttribute('spellcheck', false);
                return domNode;
              }
            }, {
              key: 'formats',
              value: function formats() {
                return true;
              }
            }]);

            return CodeBlock;
          }(_block2.default);

          CodeBlock.blotName = 'code-block';
          CodeBlock.tagName = 'PRE';
          CodeBlock.TAB = '  ';
          exports.Code = Code;
          exports.default = CodeBlock;
          /***/
        },
        /* 14 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _typeof$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
            return _typeof(obj);
          } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof(obj);
          };

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _op = __webpack_require__(20);

          var _op2 = _interopRequireDefault(_op);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _code = __webpack_require__(13);

          var _code2 = _interopRequireDefault(_code);

          var _cursor = __webpack_require__(24);

          var _cursor2 = _interopRequireDefault(_cursor);

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          var _break = __webpack_require__(16);

          var _break2 = _interopRequireDefault(_break);

          var _clone = __webpack_require__(21);

          var _clone2 = _interopRequireDefault(_clone);

          var _deepEqual = __webpack_require__(11);

          var _deepEqual2 = _interopRequireDefault(_deepEqual);

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var ASCII = /^[ -~]*$/;

          var Editor = function () {
            function Editor(scroll) {
              _classCallCheck(this, Editor);

              this.scroll = scroll;
              this.delta = this.getDelta();
            }

            _createClass(Editor, [{
              key: 'applyDelta',
              value: function applyDelta(delta) {
                var _this = this;

                var consumeNextNewline = false;
                this.scroll.update();
                var scrollLength = this.scroll.length();
                this.scroll.batchStart();
                delta = normalizeDelta(delta);
                delta.reduce(function (index, op) {
                  var length = op.retain || op.delete || op.insert.length || 1;
                  var attributes = op.attributes || {};

                  if (op.insert != null) {
                    if (typeof op.insert === 'string') {
                      var text = op.insert;

                      if (text.endsWith('\n') && consumeNextNewline) {
                        consumeNextNewline = false;
                        text = text.slice(0, -1);
                      }

                      if (index >= scrollLength && !text.endsWith('\n')) {
                        consumeNextNewline = true;
                      }

                      _this.scroll.insertAt(index, text);

                      var _scroll$line = _this.scroll.line(index),
                          _scroll$line2 = _slicedToArray(_scroll$line, 2),
                          line = _scroll$line2[0],
                          offset = _scroll$line2[1];

                      var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));

                      if (line instanceof _block2.default) {
                        var _line$descendant = line.descendant(_parchment2.default.Leaf, offset),
                            _line$descendant2 = _slicedToArray(_line$descendant, 1),
                            leaf = _line$descendant2[0];

                        formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
                      }

                      attributes = _op2.default.attributes.diff(formats, attributes) || {};
                    } else if (_typeof$1(op.insert) === 'object') {
                      var key = Object.keys(op.insert)[0]; // There should only be one key

                      if (key == null) return index;

                      _this.scroll.insertAt(index, key, op.insert[key]);
                    }

                    scrollLength += length;
                  }

                  Object.keys(attributes).forEach(function (name) {
                    _this.scroll.formatAt(index, length, name, attributes[name]);
                  });
                  return index + length;
                }, 0);
                delta.reduce(function (index, op) {
                  if (typeof op.delete === 'number') {
                    _this.scroll.deleteAt(index, op.delete);

                    return index;
                  }

                  return index + (op.retain || op.insert.length || 1);
                }, 0);
                this.scroll.batchEnd();
                return this.update(delta);
              }
            }, {
              key: 'deleteText',
              value: function deleteText(index, length) {
                this.scroll.deleteAt(index, length);
                return this.update(new _quillDelta2.default().retain(index).delete(length));
              }
            }, {
              key: 'formatLine',
              value: function formatLine(index, length) {
                var _this2 = this;

                var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                this.scroll.update();
                Object.keys(formats).forEach(function (format) {
                  if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;

                  var lines = _this2.scroll.lines(index, Math.max(length, 1));

                  var lengthRemaining = length;
                  lines.forEach(function (line) {
                    var lineLength = line.length();

                    if (!(line instanceof _code2.default)) {
                      line.format(format, formats[format]);
                    } else {
                      var codeIndex = index - line.offset(_this2.scroll);
                      var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
                      line.formatAt(codeIndex, codeLength, format, formats[format]);
                    }

                    lengthRemaining -= lineLength;
                  });
                });
                this.scroll.optimize();
                return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
              }
            }, {
              key: 'formatText',
              value: function formatText(index, length) {
                var _this3 = this;

                var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                Object.keys(formats).forEach(function (format) {
                  _this3.scroll.formatAt(index, length, format, formats[format]);
                });
                return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
              }
            }, {
              key: 'getContents',
              value: function getContents(index, length) {
                return this.delta.slice(index, index + length);
              }
            }, {
              key: 'getDelta',
              value: function getDelta() {
                return this.scroll.lines().reduce(function (delta, line) {
                  return delta.concat(line.delta());
                }, new _quillDelta2.default());
              }
            }, {
              key: 'getFormat',
              value: function getFormat(index) {
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var lines = [],
                    leaves = [];

                if (length === 0) {
                  this.scroll.path(index).forEach(function (path) {
                    var _path = _slicedToArray(path, 1),
                        blot = _path[0];

                    if (blot instanceof _block2.default) {
                      lines.push(blot);
                    } else if (blot instanceof _parchment2.default.Leaf) {
                      leaves.push(blot);
                    }
                  });
                } else {
                  lines = this.scroll.lines(index, length);
                  leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);
                }

                var formatsArr = [lines, leaves].map(function (blots) {
                  if (blots.length === 0) return {};
                  var formats = (0, _block.bubbleFormats)(blots.shift());

                  while (Object.keys(formats).length > 0) {
                    var blot = blots.shift();
                    if (blot == null) return formats;
                    formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
                  }

                  return formats;
                });
                return _extend2.default.apply(_extend2.default, formatsArr);
              }
            }, {
              key: 'getText',
              value: function getText(index, length) {
                return this.getContents(index, length).filter(function (op) {
                  return typeof op.insert === 'string';
                }).map(function (op) {
                  return op.insert;
                }).join('');
              }
            }, {
              key: 'insertEmbed',
              value: function insertEmbed(index, embed, value) {
                this.scroll.insertAt(index, embed, value);
                return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));
              }
            }, {
              key: 'insertText',
              value: function insertText(index, text) {
                var _this4 = this;

                var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
                this.scroll.insertAt(index, text);
                Object.keys(formats).forEach(function (format) {
                  _this4.scroll.formatAt(index, text.length, format, formats[format]);
                });
                return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));
              }
            }, {
              key: 'isBlank',
              value: function isBlank() {
                if (this.scroll.children.length == 0) return true;
                if (this.scroll.children.length > 1) return false;
                var block = this.scroll.children.head;
                if (block.statics.blotName !== _block2.default.blotName) return false;
                if (block.children.length > 1) return false;
                return block.children.head instanceof _break2.default;
              }
            }, {
              key: 'removeFormat',
              value: function removeFormat(index, length) {
                var text = this.getText(index, length);

                var _scroll$line3 = this.scroll.line(index + length),
                    _scroll$line4 = _slicedToArray(_scroll$line3, 2),
                    line = _scroll$line4[0],
                    offset = _scroll$line4[1];

                var suffixLength = 0,
                    suffix = new _quillDelta2.default();

                if (line != null) {
                  if (!(line instanceof _code2.default)) {
                    suffixLength = line.length() - offset;
                  } else {
                    suffixLength = line.newlineIndex(offset) - offset + 1;
                  }

                  suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
                }

                var contents = this.getContents(index, length + suffixLength);
                var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));
                var delta = new _quillDelta2.default().retain(index).concat(diff);
                return this.applyDelta(delta);
              }
            }, {
              key: 'update',
              value: function update(change) {
                var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
                var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
                var oldDelta = this.delta;

                if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
                  // Optimization for character changes
                  var textBlot = _parchment2.default.find(mutations[0].target);

                  var formats = (0, _block.bubbleFormats)(textBlot);
                  var index = textBlot.offset(this.scroll);
                  var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');
                  var oldText = new _quillDelta2.default().insert(oldValue);
                  var newText = new _quillDelta2.default().insert(textBlot.value());
                  var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));
                  change = diffDelta.reduce(function (delta, op) {
                    if (op.insert) {
                      return delta.insert(op.insert, formats);
                    } else {
                      return delta.push(op);
                    }
                  }, new _quillDelta2.default());
                  this.delta = oldDelta.compose(change);
                } else {
                  this.delta = this.getDelta();

                  if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
                    change = oldDelta.diff(this.delta, cursorIndex);
                  }
                }

                return change;
              }
            }]);

            return Editor;
          }();

          function combineFormats(formats, combined) {
            return Object.keys(combined).reduce(function (merged, name) {
              if (formats[name] == null) return merged;

              if (combined[name] === formats[name]) {
                merged[name] = combined[name];
              } else if (Array.isArray(combined[name])) {
                if (combined[name].indexOf(formats[name]) < 0) {
                  merged[name] = combined[name].concat([formats[name]]);
                }
              } else {
                merged[name] = [combined[name], formats[name]];
              }

              return merged;
            }, {});
          }

          function normalizeDelta(delta) {
            return delta.reduce(function (delta, op) {
              if (op.insert === 1) {
                var attributes = (0, _clone2.default)(op.attributes);
                delete attributes['image'];
                return delta.insert({
                  image: op.attributes.image
                }, attributes);
              }

              if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
                op = (0, _clone2.default)(op);

                if (op.attributes.list) {
                  op.attributes.list = 'ordered';
                } else {
                  op.attributes.list = 'bullet';
                  delete op.attributes.bullet;
                }
              }

              if (typeof op.insert === 'string') {
                var text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
                return delta.insert(text, op.attributes);
              }

              return delta.push(op);
            }, new _quillDelta2.default());
          }

          exports.default = Editor;
          /***/
        },
        /* 15 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.Range = undefined;

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _clone = __webpack_require__(21);

          var _clone2 = _interopRequireDefault(_clone);

          var _deepEqual = __webpack_require__(11);

          var _deepEqual2 = _interopRequireDefault(_deepEqual);

          var _emitter3 = __webpack_require__(8);

          var _emitter4 = _interopRequireDefault(_emitter3);

          var _logger = __webpack_require__(10);

          var _logger2 = _interopRequireDefault(_logger);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
              for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
              }

              return arr2;
            } else {
              return Array.from(arr);
            }
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var debug = (0, _logger2.default)('quill:selection');

          var Range = function Range(index) {
            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            _classCallCheck(this, Range);

            this.index = index;
            this.length = length;
          };

          var Selection = function () {
            function Selection(scroll, emitter) {
              var _this = this;

              _classCallCheck(this, Selection);

              this.emitter = emitter;
              this.scroll = scroll;
              this.composing = false;
              this.mouseDown = false;
              this.root = this.scroll.domNode;
              this.cursor = _parchment2.default.create('cursor', this); // savedRange is last non-null range

              this.lastRange = this.savedRange = new Range(0, 0);
              this.handleComposition();
              this.handleDragging();
              this.emitter.listenDOM('selectionchange', document, function () {
                if (!_this.mouseDown) {
                  setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
                }
              });
              this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type, delta) {
                if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
                  _this.update(_emitter4.default.sources.SILENT);
                }
              });
              this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function () {
                if (!_this.hasFocus()) return;

                var native = _this.getNativeRange();

                if (native == null) return;
                if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle
                // TODO unclear if this has negative side effects

                _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function () {
                  try {
                    _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
                  } catch (ignored) {}
                });
              });
              this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function (mutations, context) {
                if (context.range) {
                  var _context$range = context.range,
                      startNode = _context$range.startNode,
                      startOffset = _context$range.startOffset,
                      endNode = _context$range.endNode,
                      endOffset = _context$range.endOffset;

                  _this.setNativeRange(startNode, startOffset, endNode, endOffset);
                }
              });
              this.update(_emitter4.default.sources.SILENT);
            }

            _createClass(Selection, [{
              key: 'handleComposition',
              value: function handleComposition() {
                var _this2 = this;

                this.root.addEventListener('compositionstart', function () {
                  _this2.composing = true;
                });
                this.root.addEventListener('compositionend', function () {
                  _this2.composing = false;

                  if (_this2.cursor.parent) {
                    var range = _this2.cursor.restore();

                    if (!range) return;
                    setTimeout(function () {
                      _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
                    }, 1);
                  }
                });
              }
            }, {
              key: 'handleDragging',
              value: function handleDragging() {
                var _this3 = this;

                this.emitter.listenDOM('mousedown', document.body, function () {
                  _this3.mouseDown = true;
                });
                this.emitter.listenDOM('mouseup', document.body, function () {
                  _this3.mouseDown = false;

                  _this3.update(_emitter4.default.sources.USER);
                });
              }
            }, {
              key: 'focus',
              value: function focus() {
                if (this.hasFocus()) return;
                this.root.focus();
                this.setRange(this.savedRange);
              }
            }, {
              key: 'format',
              value: function format(_format, value) {
                if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;
                this.scroll.update();
                var nativeRange = this.getNativeRange();
                if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;

                if (nativeRange.start.node !== this.cursor.textNode) {
                  var blot = _parchment2.default.find(nativeRange.start.node, false);

                  if (blot == null) return; // TODO Give blot ability to not split

                  if (blot instanceof _parchment2.default.Leaf) {
                    var after = blot.split(nativeRange.start.offset);
                    blot.parent.insertBefore(this.cursor, after);
                  } else {
                    blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
                  }

                  this.cursor.attach();
                }

                this.cursor.format(_format, value);
                this.scroll.optimize();
                this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
                this.update();
              }
            }, {
              key: 'getBounds',
              value: function getBounds(index) {
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var scrollLength = this.scroll.length();
                index = Math.min(index, scrollLength - 1);
                length = Math.min(index + length, scrollLength - 1) - index;

                var node = void 0,
                    _scroll$leaf = this.scroll.leaf(index),
                    _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),
                    leaf = _scroll$leaf2[0],
                    offset = _scroll$leaf2[1];

                if (leaf == null) return null;

                var _leaf$position = leaf.position(offset, true);

                var _leaf$position2 = _slicedToArray(_leaf$position, 2);

                node = _leaf$position2[0];
                offset = _leaf$position2[1];
                var range = document.createRange();

                if (length > 0) {
                  range.setStart(node, offset);

                  var _scroll$leaf3 = this.scroll.leaf(index + length);

                  var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);

                  leaf = _scroll$leaf4[0];
                  offset = _scroll$leaf4[1];
                  if (leaf == null) return null;

                  var _leaf$position3 = leaf.position(offset, true);

                  var _leaf$position4 = _slicedToArray(_leaf$position3, 2);

                  node = _leaf$position4[0];
                  offset = _leaf$position4[1];
                  range.setEnd(node, offset);
                  return range.getBoundingClientRect();
                } else {
                  var side = 'left';
                  var rect = void 0;

                  if (node instanceof Text) {
                    if (offset < node.data.length) {
                      range.setStart(node, offset);
                      range.setEnd(node, offset + 1);
                    } else {
                      range.setStart(node, offset - 1);
                      range.setEnd(node, offset);
                      side = 'right';
                    }

                    rect = range.getBoundingClientRect();
                  } else {
                    rect = leaf.domNode.getBoundingClientRect();
                    if (offset > 0) side = 'right';
                  }

                  return {
                    bottom: rect.top + rect.height,
                    height: rect.height,
                    left: rect[side],
                    right: rect[side],
                    top: rect.top,
                    width: 0
                  };
                }
              }
            }, {
              key: 'getNativeRange',
              value: function getNativeRange() {
                var selection = document.getSelection();
                if (selection == null || selection.rangeCount <= 0) return null;
                var nativeRange = selection.getRangeAt(0);
                if (nativeRange == null) return null;
                var range = this.normalizeNative(nativeRange);
                debug.info('getNativeRange', range);
                return range;
              }
            }, {
              key: 'getRange',
              value: function getRange() {
                var normalized = this.getNativeRange();
                if (normalized == null) return [null, null];
                var range = this.normalizedToRange(normalized);
                return [range, normalized];
              }
            }, {
              key: 'hasFocus',
              value: function hasFocus() {
                return document.activeElement === this.root;
              }
            }, {
              key: 'normalizedToRange',
              value: function normalizedToRange(range) {
                var _this4 = this;

                var positions = [[range.start.node, range.start.offset]];

                if (!range.native.collapsed) {
                  positions.push([range.end.node, range.end.offset]);
                }

                var indexes = positions.map(function (position) {
                  var _position = _slicedToArray(position, 2),
                      node = _position[0],
                      offset = _position[1];

                  var blot = _parchment2.default.find(node, true);

                  var index = blot.offset(_this4.scroll);

                  if (offset === 0) {
                    return index;
                  } else if (blot instanceof _parchment2.default.Container) {
                    return index + blot.length();
                  } else {
                    return index + blot.index(node, offset);
                  }
                });
                var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
                var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));
                return new Range(start, end - start);
              }
            }, {
              key: 'normalizeNative',
              value: function normalizeNative(nativeRange) {
                if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
                  return null;
                }

                var range = {
                  start: {
                    node: nativeRange.startContainer,
                    offset: nativeRange.startOffset
                  },
                  end: {
                    node: nativeRange.endContainer,
                    offset: nativeRange.endOffset
                  },
                  native: nativeRange
                };
                [range.start, range.end].forEach(function (position) {
                  var node = position.node,
                      offset = position.offset;

                  while (!(node instanceof Text) && node.childNodes.length > 0) {
                    if (node.childNodes.length > offset) {
                      node = node.childNodes[offset];
                      offset = 0;
                    } else if (node.childNodes.length === offset) {
                      node = node.lastChild;
                      offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;
                    } else {
                      break;
                    }
                  }

                  position.node = node, position.offset = offset;
                });
                return range;
              }
            }, {
              key: 'rangeToNative',
              value: function rangeToNative(range) {
                var _this5 = this;

                var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
                var args = [];
                var scrollLength = this.scroll.length();
                indexes.forEach(function (index, i) {
                  index = Math.min(scrollLength - 1, index);

                  var node = void 0,
                      _scroll$leaf5 = _this5.scroll.leaf(index),
                      _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),
                      leaf = _scroll$leaf6[0],
                      offset = _scroll$leaf6[1];

                  var _leaf$position5 = leaf.position(offset, i !== 0);

                  var _leaf$position6 = _slicedToArray(_leaf$position5, 2);

                  node = _leaf$position6[0];
                  offset = _leaf$position6[1];
                  args.push(node, offset);
                });

                if (args.length < 2) {
                  args = args.concat(args);
                }

                return args;
              }
            }, {
              key: 'scrollIntoView',
              value: function scrollIntoView(scrollingContainer) {
                var range = this.lastRange;
                if (range == null) return;
                var bounds = this.getBounds(range.index, range.length);
                if (bounds == null) return;
                var limit = this.scroll.length() - 1;

                var _scroll$line = this.scroll.line(Math.min(range.index, limit)),
                    _scroll$line2 = _slicedToArray(_scroll$line, 1),
                    first = _scroll$line2[0];

                var last = first;

                if (range.length > 0) {
                  var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));

                  var _scroll$line4 = _slicedToArray(_scroll$line3, 1);

                  last = _scroll$line4[0];
                }

                if (first == null || last == null) return;
                var scrollBounds = scrollingContainer.getBoundingClientRect();

                if (bounds.top < scrollBounds.top) {
                  scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
                } else if (bounds.bottom > scrollBounds.bottom) {
                  scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
                }
              }
            }, {
              key: 'setNativeRange',
              value: function setNativeRange(startNode, startOffset) {
                var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
                var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
                var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
                debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);

                if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
                  return;
                }

                var selection = document.getSelection();
                if (selection == null) return;

                if (startNode != null) {
                  if (!this.hasFocus()) this.root.focus();
                  var native = (this.getNativeRange() || {}).native;

                  if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {
                    if (startNode.tagName == "BR") {
                      startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
                      startNode = startNode.parentNode;
                    }

                    if (endNode.tagName == "BR") {
                      endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
                      endNode = endNode.parentNode;
                    }

                    var range = document.createRange();
                    range.setStart(startNode, startOffset);
                    range.setEnd(endNode, endOffset);
                    selection.removeAllRanges();
                    selection.addRange(range);
                  }
                } else {
                  selection.removeAllRanges();
                  this.root.blur();
                  document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)
                }
              }
            }, {
              key: 'setRange',
              value: function setRange(range) {
                var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

                if (typeof force === 'string') {
                  source = force;
                  force = false;
                }

                debug.info('setRange', range);

                if (range != null) {
                  var args = this.rangeToNative(range);
                  this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));
                } else {
                  this.setNativeRange(null);
                }

                this.update(source);
              }
            }, {
              key: 'update',
              value: function update() {
                var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;
                var oldRange = this.lastRange;

                var _getRange = this.getRange(),
                    _getRange2 = _slicedToArray(_getRange, 2),
                    lastRange = _getRange2[0],
                    nativeRange = _getRange2[1];

                this.lastRange = lastRange;

                if (this.lastRange != null) {
                  this.savedRange = this.lastRange;
                }

                if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
                  var _emitter;

                  if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
                    this.cursor.restore();
                  }

                  var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];

                  (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));

                  if (source !== _emitter4.default.sources.SILENT) {
                    var _emitter2;

                    (_emitter2 = this.emitter).emit.apply(_emitter2, args);
                  }
                }
              }
            }]);

            return Selection;
          }();

          function contains(parent, descendant) {
            try {
              // Firefox inserts inaccessible nodes around video elements
              descendant.parentNode;
            } catch (e) {
              return false;
            } // IE11 has bug with Text nodes
            // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect


            if (descendant instanceof Text) {
              descendant = descendant.parentNode;
            }

            return parent.contains(descendant);
          }

          exports.Range = Range;
          exports.default = Selection;
          /***/
        },
        /* 16 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Break = function (_Parchment$Embed) {
            _inherits(Break, _Parchment$Embed);

            function Break() {
              _classCallCheck(this, Break);

              return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));
            }

            _createClass(Break, [{
              key: 'insertInto',
              value: function insertInto(parent, ref) {
                if (parent.children.length === 0) {
                  _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);
                } else {
                  this.remove();
                }
              }
            }, {
              key: 'length',
              value: function length() {
                return 0;
              }
            }, {
              key: 'value',
              value: function value() {
                return '';
              }
            }], [{
              key: 'value',
              value: function value() {
                return undefined;
              }
            }]);

            return Break;
          }(_parchment2.default.Embed);

          Break.blotName = 'break';
          Break.tagName = 'BR';
          exports.default = Break;
          /***/
        },
        /* 17 */

        /***/
        function (module, exports, __webpack_require__) {

          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var linked_list_1 = __webpack_require__(44);

          var shadow_1 = __webpack_require__(30);

          var Registry = __webpack_require__(1);

          var ContainerBlot =
          /** @class */
          function (_super) {
            __extends(ContainerBlot, _super);

            function ContainerBlot(domNode) {
              var _this = _super.call(this, domNode) || this;

              _this.build();

              return _this;
            }

            ContainerBlot.prototype.appendChild = function (other) {
              this.insertBefore(other);
            };

            ContainerBlot.prototype.attach = function () {
              _super.prototype.attach.call(this);

              this.children.forEach(function (child) {
                child.attach();
              });
            };

            ContainerBlot.prototype.build = function () {
              var _this = this;

              this.children = new linked_list_1.default(); // Need to be reversed for if DOM nodes already in order

              [].slice.call(this.domNode.childNodes).reverse().forEach(function (node) {
                try {
                  var child = makeBlot(node);

                  _this.insertBefore(child, _this.children.head || undefined);
                } catch (err) {
                  if (err instanceof Registry.ParchmentError) return;else throw err;
                }
              });
            };

            ContainerBlot.prototype.deleteAt = function (index, length) {
              if (index === 0 && length === this.length()) {
                return this.remove();
              }

              this.children.forEachAt(index, length, function (child, offset, length) {
                child.deleteAt(offset, length);
              });
            };

            ContainerBlot.prototype.descendant = function (criteria, index) {
              var _a = this.children.find(index),
                  child = _a[0],
                  offset = _a[1];

              if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
                return [child, offset];
              } else if (child instanceof ContainerBlot) {
                return child.descendant(criteria, offset);
              } else {
                return [null, -1];
              }
            };

            ContainerBlot.prototype.descendants = function (criteria, index, length) {
              if (index === void 0) {
                index = 0;
              }

              if (length === void 0) {
                length = Number.MAX_VALUE;
              }

              var descendants = [];
              var lengthLeft = length;
              this.children.forEachAt(index, length, function (child, index, length) {
                if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
                  descendants.push(child);
                }

                if (child instanceof ContainerBlot) {
                  descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));
                }

                lengthLeft -= length;
              });
              return descendants;
            };

            ContainerBlot.prototype.detach = function () {
              this.children.forEach(function (child) {
                child.detach();
              });

              _super.prototype.detach.call(this);
            };

            ContainerBlot.prototype.formatAt = function (index, length, name, value) {
              this.children.forEachAt(index, length, function (child, offset, length) {
                child.formatAt(offset, length, name, value);
              });
            };

            ContainerBlot.prototype.insertAt = function (index, value, def) {
              var _a = this.children.find(index),
                  child = _a[0],
                  offset = _a[1];

              if (child) {
                child.insertAt(offset, value, def);
              } else {
                var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
                this.appendChild(blot);
              }
            };

            ContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {
              if (this.statics.allowedChildren != null && !this.statics.allowedChildren.some(function (child) {
                return childBlot instanceof child;
              })) {
                throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
              }

              childBlot.insertInto(this, refBlot);
            };

            ContainerBlot.prototype.length = function () {
              return this.children.reduce(function (memo, child) {
                return memo + child.length();
              }, 0);
            };

            ContainerBlot.prototype.moveChildren = function (targetParent, refNode) {
              this.children.forEach(function (child) {
                targetParent.insertBefore(child, refNode);
              });
            };

            ContainerBlot.prototype.optimize = function (context) {
              _super.prototype.optimize.call(this, context);

              if (this.children.length === 0) {
                if (this.statics.defaultChild != null) {
                  var child = Registry.create(this.statics.defaultChild);
                  this.appendChild(child);
                  child.optimize(context);
                } else {
                  this.remove();
                }
              }
            };

            ContainerBlot.prototype.path = function (index, inclusive) {
              if (inclusive === void 0) {
                inclusive = false;
              }

              var _a = this.children.find(index, inclusive),
                  child = _a[0],
                  offset = _a[1];

              var position = [[this, index]];

              if (child instanceof ContainerBlot) {
                return position.concat(child.path(offset, inclusive));
              } else if (child != null) {
                position.push([child, offset]);
              }

              return position;
            };

            ContainerBlot.prototype.removeChild = function (child) {
              this.children.remove(child);
            };

            ContainerBlot.prototype.replace = function (target) {
              if (target instanceof ContainerBlot) {
                target.moveChildren(this);
              }

              _super.prototype.replace.call(this, target);
            };

            ContainerBlot.prototype.split = function (index, force) {
              if (force === void 0) {
                force = false;
              }

              if (!force) {
                if (index === 0) return this;
                if (index === this.length()) return this.next;
              }

              var after = this.clone();
              this.parent.insertBefore(after, this.next);
              this.children.forEachAt(index, this.length(), function (child, offset, length) {
                child = child.split(offset, force);
                after.appendChild(child);
              });
              return after;
            };

            ContainerBlot.prototype.unwrap = function () {
              this.moveChildren(this.parent, this.next);
              this.remove();
            };

            ContainerBlot.prototype.update = function (mutations, context) {
              var _this = this;

              var addedNodes = [];
              var removedNodes = [];
              mutations.forEach(function (mutation) {
                if (mutation.target === _this.domNode && mutation.type === 'childList') {
                  addedNodes.push.apply(addedNodes, mutation.addedNodes);
                  removedNodes.push.apply(removedNodes, mutation.removedNodes);
                }
              });
              removedNodes.forEach(function (node) {
                // Check node has actually been removed
                // One exception is Chrome does not immediately remove IFRAMEs
                // from DOM but MutationRecord is correct in its reported removal
                if (node.parentNode != null && // @ts-ignore
                node.tagName !== 'IFRAME' && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                  return;
                }

                var blot = Registry.find(node);
                if (blot == null) return;

                if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
                  blot.detach();
                }
              });
              addedNodes.filter(function (node) {
                return node.parentNode == _this.domNode;
              }).sort(function (a, b) {
                if (a === b) return 0;

                if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
                  return 1;
                }

                return -1;
              }).forEach(function (node) {
                var refBlot = null;

                if (node.nextSibling != null) {
                  refBlot = Registry.find(node.nextSibling);
                }

                var blot = makeBlot(node);

                if (blot.next != refBlot || blot.next == null) {
                  if (blot.parent != null) {
                    blot.parent.removeChild(_this);
                  }

                  _this.insertBefore(blot, refBlot || undefined);
                }
              });
            };

            return ContainerBlot;
          }(shadow_1.default);

          function makeBlot(node) {
            var blot = Registry.find(node);

            if (blot == null) {
              try {
                blot = Registry.create(node);
              } catch (e) {
                blot = Registry.create(Registry.Scope.INLINE);
                [].slice.call(node.childNodes).forEach(function (child) {
                  // @ts-ignore
                  blot.domNode.appendChild(child);
                });

                if (node.parentNode) {
                  node.parentNode.replaceChild(blot.domNode, node);
                }

                blot.attach();
              }
            }

            return blot;
          }

          exports.default = ContainerBlot;
          /***/
        },
        /* 18 */

        /***/
        function (module, exports, __webpack_require__) {

          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var attributor_1 = __webpack_require__(12);

          var store_1 = __webpack_require__(31);

          var container_1 = __webpack_require__(17);

          var Registry = __webpack_require__(1);

          var FormatBlot =
          /** @class */
          function (_super) {
            __extends(FormatBlot, _super);

            function FormatBlot(domNode) {
              var _this = _super.call(this, domNode) || this;

              _this.attributes = new store_1.default(_this.domNode);
              return _this;
            }

            FormatBlot.formats = function (domNode) {
              if (typeof this.tagName === 'string') {
                return true;
              } else if (Array.isArray(this.tagName)) {
                return domNode.tagName.toLowerCase();
              }

              return undefined;
            };

            FormatBlot.prototype.format = function (name, value) {
              var format = Registry.query(name);

              if (format instanceof attributor_1.default) {
                this.attributes.attribute(format, value);
              } else if (value) {
                if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
                  this.replaceWith(name, value);
                }
              }
            };

            FormatBlot.prototype.formats = function () {
              var formats = this.attributes.values();
              var format = this.statics.formats(this.domNode);

              if (format != null) {
                formats[this.statics.blotName] = format;
              }

              return formats;
            };

            FormatBlot.prototype.replaceWith = function (name, value) {
              var replacement = _super.prototype.replaceWith.call(this, name, value);

              this.attributes.copy(replacement);
              return replacement;
            };

            FormatBlot.prototype.update = function (mutations, context) {
              var _this = this;

              _super.prototype.update.call(this, mutations, context);

              if (mutations.some(function (mutation) {
                return mutation.target === _this.domNode && mutation.type === 'attributes';
              })) {
                this.attributes.build();
              }
            };

            FormatBlot.prototype.wrap = function (name, value) {
              var wrapper = _super.prototype.wrap.call(this, name, value);

              if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {
                this.attributes.move(wrapper);
              }

              return wrapper;
            };

            return FormatBlot;
          }(container_1.default);

          exports.default = FormatBlot;
          /***/
        },
        /* 19 */

        /***/
        function (module, exports, __webpack_require__) {

          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var shadow_1 = __webpack_require__(30);

          var Registry = __webpack_require__(1);

          var LeafBlot =
          /** @class */
          function (_super) {
            __extends(LeafBlot, _super);

            function LeafBlot() {
              return _super !== null && _super.apply(this, arguments) || this;
            }

            LeafBlot.value = function (domNode) {
              return true;
            };

            LeafBlot.prototype.index = function (node, offset) {
              if (this.domNode === node || this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                return Math.min(offset, 1);
              }

              return -1;
            };

            LeafBlot.prototype.position = function (index, inclusive) {
              var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
              if (index > 0) offset += 1;
              return [this.parent.domNode, offset];
            };

            LeafBlot.prototype.value = function () {
              var _a;

              return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;
            };

            LeafBlot.scope = Registry.Scope.INLINE_BLOT;
            return LeafBlot;
          }(shadow_1.default);

          exports.default = LeafBlot;
          /***/
        },
        /* 20 */

        /***/
        function (module, exports, __webpack_require__) {
          var equal = __webpack_require__(11);

          var extend = __webpack_require__(3);

          var lib = {
            attributes: {
              compose: function compose(a, b, keepNull) {
                if (_typeof(a) !== 'object') a = {};
                if (_typeof(b) !== 'object') b = {};
                var attributes = extend(true, {}, b);

                if (!keepNull) {
                  attributes = Object.keys(attributes).reduce(function (copy, key) {
                    if (attributes[key] != null) {
                      copy[key] = attributes[key];
                    }

                    return copy;
                  }, {});
                }

                for (var key in a) {
                  if (a[key] !== undefined && b[key] === undefined) {
                    attributes[key] = a[key];
                  }
                }

                return Object.keys(attributes).length > 0 ? attributes : undefined;
              },
              diff: function diff(a, b) {
                if (_typeof(a) !== 'object') a = {};
                if (_typeof(b) !== 'object') b = {};
                var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {
                  if (!equal(a[key], b[key])) {
                    attributes[key] = b[key] === undefined ? null : b[key];
                  }

                  return attributes;
                }, {});
                return Object.keys(attributes).length > 0 ? attributes : undefined;
              },
              transform: function transform(a, b, priority) {
                if (_typeof(a) !== 'object') return b;
                if (_typeof(b) !== 'object') return undefined;
                if (!priority) return b; // b simply overwrites us without priority

                var attributes = Object.keys(b).reduce(function (attributes, key) {
                  if (a[key] === undefined) attributes[key] = b[key]; // null is a valid value

                  return attributes;
                }, {});
                return Object.keys(attributes).length > 0 ? attributes : undefined;
              }
            },
            iterator: function iterator(ops) {
              return new Iterator(ops);
            },
            length: function length(op) {
              if (typeof op['delete'] === 'number') {
                return op['delete'];
              } else if (typeof op.retain === 'number') {
                return op.retain;
              } else {
                return typeof op.insert === 'string' ? op.insert.length : 1;
              }
            }
          };

          function Iterator(ops) {
            this.ops = ops;
            this.index = 0;
            this.offset = 0;
          }

          Iterator.prototype.hasNext = function () {
            return this.peekLength() < Infinity;
          };

          Iterator.prototype.next = function (length) {
            if (!length) length = Infinity;
            var nextOp = this.ops[this.index];

            if (nextOp) {
              var offset = this.offset;
              var opLength = lib.length(nextOp);

              if (length >= opLength - offset) {
                length = opLength - offset;
                this.index += 1;
                this.offset = 0;
              } else {
                this.offset += length;
              }

              if (typeof nextOp['delete'] === 'number') {
                return {
                  'delete': length
                };
              } else {
                var retOp = {};

                if (nextOp.attributes) {
                  retOp.attributes = nextOp.attributes;
                }

                if (typeof nextOp.retain === 'number') {
                  retOp.retain = length;
                } else if (typeof nextOp.insert === 'string') {
                  retOp.insert = nextOp.insert.substr(offset, length);
                } else {
                  // offset should === 0, length should === 1
                  retOp.insert = nextOp.insert;
                }

                return retOp;
              }
            } else {
              return {
                retain: Infinity
              };
            }
          };

          Iterator.prototype.peek = function () {
            return this.ops[this.index];
          };

          Iterator.prototype.peekLength = function () {
            if (this.ops[this.index]) {
              // Should never return 0 if our index is being managed correctly
              return lib.length(this.ops[this.index]) - this.offset;
            } else {
              return Infinity;
            }
          };

          Iterator.prototype.peekType = function () {
            if (this.ops[this.index]) {
              if (typeof this.ops[this.index]['delete'] === 'number') {
                return 'delete';
              } else if (typeof this.ops[this.index].retain === 'number') {
                return 'retain';
              } else {
                return 'insert';
              }
            }

            return 'retain';
          };

          Iterator.prototype.rest = function () {
            if (!this.hasNext()) {
              return [];
            } else if (this.offset === 0) {
              return this.ops.slice(this.index);
            } else {
              var offset = this.offset;
              var index = this.index;
              var next = this.next();
              var rest = this.ops.slice(this.index);
              this.offset = offset;
              this.index = index;
              return [next].concat(rest);
            }
          };

          module.exports = lib;
          /***/
        },
        /* 21 */

        /***/
        function (module, exports) {
          var clone = function () {

            function _instanceof(obj, type) {
              return type != null && obj instanceof type;
            }

            var nativeMap;

            try {
              nativeMap = Map;
            } catch (_) {
              // maybe a reference error because no `Map`. Give it a dummy value that no
              // value will ever be an instanceof.
              nativeMap = function nativeMap() {};
            }

            var nativeSet;

            try {
              nativeSet = Set;
            } catch (_) {
              nativeSet = function nativeSet() {};
            }

            var nativePromise;

            try {
              nativePromise = Promise;
            } catch (_) {
              nativePromise = function nativePromise() {};
            }
            /**
             * Clones (copies) an Object using deep copying.
             *
             * This function supports circular references by default, but if you are certain
             * there are no circular references in your object, you can save some CPU time
             * by calling clone(obj, false).
             *
             * Caution: if `circular` is false and `parent` contains circular references,
             * your program may enter an infinite loop and crash.
             *
             * @param `parent` - the object to be cloned
             * @param `circular` - set to true if the object to be cloned may contain
             *    circular references. (optional - true by default)
             * @param `depth` - set to a number if the object is only to be cloned to
             *    a particular depth. (optional - defaults to Infinity)
             * @param `prototype` - sets the prototype to be used when cloning an object.
             *    (optional - defaults to parent prototype).
             * @param `includeNonEnumerable` - set to true if the non-enumerable properties
             *    should be cloned as well. Non-enumerable properties on the prototype
             *    chain will be ignored. (optional - false by default)
            */


            function clone(parent, circular, depth, prototype, includeNonEnumerable) {
              if (_typeof(circular) === 'object') {
                depth = circular.depth;
                prototype = circular.prototype;
                includeNonEnumerable = circular.includeNonEnumerable;
                circular = circular.circular;
              } // maintain two arrays for circular references, where corresponding parents
              // and children have the same index


              var allParents = [];
              var allChildren = [];
              var useBuffer = typeof Buffer != 'undefined';
              if (typeof circular == 'undefined') circular = true;
              if (typeof depth == 'undefined') depth = Infinity; // recurse this function so we don't reset allParents and allChildren

              function _clone(parent, depth) {
                // cloning null always returns null
                if (parent === null) return null;
                if (depth === 0) return parent;
                var child;
                var proto;

                if (_typeof(parent) != 'object') {
                  return parent;
                }

                if (_instanceof(parent, nativeMap)) {
                  child = new nativeMap();
                } else if (_instanceof(parent, nativeSet)) {
                  child = new nativeSet();
                } else if (_instanceof(parent, nativePromise)) {
                  child = new nativePromise(function (resolve, reject) {
                    parent.then(function (value) {
                      resolve(_clone(value, depth - 1));
                    }, function (err) {
                      reject(_clone(err, depth - 1));
                    });
                  });
                } else if (clone.__isArray(parent)) {
                  child = [];
                } else if (clone.__isRegExp(parent)) {
                  child = new RegExp(parent.source, __getRegExpFlags(parent));
                  if (parent.lastIndex) child.lastIndex = parent.lastIndex;
                } else if (clone.__isDate(parent)) {
                  child = new Date(parent.getTime());
                } else if (useBuffer && Buffer.isBuffer(parent)) {
                  if (Buffer.allocUnsafe) {
                    // Node.js >= 4.5.0
                    child = Buffer.allocUnsafe(parent.length);
                  } else {
                    // Older Node.js versions
                    child = new Buffer(parent.length);
                  }

                  parent.copy(child);
                  return child;
                } else if (_instanceof(parent, Error)) {
                  child = Object.create(parent);
                } else {
                  if (typeof prototype == 'undefined') {
                    proto = Object.getPrototypeOf(parent);
                    child = Object.create(proto);
                  } else {
                    child = Object.create(prototype);
                    proto = prototype;
                  }
                }

                if (circular) {
                  var index = allParents.indexOf(parent);

                  if (index != -1) {
                    return allChildren[index];
                  }

                  allParents.push(parent);
                  allChildren.push(child);
                }

                if (_instanceof(parent, nativeMap)) {
                  parent.forEach(function (value, key) {
                    var keyChild = _clone(key, depth - 1);

                    var valueChild = _clone(value, depth - 1);

                    child.set(keyChild, valueChild);
                  });
                }

                if (_instanceof(parent, nativeSet)) {
                  parent.forEach(function (value) {
                    var entryChild = _clone(value, depth - 1);

                    child.add(entryChild);
                  });
                }

                for (var i in parent) {
                  var attrs;

                  if (proto) {
                    attrs = Object.getOwnPropertyDescriptor(proto, i);
                  }

                  if (attrs && attrs.set == null) {
                    continue;
                  }

                  child[i] = _clone(parent[i], depth - 1);
                }

                if (Object.getOwnPropertySymbols) {
                  var symbols = Object.getOwnPropertySymbols(parent);

                  for (var i = 0; i < symbols.length; i++) {
                    // Don't need to worry about cloning a symbol because it is a primitive,
                    // like a number or string.
                    var symbol = symbols[i];
                    var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);

                    if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                      continue;
                    }

                    child[symbol] = _clone(parent[symbol], depth - 1);

                    if (!descriptor.enumerable) {
                      Object.defineProperty(child, symbol, {
                        enumerable: false
                      });
                    }
                  }
                }

                if (includeNonEnumerable) {
                  var allPropertyNames = Object.getOwnPropertyNames(parent);

                  for (var i = 0; i < allPropertyNames.length; i++) {
                    var propertyName = allPropertyNames[i];
                    var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);

                    if (descriptor && descriptor.enumerable) {
                      continue;
                    }

                    child[propertyName] = _clone(parent[propertyName], depth - 1);
                    Object.defineProperty(child, propertyName, {
                      enumerable: false
                    });
                  }
                }

                return child;
              }

              return _clone(parent, depth);
            }
            /**
             * Simple flat clone using prototype, accepts only objects, usefull for property
             * override on FLAT configuration object (no nested props).
             *
             * USE WITH CAUTION! This may not behave as you wish if you do not know how this
             * works.
             */


            clone.clonePrototype = function clonePrototype(parent) {
              if (parent === null) return null;

              var c = function c() {};

              c.prototype = parent;
              return new c();
            }; // private utility functions


            function __objToStr(o) {
              return Object.prototype.toString.call(o);
            }

            clone.__objToStr = __objToStr;

            function __isDate(o) {
              return _typeof(o) === 'object' && __objToStr(o) === '[object Date]';
            }

            clone.__isDate = __isDate;

            function __isArray(o) {
              return _typeof(o) === 'object' && __objToStr(o) === '[object Array]';
            }

            clone.__isArray = __isArray;

            function __isRegExp(o) {
              return _typeof(o) === 'object' && __objToStr(o) === '[object RegExp]';
            }

            clone.__isRegExp = __isRegExp;

            function __getRegExpFlags(re) {
              var flags = '';
              if (re.global) flags += 'g';
              if (re.ignoreCase) flags += 'i';
              if (re.multiline) flags += 'm';
              return flags;
            }

            clone.__getRegExpFlags = __getRegExpFlags;
            return clone;
          }();

          if (_typeof(module) === 'object' && module.exports) {
            module.exports = clone;
          }
          /***/

        },
        /* 22 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _emitter = __webpack_require__(8);

          var _emitter2 = _interopRequireDefault(_emitter);

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          var _break = __webpack_require__(16);

          var _break2 = _interopRequireDefault(_break);

          var _code = __webpack_require__(13);

          var _code2 = _interopRequireDefault(_code);

          var _container = __webpack_require__(25);

          var _container2 = _interopRequireDefault(_container);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          function isLine(blot) {
            return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
          }

          var Scroll = function (_Parchment$Scroll) {
            _inherits(Scroll, _Parchment$Scroll);

            function Scroll(domNode, config) {
              _classCallCheck(this, Scroll);

              var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));

              _this.emitter = config.emitter;

              if (Array.isArray(config.whitelist)) {
                _this.whitelist = config.whitelist.reduce(function (whitelist, format) {
                  whitelist[format] = true;
                  return whitelist;
                }, {});
              } // Some reason fixes composition issues with character languages in Windows/Chrome, Safari


              _this.domNode.addEventListener('DOMNodeInserted', function () {});

              _this.optimize();

              _this.enable();

              return _this;
            }

            _createClass(Scroll, [{
              key: 'batchStart',
              value: function batchStart() {
                this.batch = true;
              }
            }, {
              key: 'batchEnd',
              value: function batchEnd() {
                this.batch = false;
                this.optimize();
              }
            }, {
              key: 'deleteAt',
              value: function deleteAt(index, length) {
                var _line = this.line(index),
                    _line2 = _slicedToArray(_line, 2),
                    first = _line2[0],
                    offset = _line2[1];

                var _line3 = this.line(index + length),
                    _line4 = _slicedToArray(_line3, 1),
                    last = _line4[0];

                _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);

                if (last != null && first !== last && offset > 0) {
                  if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {
                    this.optimize();
                    return;
                  }

                  if (first instanceof _code2.default) {
                    var newlineIndex = first.newlineIndex(first.length(), true);

                    if (newlineIndex > -1) {
                      first = first.split(newlineIndex + 1);

                      if (first === last) {
                        this.optimize();
                        return;
                      }
                    }
                  } else if (last instanceof _code2.default) {
                    var _newlineIndex = last.newlineIndex(0);

                    if (_newlineIndex > -1) {
                      last.split(_newlineIndex + 1);
                    }
                  }

                  var ref = last.children.head instanceof _break2.default ? null : last.children.head;
                  first.moveChildren(last, ref);
                  first.remove();
                }

                this.optimize();
              }
            }, {
              key: 'enable',
              value: function enable() {
                var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                this.domNode.setAttribute('contenteditable', enabled);
              }
            }, {
              key: 'formatAt',
              value: function formatAt(index, length, format, value) {
                if (this.whitelist != null && !this.whitelist[format]) return;

                _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);

                this.optimize();
              }
            }, {
              key: 'insertAt',
              value: function insertAt(index, value, def) {
                if (def != null && this.whitelist != null && !this.whitelist[value]) return;

                if (index >= this.length()) {
                  if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
                    var blot = _parchment2.default.create(this.statics.defaultChild);

                    this.appendChild(blot);

                    if (def == null && value.endsWith('\n')) {
                      value = value.slice(0, -1);
                    }

                    blot.insertAt(0, value, def);
                  } else {
                    var embed = _parchment2.default.create(value, def);

                    this.appendChild(embed);
                  }
                } else {
                  _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);
                }

                this.optimize();
              }
            }, {
              key: 'insertBefore',
              value: function insertBefore(blot, ref) {
                if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
                  var wrapper = _parchment2.default.create(this.statics.defaultChild);

                  wrapper.appendChild(blot);
                  blot = wrapper;
                }

                _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);
              }
            }, {
              key: 'leaf',
              value: function leaf(index) {
                return this.path(index).pop() || [null, -1];
              }
            }, {
              key: 'line',
              value: function line(index) {
                if (index === this.length()) {
                  return this.line(index - 1);
                }

                return this.descendant(isLine, index);
              }
            }, {
              key: 'lines',
              value: function lines() {
                var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

                var getLines = function getLines(blot, index, length) {
                  var lines = [],
                      lengthLeft = length;
                  blot.children.forEachAt(index, length, function (child, index, length) {
                    if (isLine(child)) {
                      lines.push(child);
                    } else if (child instanceof _parchment2.default.Container) {
                      lines = lines.concat(getLines(child, index, lengthLeft));
                    }

                    lengthLeft -= length;
                  });
                  return lines;
                };

                return getLines(this, index, length);
              }
            }, {
              key: 'optimize',
              value: function optimize() {
                var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                if (this.batch === true) return;

                _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations, context);

                if (mutations.length > 0) {
                  this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);
                }
              }
            }, {
              key: 'path',
              value: function path(index) {
                return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1); // Exclude self
              }
            }, {
              key: 'update',
              value: function update(mutations) {
                if (this.batch === true) return;
                var source = _emitter2.default.sources.USER;

                if (typeof mutations === 'string') {
                  source = mutations;
                }

                if (!Array.isArray(mutations)) {
                  mutations = this.observer.takeRecords();
                }

                if (mutations.length > 0) {
                  this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);
                }

                _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([])); // pass copy


                if (mutations.length > 0) {
                  this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);
                }
              }
            }]);

            return Scroll;
          }(_parchment2.default.Scroll);

          Scroll.blotName = 'scroll';
          Scroll.className = 'ql-editor';
          Scroll.tagName = 'DIV';
          Scroll.defaultChild = 'block';
          Scroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];
          exports.default = Scroll;
          /***/
        },
        /* 23 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.SHORTKEY = exports.default = undefined;

          var _typeof$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
            return _typeof(obj);
          } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof(obj);
          };

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _clone = __webpack_require__(21);

          var _clone2 = _interopRequireDefault(_clone);

          var _deepEqual = __webpack_require__(11);

          var _deepEqual2 = _interopRequireDefault(_deepEqual);

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _op = __webpack_require__(20);

          var _op2 = _interopRequireDefault(_op);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _logger = __webpack_require__(10);

          var _logger2 = _interopRequireDefault(_logger);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var debug = (0, _logger2.default)('quill:keyboard');
          var SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';

          var Keyboard = function (_Module) {
            _inherits(Keyboard, _Module);

            _createClass(Keyboard, null, [{
              key: 'match',
              value: function match(evt, binding) {
                binding = normalize(binding);

                if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {
                  return !!binding[key] !== evt[key] && binding[key] !== null;
                })) {
                  return false;
                }

                return binding.key === (evt.which || evt.keyCode);
              }
            }]);

            function Keyboard(quill, options) {
              _classCallCheck(this, Keyboard);

              var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));

              _this.bindings = {};
              Object.keys(_this.options.bindings).forEach(function (name) {
                if (name === 'list autofill' && quill.scroll.whitelist != null && !quill.scroll.whitelist['list']) {
                  return;
                }

                if (_this.options.bindings[name]) {
                  _this.addBinding(_this.options.bindings[name]);
                }
              });

              _this.addBinding({
                key: Keyboard.keys.ENTER,
                shiftKey: null
              }, handleEnter);

              _this.addBinding({
                key: Keyboard.keys.ENTER,
                metaKey: null,
                ctrlKey: null,
                altKey: null
              }, function () {});

              if (/Firefox/i.test(navigator.userAgent)) {
                // Need to handle delete and backspace for Firefox in the general case #1171
                _this.addBinding({
                  key: Keyboard.keys.BACKSPACE
                }, {
                  collapsed: true
                }, handleBackspace);

                _this.addBinding({
                  key: Keyboard.keys.DELETE
                }, {
                  collapsed: true
                }, handleDelete);
              } else {
                _this.addBinding({
                  key: Keyboard.keys.BACKSPACE
                }, {
                  collapsed: true,
                  prefix: /^.?$/
                }, handleBackspace);

                _this.addBinding({
                  key: Keyboard.keys.DELETE
                }, {
                  collapsed: true,
                  suffix: /^.?$/
                }, handleDelete);
              }

              _this.addBinding({
                key: Keyboard.keys.BACKSPACE
              }, {
                collapsed: false
              }, handleDeleteRange);

              _this.addBinding({
                key: Keyboard.keys.DELETE
              }, {
                collapsed: false
              }, handleDeleteRange);

              _this.addBinding({
                key: Keyboard.keys.BACKSPACE,
                altKey: null,
                ctrlKey: null,
                metaKey: null,
                shiftKey: null
              }, {
                collapsed: true,
                offset: 0
              }, handleBackspace);

              _this.listen();

              return _this;
            }

            _createClass(Keyboard, [{
              key: 'addBinding',
              value: function addBinding(key) {
                var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                var binding = normalize(key);

                if (binding == null || binding.key == null) {
                  return debug.warn('Attempted to add invalid keyboard binding', binding);
                }

                if (typeof context === 'function') {
                  context = {
                    handler: context
                  };
                }

                if (typeof handler === 'function') {
                  handler = {
                    handler: handler
                  };
                }

                binding = (0, _extend2.default)(binding, context, handler);
                this.bindings[binding.key] = this.bindings[binding.key] || [];
                this.bindings[binding.key].push(binding);
              }
            }, {
              key: 'listen',
              value: function listen() {
                var _this2 = this;

                this.quill.root.addEventListener('keydown', function (evt) {
                  if (evt.defaultPrevented) return;
                  var which = evt.which || evt.keyCode;
                  var bindings = (_this2.bindings[which] || []).filter(function (binding) {
                    return Keyboard.match(evt, binding);
                  });
                  if (bindings.length === 0) return;

                  var range = _this2.quill.getSelection();

                  if (range == null || !_this2.quill.hasFocus()) return;

                  var _quill$getLine = _this2.quill.getLine(range.index),
                      _quill$getLine2 = _slicedToArray(_quill$getLine, 2),
                      line = _quill$getLine2[0],
                      offset = _quill$getLine2[1];

                  var _quill$getLeaf = _this2.quill.getLeaf(range.index),
                      _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2),
                      leafStart = _quill$getLeaf2[0],
                      offsetStart = _quill$getLeaf2[1];

                  var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length),
                      _ref2 = _slicedToArray(_ref, 2),
                      leafEnd = _ref2[0],
                      offsetEnd = _ref2[1];

                  var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';
                  var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';
                  var curContext = {
                    collapsed: range.length === 0,
                    empty: range.length === 0 && line.length() <= 1,
                    format: _this2.quill.getFormat(range),
                    offset: offset,
                    prefix: prefixText,
                    suffix: suffixText
                  };
                  var prevented = bindings.some(function (binding) {
                    if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;
                    if (binding.empty != null && binding.empty !== curContext.empty) return false;
                    if (binding.offset != null && binding.offset !== curContext.offset) return false;

                    if (Array.isArray(binding.format)) {
                      // any format is present
                      if (binding.format.every(function (name) {
                        return curContext.format[name] == null;
                      })) {
                        return false;
                      }
                    } else if (_typeof$1(binding.format) === 'object') {
                      // all formats must match
                      if (!Object.keys(binding.format).every(function (name) {
                        if (binding.format[name] === true) return curContext.format[name] != null;
                        if (binding.format[name] === false) return curContext.format[name] == null;
                        return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
                      })) {
                        return false;
                      }
                    }

                    if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;
                    if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;
                    return binding.handler.call(_this2, range, curContext) !== true;
                  });

                  if (prevented) {
                    evt.preventDefault();
                  }
                });
              }
            }]);

            return Keyboard;
          }(_module2.default);

          Keyboard.keys = {
            BACKSPACE: 8,
            TAB: 9,
            ENTER: 13,
            ESCAPE: 27,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40,
            DELETE: 46
          };
          Keyboard.DEFAULTS = {
            bindings: {
              'bold': makeFormatHandler('bold'),
              'italic': makeFormatHandler('italic'),
              'underline': makeFormatHandler('underline'),
              'indent': {
                // highlight tab or tab at beginning of list, indent or blockquote
                key: Keyboard.keys.TAB,
                format: ['blockquote', 'indent', 'list'],
                handler: function handler(range, context) {
                  if (context.collapsed && context.offset !== 0) return true;
                  this.quill.format('indent', '+1', _quill2.default.sources.USER);
                }
              },
              'outdent': {
                key: Keyboard.keys.TAB,
                shiftKey: true,
                format: ['blockquote', 'indent', 'list'],
                // highlight tab or tab at beginning of list, indent or blockquote
                handler: function handler(range, context) {
                  if (context.collapsed && context.offset !== 0) return true;
                  this.quill.format('indent', '-1', _quill2.default.sources.USER);
                }
              },
              'outdent backspace': {
                key: Keyboard.keys.BACKSPACE,
                collapsed: true,
                shiftKey: null,
                metaKey: null,
                ctrlKey: null,
                altKey: null,
                format: ['indent', 'list'],
                offset: 0,
                handler: function handler(range, context) {
                  if (context.format.indent != null) {
                    this.quill.format('indent', '-1', _quill2.default.sources.USER);
                  } else if (context.format.list != null) {
                    this.quill.format('list', false, _quill2.default.sources.USER);
                  }
                }
              },
              'indent code-block': makeCodeBlockHandler(true),
              'outdent code-block': makeCodeBlockHandler(false),
              'remove tab': {
                key: Keyboard.keys.TAB,
                shiftKey: true,
                collapsed: true,
                prefix: /\t$/,
                handler: function handler(range) {
                  this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
                }
              },
              'tab': {
                key: Keyboard.keys.TAB,
                handler: function handler(range) {
                  this.quill.history.cutoff();
                  var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert('\t');
                  this.quill.updateContents(delta, _quill2.default.sources.USER);
                  this.quill.history.cutoff();
                  this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                }
              },
              'list empty enter': {
                key: Keyboard.keys.ENTER,
                collapsed: true,
                format: ['list'],
                empty: true,
                handler: function handler(range, context) {
                  this.quill.format('list', false, _quill2.default.sources.USER);

                  if (context.format.indent) {
                    this.quill.format('indent', false, _quill2.default.sources.USER);
                  }
                }
              },
              'checklist enter': {
                key: Keyboard.keys.ENTER,
                collapsed: true,
                format: {
                  list: 'checked'
                },
                handler: function handler(range) {
                  var _quill$getLine3 = this.quill.getLine(range.index),
                      _quill$getLine4 = _slicedToArray(_quill$getLine3, 2),
                      line = _quill$getLine4[0],
                      offset = _quill$getLine4[1];

                  var formats = (0, _extend2.default)({}, line.formats(), {
                    list: 'checked'
                  });
                  var delta = new _quillDelta2.default().retain(range.index).insert('\n', formats).retain(line.length() - offset - 1).retain(1, {
                    list: 'unchecked'
                  });
                  this.quill.updateContents(delta, _quill2.default.sources.USER);
                  this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                  this.quill.scrollIntoView();
                }
              },
              'header enter': {
                key: Keyboard.keys.ENTER,
                collapsed: true,
                format: ['header'],
                suffix: /^$/,
                handler: function handler(range, context) {
                  var _quill$getLine5 = this.quill.getLine(range.index),
                      _quill$getLine6 = _slicedToArray(_quill$getLine5, 2),
                      line = _quill$getLine6[0],
                      offset = _quill$getLine6[1];

                  var delta = new _quillDelta2.default().retain(range.index).insert('\n', context.format).retain(line.length() - offset - 1).retain(1, {
                    header: null
                  });
                  this.quill.updateContents(delta, _quill2.default.sources.USER);
                  this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                  this.quill.scrollIntoView();
                }
              },
              'list autofill': {
                key: ' ',
                collapsed: true,
                format: {
                  list: false
                },
                prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
                handler: function handler(range, context) {
                  var length = context.prefix.length;

                  var _quill$getLine7 = this.quill.getLine(range.index),
                      _quill$getLine8 = _slicedToArray(_quill$getLine7, 2),
                      line = _quill$getLine8[0],
                      offset = _quill$getLine8[1];

                  if (offset > length) return true;
                  var value = void 0;

                  switch (context.prefix.trim()) {
                    case '[]':
                    case '[ ]':
                      value = 'unchecked';
                      break;

                    case '[x]':
                      value = 'checked';
                      break;

                    case '-':
                    case '*':
                      value = 'bullet';
                      break;

                    default:
                      value = 'ordered';
                  }

                  this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);
                  this.quill.history.cutoff();
                  var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, {
                    list: value
                  });
                  this.quill.updateContents(delta, _quill2.default.sources.USER);
                  this.quill.history.cutoff();
                  this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
                }
              },
              'code exit': {
                key: Keyboard.keys.ENTER,
                collapsed: true,
                format: ['code-block'],
                prefix: /\n\n$/,
                suffix: /^\s+$/,
                handler: function handler(range) {
                  var _quill$getLine9 = this.quill.getLine(range.index),
                      _quill$getLine10 = _slicedToArray(_quill$getLine9, 2),
                      line = _quill$getLine10[0],
                      offset = _quill$getLine10[1];

                  var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, {
                    'code-block': null
                  }).delete(1);
                  this.quill.updateContents(delta, _quill2.default.sources.USER);
                }
              },
              'embed left': makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
              'embed left shift': makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
              'embed right': makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
              'embed right shift': makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)
            }
          };

          function makeEmbedArrowHandler(key, shiftKey) {
            var _ref3;

            var where = key === Keyboard.keys.LEFT ? 'prefix' : 'suffix';
            return _ref3 = {
              key: key,
              shiftKey: shiftKey,
              altKey: null
            }, _defineProperty(_ref3, where, /^$/), _defineProperty(_ref3, 'handler', function handler(range) {
              var index = range.index;

              if (key === Keyboard.keys.RIGHT) {
                index += range.length + 1;
              }

              var _quill$getLeaf3 = this.quill.getLeaf(index),
                  _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1),
                  leaf = _quill$getLeaf4[0];

              if (!(leaf instanceof _parchment2.default.Embed)) return true;

              if (key === Keyboard.keys.LEFT) {
                if (shiftKey) {
                  this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);
                } else {
                  this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);
                }
              } else {
                if (shiftKey) {
                  this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);
                } else {
                  this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);
                }
              }

              return false;
            }), _ref3;
          }

          function handleBackspace(range, context) {
            if (range.index === 0 || this.quill.getLength() <= 1) return;

            var _quill$getLine11 = this.quill.getLine(range.index),
                _quill$getLine12 = _slicedToArray(_quill$getLine11, 1),
                line = _quill$getLine12[0];

            var formats = {};

            if (context.offset === 0) {
              var _quill$getLine13 = this.quill.getLine(range.index - 1),
                  _quill$getLine14 = _slicedToArray(_quill$getLine13, 1),
                  prev = _quill$getLine14[0];

              if (prev != null && prev.length() > 1) {
                var curFormats = line.formats();
                var prevFormats = this.quill.getFormat(range.index - 1, 1);
                formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
              }
            } // Check for astral symbols


            var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
            this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);

            if (Object.keys(formats).length > 0) {
              this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
            }

            this.quill.focus();
          }

          function handleDelete(range, context) {
            // Check for astral symbols
            var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
            if (range.index >= this.quill.getLength() - length) return;
            var formats = {},
                nextLength = 0;

            var _quill$getLine15 = this.quill.getLine(range.index),
                _quill$getLine16 = _slicedToArray(_quill$getLine15, 1),
                line = _quill$getLine16[0];

            if (context.offset >= line.length() - 1) {
              var _quill$getLine17 = this.quill.getLine(range.index + 1),
                  _quill$getLine18 = _slicedToArray(_quill$getLine17, 1),
                  next = _quill$getLine18[0];

              if (next) {
                var curFormats = line.formats();
                var nextFormats = this.quill.getFormat(range.index, 1);
                formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
                nextLength = next.length();
              }
            }

            this.quill.deleteText(range.index, length, _quill2.default.sources.USER);

            if (Object.keys(formats).length > 0) {
              this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
            }
          }

          function handleDeleteRange(range) {
            var lines = this.quill.getLines(range);
            var formats = {};

            if (lines.length > 1) {
              var firstFormats = lines[0].formats();
              var lastFormats = lines[lines.length - 1].formats();
              formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
            }

            this.quill.deleteText(range, _quill2.default.sources.USER);

            if (Object.keys(formats).length > 0) {
              this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
            }

            this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
            this.quill.focus();
          }

          function handleEnter(range, context) {
            var _this3 = this;

            if (range.length > 0) {
              this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change
            }

            var lineFormats = Object.keys(context.format).reduce(function (lineFormats, format) {
              if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {
                lineFormats[format] = context.format[format];
              }

              return lineFormats;
            }, {});
            this.quill.insertText(range.index, '\n', lineFormats, _quill2.default.sources.USER); // Earlier scroll.deleteAt might have messed up our selection,
            // so insertText's built in selection preservation is not reliable

            this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
            this.quill.focus();
            Object.keys(context.format).forEach(function (name) {
              if (lineFormats[name] != null) return;
              if (Array.isArray(context.format[name])) return;
              if (name === 'link') return;

              _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);
            });
          }

          function makeCodeBlockHandler(indent) {
            return {
              key: Keyboard.keys.TAB,
              shiftKey: !indent,
              format: {
                'code-block': true
              },
              handler: function handler(range) {
                var CodeBlock = _parchment2.default.query('code-block');

                var index = range.index,
                    length = range.length;

                var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index),
                    _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
                    block = _quill$scroll$descend2[0],
                    offset = _quill$scroll$descend2[1];

                if (block == null) return;
                var scrollIndex = this.quill.getIndex(block);
                var start = block.newlineIndex(offset, true) + 1;
                var end = block.newlineIndex(scrollIndex + offset + length);
                var lines = block.domNode.textContent.slice(start, end).split('\n');
                offset = 0;
                lines.forEach(function (line, i) {
                  if (indent) {
                    block.insertAt(start + offset, CodeBlock.TAB);
                    offset += CodeBlock.TAB.length;

                    if (i === 0) {
                      index += CodeBlock.TAB.length;
                    } else {
                      length += CodeBlock.TAB.length;
                    }
                  } else if (line.startsWith(CodeBlock.TAB)) {
                    block.deleteAt(start + offset, CodeBlock.TAB.length);
                    offset -= CodeBlock.TAB.length;

                    if (i === 0) {
                      index -= CodeBlock.TAB.length;
                    } else {
                      length -= CodeBlock.TAB.length;
                    }
                  }

                  offset += line.length + 1;
                });
                this.quill.update(_quill2.default.sources.USER);
                this.quill.setSelection(index, length, _quill2.default.sources.SILENT);
              }
            };
          }

          function makeFormatHandler(format) {
            return {
              key: format[0].toUpperCase(),
              shortKey: true,
              handler: function handler(range, context) {
                this.quill.format(format, !context.format[format], _quill2.default.sources.USER);
              }
            };
          }

          function normalize(binding) {
            if (typeof binding === 'string' || typeof binding === 'number') {
              return normalize({
                key: binding
              });
            }

            if ((typeof binding === 'undefined' ? 'undefined' : _typeof$1(binding)) === 'object') {
              binding = (0, _clone2.default)(binding, false);
            }

            if (typeof binding.key === 'string') {
              if (Keyboard.keys[binding.key.toUpperCase()] != null) {
                binding.key = Keyboard.keys[binding.key.toUpperCase()];
              } else if (binding.key.length === 1) {
                binding.key = binding.key.toUpperCase().charCodeAt(0);
              } else {
                return null;
              }
            }

            if (binding.shortKey) {
              binding[SHORTKEY] = binding.shortKey;
              delete binding.shortKey;
            }

            return binding;
          }

          exports.default = Keyboard;
          exports.SHORTKEY = SHORTKEY;
          /***/
        },
        /* 24 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _text = __webpack_require__(7);

          var _text2 = _interopRequireDefault(_text);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Cursor = function (_Parchment$Embed) {
            _inherits(Cursor, _Parchment$Embed);

            _createClass(Cursor, null, [{
              key: 'value',
              value: function value() {
                return undefined;
              }
            }]);

            function Cursor(domNode, selection) {
              _classCallCheck(this, Cursor);

              var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));

              _this.selection = selection;
              _this.textNode = document.createTextNode(Cursor.CONTENTS);

              _this.domNode.appendChild(_this.textNode);

              _this._length = 0;
              return _this;
            }

            _createClass(Cursor, [{
              key: 'detach',
              value: function detach() {
                // super.detach() will also clear domNode.__blot
                if (this.parent != null) this.parent.removeChild(this);
              }
            }, {
              key: 'format',
              value: function format(name, value) {
                if (this._length !== 0) {
                  return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);
                }

                var target = this,
                    index = 0;

                while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {
                  index += target.offset(target.parent);
                  target = target.parent;
                }

                if (target != null) {
                  this._length = Cursor.CONTENTS.length;
                  target.optimize();
                  target.formatAt(index, Cursor.CONTENTS.length, name, value);
                  this._length = 0;
                }
              }
            }, {
              key: 'index',
              value: function index(node, offset) {
                if (node === this.textNode) return 0;
                return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);
              }
            }, {
              key: 'length',
              value: function length() {
                return this._length;
              }
            }, {
              key: 'position',
              value: function position() {
                return [this.textNode, this.textNode.data.length];
              }
            }, {
              key: 'remove',
              value: function remove() {
                _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);

                this.parent = null;
              }
            }, {
              key: 'restore',
              value: function restore() {
                if (this.selection.composing || this.parent == null) return;
                var textNode = this.textNode;
                var range = this.selection.getNativeRange();
                var restoreText = void 0,
                    start = void 0,
                    end = void 0;

                if (range != null && range.start.node === textNode && range.end.node === textNode) {
                  var _ref = [textNode, range.start.offset, range.end.offset];
                  restoreText = _ref[0];
                  start = _ref[1];
                  end = _ref[2];
                } // Link format will insert text outside of anchor tag


                while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
                  this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
                }

                if (this.textNode.data !== Cursor.CONTENTS) {
                  var text = this.textNode.data.split(Cursor.CONTENTS).join('');

                  if (this.next instanceof _text2.default) {
                    restoreText = this.next.domNode;
                    this.next.insertAt(0, text);
                    this.textNode.data = Cursor.CONTENTS;
                  } else {
                    this.textNode.data = text;
                    this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
                    this.textNode = document.createTextNode(Cursor.CONTENTS);
                    this.domNode.appendChild(this.textNode);
                  }
                }

                this.remove();

                if (start != null) {
                  var _map = [start, end].map(function (offset) {
                    return Math.max(0, Math.min(restoreText.data.length, offset - 1));
                  });

                  var _map2 = _slicedToArray(_map, 2);

                  start = _map2[0];
                  end = _map2[1];
                  return {
                    startNode: restoreText,
                    startOffset: start,
                    endNode: restoreText,
                    endOffset: end
                  };
                }
              }
            }, {
              key: 'update',
              value: function update(mutations, context) {
                var _this2 = this;

                if (mutations.some(function (mutation) {
                  return mutation.type === 'characterData' && mutation.target === _this2.textNode;
                })) {
                  var range = this.restore();
                  if (range) context.range = range;
                }
              }
            }, {
              key: 'value',
              value: function value() {
                return '';
              }
            }]);

            return Cursor;
          }(_parchment2.default.Embed);

          Cursor.blotName = 'cursor';
          Cursor.className = 'ql-cursor';
          Cursor.tagName = 'span';
          Cursor.CONTENTS = "\uFEFF"; // Zero width no break space

          exports.default = Cursor;
          /***/
        },
        /* 25 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Container = function (_Parchment$Container) {
            _inherits(Container, _Parchment$Container);

            function Container() {
              _classCallCheck(this, Container);

              return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
            }

            return Container;
          }(_parchment2.default.Container);

          Container.allowedChildren = [_block2.default, _block.BlockEmbed, Container];
          exports.default = Container;
          /***/
        },
        /* 26 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var ColorAttributor = function (_Parchment$Attributor) {
            _inherits(ColorAttributor, _Parchment$Attributor);

            function ColorAttributor() {
              _classCallCheck(this, ColorAttributor);

              return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));
            }

            _createClass(ColorAttributor, [{
              key: 'value',
              value: function value(domNode) {
                var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);

                if (!value.startsWith('rgb(')) return value;
                value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
                return '#' + value.split(',').map(function (component) {
                  return ('00' + parseInt(component).toString(16)).slice(-2);
                }).join('');
              }
            }]);

            return ColorAttributor;
          }(_parchment2.default.Attributor.Style);

          var ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {
            scope: _parchment2.default.Scope.INLINE
          });
          var ColorStyle = new ColorAttributor('color', 'color', {
            scope: _parchment2.default.Scope.INLINE
          });
          exports.ColorAttributor = ColorAttributor;
          exports.ColorClass = ColorClass;
          exports.ColorStyle = ColorStyle;
          /***/
        },
        /* 27 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.sanitize = exports.default = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Link = function (_Inline) {
            _inherits(Link, _Inline);

            function Link() {
              _classCallCheck(this, Link);

              return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));
            }

            _createClass(Link, [{
              key: 'format',
              value: function format(name, value) {
                if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);
                value = this.constructor.sanitize(value);
                this.domNode.setAttribute('href', value);
              }
            }], [{
              key: 'create',
              value: function create(value) {
                var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);

                value = this.sanitize(value);
                node.setAttribute('href', value);
                node.setAttribute('rel', 'noopener noreferrer');
                node.setAttribute('target', '_blank');
                return node;
              }
            }, {
              key: 'formats',
              value: function formats(domNode) {
                return domNode.getAttribute('href');
              }
            }, {
              key: 'sanitize',
              value: function sanitize(url) {
                return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
              }
            }]);

            return Link;
          }(_inline2.default);

          Link.blotName = 'link';
          Link.tagName = 'A';
          Link.SANITIZED_URL = 'about:blank';
          Link.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];

          function _sanitize(url, protocols) {
            var anchor = document.createElement('a');
            anchor.href = url;
            var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
            return protocols.indexOf(protocol) > -1;
          }

          exports.default = Link;
          exports.sanitize = _sanitize;
          /***/
        },
        /* 28 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _typeof$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
            return _typeof(obj);
          } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof(obj);
          };

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _keyboard = __webpack_require__(23);

          var _keyboard2 = _interopRequireDefault(_keyboard);

          var _dropdown = __webpack_require__(107);

          var _dropdown2 = _interopRequireDefault(_dropdown);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var optionsCounter = 0;

          function toggleAriaAttribute(element, attribute) {
            element.setAttribute(attribute, !(element.getAttribute(attribute) === 'true'));
          }

          var Picker = function () {
            function Picker(select) {
              var _this = this;

              _classCallCheck(this, Picker);

              this.select = select;
              this.container = document.createElement('span');
              this.buildPicker();
              this.select.style.display = 'none';
              this.select.parentNode.insertBefore(this.container, this.select);
              this.label.addEventListener('mousedown', function () {
                _this.togglePicker();
              });
              this.label.addEventListener('keydown', function (event) {
                switch (event.keyCode) {
                  // Allows the "Enter" key to open the picker
                  case _keyboard2.default.keys.ENTER:
                    _this.togglePicker();

                    break;
                  // Allows the "Escape" key to close the picker

                  case _keyboard2.default.keys.ESCAPE:
                    _this.escape();

                    event.preventDefault();
                    break;
                }
              });
              this.select.addEventListener('change', this.update.bind(this));
            }

            _createClass(Picker, [{
              key: 'togglePicker',
              value: function togglePicker() {
                this.container.classList.toggle('ql-expanded'); // Toggle aria-expanded and aria-hidden to make the picker accessible

                toggleAriaAttribute(this.label, 'aria-expanded');
                toggleAriaAttribute(this.options, 'aria-hidden');
              }
            }, {
              key: 'buildItem',
              value: function buildItem(option) {
                var _this2 = this;

                var item = document.createElement('span');
                item.tabIndex = '0';
                item.setAttribute('role', 'button');
                item.classList.add('ql-picker-item');

                if (option.hasAttribute('value')) {
                  item.setAttribute('data-value', option.getAttribute('value'));
                }

                if (option.textContent) {
                  item.setAttribute('data-label', option.textContent);
                }

                item.addEventListener('click', function () {
                  _this2.selectItem(item, true);
                });
                item.addEventListener('keydown', function (event) {
                  switch (event.keyCode) {
                    // Allows the "Enter" key to select an item
                    case _keyboard2.default.keys.ENTER:
                      _this2.selectItem(item, true);

                      event.preventDefault();
                      break;
                    // Allows the "Escape" key to close the picker

                    case _keyboard2.default.keys.ESCAPE:
                      _this2.escape();

                      event.preventDefault();
                      break;
                  }
                });
                return item;
              }
            }, {
              key: 'buildLabel',
              value: function buildLabel() {
                var label = document.createElement('span');
                label.classList.add('ql-picker-label');
                label.innerHTML = _dropdown2.default;
                label.tabIndex = '0';
                label.setAttribute('role', 'button');
                label.setAttribute('aria-expanded', 'false');
                this.container.appendChild(label);
                return label;
              }
            }, {
              key: 'buildOptions',
              value: function buildOptions() {
                var _this3 = this;

                var options = document.createElement('span');
                options.classList.add('ql-picker-options'); // Don't want screen readers to read this until options are visible

                options.setAttribute('aria-hidden', 'true');
                options.tabIndex = '-1'; // Need a unique id for aria-controls

                options.id = 'ql-picker-options-' + optionsCounter;
                optionsCounter += 1;
                this.label.setAttribute('aria-controls', options.id);
                this.options = options;
                [].slice.call(this.select.options).forEach(function (option) {
                  var item = _this3.buildItem(option);

                  options.appendChild(item);

                  if (option.selected === true) {
                    _this3.selectItem(item);
                  }
                });
                this.container.appendChild(options);
              }
            }, {
              key: 'buildPicker',
              value: function buildPicker() {
                var _this4 = this;

                [].slice.call(this.select.attributes).forEach(function (item) {
                  _this4.container.setAttribute(item.name, item.value);
                });
                this.container.classList.add('ql-picker');
                this.label = this.buildLabel();
                this.buildOptions();
              }
            }, {
              key: 'escape',
              value: function escape() {
                var _this5 = this; // Close menu and return focus to trigger label


                this.close(); // Need setTimeout for accessibility to ensure that the browser executes
                // focus on the next process thread and after any DOM content changes

                setTimeout(function () {
                  return _this5.label.focus();
                }, 1);
              }
            }, {
              key: 'close',
              value: function close() {
                this.container.classList.remove('ql-expanded');
                this.label.setAttribute('aria-expanded', 'false');
                this.options.setAttribute('aria-hidden', 'true');
              }
            }, {
              key: 'selectItem',
              value: function selectItem(item) {
                var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var selected = this.container.querySelector('.ql-selected');
                if (item === selected) return;

                if (selected != null) {
                  selected.classList.remove('ql-selected');
                }

                if (item == null) return;
                item.classList.add('ql-selected');
                this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);

                if (item.hasAttribute('data-value')) {
                  this.label.setAttribute('data-value', item.getAttribute('data-value'));
                } else {
                  this.label.removeAttribute('data-value');
                }

                if (item.hasAttribute('data-label')) {
                  this.label.setAttribute('data-label', item.getAttribute('data-label'));
                } else {
                  this.label.removeAttribute('data-label');
                }

                if (trigger) {
                  if (typeof Event === 'function') {
                    this.select.dispatchEvent(new Event('change'));
                  } else if ((typeof Event === 'undefined' ? 'undefined' : _typeof$1(Event)) === 'object') {
                    // IE11
                    var event = document.createEvent('Event');
                    event.initEvent('change', true, true);
                    this.select.dispatchEvent(event);
                  }

                  this.close();
                }
              }
            }, {
              key: 'update',
              value: function update() {
                var option = void 0;

                if (this.select.selectedIndex > -1) {
                  var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
                  option = this.select.options[this.select.selectedIndex];
                  this.selectItem(item);
                } else {
                  this.selectItem(null);
                }

                var isActive = option != null && option !== this.select.querySelector('option[selected]');
                this.label.classList.toggle('ql-active', isActive);
              }
            }]);

            return Picker;
          }();

          exports.default = Picker;
          /***/
        },
        /* 29 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          var _break = __webpack_require__(16);

          var _break2 = _interopRequireDefault(_break);

          var _container = __webpack_require__(25);

          var _container2 = _interopRequireDefault(_container);

          var _cursor = __webpack_require__(24);

          var _cursor2 = _interopRequireDefault(_cursor);

          var _embed = __webpack_require__(35);

          var _embed2 = _interopRequireDefault(_embed);

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          var _scroll = __webpack_require__(22);

          var _scroll2 = _interopRequireDefault(_scroll);

          var _text = __webpack_require__(7);

          var _text2 = _interopRequireDefault(_text);

          var _clipboard = __webpack_require__(55);

          var _clipboard2 = _interopRequireDefault(_clipboard);

          var _history = __webpack_require__(42);

          var _history2 = _interopRequireDefault(_history);

          var _keyboard = __webpack_require__(23);

          var _keyboard2 = _interopRequireDefault(_keyboard);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          _quill2.default.register({
            'blots/block': _block2.default,
            'blots/block/embed': _block.BlockEmbed,
            'blots/break': _break2.default,
            'blots/container': _container2.default,
            'blots/cursor': _cursor2.default,
            'blots/embed': _embed2.default,
            'blots/inline': _inline2.default,
            'blots/scroll': _scroll2.default,
            'blots/text': _text2.default,
            'modules/clipboard': _clipboard2.default,
            'modules/history': _history2.default,
            'modules/keyboard': _keyboard2.default
          });

          _parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);

          exports.default = _quill2.default;
          /***/
        },
        /* 30 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var Registry = __webpack_require__(1);

          var ShadowBlot =
          /** @class */
          function () {
            function ShadowBlot(domNode) {
              this.domNode = domNode; // @ts-ignore

              this.domNode[Registry.DATA_KEY] = {
                blot: this
              };
            }

            Object.defineProperty(ShadowBlot.prototype, "statics", {
              // Hack for accessing inherited static methods
              get: function get() {
                return this.constructor;
              },
              enumerable: true,
              configurable: true
            });

            ShadowBlot.create = function (value) {
              if (this.tagName == null) {
                throw new Registry.ParchmentError('Blot definition missing tagName');
              }

              var node;

              if (Array.isArray(this.tagName)) {
                if (typeof value === 'string') {
                  value = value.toUpperCase();

                  if (parseInt(value).toString() === value) {
                    value = parseInt(value);
                  }
                }

                if (typeof value === 'number') {
                  node = document.createElement(this.tagName[value - 1]);
                } else if (this.tagName.indexOf(value) > -1) {
                  node = document.createElement(value);
                } else {
                  node = document.createElement(this.tagName[0]);
                }
              } else {
                node = document.createElement(this.tagName);
              }

              if (this.className) {
                node.classList.add(this.className);
              }

              return node;
            };

            ShadowBlot.prototype.attach = function () {
              if (this.parent != null) {
                this.scroll = this.parent.scroll;
              }
            };

            ShadowBlot.prototype.clone = function () {
              var domNode = this.domNode.cloneNode(false);
              return Registry.create(domNode);
            };

            ShadowBlot.prototype.detach = function () {
              if (this.parent != null) this.parent.removeChild(this); // @ts-ignore

              delete this.domNode[Registry.DATA_KEY];
            };

            ShadowBlot.prototype.deleteAt = function (index, length) {
              var blot = this.isolate(index, length);
              blot.remove();
            };

            ShadowBlot.prototype.formatAt = function (index, length, name, value) {
              var blot = this.isolate(index, length);

              if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
                blot.wrap(name, value);
              } else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
                var parent = Registry.create(this.statics.scope);
                blot.wrap(parent);
                parent.format(name, value);
              }
            };

            ShadowBlot.prototype.insertAt = function (index, value, def) {
              var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
              var ref = this.split(index);
              this.parent.insertBefore(blot, ref);
            };

            ShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {
              if (refBlot === void 0) {
                refBlot = null;
              }

              if (this.parent != null) {
                this.parent.children.remove(this);
              }

              var refDomNode = null;
              parentBlot.children.insertBefore(this, refBlot);

              if (refBlot != null) {
                refDomNode = refBlot.domNode;
              }

              if (this.domNode.parentNode != parentBlot.domNode || this.domNode.nextSibling != refDomNode) {
                parentBlot.domNode.insertBefore(this.domNode, refDomNode);
              }

              this.parent = parentBlot;
              this.attach();
            };

            ShadowBlot.prototype.isolate = function (index, length) {
              var target = this.split(index);
              target.split(length);
              return target;
            };

            ShadowBlot.prototype.length = function () {
              return 1;
            };

            ShadowBlot.prototype.offset = function (root) {
              if (root === void 0) {
                root = this.parent;
              }

              if (this.parent == null || this == root) return 0;
              return this.parent.children.offset(this) + this.parent.offset(root);
            };

            ShadowBlot.prototype.optimize = function (context) {
              // TODO clean up once we use WeakMap
              // @ts-ignore
              if (this.domNode[Registry.DATA_KEY] != null) {
                // @ts-ignore
                delete this.domNode[Registry.DATA_KEY].mutations;
              }
            };

            ShadowBlot.prototype.remove = function () {
              if (this.domNode.parentNode != null) {
                this.domNode.parentNode.removeChild(this.domNode);
              }

              this.detach();
            };

            ShadowBlot.prototype.replace = function (target) {
              if (target.parent == null) return;
              target.parent.insertBefore(this, target.next);
              target.remove();
            };

            ShadowBlot.prototype.replaceWith = function (name, value) {
              var replacement = typeof name === 'string' ? Registry.create(name, value) : name;
              replacement.replace(this);
              return replacement;
            };

            ShadowBlot.prototype.split = function (index, force) {
              return index === 0 ? this : this.next;
            };

            ShadowBlot.prototype.update = function (mutations, context) {// Nothing to do by default
            };

            ShadowBlot.prototype.wrap = function (name, value) {
              var wrapper = typeof name === 'string' ? Registry.create(name, value) : name;

              if (this.parent != null) {
                this.parent.insertBefore(wrapper, this.next);
              }

              wrapper.appendChild(this);
              return wrapper;
            };

            ShadowBlot.blotName = 'abstract';
            return ShadowBlot;
          }();

          exports.default = ShadowBlot;
          /***/
        },
        /* 31 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var attributor_1 = __webpack_require__(12);

          var class_1 = __webpack_require__(32);

          var style_1 = __webpack_require__(33);

          var Registry = __webpack_require__(1);

          var AttributorStore =
          /** @class */
          function () {
            function AttributorStore(domNode) {
              this.attributes = {};
              this.domNode = domNode;
              this.build();
            }

            AttributorStore.prototype.attribute = function (attribute, value) {
              // verb
              if (value) {
                if (attribute.add(this.domNode, value)) {
                  if (attribute.value(this.domNode) != null) {
                    this.attributes[attribute.attrName] = attribute;
                  } else {
                    delete this.attributes[attribute.attrName];
                  }
                }
              } else {
                attribute.remove(this.domNode);
                delete this.attributes[attribute.attrName];
              }
            };

            AttributorStore.prototype.build = function () {
              var _this = this;

              this.attributes = {};
              var attributes = attributor_1.default.keys(this.domNode);
              var classes = class_1.default.keys(this.domNode);
              var styles = style_1.default.keys(this.domNode);
              attributes.concat(classes).concat(styles).forEach(function (name) {
                var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);

                if (attr instanceof attributor_1.default) {
                  _this.attributes[attr.attrName] = attr;
                }
              });
            };

            AttributorStore.prototype.copy = function (target) {
              var _this = this;

              Object.keys(this.attributes).forEach(function (key) {
                var value = _this.attributes[key].value(_this.domNode);

                target.format(key, value);
              });
            };

            AttributorStore.prototype.move = function (target) {
              var _this = this;

              this.copy(target);
              Object.keys(this.attributes).forEach(function (key) {
                _this.attributes[key].remove(_this.domNode);
              });
              this.attributes = {};
            };

            AttributorStore.prototype.values = function () {
              var _this = this;

              return Object.keys(this.attributes).reduce(function (attributes, name) {
                attributes[name] = _this.attributes[name].value(_this.domNode);
                return attributes;
              }, {});
            };

            return AttributorStore;
          }();

          exports.default = AttributorStore;
          /***/
        },
        /* 32 */

        /***/
        function (module, exports, __webpack_require__) {

          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var attributor_1 = __webpack_require__(12);

          function match(node, prefix) {
            var className = node.getAttribute('class') || '';
            return className.split(/\s+/).filter(function (name) {
              return name.indexOf(prefix + "-") === 0;
            });
          }

          var ClassAttributor =
          /** @class */
          function (_super) {
            __extends(ClassAttributor, _super);

            function ClassAttributor() {
              return _super !== null && _super.apply(this, arguments) || this;
            }

            ClassAttributor.keys = function (node) {
              return (node.getAttribute('class') || '').split(/\s+/).map(function (name) {
                return name.split('-').slice(0, -1).join('-');
              });
            };

            ClassAttributor.prototype.add = function (node, value) {
              if (!this.canAdd(node, value)) return false;
              this.remove(node);
              node.classList.add(this.keyName + "-" + value);
              return true;
            };

            ClassAttributor.prototype.remove = function (node) {
              var matches = match(node, this.keyName);
              matches.forEach(function (name) {
                node.classList.remove(name);
              });

              if (node.classList.length === 0) {
                node.removeAttribute('class');
              }
            };

            ClassAttributor.prototype.value = function (node) {
              var result = match(node, this.keyName)[0] || '';
              var value = result.slice(this.keyName.length + 1); // +1 for hyphen

              return this.canAdd(node, value) ? value : '';
            };

            return ClassAttributor;
          }(attributor_1.default);

          exports.default = ClassAttributor;
          /***/
        },
        /* 33 */

        /***/
        function (module, exports, __webpack_require__) {

          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var attributor_1 = __webpack_require__(12);

          function camelize(name) {
            var parts = name.split('-');
            var rest = parts.slice(1).map(function (part) {
              return part[0].toUpperCase() + part.slice(1);
            }).join('');
            return parts[0] + rest;
          }

          var StyleAttributor =
          /** @class */
          function (_super) {
            __extends(StyleAttributor, _super);

            function StyleAttributor() {
              return _super !== null && _super.apply(this, arguments) || this;
            }

            StyleAttributor.keys = function (node) {
              return (node.getAttribute('style') || '').split(';').map(function (value) {
                var arr = value.split(':');
                return arr[0].trim();
              });
            };

            StyleAttributor.prototype.add = function (node, value) {
              if (!this.canAdd(node, value)) return false; // @ts-ignore

              node.style[camelize(this.keyName)] = value;
              return true;
            };

            StyleAttributor.prototype.remove = function (node) {
              // @ts-ignore
              node.style[camelize(this.keyName)] = '';

              if (!node.getAttribute('style')) {
                node.removeAttribute('style');
              }
            };

            StyleAttributor.prototype.value = function (node) {
              // @ts-ignore
              var value = node.style[camelize(this.keyName)];
              return this.canAdd(node, value) ? value : '';
            };

            return StyleAttributor;
          }(attributor_1.default);

          exports.default = StyleAttributor;
          /***/
        },
        /* 34 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var Theme = function () {
            function Theme(quill, options) {
              _classCallCheck(this, Theme);

              this.quill = quill;
              this.options = options;
              this.modules = {};
            }

            _createClass(Theme, [{
              key: 'init',
              value: function init() {
                var _this = this;

                Object.keys(this.options.modules).forEach(function (name) {
                  if (_this.modules[name] == null) {
                    _this.addModule(name);
                  }
                });
              }
            }, {
              key: 'addModule',
              value: function addModule(name) {
                var moduleClass = this.quill.constructor.import('modules/' + name);
                this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
                return this.modules[name];
              }
            }]);

            return Theme;
          }();

          Theme.DEFAULTS = {
            modules: {}
          };
          Theme.themes = {
            'default': Theme
          };
          exports.default = Theme;
          /***/
        },
        /* 35 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _text = __webpack_require__(7);

          var _text2 = _interopRequireDefault(_text);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var GUARD_TEXT = "\uFEFF";

          var Embed = function (_Parchment$Embed) {
            _inherits(Embed, _Parchment$Embed);

            function Embed(node) {
              _classCallCheck(this, Embed);

              var _this = _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).call(this, node));

              _this.contentNode = document.createElement('span');

              _this.contentNode.setAttribute('contenteditable', false);

              [].slice.call(_this.domNode.childNodes).forEach(function (childNode) {
                _this.contentNode.appendChild(childNode);
              });
              _this.leftGuard = document.createTextNode(GUARD_TEXT);
              _this.rightGuard = document.createTextNode(GUARD_TEXT);

              _this.domNode.appendChild(_this.leftGuard);

              _this.domNode.appendChild(_this.contentNode);

              _this.domNode.appendChild(_this.rightGuard);

              return _this;
            }

            _createClass(Embed, [{
              key: 'index',
              value: function index(node, offset) {
                if (node === this.leftGuard) return 0;
                if (node === this.rightGuard) return 1;
                return _get(Embed.prototype.__proto__ || Object.getPrototypeOf(Embed.prototype), 'index', this).call(this, node, offset);
              }
            }, {
              key: 'restore',
              value: function restore(node) {
                var range = void 0,
                    textNode = void 0;
                var text = node.data.split(GUARD_TEXT).join('');

                if (node === this.leftGuard) {
                  if (this.prev instanceof _text2.default) {
                    var prevLength = this.prev.length();
                    this.prev.insertAt(prevLength, text);
                    range = {
                      startNode: this.prev.domNode,
                      startOffset: prevLength + text.length
                    };
                  } else {
                    textNode = document.createTextNode(text);
                    this.parent.insertBefore(_parchment2.default.create(textNode), this);
                    range = {
                      startNode: textNode,
                      startOffset: text.length
                    };
                  }
                } else if (node === this.rightGuard) {
                  if (this.next instanceof _text2.default) {
                    this.next.insertAt(0, text);
                    range = {
                      startNode: this.next.domNode,
                      startOffset: text.length
                    };
                  } else {
                    textNode = document.createTextNode(text);
                    this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
                    range = {
                      startNode: textNode,
                      startOffset: text.length
                    };
                  }
                }

                node.data = GUARD_TEXT;
                return range;
              }
            }, {
              key: 'update',
              value: function update(mutations, context) {
                var _this2 = this;

                mutations.forEach(function (mutation) {
                  if (mutation.type === 'characterData' && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
                    var range = _this2.restore(mutation.target);

                    if (range) context.range = range;
                  }
                });
              }
            }]);

            return Embed;
          }(_parchment2.default.Embed);

          exports.default = Embed;
          /***/
        },
        /* 36 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          var config = {
            scope: _parchment2.default.Scope.BLOCK,
            whitelist: ['right', 'center', 'justify']
          };
          var AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);
          var AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);
          var AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);
          exports.AlignAttribute = AlignAttribute;
          exports.AlignClass = AlignClass;
          exports.AlignStyle = AlignStyle;
          /***/
        },
        /* 37 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.BackgroundStyle = exports.BackgroundClass = undefined;

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _color = __webpack_require__(26);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          var BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {
            scope: _parchment2.default.Scope.INLINE
          });
          var BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {
            scope: _parchment2.default.Scope.INLINE
          });
          exports.BackgroundClass = BackgroundClass;
          exports.BackgroundStyle = BackgroundStyle;
          /***/
        },
        /* 38 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          var config = {
            scope: _parchment2.default.Scope.BLOCK,
            whitelist: ['rtl']
          };
          var DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);
          var DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);
          var DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);
          exports.DirectionAttribute = DirectionAttribute;
          exports.DirectionClass = DirectionClass;
          exports.DirectionStyle = DirectionStyle;
          /***/
        },
        /* 39 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.FontClass = exports.FontStyle = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var config = {
            scope: _parchment2.default.Scope.INLINE,
            whitelist: ['serif', 'monospace']
          };
          var FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);

          var FontStyleAttributor = function (_Parchment$Attributor) {
            _inherits(FontStyleAttributor, _Parchment$Attributor);

            function FontStyleAttributor() {
              _classCallCheck(this, FontStyleAttributor);

              return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));
            }

            _createClass(FontStyleAttributor, [{
              key: 'value',
              value: function value(node) {
                return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/["']/g, '');
              }
            }]);

            return FontStyleAttributor;
          }(_parchment2.default.Attributor.Style);

          var FontStyle = new FontStyleAttributor('font', 'font-family', config);
          exports.FontStyle = FontStyle;
          exports.FontClass = FontClass;
          /***/
        },
        /* 40 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.SizeStyle = exports.SizeClass = undefined;

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          var SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {
            scope: _parchment2.default.Scope.INLINE,
            whitelist: ['small', 'large', 'huge']
          });
          var SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {
            scope: _parchment2.default.Scope.INLINE,
            whitelist: ['10px', '18px', '32px']
          });
          exports.SizeClass = SizeClass;
          exports.SizeStyle = SizeStyle;
          /***/
        },
        /* 41 */

        /***/
        function (module, exports, __webpack_require__) {

          module.exports = {
            'align': {
              '': __webpack_require__(76),
              'center': __webpack_require__(77),
              'right': __webpack_require__(78),
              'justify': __webpack_require__(79)
            },
            'background': __webpack_require__(80),
            'blockquote': __webpack_require__(81),
            'bold': __webpack_require__(82),
            'clean': __webpack_require__(83),
            'code': __webpack_require__(58),
            'code-block': __webpack_require__(58),
            'color': __webpack_require__(84),
            'direction': {
              '': __webpack_require__(85),
              'rtl': __webpack_require__(86)
            },
            'float': {
              'center': __webpack_require__(87),
              'full': __webpack_require__(88),
              'left': __webpack_require__(89),
              'right': __webpack_require__(90)
            },
            'formula': __webpack_require__(91),
            'header': {
              '1': __webpack_require__(92),
              '2': __webpack_require__(93)
            },
            'italic': __webpack_require__(94),
            'image': __webpack_require__(95),
            'indent': {
              '+1': __webpack_require__(96),
              '-1': __webpack_require__(97)
            },
            'link': __webpack_require__(98),
            'list': {
              'ordered': __webpack_require__(99),
              'bullet': __webpack_require__(100),
              'check': __webpack_require__(101)
            },
            'script': {
              'sub': __webpack_require__(102),
              'super': __webpack_require__(103)
            },
            'strike': __webpack_require__(104),
            'underline': __webpack_require__(105),
            'video': __webpack_require__(106)
          };
          /***/
        },
        /* 42 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.getLastChangeIndex = exports.default = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var History = function (_Module) {
            _inherits(History, _Module);

            function History(quill, options) {
              _classCallCheck(this, History);

              var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));

              _this.lastRecorded = 0;
              _this.ignoreChange = false;

              _this.clear();

              _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {
                if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;

                if (!_this.options.userOnly || source === _quill2.default.sources.USER) {
                  _this.record(delta, oldDelta);
                } else {
                  _this.transform(delta);
                }
              });

              _this.quill.keyboard.addBinding({
                key: 'Z',
                shortKey: true
              }, _this.undo.bind(_this));

              _this.quill.keyboard.addBinding({
                key: 'Z',
                shortKey: true,
                shiftKey: true
              }, _this.redo.bind(_this));

              if (/Win/i.test(navigator.platform)) {
                _this.quill.keyboard.addBinding({
                  key: 'Y',
                  shortKey: true
                }, _this.redo.bind(_this));
              }

              return _this;
            }

            _createClass(History, [{
              key: 'change',
              value: function change(source, dest) {
                if (this.stack[source].length === 0) return;
                var delta = this.stack[source].pop();
                this.stack[dest].push(delta);
                this.lastRecorded = 0;
                this.ignoreChange = true;
                this.quill.updateContents(delta[source], _quill2.default.sources.USER);
                this.ignoreChange = false;
                var index = getLastChangeIndex(delta[source]);
                this.quill.setSelection(index);
              }
            }, {
              key: 'clear',
              value: function clear() {
                this.stack = {
                  undo: [],
                  redo: []
                };
              }
            }, {
              key: 'cutoff',
              value: function cutoff() {
                this.lastRecorded = 0;
              }
            }, {
              key: 'record',
              value: function record(changeDelta, oldDelta) {
                if (changeDelta.ops.length === 0) return;
                this.stack.redo = [];
                var undoDelta = this.quill.getContents().diff(oldDelta);
                var timestamp = Date.now();

                if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
                  var delta = this.stack.undo.pop();
                  undoDelta = undoDelta.compose(delta.undo);
                  changeDelta = delta.redo.compose(changeDelta);
                } else {
                  this.lastRecorded = timestamp;
                }

                this.stack.undo.push({
                  redo: changeDelta,
                  undo: undoDelta
                });

                if (this.stack.undo.length > this.options.maxStack) {
                  this.stack.undo.shift();
                }
              }
            }, {
              key: 'redo',
              value: function redo() {
                this.change('redo', 'undo');
              }
            }, {
              key: 'transform',
              value: function transform(delta) {
                this.stack.undo.forEach(function (change) {
                  change.undo = delta.transform(change.undo, true);
                  change.redo = delta.transform(change.redo, true);
                });
                this.stack.redo.forEach(function (change) {
                  change.undo = delta.transform(change.undo, true);
                  change.redo = delta.transform(change.redo, true);
                });
              }
            }, {
              key: 'undo',
              value: function undo() {
                this.change('undo', 'redo');
              }
            }]);

            return History;
          }(_module2.default);

          History.DEFAULTS = {
            delay: 1000,
            maxStack: 100,
            userOnly: false
          };

          function endsWithNewlineChange(delta) {
            var lastOp = delta.ops[delta.ops.length - 1];
            if (lastOp == null) return false;

            if (lastOp.insert != null) {
              return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
            }

            if (lastOp.attributes != null) {
              return Object.keys(lastOp.attributes).some(function (attr) {
                return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
              });
            }

            return false;
          }

          function getLastChangeIndex(delta) {
            var deleteLength = delta.reduce(function (length, op) {
              length += op.delete || 0;
              return length;
            }, 0);
            var changeIndex = delta.length() - deleteLength;

            if (endsWithNewlineChange(delta)) {
              changeIndex -= 1;
            }

            return changeIndex;
          }

          exports.default = History;
          exports.getLastChangeIndex = getLastChangeIndex;
          /***/
        },
        /* 43 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.BaseTooltip = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _emitter = __webpack_require__(8);

          var _emitter2 = _interopRequireDefault(_emitter);

          var _keyboard = __webpack_require__(23);

          var _keyboard2 = _interopRequireDefault(_keyboard);

          var _theme = __webpack_require__(34);

          var _theme2 = _interopRequireDefault(_theme);

          var _colorPicker = __webpack_require__(59);

          var _colorPicker2 = _interopRequireDefault(_colorPicker);

          var _iconPicker = __webpack_require__(60);

          var _iconPicker2 = _interopRequireDefault(_iconPicker);

          var _picker = __webpack_require__(28);

          var _picker2 = _interopRequireDefault(_picker);

          var _tooltip = __webpack_require__(61);

          var _tooltip2 = _interopRequireDefault(_tooltip);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var ALIGNS = [false, 'center', 'right', 'justify'];
          var COLORS = ["#000000", "#e60000", "#ff9900", "#ffff00", "#008a00", "#0066cc", "#9933ff", "#ffffff", "#facccc", "#ffebcc", "#ffffcc", "#cce8cc", "#cce0f5", "#ebd6ff", "#bbbbbb", "#f06666", "#ffc266", "#ffff66", "#66b966", "#66a3e0", "#c285ff", "#888888", "#a10000", "#b26b00", "#b2b200", "#006100", "#0047b2", "#6b24b2", "#444444", "#5c0000", "#663d00", "#666600", "#003700", "#002966", "#3d1466"];
          var FONTS = [false, 'serif', 'monospace'];
          var HEADERS = ['1', '2', '3', false];
          var SIZES = ['small', false, 'large', 'huge'];

          var BaseTheme = function (_Theme) {
            _inherits(BaseTheme, _Theme);

            function BaseTheme(quill, options) {
              _classCallCheck(this, BaseTheme);

              var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));

              var listener = function listener(e) {
                if (!document.body.contains(quill.root)) {
                  return document.body.removeEventListener('click', listener);
                }

                if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
                  _this.tooltip.hide();
                }

                if (_this.pickers != null) {
                  _this.pickers.forEach(function (picker) {
                    if (!picker.container.contains(e.target)) {
                      picker.close();
                    }
                  });
                }
              };

              quill.emitter.listenDOM('click', document.body, listener);
              return _this;
            }

            _createClass(BaseTheme, [{
              key: 'addModule',
              value: function addModule(name) {
                var module = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);

                if (name === 'toolbar') {
                  this.extendToolbar(module);
                }

                return module;
              }
            }, {
              key: 'buildButtons',
              value: function buildButtons(buttons, icons) {
                buttons.forEach(function (button) {
                  var className = button.getAttribute('class') || '';
                  className.split(/\s+/).forEach(function (name) {
                    if (!name.startsWith('ql-')) return;
                    name = name.slice('ql-'.length);
                    if (icons[name] == null) return;

                    if (name === 'direction') {
                      button.innerHTML = icons[name][''] + icons[name]['rtl'];
                    } else if (typeof icons[name] === 'string') {
                      button.innerHTML = icons[name];
                    } else {
                      var value = button.value || '';

                      if (value != null && icons[name][value]) {
                        button.innerHTML = icons[name][value];
                      }
                    }
                  });
                });
              }
            }, {
              key: 'buildPickers',
              value: function buildPickers(selects, icons) {
                var _this2 = this;

                this.pickers = selects.map(function (select) {
                  if (select.classList.contains('ql-align')) {
                    if (select.querySelector('option') == null) {
                      fillSelect(select, ALIGNS);
                    }

                    return new _iconPicker2.default(select, icons.align);
                  } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
                    var format = select.classList.contains('ql-background') ? 'background' : 'color';

                    if (select.querySelector('option') == null) {
                      fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
                    }

                    return new _colorPicker2.default(select, icons[format]);
                  } else {
                    if (select.querySelector('option') == null) {
                      if (select.classList.contains('ql-font')) {
                        fillSelect(select, FONTS);
                      } else if (select.classList.contains('ql-header')) {
                        fillSelect(select, HEADERS);
                      } else if (select.classList.contains('ql-size')) {
                        fillSelect(select, SIZES);
                      }
                    }

                    return new _picker2.default(select);
                  }
                });

                var update = function update() {
                  _this2.pickers.forEach(function (picker) {
                    picker.update();
                  });
                };

                this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
              }
            }]);

            return BaseTheme;
          }(_theme2.default);

          BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
            modules: {
              toolbar: {
                handlers: {
                  formula: function formula() {
                    this.quill.theme.tooltip.edit('formula');
                  },
                  image: function image() {
                    var _this3 = this;

                    var fileInput = this.container.querySelector('input.ql-image[type=file]');

                    if (fileInput == null) {
                      fileInput = document.createElement('input');
                      fileInput.setAttribute('type', 'file');
                      fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');
                      fileInput.classList.add('ql-image');
                      fileInput.addEventListener('change', function () {
                        if (fileInput.files != null && fileInput.files[0] != null) {
                          var reader = new FileReader();

                          reader.onload = function (e) {
                            var range = _this3.quill.getSelection(true);

                            _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({
                              image: e.target.result
                            }), _emitter2.default.sources.USER);

                            _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);

                            fileInput.value = "";
                          };

                          reader.readAsDataURL(fileInput.files[0]);
                        }
                      });
                      this.container.appendChild(fileInput);
                    }

                    fileInput.click();
                  },
                  video: function video() {
                    this.quill.theme.tooltip.edit('video');
                  }
                }
              }
            }
          });

          var BaseTooltip = function (_Tooltip) {
            _inherits(BaseTooltip, _Tooltip);

            function BaseTooltip(quill, boundsContainer) {
              _classCallCheck(this, BaseTooltip);

              var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));

              _this4.textbox = _this4.root.querySelector('input[type="text"]');

              _this4.listen();

              return _this4;
            }

            _createClass(BaseTooltip, [{
              key: 'listen',
              value: function listen() {
                var _this5 = this;

                this.textbox.addEventListener('keydown', function (event) {
                  if (_keyboard2.default.match(event, 'enter')) {
                    _this5.save();

                    event.preventDefault();
                  } else if (_keyboard2.default.match(event, 'escape')) {
                    _this5.cancel();

                    event.preventDefault();
                  }
                });
              }
            }, {
              key: 'cancel',
              value: function cancel() {
                this.hide();
              }
            }, {
              key: 'edit',
              value: function edit() {
                var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
                var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                this.root.classList.remove('ql-hidden');
                this.root.classList.add('ql-editing');

                if (preview != null) {
                  this.textbox.value = preview;
                } else if (mode !== this.root.getAttribute('data-mode')) {
                  this.textbox.value = '';
                }

                this.position(this.quill.getBounds(this.quill.selection.savedRange));
                this.textbox.select();
                this.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');
                this.root.setAttribute('data-mode', mode);
              }
            }, {
              key: 'restoreFocus',
              value: function restoreFocus() {
                var scrollTop = this.quill.scrollingContainer.scrollTop;
                this.quill.focus();
                this.quill.scrollingContainer.scrollTop = scrollTop;
              }
            }, {
              key: 'save',
              value: function save() {
                var value = this.textbox.value;

                switch (this.root.getAttribute('data-mode')) {
                  case 'link':
                    {
                      var scrollTop = this.quill.root.scrollTop;

                      if (this.linkRange) {
                        this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);
                        delete this.linkRange;
                      } else {
                        this.restoreFocus();
                        this.quill.format('link', value, _emitter2.default.sources.USER);
                      }

                      this.quill.root.scrollTop = scrollTop;
                      break;
                    }

                  case 'video':
                    {
                      value = extractVideoUrl(value);
                    }
                  // eslint-disable-next-line no-fallthrough

                  case 'formula':
                    {
                      if (!value) break;
                      var range = this.quill.getSelection(true);

                      if (range != null) {
                        var index = range.index + range.length;
                        this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);

                        if (this.root.getAttribute('data-mode') === 'formula') {
                          this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);
                        }

                        this.quill.setSelection(index + 2, _emitter2.default.sources.USER);
                      }

                      break;
                    }
                }

                this.textbox.value = '';
                this.hide();
              }
            }]);

            return BaseTooltip;
          }(_tooltip2.default);

          function extractVideoUrl(url) {
            var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);

            if (match) {
              return (match[1] || 'https') + '://www.youtube.com/embed/' + match[2] + '?showinfo=0';
            }

            if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
              // eslint-disable-line no-cond-assign
              return (match[1] || 'https') + '://player.vimeo.com/video/' + match[2] + '/';
            }

            return url;
          }

          function fillSelect(select, values) {
            var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            values.forEach(function (value) {
              var option = document.createElement('option');

              if (value === defaultValue) {
                option.setAttribute('selected', 'selected');
              } else {
                option.setAttribute('value', value);
              }

              select.appendChild(option);
            });
          }

          exports.BaseTooltip = BaseTooltip;
          exports.default = BaseTheme;
          /***/
        },
        /* 44 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var LinkedList =
          /** @class */
          function () {
            function LinkedList() {
              this.head = this.tail = null;
              this.length = 0;
            }

            LinkedList.prototype.append = function () {
              var nodes = [];

              for (var _i = 0; _i < arguments.length; _i++) {
                nodes[_i] = arguments[_i];
              }

              this.insertBefore(nodes[0], null);

              if (nodes.length > 1) {
                this.append.apply(this, nodes.slice(1));
              }
            };

            LinkedList.prototype.contains = function (node) {
              var cur,
                  next = this.iterator();

              while (cur = next()) {
                if (cur === node) return true;
              }

              return false;
            };

            LinkedList.prototype.insertBefore = function (node, refNode) {
              if (!node) return;
              node.next = refNode;

              if (refNode != null) {
                node.prev = refNode.prev;

                if (refNode.prev != null) {
                  refNode.prev.next = node;
                }

                refNode.prev = node;

                if (refNode === this.head) {
                  this.head = node;
                }
              } else if (this.tail != null) {
                this.tail.next = node;
                node.prev = this.tail;
                this.tail = node;
              } else {
                node.prev = null;
                this.head = this.tail = node;
              }

              this.length += 1;
            };

            LinkedList.prototype.offset = function (target) {
              var index = 0,
                  cur = this.head;

              while (cur != null) {
                if (cur === target) return index;
                index += cur.length();
                cur = cur.next;
              }

              return -1;
            };

            LinkedList.prototype.remove = function (node) {
              if (!this.contains(node)) return;
              if (node.prev != null) node.prev.next = node.next;
              if (node.next != null) node.next.prev = node.prev;
              if (node === this.head) this.head = node.next;
              if (node === this.tail) this.tail = node.prev;
              this.length -= 1;
            };

            LinkedList.prototype.iterator = function (curNode) {
              if (curNode === void 0) {
                curNode = this.head;
              } // TODO use yield when we can


              return function () {
                var ret = curNode;
                if (curNode != null) curNode = curNode.next;
                return ret;
              };
            };

            LinkedList.prototype.find = function (index, inclusive) {
              if (inclusive === void 0) {
                inclusive = false;
              }

              var cur,
                  next = this.iterator();

              while (cur = next()) {
                var length = cur.length();

                if (index < length || inclusive && index === length && (cur.next == null || cur.next.length() !== 0)) {
                  return [cur, index];
                }

                index -= length;
              }

              return [null, 0];
            };

            LinkedList.prototype.forEach = function (callback) {
              var cur,
                  next = this.iterator();

              while (cur = next()) {
                callback(cur);
              }
            };

            LinkedList.prototype.forEachAt = function (index, length, callback) {
              if (length <= 0) return;

              var _a = this.find(index),
                  startNode = _a[0],
                  offset = _a[1];

              var cur,
                  curIndex = index - offset,
                  next = this.iterator(startNode);

              while ((cur = next()) && curIndex < index + length) {
                var curLength = cur.length();

                if (index > curIndex) {
                  callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));
                } else {
                  callback(cur, 0, Math.min(curLength, index + length - curIndex));
                }

                curIndex += curLength;
              }
            };

            LinkedList.prototype.map = function (callback) {
              return this.reduce(function (memo, cur) {
                memo.push(callback(cur));
                return memo;
              }, []);
            };

            LinkedList.prototype.reduce = function (callback, memo) {
              var cur,
                  next = this.iterator();

              while (cur = next()) {
                memo = callback(memo, cur);
              }

              return memo;
            };

            return LinkedList;
          }();

          exports.default = LinkedList;
          /***/
        },
        /* 45 */

        /***/
        function (module, exports, __webpack_require__) {

          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var container_1 = __webpack_require__(17);

          var Registry = __webpack_require__(1);

          var OBSERVER_CONFIG = {
            attributes: true,
            characterData: true,
            characterDataOldValue: true,
            childList: true,
            subtree: true
          };
          var MAX_OPTIMIZE_ITERATIONS = 100;

          var ScrollBlot =
          /** @class */
          function (_super) {
            __extends(ScrollBlot, _super);

            function ScrollBlot(node) {
              var _this = _super.call(this, node) || this;

              _this.scroll = _this;
              _this.observer = new MutationObserver(function (mutations) {
                _this.update(mutations);
              });

              _this.observer.observe(_this.domNode, OBSERVER_CONFIG);

              _this.attach();

              return _this;
            }

            ScrollBlot.prototype.detach = function () {
              _super.prototype.detach.call(this);

              this.observer.disconnect();
            };

            ScrollBlot.prototype.deleteAt = function (index, length) {
              this.update();

              if (index === 0 && length === this.length()) {
                this.children.forEach(function (child) {
                  child.remove();
                });
              } else {
                _super.prototype.deleteAt.call(this, index, length);
              }
            };

            ScrollBlot.prototype.formatAt = function (index, length, name, value) {
              this.update();

              _super.prototype.formatAt.call(this, index, length, name, value);
            };

            ScrollBlot.prototype.insertAt = function (index, value, def) {
              this.update();

              _super.prototype.insertAt.call(this, index, value, def);
            };

            ScrollBlot.prototype.optimize = function (mutations, context) {
              var _this = this;

              if (mutations === void 0) {
                mutations = [];
              }

              if (context === void 0) {
                context = {};
              }

              _super.prototype.optimize.call(this, context); // We must modify mutations directly, cannot make copy and then modify


              var records = [].slice.call(this.observer.takeRecords()); // Array.push currently seems to be implemented by a non-tail recursive function
              // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());

              while (records.length > 0) {
                mutations.push(records.pop());
              } // TODO use WeakMap


              var mark = function mark(blot, markParent) {
                if (markParent === void 0) {
                  markParent = true;
                }

                if (blot == null || blot === _this) return;
                if (blot.domNode.parentNode == null) return; // @ts-ignore

                if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                  // @ts-ignore
                  blot.domNode[Registry.DATA_KEY].mutations = [];
                }

                if (markParent) mark(blot.parent);
              };

              var optimize = function optimize(blot) {
                // Post-order traversal
                if ( // @ts-ignore
                blot.domNode[Registry.DATA_KEY] == null || // @ts-ignore
                blot.domNode[Registry.DATA_KEY].mutations == null) {
                  return;
                }

                if (blot instanceof container_1.default) {
                  blot.children.forEach(optimize);
                }

                blot.optimize(context);
              };

              var remaining = mutations;

              for (var i = 0; remaining.length > 0; i += 1) {
                if (i >= MAX_OPTIMIZE_ITERATIONS) {
                  throw new Error('[Parchment] Maximum optimize iterations reached');
                }

                remaining.forEach(function (mutation) {
                  var blot = Registry.find(mutation.target, true);
                  if (blot == null) return;

                  if (blot.domNode === mutation.target) {
                    if (mutation.type === 'childList') {
                      mark(Registry.find(mutation.previousSibling, false));
                      [].forEach.call(mutation.addedNodes, function (node) {
                        var child = Registry.find(node, false);
                        mark(child, false);

                        if (child instanceof container_1.default) {
                          child.children.forEach(function (grandChild) {
                            mark(grandChild, false);
                          });
                        }
                      });
                    } else if (mutation.type === 'attributes') {
                      mark(blot.prev);
                    }
                  }

                  mark(blot);
                });
                this.children.forEach(optimize);
                remaining = [].slice.call(this.observer.takeRecords());
                records = remaining.slice();

                while (records.length > 0) {
                  mutations.push(records.pop());
                }
              }
            };

            ScrollBlot.prototype.update = function (mutations, context) {
              var _this = this;

              if (context === void 0) {
                context = {};
              }

              mutations = mutations || this.observer.takeRecords(); // TODO use WeakMap

              mutations.map(function (mutation) {
                var blot = Registry.find(mutation.target, true);
                if (blot == null) return null; // @ts-ignore

                if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                  // @ts-ignore
                  blot.domNode[Registry.DATA_KEY].mutations = [mutation];
                  return blot;
                } else {
                  // @ts-ignore
                  blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
                  return null;
                }
              }).forEach(function (blot) {
                if (blot == null || blot === _this || //@ts-ignore
                blot.domNode[Registry.DATA_KEY] == null) return; // @ts-ignore

                blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);
              }); // @ts-ignore

              if (this.domNode[Registry.DATA_KEY].mutations != null) {
                // @ts-ignore
                _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);
              }

              this.optimize(mutations, context);
            };

            ScrollBlot.blotName = 'scroll';
            ScrollBlot.defaultChild = 'block';
            ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;
            ScrollBlot.tagName = 'DIV';
            return ScrollBlot;
          }(container_1.default);

          exports.default = ScrollBlot;
          /***/
        },
        /* 46 */

        /***/
        function (module, exports, __webpack_require__) {

          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var format_1 = __webpack_require__(18);

          var Registry = __webpack_require__(1); // Shallow object comparison


          function isEqual(obj1, obj2) {
            if (Object.keys(obj1).length !== Object.keys(obj2).length) return false; // @ts-ignore

            for (var prop in obj1) {
              // @ts-ignore
              if (obj1[prop] !== obj2[prop]) return false;
            }

            return true;
          }

          var InlineBlot =
          /** @class */
          function (_super) {
            __extends(InlineBlot, _super);

            function InlineBlot() {
              return _super !== null && _super.apply(this, arguments) || this;
            }

            InlineBlot.formats = function (domNode) {
              if (domNode.tagName === InlineBlot.tagName) return undefined;
              return _super.formats.call(this, domNode);
            };

            InlineBlot.prototype.format = function (name, value) {
              var _this = this;

              if (name === this.statics.blotName && !value) {
                this.children.forEach(function (child) {
                  if (!(child instanceof format_1.default)) {
                    child = child.wrap(InlineBlot.blotName, true);
                  }

                  _this.attributes.copy(child);
                });
                this.unwrap();
              } else {
                _super.prototype.format.call(this, name, value);
              }
            };

            InlineBlot.prototype.formatAt = function (index, length, name, value) {
              if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
                var blot = this.isolate(index, length);
                blot.format(name, value);
              } else {
                _super.prototype.formatAt.call(this, index, length, name, value);
              }
            };

            InlineBlot.prototype.optimize = function (context) {
              _super.prototype.optimize.call(this, context);

              var formats = this.formats();

              if (Object.keys(formats).length === 0) {
                return this.unwrap(); // unformatted span
              }

              var next = this.next;

              if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {
                next.moveChildren(this);
                next.remove();
              }
            };

            InlineBlot.blotName = 'inline';
            InlineBlot.scope = Registry.Scope.INLINE_BLOT;
            InlineBlot.tagName = 'SPAN';
            return InlineBlot;
          }(format_1.default);

          exports.default = InlineBlot;
          /***/
        },
        /* 47 */

        /***/
        function (module, exports, __webpack_require__) {

          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var format_1 = __webpack_require__(18);

          var Registry = __webpack_require__(1);

          var BlockBlot =
          /** @class */
          function (_super) {
            __extends(BlockBlot, _super);

            function BlockBlot() {
              return _super !== null && _super.apply(this, arguments) || this;
            }

            BlockBlot.formats = function (domNode) {
              var tagName = Registry.query(BlockBlot.blotName).tagName;
              if (domNode.tagName === tagName) return undefined;
              return _super.formats.call(this, domNode);
            };

            BlockBlot.prototype.format = function (name, value) {
              if (Registry.query(name, Registry.Scope.BLOCK) == null) {
                return;
              } else if (name === this.statics.blotName && !value) {
                this.replaceWith(BlockBlot.blotName);
              } else {
                _super.prototype.format.call(this, name, value);
              }
            };

            BlockBlot.prototype.formatAt = function (index, length, name, value) {
              if (Registry.query(name, Registry.Scope.BLOCK) != null) {
                this.format(name, value);
              } else {
                _super.prototype.formatAt.call(this, index, length, name, value);
              }
            };

            BlockBlot.prototype.insertAt = function (index, value, def) {
              if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
                // Insert text or inline
                _super.prototype.insertAt.call(this, index, value, def);
              } else {
                var after = this.split(index);
                var blot = Registry.create(value, def);
                after.parent.insertBefore(blot, after);
              }
            };

            BlockBlot.prototype.update = function (mutations, context) {
              if (navigator.userAgent.match(/Trident/)) {
                this.build();
              } else {
                _super.prototype.update.call(this, mutations, context);
              }
            };

            BlockBlot.blotName = 'block';
            BlockBlot.scope = Registry.Scope.BLOCK_BLOT;
            BlockBlot.tagName = 'P';
            return BlockBlot;
          }(format_1.default);

          exports.default = BlockBlot;
          /***/
        },
        /* 48 */

        /***/
        function (module, exports, __webpack_require__) {

          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var leaf_1 = __webpack_require__(19);

          var EmbedBlot =
          /** @class */
          function (_super) {
            __extends(EmbedBlot, _super);

            function EmbedBlot() {
              return _super !== null && _super.apply(this, arguments) || this;
            }

            EmbedBlot.formats = function (domNode) {
              return undefined;
            };

            EmbedBlot.prototype.format = function (name, value) {
              // super.formatAt wraps, which is what we want in general,
              // but this allows subclasses to overwrite for formats
              // that just apply to particular embeds
              _super.prototype.formatAt.call(this, 0, this.length(), name, value);
            };

            EmbedBlot.prototype.formatAt = function (index, length, name, value) {
              if (index === 0 && length === this.length()) {
                this.format(name, value);
              } else {
                _super.prototype.formatAt.call(this, index, length, name, value);
              }
            };

            EmbedBlot.prototype.formats = function () {
              return this.statics.formats(this.domNode);
            };

            return EmbedBlot;
          }(leaf_1.default);

          exports.default = EmbedBlot;
          /***/
        },
        /* 49 */

        /***/
        function (module, exports, __webpack_require__) {

          var __extends = this && this.__extends || function () {
            var extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d, b) {
              d.__proto__ = b;
            } || function (d, b) {
              for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
              }
            };

            return function (d, b) {
              extendStatics(d, b);

              function __() {
                this.constructor = d;
              }

              d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
          }();

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var leaf_1 = __webpack_require__(19);

          var Registry = __webpack_require__(1);

          var TextBlot =
          /** @class */
          function (_super) {
            __extends(TextBlot, _super);

            function TextBlot(node) {
              var _this = _super.call(this, node) || this;

              _this.text = _this.statics.value(_this.domNode);
              return _this;
            }

            TextBlot.create = function (value) {
              return document.createTextNode(value);
            };

            TextBlot.value = function (domNode) {
              var text = domNode.data; // @ts-ignore

              if (text['normalize']) text = text['normalize']();
              return text;
            };

            TextBlot.prototype.deleteAt = function (index, length) {
              this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
            };

            TextBlot.prototype.index = function (node, offset) {
              if (this.domNode === node) {
                return offset;
              }

              return -1;
            };

            TextBlot.prototype.insertAt = function (index, value, def) {
              if (def == null) {
                this.text = this.text.slice(0, index) + value + this.text.slice(index);
                this.domNode.data = this.text;
              } else {
                _super.prototype.insertAt.call(this, index, value, def);
              }
            };

            TextBlot.prototype.length = function () {
              return this.text.length;
            };

            TextBlot.prototype.optimize = function (context) {
              _super.prototype.optimize.call(this, context);

              this.text = this.statics.value(this.domNode);

              if (this.text.length === 0) {
                this.remove();
              } else if (this.next instanceof TextBlot && this.next.prev === this) {
                this.insertAt(this.length(), this.next.value());
                this.next.remove();
              }
            };

            TextBlot.prototype.position = function (index, inclusive) {

              return [this.domNode, index];
            };

            TextBlot.prototype.split = function (index, force) {
              if (force === void 0) {
                force = false;
              }

              if (!force) {
                if (index === 0) return this;
                if (index === this.length()) return this.next;
              }

              var after = Registry.create(this.domNode.splitText(index));
              this.parent.insertBefore(after, this.next);
              this.text = this.statics.value(this.domNode);
              return after;
            };

            TextBlot.prototype.update = function (mutations, context) {
              var _this = this;

              if (mutations.some(function (mutation) {
                return mutation.type === 'characterData' && mutation.target === _this.domNode;
              })) {
                this.text = this.statics.value(this.domNode);
              }
            };

            TextBlot.prototype.value = function () {
              return this.text;
            };

            TextBlot.blotName = 'text';
            TextBlot.scope = Registry.Scope.INLINE_BLOT;
            return TextBlot;
          }(leaf_1.default);

          exports.default = TextBlot;
          /***/
        },
        /* 50 */

        /***/
        function (module, exports, __webpack_require__) {

          var elem = document.createElement('div');
          elem.classList.toggle('test-class', false);

          if (elem.classList.contains('test-class')) {
            var _toggle = DOMTokenList.prototype.toggle;

            DOMTokenList.prototype.toggle = function (token, force) {
              if (arguments.length > 1 && !this.contains(token) === !force) {
                return force;
              } else {
                return _toggle.call(this, token);
              }
            };
          }

          if (!String.prototype.startsWith) {
            String.prototype.startsWith = function (searchString, position) {
              position = position || 0;
              return this.substr(position, searchString.length) === searchString;
            };
          }

          if (!String.prototype.endsWith) {
            String.prototype.endsWith = function (searchString, position) {
              var subjectString = this.toString();

              if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
                position = subjectString.length;
              }

              position -= searchString.length;
              var lastIndex = subjectString.indexOf(searchString, position);
              return lastIndex !== -1 && lastIndex === position;
            };
          }

          if (!Array.prototype.find) {
            Object.defineProperty(Array.prototype, "find", {
              value: function value(predicate) {
                if (this === null) {
                  throw new TypeError('Array.prototype.find called on null or undefined');
                }

                if (typeof predicate !== 'function') {
                  throw new TypeError('predicate must be a function');
                }

                var list = Object(this);
                var length = list.length >>> 0;
                var thisArg = arguments[1];
                var value;

                for (var i = 0; i < length; i++) {
                  value = list[i];

                  if (predicate.call(thisArg, value, i, list)) {
                    return value;
                  }
                }

                return undefined;
              }
            });
          }

          document.addEventListener("DOMContentLoaded", function () {
            // Disable resizing in Firefox
            document.execCommand("enableObjectResizing", false, false); // Disable automatic linkifying in IE11

            document.execCommand("autoUrlDetect", false, false);
          });
          /***/
        },
        /* 51 */

        /***/
        function (module, exports) {
          /**
           * This library modifies the diff-patch-match library by Neil Fraser
           * by removing the patch and match functionality and certain advanced
           * options in the diff function. The original license is as follows:
           *
           * ===
           *
           * Diff Match and Patch
           *
           * Copyright 2006 Google Inc.
           * http://code.google.com/p/google-diff-match-patch/
           *
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           *   http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           */

          /**
           * The data structure representing a diff is an array of tuples:
           * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
           * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
           */
          var DIFF_DELETE = -1;
          var DIFF_INSERT = 1;
          var DIFF_EQUAL = 0;
          /**
           * Find the differences between two texts.  Simplifies the problem by stripping
           * any common prefix or suffix off the texts before diffing.
           * @param {string} text1 Old string to be diffed.
           * @param {string} text2 New string to be diffed.
           * @param {Int} cursor_pos Expected edit position in text1 (optional)
           * @return {Array} Array of diff tuples.
           */

          function diff_main(text1, text2, cursor_pos) {
            // Check for equality (speedup).
            if (text1 == text2) {
              if (text1) {
                return [[DIFF_EQUAL, text1]];
              }

              return [];
            } // Check cursor_pos within bounds


            if (cursor_pos < 0 || text1.length < cursor_pos) {
              cursor_pos = null;
            } // Trim off common prefix (speedup).


            var commonlength = diff_commonPrefix(text1, text2);
            var commonprefix = text1.substring(0, commonlength);
            text1 = text1.substring(commonlength);
            text2 = text2.substring(commonlength); // Trim off common suffix (speedup).

            commonlength = diff_commonSuffix(text1, text2);
            var commonsuffix = text1.substring(text1.length - commonlength);
            text1 = text1.substring(0, text1.length - commonlength);
            text2 = text2.substring(0, text2.length - commonlength); // Compute the diff on the middle block.

            var diffs = diff_compute_(text1, text2); // Restore the prefix and suffix.

            if (commonprefix) {
              diffs.unshift([DIFF_EQUAL, commonprefix]);
            }

            if (commonsuffix) {
              diffs.push([DIFF_EQUAL, commonsuffix]);
            }

            diff_cleanupMerge(diffs);

            if (cursor_pos != null) {
              diffs = fix_cursor(diffs, cursor_pos);
            }

            diffs = fix_emoji(diffs);
            return diffs;
          }
          /**
           * Find the differences between two texts.  Assumes that the texts do not
           * have any common prefix or suffix.
           * @param {string} text1 Old string to be diffed.
           * @param {string} text2 New string to be diffed.
           * @return {Array} Array of diff tuples.
           */

          function diff_compute_(text1, text2) {
            var diffs;

            if (!text1) {
              // Just add some text (speedup).
              return [[DIFF_INSERT, text2]];
            }

            if (!text2) {
              // Just delete some text (speedup).
              return [[DIFF_DELETE, text1]];
            }

            var longtext = text1.length > text2.length ? text1 : text2;
            var shorttext = text1.length > text2.length ? text2 : text1;
            var i = longtext.indexOf(shorttext);

            if (i != -1) {
              // Shorter text is inside the longer text (speedup).
              diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]]; // Swap insertions for deletions if diff is reversed.

              if (text1.length > text2.length) {
                diffs[0][0] = diffs[2][0] = DIFF_DELETE;
              }

              return diffs;
            }

            if (shorttext.length == 1) {
              // Single character string.
              // After the previous speedup, the character can't be an equality.
              return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
            } // Check to see if the problem can be split in two.


            var hm = diff_halfMatch_(text1, text2);

            if (hm) {
              // A half-match was found, sort out the return data.
              var text1_a = hm[0];
              var text1_b = hm[1];
              var text2_a = hm[2];
              var text2_b = hm[3];
              var mid_common = hm[4]; // Send both pairs off for separate processing.

              var diffs_a = diff_main(text1_a, text2_a);
              var diffs_b = diff_main(text1_b, text2_b); // Merge the results.

              return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
            }

            return diff_bisect_(text1, text2);
          }
          /**
           * Find the 'middle snake' of a diff, split the problem in two
           * and return the recursively constructed diff.
           * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
           * @param {string} text1 Old string to be diffed.
           * @param {string} text2 New string to be diffed.
           * @return {Array} Array of diff tuples.
           * @private
           */

          function diff_bisect_(text1, text2) {
            // Cache the text lengths to prevent multiple calls.
            var text1_length = text1.length;
            var text2_length = text2.length;
            var max_d = Math.ceil((text1_length + text2_length) / 2);
            var v_offset = max_d;
            var v_length = 2 * max_d;
            var v1 = new Array(v_length);
            var v2 = new Array(v_length); // Setting all elements to -1 is faster in Chrome & Firefox than mixing
            // integers and undefined.

            for (var x = 0; x < v_length; x++) {
              v1[x] = -1;
              v2[x] = -1;
            }

            v1[v_offset + 1] = 0;
            v2[v_offset + 1] = 0;
            var delta = text1_length - text2_length; // If the total number of characters is odd, then the front path will collide
            // with the reverse path.

            var front = delta % 2 != 0; // Offsets for start and end of k loop.
            // Prevents mapping of space beyond the grid.

            var k1start = 0;
            var k1end = 0;
            var k2start = 0;
            var k2end = 0;

            for (var d = 0; d < max_d; d++) {
              // Walk the front path one step.
              for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
                var k1_offset = v_offset + k1;
                var x1;

                if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {
                  x1 = v1[k1_offset + 1];
                } else {
                  x1 = v1[k1_offset - 1] + 1;
                }

                var y1 = x1 - k1;

                while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {
                  x1++;
                  y1++;
                }

                v1[k1_offset] = x1;

                if (x1 > text1_length) {
                  // Ran off the right of the graph.
                  k1end += 2;
                } else if (y1 > text2_length) {
                  // Ran off the bottom of the graph.
                  k1start += 2;
                } else if (front) {
                  var k2_offset = v_offset + delta - k1;

                  if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
                    // Mirror x2 onto top-left coordinate system.
                    var x2 = text1_length - v2[k2_offset];

                    if (x1 >= x2) {
                      // Overlap detected.
                      return diff_bisectSplit_(text1, text2, x1, y1);
                    }
                  }
                }
              } // Walk the reverse path one step.


              for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
                var k2_offset = v_offset + k2;
                var x2;

                if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {
                  x2 = v2[k2_offset + 1];
                } else {
                  x2 = v2[k2_offset - 1] + 1;
                }

                var y2 = x2 - k2;

                while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {
                  x2++;
                  y2++;
                }

                v2[k2_offset] = x2;

                if (x2 > text1_length) {
                  // Ran off the left of the graph.
                  k2end += 2;
                } else if (y2 > text2_length) {
                  // Ran off the top of the graph.
                  k2start += 2;
                } else if (!front) {
                  var k1_offset = v_offset + delta - k2;

                  if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
                    var x1 = v1[k1_offset];
                    var y1 = v_offset + x1 - k1_offset; // Mirror x2 onto top-left coordinate system.

                    x2 = text1_length - x2;

                    if (x1 >= x2) {
                      // Overlap detected.
                      return diff_bisectSplit_(text1, text2, x1, y1);
                    }
                  }
                }
              }
            } // Diff took too long and hit the deadline or
            // number of diffs equals number of characters, no commonality at all.


            return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
          }
          /**
           * Given the location of the 'middle snake', split the diff in two parts
           * and recurse.
           * @param {string} text1 Old string to be diffed.
           * @param {string} text2 New string to be diffed.
           * @param {number} x Index of split point in text1.
           * @param {number} y Index of split point in text2.
           * @return {Array} Array of diff tuples.
           */

          function diff_bisectSplit_(text1, text2, x, y) {
            var text1a = text1.substring(0, x);
            var text2a = text2.substring(0, y);
            var text1b = text1.substring(x);
            var text2b = text2.substring(y); // Compute both diffs serially.

            var diffs = diff_main(text1a, text2a);
            var diffsb = diff_main(text1b, text2b);
            return diffs.concat(diffsb);
          }
          /**
           * Determine the common prefix of two strings.
           * @param {string} text1 First string.
           * @param {string} text2 Second string.
           * @return {number} The number of characters common to the start of each
           *     string.
           */

          function diff_commonPrefix(text1, text2) {
            // Quick check for common null cases.
            if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
              return 0;
            } // Binary search.
            // Performance analysis: http://neil.fraser.name/news/2007/10/09/


            var pointermin = 0;
            var pointermax = Math.min(text1.length, text2.length);
            var pointermid = pointermax;
            var pointerstart = 0;

            while (pointermin < pointermid) {
              if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {
                pointermin = pointermid;
                pointerstart = pointermin;
              } else {
                pointermax = pointermid;
              }

              pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
            }

            return pointermid;
          }
          /**
           * Determine the common suffix of two strings.
           * @param {string} text1 First string.
           * @param {string} text2 Second string.
           * @return {number} The number of characters common to the end of each string.
           */

          function diff_commonSuffix(text1, text2) {
            // Quick check for common null cases.
            if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
              return 0;
            } // Binary search.
            // Performance analysis: http://neil.fraser.name/news/2007/10/09/


            var pointermin = 0;
            var pointermax = Math.min(text1.length, text2.length);
            var pointermid = pointermax;
            var pointerend = 0;

            while (pointermin < pointermid) {
              if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {
                pointermin = pointermid;
                pointerend = pointermin;
              } else {
                pointermax = pointermid;
              }

              pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
            }

            return pointermid;
          }
          /**
           * Do the two texts share a substring which is at least half the length of the
           * longer text?
           * This speedup can produce non-minimal diffs.
           * @param {string} text1 First string.
           * @param {string} text2 Second string.
           * @return {Array.<string>} Five element Array, containing the prefix of
           *     text1, the suffix of text1, the prefix of text2, the suffix of
           *     text2 and the common middle.  Or null if there was no match.
           */

          function diff_halfMatch_(text1, text2) {
            var longtext = text1.length > text2.length ? text1 : text2;
            var shorttext = text1.length > text2.length ? text2 : text1;

            if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
              return null; // Pointless.
            }
            /**
             * Does a substring of shorttext exist within longtext such that the substring
             * is at least half the length of longtext?
             * Closure, but does not reference any external variables.
             * @param {string} longtext Longer string.
             * @param {string} shorttext Shorter string.
             * @param {number} i Start index of quarter length substring within longtext.
             * @return {Array.<string>} Five element Array, containing the prefix of
             *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
             *     of shorttext and the common middle.  Or null if there was no match.
             * @private
             */


            function diff_halfMatchI_(longtext, shorttext, i) {
              // Start with a 1/4 length substring at position i as a seed.
              var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
              var j = -1;
              var best_common = '';
              var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;

              while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
                var prefixLength = diff_commonPrefix(longtext.substring(i), shorttext.substring(j));
                var suffixLength = diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));

                if (best_common.length < suffixLength + prefixLength) {
                  best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);
                  best_longtext_a = longtext.substring(0, i - suffixLength);
                  best_longtext_b = longtext.substring(i + prefixLength);
                  best_shorttext_a = shorttext.substring(0, j - suffixLength);
                  best_shorttext_b = shorttext.substring(j + prefixLength);
                }
              }

              if (best_common.length * 2 >= longtext.length) {
                return [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];
              } else {
                return null;
              }
            } // First check if the second quarter is the seed for a half-match.


            var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4)); // Check again based on the third quarter.

            var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));
            var hm;

            if (!hm1 && !hm2) {
              return null;
            } else if (!hm2) {
              hm = hm1;
            } else if (!hm1) {
              hm = hm2;
            } else {
              // Both matched.  Select the longest.
              hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
            } // A half-match was found, sort out the return data.


            var text1_a, text1_b, text2_a, text2_b;

            if (text1.length > text2.length) {
              text1_a = hm[0];
              text1_b = hm[1];
              text2_a = hm[2];
              text2_b = hm[3];
            } else {
              text2_a = hm[0];
              text2_b = hm[1];
              text1_a = hm[2];
              text1_b = hm[3];
            }

            var mid_common = hm[4];
            return [text1_a, text1_b, text2_a, text2_b, mid_common];
          }
          /**
           * Reorder and merge like edit sections.  Merge equalities.
           * Any edit section can move as long as it doesn't cross an equality.
           * @param {Array} diffs Array of diff tuples.
           */

          function diff_cleanupMerge(diffs) {
            diffs.push([DIFF_EQUAL, '']); // Add a dummy entry at the end.

            var pointer = 0;
            var count_delete = 0;
            var count_insert = 0;
            var text_delete = '';
            var text_insert = '';
            var commonlength;

            while (pointer < diffs.length) {
              switch (diffs[pointer][0]) {
                case DIFF_INSERT:
                  count_insert++;
                  text_insert += diffs[pointer][1];
                  pointer++;
                  break;

                case DIFF_DELETE:
                  count_delete++;
                  text_delete += diffs[pointer][1];
                  pointer++;
                  break;

                case DIFF_EQUAL:
                  // Upon reaching an equality, check for prior redundancies.
                  if (count_delete + count_insert > 1) {
                    if (count_delete !== 0 && count_insert !== 0) {
                      // Factor out any common prefixies.
                      commonlength = diff_commonPrefix(text_insert, text_delete);

                      if (commonlength !== 0) {
                        if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {
                          diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);
                        } else {
                          diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);
                          pointer++;
                        }

                        text_insert = text_insert.substring(commonlength);
                        text_delete = text_delete.substring(commonlength);
                      } // Factor out any common suffixies.


                      commonlength = diff_commonSuffix(text_insert, text_delete);

                      if (commonlength !== 0) {
                        diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
                        text_insert = text_insert.substring(0, text_insert.length - commonlength);
                        text_delete = text_delete.substring(0, text_delete.length - commonlength);
                      }
                    } // Delete the offending records and add the merged ones.


                    if (count_delete === 0) {
                      diffs.splice(pointer - count_insert, count_delete + count_insert, [DIFF_INSERT, text_insert]);
                    } else if (count_insert === 0) {
                      diffs.splice(pointer - count_delete, count_delete + count_insert, [DIFF_DELETE, text_delete]);
                    } else {
                      diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);
                    }

                    pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
                  } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
                    // Merge this equality with the previous one.
                    diffs[pointer - 1][1] += diffs[pointer][1];
                    diffs.splice(pointer, 1);
                  } else {
                    pointer++;
                  }

                  count_insert = 0;
                  count_delete = 0;
                  text_delete = '';
                  text_insert = '';
                  break;
              }
            }

            if (diffs[diffs.length - 1][1] === '') {
              diffs.pop(); // Remove the dummy entry at the end.
            } // Second pass: look for single edits surrounded on both sides by equalities
            // which can be shifted sideways to eliminate an equality.
            // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC


            var changes = false;
            pointer = 1; // Intentionally ignore the first and last element (don't need checking).

            while (pointer < diffs.length - 1) {
              if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
                // This is a single edit surrounded by equalities.
                if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
                  // Shift the edit over the previous equality.
                  diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);
                  diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
                  diffs.splice(pointer - 1, 1);
                  changes = true;
                } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {
                  // Shift the edit over the next equality.
                  diffs[pointer - 1][1] += diffs[pointer + 1][1];
                  diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
                  diffs.splice(pointer + 1, 1);
                  changes = true;
                }
              }

              pointer++;
            } // If shifts were made, the diff needs reordering and another shift sweep.


            if (changes) {
              diff_cleanupMerge(diffs);
            }
          }
          var diff = diff_main;
          diff.INSERT = DIFF_INSERT;
          diff.DELETE = DIFF_DELETE;
          diff.EQUAL = DIFF_EQUAL;
          module.exports = diff;
          /*
           * Modify a diff such that the cursor position points to the start of a change:
           * E.g.
           *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)
           *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]
           *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)
           *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]
           *
           * @param {Array} diffs Array of diff tuples
           * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
           * @return {Array} A tuple [cursor location in the modified diff, modified diff]
           */

          function cursor_normalize_diff(diffs, cursor_pos) {
            if (cursor_pos === 0) {
              return [DIFF_EQUAL, diffs];
            }

            for (var current_pos = 0, i = 0; i < diffs.length; i++) {
              var d = diffs[i];

              if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
                var next_pos = current_pos + d[1].length;

                if (cursor_pos === next_pos) {
                  return [i + 1, diffs];
                } else if (cursor_pos < next_pos) {
                  // copy to prevent side effects
                  diffs = diffs.slice(); // split d into two diff changes

                  var split_pos = cursor_pos - current_pos;
                  var d_left = [d[0], d[1].slice(0, split_pos)];
                  var d_right = [d[0], d[1].slice(split_pos)];
                  diffs.splice(i, 1, d_left, d_right);
                  return [i + 1, diffs];
                } else {
                  current_pos = next_pos;
                }
              }
            }

            throw new Error('cursor_pos is out of bounds!');
          }
          /*
           * Modify a diff such that the edit position is "shifted" to the proposed edit location (cursor_position).
           *
           * Case 1)
           *   Check if a naive shift is possible:
           *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)
           *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result
           * Case 2)
           *   Check if the following shifts are possible:
           *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']
           *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']
           *         ^            ^
           *         d          d_next
           *
           * @param {Array} diffs Array of diff tuples
           * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
           * @return {Array} Array of diff tuples
           */


          function fix_cursor(diffs, cursor_pos) {
            var norm = cursor_normalize_diff(diffs, cursor_pos);
            var ndiffs = norm[1];
            var cursor_pointer = norm[0];
            var d = ndiffs[cursor_pointer];
            var d_next = ndiffs[cursor_pointer + 1];

            if (d == null) {
              // Text was deleted from end of original string,
              // cursor is now out of bounds in new string
              return diffs;
            } else if (d[0] !== DIFF_EQUAL) {
              // A modification happened at the cursor location.
              // This is the expected outcome, so we can return the original diff.
              return diffs;
            } else {
              if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
                // Case 1)
                // It is possible to perform a naive shift
                ndiffs.splice(cursor_pointer, 2, d_next, d);
                return merge_tuples(ndiffs, cursor_pointer, 2);
              } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
                // Case 2)
                // d[1] is a prefix of d_next[1]
                // We can assume that d_next[0] !== 0, since d[0] === 0
                // Shift edit locations..
                ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);
                var suffix = d_next[1].slice(d[1].length);

                if (suffix.length > 0) {
                  ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);
                }

                return merge_tuples(ndiffs, cursor_pointer, 3);
              } else {
                // Not possible to perform any modification
                return diffs;
              }
            }
          }
          /*
           * Check diff did not split surrogate pairs.
           * Ex. [0, '\uD83D'], [-1, '\uDC36'], [1, '\uDC2F'] -> [-1, '\uD83D\uDC36'], [1, '\uD83D\uDC2F']
           *     '\uD83D\uDC36' === '🐶', '\uD83D\uDC2F' === '🐯'
           *
           * @param {Array} diffs Array of diff tuples
           * @return {Array} Array of diff tuples
           */


          function fix_emoji(diffs) {
            var compact = false;

            var starts_with_pair_end = function starts_with_pair_end(str) {
              return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;
            };

            var ends_with_pair_start = function ends_with_pair_start(str) {
              return str.charCodeAt(str.length - 1) >= 0xD800 && str.charCodeAt(str.length - 1) <= 0xDBFF;
            };

            for (var i = 2; i < diffs.length; i += 1) {
              if (diffs[i - 2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i - 2][1]) && diffs[i - 1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i - 1][1]) && diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {
                compact = true;
                diffs[i - 1][1] = diffs[i - 2][1].slice(-1) + diffs[i - 1][1];
                diffs[i][1] = diffs[i - 2][1].slice(-1) + diffs[i][1];
                diffs[i - 2][1] = diffs[i - 2][1].slice(0, -1);
              }
            }

            if (!compact) {
              return diffs;
            }

            var fixed_diffs = [];

            for (var i = 0; i < diffs.length; i += 1) {
              if (diffs[i][1].length > 0) {
                fixed_diffs.push(diffs[i]);
              }
            }

            return fixed_diffs;
          }
          /*
           * Try to merge tuples with their neigbors in a given range.
           * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']
           *
           * @param {Array} diffs Array of diff tuples.
           * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).
           * @param {Int} length Number of consecutive elements to check.
           * @return {Array} Array of merged diff tuples.
           */


          function merge_tuples(diffs, start, length) {
            // Check from (start-1) to (start+length).
            for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {
              if (i + 1 < diffs.length) {
                var left_d = diffs[i];
                var right_d = diffs[i + 1];

                if (left_d[0] === right_d[1]) {
                  diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);
                }
              }
            }

            return diffs;
          }
          /***/

        },
        /* 52 */

        /***/
        function (module, exports) {
          exports = module.exports = typeof Object.keys === 'function' ? Object.keys : shim;
          exports.shim = shim;

          function shim(obj) {
            var keys = [];

            for (var key in obj) {
              keys.push(key);
            }

            return keys;
          }
          /***/

        },
        /* 53 */

        /***/
        function (module, exports) {
          var supportsArgumentsClass = function () {
            return Object.prototype.toString.call(arguments);
          }() == '[object Arguments]';

          exports = module.exports = supportsArgumentsClass ? supported : unsupported;
          exports.supported = supported;

          function supported(object) {
            return Object.prototype.toString.call(object) == '[object Arguments]';
          }
          exports.unsupported = unsupported;

          function unsupported(object) {
            return object && _typeof(object) == 'object' && typeof object.length == 'number' && Object.prototype.hasOwnProperty.call(object, 'callee') && !Object.prototype.propertyIsEnumerable.call(object, 'callee') || false;
          }
          /***/
        },
        /* 54 */

        /***/
        function (module, exports) {

          var has = Object.prototype.hasOwnProperty,
              prefix = '~';
          /**
           * Constructor to create a storage for our `EE` objects.
           * An `Events` instance is a plain object whose properties are event names.
           *
           * @constructor
           * @api private
           */

          function Events() {} //
          // We try to not inherit from `Object.prototype`. In some engines creating an
          // instance in this way is faster than calling `Object.create(null)` directly.
          // If `Object.create(null)` is not supported we prefix the event names with a
          // character to make sure that the built-in object properties are not
          // overridden or used as an attack vector.
          //


          if (Object.create) {
            Events.prototype = Object.create(null); //
            // This hack is needed because the `__proto__` property is still inherited in
            // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
            //

            if (!new Events().__proto__) prefix = false;
          }
          /**
           * Representation of a single event listener.
           *
           * @param {Function} fn The listener function.
           * @param {Mixed} context The context to invoke the listener with.
           * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
           * @constructor
           * @api private
           */


          function EE(fn, context, once) {
            this.fn = fn;
            this.context = context;
            this.once = once || false;
          }
          /**
           * Minimal `EventEmitter` interface that is molded against the Node.js
           * `EventEmitter` interface.
           *
           * @constructor
           * @api public
           */


          function EventEmitter() {
            this._events = new Events();
            this._eventsCount = 0;
          }
          /**
           * Return an array listing the events for which the emitter has registered
           * listeners.
           *
           * @returns {Array}
           * @api public
           */


          EventEmitter.prototype.eventNames = function eventNames() {
            var names = [],
                events,
                name;
            if (this._eventsCount === 0) return names;

            for (name in events = this._events) {
              if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
            }

            if (Object.getOwnPropertySymbols) {
              return names.concat(Object.getOwnPropertySymbols(events));
            }

            return names;
          };
          /**
           * Return the listeners registered for a given event.
           *
           * @param {String|Symbol} event The event name.
           * @param {Boolean} exists Only check if there are listeners.
           * @returns {Array|Boolean}
           * @api public
           */


          EventEmitter.prototype.listeners = function listeners(event, exists) {
            var evt = prefix ? prefix + event : event,
                available = this._events[evt];
            if (exists) return !!available;
            if (!available) return [];
            if (available.fn) return [available.fn];

            for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
              ee[i] = available[i].fn;
            }

            return ee;
          };
          /**
           * Calls each of the listeners registered for a given event.
           *
           * @param {String|Symbol} event The event name.
           * @returns {Boolean} `true` if the event had listeners, else `false`.
           * @api public
           */


          EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
            var evt = prefix ? prefix + event : event;
            if (!this._events[evt]) return false;
            var listeners = this._events[evt],
                len = arguments.length,
                args,
                i;

            if (listeners.fn) {
              if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

              switch (len) {
                case 1:
                  return listeners.fn.call(listeners.context), true;

                case 2:
                  return listeners.fn.call(listeners.context, a1), true;

                case 3:
                  return listeners.fn.call(listeners.context, a1, a2), true;

                case 4:
                  return listeners.fn.call(listeners.context, a1, a2, a3), true;

                case 5:
                  return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

                case 6:
                  return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
              }

              for (i = 1, args = new Array(len - 1); i < len; i++) {
                args[i - 1] = arguments[i];
              }

              listeners.fn.apply(listeners.context, args);
            } else {
              var length = listeners.length,
                  j;

              for (i = 0; i < length; i++) {
                if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

                switch (len) {
                  case 1:
                    listeners[i].fn.call(listeners[i].context);
                    break;

                  case 2:
                    listeners[i].fn.call(listeners[i].context, a1);
                    break;

                  case 3:
                    listeners[i].fn.call(listeners[i].context, a1, a2);
                    break;

                  case 4:
                    listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                    break;

                  default:
                    if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                      args[j - 1] = arguments[j];
                    }
                    listeners[i].fn.apply(listeners[i].context, args);
                }
              }
            }

            return true;
          };
          /**
           * Add a listener for a given event.
           *
           * @param {String|Symbol} event The event name.
           * @param {Function} fn The listener function.
           * @param {Mixed} [context=this] The context to invoke the listener with.
           * @returns {EventEmitter} `this`.
           * @api public
           */


          EventEmitter.prototype.on = function on(event, fn, context) {
            var listener = new EE(fn, context || this),
                evt = prefix ? prefix + event : event;
            if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;else if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];
            return this;
          };
          /**
           * Add a one-time listener for a given event.
           *
           * @param {String|Symbol} event The event name.
           * @param {Function} fn The listener function.
           * @param {Mixed} [context=this] The context to invoke the listener with.
           * @returns {EventEmitter} `this`.
           * @api public
           */


          EventEmitter.prototype.once = function once(event, fn, context) {
            var listener = new EE(fn, context || this, true),
                evt = prefix ? prefix + event : event;
            if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;else if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];
            return this;
          };
          /**
           * Remove the listeners of a given event.
           *
           * @param {String|Symbol} event The event name.
           * @param {Function} fn Only remove the listeners that match this function.
           * @param {Mixed} context Only remove the listeners that have this context.
           * @param {Boolean} once Only remove one-time listeners.
           * @returns {EventEmitter} `this`.
           * @api public
           */


          EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
            var evt = prefix ? prefix + event : event;
            if (!this._events[evt]) return this;

            if (!fn) {
              if (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];
              return this;
            }

            var listeners = this._events[evt];

            if (listeners.fn) {
              if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
                if (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];
              }
            } else {
              for (var i = 0, events = [], length = listeners.length; i < length; i++) {
                if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
                  events.push(listeners[i]);
                }
              } //
              // Reset the array, or remove it completely if we have no more listeners.
              //


              if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else if (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];
            }

            return this;
          };
          /**
           * Remove all listeners, or those of the specified event.
           *
           * @param {String|Symbol} [event] The event name.
           * @returns {EventEmitter} `this`.
           * @api public
           */


          EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
            var evt;

            if (event) {
              evt = prefix ? prefix + event : event;

              if (this._events[evt]) {
                if (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];
              }
            } else {
              this._events = new Events();
              this._eventsCount = 0;
            }

            return this;
          }; //
          // Alias methods names because people roll like that.
          //


          EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
          EventEmitter.prototype.addListener = EventEmitter.prototype.on; //
          // This function doesn't apply anymore.
          //

          EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
            return this;
          }; //
          // Expose the prefix.
          //


          EventEmitter.prefixed = prefix; //
          // Allow `EventEmitter` to be imported as module namespace.
          //

          EventEmitter.EventEmitter = EventEmitter; //
          // Expose the module.
          //

          if ('undefined' !== typeof module) {
            module.exports = EventEmitter;
          }
          /***/

        },
        /* 55 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;

          var _typeof$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
            return _typeof(obj);
          } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof(obj);
          };

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _extend2 = __webpack_require__(3);

          var _extend3 = _interopRequireDefault(_extend2);

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _logger = __webpack_require__(10);

          var _logger2 = _interopRequireDefault(_logger);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          var _align = __webpack_require__(36);

          var _background = __webpack_require__(37);

          var _code = __webpack_require__(13);

          var _code2 = _interopRequireDefault(_code);

          var _color = __webpack_require__(26);

          var _direction = __webpack_require__(38);

          var _font = __webpack_require__(39);

          var _size = __webpack_require__(40);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var debug = (0, _logger2.default)('quill:clipboard');
          var DOM_KEY = '__ql-matcher';
          var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];
          var ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function (memo, attr) {
            memo[attr.keyName] = attr;
            return memo;
          }, {});
          var STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function (memo, attr) {
            memo[attr.keyName] = attr;
            return memo;
          }, {});

          var Clipboard = function (_Module) {
            _inherits(Clipboard, _Module);

            function Clipboard(quill, options) {
              _classCallCheck(this, Clipboard);

              var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));

              _this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));

              _this.container = _this.quill.addContainer('ql-clipboard');

              _this.container.setAttribute('contenteditable', true);

              _this.container.setAttribute('tabindex', -1);

              _this.matchers = [];
              CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (_ref) {
                var _ref2 = _slicedToArray(_ref, 2),
                    selector = _ref2[0],
                    matcher = _ref2[1];

                if (!options.matchVisual && matcher === matchSpacing) return;

                _this.addMatcher(selector, matcher);
              });
              return _this;
            }

            _createClass(Clipboard, [{
              key: 'addMatcher',
              value: function addMatcher(selector, matcher) {
                this.matchers.push([selector, matcher]);
              }
            }, {
              key: 'convert',
              value: function convert(html) {
                if (typeof html === 'string') {
                  this.container.innerHTML = html.replace(/\>\r?\n +\</g, '><'); // Remove spaces between tags

                  return this.convert();
                }

                var formats = this.quill.getFormat(this.quill.selection.savedRange.index);

                if (formats[_code2.default.blotName]) {
                  var text = this.container.innerText;
                  this.container.innerHTML = '';
                  return new _quillDelta2.default().insert(text, _defineProperty({}, _code2.default.blotName, formats[_code2.default.blotName]));
                }

                var _prepareMatching = this.prepareMatching(),
                    _prepareMatching2 = _slicedToArray(_prepareMatching, 2),
                    elementMatchers = _prepareMatching2[0],
                    textMatchers = _prepareMatching2[1];

                var delta = traverse(this.container, elementMatchers, textMatchers); // Remove trailing newline

                if (deltaEndsWith(delta, '\n') && delta.ops[delta.ops.length - 1].attributes == null) {
                  delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
                }

                debug.log('convert', this.container.innerHTML, delta);
                this.container.innerHTML = '';
                return delta;
              }
            }, {
              key: 'dangerouslyPasteHTML',
              value: function dangerouslyPasteHTML(index, html) {
                var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;

                if (typeof index === 'string') {
                  this.quill.setContents(this.convert(index), html);
                  this.quill.setSelection(0, _quill2.default.sources.SILENT);
                } else {
                  var paste = this.convert(html);
                  this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);
                  this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);
                }
              }
            }, {
              key: 'onPaste',
              value: function onPaste(e) {
                var _this2 = this;

                if (e.defaultPrevented || !this.quill.isEnabled()) return;
                var range = this.quill.getSelection();
                var delta = new _quillDelta2.default().retain(range.index);
                var scrollTop = this.quill.scrollingContainer.scrollTop;
                this.container.focus();
                this.quill.selection.update(_quill2.default.sources.SILENT);
                setTimeout(function () {
                  delta = delta.concat(_this2.convert()).delete(range.length);

                  _this2.quill.updateContents(delta, _quill2.default.sources.USER); // range.length contributes to delta.length()


                  _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);

                  _this2.quill.scrollingContainer.scrollTop = scrollTop;

                  _this2.quill.focus();
                }, 1);
              }
            }, {
              key: 'prepareMatching',
              value: function prepareMatching() {
                var _this3 = this;

                var elementMatchers = [],
                    textMatchers = [];
                this.matchers.forEach(function (pair) {
                  var _pair = _slicedToArray(pair, 2),
                      selector = _pair[0],
                      matcher = _pair[1];

                  switch (selector) {
                    case Node.TEXT_NODE:
                      textMatchers.push(matcher);
                      break;

                    case Node.ELEMENT_NODE:
                      elementMatchers.push(matcher);
                      break;

                    default:
                      [].forEach.call(_this3.container.querySelectorAll(selector), function (node) {
                        // TODO use weakmap
                        node[DOM_KEY] = node[DOM_KEY] || [];
                        node[DOM_KEY].push(matcher);
                      });
                      break;
                  }
                });
                return [elementMatchers, textMatchers];
              }
            }]);

            return Clipboard;
          }(_module2.default);

          Clipboard.DEFAULTS = {
            matchers: [],
            matchVisual: true
          };

          function applyFormat(delta, format, value) {
            if ((typeof format === 'undefined' ? 'undefined' : _typeof$1(format)) === 'object') {
              return Object.keys(format).reduce(function (delta, key) {
                return applyFormat(delta, key, format[key]);
              }, delta);
            } else {
              return delta.reduce(function (delta, op) {
                if (op.attributes && op.attributes[format]) {
                  return delta.push(op);
                } else {
                  return delta.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));
                }
              }, new _quillDelta2.default());
            }
          }

          function computeStyle(node) {
            if (node.nodeType !== Node.ELEMENT_NODE) return {};
            var DOM_KEY = '__ql-computed-style';
            return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));
          }

          function deltaEndsWith(delta, text) {
            var endText = "";

            for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {
              var op = delta.ops[i];
              if (typeof op.insert !== 'string') break;
              endText = op.insert + endText;
            }

            return endText.slice(-1 * text.length) === text;
          }

          function isLine(node) {
            if (node.childNodes.length === 0) return false; // Exclude embed blocks

            var style = computeStyle(node);
            return ['block', 'list-item'].indexOf(style.display) > -1;
          }

          function traverse(node, elementMatchers, textMatchers) {
            // Post-order
            if (node.nodeType === node.TEXT_NODE) {
              return textMatchers.reduce(function (delta, matcher) {
                return matcher(node, delta);
              }, new _quillDelta2.default());
            } else if (node.nodeType === node.ELEMENT_NODE) {
              return [].reduce.call(node.childNodes || [], function (delta, childNode) {
                var childrenDelta = traverse(childNode, elementMatchers, textMatchers);

                if (childNode.nodeType === node.ELEMENT_NODE) {
                  childrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {
                    return matcher(childNode, childrenDelta);
                  }, childrenDelta);
                  childrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {
                    return matcher(childNode, childrenDelta);
                  }, childrenDelta);
                }

                return delta.concat(childrenDelta);
              }, new _quillDelta2.default());
            } else {
              return new _quillDelta2.default();
            }
          }

          function matchAlias(format, node, delta) {
            return applyFormat(delta, format, true);
          }

          function matchAttributor(node, delta) {
            var attributes = _parchment2.default.Attributor.Attribute.keys(node);

            var classes = _parchment2.default.Attributor.Class.keys(node);

            var styles = _parchment2.default.Attributor.Style.keys(node);

            var formats = {};
            attributes.concat(classes).concat(styles).forEach(function (name) {
              var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);

              if (attr != null) {
                formats[attr.attrName] = attr.value(node);
                if (formats[attr.attrName]) return;
              }

              attr = ATTRIBUTE_ATTRIBUTORS[name];

              if (attr != null && (attr.attrName === name || attr.keyName === name)) {
                formats[attr.attrName] = attr.value(node) || undefined;
              }

              attr = STYLE_ATTRIBUTORS[name];

              if (attr != null && (attr.attrName === name || attr.keyName === name)) {
                attr = STYLE_ATTRIBUTORS[name];
                formats[attr.attrName] = attr.value(node) || undefined;
              }
            });

            if (Object.keys(formats).length > 0) {
              delta = applyFormat(delta, formats);
            }

            return delta;
          }

          function matchBlot(node, delta) {
            var match = _parchment2.default.query(node);

            if (match == null) return delta;

            if (match.prototype instanceof _parchment2.default.Embed) {
              var embed = {};
              var value = match.value(node);

              if (value != null) {
                embed[match.blotName] = value;
                delta = new _quillDelta2.default().insert(embed, match.formats(node));
              }
            } else if (typeof match.formats === 'function') {
              delta = applyFormat(delta, match.blotName, match.formats(node));
            }

            return delta;
          }

          function matchBreak(node, delta) {
            if (!deltaEndsWith(delta, '\n')) {
              delta.insert('\n');
            }

            return delta;
          }

          function matchIgnore() {
            return new _quillDelta2.default();
          }

          function matchIndent(node, delta) {
            var match = _parchment2.default.query(node);

            if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\n')) {
              return delta;
            }

            var indent = -1,
                parent = node.parentNode;

            while (!parent.classList.contains('ql-clipboard')) {
              if ((_parchment2.default.query(parent) || {}).blotName === 'list') {
                indent += 1;
              }

              parent = parent.parentNode;
            }

            if (indent <= 0) return delta;
            return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, {
              indent: indent
            }));
          }

          function matchNewline(node, delta) {
            if (!deltaEndsWith(delta, '\n')) {
              if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
                delta.insert('\n');
              }
            }

            return delta;
          }

          function matchSpacing(node, delta) {
            if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\n\n')) {
              var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);

              if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
                delta.insert('\n');
              }
            }

            return delta;
          }

          function matchStyles(node, delta) {
            var formats = {};
            var style = node.style || {};

            if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {
              formats.italic = true;
            }

            if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') || parseInt(computeStyle(node).fontWeight) >= 700)) {
              formats.bold = true;
            }

            if (Object.keys(formats).length > 0) {
              delta = applyFormat(delta, formats);
            }

            if (parseFloat(style.textIndent || 0) > 0) {
              // Could be 0.5in
              delta = new _quillDelta2.default().insert('\t').concat(delta);
            }

            return delta;
          }

          function matchText(node, delta) {
            var text = node.data; // Word represents empty line with <o:p>&nbsp;</o:p>

            if (node.parentNode.tagName === 'O:P') {
              return delta.insert(text.trim());
            }

            if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {
              return delta;
            }

            if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {
              // eslint-disable-next-line func-style
              var replacer = function replacer(collapse, match) {
                match = match.replace(/[^\u00a0]/g, ''); // \u00a0 is nbsp;

                return match.length < 1 && collapse ? ' ' : match;
              };

              text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
              text = text.replace(/\s\s+/g, replacer.bind(replacer, true)); // collapse whitespace

              if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
                text = text.replace(/^\s+/, replacer.bind(replacer, false));
              }

              if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
                text = text.replace(/\s+$/, replacer.bind(replacer, false));
              }
            }

            return delta.insert(text);
          }

          exports.default = Clipboard;
          exports.matchAttributor = matchAttributor;
          exports.matchBlot = matchBlot;
          exports.matchNewline = matchNewline;
          exports.matchSpacing = matchSpacing;
          exports.matchText = matchText;
          /***/
        },
        /* 56 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Bold = function (_Inline) {
            _inherits(Bold, _Inline);

            function Bold() {
              _classCallCheck(this, Bold);

              return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));
            }

            _createClass(Bold, [{
              key: 'optimize',
              value: function optimize(context) {
                _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this, context);

                if (this.domNode.tagName !== this.statics.tagName[0]) {
                  this.replaceWith(this.statics.blotName);
                }
              }
            }], [{
              key: 'create',
              value: function create() {
                return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);
              }
            }, {
              key: 'formats',
              value: function formats() {
                return true;
              }
            }]);

            return Bold;
          }(_inline2.default);

          Bold.blotName = 'bold';
          Bold.tagName = ['STRONG', 'B'];
          exports.default = Bold;
          /***/
        },
        /* 57 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.addControls = exports.default = undefined;

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _quillDelta = __webpack_require__(2);

          var _quillDelta2 = _interopRequireDefault(_quillDelta);

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _logger = __webpack_require__(10);

          var _logger2 = _interopRequireDefault(_logger);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var debug = (0, _logger2.default)('quill:toolbar');

          var Toolbar = function (_Module) {
            _inherits(Toolbar, _Module);

            function Toolbar(quill, options) {
              _classCallCheck(this, Toolbar);

              var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));

              if (Array.isArray(_this.options.container)) {
                var container = document.createElement('div');
                addControls(container, _this.options.container);
                quill.container.parentNode.insertBefore(container, quill.container);
                _this.container = container;
              } else if (typeof _this.options.container === 'string') {
                _this.container = document.querySelector(_this.options.container);
              } else {
                _this.container = _this.options.container;
              }

              if (!(_this.container instanceof HTMLElement)) {
                var _ret;

                return _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);
              }

              _this.container.classList.add('ql-toolbar');

              _this.controls = [];
              _this.handlers = {};
              Object.keys(_this.options.handlers).forEach(function (format) {
                _this.addHandler(format, _this.options.handlers[format]);
              });
              [].forEach.call(_this.container.querySelectorAll('button, select'), function (input) {
                _this.attach(input);
              });

              _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (type, range) {
                if (type === _quill2.default.events.SELECTION_CHANGE) {
                  _this.update(range);
                }
              });

              _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
                var _this$quill$selection = _this.quill.selection.getRange(),
                    _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),
                    range = _this$quill$selection2[0]; // quill.getSelection triggers update


                _this.update(range);
              });

              return _this;
            }

            _createClass(Toolbar, [{
              key: 'addHandler',
              value: function addHandler(format, handler) {
                this.handlers[format] = handler;
              }
            }, {
              key: 'attach',
              value: function attach(input) {
                var _this2 = this;

                var format = [].find.call(input.classList, function (className) {
                  return className.indexOf('ql-') === 0;
                });
                if (!format) return;
                format = format.slice('ql-'.length);

                if (input.tagName === 'BUTTON') {
                  input.setAttribute('type', 'button');
                }

                if (this.handlers[format] == null) {
                  if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {
                    debug.warn('ignoring attaching to disabled format', format, input);
                    return;
                  }

                  if (_parchment2.default.query(format) == null) {
                    debug.warn('ignoring attaching to nonexistent format', format, input);
                    return;
                  }
                }

                var eventName = input.tagName === 'SELECT' ? 'change' : 'click';
                input.addEventListener(eventName, function (e) {
                  var value = void 0;

                  if (input.tagName === 'SELECT') {
                    if (input.selectedIndex < 0) return;
                    var selected = input.options[input.selectedIndex];

                    if (selected.hasAttribute('selected')) {
                      value = false;
                    } else {
                      value = selected.value || false;
                    }
                  } else {
                    if (input.classList.contains('ql-active')) {
                      value = false;
                    } else {
                      value = input.value || !input.hasAttribute('value');
                    }

                    e.preventDefault();
                  }

                  _this2.quill.focus();

                  var _quill$selection$getR = _this2.quill.selection.getRange(),
                      _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1),
                      range = _quill$selection$getR2[0];

                  if (_this2.handlers[format] != null) {
                    _this2.handlers[format].call(_this2, value);
                  } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {
                    value = prompt('Enter ' + format);
                    if (!value) return;

                    _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);
                  } else {
                    _this2.quill.format(format, value, _quill2.default.sources.USER);
                  }

                  _this2.update(range);
                }); // TODO use weakmap

                this.controls.push([format, input]);
              }
            }, {
              key: 'update',
              value: function update(range) {
                var formats = range == null ? {} : this.quill.getFormat(range);
                this.controls.forEach(function (pair) {
                  var _pair = _slicedToArray(pair, 2),
                      format = _pair[0],
                      input = _pair[1];

                  if (input.tagName === 'SELECT') {
                    var option = void 0;

                    if (range == null) {
                      option = null;
                    } else if (formats[format] == null) {
                      option = input.querySelector('option[selected]');
                    } else if (!Array.isArray(formats[format])) {
                      var value = formats[format];

                      if (typeof value === 'string') {
                        value = value.replace(/\"/g, '\\"');
                      }

                      option = input.querySelector('option[value="' + value + '"]');
                    }

                    if (option == null) {
                      input.value = ''; // TODO make configurable?

                      input.selectedIndex = -1;
                    } else {
                      option.selected = true;
                    }
                  } else {
                    if (range == null) {
                      input.classList.remove('ql-active');
                    } else if (input.hasAttribute('value')) {
                      // both being null should match (default values)
                      // '1' should match with 1 (headers)
                      var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');
                      input.classList.toggle('ql-active', isActive);
                    } else {
                      input.classList.toggle('ql-active', formats[format] != null);
                    }
                  }
                });
              }
            }]);

            return Toolbar;
          }(_module2.default);

          Toolbar.DEFAULTS = {};

          function addButton(container, format, value) {
            var input = document.createElement('button');
            input.setAttribute('type', 'button');
            input.classList.add('ql-' + format);

            if (value != null) {
              input.value = value;
            }

            container.appendChild(input);
          }

          function addControls(container, groups) {
            if (!Array.isArray(groups[0])) {
              groups = [groups];
            }

            groups.forEach(function (controls) {
              var group = document.createElement('span');
              group.classList.add('ql-formats');
              controls.forEach(function (control) {
                if (typeof control === 'string') {
                  addButton(group, control);
                } else {
                  var format = Object.keys(control)[0];
                  var value = control[format];

                  if (Array.isArray(value)) {
                    addSelect(group, format, value);
                  } else {
                    addButton(group, format, value);
                  }
                }
              });
              container.appendChild(group);
            });
          }

          function addSelect(container, format, values) {
            var input = document.createElement('select');
            input.classList.add('ql-' + format);
            values.forEach(function (value) {
              var option = document.createElement('option');

              if (value !== false) {
                option.setAttribute('value', value);
              } else {
                option.setAttribute('selected', 'selected');
              }

              input.appendChild(option);
            });
            container.appendChild(input);
          }

          Toolbar.DEFAULTS = {
            container: null,
            handlers: {
              clean: function clean() {
                var _this3 = this;

                var range = this.quill.getSelection();
                if (range == null) return;

                if (range.length == 0) {
                  var formats = this.quill.getFormat();
                  Object.keys(formats).forEach(function (name) {
                    // Clean functionality in existing apps only clean inline formats
                    if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
                      _this3.quill.format(name, false);
                    }
                  });
                } else {
                  this.quill.removeFormat(range, _quill2.default.sources.USER);
                }
              },
              direction: function direction(value) {
                var align = this.quill.getFormat()['align'];

                if (value === 'rtl' && align == null) {
                  this.quill.format('align', 'right', _quill2.default.sources.USER);
                } else if (!value && align === 'right') {
                  this.quill.format('align', false, _quill2.default.sources.USER);
                }

                this.quill.format('direction', value, _quill2.default.sources.USER);
              },
              indent: function indent(value) {
                var range = this.quill.getSelection();
                var formats = this.quill.getFormat(range);
                var indent = parseInt(formats.indent || 0);

                if (value === '+1' || value === '-1') {
                  var modifier = value === '+1' ? 1 : -1;
                  if (formats.direction === 'rtl') modifier *= -1;
                  this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);
                }
              },
              link: function link(value) {
                if (value === true) {
                  value = prompt('Enter link URL:');
                }

                this.quill.format('link', value, _quill2.default.sources.USER);
              },
              list: function list(value) {
                var range = this.quill.getSelection();
                var formats = this.quill.getFormat(range);

                if (value === 'check') {
                  if (formats['list'] === 'checked' || formats['list'] === 'unchecked') {
                    this.quill.format('list', false, _quill2.default.sources.USER);
                  } else {
                    this.quill.format('list', 'unchecked', _quill2.default.sources.USER);
                  }
                } else {
                  this.quill.format('list', value, _quill2.default.sources.USER);
                }
              }
            }
          };
          exports.default = Toolbar;
          exports.addControls = addControls;
          /***/
        },
        /* 58 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"></polyline> <polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>";
          /***/
        },
        /* 59 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _picker = __webpack_require__(28);

          var _picker2 = _interopRequireDefault(_picker);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var ColorPicker = function (_Picker) {
            _inherits(ColorPicker, _Picker);

            function ColorPicker(select, label) {
              _classCallCheck(this, ColorPicker);

              var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));

              _this.label.innerHTML = label;

              _this.container.classList.add('ql-color-picker');

              [].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function (item) {
                item.classList.add('ql-primary');
              });
              return _this;
            }

            _createClass(ColorPicker, [{
              key: 'buildItem',
              value: function buildItem(option) {
                var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);

                item.style.backgroundColor = option.getAttribute('value') || '';
                return item;
              }
            }, {
              key: 'selectItem',
              value: function selectItem(item, trigger) {
                _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);

                var colorLabel = this.label.querySelector('.ql-color-label');
                var value = item ? item.getAttribute('data-value') || '' : '';

                if (colorLabel) {
                  if (colorLabel.tagName === 'line') {
                    colorLabel.style.stroke = value;
                  } else {
                    colorLabel.style.fill = value;
                  }
                }
              }
            }]);

            return ColorPicker;
          }(_picker2.default);

          exports.default = ColorPicker;
          /***/
        },
        /* 60 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _picker = __webpack_require__(28);

          var _picker2 = _interopRequireDefault(_picker);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var IconPicker = function (_Picker) {
            _inherits(IconPicker, _Picker);

            function IconPicker(select, icons) {
              _classCallCheck(this, IconPicker);

              var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));

              _this.container.classList.add('ql-icon-picker');

              [].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function (item) {
                item.innerHTML = icons[item.getAttribute('data-value') || ''];
              });
              _this.defaultItem = _this.container.querySelector('.ql-selected');

              _this.selectItem(_this.defaultItem);

              return _this;
            }

            _createClass(IconPicker, [{
              key: 'selectItem',
              value: function selectItem(item, trigger) {
                _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);

                item = item || this.defaultItem;
                this.label.innerHTML = item.innerHTML;
              }
            }]);

            return IconPicker;
          }(_picker2.default);

          exports.default = IconPicker;
          /***/
        },
        /* 61 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          var Tooltip = function () {
            function Tooltip(quill, boundsContainer) {
              var _this = this;

              _classCallCheck(this, Tooltip);

              this.quill = quill;
              this.boundsContainer = boundsContainer || document.body;
              this.root = quill.addContainer('ql-tooltip');
              this.root.innerHTML = this.constructor.TEMPLATE;

              if (this.quill.root === this.quill.scrollingContainer) {
                this.quill.root.addEventListener('scroll', function () {
                  _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';
                });
              }

              this.hide();
            }

            _createClass(Tooltip, [{
              key: 'hide',
              value: function hide() {
                this.root.classList.add('ql-hidden');
              }
            }, {
              key: 'position',
              value: function position(reference) {
                var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2; // root.scrollTop should be 0 if scrollContainer !== root

                var top = reference.bottom + this.quill.root.scrollTop;
                this.root.style.left = left + 'px';
                this.root.style.top = top + 'px';
                this.root.classList.remove('ql-flip');
                var containerBounds = this.boundsContainer.getBoundingClientRect();
                var rootBounds = this.root.getBoundingClientRect();
                var shift = 0;

                if (rootBounds.right > containerBounds.right) {
                  shift = containerBounds.right - rootBounds.right;
                  this.root.style.left = left + shift + 'px';
                }

                if (rootBounds.left < containerBounds.left) {
                  shift = containerBounds.left - rootBounds.left;
                  this.root.style.left = left + shift + 'px';
                }

                if (rootBounds.bottom > containerBounds.bottom) {
                  var height = rootBounds.bottom - rootBounds.top;
                  var verticalShift = reference.bottom - reference.top + height;
                  this.root.style.top = top - verticalShift + 'px';
                  this.root.classList.add('ql-flip');
                }

                return shift;
              }
            }, {
              key: 'show',
              value: function show() {
                this.root.classList.remove('ql-editing');
                this.root.classList.remove('ql-hidden');
              }
            }]);

            return Tooltip;
          }();

          exports.default = Tooltip;
          /***/
        },
        /* 62 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _slicedToArray = function () {
            function sliceIterator(arr, i) {
              var _arr = [];
              var _n = true;
              var _d = false;
              var _e = undefined;

              try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"]) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            return function (arr, i) {
              if (Array.isArray(arr)) {
                return arr;
              } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
              } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
              }
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          var _emitter = __webpack_require__(8);

          var _emitter2 = _interopRequireDefault(_emitter);

          var _base = __webpack_require__(43);

          var _base2 = _interopRequireDefault(_base);

          var _link = __webpack_require__(27);

          var _link2 = _interopRequireDefault(_link);

          var _selection = __webpack_require__(15);

          var _icons = __webpack_require__(41);

          var _icons2 = _interopRequireDefault(_icons);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var TOOLBAR_CONFIG = [[{
            header: ['1', '2', '3', false]
          }], ['bold', 'italic', 'underline', 'link'], [{
            list: 'ordered'
          }, {
            list: 'bullet'
          }], ['clean']];

          var SnowTheme = function (_BaseTheme) {
            _inherits(SnowTheme, _BaseTheme);

            function SnowTheme(quill, options) {
              _classCallCheck(this, SnowTheme);

              if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
                options.modules.toolbar.container = TOOLBAR_CONFIG;
              }

              var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));

              _this.quill.container.classList.add('ql-snow');

              return _this;
            }

            _createClass(SnowTheme, [{
              key: 'extendToolbar',
              value: function extendToolbar(toolbar) {
                toolbar.container.classList.add('ql-snow');
                this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
                this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
                this.tooltip = new SnowTooltip(this.quill, this.options.bounds);

                if (toolbar.container.querySelector('.ql-link')) {
                  this.quill.keyboard.addBinding({
                    key: 'K',
                    shortKey: true
                  }, function (range, context) {
                    toolbar.handlers['link'].call(toolbar, !context.format.link);
                  });
                }
              }
            }]);

            return SnowTheme;
          }(_base2.default);

          SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
            modules: {
              toolbar: {
                handlers: {
                  link: function link(value) {
                    if (value) {
                      var range = this.quill.getSelection();
                      if (range == null || range.length == 0) return;
                      var preview = this.quill.getText(range);

                      if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
                        preview = 'mailto:' + preview;
                      }

                      var tooltip = this.quill.theme.tooltip;
                      tooltip.edit('link', preview);
                    } else {
                      this.quill.format('link', false);
                    }
                  }
                }
              }
            }
          });

          var SnowTooltip = function (_BaseTooltip) {
            _inherits(SnowTooltip, _BaseTooltip);

            function SnowTooltip(quill, bounds) {
              _classCallCheck(this, SnowTooltip);

              var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));

              _this2.preview = _this2.root.querySelector('a.ql-preview');
              return _this2;
            }

            _createClass(SnowTooltip, [{
              key: 'listen',
              value: function listen() {
                var _this3 = this;

                _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);

                this.root.querySelector('a.ql-action').addEventListener('click', function (event) {
                  if (_this3.root.classList.contains('ql-editing')) {
                    _this3.save();
                  } else {
                    _this3.edit('link', _this3.preview.textContent);
                  }

                  event.preventDefault();
                });
                this.root.querySelector('a.ql-remove').addEventListener('click', function (event) {
                  if (_this3.linkRange != null) {
                    var range = _this3.linkRange;

                    _this3.restoreFocus();

                    _this3.quill.formatText(range, 'link', false, _emitter2.default.sources.USER);

                    delete _this3.linkRange;
                  }

                  event.preventDefault();

                  _this3.hide();
                });
                this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function (range, oldRange, source) {
                  if (range == null) return;

                  if (range.length === 0 && source === _emitter2.default.sources.USER) {
                    var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index),
                        _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
                        link = _quill$scroll$descend2[0],
                        offset = _quill$scroll$descend2[1];

                    if (link != null) {
                      _this3.linkRange = new _selection.Range(range.index - offset, link.length());

                      var preview = _link2.default.formats(link.domNode);

                      _this3.preview.textContent = preview;

                      _this3.preview.setAttribute('href', preview);

                      _this3.show();

                      _this3.position(_this3.quill.getBounds(_this3.linkRange));

                      return;
                    }
                  } else {
                    delete _this3.linkRange;
                  }

                  _this3.hide();
                });
              }
            }, {
              key: 'show',
              value: function show() {
                _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);

                this.root.removeAttribute('data-mode');
              }
            }]);

            return SnowTooltip;
          }(_base.BaseTooltip);

          SnowTooltip.TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');
          exports.default = SnowTheme;
          /***/
        },
        /* 63 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _core = __webpack_require__(29);

          var _core2 = _interopRequireDefault(_core);

          var _align = __webpack_require__(36);

          var _direction = __webpack_require__(38);

          var _indent = __webpack_require__(64);

          var _blockquote = __webpack_require__(65);

          var _blockquote2 = _interopRequireDefault(_blockquote);

          var _header = __webpack_require__(66);

          var _header2 = _interopRequireDefault(_header);

          var _list = __webpack_require__(67);

          var _list2 = _interopRequireDefault(_list);

          var _background = __webpack_require__(37);

          var _color = __webpack_require__(26);

          var _font = __webpack_require__(39);

          var _size = __webpack_require__(40);

          var _bold = __webpack_require__(56);

          var _bold2 = _interopRequireDefault(_bold);

          var _italic = __webpack_require__(68);

          var _italic2 = _interopRequireDefault(_italic);

          var _link = __webpack_require__(27);

          var _link2 = _interopRequireDefault(_link);

          var _script = __webpack_require__(69);

          var _script2 = _interopRequireDefault(_script);

          var _strike = __webpack_require__(70);

          var _strike2 = _interopRequireDefault(_strike);

          var _underline = __webpack_require__(71);

          var _underline2 = _interopRequireDefault(_underline);

          var _image = __webpack_require__(72);

          var _image2 = _interopRequireDefault(_image);

          var _video = __webpack_require__(73);

          var _video2 = _interopRequireDefault(_video);

          var _code = __webpack_require__(13);

          var _code2 = _interopRequireDefault(_code);

          var _formula = __webpack_require__(74);

          var _formula2 = _interopRequireDefault(_formula);

          var _syntax = __webpack_require__(75);

          var _syntax2 = _interopRequireDefault(_syntax);

          var _toolbar = __webpack_require__(57);

          var _toolbar2 = _interopRequireDefault(_toolbar);

          var _icons = __webpack_require__(41);

          var _icons2 = _interopRequireDefault(_icons);

          var _picker = __webpack_require__(28);

          var _picker2 = _interopRequireDefault(_picker);

          var _colorPicker = __webpack_require__(59);

          var _colorPicker2 = _interopRequireDefault(_colorPicker);

          var _iconPicker = __webpack_require__(60);

          var _iconPicker2 = _interopRequireDefault(_iconPicker);

          var _tooltip = __webpack_require__(61);

          var _tooltip2 = _interopRequireDefault(_tooltip);

          var _bubble = __webpack_require__(108);

          var _bubble2 = _interopRequireDefault(_bubble);

          var _snow = __webpack_require__(62);

          var _snow2 = _interopRequireDefault(_snow);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          _core2.default.register({
            'attributors/attribute/direction': _direction.DirectionAttribute,
            'attributors/class/align': _align.AlignClass,
            'attributors/class/background': _background.BackgroundClass,
            'attributors/class/color': _color.ColorClass,
            'attributors/class/direction': _direction.DirectionClass,
            'attributors/class/font': _font.FontClass,
            'attributors/class/size': _size.SizeClass,
            'attributors/style/align': _align.AlignStyle,
            'attributors/style/background': _background.BackgroundStyle,
            'attributors/style/color': _color.ColorStyle,
            'attributors/style/direction': _direction.DirectionStyle,
            'attributors/style/font': _font.FontStyle,
            'attributors/style/size': _size.SizeStyle
          }, true);

          _core2.default.register({
            'formats/align': _align.AlignClass,
            'formats/direction': _direction.DirectionClass,
            'formats/indent': _indent.IndentClass,
            'formats/background': _background.BackgroundStyle,
            'formats/color': _color.ColorStyle,
            'formats/font': _font.FontClass,
            'formats/size': _size.SizeClass,
            'formats/blockquote': _blockquote2.default,
            'formats/code-block': _code2.default,
            'formats/header': _header2.default,
            'formats/list': _list2.default,
            'formats/bold': _bold2.default,
            'formats/code': _code.Code,
            'formats/italic': _italic2.default,
            'formats/link': _link2.default,
            'formats/script': _script2.default,
            'formats/strike': _strike2.default,
            'formats/underline': _underline2.default,
            'formats/image': _image2.default,
            'formats/video': _video2.default,
            'formats/list/item': _list.ListItem,
            'modules/formula': _formula2.default,
            'modules/syntax': _syntax2.default,
            'modules/toolbar': _toolbar2.default,
            'themes/bubble': _bubble2.default,
            'themes/snow': _snow2.default,
            'ui/icons': _icons2.default,
            'ui/picker': _picker2.default,
            'ui/icon-picker': _iconPicker2.default,
            'ui/color-picker': _colorPicker2.default,
            'ui/tooltip': _tooltip2.default
          }, true);

          exports.default = _core2.default;
          /***/
        },
        /* 64 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.IndentClass = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var IdentAttributor = function (_Parchment$Attributor) {
            _inherits(IdentAttributor, _Parchment$Attributor);

            function IdentAttributor() {
              _classCallCheck(this, IdentAttributor);

              return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));
            }

            _createClass(IdentAttributor, [{
              key: 'add',
              value: function add(node, value) {
                if (value === '+1' || value === '-1') {
                  var indent = this.value(node) || 0;
                  value = value === '+1' ? indent + 1 : indent - 1;
                }

                if (value === 0) {
                  this.remove(node);
                  return true;
                } else {
                  return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);
                }
              }
            }, {
              key: 'canAdd',
              value: function canAdd(node, value) {
                return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));
              }
            }, {
              key: 'value',
              value: function value(node) {
                return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined; // Don't return NaN
              }
            }]);

            return IdentAttributor;
          }(_parchment2.default.Attributor.Class);

          var IndentClass = new IdentAttributor('indent', 'ql-indent', {
            scope: _parchment2.default.Scope.BLOCK,
            whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
          });
          exports.IndentClass = IndentClass;
          /***/
        },
        /* 65 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Blockquote = function (_Block) {
            _inherits(Blockquote, _Block);

            function Blockquote() {
              _classCallCheck(this, Blockquote);

              return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));
            }

            return Blockquote;
          }(_block2.default);

          Blockquote.blotName = 'blockquote';
          Blockquote.tagName = 'blockquote';
          exports.default = Blockquote;
          /***/
        },
        /* 66 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Header = function (_Block) {
            _inherits(Header, _Block);

            function Header() {
              _classCallCheck(this, Header);

              return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
            }

            _createClass(Header, null, [{
              key: 'formats',
              value: function formats(domNode) {
                return this.tagName.indexOf(domNode.tagName) + 1;
              }
            }]);

            return Header;
          }(_block2.default);

          Header.blotName = 'header';
          Header.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];
          exports.default = Header;
          /***/
        },
        /* 67 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.ListItem = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _block = __webpack_require__(4);

          var _block2 = _interopRequireDefault(_block);

          var _container = __webpack_require__(25);

          var _container2 = _interopRequireDefault(_container);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _defineProperty(obj, key, value) {
            if (key in obj) {
              Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              obj[key] = value;
            }

            return obj;
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var ListItem = function (_Block) {
            _inherits(ListItem, _Block);

            function ListItem() {
              _classCallCheck(this, ListItem);

              return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
            }

            _createClass(ListItem, [{
              key: 'format',
              value: function format(name, value) {
                if (name === List.blotName && !value) {
                  this.replaceWith(_parchment2.default.create(this.statics.scope));
                } else {
                  _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);
                }
              }
            }, {
              key: 'remove',
              value: function remove() {
                if (this.prev == null && this.next == null) {
                  this.parent.remove();
                } else {
                  _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);
                }
              }
            }, {
              key: 'replaceWith',
              value: function replaceWith(name, value) {
                this.parent.isolate(this.offset(this.parent), this.length());

                if (name === this.parent.statics.blotName) {
                  this.parent.replaceWith(name, value);
                  return this;
                } else {
                  this.parent.unwrap();
                  return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);
                }
              }
            }], [{
              key: 'formats',
              value: function formats(domNode) {
                return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);
              }
            }]);

            return ListItem;
          }(_block2.default);

          ListItem.blotName = 'list-item';
          ListItem.tagName = 'LI';

          var List = function (_Container) {
            _inherits(List, _Container);

            _createClass(List, null, [{
              key: 'create',
              value: function create(value) {
                var tagName = value === 'ordered' ? 'OL' : 'UL';

                var node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);

                if (value === 'checked' || value === 'unchecked') {
                  node.setAttribute('data-checked', value === 'checked');
                }

                return node;
              }
            }, {
              key: 'formats',
              value: function formats(domNode) {
                if (domNode.tagName === 'OL') return 'ordered';

                if (domNode.tagName === 'UL') {
                  if (domNode.hasAttribute('data-checked')) {
                    return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';
                  } else {
                    return 'bullet';
                  }
                }

                return undefined;
              }
            }]);

            function List(domNode) {
              _classCallCheck(this, List);

              var _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));

              var listEventHandler = function listEventHandler(e) {
                if (e.target.parentNode !== domNode) return;

                var format = _this2.statics.formats(domNode);

                var blot = _parchment2.default.find(e.target);

                if (format === 'checked') {
                  blot.format('list', 'unchecked');
                } else if (format === 'unchecked') {
                  blot.format('list', 'checked');
                }
              };

              domNode.addEventListener('touchstart', listEventHandler);
              domNode.addEventListener('mousedown', listEventHandler);
              return _this2;
            }

            _createClass(List, [{
              key: 'format',
              value: function format(name, value) {
                if (this.children.length > 0) {
                  this.children.tail.format(name, value);
                }
              }
            }, {
              key: 'formats',
              value: function formats() {
                // We don't inherit from FormatBlot
                return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
              }
            }, {
              key: 'insertBefore',
              value: function insertBefore(blot, ref) {
                if (blot instanceof ListItem) {
                  _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);
                } else {
                  var index = ref == null ? this.length() : ref.offset(this);
                  var after = this.split(index);
                  after.parent.insertBefore(blot, after);
                }
              }
            }, {
              key: 'optimize',
              value: function optimize(context) {
                _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this, context);

                var next = this.next;

                if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {
                  next.moveChildren(this);
                  next.remove();
                }
              }
            }, {
              key: 'replace',
              value: function replace(target) {
                if (target.statics.blotName !== this.statics.blotName) {
                  var item = _parchment2.default.create(this.statics.defaultChild);

                  target.moveChildren(item);
                  this.appendChild(item);
                }

                _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);
              }
            }]);

            return List;
          }(_container2.default);

          List.blotName = 'list';
          List.scope = _parchment2.default.Scope.BLOCK_BLOT;
          List.tagName = ['OL', 'UL'];
          List.defaultChild = 'list-item';
          List.allowedChildren = [ListItem];
          exports.ListItem = ListItem;
          exports.default = List;
          /***/
        },
        /* 68 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _bold = __webpack_require__(56);

          var _bold2 = _interopRequireDefault(_bold);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Italic = function (_Bold) {
            _inherits(Italic, _Bold);

            function Italic() {
              _classCallCheck(this, Italic);

              return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));
            }

            return Italic;
          }(_bold2.default);

          Italic.blotName = 'italic';
          Italic.tagName = ['EM', 'I'];
          exports.default = Italic;
          /***/
        },
        /* 69 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Script = function (_Inline) {
            _inherits(Script, _Inline);

            function Script() {
              _classCallCheck(this, Script);

              return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));
            }

            _createClass(Script, null, [{
              key: 'create',
              value: function create(value) {
                if (value === 'super') {
                  return document.createElement('sup');
                } else if (value === 'sub') {
                  return document.createElement('sub');
                } else {
                  return _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);
                }
              }
            }, {
              key: 'formats',
              value: function formats(domNode) {
                if (domNode.tagName === 'SUB') return 'sub';
                if (domNode.tagName === 'SUP') return 'super';
                return undefined;
              }
            }]);

            return Script;
          }(_inline2.default);

          Script.blotName = 'script';
          Script.tagName = ['SUB', 'SUP'];
          exports.default = Script;
          /***/
        },
        /* 70 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Strike = function (_Inline) {
            _inherits(Strike, _Inline);

            function Strike() {
              _classCallCheck(this, Strike);

              return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));
            }

            return Strike;
          }(_inline2.default);

          Strike.blotName = 'strike';
          Strike.tagName = 'S';
          exports.default = Strike;
          /***/
        },
        /* 71 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _inline = __webpack_require__(6);

          var _inline2 = _interopRequireDefault(_inline);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var Underline = function (_Inline) {
            _inherits(Underline, _Inline);

            function Underline() {
              _classCallCheck(this, Underline);

              return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));
            }

            return Underline;
          }(_inline2.default);

          Underline.blotName = 'underline';
          Underline.tagName = 'U';
          exports.default = Underline;
          /***/
        },
        /* 72 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _link = __webpack_require__(27);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var ATTRIBUTES = ['alt', 'height', 'width'];

          var Image = function (_Parchment$Embed) {
            _inherits(Image, _Parchment$Embed);

            function Image() {
              _classCallCheck(this, Image);

              return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
            }

            _createClass(Image, [{
              key: 'format',
              value: function format(name, value) {
                if (ATTRIBUTES.indexOf(name) > -1) {
                  if (value) {
                    this.domNode.setAttribute(name, value);
                  } else {
                    this.domNode.removeAttribute(name);
                  }
                } else {
                  _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);
                }
              }
            }], [{
              key: 'create',
              value: function create(value) {
                var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);

                if (typeof value === 'string') {
                  node.setAttribute('src', this.sanitize(value));
                }

                return node;
              }
            }, {
              key: 'formats',
              value: function formats(domNode) {
                return ATTRIBUTES.reduce(function (formats, attribute) {
                  if (domNode.hasAttribute(attribute)) {
                    formats[attribute] = domNode.getAttribute(attribute);
                  }

                  return formats;
                }, {});
              }
            }, {
              key: 'match',
              value: function match(url) {
                return /\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url);
              }
            }, {
              key: 'sanitize',
              value: function sanitize(url) {
                return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';
              }
            }, {
              key: 'value',
              value: function value(domNode) {
                return domNode.getAttribute('src');
              }
            }]);

            return Image;
          }(_parchment2.default.Embed);

          Image.blotName = 'image';
          Image.tagName = 'IMG';
          exports.default = Image;
          /***/
        },
        /* 73 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _block = __webpack_require__(4);

          var _link = __webpack_require__(27);

          var _link2 = _interopRequireDefault(_link);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var ATTRIBUTES = ['height', 'width'];

          var Video = function (_BlockEmbed) {
            _inherits(Video, _BlockEmbed);

            function Video() {
              _classCallCheck(this, Video);

              return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));
            }

            _createClass(Video, [{
              key: 'format',
              value: function format(name, value) {
                if (ATTRIBUTES.indexOf(name) > -1) {
                  if (value) {
                    this.domNode.setAttribute(name, value);
                  } else {
                    this.domNode.removeAttribute(name);
                  }
                } else {
                  _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);
                }
              }
            }], [{
              key: 'create',
              value: function create(value) {
                var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);

                node.setAttribute('frameborder', '0');
                node.setAttribute('allowfullscreen', true);
                node.setAttribute('src', this.sanitize(value));
                return node;
              }
            }, {
              key: 'formats',
              value: function formats(domNode) {
                return ATTRIBUTES.reduce(function (formats, attribute) {
                  if (domNode.hasAttribute(attribute)) {
                    formats[attribute] = domNode.getAttribute(attribute);
                  }

                  return formats;
                }, {});
              }
            }, {
              key: 'sanitize',
              value: function sanitize(url) {
                return _link2.default.sanitize(url);
              }
            }, {
              key: 'value',
              value: function value(domNode) {
                return domNode.getAttribute('src');
              }
            }]);

            return Video;
          }(_block.BlockEmbed);

          Video.blotName = 'video';
          Video.className = 'ql-video';
          Video.tagName = 'IFRAME';
          exports.default = Video;
          /***/
        },
        /* 74 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.FormulaBlot = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _embed = __webpack_require__(35);

          var _embed2 = _interopRequireDefault(_embed);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var FormulaBlot = function (_Embed) {
            _inherits(FormulaBlot, _Embed);

            function FormulaBlot() {
              _classCallCheck(this, FormulaBlot);

              return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));
            }

            _createClass(FormulaBlot, null, [{
              key: 'create',
              value: function create(value) {
                var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);

                if (typeof value === 'string') {
                  window.katex.render(value, node, {
                    throwOnError: false,
                    errorColor: '#f00'
                  });
                  node.setAttribute('data-value', value);
                }

                return node;
              }
            }, {
              key: 'value',
              value: function value(domNode) {
                return domNode.getAttribute('data-value');
              }
            }]);

            return FormulaBlot;
          }(_embed2.default);

          FormulaBlot.blotName = 'formula';
          FormulaBlot.className = 'ql-formula';
          FormulaBlot.tagName = 'SPAN';

          var Formula = function (_Module) {
            _inherits(Formula, _Module);

            _createClass(Formula, null, [{
              key: 'register',
              value: function register() {
                _quill2.default.register(FormulaBlot, true);
              }
            }]);

            function Formula() {
              _classCallCheck(this, Formula);

              var _this2 = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));

              if (window.katex == null) {
                throw new Error('Formula module requires KaTeX.');
              }

              return _this2;
            }

            return Formula;
          }(_module2.default);

          exports.FormulaBlot = FormulaBlot;
          exports.default = Formula;
          /***/
        },
        /* 75 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.CodeToken = exports.CodeBlock = undefined;

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _parchment = __webpack_require__(0);

          var _parchment2 = _interopRequireDefault(_parchment);

          var _quill = __webpack_require__(5);

          var _quill2 = _interopRequireDefault(_quill);

          var _module = __webpack_require__(9);

          var _module2 = _interopRequireDefault(_module);

          var _code = __webpack_require__(13);

          var _code2 = _interopRequireDefault(_code);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var SyntaxCodeBlock = function (_CodeBlock) {
            _inherits(SyntaxCodeBlock, _CodeBlock);

            function SyntaxCodeBlock() {
              _classCallCheck(this, SyntaxCodeBlock);

              return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));
            }

            _createClass(SyntaxCodeBlock, [{
              key: 'replaceWith',
              value: function replaceWith(block) {
                this.domNode.textContent = this.domNode.textContent;
                this.attach();

                _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);
              }
            }, {
              key: 'highlight',
              value: function highlight(_highlight) {
                var text = this.domNode.textContent;

                if (this.cachedText !== text) {
                  if (text.trim().length > 0 || this.cachedText == null) {
                    this.domNode.innerHTML = _highlight(text);
                    this.domNode.normalize();
                    this.attach();
                  }

                  this.cachedText = text;
                }
              }
            }]);

            return SyntaxCodeBlock;
          }(_code2.default);

          SyntaxCodeBlock.className = 'ql-syntax';
          var CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {
            scope: _parchment2.default.Scope.INLINE
          });

          var Syntax = function (_Module) {
            _inherits(Syntax, _Module);

            _createClass(Syntax, null, [{
              key: 'register',
              value: function register() {
                _quill2.default.register(CodeToken, true);

                _quill2.default.register(SyntaxCodeBlock, true);
              }
            }]);

            function Syntax(quill, options) {
              _classCallCheck(this, Syntax);

              var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));

              if (typeof _this2.options.highlight !== 'function') {
                throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
              }

              var timer = null;

              _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
                clearTimeout(timer);
                timer = setTimeout(function () {
                  _this2.highlight();

                  timer = null;
                }, _this2.options.interval);
              });

              _this2.highlight();

              return _this2;
            }

            _createClass(Syntax, [{
              key: 'highlight',
              value: function highlight() {
                var _this3 = this;

                if (this.quill.selection.composing) return;
                this.quill.update(_quill2.default.sources.USER);
                var range = this.quill.getSelection();
                this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function (code) {
                  code.highlight(_this3.options.highlight);
                });
                this.quill.update(_quill2.default.sources.SILENT);

                if (range != null) {
                  this.quill.setSelection(range, _quill2.default.sources.SILENT);
                }
              }
            }]);

            return Syntax;
          }(_module2.default);

          Syntax.DEFAULTS = {
            highlight: function () {
              if (window.hljs == null) return null;
              return function (text) {
                var result = window.hljs.highlightAuto(text);
                return result.value;
              };
            }(),
            interval: 1000
          };
          exports.CodeBlock = SyntaxCodeBlock;
          exports.CodeToken = CodeToken;
          exports.default = Syntax;
          /***/
        },
        /* 76 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>";
          /***/
        },
        /* 77 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>";
          /***/
        },
        /* 78 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>";
          /***/
        },
        /* 79 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>";
          /***/
        },
        /* 80 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <g class=\"ql-fill ql-color-label\"> <polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\"5.5 13 9 5 12.5 13\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>";
          /***/
        },
        /* 81 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=4 y=5></rect> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=11 y=5></rect> <path class=\"ql-even ql-fill ql-stroke\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\"ql-even ql-fill ql-stroke\" d=M14,8c0,4.031-3,5-3,5></path> </svg>";
          /***/
        },
        /* 82 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>";
          /***/
        },
        /* 83 */

        /***/
        function (module, exports) {
          module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>";
          /***/
        },
        /* 84 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-color-label ql-stroke ql-transparent\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\"5.5 11 9 3 12.5 11\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>";
          /***/
        },
        /* 85 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"></polygon> <line class=\"ql-stroke ql-fill\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>";
          /***/
        },
        /* 86 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"></polygon> <line class=\"ql-stroke ql-fill\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>";
          /***/
        },
        /* 87 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>";
          /***/
        },
        /* 88 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>";
          /***/
        },
        /* 89 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>";
          /***/
        },
        /* 90 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\"translate(24 18) rotate(-180)\"/> </svg>";
          /***/
        },
        /* 91 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>";
          /***/
        },
        /* 92 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>";
          /***/
        },
        /* 93 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>";
          /***/
        },
        /* 94 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>";
          /***/
        },
        /* 95 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"></polyline> </svg>";
          /***/
        },
        /* 96 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"></polyline> </svg>";
          /***/
        },
        /* 97 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"5 7 5 11 3 9 5 7\"></polyline> </svg>";
          /***/
        },
        /* 98 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\"ql-even ql-stroke\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\"ql-even ql-stroke\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>";
          /***/
        },
        /* 99 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\"ql-stroke ql-thin\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\"ql-stroke ql-thin\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\"ql-stroke ql-thin\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>";
          /***/
        },
        /* 100 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>";
          /***/
        },
        /* 101 */

        /***/
        function (module, exports) {
          module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\"3 4 4 5 6 3\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\"3 14 4 15 6 13\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"3 9 4 10 6 8\"></polyline> </svg>";
          /***/
        },
        /* 102 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>";
          /***/
        },
        /* 103 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>";
          /***/
        },
        /* 104 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-stroke ql-thin\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>";
          /***/
        },
        /* 105 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>";
          /***/
        },
        /* 106 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>";
          /***/
        },
        /* 107 */

        /***/
        function (module, exports) {
          module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=ql-stroke points=\"7 11 9 13 11 11 7 11\"></polygon> <polygon class=ql-stroke points=\"7 7 9 5 11 7 7 7\"></polygon> </svg>";
          /***/
        },
        /* 108 */

        /***/
        function (module, exports, __webpack_require__) {

          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = exports.BubbleTooltip = undefined;

          var _get = function get(object, property, receiver) {
            if (object === null) object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);

            if (desc === undefined) {
              var parent = Object.getPrototypeOf(object);

              if (parent === null) {
                return undefined;
              } else {
                return get(parent, property, receiver);
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;

              if (getter === undefined) {
                return undefined;
              }

              return getter.call(receiver);
            }
          };

          var _createClass = function () {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            return function (Constructor, protoProps, staticProps) {
              if (protoProps) defineProperties(Constructor.prototype, protoProps);
              if (staticProps) defineProperties(Constructor, staticProps);
              return Constructor;
            };
          }();

          var _extend = __webpack_require__(3);

          var _extend2 = _interopRequireDefault(_extend);

          var _emitter = __webpack_require__(8);

          var _emitter2 = _interopRequireDefault(_emitter);

          var _base = __webpack_require__(43);

          var _base2 = _interopRequireDefault(_base);

          var _selection = __webpack_require__(15);

          var _icons = __webpack_require__(41);

          var _icons2 = _interopRequireDefault(_icons);

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              default: obj
            };
          }

          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }

          function _possibleConstructorReturn(self, call) {
            if (!self) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }

            return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
          }

          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
            }

            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }

          var TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{
            header: 1
          }, {
            header: 2
          }, 'blockquote']];

          var BubbleTheme = function (_BaseTheme) {
            _inherits(BubbleTheme, _BaseTheme);

            function BubbleTheme(quill, options) {
              _classCallCheck(this, BubbleTheme);

              if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
                options.modules.toolbar.container = TOOLBAR_CONFIG;
              }

              var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));

              _this.quill.container.classList.add('ql-bubble');

              return _this;
            }

            _createClass(BubbleTheme, [{
              key: 'extendToolbar',
              value: function extendToolbar(toolbar) {
                this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
                this.tooltip.root.appendChild(toolbar.container);
                this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
                this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
              }
            }]);

            return BubbleTheme;
          }(_base2.default);

          BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
            modules: {
              toolbar: {
                handlers: {
                  link: function link(value) {
                    if (!value) {
                      this.quill.format('link', false);
                    } else {
                      this.quill.theme.tooltip.edit();
                    }
                  }
                }
              }
            }
          });

          var BubbleTooltip = function (_BaseTooltip) {
            _inherits(BubbleTooltip, _BaseTooltip);

            function BubbleTooltip(quill, bounds) {
              _classCallCheck(this, BubbleTooltip);

              var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));

              _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function (type, range, oldRange, source) {
                if (type !== _emitter2.default.events.SELECTION_CHANGE) return;

                if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {
                  _this2.show(); // Lock our width so we will expand beyond our offsetParent boundaries


                  _this2.root.style.left = '0px';
                  _this2.root.style.width = '';
                  _this2.root.style.width = _this2.root.offsetWidth + 'px';

                  var lines = _this2.quill.getLines(range.index, range.length);

                  if (lines.length === 1) {
                    _this2.position(_this2.quill.getBounds(range));
                  } else {
                    var lastLine = lines[lines.length - 1];

                    var index = _this2.quill.getIndex(lastLine);

                    var length = Math.min(lastLine.length() - 1, range.index + range.length - index);

                    var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));

                    _this2.position(_bounds);
                  }
                } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
                  _this2.hide();
                }
              });

              return _this2;
            }

            _createClass(BubbleTooltip, [{
              key: 'listen',
              value: function listen() {
                var _this3 = this;

                _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);

                this.root.querySelector('.ql-close').addEventListener('click', function () {
                  _this3.root.classList.remove('ql-editing');
                });
                this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function () {
                  // Let selection be restored by toolbar handlers before repositioning
                  setTimeout(function () {
                    if (_this3.root.classList.contains('ql-hidden')) return;

                    var range = _this3.quill.getSelection();

                    if (range != null) {
                      _this3.position(_this3.quill.getBounds(range));
                    }
                  }, 1);
                });
              }
            }, {
              key: 'cancel',
              value: function cancel() {
                this.show();
              }
            }, {
              key: 'position',
              value: function position(reference) {
                var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);

                var arrow = this.root.querySelector('.ql-tooltip-arrow');
                arrow.style.marginLeft = '';
                if (shift === 0) return shift;
                arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';
              }
            }]);

            return BubbleTooltip;
          }(_base.BaseTooltip);

          BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');
          exports.BubbleTooltip = BubbleTooltip;
          exports.default = BubbleTheme;
          /***/
        },
        /* 109 */

        /***/
        function (module, exports, __webpack_require__) {
          module.exports = __webpack_require__(63);
          /***/
        }
        /******/
        ])["default"]
      );
    });
  });
  var Quill = /*@__PURE__*/getDefaultExportFromCjs(quill);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var KbfWysiwyg = /*#__PURE__*/function (_EventTarget) {
    _inherits(KbfWysiwyg, _EventTarget);

    var _super = _createSuper(KbfWysiwyg);

    function KbfWysiwyg(selector) {
      var _this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck$1(this, KbfWysiwyg);

      _this = _super.call(this); // Emituj wyjatek gdy nie podano selektora albo element nie zostal znaleziony

      if (!selector) throw errors.argumentNotFound("selector");
      _this.selector = selector;
      _this.$container = $(selector);
      _this.options = _objectSpread({
        modules: {
          toolbar: [['bold', 'italic', 'underline', 'strike'], [{
            'align': []
          }], [{
            'list': 'ordered'
          }, {
            'list': 'bullet'
          }]]
        },
        theme: 'bubble'
      }, options);

      _this.init();

      _this.addListeners();

      return _this;
    } // Dodaje listenery


    _createClass$1(KbfWysiwyg, [{
      key: "addListeners",
      value: function addListeners() {
        var instance = this; // Aktualizuj wartosc pola input

        this.editor.on('editor-change', function () {
          instance.setInputValue(instance.$contents.html());
        }); // Ustaw focus na edytorze

        $(window).on('click', function () {
          instance.$contents.removeClass('focus');
        });
        this.$contents.on('click', function (e) {
          e.stopPropagation();
          instance.$contents.addClass('focus');
        });
      } // Inicjalizuje

    }, {
      key: "init",
      value: function init() {
        // Aliasy
        this.on = this.addEventListener;
        this.off = this.removeEventListener;
        this.emit = this.dispatchEvent;
        this.editor = new Quill(this.selector, this.options);
        this.$contents = $('.ql-editor');
        this.$wysiwygInput = $('.wysiwyg').next('input[type="hidden"]');
        this.$wysiwygInput.html(this.$contents.html());
      } //Ustawia wartosc pola input

    }, {
      key: "setInputValue",
      value: function setInputValue(html) {
        var instance = this;
        if (html === '<p><br></p>' || html.length === 0) this.$wysiwygInput.attr('value', '');else this.$wysiwygInput.attr('value', html); // Emituj wartosc w polu edytora

        this.emit(new CustomEvent('change', {
          detail: instance.$wysiwygInput[0].value
        }));
      } // Ustawia wartosc poczatkowa dla edytora

    }, {
      key: "setInitialValue",
      value: function setInitialValue(html) {
        this.$contents.html(html);
        this.setInputValue(html);
      }
    }]);

    return KbfWysiwyg;
  }( /*#__PURE__*/_wrapNativeSuper(EventTarget));

  var type = "FeatureCollection";
  var name = "areas";
  var crs = {
  	type: "name",
  	properties: {
  		name: "urn:ogc:def:crs:OGC:1.3:CRS84"
  	}
  };
  var features = [
  	{
  		type: "Feature",
  		properties: {
  			id: 1,
  			name: "powiat ropczycko-sędziszowski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.8034,
  						50.1514
  					],
  					[
  						21.7874,
  						50.0984
  					],
  					[
  						21.8124,
  						50.0975
  					],
  					[
  						21.8196,
  						50.0807
  					],
  					[
  						21.7985,
  						50.0723
  					],
  					[
  						21.8088,
  						50.0385
  					],
  					[
  						21.8078,
  						50.0086
  					],
  					[
  						21.7815,
  						49.9955
  					],
  					[
  						21.7752,
  						49.991
  					],
  					[
  						21.7752,
  						49.9908
  					],
  					[
  						21.7746,
  						49.9896
  					],
  					[
  						21.7735,
  						49.9876
  					],
  					[
  						21.774,
  						49.987
  					],
  					[
  						21.7741,
  						49.9864
  					],
  					[
  						21.7751,
  						49.9849
  					],
  					[
  						21.7759,
  						49.9811
  					],
  					[
  						21.7757,
  						49.9802
  					],
  					[
  						21.7746,
  						49.9794
  					],
  					[
  						21.7732,
  						49.9792
  					],
  					[
  						21.7714,
  						49.9788
  					],
  					[
  						21.7659,
  						49.9758
  					],
  					[
  						21.7482,
  						49.9689
  					],
  					[
  						21.6905,
  						49.9627
  					],
  					[
  						21.6933,
  						49.9419
  					],
  					[
  						21.6542,
  						49.9248
  					],
  					[
  						21.6508,
  						49.924
  					],
  					[
  						21.621,
  						49.9212
  					],
  					[
  						21.6205,
  						49.9206
  					],
  					[
  						21.599,
  						49.9219
  					],
  					[
  						21.5508,
  						49.8973
  					],
  					[
  						21.5235,
  						49.8929
  					],
  					[
  						21.5093,
  						49.9097
  					],
  					[
  						21.4982,
  						49.9469
  					],
  					[
  						21.4679,
  						49.9673
  					],
  					[
  						21.4642,
  						49.9924
  					],
  					[
  						21.515,
  						50.0226
  					],
  					[
  						21.5171,
  						50.0253
  					],
  					[
  						21.5297,
  						50.0254
  					],
  					[
  						21.526,
  						50.0387
  					],
  					[
  						21.4978,
  						50.05
  					],
  					[
  						21.5018,
  						50.0768
  					],
  					[
  						21.5411,
  						50.0891
  					],
  					[
  						21.5462,
  						50.109
  					],
  					[
  						21.5673,
  						50.1299
  					],
  					[
  						21.5112,
  						50.1615
  					],
  					[
  						21.609,
  						50.1777
  					],
  					[
  						21.6027,
  						50.2091
  					],
  					[
  						21.631,
  						50.2009
  					],
  					[
  						21.6269,
  						50.1843
  					],
  					[
  						21.6953,
  						50.1786
  					],
  					[
  						21.7459,
  						50.1578
  					],
  					[
  						21.771,
  						50.1729
  					],
  					[
  						21.7963,
  						50.1693
  					],
  					[
  						21.8034,
  						50.1514
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 2,
  			name: "powiat łosicki",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.7187,
  						52.334
  					],
  					[
  						22.7407,
  						52.3439
  					],
  					[
  						22.7204,
  						52.3723
  					],
  					[
  						22.7526,
  						52.384
  					],
  					[
  						22.8513,
  						52.3588
  					],
  					[
  						22.9197,
  						52.3745
  					],
  					[
  						22.9572,
  						52.3682
  					],
  					[
  						22.997,
  						52.3316
  					],
  					[
  						23.0452,
  						52.3249
  					],
  					[
  						23.0725,
  						52.2816
  					],
  					[
  						23.1069,
  						52.2991
  					],
  					[
  						23.1284,
  						52.2878
  					],
  					[
  						23.0948,
  						52.2565
  					],
  					[
  						23.033,
  						52.2186
  					],
  					[
  						23.0397,
  						52.1839
  					],
  					[
  						23.0288,
  						52.1741
  					],
  					[
  						22.977,
  						52.1722
  					],
  					[
  						22.9859,
  						52.1589
  					],
  					[
  						22.9331,
  						52.1365
  					],
  					[
  						22.9682,
  						52.1154
  					],
  					[
  						22.9501,
  						52.1022
  					],
  					[
  						22.9026,
  						52.1103
  					],
  					[
  						22.8942,
  						52.0913
  					],
  					[
  						22.9021,
  						52.0635
  					],
  					[
  						22.8491,
  						52.0684
  					],
  					[
  						22.8375,
  						52.0799
  					],
  					[
  						22.8063,
  						52.0792
  					],
  					[
  						22.7871,
  						52.0681
  					],
  					[
  						22.7539,
  						52.095
  					],
  					[
  						22.6776,
  						52.1089
  					],
  					[
  						22.6483,
  						52.0909
  					],
  					[
  						22.5793,
  						52.1364
  					],
  					[
  						22.5764,
  						52.1526
  					],
  					[
  						22.59,
  						52.1807
  					],
  					[
  						22.6289,
  						52.1721
  					],
  					[
  						22.6286,
  						52.199
  					],
  					[
  						22.6474,
  						52.2191
  					],
  					[
  						22.636,
  						52.2385
  					],
  					[
  						22.678,
  						52.2421
  					],
  					[
  						22.6698,
  						52.2691
  					],
  					[
  						22.7238,
  						52.2804
  					],
  					[
  						22.7232,
  						52.3068
  					],
  					[
  						22.6737,
  						52.3199
  					],
  					[
  						22.7187,
  						52.334
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 3,
  			name: "powiat piaseczyński",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.165,
  						52.1447
  					],
  					[
  						21.2075,
  						52.1037
  					],
  					[
  						21.2167,
  						52.0831
  					],
  					[
  						21.2063,
  						52.0591
  					],
  					[
  						21.2262,
  						52.035
  					],
  					[
  						21.2217,
  						52.0042
  					],
  					[
  						21.2794,
  						51.9635
  					],
  					[
  						21.2673,
  						51.9372
  					],
  					[
  						21.2446,
  						51.9223
  					],
  					[
  						21.2391,
  						51.9016
  					],
  					[
  						21.1978,
  						51.8996
  					],
  					[
  						21.1837,
  						51.928
  					],
  					[
  						21.1582,
  						51.9274
  					],
  					[
  						21.0869,
  						51.9396
  					],
  					[
  						21.0449,
  						51.9278
  					],
  					[
  						21.0059,
  						51.9269
  					],
  					[
  						20.9844,
  						51.9124
  					],
  					[
  						20.9564,
  						51.9252
  					],
  					[
  						20.9269,
  						51.9339
  					],
  					[
  						20.861,
  						51.9286
  					],
  					[
  						20.8336,
  						51.9347
  					],
  					[
  						20.8021,
  						51.9584
  					],
  					[
  						20.7291,
  						51.944
  					],
  					[
  						20.686,
  						51.9548
  					],
  					[
  						20.6962,
  						51.9738
  					],
  					[
  						20.6946,
  						51.9791
  					],
  					[
  						20.6945,
  						51.9791
  					],
  					[
  						20.6946,
  						51.9791
  					],
  					[
  						20.7504,
  						51.9873
  					],
  					[
  						20.7722,
  						52.0006
  					],
  					[
  						20.8121,
  						52.0221
  					],
  					[
  						20.8097,
  						52.0515
  					],
  					[
  						20.8396,
  						52.0618
  					],
  					[
  						20.8694,
  						52.0908
  					],
  					[
  						20.8916,
  						52.091
  					],
  					[
  						20.9283,
  						52.1198
  					],
  					[
  						20.9864,
  						52.1176
  					],
  					[
  						21.0187,
  						52.1037
  					],
  					[
  						21.0437,
  						52.113
  					],
  					[
  						21.0801,
  						52.0979
  					],
  					[
  						21.1325,
  						52.1232
  					],
  					[
  						21.165,
  						52.1447
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 4,
  			name: "powiat radomski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.2055,
  						51.5887
  					],
  					[
  						21.2309,
  						51.5849
  					],
  					[
  						21.2575,
  						51.5663
  					],
  					[
  						21.2978,
  						51.5582
  					],
  					[
  						21.3037,
  						51.5585
  					],
  					[
  						21.3577,
  						51.5396
  					],
  					[
  						21.4182,
  						51.5356
  					],
  					[
  						21.4386,
  						51.5144
  					],
  					[
  						21.4874,
  						51.5457
  					],
  					[
  						21.518,
  						51.5577
  					],
  					[
  						21.5584,
  						51.5395
  					],
  					[
  						21.5666,
  						51.5242
  					],
  					[
  						21.537,
  						51.455
  					],
  					[
  						21.55,
  						51.4446
  					],
  					[
  						21.5635,
  						51.4252
  					],
  					[
  						21.471,
  						51.4018
  					],
  					[
  						21.4318,
  						51.3542
  					],
  					[
  						21.3874,
  						51.3465
  					],
  					[
  						21.3554,
  						51.3283
  					],
  					[
  						21.3641,
  						51.3079
  					],
  					[
  						21.3671,
  						51.2971
  					],
  					[
  						21.3432,
  						51.2583
  					],
  					[
  						21.3362,
  						51.2503
  					],
  					[
  						21.3635,
  						51.2292
  					],
  					[
  						21.4162,
  						51.2212
  					],
  					[
  						21.3938,
  						51.2059
  					],
  					[
  						21.4251,
  						51.1844
  					],
  					[
  						21.3618,
  						51.1832
  					],
  					[
  						21.3443,
  						51.1762
  					],
  					[
  						21.3111,
  						51.0842
  					],
  					[
  						21.1528,
  						51.0803
  					],
  					[
  						21.1602,
  						51.1022
  					],
  					[
  						21.154,
  						51.1255
  					],
  					[
  						21.0912,
  						51.1551
  					],
  					[
  						21.1161,
  						51.1789
  					],
  					[
  						21.1106,
  						51.2008
  					],
  					[
  						21.0684,
  						51.2069
  					],
  					[
  						21.0172,
  						51.2346
  					],
  					[
  						21.0174,
  						51.2655
  					],
  					[
  						21.0342,
  						51.285
  					],
  					[
  						21.0247,
  						51.3084
  					],
  					[
  						21.0313,
  						51.3297
  					],
  					[
  						20.988,
  						51.3539
  					],
  					[
  						20.9429,
  						51.3623
  					],
  					[
  						20.9322,
  						51.3615
  					],
  					[
  						20.9318,
  						51.3617
  					],
  					[
  						20.9135,
  						51.3675
  					],
  					[
  						20.8846,
  						51.3398
  					],
  					[
  						20.8545,
  						51.3432
  					],
  					[
  						20.8382,
  						51.3642
  					],
  					[
  						20.8575,
  						51.376
  					],
  					[
  						20.8869,
  						51.4027
  					],
  					[
  						20.8511,
  						51.4219
  					],
  					[
  						20.8117,
  						51.4098
  					],
  					[
  						20.7645,
  						51.419
  					],
  					[
  						20.7801,
  						51.4475
  					],
  					[
  						20.7987,
  						51.5117
  					],
  					[
  						20.8286,
  						51.5202
  					],
  					[
  						20.8907,
  						51.5151
  					],
  					[
  						20.9428,
  						51.5249
  					],
  					[
  						20.9327,
  						51.5007
  					],
  					[
  						21.001,
  						51.5021
  					],
  					[
  						20.9984,
  						51.5178
  					],
  					[
  						21.0252,
  						51.5345
  					],
  					[
  						21.0721,
  						51.5415
  					],
  					[
  						21.0705,
  						51.5611
  					],
  					[
  						21.0892,
  						51.5769
  					],
  					[
  						21.1507,
  						51.5891
  					],
  					[
  						21.2055,
  						51.5887
  					]
  				],
  				[
  					[
  						21.2564,
  						51.4317
  					],
  					[
  						21.1774,
  						51.48
  					],
  					[
  						21.1194,
  						51.4514
  					],
  					[
  						21.1265,
  						51.4369
  					],
  					[
  						21.1057,
  						51.4083
  					],
  					[
  						21.0585,
  						51.3986
  					],
  					[
  						21.0533,
  						51.3698
  					],
  					[
  						21.0941,
  						51.3496
  					],
  					[
  						21.1361,
  						51.358
  					],
  					[
  						21.1947,
  						51.3486
  					],
  					[
  						21.2207,
  						51.3723
  					],
  					[
  						21.2017,
  						51.4027
  					],
  					[
  						21.2197,
  						51.424
  					],
  					[
  						21.2564,
  						51.4317
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 5,
  			name: "powiat sierpecki",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.4447,
  						52.939
  					],
  					[
  						19.5289,
  						52.9364
  					],
  					[
  						19.5408,
  						52.9484
  					],
  					[
  						19.5825,
  						52.9569
  					],
  					[
  						19.5683,
  						52.9857
  					],
  					[
  						19.6121,
  						52.9769
  					],
  					[
  						19.6716,
  						52.9556
  					],
  					[
  						19.6848,
  						52.963
  					],
  					[
  						19.6974,
  						52.9714
  					],
  					[
  						19.7698,
  						52.9592
  					],
  					[
  						19.817,
  						52.9207
  					],
  					[
  						19.84,
  						52.9206
  					],
  					[
  						19.8633,
  						52.9048
  					],
  					[
  						19.888,
  						52.9094
  					],
  					[
  						19.9325,
  						52.9007
  					],
  					[
  						19.964,
  						52.8824
  					],
  					[
  						19.9549,
  						52.8592
  					],
  					[
  						19.9915,
  						52.828
  					],
  					[
  						19.9699,
  						52.8093
  					],
  					[
  						19.9641,
  						52.7808
  					],
  					[
  						19.964,
  						52.7808
  					],
  					[
  						19.951,
  						52.7649
  					],
  					[
  						19.9053,
  						52.7607
  					],
  					[
  						19.8732,
  						52.7482
  					],
  					[
  						19.8481,
  						52.728
  					],
  					[
  						19.8234,
  						52.7338
  					],
  					[
  						19.7968,
  						52.7246
  					],
  					[
  						19.7755,
  						52.6947
  					],
  					[
  						19.743,
  						52.6963
  					],
  					[
  						19.6918,
  						52.6833
  					],
  					[
  						19.64,
  						52.6785
  					],
  					[
  						19.62,
  						52.6888
  					],
  					[
  						19.5258,
  						52.7037
  					],
  					[
  						19.5026,
  						52.715
  					],
  					[
  						19.4946,
  						52.7784
  					],
  					[
  						19.4712,
  						52.7854
  					],
  					[
  						19.423,
  						52.8327
  					],
  					[
  						19.473,
  						52.8515
  					],
  					[
  						19.475,
  						52.8654
  					],
  					[
  						19.5087,
  						52.8679
  					],
  					[
  						19.4586,
  						52.9067
  					],
  					[
  						19.4654,
  						52.9165
  					],
  					[
  						19.4447,
  						52.939
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 6,
  			name: "powiat szydłowiecki",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.8545,
  						51.3432
  					],
  					[
  						20.8846,
  						51.3398
  					],
  					[
  						20.9135,
  						51.3675
  					],
  					[
  						20.9318,
  						51.3617
  					],
  					[
  						20.9322,
  						51.3615
  					],
  					[
  						20.9429,
  						51.3623
  					],
  					[
  						20.988,
  						51.3539
  					],
  					[
  						21.0313,
  						51.3297
  					],
  					[
  						21.0247,
  						51.3084
  					],
  					[
  						21.0342,
  						51.285
  					],
  					[
  						21.0174,
  						51.2655
  					],
  					[
  						21.0172,
  						51.2346
  					],
  					[
  						21.0684,
  						51.2069
  					],
  					[
  						21.0696,
  						51.174
  					],
  					[
  						21.0566,
  						51.1571
  					],
  					[
  						20.9985,
  						51.1445
  					],
  					[
  						20.9837,
  						51.1665
  					],
  					[
  						20.9207,
  						51.1953
  					],
  					[
  						20.8798,
  						51.1544
  					],
  					[
  						20.8216,
  						51.1784
  					],
  					[
  						20.813,
  						51.1458
  					],
  					[
  						20.7184,
  						51.1727
  					],
  					[
  						20.6855,
  						51.1512
  					],
  					[
  						20.6853,
  						51.1736
  					],
  					[
  						20.7003,
  						51.196
  					],
  					[
  						20.6216,
  						51.2301
  					],
  					[
  						20.6105,
  						51.2425
  					],
  					[
  						20.6106,
  						51.2425
  					],
  					[
  						20.6145,
  						51.2498
  					],
  					[
  						20.667,
  						51.2516
  					],
  					[
  						20.7089,
  						51.269
  					],
  					[
  						20.7323,
  						51.2592
  					],
  					[
  						20.7578,
  						51.2668
  					],
  					[
  						20.779,
  						51.2883
  					],
  					[
  						20.7611,
  						51.2961
  					],
  					[
  						20.7795,
  						51.3192
  					],
  					[
  						20.8163,
  						51.3164
  					],
  					[
  						20.8545,
  						51.3432
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 7,
  			name: "powiat wągrowski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.773,
  						52.6649
  					],
  					[
  						21.7928,
  						52.6752
  					],
  					[
  						21.8666,
  						52.6989
  					],
  					[
  						21.8958,
  						52.703
  					],
  					[
  						21.9231,
  						52.6846
  					],
  					[
  						21.9195,
  						52.6603
  					],
  					[
  						21.9574,
  						52.6481
  					],
  					[
  						21.9995,
  						52.647
  					],
  					[
  						22.0026,
  						52.6305
  					],
  					[
  						21.9998,
  						52.6219
  					],
  					[
  						21.984,
  						52.5901
  					],
  					[
  						22.0044,
  						52.5719
  					],
  					[
  						22.0397,
  						52.5739
  					],
  					[
  						22.0566,
  						52.5557
  					],
  					[
  						22.0539,
  						52.5357
  					],
  					[
  						22.0836,
  						52.5325
  					],
  					[
  						22.0965,
  						52.5153
  					],
  					[
  						22.1569,
  						52.4828
  					],
  					[
  						22.1783,
  						52.459
  					],
  					[
  						22.1355,
  						52.4254
  					],
  					[
  						22.0903,
  						52.4099
  					],
  					[
  						22.0898,
  						52.3878
  					],
  					[
  						22.124,
  						52.3718
  					],
  					[
  						22.1309,
  						52.3547
  					],
  					[
  						22.076,
  						52.3382
  					],
  					[
  						22.0922,
  						52.3143
  					],
  					[
  						22.0424,
  						52.2932
  					],
  					[
  						22.0527,
  						52.255
  					],
  					[
  						22.0765,
  						52.239
  					],
  					[
  						22.0507,
  						52.2274
  					],
  					[
  						22.0488,
  						52.2095
  					],
  					[
  						21.9675,
  						52.2209
  					],
  					[
  						21.9418,
  						52.2164
  					],
  					[
  						21.8905,
  						52.2277
  					],
  					[
  						21.8737,
  						52.2335
  					],
  					[
  						21.8724,
  						52.2343
  					],
  					[
  						21.8719,
  						52.2346
  					],
  					[
  						21.8703,
  						52.2356
  					],
  					[
  						21.8669,
  						52.2372
  					],
  					[
  						21.8475,
  						52.2564
  					],
  					[
  						21.7927,
  						52.2631
  					],
  					[
  						21.7954,
  						52.2899
  					],
  					[
  						21.7843,
  						52.3077
  					],
  					[
  						21.7382,
  						52.3137
  					],
  					[
  						21.7578,
  						52.333
  					],
  					[
  						21.8036,
  						52.3431
  					],
  					[
  						21.7966,
  						52.3533
  					],
  					[
  						21.754,
  						52.3584
  					],
  					[
  						21.7402,
  						52.3831
  					],
  					[
  						21.7042,
  						52.39
  					],
  					[
  						21.7169,
  						52.3978
  					],
  					[
  						21.7085,
  						52.43
  					],
  					[
  						21.7004,
  						52.4376
  					],
  					[
  						21.6918,
  						52.4481
  					],
  					[
  						21.683,
  						52.4557
  					],
  					[
  						21.7338,
  						52.4615
  					],
  					[
  						21.733,
  						52.4841
  					],
  					[
  						21.7091,
  						52.5063
  					],
  					[
  						21.6707,
  						52.5073
  					],
  					[
  						21.6269,
  						52.5172
  					],
  					[
  						21.5968,
  						52.5532
  					],
  					[
  						21.5773,
  						52.5957
  					],
  					[
  						21.616,
  						52.6011
  					],
  					[
  						21.617,
  						52.6125
  					],
  					[
  						21.6678,
  						52.6165
  					],
  					[
  						21.6754,
  						52.6302
  					],
  					[
  						21.7282,
  						52.6529
  					],
  					[
  						21.773,
  						52.6649
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 8,
  			name: "powiat gostyniński",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.2892,
  						52.3927
  					],
  					[
  						19.2966,
  						52.4237
  					],
  					[
  						19.2618,
  						52.4357
  					],
  					[
  						19.2681,
  						52.4488
  					],
  					[
  						19.3194,
  						52.449
  					],
  					[
  						19.3389,
  						52.4798
  					],
  					[
  						19.3721,
  						52.5072
  					],
  					[
  						19.3957,
  						52.5129
  					],
  					[
  						19.4347,
  						52.5234
  					],
  					[
  						19.4999,
  						52.526
  					],
  					[
  						19.5336,
  						52.4967
  					],
  					[
  						19.5595,
  						52.4833
  					],
  					[
  						19.5504,
  						52.4535
  					],
  					[
  						19.5631,
  						52.4428
  					],
  					[
  						19.5615,
  						52.4056
  					],
  					[
  						19.6009,
  						52.4015
  					],
  					[
  						19.6329,
  						52.4161
  					],
  					[
  						19.6638,
  						52.4121
  					],
  					[
  						19.6626,
  						52.3884
  					],
  					[
  						19.683,
  						52.3797
  					],
  					[
  						19.689,
  						52.3554
  					],
  					[
  						19.7201,
  						52.3543
  					],
  					[
  						19.7376,
  						52.3383
  					],
  					[
  						19.7542,
  						52.3522
  					],
  					[
  						19.7786,
  						52.3496
  					],
  					[
  						19.8115,
  						52.3612
  					],
  					[
  						19.8121,
  						52.3916
  					],
  					[
  						19.9417,
  						52.3418
  					],
  					[
  						19.9574,
  						52.3276
  					],
  					[
  						19.9828,
  						52.3376
  					],
  					[
  						19.9361,
  						52.2997
  					],
  					[
  						19.8856,
  						52.3098
  					],
  					[
  						19.8778,
  						52.2891
  					],
  					[
  						19.8475,
  						52.2721
  					],
  					[
  						19.816,
  						52.2839
  					],
  					[
  						19.773,
  						52.2646
  					],
  					[
  						19.7361,
  						52.2586
  					],
  					[
  						19.699,
  						52.2785
  					],
  					[
  						19.6729,
  						52.2561
  					],
  					[
  						19.6238,
  						52.264
  					],
  					[
  						19.616,
  						52.2882
  					],
  					[
  						19.5486,
  						52.2941
  					],
  					[
  						19.4915,
  						52.3203
  					],
  					[
  						19.5021,
  						52.3333
  					],
  					[
  						19.4628,
  						52.3429
  					],
  					[
  						19.4261,
  						52.3373
  					],
  					[
  						19.4059,
  						52.3451
  					],
  					[
  						19.3585,
  						52.3415
  					],
  					[
  						19.3222,
  						52.3484
  					],
  					[
  						19.3287,
  						52.3607
  					],
  					[
  						19.2892,
  						52.3927
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 9,
  			name: "powiat grodziski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.7722,
  						52.0006
  					],
  					[
  						20.7504,
  						51.9873
  					],
  					[
  						20.6946,
  						51.9791
  					],
  					[
  						20.6945,
  						51.9791
  					],
  					[
  						20.6946,
  						51.9791
  					],
  					[
  						20.6962,
  						51.9738
  					],
  					[
  						20.686,
  						51.9548
  					],
  					[
  						20.6579,
  						51.9255
  					],
  					[
  						20.5984,
  						51.974
  					],
  					[
  						20.6127,
  						51.9832
  					],
  					[
  						20.6141,
  						52.0319
  					],
  					[
  						20.6214,
  						52.0481
  					],
  					[
  						20.5316,
  						52.048
  					],
  					[
  						20.4956,
  						52.0336
  					],
  					[
  						20.4622,
  						52.042
  					],
  					[
  						20.4748,
  						52.0566
  					],
  					[
  						20.4442,
  						52.084
  					],
  					[
  						20.4543,
  						52.0983
  					],
  					[
  						20.421,
  						52.1213
  					],
  					[
  						20.411,
  						52.1403
  					],
  					[
  						20.3945,
  						52.164
  					],
  					[
  						20.4165,
  						52.1934
  					],
  					[
  						20.4849,
  						52.1838
  					],
  					[
  						20.5074,
  						52.1975
  					],
  					[
  						20.5321,
  						52.1895
  					],
  					[
  						20.545,
  						52.165
  					],
  					[
  						20.6038,
  						52.1576
  					],
  					[
  						20.6309,
  						52.1651
  					],
  					[
  						20.6698,
  						52.1589
  					],
  					[
  						20.6804,
  						52.1294
  					],
  					[
  						20.7028,
  						52.1368
  					],
  					[
  						20.7482,
  						52.1269
  					],
  					[
  						20.7445,
  						52.1107
  					],
  					[
  						20.7148,
  						52.1137
  					],
  					[
  						20.6905,
  						52.0969
  					],
  					[
  						20.7345,
  						52.0831
  					],
  					[
  						20.7232,
  						52.0471
  					],
  					[
  						20.7409,
  						52.0397
  					],
  					[
  						20.7722,
  						52.0006
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 10,
  			name: "powiat łukowski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.6229,
  						52.0187
  					],
  					[
  						22.6334,
  						51.9991
  					],
  					[
  						22.6335,
  						51.9693
  					],
  					[
  						22.576,
  						51.9678
  					],
  					[
  						22.5537,
  						51.9368
  					],
  					[
  						22.567,
  						51.9291
  					],
  					[
  						22.5718,
  						51.896
  					],
  					[
  						22.5151,
  						51.8735
  					],
  					[
  						22.4903,
  						51.8865
  					],
  					[
  						22.4821,
  						51.8561
  					],
  					[
  						22.4555,
  						51.8424
  					],
  					[
  						22.4226,
  						51.8648
  					],
  					[
  						22.3956,
  						51.8537
  					],
  					[
  						22.3731,
  						51.8607
  					],
  					[
  						22.3564,
  						51.8423
  					],
  					[
  						22.3752,
  						51.8351
  					],
  					[
  						22.3526,
  						51.8134
  					],
  					[
  						22.3795,
  						51.8044
  					],
  					[
  						22.3796,
  						51.8044
  					],
  					[
  						22.3795,
  						51.8044
  					],
  					[
  						22.3796,
  						51.8044
  					],
  					[
  						22.4366,
  						51.7461
  					],
  					[
  						22.3984,
  						51.7138
  					],
  					[
  						22.3676,
  						51.6578
  					],
  					[
  						22.3246,
  						51.6507
  					],
  					[
  						22.3069,
  						51.6731
  					],
  					[
  						22.2891,
  						51.6376
  					],
  					[
  						22.1933,
  						51.6597
  					],
  					[
  						22.1573,
  						51.6679
  					],
  					[
  						22.1624,
  						51.6849
  					],
  					[
  						22.139,
  						51.7054
  					],
  					[
  						22.074,
  						51.7284
  					],
  					[
  						22.0626,
  						51.7379
  					],
  					[
  						22.0644,
  						51.7802
  					],
  					[
  						21.984,
  						51.7854
  					],
  					[
  						21.9564,
  						51.7938
  					],
  					[
  						21.9422,
  						51.826
  					],
  					[
  						21.9174,
  						51.8396
  					],
  					[
  						21.8946,
  						51.8328
  					],
  					[
  						21.8453,
  						51.8412
  					],
  					[
  						21.8859,
  						51.8604
  					],
  					[
  						21.9121,
  						51.8865
  					],
  					[
  						21.908,
  						51.903
  					],
  					[
  						21.8856,
  						51.9119
  					],
  					[
  						21.89,
  						51.9284
  					],
  					[
  						21.8664,
  						51.9434
  					],
  					[
  						21.8892,
  						51.9732
  					],
  					[
  						21.9447,
  						51.9925
  					],
  					[
  						21.9467,
  						51.9929
  					],
  					[
  						21.967,
  						51.9888
  					],
  					[
  						22.0265,
  						52.0157
  					],
  					[
  						22.0508,
  						52.0206
  					],
  					[
  						22.0766,
  						52.0059
  					],
  					[
  						22.1374,
  						52.0062
  					],
  					[
  						22.1519,
  						52.0284
  					],
  					[
  						22.2537,
  						52.0045
  					],
  					[
  						22.286,
  						52.0195
  					],
  					[
  						22.2975,
  						52.0374
  					],
  					[
  						22.3227,
  						52.0369
  					],
  					[
  						22.316,
  						52.014
  					],
  					[
  						22.3449,
  						51.9968
  					],
  					[
  						22.3843,
  						52.0163
  					],
  					[
  						22.425,
  						52.015
  					],
  					[
  						22.456,
  						52.0296
  					],
  					[
  						22.4833,
  						52.0672
  					],
  					[
  						22.5159,
  						52.0684
  					],
  					[
  						22.5475,
  						52.0445
  					],
  					[
  						22.6083,
  						52.037
  					],
  					[
  						22.6229,
  						52.0187
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 11,
  			name: "powiat tomaszowski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.6229,
  						50.684
  					],
  					[
  						23.6534,
  						50.6811
  					],
  					[
  						23.6715,
  						50.6903
  					],
  					[
  						23.7229,
  						50.6928
  					],
  					[
  						23.7027,
  						50.6732
  					],
  					[
  						23.7187,
  						50.6487
  					],
  					[
  						23.773,
  						50.6404
  					],
  					[
  						23.7569,
  						50.624
  					],
  					[
  						23.7534,
  						50.5982
  					],
  					[
  						23.7777,
  						50.5886
  					],
  					[
  						23.8053,
  						50.5921
  					],
  					[
  						23.8496,
  						50.5759
  					],
  					[
  						23.8582,
  						50.5564
  					],
  					[
  						23.8889,
  						50.5569
  					],
  					[
  						23.9199,
  						50.578
  					],
  					[
  						23.9639,
  						50.5679
  					],
  					[
  						23.9878,
  						50.5485
  					],
  					[
  						23.9578,
  						50.5447
  					],
  					[
  						23.9616,
  						50.5265
  					],
  					[
  						23.9191,
  						50.5042
  					],
  					[
  						23.9027,
  						50.4811
  					],
  					[
  						23.8757,
  						50.4713
  					],
  					[
  						23.9159,
  						50.456
  					],
  					[
  						23.9378,
  						50.4398
  					],
  					[
  						23.9907,
  						50.4317
  					],
  					[
  						23.9747,
  						50.4129
  					],
  					[
  						23.8034,
  						50.4048
  					],
  					[
  						23.727,
  						50.388
  					],
  					[
  						23.7031,
  						50.3753
  					],
  					[
  						23.6863,
  						50.3316
  					],
  					[
  						23.6388,
  						50.3205
  					],
  					[
  						23.581,
  						50.266
  					],
  					[
  						23.5479,
  						50.2518
  					],
  					[
  						23.5089,
  						50.2613
  					],
  					[
  						23.5179,
  						50.2897
  					],
  					[
  						23.4999,
  						50.2995
  					],
  					[
  						23.47,
  						50.2936
  					],
  					[
  						23.457,
  						50.3032
  					],
  					[
  						23.4065,
  						50.3058
  					],
  					[
  						23.4362,
  						50.3454
  					],
  					[
  						23.405,
  						50.364
  					],
  					[
  						23.3789,
  						50.3683
  					],
  					[
  						23.3535,
  						50.4019
  					],
  					[
  						23.3176,
  						50.3927
  					],
  					[
  						23.3053,
  						50.38
  					],
  					[
  						23.2521,
  						50.3653
  					],
  					[
  						23.1838,
  						50.396
  					],
  					[
  						23.1413,
  						50.3667
  					],
  					[
  						23.048,
  						50.4216
  					],
  					[
  						23.0946,
  						50.4565
  					],
  					[
  						23.1167,
  						50.4417
  					],
  					[
  						23.1166,
  						50.4667
  					],
  					[
  						23.1796,
  						50.4963
  					],
  					[
  						23.2153,
  						50.5058
  					],
  					[
  						23.238,
  						50.4869
  					],
  					[
  						23.289,
  						50.4908
  					],
  					[
  						23.3145,
  						50.5032
  					],
  					[
  						23.3257,
  						50.5401
  					],
  					[
  						23.2949,
  						50.5475
  					],
  					[
  						23.3097,
  						50.5751
  					],
  					[
  						23.3126,
  						50.6091
  					],
  					[
  						23.3958,
  						50.6089
  					],
  					[
  						23.4292,
  						50.5917
  					],
  					[
  						23.4888,
  						50.593
  					],
  					[
  						23.5573,
  						50.6006
  					],
  					[
  						23.5982,
  						50.614
  					],
  					[
  						23.6031,
  						50.639
  					],
  					[
  						23.5962,
  						50.6788
  					],
  					[
  						23.6229,
  						50.684
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 12,
  			name: "powiat Chełm",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.4899,
  						51.1033
  					],
  					[
  						23.4528,
  						51.1159
  					],
  					[
  						23.42,
  						51.1489
  					],
  					[
  						23.463,
  						51.1679
  					],
  					[
  						23.5002,
  						51.1513
  					],
  					[
  						23.5462,
  						51.1412
  					],
  					[
  						23.5302,
  						51.1105
  					],
  					[
  						23.4899,
  						51.1033
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 13,
  			name: "powiat brzeski",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.5111,
  						50.1385
  					],
  					[
  						20.5346,
  						50.1461
  					],
  					[
  						20.5802,
  						50.1418
  					],
  					[
  						20.636,
  						50.1699
  					],
  					[
  						20.6815,
  						50.2008
  					],
  					[
  						20.702,
  						50.1863
  					],
  					[
  						20.6967,
  						50.1637
  					],
  					[
  						20.7446,
  						50.1477
  					],
  					[
  						20.7593,
  						50.1333
  					],
  					[
  						20.7813,
  						50.0702
  					],
  					[
  						20.7576,
  						50.0527
  					],
  					[
  						20.755,
  						50.0329
  					],
  					[
  						20.769,
  						50.0202
  					],
  					[
  						20.7554,
  						49.9999
  					],
  					[
  						20.7591,
  						49.9769
  					],
  					[
  						20.757,
  						49.9421
  					],
  					[
  						20.7558,
  						49.9414
  					],
  					[
  						20.7541,
  						49.94
  					],
  					[
  						20.754,
  						49.94
  					],
  					[
  						20.7541,
  						49.94
  					],
  					[
  						20.7534,
  						49.9394
  					],
  					[
  						20.7534,
  						49.9368
  					],
  					[
  						20.7538,
  						49.9365
  					],
  					[
  						20.7537,
  						49.9357
  					],
  					[
  						20.7546,
  						49.9339
  					],
  					[
  						20.7556,
  						49.933
  					],
  					[
  						20.7582,
  						49.9293
  					],
  					[
  						20.7576,
  						49.9271
  					],
  					[
  						20.7575,
  						49.9271
  					],
  					[
  						20.7576,
  						49.9271
  					],
  					[
  						20.7575,
  						49.9271
  					],
  					[
  						20.7579,
  						49.9261
  					],
  					[
  						20.7583,
  						49.9252
  					],
  					[
  						20.7667,
  						49.9014
  					],
  					[
  						20.757,
  						49.8986
  					],
  					[
  						20.7209,
  						49.8803
  					],
  					[
  						20.733,
  						49.8558
  					],
  					[
  						20.7148,
  						49.8511
  					],
  					[
  						20.7132,
  						49.8066
  					],
  					[
  						20.6663,
  						49.8061
  					],
  					[
  						20.6296,
  						49.7963
  					],
  					[
  						20.5851,
  						49.7619
  					],
  					[
  						20.5181,
  						49.7982
  					],
  					[
  						20.5346,
  						49.8144
  					],
  					[
  						20.5224,
  						49.8287
  					],
  					[
  						20.5785,
  						49.8379
  					],
  					[
  						20.5547,
  						49.8846
  					],
  					[
  						20.5658,
  						49.8956
  					],
  					[
  						20.5549,
  						49.9142
  					],
  					[
  						20.5413,
  						49.9235
  					],
  					[
  						20.5389,
  						49.9283
  					],
  					[
  						20.5368,
  						49.9306
  					],
  					[
  						20.5367,
  						49.9306
  					],
  					[
  						20.5368,
  						49.9306
  					],
  					[
  						20.5367,
  						49.9306
  					],
  					[
  						20.5245,
  						49.9459
  					],
  					[
  						20.5504,
  						49.9572
  					],
  					[
  						20.5522,
  						49.9943
  					],
  					[
  						20.5774,
  						49.9986
  					],
  					[
  						20.5982,
  						50.044
  					],
  					[
  						20.6238,
  						50.0655
  					],
  					[
  						20.5658,
  						50.0804
  					],
  					[
  						20.529,
  						50.0799
  					],
  					[
  						20.5291,
  						50.0995
  					],
  					[
  						20.5081,
  						50.1039
  					],
  					[
  						20.5111,
  						50.1385
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 14,
  			name: "powiat Kraków",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.0962,
  						50.1193
  					],
  					[
  						20.1431,
  						50.1065
  					],
  					[
  						20.16,
  						50.1215
  					],
  					[
  						20.2013,
  						50.1204
  					],
  					[
  						20.2091,
  						50.1156
  					],
  					[
  						20.1916,
  						50.0974
  					],
  					[
  						20.193,
  						50.0705
  					],
  					[
  						20.2173,
  						50.0534
  					],
  					[
  						20.1251,
  						50.0397
  					],
  					[
  						20.0798,
  						50.0359
  					],
  					[
  						20.0657,
  						50.0078
  					],
  					[
  						20.0186,
  						49.9859
  					],
  					[
  						19.9822,
  						49.9797
  					],
  					[
  						19.9771,
  						49.9809
  					],
  					[
  						19.9644,
  						49.9777
  					],
  					[
  						19.9634,
  						49.9686
  					],
  					[
  						19.9257,
  						49.9813
  					],
  					[
  						19.8874,
  						49.9798
  					],
  					[
  						19.8874,
  						49.9796
  					],
  					[
  						19.8823,
  						49.975
  					],
  					[
  						19.8822,
  						49.975
  					],
  					[
  						19.8823,
  						49.975
  					],
  					[
  						19.8822,
  						49.975
  					],
  					[
  						19.8633,
  						49.9748
  					],
  					[
  						19.8495,
  						49.9947
  					],
  					[
  						19.8009,
  						49.994
  					],
  					[
  						19.7922,
  						50.0118
  					],
  					[
  						19.8213,
  						50.0577
  					],
  					[
  						19.8112,
  						50.0802
  					],
  					[
  						19.8515,
  						50.0944
  					],
  					[
  						19.8925,
  						50.1261
  					],
  					[
  						19.9245,
  						50.1113
  					],
  					[
  						20.0275,
  						50.1044
  					],
  					[
  						20.0386,
  						50.1132
  					],
  					[
  						20.079,
  						50.1124
  					],
  					[
  						20.0962,
  						50.1193
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 15,
  			name: "powiat zgierski",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.5622,
  						52.0347
  					],
  					[
  						19.6207,
  						52.0288
  					],
  					[
  						19.6338,
  						52.0192
  					],
  					[
  						19.6795,
  						52.0292
  					],
  					[
  						19.7195,
  						52.0135
  					],
  					[
  						19.7308,
  						51.9967
  					],
  					[
  						19.7862,
  						51.9867
  					],
  					[
  						19.8048,
  						51.9745
  					],
  					[
  						19.8319,
  						51.9769
  					],
  					[
  						19.84,
  						51.952
  					],
  					[
  						19.7646,
  						51.9452
  					],
  					[
  						19.7243,
  						51.9465
  					],
  					[
  						19.6897,
  						51.9092
  					],
  					[
  						19.6898,
  						51.9055
  					],
  					[
  						19.7064,
  						51.8793
  					],
  					[
  						19.6605,
  						51.8538
  					],
  					[
  						19.6223,
  						51.8576
  					],
  					[
  						19.6101,
  						51.8473
  					],
  					[
  						19.568,
  						51.8376
  					],
  					[
  						19.4903,
  						51.8591
  					],
  					[
  						19.4567,
  						51.8487
  					],
  					[
  						19.4559,
  						51.8363
  					],
  					[
  						19.3873,
  						51.8259
  					],
  					[
  						19.3825,
  						51.8367
  					],
  					[
  						19.3754,
  						51.8368
  					],
  					[
  						19.3741,
  						51.8368
  					],
  					[
  						19.3741,
  						51.8369
  					],
  					[
  						19.3741,
  						51.8368
  					],
  					[
  						19.374,
  						51.8369
  					],
  					[
  						19.3741,
  						51.8369
  					],
  					[
  						19.374,
  						51.8369
  					],
  					[
  						19.3366,
  						51.8202
  					],
  					[
  						19.3373,
  						51.7841
  					],
  					[
  						19.2974,
  						51.7712
  					],
  					[
  						19.2401,
  						51.7966
  					],
  					[
  						19.1618,
  						51.8125
  					],
  					[
  						19.1386,
  						51.8251
  					],
  					[
  						19.1572,
  						51.8718
  					],
  					[
  						19.1786,
  						51.875
  					],
  					[
  						19.1905,
  						51.8993
  					],
  					[
  						19.1795,
  						51.9154
  					],
  					[
  						19.1449,
  						51.9057
  					],
  					[
  						19.1363,
  						51.928
  					],
  					[
  						19.1517,
  						51.9647
  					],
  					[
  						19.1286,
  						52.0005
  					],
  					[
  						19.1295,
  						52.0125
  					],
  					[
  						19.1716,
  						52.0092
  					],
  					[
  						19.22,
  						52.014
  					],
  					[
  						19.2766,
  						52.0356
  					],
  					[
  						19.2937,
  						52.0231
  					],
  					[
  						19.3622,
  						52.0228
  					],
  					[
  						19.3704,
  						52.0101
  					],
  					[
  						19.4658,
  						51.997
  					],
  					[
  						19.558,
  						52.0217
  					],
  					[
  						19.5622,
  						52.0347
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 16,
  			name: "powiat sulęciński",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.4358,
  						52.3756
  					],
  					[
  						15.4049,
  						52.3705
  					],
  					[
  						15.3576,
  						52.3794
  					],
  					[
  						15.3449,
  						52.3659
  					],
  					[
  						15.2899,
  						52.3764
  					],
  					[
  						15.2574,
  						52.3716
  					],
  					[
  						15.2425,
  						52.3428
  					],
  					[
  						15.2427,
  						52.3117
  					],
  					[
  						15.2022,
  						52.3098
  					],
  					[
  						15.2263,
  						52.2865
  					],
  					[
  						15.1549,
  						52.2377
  					],
  					[
  						15.0913,
  						52.2261
  					],
  					[
  						15.0703,
  						52.2324
  					],
  					[
  						15.009,
  						52.2152
  					],
  					[
  						14.9636,
  						52.2093
  					],
  					[
  						14.9133,
  						52.2099
  					],
  					[
  						14.8972,
  						52.2402
  					],
  					[
  						14.9095,
  						52.2742
  					],
  					[
  						14.8688,
  						52.2916
  					],
  					[
  						14.8802,
  						52.3111
  					],
  					[
  						14.906,
  						52.3268
  					],
  					[
  						14.8748,
  						52.3418
  					],
  					[
  						14.8769,
  						52.3624
  					],
  					[
  						14.92,
  						52.3668
  					],
  					[
  						14.9204,
  						52.3674
  					],
  					[
  						14.9261,
  						52.3969
  					],
  					[
  						14.9465,
  						52.4096
  					],
  					[
  						14.9817,
  						52.4032
  					],
  					[
  						14.9835,
  						52.3913
  					],
  					[
  						15.0245,
  						52.3911
  					],
  					[
  						15.0354,
  						52.413
  					],
  					[
  						15.0247,
  						52.4293
  					],
  					[
  						15.0335,
  						52.4544
  					],
  					[
  						14.9943,
  						52.4601
  					],
  					[
  						14.9921,
  						52.4614
  					],
  					[
  						14.9722,
  						52.5061
  					],
  					[
  						14.9819,
  						52.5235
  					],
  					[
  						14.929,
  						52.5299
  					],
  					[
  						14.8763,
  						52.5118
  					],
  					[
  						14.8236,
  						52.5072
  					],
  					[
  						14.8055,
  						52.5253
  					],
  					[
  						14.8131,
  						52.5391
  					],
  					[
  						14.711,
  						52.5471
  					],
  					[
  						14.6473,
  						52.5722
  					],
  					[
  						14.7044,
  						52.5923
  					],
  					[
  						14.7605,
  						52.6039
  					],
  					[
  						14.7846,
  						52.6015
  					],
  					[
  						14.8466,
  						52.6213
  					],
  					[
  						14.8803,
  						52.6154
  					],
  					[
  						14.9353,
  						52.6197
  					],
  					[
  						14.9992,
  						52.6403
  					],
  					[
  						15.037,
  						52.6422
  					],
  					[
  						15.0642,
  						52.6211
  					],
  					[
  						15.107,
  						52.618
  					],
  					[
  						15.1374,
  						52.644
  					],
  					[
  						15.1641,
  						52.6472
  					],
  					[
  						15.1947,
  						52.6356
  					],
  					[
  						15.211,
  						52.6081
  					],
  					[
  						15.2096,
  						52.5844
  					],
  					[
  						15.306,
  						52.5901
  					],
  					[
  						15.3102,
  						52.5439
  					],
  					[
  						15.2763,
  						52.541
  					],
  					[
  						15.2753,
  						52.5083
  					],
  					[
  						15.2658,
  						52.4852
  					],
  					[
  						15.3042,
  						52.4733
  					],
  					[
  						15.3221,
  						52.455
  					],
  					[
  						15.3338,
  						52.4263
  					],
  					[
  						15.3613,
  						52.416
  					],
  					[
  						15.4087,
  						52.4218
  					],
  					[
  						15.45,
  						52.3863
  					],
  					[
  						15.4358,
  						52.3756
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 17,
  			name: "powiat łańcucki",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.2335,
  						50.2468
  					],
  					[
  						22.2686,
  						50.2275
  					],
  					[
  						22.2843,
  						50.2048
  					],
  					[
  						22.3546,
  						50.1772
  					],
  					[
  						22.4093,
  						50.1259
  					],
  					[
  						22.4479,
  						50.1231
  					],
  					[
  						22.4219,
  						50.1094
  					],
  					[
  						22.4125,
  						50.0905
  					],
  					[
  						22.3814,
  						50.0839
  					],
  					[
  						22.3742,
  						50.054
  					],
  					[
  						22.3414,
  						50.0518
  					],
  					[
  						22.3424,
  						50.0058
  					],
  					[
  						22.3421,
  						50.0047
  					],
  					[
  						22.3044,
  						49.9856
  					],
  					[
  						22.3168,
  						49.972
  					],
  					[
  						22.3049,
  						49.9449
  					],
  					[
  						22.2761,
  						49.9265
  					],
  					[
  						22.2342,
  						49.9315
  					],
  					[
  						22.2254,
  						49.9531
  					],
  					[
  						22.2263,
  						49.9541
  					],
  					[
  						22.2261,
  						49.9565
  					],
  					[
  						22.2259,
  						49.9582
  					],
  					[
  						22.2257,
  						49.9585
  					],
  					[
  						22.2259,
  						49.9632
  					],
  					[
  						22.2265,
  						49.9645
  					],
  					[
  						22.227,
  						49.9648
  					],
  					[
  						22.2279,
  						49.9651
  					],
  					[
  						22.2298,
  						49.9661
  					],
  					[
  						22.2301,
  						49.9662
  					],
  					[
  						22.2302,
  						49.9662
  					],
  					[
  						22.2301,
  						49.9662
  					],
  					[
  						22.2302,
  						49.9662
  					],
  					[
  						22.23,
  						49.9668
  					],
  					[
  						22.2296,
  						49.9671
  					],
  					[
  						22.2287,
  						49.9676
  					],
  					[
  						22.2286,
  						49.9677
  					],
  					[
  						22.2287,
  						49.9676
  					],
  					[
  						22.2287,
  						49.9677
  					],
  					[
  						22.2286,
  						49.9677
  					],
  					[
  						22.2272,
  						49.9686
  					],
  					[
  						22.2263,
  						49.9691
  					],
  					[
  						22.226,
  						49.9691
  					],
  					[
  						22.2106,
  						49.9712
  					],
  					[
  						22.1874,
  						49.9988
  					],
  					[
  						22.1447,
  						50.0087
  					],
  					[
  						22.1332,
  						50.0206
  					],
  					[
  						22.1307,
  						50.0262
  					],
  					[
  						22.1308,
  						50.0274
  					],
  					[
  						22.131,
  						50.0274
  					],
  					[
  						22.1308,
  						50.0274
  					],
  					[
  						22.131,
  						50.0278
  					],
  					[
  						22.1228,
  						50.0434
  					],
  					[
  						22.169,
  						50.0861
  					],
  					[
  						22.171,
  						50.1061
  					],
  					[
  						22.1281,
  						50.1148
  					],
  					[
  						22.1071,
  						50.139
  					],
  					[
  						22.0956,
  						50.1736
  					],
  					[
  						22.1427,
  						50.1849
  					],
  					[
  						22.1774,
  						50.1741
  					],
  					[
  						22.1966,
  						50.2063
  					],
  					[
  						22.1976,
  						50.2337
  					],
  					[
  						22.2335,
  						50.2468
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 18,
  			name: "powiat brzeski",
  			province: "Opolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.5437,
  						50.9998
  					],
  					[
  						17.5682,
  						50.977
  					],
  					[
  						17.6089,
  						50.9829
  					],
  					[
  						17.6659,
  						50.9745
  					],
  					[
  						17.6542,
  						50.9632
  					],
  					[
  						17.692,
  						50.919
  					],
  					[
  						17.6868,
  						50.8976
  					],
  					[
  						17.6597,
  						50.8993
  					],
  					[
  						17.6215,
  						50.8657
  					],
  					[
  						17.6048,
  						50.8628
  					],
  					[
  						17.6036,
  						50.8305
  					],
  					[
  						17.6708,
  						50.8099
  					],
  					[
  						17.6955,
  						50.7954
  					],
  					[
  						17.7506,
  						50.78
  					],
  					[
  						17.7382,
  						50.7531
  					],
  					[
  						17.7318,
  						50.7325
  					],
  					[
  						17.7059,
  						50.7145
  					],
  					[
  						17.6766,
  						50.7286
  					],
  					[
  						17.6448,
  						50.6816
  					],
  					[
  						17.6066,
  						50.7108
  					],
  					[
  						17.5399,
  						50.7206
  					],
  					[
  						17.5156,
  						50.7288
  					],
  					[
  						17.4668,
  						50.6151
  					],
  					[
  						17.4185,
  						50.6108
  					],
  					[
  						17.4155,
  						50.633
  					],
  					[
  						17.3984,
  						50.6446
  					],
  					[
  						17.4055,
  						50.6656
  					],
  					[
  						17.374,
  						50.6695
  					],
  					[
  						17.3596,
  						50.6414
  					],
  					[
  						17.332,
  						50.6315
  					],
  					[
  						17.3348,
  						50.6152
  					],
  					[
  						17.2739,
  						50.6023
  					],
  					[
  						17.2768,
  						50.5846
  					],
  					[
  						17.2199,
  						50.5861
  					],
  					[
  						17.2159,
  						50.6039
  					],
  					[
  						17.2322,
  						50.6145
  					],
  					[
  						17.2302,
  						50.6407
  					],
  					[
  						17.2395,
  						50.6713
  					],
  					[
  						17.2591,
  						50.6905
  					],
  					[
  						17.2202,
  						50.7014
  					],
  					[
  						17.252,
  						50.7177
  					],
  					[
  						17.2756,
  						50.7446
  					],
  					[
  						17.2976,
  						50.7533
  					],
  					[
  						17.2664,
  						50.7718
  					],
  					[
  						17.2908,
  						50.7925
  					],
  					[
  						17.3451,
  						50.7843
  					],
  					[
  						17.3547,
  						50.7948
  					],
  					[
  						17.3183,
  						50.8211
  					],
  					[
  						17.3427,
  						50.8275
  					],
  					[
  						17.3282,
  						50.8506
  					],
  					[
  						17.3842,
  						50.862
  					],
  					[
  						17.3939,
  						50.8878
  					],
  					[
  						17.3525,
  						50.9007
  					],
  					[
  						17.3816,
  						50.9247
  					],
  					[
  						17.4075,
  						50.9107
  					],
  					[
  						17.4325,
  						50.9162
  					],
  					[
  						17.438,
  						50.9399
  					],
  					[
  						17.4314,
  						50.9671
  					],
  					[
  						17.5016,
  						50.9756
  					],
  					[
  						17.5047,
  						50.985
  					],
  					[
  						17.5437,
  						50.9998
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 19,
  			name: "powiat ostrzeszowski",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.1773,
  						51.5457
  					],
  					[
  						18.2044,
  						51.5329
  					],
  					[
  						18.2592,
  						51.5469
  					],
  					[
  						18.3187,
  						51.5462
  					],
  					[
  						18.3586,
  						51.5364
  					],
  					[
  						18.3801,
  						51.5182
  					],
  					[
  						18.3828,
  						51.4773
  					],
  					[
  						18.3616,
  						51.468
  					],
  					[
  						18.3263,
  						51.4198
  					],
  					[
  						18.2553,
  						51.4388
  					],
  					[
  						18.2279,
  						51.4519
  					],
  					[
  						18.1882,
  						51.4412
  					],
  					[
  						18.2113,
  						51.423
  					],
  					[
  						18.2062,
  						51.401
  					],
  					[
  						18.1897,
  						51.3865
  					],
  					[
  						18.1493,
  						51.3914
  					],
  					[
  						18.1351,
  						51.3608
  					],
  					[
  						18.0988,
  						51.362
  					],
  					[
  						18.067,
  						51.3809
  					],
  					[
  						18.0647,
  						51.3821
  					],
  					[
  						18.0476,
  						51.3934
  					],
  					[
  						17.96,
  						51.3387
  					],
  					[
  						17.9229,
  						51.3658
  					],
  					[
  						17.8982,
  						51.3475
  					],
  					[
  						17.876,
  						51.3493
  					],
  					[
  						17.8762,
  						51.3487
  					],
  					[
  						17.8762,
  						51.3477
  					],
  					[
  						17.8763,
  						51.3477
  					],
  					[
  						17.8762,
  						51.3477
  					],
  					[
  						17.8763,
  						51.3477
  					],
  					[
  						17.8762,
  						51.3454
  					],
  					[
  						17.8346,
  						51.3307
  					],
  					[
  						17.8244,
  						51.294
  					],
  					[
  						17.7605,
  						51.3097
  					],
  					[
  						17.7649,
  						51.3164
  					],
  					[
  						17.7438,
  						51.3287
  					],
  					[
  						17.7436,
  						51.3465
  					],
  					[
  						17.7098,
  						51.3589
  					],
  					[
  						17.72,
  						51.3861
  					],
  					[
  						17.75,
  						51.4113
  					],
  					[
  						17.7494,
  						51.4276
  					],
  					[
  						17.7845,
  						51.4656
  					],
  					[
  						17.7537,
  						51.4634
  					],
  					[
  						17.7416,
  						51.4779
  					],
  					[
  						17.7836,
  						51.4961
  					],
  					[
  						17.8233,
  						51.4811
  					],
  					[
  						17.8612,
  						51.497
  					],
  					[
  						17.9003,
  						51.5377
  					],
  					[
  						17.9297,
  						51.5463
  					],
  					[
  						17.9483,
  						51.569
  					],
  					[
  						17.9819,
  						51.5632
  					],
  					[
  						18.0212,
  						51.5699
  					],
  					[
  						18.0607,
  						51.558
  					],
  					[
  						18.0789,
  						51.5407
  					],
  					[
  						18.1166,
  						51.544
  					],
  					[
  						18.1505,
  						51.5373
  					],
  					[
  						18.1773,
  						51.5457
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 20,
  			name: "powiat Radom",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.2564,
  						51.4317
  					],
  					[
  						21.2197,
  						51.424
  					],
  					[
  						21.2017,
  						51.4027
  					],
  					[
  						21.2207,
  						51.3723
  					],
  					[
  						21.1947,
  						51.3486
  					],
  					[
  						21.1361,
  						51.358
  					],
  					[
  						21.0941,
  						51.3496
  					],
  					[
  						21.0533,
  						51.3698
  					],
  					[
  						21.0585,
  						51.3986
  					],
  					[
  						21.1057,
  						51.4083
  					],
  					[
  						21.1265,
  						51.4369
  					],
  					[
  						21.1194,
  						51.4514
  					],
  					[
  						21.1774,
  						51.48
  					],
  					[
  						21.2564,
  						51.4317
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 21,
  			name: "powiat żyrardowski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.2519,
  						52.1173
  					],
  					[
  						20.2687,
  						52.126
  					],
  					[
  						20.2684,
  						52.1461
  					],
  					[
  						20.3089,
  						52.1377
  					],
  					[
  						20.3469,
  						52.1512
  					],
  					[
  						20.3476,
  						52.1314
  					],
  					[
  						20.411,
  						52.1403
  					],
  					[
  						20.421,
  						52.1213
  					],
  					[
  						20.4543,
  						52.0983
  					],
  					[
  						20.4442,
  						52.084
  					],
  					[
  						20.4748,
  						52.0566
  					],
  					[
  						20.4622,
  						52.042
  					],
  					[
  						20.4956,
  						52.0336
  					],
  					[
  						20.5316,
  						52.048
  					],
  					[
  						20.6214,
  						52.0481
  					],
  					[
  						20.6141,
  						52.0319
  					],
  					[
  						20.6127,
  						51.9832
  					],
  					[
  						20.5984,
  						51.974
  					],
  					[
  						20.6579,
  						51.9255
  					],
  					[
  						20.6438,
  						51.9017
  					],
  					[
  						20.6434,
  						51.8515
  					],
  					[
  						20.6054,
  						51.8496
  					],
  					[
  						20.5906,
  						51.8494
  					],
  					[
  						20.5691,
  						51.8877
  					],
  					[
  						20.5188,
  						51.8924
  					],
  					[
  						20.4983,
  						51.8895
  					],
  					[
  						20.4755,
  						51.9311
  					],
  					[
  						20.4394,
  						51.9435
  					],
  					[
  						20.4136,
  						51.9304
  					],
  					[
  						20.3538,
  						51.9197
  					],
  					[
  						20.3239,
  						51.922
  					],
  					[
  						20.2895,
  						51.9383
  					],
  					[
  						20.2427,
  						51.9345
  					],
  					[
  						20.2407,
  						51.951
  					],
  					[
  						20.2715,
  						51.9713
  					],
  					[
  						20.2551,
  						51.9956
  					],
  					[
  						20.2256,
  						52.005
  					],
  					[
  						20.2006,
  						52.0301
  					],
  					[
  						20.2531,
  						52.0553
  					],
  					[
  						20.2699,
  						52.0771
  					],
  					[
  						20.2689,
  						52.1007
  					],
  					[
  						20.2519,
  						52.1173
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 22,
  			name: "powiat obornicki",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.7982,
  						52.7951
  					],
  					[
  						16.7253,
  						52.8339
  					],
  					[
  						16.7286,
  						52.8522
  					],
  					[
  						16.7606,
  						52.8657
  					],
  					[
  						16.7802,
  						52.8888
  					],
  					[
  						16.8079,
  						52.8538
  					],
  					[
  						16.8307,
  						52.8584
  					],
  					[
  						16.8848,
  						52.8401
  					],
  					[
  						16.8865,
  						52.831
  					],
  					[
  						16.9412,
  						52.8172
  					],
  					[
  						16.973,
  						52.8318
  					],
  					[
  						17.007,
  						52.8284
  					],
  					[
  						17.0064,
  						52.7823
  					],
  					[
  						17.0695,
  						52.7748
  					],
  					[
  						17.0991,
  						52.7828
  					],
  					[
  						17.1145,
  						52.7737
  					],
  					[
  						17.1325,
  						52.7323
  					],
  					[
  						17.1163,
  						52.7272
  					],
  					[
  						17.1058,
  						52.6886
  					],
  					[
  						17.0866,
  						52.6818
  					],
  					[
  						17.0443,
  						52.6854
  					],
  					[
  						17.0329,
  						52.6762
  					],
  					[
  						16.9946,
  						52.6696
  					],
  					[
  						16.9718,
  						52.6573
  					],
  					[
  						16.9284,
  						52.6546
  					],
  					[
  						16.9181,
  						52.6346
  					],
  					[
  						16.9262,
  						52.5998
  					],
  					[
  						16.8973,
  						52.5842
  					],
  					[
  						16.7801,
  						52.567
  					],
  					[
  						16.7298,
  						52.5661
  					],
  					[
  						16.6996,
  						52.5728
  					],
  					[
  						16.6545,
  						52.5985
  					],
  					[
  						16.641,
  						52.6278
  					],
  					[
  						16.6001,
  						52.6667
  					],
  					[
  						16.6371,
  						52.6895
  					],
  					[
  						16.588,
  						52.7113
  					],
  					[
  						16.5833,
  						52.7431
  					],
  					[
  						16.6303,
  						52.751
  					],
  					[
  						16.7044,
  						52.7497
  					],
  					[
  						16.7111,
  						52.7263
  					],
  					[
  						16.7324,
  						52.7495
  					],
  					[
  						16.7982,
  						52.7951
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 23,
  			name: "powiat leszczyński",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.4264,
  						51.9737
  					],
  					[
  						16.4256,
  						51.9585
  					],
  					[
  						16.4939,
  						51.9441
  					],
  					[
  						16.5037,
  						51.9589
  					],
  					[
  						16.5523,
  						51.9556
  					],
  					[
  						16.5816,
  						51.9677
  					],
  					[
  						16.6045,
  						51.9621
  					],
  					[
  						16.7013,
  						51.9669
  					],
  					[
  						16.7779,
  						51.9482
  					],
  					[
  						16.8039,
  						51.9491
  					],
  					[
  						16.8169,
  						51.9355
  					],
  					[
  						16.8601,
  						51.9271
  					],
  					[
  						16.8637,
  						51.9123
  					],
  					[
  						16.9005,
  						51.8797
  					],
  					[
  						16.8982,
  						51.8628
  					],
  					[
  						16.8512,
  						51.842
  					],
  					[
  						16.862,
  						51.8135
  					],
  					[
  						16.8493,
  						51.7987
  					],
  					[
  						16.7691,
  						51.784
  					],
  					[
  						16.7416,
  						51.7923
  					],
  					[
  						16.7289,
  						51.7334
  					],
  					[
  						16.6824,
  						51.7049
  					],
  					[
  						16.6449,
  						51.722
  					],
  					[
  						16.6399,
  						51.735
  					],
  					[
  						16.5806,
  						51.7521
  					],
  					[
  						16.5767,
  						51.7686
  					],
  					[
  						16.5452,
  						51.7801
  					],
  					[
  						16.4492,
  						51.788
  					],
  					[
  						16.4162,
  						51.7849
  					],
  					[
  						16.4018,
  						51.8045
  					],
  					[
  						16.4005,
  						51.8378
  					],
  					[
  						16.3351,
  						51.8711
  					],
  					[
  						16.3204,
  						51.8869
  					],
  					[
  						16.2803,
  						51.9002
  					],
  					[
  						16.2521,
  						51.9005
  					],
  					[
  						16.2149,
  						51.8698
  					],
  					[
  						16.1929,
  						51.8851
  					],
  					[
  						16.169,
  						51.8845
  					],
  					[
  						16.1087,
  						51.9036
  					],
  					[
  						16.1382,
  						51.9255
  					],
  					[
  						16.1262,
  						51.9339
  					],
  					[
  						16.2012,
  						51.9424
  					],
  					[
  						16.2791,
  						51.9292
  					],
  					[
  						16.2881,
  						51.9458
  					],
  					[
  						16.3314,
  						51.9866
  					],
  					[
  						16.4264,
  						51.9737
  					]
  				],
  				[
  					[
  						16.6088,
  						51.8292
  					],
  					[
  						16.6191,
  						51.8718
  					],
  					[
  						16.5714,
  						51.8734
  					],
  					[
  						16.5369,
  						51.8618
  					],
  					[
  						16.5425,
  						51.8249
  					],
  					[
  						16.5419,
  						51.8246
  					],
  					[
  						16.6023,
  						51.8167
  					],
  					[
  						16.6088,
  						51.8292
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 24,
  			name: "powiat Siedlce",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.2409,
  						52.1314
  					],
  					[
  						22.2253,
  						52.1708
  					],
  					[
  						22.2639,
  						52.1957
  					],
  					[
  						22.3301,
  						52.1618
  					],
  					[
  						22.3136,
  						52.1487
  					],
  					[
  						22.2662,
  						52.1452
  					],
  					[
  						22.2409,
  						52.1314
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 25,
  			name: "powiat Leszno",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.5419,
  						51.8246
  					],
  					[
  						16.5425,
  						51.8249
  					],
  					[
  						16.5369,
  						51.8618
  					],
  					[
  						16.5714,
  						51.8734
  					],
  					[
  						16.6191,
  						51.8718
  					],
  					[
  						16.6088,
  						51.8292
  					],
  					[
  						16.6023,
  						51.8167
  					],
  					[
  						16.5419,
  						51.8246
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 26,
  			name: "powiat kolski",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.6577,
  						52.4236
  					],
  					[
  						18.6848,
  						52.428
  					],
  					[
  						18.6811,
  						52.4002
  					],
  					[
  						18.7108,
  						52.4007
  					],
  					[
  						18.754,
  						52.361
  					],
  					[
  						18.7555,
  						52.3328
  					],
  					[
  						18.7786,
  						52.3344
  					],
  					[
  						18.8142,
  						52.3524
  					],
  					[
  						18.8356,
  						52.3431
  					],
  					[
  						18.8699,
  						52.3601
  					],
  					[
  						18.9125,
  						52.3662
  					],
  					[
  						18.9408,
  						52.3915
  					],
  					[
  						18.9695,
  						52.3778
  					],
  					[
  						19.0081,
  						52.3493
  					],
  					[
  						19.0471,
  						52.3328
  					],
  					[
  						19.0363,
  						52.3154
  					],
  					[
  						19.05,
  						52.2734
  					],
  					[
  						19.0948,
  						52.2706
  					],
  					[
  						19.1025,
  						52.2425
  					],
  					[
  						19.0805,
  						52.2385
  					],
  					[
  						19.0898,
  						52.2067
  					],
  					[
  						19.0776,
  						52.2001
  					],
  					[
  						19.0524,
  						52.2126
  					],
  					[
  						19.0202,
  						52.2154
  					],
  					[
  						18.9306,
  						52.1992
  					],
  					[
  						18.9182,
  						52.186
  					],
  					[
  						18.9111,
  						52.1327
  					],
  					[
  						18.9498,
  						52.1193
  					],
  					[
  						18.9308,
  						52.1043
  					],
  					[
  						18.9251,
  						52.0793
  					],
  					[
  						18.8421,
  						52.0802
  					],
  					[
  						18.8278,
  						52.0642
  					],
  					[
  						18.7865,
  						52.061
  					],
  					[
  						18.7528,
  						52.0765
  					],
  					[
  						18.7179,
  						52.0657
  					],
  					[
  						18.693,
  						52.0883
  					],
  					[
  						18.6863,
  						52.1279
  					],
  					[
  						18.6671,
  						52.1354
  					],
  					[
  						18.631,
  						52.1208
  					],
  					[
  						18.5267,
  						52.1366
  					],
  					[
  						18.4877,
  						52.1509
  					],
  					[
  						18.4648,
  						52.1708
  					],
  					[
  						18.4597,
  						52.2043
  					],
  					[
  						18.5276,
  						52.2392
  					],
  					[
  						18.5365,
  						52.2529
  					],
  					[
  						18.4906,
  						52.266
  					],
  					[
  						18.4853,
  						52.2968
  					],
  					[
  						18.5271,
  						52.295
  					],
  					[
  						18.531,
  						52.3059
  					],
  					[
  						18.5902,
  						52.3146
  					],
  					[
  						18.6159,
  						52.3666
  					],
  					[
  						18.6002,
  						52.4172
  					],
  					[
  						18.6577,
  						52.4236
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 27,
  			name: "powiat Łomża",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.0555,
  						53.1429
  					],
  					[
  						22.0151,
  						53.1521
  					],
  					[
  						22.0112,
  						53.1703
  					],
  					[
  						22.0378,
  						53.2012
  					],
  					[
  						22.0605,
  						53.215
  					],
  					[
  						22.0956,
  						53.1919
  					],
  					[
  						22.1057,
  						53.1633
  					],
  					[
  						22.0882,
  						53.1465
  					],
  					[
  						22.0555,
  						53.1429
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 28,
  			name: "powiat rawicki",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.1281,
  						51.702
  					],
  					[
  						17.1908,
  						51.6769
  					],
  					[
  						17.2326,
  						51.6714
  					],
  					[
  						17.2399,
  						51.6418
  					],
  					[
  						17.2574,
  						51.6428
  					],
  					[
  						17.2156,
  						51.6296
  					],
  					[
  						17.2083,
  						51.6112
  					],
  					[
  						17.2147,
  						51.5738
  					],
  					[
  						17.1255,
  						51.5653
  					],
  					[
  						17.1085,
  						51.576
  					],
  					[
  						17.0461,
  						51.556
  					],
  					[
  						16.9906,
  						51.55
  					],
  					[
  						16.9817,
  						51.5509
  					],
  					[
  						16.9279,
  						51.5524
  					],
  					[
  						16.8957,
  						51.5784
  					],
  					[
  						16.8508,
  						51.5799
  					],
  					[
  						16.8284,
  						51.5722
  					],
  					[
  						16.7996,
  						51.6035
  					],
  					[
  						16.772,
  						51.6136
  					],
  					[
  						16.7833,
  						51.641
  					],
  					[
  						16.7259,
  						51.6478
  					],
  					[
  						16.6814,
  						51.6469
  					],
  					[
  						16.6392,
  						51.666
  					],
  					[
  						16.6422,
  						51.6835
  					],
  					[
  						16.6824,
  						51.7049
  					],
  					[
  						16.7289,
  						51.7334
  					],
  					[
  						16.8033,
  						51.7464
  					],
  					[
  						16.8614,
  						51.7315
  					],
  					[
  						16.8587,
  						51.714
  					],
  					[
  						16.8867,
  						51.6946
  					],
  					[
  						16.9243,
  						51.6945
  					],
  					[
  						16.9373,
  						51.7128
  					],
  					[
  						16.96,
  						51.7123
  					],
  					[
  						16.9994,
  						51.6955
  					],
  					[
  						17.0363,
  						51.6984
  					],
  					[
  						17.0372,
  						51.7139
  					],
  					[
  						17.0791,
  						51.7196
  					],
  					[
  						17.1281,
  						51.702
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 29,
  			name: "powiat słupecki",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.9346,
  						52.0909
  					],
  					[
  						17.8527,
  						52.0734
  					],
  					[
  						17.8235,
  						52.0881
  					],
  					[
  						17.7707,
  						52.1093
  					],
  					[
  						17.779,
  						52.1393
  					],
  					[
  						17.8227,
  						52.1637
  					],
  					[
  						17.8301,
  						52.1925
  					],
  					[
  						17.8001,
  						52.191
  					],
  					[
  						17.7657,
  						52.2
  					],
  					[
  						17.7407,
  						52.2249
  					],
  					[
  						17.7818,
  						52.2472
  					],
  					[
  						17.7657,
  						52.258
  					],
  					[
  						17.7161,
  						52.2706
  					],
  					[
  						17.6924,
  						52.2958
  					],
  					[
  						17.7257,
  						52.3062
  					],
  					[
  						17.6965,
  						52.3487
  					],
  					[
  						17.7006,
  						52.3755
  					],
  					[
  						17.7397,
  						52.3767
  					],
  					[
  						17.7751,
  						52.3683
  					],
  					[
  						17.853,
  						52.3879
  					],
  					[
  						17.8513,
  						52.4055
  					],
  					[
  						17.8635,
  						52.4273
  					],
  					[
  						17.9088,
  						52.4444
  					],
  					[
  						17.9225,
  						52.4711
  					],
  					[
  						17.9118,
  						52.4773
  					],
  					[
  						17.9107,
  						52.5167
  					],
  					[
  						17.9417,
  						52.5234
  					],
  					[
  						17.9872,
  						52.5533
  					],
  					[
  						18.0954,
  						52.5531
  					],
  					[
  						18.1068,
  						52.5385
  					],
  					[
  						18.0902,
  						52.5205
  					],
  					[
  						18.1329,
  						52.5058
  					],
  					[
  						18.0839,
  						52.4765
  					],
  					[
  						18.0261,
  						52.4502
  					],
  					[
  						18.073,
  						52.4192
  					],
  					[
  						18.0898,
  						52.3836
  					],
  					[
  						18.0854,
  						52.3664
  					],
  					[
  						18.0521,
  						52.3313
  					],
  					[
  						18.0239,
  						52.322
  					],
  					[
  						18.0667,
  						52.2947
  					],
  					[
  						18.0362,
  						52.2855
  					],
  					[
  						18.0161,
  						52.228
  					],
  					[
  						18.0254,
  						52.1732
  					],
  					[
  						17.9843,
  						52.1464
  					],
  					[
  						18.0281,
  						52.1268
  					],
  					[
  						18.0287,
  						52.1157
  					],
  					[
  						17.9711,
  						52.1064
  					],
  					[
  						17.9582,
  						52.0909
  					],
  					[
  						17.9346,
  						52.0909
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 30,
  			name: "powiat kościerski",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.8032,
  						53.9232
  					],
  					[
  						17.8133,
  						53.9558
  					],
  					[
  						17.7507,
  						53.9603
  					],
  					[
  						17.7244,
  						54.0016
  					],
  					[
  						17.6818,
  						53.9959
  					],
  					[
  						17.6468,
  						54.0259
  					],
  					[
  						17.6543,
  						54.0331
  					],
  					[
  						17.6697,
  						54.0684
  					],
  					[
  						17.6637,
  						54.097
  					],
  					[
  						17.697,
  						54.088
  					],
  					[
  						17.7339,
  						54.1071
  					],
  					[
  						17.7215,
  						54.127
  					],
  					[
  						17.739,
  						54.1558
  					],
  					[
  						17.7696,
  						54.15
  					],
  					[
  						17.8002,
  						54.1782
  					],
  					[
  						17.8342,
  						54.1786
  					],
  					[
  						17.8625,
  						54.1911
  					],
  					[
  						17.8967,
  						54.1859
  					],
  					[
  						17.9082,
  						54.1743
  					],
  					[
  						17.988,
  						54.1977
  					],
  					[
  						17.995,
  						54.1772
  					],
  					[
  						18.0617,
  						54.1812
  					],
  					[
  						18.088,
  						54.1995
  					],
  					[
  						18.1142,
  						54.2017
  					],
  					[
  						18.1503,
  						54.1869
  					],
  					[
  						18.1649,
  						54.1987
  					],
  					[
  						18.2205,
  						54.1889
  					],
  					[
  						18.2229,
  						54.1879
  					],
  					[
  						18.233,
  						54.1673
  					],
  					[
  						18.3272,
  						54.1411
  					],
  					[
  						18.3288,
  						54.1133
  					],
  					[
  						18.351,
  						54.1069
  					],
  					[
  						18.3337,
  						54.0862
  					],
  					[
  						18.3558,
  						54.0583
  					],
  					[
  						18.344,
  						54.0459
  					],
  					[
  						18.2946,
  						54.036
  					],
  					[
  						18.2866,
  						54.0145
  					],
  					[
  						18.2876,
  						54.0142
  					],
  					[
  						18.2796,
  						53.9935
  					],
  					[
  						18.325,
  						54.0021
  					],
  					[
  						18.3031,
  						53.9652
  					],
  					[
  						18.2616,
  						53.9581
  					],
  					[
  						18.2179,
  						53.9422
  					],
  					[
  						18.2037,
  						53.956
  					],
  					[
  						18.1615,
  						53.9599
  					],
  					[
  						18.1064,
  						53.9255
  					],
  					[
  						18.0992,
  						53.9312
  					],
  					[
  						18.0304,
  						53.9017
  					],
  					[
  						18.0142,
  						53.9149
  					],
  					[
  						17.9776,
  						53.8951
  					],
  					[
  						17.9705,
  						53.8792
  					],
  					[
  						17.9323,
  						53.8678
  					],
  					[
  						17.9333,
  						53.8422
  					],
  					[
  						17.9143,
  						53.8354
  					],
  					[
  						17.8652,
  						53.8362
  					],
  					[
  						17.8779,
  						53.8548
  					],
  					[
  						17.8599,
  						53.8704
  					],
  					[
  						17.8695,
  						53.8862
  					],
  					[
  						17.8373,
  						53.8968
  					],
  					[
  						17.8032,
  						53.9232
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 31,
  			name: "powiat włoszczowski",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.0395,
  						50.9902
  					],
  					[
  						20.0579,
  						50.9808
  					],
  					[
  						20.118,
  						50.9846
  					],
  					[
  						20.1063,
  						50.9615
  					],
  					[
  						20.1289,
  						50.9419
  					],
  					[
  						20.1636,
  						50.9363
  					],
  					[
  						20.2042,
  						50.9207
  					],
  					[
  						20.2261,
  						50.9009
  					],
  					[
  						20.2018,
  						50.8717
  					],
  					[
  						20.2496,
  						50.8653
  					],
  					[
  						20.216,
  						50.83
  					],
  					[
  						20.1418,
  						50.8433
  					],
  					[
  						20.1248,
  						50.8329
  					],
  					[
  						20.1039,
  						50.8001
  					],
  					[
  						20.0951,
  						50.7729
  					],
  					[
  						20.08,
  						50.7723
  					],
  					[
  						20.0524,
  						50.7402
  					],
  					[
  						20.0629,
  						50.723
  					],
  					[
  						20.1016,
  						50.7056
  					],
  					[
  						20.0726,
  						50.6853
  					],
  					[
  						20.0467,
  						50.684
  					],
  					[
  						20.0245,
  						50.6543
  					],
  					[
  						20.0318,
  						50.6336
  					],
  					[
  						20.0011,
  						50.6233
  					],
  					[
  						19.9686,
  						50.6332
  					],
  					[
  						19.9395,
  						50.6208
  					],
  					[
  						19.9035,
  						50.6196
  					],
  					[
  						19.9098,
  						50.642
  					],
  					[
  						19.8352,
  						50.6514
  					],
  					[
  						19.8445,
  						50.6668
  					],
  					[
  						19.873,
  						50.683
  					],
  					[
  						19.8474,
  						50.7018
  					],
  					[
  						19.8083,
  						50.7059
  					],
  					[
  						19.8108,
  						50.7254
  					],
  					[
  						19.755,
  						50.716
  					],
  					[
  						19.7129,
  						50.7292
  					],
  					[
  						19.7044,
  						50.7523
  					],
  					[
  						19.7417,
  						50.7547
  					],
  					[
  						19.7705,
  						50.7773
  					],
  					[
  						19.7954,
  						50.7837
  					],
  					[
  						19.8257,
  						50.825
  					],
  					[
  						19.8194,
  						50.8385
  					],
  					[
  						19.7471,
  						50.866
  					],
  					[
  						19.7739,
  						50.8777
  					],
  					[
  						19.7968,
  						50.9084
  					],
  					[
  						19.8325,
  						50.916
  					],
  					[
  						19.8488,
  						50.9357
  					],
  					[
  						19.8297,
  						50.9678
  					],
  					[
  						19.8635,
  						51.0047
  					],
  					[
  						19.864,
  						51.0302
  					],
  					[
  						19.8972,
  						51.0286
  					],
  					[
  						19.8989,
  						51.028
  					],
  					[
  						19.9369,
  						51.0246
  					],
  					[
  						19.9559,
  						50.9921
  					],
  					[
  						20.0175,
  						50.9624
  					],
  					[
  						20.0395,
  						50.9902
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 32,
  			name: "powiat stargardzki",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.1516,
  						53.4719
  					],
  					[
  						15.1576,
  						53.4742
  					],
  					[
  						15.1754,
  						53.4903
  					],
  					[
  						15.2098,
  						53.4894
  					],
  					[
  						15.2122,
  						53.5098
  					],
  					[
  						15.2365,
  						53.5314
  					],
  					[
  						15.2581,
  						53.5335
  					],
  					[
  						15.2894,
  						53.5092
  					],
  					[
  						15.3249,
  						53.5149
  					],
  					[
  						15.3371,
  						53.5316
  					],
  					[
  						15.3669,
  						53.5374
  					],
  					[
  						15.4186,
  						53.5219
  					],
  					[
  						15.4682,
  						53.477
  					],
  					[
  						15.5156,
  						53.4708
  					],
  					[
  						15.5903,
  						53.5046
  					],
  					[
  						15.6214,
  						53.5032
  					],
  					[
  						15.6288,
  						53.4814
  					],
  					[
  						15.6885,
  						53.4845
  					],
  					[
  						15.7049,
  						53.4975
  					],
  					[
  						15.7018,
  						53.4771
  					],
  					[
  						15.6521,
  						53.4542
  					],
  					[
  						15.6442,
  						53.4359
  					],
  					[
  						15.6031,
  						53.4299
  					],
  					[
  						15.5974,
  						53.3799
  					],
  					[
  						15.5848,
  						53.3433
  					],
  					[
  						15.4847,
  						53.3157
  					],
  					[
  						15.4698,
  						53.3018
  					],
  					[
  						15.4912,
  						53.2706
  					],
  					[
  						15.4699,
  						53.2604
  					],
  					[
  						15.4906,
  						53.2369
  					],
  					[
  						15.4586,
  						53.2334
  					],
  					[
  						15.4161,
  						53.2466
  					],
  					[
  						15.3129,
  						53.2546
  					],
  					[
  						15.2728,
  						53.2445
  					],
  					[
  						15.254,
  						53.2184
  					],
  					[
  						15.2701,
  						53.2008
  					],
  					[
  						15.3186,
  						53.2083
  					],
  					[
  						15.367,
  						53.1748
  					],
  					[
  						15.3313,
  						53.1625
  					],
  					[
  						15.323,
  						53.1309
  					],
  					[
  						15.2729,
  						53.1131
  					],
  					[
  						15.2679,
  						53.0947
  					],
  					[
  						15.2201,
  						53.095
  					],
  					[
  						15.2058,
  						53.0819
  					],
  					[
  						15.1986,
  						53.0851
  					],
  					[
  						15.198,
  						53.1084
  					],
  					[
  						15.2122,
  						53.1376
  					],
  					[
  						15.1587,
  						53.1551
  					],
  					[
  						15.1741,
  						53.1778
  					],
  					[
  						15.1054,
  						53.1737
  					],
  					[
  						15.0617,
  						53.188
  					],
  					[
  						15.0688,
  						53.2328
  					],
  					[
  						15.0411,
  						53.26
  					],
  					[
  						15.004,
  						53.2636
  					],
  					[
  						14.8618,
  						53.2465
  					],
  					[
  						14.8589,
  						53.2724
  					],
  					[
  						14.8752,
  						53.3014
  					],
  					[
  						14.8406,
  						53.3202
  					],
  					[
  						14.8009,
  						53.3258
  					],
  					[
  						14.7919,
  						53.3424
  					],
  					[
  						14.7693,
  						53.345
  					],
  					[
  						14.7562,
  						53.3634
  					],
  					[
  						14.7322,
  						53.3733
  					],
  					[
  						14.7903,
  						53.3945
  					],
  					[
  						14.778,
  						53.403
  					],
  					[
  						14.7776,
  						53.4257
  					],
  					[
  						14.8262,
  						53.4287
  					],
  					[
  						14.8798,
  						53.4431
  					],
  					[
  						14.916,
  						53.4438
  					],
  					[
  						14.9613,
  						53.4585
  					],
  					[
  						15.0144,
  						53.4549
  					],
  					[
  						15.0603,
  						53.4702
  					],
  					[
  						15.0694,
  						53.4595
  					],
  					[
  						15.1516,
  						53.4719
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 33,
  			name: "powiat Wrocław",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.8307,
  						51.1118
  					],
  					[
  						16.8332,
  						51.1243
  					],
  					[
  						16.8131,
  						51.1503
  					],
  					[
  						16.8276,
  						51.1588
  					],
  					[
  						16.8276,
  						51.1836
  					],
  					[
  						16.8527,
  						51.1779
  					],
  					[
  						16.8928,
  						51.1886
  					],
  					[
  						16.9051,
  						51.2095
  					],
  					[
  						16.9213,
  						51.1969
  					],
  					[
  						16.958,
  						51.2094
  					],
  					[
  						17.0009,
  						51.1975
  					],
  					[
  						17.0149,
  						51.1826
  					],
  					[
  						17.0654,
  						51.1649
  					],
  					[
  						17.1003,
  						51.1759
  					],
  					[
  						17.1573,
  						51.1785
  					],
  					[
  						17.1504,
  						51.1444
  					],
  					[
  						17.1369,
  						51.1278
  					],
  					[
  						17.1761,
  						51.1062
  					],
  					[
  						17.151,
  						51.0822
  					],
  					[
  						17.1114,
  						51.0792
  					],
  					[
  						17.0958,
  						51.0594
  					],
  					[
  						17.0279,
  						51.0427
  					],
  					[
  						16.9551,
  						51.0587
  					],
  					[
  						16.9581,
  						51.0674
  					],
  					[
  						16.9229,
  						51.0978
  					],
  					[
  						16.8768,
  						51.0945
  					],
  					[
  						16.8307,
  						51.1118
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 34,
  			name: "powiat giżycki",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.0227,
  						54.1725
  					],
  					[
  						22.0523,
  						54.179
  					],
  					[
  						22.1194,
  						54.1744
  					],
  					[
  						22.1462,
  						54.1815
  					],
  					[
  						22.1575,
  						54.1788
  					],
  					[
  						22.1366,
  						54.1397
  					],
  					[
  						22.1102,
  						54.1335
  					],
  					[
  						22.1829,
  						54.0847
  					],
  					[
  						22.2014,
  						54.0602
  					],
  					[
  						22.1877,
  						54.0379
  					],
  					[
  						22.1514,
  						54.0349
  					],
  					[
  						22.1659,
  						54.0038
  					],
  					[
  						22.1175,
  						53.9821
  					],
  					[
  						22.0891,
  						53.9249
  					],
  					[
  						22.097,
  						53.9031
  					],
  					[
  						22.1543,
  						53.8822
  					],
  					[
  						22.1423,
  						53.8653
  					],
  					[
  						22.0787,
  						53.8692
  					],
  					[
  						22.0596,
  						53.8599
  					],
  					[
  						22.0085,
  						53.8789
  					],
  					[
  						21.9495,
  						53.8588
  					],
  					[
  						21.8984,
  						53.8928
  					],
  					[
  						21.8506,
  						53.8801
  					],
  					[
  						21.8009,
  						53.8908
  					],
  					[
  						21.7784,
  						53.8839
  					],
  					[
  						21.7438,
  						53.8919
  					],
  					[
  						21.6816,
  						53.8903
  					],
  					[
  						21.6538,
  						53.8769
  					],
  					[
  						21.6147,
  						53.8797
  					],
  					[
  						21.6036,
  						53.8651
  					],
  					[
  						21.5626,
  						53.8709
  					],
  					[
  						21.5262,
  						53.8546
  					],
  					[
  						21.4831,
  						53.8866
  					],
  					[
  						21.4606,
  						53.9208
  					],
  					[
  						21.4379,
  						53.9293
  					],
  					[
  						21.4315,
  						53.9469
  					],
  					[
  						21.4586,
  						53.9599
  					],
  					[
  						21.514,
  						53.9866
  					],
  					[
  						21.5515,
  						53.9973
  					],
  					[
  						21.5497,
  						54.0416
  					],
  					[
  						21.5622,
  						54.0808
  					],
  					[
  						21.6005,
  						54.1127
  					],
  					[
  						21.6497,
  						54.114
  					],
  					[
  						21.6722,
  						54.1025
  					],
  					[
  						21.7227,
  						54.0971
  					],
  					[
  						21.7685,
  						54.1004
  					],
  					[
  						21.8167,
  						54.0918
  					],
  					[
  						21.8383,
  						54.0998
  					],
  					[
  						21.8874,
  						54.0872
  					],
  					[
  						21.9291,
  						54.1139
  					],
  					[
  						21.9376,
  						54.1287
  					],
  					[
  						22.0251,
  						54.1391
  					],
  					[
  						22.0227,
  						54.1725
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 35,
  			name: "powiat mrągowski",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.3453,
  						53.6327
  					],
  					[
  						21.3139,
  						53.6279
  					],
  					[
  						21.2567,
  						53.6678
  					],
  					[
  						21.2086,
  						53.6706
  					],
  					[
  						21.214,
  						53.685
  					],
  					[
  						21.1721,
  						53.7139
  					],
  					[
  						21.1202,
  						53.7352
  					],
  					[
  						21.1048,
  						53.7705
  					],
  					[
  						21.1042,
  						53.8247
  					],
  					[
  						21.083,
  						53.8251
  					],
  					[
  						21.0514,
  						53.8667
  					],
  					[
  						21.0759,
  						53.8802
  					],
  					[
  						21.1277,
  						53.9385
  					],
  					[
  						21.1465,
  						53.9595
  					],
  					[
  						21.1717,
  						53.9578
  					],
  					[
  						21.1807,
  						53.9382
  					],
  					[
  						21.2322,
  						53.952
  					],
  					[
  						21.2327,
  						53.9699
  					],
  					[
  						21.2793,
  						53.978
  					],
  					[
  						21.3126,
  						53.9945
  					],
  					[
  						21.384,
  						53.9958
  					],
  					[
  						21.4077,
  						53.9678
  					],
  					[
  						21.4356,
  						53.9763
  					],
  					[
  						21.4586,
  						53.9599
  					],
  					[
  						21.4315,
  						53.9469
  					],
  					[
  						21.4379,
  						53.9293
  					],
  					[
  						21.4606,
  						53.9208
  					],
  					[
  						21.4831,
  						53.8866
  					],
  					[
  						21.5262,
  						53.8546
  					],
  					[
  						21.5626,
  						53.8709
  					],
  					[
  						21.6036,
  						53.8651
  					],
  					[
  						21.6147,
  						53.8797
  					],
  					[
  						21.6538,
  						53.8769
  					],
  					[
  						21.6816,
  						53.8903
  					],
  					[
  						21.7438,
  						53.8919
  					],
  					[
  						21.7117,
  						53.8629
  					],
  					[
  						21.734,
  						53.8449
  					],
  					[
  						21.733,
  						53.825
  					],
  					[
  						21.6985,
  						53.8211
  					],
  					[
  						21.6941,
  						53.8025
  					],
  					[
  						21.7196,
  						53.7959
  					],
  					[
  						21.6802,
  						53.7223
  					],
  					[
  						21.6483,
  						53.732
  					],
  					[
  						21.615,
  						53.7653
  					],
  					[
  						21.5744,
  						53.7423
  					],
  					[
  						21.5163,
  						53.7468
  					],
  					[
  						21.5195,
  						53.7236
  					],
  					[
  						21.4622,
  						53.7219
  					],
  					[
  						21.4578,
  						53.6934
  					],
  					[
  						21.4678,
  						53.6783
  					],
  					[
  						21.476,
  						53.632
  					],
  					[
  						21.4216,
  						53.6382
  					],
  					[
  						21.3871,
  						53.6398
  					],
  					[
  						21.3453,
  						53.6327
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 36,
  			name: "powiat głogowski",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.9802,
  						51.6108
  					],
  					[
  						15.9625,
  						51.6385
  					],
  					[
  						15.9407,
  						51.641
  					],
  					[
  						15.9331,
  						51.6631
  					],
  					[
  						15.9125,
  						51.6717
  					],
  					[
  						15.8497,
  						51.6652
  					],
  					[
  						15.8343,
  						51.6722
  					],
  					[
  						15.8656,
  						51.6926
  					],
  					[
  						15.8682,
  						51.716
  					],
  					[
  						15.8925,
  						51.7295
  					],
  					[
  						15.9298,
  						51.7376
  					],
  					[
  						15.9521,
  						51.7339
  					],
  					[
  						15.9766,
  						51.7481
  					],
  					[
  						15.9681,
  						51.7879
  					],
  					[
  						15.9948,
  						51.8048
  					],
  					[
  						16.035,
  						51.7953
  					],
  					[
  						16.034,
  						51.785
  					],
  					[
  						16.1332,
  						51.7591
  					],
  					[
  						16.1779,
  						51.7638
  					],
  					[
  						16.16,
  						51.7117
  					],
  					[
  						16.2184,
  						51.7133
  					],
  					[
  						16.2701,
  						51.6635
  					],
  					[
  						16.3052,
  						51.6602
  					],
  					[
  						16.3321,
  						51.6438
  					],
  					[
  						16.3344,
  						51.617
  					],
  					[
  						16.3554,
  						51.6092
  					],
  					[
  						16.3277,
  						51.5984
  					],
  					[
  						16.3037,
  						51.613
  					],
  					[
  						16.2384,
  						51.6168
  					],
  					[
  						16.2158,
  						51.6335
  					],
  					[
  						16.1929,
  						51.6167
  					],
  					[
  						16.1421,
  						51.6169
  					],
  					[
  						16.1305,
  						51.6092
  					],
  					[
  						16.0858,
  						51.6105
  					],
  					[
  						16.0985,
  						51.5908
  					],
  					[
  						16.0697,
  						51.5562
  					],
  					[
  						16.0332,
  						51.5598
  					],
  					[
  						16.0026,
  						51.5379
  					],
  					[
  						15.9851,
  						51.5613
  					],
  					[
  						16.0179,
  						51.6032
  					],
  					[
  						15.9802,
  						51.6108
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 37,
  			name: "powiat choszczeński",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.5848,
  						53.3433
  					],
  					[
  						15.6147,
  						53.2926
  					],
  					[
  						15.6846,
  						53.2885
  					],
  					[
  						15.7092,
  						53.3061
  					],
  					[
  						15.7397,
  						53.3152
  					],
  					[
  						15.7784,
  						53.3069
  					],
  					[
  						15.7716,
  						53.2861
  					],
  					[
  						15.8152,
  						53.2405
  					],
  					[
  						15.8149,
  						53.2293
  					],
  					[
  						15.8468,
  						53.214
  					],
  					[
  						15.8746,
  						53.2256
  					],
  					[
  						15.9177,
  						53.2148
  					],
  					[
  						15.9927,
  						53.2202
  					],
  					[
  						16.0036,
  						53.2401
  					],
  					[
  						16.0232,
  						53.2269
  					],
  					[
  						16.0106,
  						53.2013
  					],
  					[
  						15.98,
  						53.1721
  					],
  					[
  						15.9628,
  						53.129
  					],
  					[
  						15.982,
  						53.1155
  					],
  					[
  						15.8753,
  						53.1211
  					],
  					[
  						15.8482,
  						53.1152
  					],
  					[
  						15.86,
  						53.0937
  					],
  					[
  						15.8115,
  						53.0844
  					],
  					[
  						15.8216,
  						53.0652
  					],
  					[
  						15.7917,
  						53.0592
  					],
  					[
  						15.7675,
  						53.0203
  					],
  					[
  						15.7691,
  						52.9995
  					],
  					[
  						15.7191,
  						52.9886
  					],
  					[
  						15.6919,
  						52.9982
  					],
  					[
  						15.6377,
  						52.9773
  					],
  					[
  						15.5734,
  						52.9866
  					],
  					[
  						15.5545,
  						53.0119
  					],
  					[
  						15.4438,
  						52.9899
  					],
  					[
  						15.3868,
  						52.9687
  					],
  					[
  						15.3686,
  						52.9466
  					],
  					[
  						15.3507,
  						52.9431
  					],
  					[
  						15.2868,
  						52.9572
  					],
  					[
  						15.2972,
  						52.9675
  					],
  					[
  						15.2829,
  						53.0091
  					],
  					[
  						15.258,
  						53.0264
  					],
  					[
  						15.2076,
  						53.0431
  					],
  					[
  						15.2191,
  						53.0758
  					],
  					[
  						15.2058,
  						53.0819
  					],
  					[
  						15.2201,
  						53.095
  					],
  					[
  						15.2679,
  						53.0947
  					],
  					[
  						15.2729,
  						53.1131
  					],
  					[
  						15.323,
  						53.1309
  					],
  					[
  						15.3313,
  						53.1625
  					],
  					[
  						15.367,
  						53.1748
  					],
  					[
  						15.3186,
  						53.2083
  					],
  					[
  						15.2701,
  						53.2008
  					],
  					[
  						15.254,
  						53.2184
  					],
  					[
  						15.2728,
  						53.2445
  					],
  					[
  						15.3129,
  						53.2546
  					],
  					[
  						15.4161,
  						53.2466
  					],
  					[
  						15.4586,
  						53.2334
  					],
  					[
  						15.4906,
  						53.2369
  					],
  					[
  						15.4699,
  						53.2604
  					],
  					[
  						15.4912,
  						53.2706
  					],
  					[
  						15.4698,
  						53.3018
  					],
  					[
  						15.4847,
  						53.3157
  					],
  					[
  						15.5848,
  						53.3433
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 38,
  			name: "powiat Sosnowiec",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.1607,
  						50.2263
  					],
  					[
  						19.1438,
  						50.2421
  					],
  					[
  						19.1429,
  						50.2436
  					],
  					[
  						19.1244,
  						50.266
  					],
  					[
  						19.1224,
  						50.2668
  					],
  					[
  						19.0978,
  						50.2798
  					],
  					[
  						19.0713,
  						50.2943
  					],
  					[
  						19.1443,
  						50.3061
  					],
  					[
  						19.1442,
  						50.3061
  					],
  					[
  						19.1443,
  						50.3061
  					],
  					[
  						19.1442,
  						50.3061
  					],
  					[
  						19.1656,
  						50.3133
  					],
  					[
  						19.1961,
  						50.3169
  					],
  					[
  						19.2531,
  						50.3041
  					],
  					[
  						19.2851,
  						50.2917
  					],
  					[
  						19.3114,
  						50.275
  					],
  					[
  						19.3119,
  						50.2583
  					],
  					[
  						19.2841,
  						50.2551
  					],
  					[
  						19.2257,
  						50.2606
  					],
  					[
  						19.206,
  						50.2518
  					],
  					[
  						19.1964,
  						50.2281
  					],
  					[
  						19.1607,
  						50.2263
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 39,
  			name: "powiat rybnicki",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "MultiPolygon",
  			coordinates: [
  				[
  					[
  						[
  							18.4858,
  							50.1147
  						],
  						[
  							18.4752,
  							50.0853
  						],
  						[
  							18.4423,
  							50.0864
  						],
  						[
  							18.4038,
  							50.0721
  						],
  						[
  							18.3788,
  							50.0752
  						],
  						[
  							18.314,
  							50.0968
  						],
  						[
  							18.2925,
  							50.1145
  						],
  						[
  							18.2889,
  							50.1311
  						],
  						[
  							18.3514,
  							50.1453
  						],
  						[
  							18.393,
  							50.1387
  						],
  						[
  							18.4098,
  							50.1551
  						],
  						[
  							18.4502,
  							50.1555
  						],
  						[
  							18.4554,
  							50.1532
  						],
  						[
  							18.4519,
  							50.1206
  						],
  						[
  							18.4858,
  							50.1147
  						]
  					]
  				],
  				[
  					[
  						[
  							18.7261,
  							50.0658
  						],
  						[
  							18.6935,
  							50.0724
  						],
  						[
  							18.6919,
  							50.0718
  						],
  						[
  							18.6898,
  							50.0718
  						],
  						[
  							18.6568,
  							50.0813
  						],
  						[
  							18.6376,
  							50.0851
  						],
  						[
  							18.6318,
  							50.1105
  						],
  						[
  							18.6135,
  							50.1209
  						],
  						[
  							18.6256,
  							50.147
  						],
  						[
  							18.5948,
  							50.1444
  						],
  						[
  							18.5754,
  							50.1377
  						],
  						[
  							18.558,
  							50.181
  						],
  						[
  							18.5874,
  							50.1726
  						],
  						[
  							18.6201,
  							50.1741
  						],
  						[
  							18.6204,
  							50.1745
  						],
  						[
  							18.6423,
  							50.1849
  						],
  						[
  							18.6946,
  							50.1752
  						],
  						[
  							18.7197,
  							50.2001
  						],
  						[
  							18.7459,
  							50.1743
  						],
  						[
  							18.7307,
  							50.1549
  						],
  						[
  							18.7309,
  							50.1312
  						],
  						[
  							18.7399,
  							50.1112
  						],
  						[
  							18.7261,
  							50.0658
  						]
  					]
  				],
  				[
  					[
  						[
  							18.5232,
  							50.0382
  						],
  						[
  							18.5394,
  							50.0589
  						],
  						[
  							18.6005,
  							50.0411
  						],
  						[
  							18.6093,
  							50.0417
  						],
  						[
  							18.6099,
  							50.0413
  						],
  						[
  							18.611,
  							50.0184
  						],
  						[
  							18.59,
  							49.9989
  						],
  						[
  							18.5719,
  							49.9981
  						],
  						[
  							18.5491,
  							50.0336
  						],
  						[
  							18.5232,
  							50.0382
  						]
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 40,
  			name: "powiat Gliwice",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.6581,
  						50.3739
  					],
  					[
  						18.6802,
  						50.3395
  					],
  					[
  						18.7135,
  						50.3281
  					],
  					[
  						18.7319,
  						50.3315
  					],
  					[
  						18.732,
  						50.3052
  					],
  					[
  						18.7328,
  						50.3002
  					],
  					[
  						18.7479,
  						50.2894
  					],
  					[
  						18.7406,
  						50.2737
  					],
  					[
  						18.7372,
  						50.2717
  					],
  					[
  						18.7358,
  						50.2708
  					],
  					[
  						18.7211,
  						50.2357
  					],
  					[
  						18.6851,
  						50.2272
  					],
  					[
  						18.6588,
  						50.2405
  					],
  					[
  						18.642,
  						50.2622
  					],
  					[
  						18.6108,
  						50.2644
  					],
  					[
  						18.565,
  						50.2587
  					],
  					[
  						18.5724,
  						50.295
  					],
  					[
  						18.5916,
  						50.2968
  					],
  					[
  						18.5449,
  						50.3381
  					],
  					[
  						18.5616,
  						50.3442
  					],
  					[
  						18.5982,
  						50.3272
  					],
  					[
  						18.6134,
  						50.3691
  					],
  					[
  						18.6581,
  						50.3739
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 41,
  			name: "powiat Piekary Śląskie",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.9854,
  						50.3359
  					],
  					[
  						18.9591,
  						50.3353
  					],
  					[
  						18.964,
  						50.355
  					],
  					[
  						18.9349,
  						50.3611
  					],
  					[
  						18.9145,
  						50.3722
  					],
  					[
  						18.9283,
  						50.4208
  					],
  					[
  						18.9708,
  						50.4132
  					],
  					[
  						18.981,
  						50.3929
  					],
  					[
  						18.9634,
  						50.3743
  					],
  					[
  						18.9976,
  						50.3676
  					],
  					[
  						19.0415,
  						50.3488
  					],
  					[
  						19.0105,
  						50.3307
  					],
  					[
  						18.9854,
  						50.3359
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 42,
  			name: "powiat Jaworzno",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.2592,
  						50.1169
  					],
  					[
  						19.2538,
  						50.1342
  					],
  					[
  						19.2418,
  						50.1613
  					],
  					[
  						19.207,
  						50.191
  					],
  					[
  						19.1629,
  						50.2164
  					],
  					[
  						19.1607,
  						50.2263
  					],
  					[
  						19.1964,
  						50.2281
  					],
  					[
  						19.206,
  						50.2518
  					],
  					[
  						19.2257,
  						50.2606
  					],
  					[
  						19.2841,
  						50.2551
  					],
  					[
  						19.3119,
  						50.2583
  					],
  					[
  						19.3234,
  						50.2591
  					],
  					[
  						19.3931,
  						50.2334
  					],
  					[
  						19.442,
  						50.2266
  					],
  					[
  						19.4025,
  						50.2019
  					],
  					[
  						19.3637,
  						50.1905
  					],
  					[
  						19.3316,
  						50.1442
  					],
  					[
  						19.2883,
  						50.1404
  					],
  					[
  						19.2778,
  						50.1197
  					],
  					[
  						19.2592,
  						50.1169
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 43,
  			name: "powiat inowrocławski",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.0088,
  						52.9628
  					],
  					[
  						18.0473,
  						52.9711
  					],
  					[
  						18.0825,
  						52.949
  					],
  					[
  						18.1121,
  						52.9403
  					],
  					[
  						18.1586,
  						52.9498
  					],
  					[
  						18.1891,
  						52.9444
  					],
  					[
  						18.2534,
  						52.9548
  					],
  					[
  						18.244,
  						52.9741
  					],
  					[
  						18.3069,
  						52.991
  					],
  					[
  						18.3669,
  						52.9869
  					],
  					[
  						18.3904,
  						52.9867
  					],
  					[
  						18.3609,
  						52.9461
  					],
  					[
  						18.4397,
  						52.9558
  					],
  					[
  						18.4457,
  						52.9424
  					],
  					[
  						18.4957,
  						52.9485
  					],
  					[
  						18.5129,
  						52.908
  					],
  					[
  						18.5647,
  						52.879
  					],
  					[
  						18.5382,
  						52.8434
  					],
  					[
  						18.5422,
  						52.8199
  					],
  					[
  						18.5713,
  						52.8143
  					],
  					[
  						18.5878,
  						52.7979
  					],
  					[
  						18.6251,
  						52.7873
  					],
  					[
  						18.6042,
  						52.7537
  					],
  					[
  						18.5543,
  						52.7562
  					],
  					[
  						18.5413,
  						52.7437
  					],
  					[
  						18.5006,
  						52.748
  					],
  					[
  						18.5074,
  						52.7109
  					],
  					[
  						18.4999,
  						52.6921
  					],
  					[
  						18.4696,
  						52.6892
  					],
  					[
  						18.4714,
  						52.6693
  					],
  					[
  						18.4568,
  						52.6456
  					],
  					[
  						18.4803,
  						52.6245
  					],
  					[
  						18.4757,
  						52.5789
  					],
  					[
  						18.4474,
  						52.5787
  					],
  					[
  						18.4438,
  						52.5588
  					],
  					[
  						18.3772,
  						52.5375
  					],
  					[
  						18.3525,
  						52.5434
  					],
  					[
  						18.348,
  						52.5672
  					],
  					[
  						18.3605,
  						52.5915
  					],
  					[
  						18.2899,
  						52.5876
  					],
  					[
  						18.2422,
  						52.6073
  					],
  					[
  						18.2559,
  						52.6338
  					],
  					[
  						18.2356,
  						52.6722
  					],
  					[
  						18.2634,
  						52.6944
  					],
  					[
  						18.2392,
  						52.7003
  					],
  					[
  						18.2272,
  						52.7326
  					],
  					[
  						18.1978,
  						52.7291
  					],
  					[
  						18.1751,
  						52.7098
  					],
  					[
  						18.1583,
  						52.7149
  					],
  					[
  						18.1319,
  						52.6923
  					],
  					[
  						18.068,
  						52.6872
  					],
  					[
  						18.0112,
  						52.6892
  					],
  					[
  						18.0096,
  						52.7261
  					],
  					[
  						18.0323,
  						52.7386
  					],
  					[
  						18.0323,
  						52.7628
  					],
  					[
  						17.9964,
  						52.797
  					],
  					[
  						18.0269,
  						52.8083
  					],
  					[
  						18.0526,
  						52.8064
  					],
  					[
  						18.0495,
  						52.8576
  					],
  					[
  						18.0591,
  						52.875
  					],
  					[
  						18.0328,
  						52.9077
  					],
  					[
  						17.9967,
  						52.9061
  					],
  					[
  						17.9681,
  						52.9244
  					],
  					[
  						18.0157,
  						52.9448
  					],
  					[
  						18.0088,
  						52.9628
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 44,
  			name: "powiat brodnicki",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.2535,
  						53.1998
  					],
  					[
  						19.2092,
  						53.2306
  					],
  					[
  						19.1693,
  						53.2377
  					],
  					[
  						19.1421,
  						53.2275
  					],
  					[
  						19.1405,
  						53.2466
  					],
  					[
  						19.1135,
  						53.2671
  					],
  					[
  						19.1394,
  						53.2771
  					],
  					[
  						19.1224,
  						53.3394
  					],
  					[
  						19.084,
  						53.3575
  					],
  					[
  						19.1069,
  						53.3806
  					],
  					[
  						19.1391,
  						53.4213
  					],
  					[
  						19.1238,
  						53.4316
  					],
  					[
  						19.1952,
  						53.4526
  					],
  					[
  						19.2243,
  						53.4566
  					],
  					[
  						19.2546,
  						53.4315
  					],
  					[
  						19.2445,
  						53.4109
  					],
  					[
  						19.2592,
  						53.3965
  					],
  					[
  						19.2912,
  						53.3892
  					],
  					[
  						19.3295,
  						53.405
  					],
  					[
  						19.3806,
  						53.4109
  					],
  					[
  						19.4326,
  						53.3638
  					],
  					[
  						19.4852,
  						53.36
  					],
  					[
  						19.5199,
  						53.3703
  					],
  					[
  						19.526,
  						53.3521
  					],
  					[
  						19.5201,
  						53.3304
  					],
  					[
  						19.587,
  						53.3317
  					],
  					[
  						19.6416,
  						53.3446
  					],
  					[
  						19.6901,
  						53.3363
  					],
  					[
  						19.6898,
  						53.3068
  					],
  					[
  						19.7181,
  						53.3021
  					],
  					[
  						19.7188,
  						53.2793
  					],
  					[
  						19.6833,
  						53.2584
  					],
  					[
  						19.6891,
  						53.2361
  					],
  					[
  						19.7436,
  						53.2282
  					],
  					[
  						19.7417,
  						53.1888
  					],
  					[
  						19.7616,
  						53.1518
  					],
  					[
  						19.712,
  						53.1347
  					],
  					[
  						19.6671,
  						53.1061
  					],
  					[
  						19.6465,
  						53.1122
  					],
  					[
  						19.6107,
  						53.1142
  					],
  					[
  						19.5927,
  						53.1058
  					],
  					[
  						19.5896,
  						53.0803
  					],
  					[
  						19.5529,
  						53.0888
  					],
  					[
  						19.5126,
  						53.1074
  					],
  					[
  						19.4868,
  						53.1002
  					],
  					[
  						19.4714,
  						53.1164
  					],
  					[
  						19.3734,
  						53.1062
  					],
  					[
  						19.3576,
  						53.1211
  					],
  					[
  						19.3197,
  						53.1891
  					],
  					[
  						19.3338,
  						53.2086
  					],
  					[
  						19.3187,
  						53.2174
  					],
  					[
  						19.2535,
  						53.1998
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 45,
  			name: "powiat włocławski",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "MultiPolygon",
  			coordinates: [
  				[
  					[
  						[
  							18.9385,
  							52.7826
  						],
  						[
  							18.9571,
  							52.7524
  						],
  						[
  							18.9826,
  							52.736
  						],
  						[
  							18.9521,
  							52.7317
  						],
  						[
  							18.9394,
  							52.6966
  						],
  						[
  							19.0175,
  							52.6759
  						],
  						[
  							19.0263,
  							52.6601
  						],
  						[
  							19.0128,
  							52.6465
  						],
  						[
  							19.0296,
  							52.6266
  						],
  						[
  							19.004,
  							52.6028
  						],
  						[
  							19.0466,
  							52.6003
  						],
  						[
  							19.071,
  							52.6248
  						],
  						[
  							19.1063,
  							52.6133
  						],
  						[
  							19.1201,
  							52.629
  						],
  						[
  							19.1497,
  							52.6265
  						],
  						[
  							19.1763,
  							52.6559
  						],
  						[
  							19.2478,
  							52.6393
  						],
  						[
  							19.3381,
  							52.6273
  						],
  						[
  							19.3679,
  							52.6283
  						],
  						[
  							19.4261,
  							52.6114
  						],
  						[
  							19.3952,
  							52.5901
  						],
  						[
  							19.3782,
  							52.5686
  						],
  						[
  							19.3411,
  							52.5671
  						],
  						[
  							19.3515,
  							52.535
  						],
  						[
  							19.3957,
  							52.5129
  						],
  						[
  							19.3721,
  							52.5072
  						],
  						[
  							19.3389,
  							52.4798
  						],
  						[
  							19.3194,
  							52.449
  						],
  						[
  							19.2681,
  							52.4488
  						],
  						[
  							19.2618,
  							52.4357
  						],
  						[
  							19.2966,
  							52.4237
  						],
  						[
  							19.2892,
  							52.3927
  						],
  						[
  							19.2639,
  							52.3842
  						],
  						[
  							19.2092,
  							52.3534
  						],
  						[
  							19.1596,
  							52.3408
  						],
  						[
  							19.1008,
  							52.3479
  						],
  						[
  							19.0471,
  							52.3328
  						],
  						[
  							19.0081,
  							52.3493
  						],
  						[
  							18.9695,
  							52.3778
  						],
  						[
  							18.9408,
  							52.3915
  						],
  						[
  							18.9125,
  							52.3662
  						],
  						[
  							18.8699,
  							52.3601
  						],
  						[
  							18.8356,
  							52.3431
  						],
  						[
  							18.8142,
  							52.3524
  						],
  						[
  							18.7786,
  							52.3344
  						],
  						[
  							18.7555,
  							52.3328
  						],
  						[
  							18.754,
  							52.361
  						],
  						[
  							18.7108,
  							52.4007
  						],
  						[
  							18.6811,
  							52.4002
  						],
  						[
  							18.6848,
  							52.428
  						],
  						[
  							18.7304,
  							52.4571
  						],
  						[
  							18.734,
  							52.4947
  						],
  						[
  							18.7583,
  							52.5419
  						],
  						[
  							18.7321,
  							52.5614
  						],
  						[
  							18.7467,
  							52.5902
  						],
  						[
  							18.8078,
  							52.6211
  						],
  						[
  							18.8286,
  							52.6484
  						],
  						[
  							18.8569,
  							52.67
  						],
  						[
  							18.8609,
  							52.704
  						],
  						[
  							18.8494,
  							52.7076
  						],
  						[
  							18.843,
  							52.7403
  						],
  						[
  							18.8275,
  							52.7511
  						],
  						[
  							18.8358,
  							52.7687
  						],
  						[
  							18.8986,
  							52.7723
  						],
  						[
  							18.9385,
  							52.7826
  						]
  					]
  				],
  				[
  					[
  						[
  							19.1826,
  							52.6613
  						],
  						[
  							19.1093,
  							52.6689
  						],
  						[
  							19.0423,
  							52.6899
  						],
  						[
  							19.0233,
  							52.6871
  						],
  						[
  							19.0009,
  							52.7141
  						],
  						[
  							19.0275,
  							52.7173
  						],
  						[
  							19.0859,
  							52.7477
  						],
  						[
  							19.1325,
  							52.739
  						],
  						[
  							19.174,
  							52.7226
  						],
  						[
  							19.1779,
  							52.7003
  						],
  						[
  							19.1807,
  							52.686
  						],
  						[
  							19.1809,
  							52.6859
  						],
  						[
  							19.1807,
  							52.686
  						],
  						[
  							19.1809,
  							52.6859
  						],
  						[
  							19.1826,
  							52.6613
  						]
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 46,
  			name: "powiat mogileński",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.2899,
  						52.5876
  					],
  					[
  						18.3605,
  						52.5915
  					],
  					[
  						18.348,
  						52.5672
  					],
  					[
  						18.3525,
  						52.5434
  					],
  					[
  						18.3452,
  						52.5217
  					],
  					[
  						18.2943,
  						52.4997
  					],
  					[
  						18.2942,
  						52.4997
  					],
  					[
  						18.2943,
  						52.4997
  					],
  					[
  						18.2942,
  						52.4997
  					],
  					[
  						18.2602,
  						52.4812
  					],
  					[
  						18.2002,
  						52.4863
  					],
  					[
  						18.2026,
  						52.5006
  					],
  					[
  						18.1546,
  						52.5095
  					],
  					[
  						18.1329,
  						52.5058
  					],
  					[
  						18.0902,
  						52.5205
  					],
  					[
  						18.1068,
  						52.5385
  					],
  					[
  						18.0954,
  						52.5531
  					],
  					[
  						17.9872,
  						52.5533
  					],
  					[
  						17.9463,
  						52.5783
  					],
  					[
  						17.9015,
  						52.5856
  					],
  					[
  						17.909,
  						52.608
  					],
  					[
  						17.8765,
  						52.6286
  					],
  					[
  						17.8446,
  						52.6282
  					],
  					[
  						17.7867,
  						52.6515
  					],
  					[
  						17.8155,
  						52.6762
  					],
  					[
  						17.8022,
  						52.6914
  					],
  					[
  						17.8702,
  						52.7387
  					],
  					[
  						17.9169,
  						52.7478
  					],
  					[
  						17.8862,
  						52.8214
  					],
  					[
  						17.9372,
  						52.8417
  					],
  					[
  						17.9842,
  						52.817
  					],
  					[
  						17.9964,
  						52.797
  					],
  					[
  						18.0323,
  						52.7628
  					],
  					[
  						18.0323,
  						52.7386
  					],
  					[
  						18.0096,
  						52.7261
  					],
  					[
  						18.0112,
  						52.6892
  					],
  					[
  						18.068,
  						52.6872
  					],
  					[
  						18.1319,
  						52.6923
  					],
  					[
  						18.1583,
  						52.7149
  					],
  					[
  						18.1751,
  						52.7098
  					],
  					[
  						18.1978,
  						52.7291
  					],
  					[
  						18.2272,
  						52.7326
  					],
  					[
  						18.2392,
  						52.7003
  					],
  					[
  						18.2634,
  						52.6944
  					],
  					[
  						18.2356,
  						52.6722
  					],
  					[
  						18.2559,
  						52.6338
  					],
  					[
  						18.2422,
  						52.6073
  					],
  					[
  						18.2899,
  						52.5876
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 47,
  			name: "powiat Toruń",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.5504,
  						52.9631
  					],
  					[
  						18.5627,
  						53.0023
  					],
  					[
  						18.5354,
  						53.0094
  					],
  					[
  						18.4764,
  						53.0113
  					],
  					[
  						18.4886,
  						53.0277
  					],
  					[
  						18.5245,
  						53.0256
  					],
  					[
  						18.5186,
  						53.043
  					],
  					[
  						18.5444,
  						53.0597
  					],
  					[
  						18.5718,
  						53.0641
  					],
  					[
  						18.6178,
  						53.0574
  					],
  					[
  						18.6518,
  						53.0656
  					],
  					[
  						18.7075,
  						53.0567
  					],
  					[
  						18.7289,
  						53.0433
  					],
  					[
  						18.7313,
  						53.0186
  					],
  					[
  						18.6888,
  						52.998
  					],
  					[
  						18.7009,
  						52.9769
  					],
  					[
  						18.6752,
  						52.9725
  					],
  					[
  						18.6598,
  						52.9894
  					],
  					[
  						18.6082,
  						52.9742
  					],
  					[
  						18.5676,
  						52.9753
  					],
  					[
  						18.5504,
  						52.9631
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 48,
  			name: "powiat tucholski",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.072,
  						53.7811
  					],
  					[
  						18.108,
  						53.7696
  					],
  					[
  						18.1518,
  						53.7682
  					],
  					[
  						18.1706,
  						53.7453
  					],
  					[
  						18.2047,
  						53.7401
  					],
  					[
  						18.2561,
  						53.7462
  					],
  					[
  						18.2739,
  						53.7317
  					],
  					[
  						18.2638,
  						53.701
  					],
  					[
  						18.2365,
  						53.7095
  					],
  					[
  						18.207,
  						53.6986
  					],
  					[
  						18.2243,
  						53.6673
  					],
  					[
  						18.2175,
  						53.6596
  					],
  					[
  						18.2044,
  						53.6421
  					],
  					[
  						18.1718,
  						53.6277
  					],
  					[
  						18.1828,
  						53.5983
  					],
  					[
  						18.1723,
  						53.5849
  					],
  					[
  						18.1955,
  						53.561
  					],
  					[
  						18.2035,
  						53.5362
  					],
  					[
  						18.1603,
  						53.5248
  					],
  					[
  						18.1301,
  						53.5259
  					],
  					[
  						18.1123,
  						53.5046
  					],
  					[
  						18.1158,
  						53.4716
  					],
  					[
  						18.0764,
  						53.467
  					],
  					[
  						18.053,
  						53.4432
  					],
  					[
  						18.0834,
  						53.4364
  					],
  					[
  						18.0608,
  						53.4194
  					],
  					[
  						18.0534,
  						53.3973
  					],
  					[
  						18.0343,
  						53.3936
  					],
  					[
  						17.9699,
  						53.3842
  					],
  					[
  						17.9323,
  						53.4301
  					],
  					[
  						17.8971,
  						53.439
  					],
  					[
  						17.8489,
  						53.4159
  					],
  					[
  						17.8133,
  						53.4327
  					],
  					[
  						17.7695,
  						53.4332
  					],
  					[
  						17.73,
  						53.4342
  					],
  					[
  						17.7198,
  						53.5052
  					],
  					[
  						17.6765,
  						53.5007
  					],
  					[
  						17.6365,
  						53.5341
  					],
  					[
  						17.6318,
  						53.5573
  					],
  					[
  						17.6567,
  						53.5712
  					],
  					[
  						17.6872,
  						53.5927
  					],
  					[
  						17.7304,
  						53.5929
  					],
  					[
  						17.7119,
  						53.6362
  					],
  					[
  						17.7342,
  						53.6633
  					],
  					[
  						17.7665,
  						53.6882
  					],
  					[
  						17.7981,
  						53.6788
  					],
  					[
  						17.8335,
  						53.6924
  					],
  					[
  						17.8522,
  						53.6879
  					],
  					[
  						17.8967,
  						53.7099
  					],
  					[
  						17.8686,
  						53.7596
  					],
  					[
  						17.9009,
  						53.7479
  					],
  					[
  						17.9318,
  						53.7493
  					],
  					[
  						17.9912,
  						53.7245
  					],
  					[
  						18.0344,
  						53.7262
  					],
  					[
  						18.0468,
  						53.7362
  					],
  					[
  						18.072,
  						53.7811
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 49,
  			name: "powiat raciborski",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.4259,
  						50.249
  					],
  					[
  						18.448,
  						50.2469
  					],
  					[
  						18.4947,
  						50.1799
  					],
  					[
  						18.4502,
  						50.1555
  					],
  					[
  						18.4098,
  						50.1551
  					],
  					[
  						18.393,
  						50.1387
  					],
  					[
  						18.3514,
  						50.1453
  					],
  					[
  						18.2889,
  						50.1311
  					],
  					[
  						18.2925,
  						50.1145
  					],
  					[
  						18.314,
  						50.0968
  					],
  					[
  						18.3788,
  						50.0752
  					],
  					[
  						18.3491,
  						50.0576
  					],
  					[
  						18.2388,
  						50.0449
  					],
  					[
  						18.2789,
  						50.0133
  					],
  					[
  						18.2797,
  						49.9994
  					],
  					[
  						18.333,
  						49.9494
  					],
  					[
  						18.3333,
  						49.9276
  					],
  					[
  						18.2992,
  						49.9238
  					],
  					[
  						18.2792,
  						49.9401
  					],
  					[
  						18.278,
  						49.9635
  					],
  					[
  						18.2206,
  						49.9689
  					],
  					[
  						18.2065,
  						49.9979
  					],
  					[
  						18.168,
  						49.9985
  					],
  					[
  						18.1538,
  						49.9824
  					],
  					[
  						18.117,
  						49.9942
  					],
  					[
  						18.0933,
  						50.015
  					],
  					[
  						18.0894,
  						50.0441
  					],
  					[
  						18.066,
  						50.0481
  					],
  					[
  						18.035,
  						50.0658
  					],
  					[
  						18.0723,
  						50.1098
  					],
  					[
  						18.068,
  						50.1295
  					],
  					[
  						18.0502,
  						50.1381
  					],
  					[
  						18.0661,
  						50.157
  					],
  					[
  						18.0598,
  						50.1747
  					],
  					[
  						18.1335,
  						50.1844
  					],
  					[
  						18.2492,
  						50.1926
  					],
  					[
  						18.2359,
  						50.2135
  					],
  					[
  						18.2512,
  						50.2226
  					],
  					[
  						18.3084,
  						50.2313
  					],
  					[
  						18.313,
  						50.2407
  					],
  					[
  						18.3766,
  						50.2539
  					],
  					[
  						18.4259,
  						50.249
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 50,
  			name: "powiat cieszyński",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.8906,
  						49.9119
  					],
  					[
  						18.8808,
  						49.887
  					],
  					[
  						18.8389,
  						49.8759
  					],
  					[
  						18.8354,
  						49.8346
  					],
  					[
  						18.8485,
  						49.8031
  					],
  					[
  						18.8493,
  						49.8016
  					],
  					[
  						18.8931,
  						49.7787
  					],
  					[
  						18.9152,
  						49.759
  					],
  					[
  						18.9546,
  						49.7442
  					],
  					[
  						18.9864,
  						49.7367
  					],
  					[
  						18.9939,
  						49.7104
  					],
  					[
  						18.9545,
  						49.6789
  					],
  					[
  						18.9595,
  						49.6665
  					],
  					[
  						19.0015,
  						49.6566
  					],
  					[
  						19.0173,
  						49.6223
  					],
  					[
  						18.984,
  						49.587
  					],
  					[
  						18.9802,
  						49.5386
  					],
  					[
  						18.9548,
  						49.5362
  					],
  					[
  						18.9466,
  						49.5174
  					],
  					[
  						18.8971,
  						49.5144
  					],
  					[
  						18.843,
  						49.5185
  					],
  					[
  						18.8592,
  						49.5507
  					],
  					[
  						18.8376,
  						49.5622
  					],
  					[
  						18.8243,
  						49.6145
  					],
  					[
  						18.8063,
  						49.6513
  					],
  					[
  						18.8046,
  						49.6789
  					],
  					[
  						18.7806,
  						49.6854
  					],
  					[
  						18.7512,
  						49.6769
  					],
  					[
  						18.7192,
  						49.6838
  					],
  					[
  						18.7065,
  						49.7044
  					],
  					[
  						18.6526,
  						49.7077
  					],
  					[
  						18.6252,
  						49.7224
  					],
  					[
  						18.6291,
  						49.7473
  					],
  					[
  						18.6149,
  						49.7534
  					],
  					[
  						18.593,
  						49.8017
  					],
  					[
  						18.5694,
  						49.8344
  					],
  					[
  						18.6039,
  						49.8571
  					],
  					[
  						18.566,
  						49.8831
  					],
  					[
  						18.5757,
  						49.9104
  					],
  					[
  						18.6296,
  						49.8999
  					],
  					[
  						18.6684,
  						49.8859
  					],
  					[
  						18.722,
  						49.8975
  					],
  					[
  						18.7103,
  						49.9228
  					],
  					[
  						18.7521,
  						49.9351
  					],
  					[
  						18.7778,
  						49.9127
  					],
  					[
  						18.8528,
  						49.92
  					],
  					[
  						18.8906,
  						49.9119
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 51,
  			name: "powiat krośnieński",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.6545,
  						49.8387
  					],
  					[
  						21.6606,
  						49.8438
  					],
  					[
  						21.7169,
  						49.8121
  					],
  					[
  						21.7352,
  						49.7958
  					],
  					[
  						21.7568,
  						49.7965
  					],
  					[
  						21.7726,
  						49.8006
  					],
  					[
  						21.8117,
  						49.7812
  					],
  					[
  						21.8583,
  						49.7918
  					],
  					[
  						21.8948,
  						49.7811
  					],
  					[
  						21.854,
  						49.7547
  					],
  					[
  						21.8985,
  						49.7442
  					],
  					[
  						21.9121,
  						49.7248
  					],
  					[
  						21.8765,
  						49.6908
  					],
  					[
  						21.8764,
  						49.6906
  					],
  					[
  						21.8527,
  						49.6585
  					],
  					[
  						21.8619,
  						49.6427
  					],
  					[
  						21.9223,
  						49.6311
  					],
  					[
  						21.9639,
  						49.6179
  					],
  					[
  						21.9335,
  						49.6205
  					],
  					[
  						21.9157,
  						49.5943
  					],
  					[
  						21.9359,
  						49.5527
  					],
  					[
  						21.9266,
  						49.5264
  					],
  					[
  						21.9395,
  						49.5046
  					],
  					[
  						21.9693,
  						49.4885
  					],
  					[
  						21.9503,
  						49.4757
  					],
  					[
  						21.9715,
  						49.4513
  					],
  					[
  						21.926,
  						49.4345
  					],
  					[
  						21.9404,
  						49.3666
  					],
  					[
  						21.9522,
  						49.35
  					],
  					[
  						21.932,
  						49.3464
  					],
  					[
  						21.859,
  						49.3686
  					],
  					[
  						21.8402,
  						49.3915
  					],
  					[
  						21.797,
  						49.3785
  					],
  					[
  						21.778,
  						49.356
  					],
  					[
  						21.7634,
  						49.3835
  					],
  					[
  						21.7258,
  						49.3992
  					],
  					[
  						21.6975,
  						49.4183
  					],
  					[
  						21.6589,
  						49.4168
  					],
  					[
  						21.6309,
  						49.4473
  					],
  					[
  						21.5803,
  						49.4353
  					],
  					[
  						21.5696,
  						49.4565
  					],
  					[
  						21.591,
  						49.4706
  					],
  					[
  						21.5892,
  						49.4845
  					],
  					[
  						21.6142,
  						49.4969
  					],
  					[
  						21.6011,
  						49.5314
  					],
  					[
  						21.5824,
  						49.5524
  					],
  					[
  						21.5849,
  						49.5549
  					],
  					[
  						21.5984,
  						49.5845
  					],
  					[
  						21.6177,
  						49.6023
  					],
  					[
  						21.6194,
  						49.626
  					],
  					[
  						21.6207,
  						49.6284
  					],
  					[
  						21.6209,
  						49.6285
  					],
  					[
  						21.6216,
  						49.6288
  					],
  					[
  						21.6207,
  						49.6308
  					],
  					[
  						21.6206,
  						49.631
  					],
  					[
  						21.6209,
  						49.6312
  					],
  					[
  						21.6208,
  						49.6328
  					],
  					[
  						21.6213,
  						49.6333
  					],
  					[
  						21.6099,
  						49.6363
  					],
  					[
  						21.5724,
  						49.6319
  					],
  					[
  						21.5779,
  						49.6477
  					],
  					[
  						21.5854,
  						49.6527
  					],
  					[
  						21.5853,
  						49.653
  					],
  					[
  						21.5798,
  						49.6921
  					],
  					[
  						21.6071,
  						49.7067
  					],
  					[
  						21.608,
  						49.7071
  					],
  					[
  						21.6209,
  						49.7266
  					],
  					[
  						21.6105,
  						49.7608
  					],
  					[
  						21.6245,
  						49.7614
  					],
  					[
  						21.6509,
  						49.7728
  					],
  					[
  						21.6342,
  						49.7739
  					],
  					[
  						21.6181,
  						49.7979
  					],
  					[
  						21.627,
  						49.7975
  					],
  					[
  						21.6299,
  						49.821
  					],
  					[
  						21.6545,
  						49.8387
  					]
  				],
  				[
  					[
  						21.7791,
  						49.647
  					],
  					[
  						21.8034,
  						49.6617
  					],
  					[
  						21.8101,
  						49.6975
  					],
  					[
  						21.7585,
  						49.7221
  					],
  					[
  						21.7277,
  						49.7207
  					],
  					[
  						21.6947,
  						49.7085
  					],
  					[
  						21.7023,
  						49.6841
  					],
  					[
  						21.7467,
  						49.6704
  					],
  					[
  						21.7791,
  						49.647
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 52,
  			name: "powiat nyski",
  			province: "Opolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.4668,
  						50.6151
  					],
  					[
  						17.4959,
  						50.5911
  					],
  					[
  						17.5583,
  						50.5859
  					],
  					[
  						17.5706,
  						50.5938
  					],
  					[
  						17.6076,
  						50.5719
  					],
  					[
  						17.6128,
  						50.5562
  					],
  					[
  						17.6543,
  						50.5615
  					],
  					[
  						17.6925,
  						50.5575
  					],
  					[
  						17.7214,
  						50.5757
  					],
  					[
  						17.763,
  						50.5546
  					],
  					[
  						17.7021,
  						50.5027
  					],
  					[
  						17.7194,
  						50.4866
  					],
  					[
  						17.6745,
  						50.4841
  					],
  					[
  						17.6701,
  						50.4574
  					],
  					[
  						17.628,
  						50.4401
  					],
  					[
  						17.6218,
  						50.4392
  					],
  					[
  						17.6212,
  						50.4388
  					],
  					[
  						17.6191,
  						50.4376
  					],
  					[
  						17.6172,
  						50.4368
  					],
  					[
  						17.6144,
  						50.4359
  					],
  					[
  						17.6135,
  						50.4356
  					],
  					[
  						17.595,
  						50.4237
  					],
  					[
  						17.5623,
  						50.4092
  					],
  					[
  						17.5343,
  						50.41
  					],
  					[
  						17.5336,
  						50.4134
  					],
  					[
  						17.5191,
  						50.4098
  					],
  					[
  						17.479,
  						50.3953
  					],
  					[
  						17.455,
  						50.3678
  					],
  					[
  						17.4518,
  						50.2977
  					],
  					[
  						17.4886,
  						50.2776
  					],
  					[
  						17.5048,
  						50.2747
  					],
  					[
  						17.4729,
  						50.27
  					],
  					[
  						17.4375,
  						50.2517
  					],
  					[
  						17.4207,
  						50.2774
  					],
  					[
  						17.3888,
  						50.2828
  					],
  					[
  						17.3428,
  						50.2809
  					],
  					[
  						17.3537,
  						50.308
  					],
  					[
  						17.3278,
  						50.3271
  					],
  					[
  						17.2898,
  						50.3175
  					],
  					[
  						17.2479,
  						50.3318
  					],
  					[
  						17.2011,
  						50.364
  					],
  					[
  						17.2038,
  						50.3861
  					],
  					[
  						17.1433,
  						50.3804
  					],
  					[
  						17.1108,
  						50.405
  					],
  					[
  						17.0531,
  						50.4069
  					],
  					[
  						16.9983,
  						50.4277
  					],
  					[
  						16.9825,
  						50.4197
  					],
  					[
  						16.9079,
  						50.4494
  					],
  					[
  						16.9403,
  						50.4611
  					],
  					[
  						16.9474,
  						50.4802
  					],
  					[
  						16.976,
  						50.4756
  					],
  					[
  						17.0201,
  						50.4803
  					],
  					[
  						17.0492,
  						50.4643
  					],
  					[
  						17.062,
  						50.4756
  					],
  					[
  						17.0618,
  						50.5093
  					],
  					[
  						17.0692,
  						50.514
  					],
  					[
  						17.0743,
  						50.515
  					],
  					[
  						17.0613,
  						50.5369
  					],
  					[
  						17.1149,
  						50.5874
  					],
  					[
  						17.124,
  						50.6084
  					],
  					[
  						17.1649,
  						50.6135
  					],
  					[
  						17.2322,
  						50.6145
  					],
  					[
  						17.2159,
  						50.6039
  					],
  					[
  						17.2199,
  						50.5861
  					],
  					[
  						17.2768,
  						50.5846
  					],
  					[
  						17.2739,
  						50.6023
  					],
  					[
  						17.3348,
  						50.6152
  					],
  					[
  						17.332,
  						50.6315
  					],
  					[
  						17.3596,
  						50.6414
  					],
  					[
  						17.374,
  						50.6695
  					],
  					[
  						17.4055,
  						50.6656
  					],
  					[
  						17.3984,
  						50.6446
  					],
  					[
  						17.4155,
  						50.633
  					],
  					[
  						17.4185,
  						50.6108
  					],
  					[
  						17.4668,
  						50.6151
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 53,
  			name: "powiat Jelenia Góra",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.7632,
  						50.9289
  					],
  					[
  						15.8012,
  						50.9158
  					],
  					[
  						15.8283,
  						50.9321
  					],
  					[
  						15.8698,
  						50.9133
  					],
  					[
  						15.8772,
  						50.9003
  					],
  					[
  						15.8308,
  						50.8931
  					],
  					[
  						15.8023,
  						50.9004
  					],
  					[
  						15.7725,
  						50.8842
  					],
  					[
  						15.7647,
  						50.8593
  					],
  					[
  						15.7358,
  						50.8732
  					],
  					[
  						15.7086,
  						50.8477
  					],
  					[
  						15.6661,
  						50.8471
  					],
  					[
  						15.6299,
  						50.8071
  					],
  					[
  						15.6487,
  						50.8013
  					],
  					[
  						15.62,
  						50.7678
  					],
  					[
  						15.5779,
  						50.7787
  					],
  					[
  						15.5838,
  						50.8129
  					],
  					[
  						15.6171,
  						50.8305
  					],
  					[
  						15.6302,
  						50.8624
  					],
  					[
  						15.6637,
  						50.8769
  					],
  					[
  						15.6578,
  						50.8963
  					],
  					[
  						15.7077,
  						50.9236
  					],
  					[
  						15.7333,
  						50.9204
  					],
  					[
  						15.7632,
  						50.9289
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 54,
  			name: "powiat zgorzelecki",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.2755,
  						51.4298
  					],
  					[
  						15.2962,
  						51.4066
  					],
  					[
  						15.2562,
  						51.399
  					],
  					[
  						15.2687,
  						51.3731
  					],
  					[
  						15.2486,
  						51.3678
  					],
  					[
  						15.2679,
  						51.3276
  					],
  					[
  						15.2855,
  						51.3196
  					],
  					[
  						15.2972,
  						51.2794
  					],
  					[
  						15.3399,
  						51.2591
  					],
  					[
  						15.3101,
  						51.2534
  					],
  					[
  						15.2988,
  						51.2675
  					],
  					[
  						15.24,
  						51.255
  					],
  					[
  						15.2416,
  						51.2423
  					],
  					[
  						15.2137,
  						51.2235
  					],
  					[
  						15.217,
  						51.1931
  					],
  					[
  						15.1973,
  						51.1619
  					],
  					[
  						15.1699,
  						51.1662
  					],
  					[
  						15.1305,
  						51.1263
  					],
  					[
  						15.1315,
  						51.0998
  					],
  					[
  						15.1211,
  						51.0802
  					],
  					[
  						15.1412,
  						51.0583
  					],
  					[
  						15.149,
  						51.0337
  					],
  					[
  						15.1682,
  						51.0185
  					],
  					[
  						15.1444,
  						51.0134
  					],
  					[
  						15.1361,
  						50.9916
  					],
  					[
  						15.1269,
  						50.9912
  					],
  					[
  						15.122,
  						50.9926
  					],
  					[
  						15.12,
  						50.9932
  					],
  					[
  						15.1128,
  						50.9922
  					],
  					[
  						15.1094,
  						50.9918
  					],
  					[
  						15.1064,
  						50.9916
  					],
  					[
  						15.1028,
  						50.9932
  					],
  					[
  						15.1008,
  						50.9948
  					],
  					[
  						15.1007,
  						50.9948
  					],
  					[
  						15.1008,
  						50.9948
  					],
  					[
  						15.1007,
  						50.9948
  					],
  					[
  						15.1005,
  						50.9952
  					],
  					[
  						15.1005,
  						50.9954
  					],
  					[
  						15.1005,
  						50.996
  					],
  					[
  						15.1003,
  						50.9963
  					],
  					[
  						15.0989,
  						50.9977
  					],
  					[
  						15.0989,
  						50.9978
  					],
  					[
  						15.0989,
  						50.9977
  					],
  					[
  						15.0989,
  						50.9978
  					],
  					[
  						15.099,
  						50.9982
  					],
  					[
  						15.0992,
  						50.9987
  					],
  					[
  						15.0969,
  						51.0019
  					],
  					[
  						15.0984,
  						51.004
  					],
  					[
  						15.1052,
  						51.0067
  					],
  					[
  						15.1058,
  						51.0072
  					],
  					[
  						15.1059,
  						51.0072
  					],
  					[
  						15.106,
  						51.0072
  					],
  					[
  						15.1059,
  						51.0072
  					],
  					[
  						15.106,
  						51.0072
  					],
  					[
  						15.1061,
  						51.0071
  					],
  					[
  						15.1072,
  						51.0082
  					],
  					[
  						15.1071,
  						51.0091
  					],
  					[
  						15.1071,
  						51.0097
  					],
  					[
  						15.1071,
  						51.0098
  					],
  					[
  						15.1061,
  						51.0103
  					],
  					[
  						15.1039,
  						51.0113
  					],
  					[
  						15.1036,
  						51.0114
  					],
  					[
  						15.1037,
  						51.0116
  					],
  					[
  						15.1026,
  						51.0121
  					],
  					[
  						15.1025,
  						51.0121
  					],
  					[
  						15.1025,
  						51.0122
  					],
  					[
  						15.1026,
  						51.0121
  					],
  					[
  						15.1026,
  						51.0122
  					],
  					[
  						15.1025,
  						51.0122
  					],
  					[
  						15.1011,
  						51.0125
  					],
  					[
  						15.0941,
  						51.0125
  					],
  					[
  						15.0936,
  						51.0126
  					],
  					[
  						15.0788,
  						51.0137
  					],
  					[
  						15.077,
  						51.0145
  					],
  					[
  						15.0763,
  						51.0166
  					],
  					[
  						15.0386,
  						51.0121
  					],
  					[
  						15.0219,
  						51.0221
  					],
  					[
  						15.0161,
  						51.0198
  					],
  					[
  						15.0161,
  						51.0195
  					],
  					[
  						15.0161,
  						51.0194
  					],
  					[
  						15.0161,
  						51.0195
  					],
  					[
  						15.0161,
  						51.0194
  					],
  					[
  						15.0161,
  						51.0192
  					],
  					[
  						15.015,
  						51.0168
  					],
  					[
  						15.0129,
  						51.0158
  					],
  					[
  						15.0128,
  						51.0157
  					],
  					[
  						15.0129,
  						51.0158
  					],
  					[
  						15.0128,
  						51.0157
  					],
  					[
  						15.0065,
  						51.0137
  					],
  					[
  						14.9854,
  						51.0108
  					],
  					[
  						14.9682,
  						50.99
  					],
  					[
  						14.9915,
  						50.9807
  					],
  					[
  						14.9912,
  						50.9808
  					],
  					[
  						14.994,
  						50.982
  					],
  					[
  						14.9947,
  						50.9824
  					],
  					[
  						14.996,
  						50.9825
  					],
  					[
  						14.9981,
  						50.9832
  					],
  					[
  						14.9983,
  						50.9834
  					],
  					[
  						15.0054,
  						50.9862
  					],
  					[
  						15.0057,
  						50.9863
  					],
  					[
  						15.0108,
  						50.963
  					],
  					[
  						15.0104,
  						50.9381
  					],
  					[
  						14.9894,
  						50.9216
  					],
  					[
  						15.0021,
  						50.869
  					],
  					[
  						14.9593,
  						50.8619
  					],
  					[
  						14.9374,
  						50.8694
  					],
  					[
  						14.8756,
  						50.877
  					],
  					[
  						14.8234,
  						50.8706
  					],
  					[
  						14.8196,
  						50.8851
  					],
  					[
  						14.8659,
  						50.9166
  					],
  					[
  						14.9381,
  						51.0117
  					],
  					[
  						14.9676,
  						51.0711
  					],
  					[
  						14.9795,
  						51.0774
  					],
  					[
  						14.9826,
  						51.1134
  					],
  					[
  						14.9978,
  						51.1228
  					],
  					[
  						14.9931,
  						51.1624
  					],
  					[
  						15.0164,
  						51.2277
  					],
  					[
  						15.0379,
  						51.244
  					],
  					[
  						15.0329,
  						51.2944
  					],
  					[
  						14.9778,
  						51.3417
  					],
  					[
  						14.9742,
  						51.364
  					],
  					[
  						15.0089,
  						51.3644
  					],
  					[
  						15.0179,
  						51.3935
  					],
  					[
  						15.0712,
  						51.397
  					],
  					[
  						15.0862,
  						51.4255
  					],
  					[
  						15.1506,
  						51.4424
  					],
  					[
  						15.187,
  						51.464
  					],
  					[
  						15.2082,
  						51.4443
  					],
  					[
  						15.252,
  						51.449
  					],
  					[
  						15.2755,
  						51.4298
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 55,
  			name: "powiat przasnyski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.0365,
  						52.9676
  					],
  					[
  						21.0385,
  						52.9454
  					],
  					[
  						21.0056,
  						52.9435
  					],
  					[
  						20.9765,
  						52.9356
  					],
  					[
  						21.0054,
  						52.9055
  					],
  					[
  						20.9936,
  						52.8912
  					],
  					[
  						20.9413,
  						52.8763
  					],
  					[
  						20.8617,
  						52.8699
  					],
  					[
  						20.8366,
  						52.9068
  					],
  					[
  						20.7924,
  						52.9425
  					],
  					[
  						20.8021,
  						52.9649
  					],
  					[
  						20.7826,
  						52.9772
  					],
  					[
  						20.6992,
  						52.9879
  					],
  					[
  						20.6752,
  						53.0402
  					],
  					[
  						20.6826,
  						53.0745
  					],
  					[
  						20.6654,
  						53.087
  					],
  					[
  						20.6914,
  						53.0895
  					],
  					[
  						20.7264,
  						53.1071
  					],
  					[
  						20.7029,
  						53.124
  					],
  					[
  						20.7006,
  						53.1634
  					],
  					[
  						20.7201,
  						53.1829
  					],
  					[
  						20.6907,
  						53.2189
  					],
  					[
  						20.7083,
  						53.2255
  					],
  					[
  						20.6788,
  						53.2494
  					],
  					[
  						20.676,
  						53.2695
  					],
  					[
  						20.6933,
  						53.2921
  					],
  					[
  						20.7517,
  						53.313
  					],
  					[
  						20.7916,
  						53.3095
  					],
  					[
  						20.8487,
  						53.2923
  					],
  					[
  						20.8722,
  						53.3211
  					],
  					[
  						20.9171,
  						53.3219
  					],
  					[
  						20.9144,
  						53.3482
  					],
  					[
  						20.9917,
  						53.3614
  					],
  					[
  						21.0312,
  						53.3513
  					],
  					[
  						21.0539,
  						53.3343
  					],
  					[
  						21.0713,
  						53.3273
  					],
  					[
  						21.1126,
  						53.3072
  					],
  					[
  						21.1412,
  						53.3068
  					],
  					[
  						21.2021,
  						53.2781
  					],
  					[
  						21.1877,
  						53.2635
  					],
  					[
  						21.1554,
  						53.2576
  					],
  					[
  						21.1557,
  						53.2379
  					],
  					[
  						21.1768,
  						53.1952
  					],
  					[
  						21.147,
  						53.1746
  					],
  					[
  						21.1549,
  						53.159
  					],
  					[
  						21.1932,
  						53.1509
  					],
  					[
  						21.2143,
  						53.1332
  					],
  					[
  						21.1817,
  						53.1146
  					],
  					[
  						21.1461,
  						53.1372
  					],
  					[
  						21.1347,
  						53.1255
  					],
  					[
  						21.086,
  						53.1077
  					],
  					[
  						21.0824,
  						53.0825
  					],
  					[
  						21.0627,
  						53.0801
  					],
  					[
  						21.0109,
  						53.054
  					],
  					[
  						20.9971,
  						53.0238
  					],
  					[
  						21.0021,
  						52.9928
  					],
  					[
  						21.0365,
  						52.9676
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 56,
  			name: "powiat Ostrołęka",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.5389,
  						53.0881
  					],
  					[
  						21.5505,
  						53.1063
  					],
  					[
  						21.5777,
  						53.0994
  					],
  					[
  						21.6472,
  						53.11
  					],
  					[
  						21.666,
  						53.0927
  					],
  					[
  						21.6276,
  						53.084
  					],
  					[
  						21.6054,
  						53.071
  					],
  					[
  						21.6233,
  						53.0565
  					],
  					[
  						21.6068,
  						53.0434
  					],
  					[
  						21.5369,
  						53.0699
  					],
  					[
  						21.5389,
  						53.0881
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 57,
  			name: "powiat średzki",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.3265,
  						52.0106
  					],
  					[
  						17.2735,
  						52.0367
  					],
  					[
  						17.2757,
  						52.0674
  					],
  					[
  						17.3198,
  						52.0828
  					],
  					[
  						17.2926,
  						52.0959
  					],
  					[
  						17.2263,
  						52.1097
  					],
  					[
  						17.1831,
  						52.0993
  					],
  					[
  						17.1386,
  						52.1007
  					],
  					[
  						17.143,
  						52.133
  					],
  					[
  						17.1142,
  						52.1402
  					],
  					[
  						17.0947,
  						52.1647
  					],
  					[
  						17.0984,
  						52.1838
  					],
  					[
  						17.1277,
  						52.1879
  					],
  					[
  						17.1537,
  						52.2049
  					],
  					[
  						17.1301,
  						52.2164
  					],
  					[
  						17.1776,
  						52.2277
  					],
  					[
  						17.1451,
  						52.2457
  					],
  					[
  						17.1829,
  						52.2572
  					],
  					[
  						17.2391,
  						52.3049
  					],
  					[
  						17.3127,
  						52.3299
  					],
  					[
  						17.3316,
  						52.3491
  					],
  					[
  						17.3687,
  						52.3453
  					],
  					[
  						17.4035,
  						52.3388
  					],
  					[
  						17.4191,
  						52.324
  					],
  					[
  						17.3999,
  						52.3139
  					],
  					[
  						17.4071,
  						52.2851
  					],
  					[
  						17.4792,
  						52.2543
  					],
  					[
  						17.4527,
  						52.2443
  					],
  					[
  						17.4653,
  						52.1981
  					],
  					[
  						17.4306,
  						52.1944
  					],
  					[
  						17.4256,
  						52.1765
  					],
  					[
  						17.4485,
  						52.1452
  					],
  					[
  						17.4704,
  						52.1395
  					],
  					[
  						17.4656,
  						52.112
  					],
  					[
  						17.5144,
  						52.1241
  					],
  					[
  						17.5173,
  						52.094
  					],
  					[
  						17.4695,
  						52.0751
  					],
  					[
  						17.4916,
  						52.0512
  					],
  					[
  						17.4074,
  						52.0134
  					],
  					[
  						17.3419,
  						52.022
  					],
  					[
  						17.3265,
  						52.0106
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 58,
  			name: "powiat jarociński",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.5144,
  						52.1241
  					],
  					[
  						17.5478,
  						52.1445
  					],
  					[
  						17.5692,
  						52.1402
  					],
  					[
  						17.6246,
  						52.1449
  					],
  					[
  						17.6662,
  						52.1398
  					],
  					[
  						17.657,
  						52.1112
  					],
  					[
  						17.6969,
  						52.0631
  					],
  					[
  						17.7228,
  						52.045
  					],
  					[
  						17.6956,
  						52.0128
  					],
  					[
  						17.7042,
  						51.9494
  					],
  					[
  						17.7173,
  						51.9399
  					],
  					[
  						17.6857,
  						51.9184
  					],
  					[
  						17.6769,
  						51.902
  					],
  					[
  						17.6302,
  						51.9037
  					],
  					[
  						17.6105,
  						51.8933
  					],
  					[
  						17.514,
  						51.9008
  					],
  					[
  						17.4706,
  						51.893
  					],
  					[
  						17.4417,
  						51.8964
  					],
  					[
  						17.3974,
  						51.8734
  					],
  					[
  						17.3368,
  						51.8856
  					],
  					[
  						17.3072,
  						51.8966
  					],
  					[
  						17.314,
  						51.9115
  					],
  					[
  						17.2409,
  						51.9522
  					],
  					[
  						17.2287,
  						51.9674
  					],
  					[
  						17.1886,
  						51.9675
  					],
  					[
  						17.2226,
  						51.9877
  					],
  					[
  						17.3235,
  						51.9871
  					],
  					[
  						17.3265,
  						52.0106
  					],
  					[
  						17.3419,
  						52.022
  					],
  					[
  						17.4074,
  						52.0134
  					],
  					[
  						17.4916,
  						52.0512
  					],
  					[
  						17.4695,
  						52.0751
  					],
  					[
  						17.5173,
  						52.094
  					],
  					[
  						17.5144,
  						52.1241
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 59,
  			name: "powiat Gdynia",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.5075,
  						54.4228
  					],
  					[
  						18.451,
  						54.4433
  					],
  					[
  						18.438,
  						54.4631
  					],
  					[
  						18.4078,
  						54.4762
  					],
  					[
  						18.3802,
  						54.5069
  					],
  					[
  						18.3896,
  						54.5423
  					],
  					[
  						18.431,
  						54.5658
  					],
  					[
  						18.431,
  						54.5665
  					],
  					[
  						18.4618,
  						54.5574
  					],
  					[
  						18.5137,
  						54.5632
  					],
  					[
  						18.5417,
  						54.5845
  					],
  					[
  						18.5535,
  						54.5582
  					],
  					[
  						18.5691,
  						54.4853
  					],
  					[
  						18.5622,
  						54.4639
  					],
  					[
  						18.525,
  						54.4575
  					],
  					[
  						18.5045,
  						54.445
  					],
  					[
  						18.5075,
  						54.4228
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 60,
  			name: "powiat Świnoujście",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						14.3917,
  						53.916
  					],
  					[
  						14.4204,
  						53.864
  					],
  					[
  						14.4409,
  						53.7726
  					],
  					[
  						14.3814,
  						53.7686
  					],
  					[
  						14.2739,
  						53.7852
  					],
  					[
  						14.2139,
  						53.8654
  					],
  					[
  						14.2076,
  						53.9159
  					],
  					[
  						14.2261,
  						53.9277
  					],
  					[
  						14.2726,
  						53.9242
  					],
  					[
  						14.3445,
  						53.9119
  					],
  					[
  						14.3917,
  						53.916
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 61,
  			name: "powiat kamiennogórski",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.962,
  						50.8946
  					],
  					[
  						15.9803,
  						50.8953
  					],
  					[
  						16.0338,
  						50.8963
  					],
  					[
  						16.0741,
  						50.8842
  					],
  					[
  						16.0704,
  						50.8705
  					],
  					[
  						16.103,
  						50.8589
  					],
  					[
  						16.0869,
  						50.861
  					],
  					[
  						16.0679,
  						50.8263
  					],
  					[
  						16.0771,
  						50.7858
  					],
  					[
  						16.1078,
  						50.7586
  					],
  					[
  						16.1005,
  						50.749
  					],
  					[
  						16.1341,
  						50.7095
  					],
  					[
  						16.1738,
  						50.7086
  					],
  					[
  						16.1647,
  						50.6831
  					],
  					[
  						16.1122,
  						50.6783
  					],
  					[
  						16.1073,
  						50.6621
  					],
  					[
  						16.0676,
  						50.6398
  					],
  					[
  						16.0584,
  						50.6131
  					],
  					[
  						16.0292,
  						50.6038
  					],
  					[
  						15.9864,
  						50.6147
  					],
  					[
  						16.0148,
  						50.6285
  					],
  					[
  						15.9886,
  						50.6849
  					],
  					[
  						15.9666,
  						50.6918
  					],
  					[
  						15.9384,
  						50.6867
  					],
  					[
  						15.9345,
  						50.687
  					],
  					[
  						15.934,
  						50.6869
  					],
  					[
  						15.9322,
  						50.6865
  					],
  					[
  						15.9311,
  						50.6859
  					],
  					[
  						15.8799,
  						50.6712
  					],
  					[
  						15.8634,
  						50.6802
  					],
  					[
  						15.8517,
  						50.707
  					],
  					[
  						15.8299,
  						50.7247
  					],
  					[
  						15.8319,
  						50.7427
  					],
  					[
  						15.8618,
  						50.7454
  					],
  					[
  						15.8675,
  						50.7697
  					],
  					[
  						15.8925,
  						50.7907
  					],
  					[
  						15.8888,
  						50.8042
  					],
  					[
  						15.9572,
  						50.8485
  					],
  					[
  						15.9525,
  						50.8728
  					],
  					[
  						15.962,
  						50.8946
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 62,
  			name: "powiat pabianicki",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.4318,
  						51.6866
  					],
  					[
  						19.4354,
  						51.6465
  					],
  					[
  						19.4189,
  						51.6313
  					],
  					[
  						19.4668,
  						51.603
  					],
  					[
  						19.4523,
  						51.5778
  					],
  					[
  						19.4761,
  						51.5674
  					],
  					[
  						19.4683,
  						51.5426
  					],
  					[
  						19.459,
  						51.5315
  					],
  					[
  						19.4143,
  						51.5254
  					],
  					[
  						19.383,
  						51.5295
  					],
  					[
  						19.329,
  						51.5223
  					],
  					[
  						19.289,
  						51.5321
  					],
  					[
  						19.2828,
  						51.5448
  					],
  					[
  						19.2734,
  						51.5552
  					],
  					[
  						19.2501,
  						51.5744
  					],
  					[
  						19.2046,
  						51.5843
  					],
  					[
  						19.213,
  						51.6155
  					],
  					[
  						19.1514,
  						51.6348
  					],
  					[
  						19.208,
  						51.6694
  					],
  					[
  						19.1866,
  						51.7021
  					],
  					[
  						19.1804,
  						51.7277
  					],
  					[
  						19.1421,
  						51.76
  					],
  					[
  						19.099,
  						51.7636
  					],
  					[
  						19.056,
  						51.7781
  					],
  					[
  						19.027,
  						51.7908
  					],
  					[
  						18.9989,
  						51.8199
  					],
  					[
  						19.0352,
  						51.8289
  					],
  					[
  						19.0847,
  						51.8302
  					],
  					[
  						19.1042,
  						51.8191
  					],
  					[
  						19.1386,
  						51.8251
  					],
  					[
  						19.1618,
  						51.8125
  					],
  					[
  						19.2401,
  						51.7966
  					],
  					[
  						19.2974,
  						51.7712
  					],
  					[
  						19.3373,
  						51.7841
  					],
  					[
  						19.3376,
  						51.7673
  					],
  					[
  						19.3746,
  						51.7559
  					],
  					[
  						19.3717,
  						51.7421
  					],
  					[
  						19.3444,
  						51.7339
  					],
  					[
  						19.3594,
  						51.6992
  					],
  					[
  						19.4186,
  						51.6932
  					],
  					[
  						19.4318,
  						51.6866
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 63,
  			name: "powiat kolneński",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.7354,
  						53.3127
  					],
  					[
  						21.6928,
  						53.3358
  					],
  					[
  						21.6542,
  						53.3495
  					],
  					[
  						21.684,
  						53.3681
  					],
  					[
  						21.6617,
  						53.378
  					],
  					[
  						21.6524,
  						53.3972
  					],
  					[
  						21.6267,
  						53.4073
  					],
  					[
  						21.625,
  						53.4285
  					],
  					[
  						21.6073,
  						53.4357
  					],
  					[
  						21.613,
  						53.4808
  					],
  					[
  						21.6479,
  						53.4812
  					],
  					[
  						21.6867,
  						53.4928
  					],
  					[
  						21.7906,
  						53.4793
  					],
  					[
  						21.8583,
  						53.4589
  					],
  					[
  						21.891,
  						53.4665
  					],
  					[
  						21.902,
  						53.4932
  					],
  					[
  						21.9235,
  						53.5085
  					],
  					[
  						21.9526,
  						53.5094
  					],
  					[
  						21.9899,
  						53.5221
  					],
  					[
  						22.0307,
  						53.4971
  					],
  					[
  						22.0505,
  						53.5249
  					],
  					[
  						22.1357,
  						53.5445
  					],
  					[
  						22.1702,
  						53.5355
  					],
  					[
  						22.1855,
  						53.51
  					],
  					[
  						22.2406,
  						53.5357
  					],
  					[
  						22.2658,
  						53.5066
  					],
  					[
  						22.2658,
  						53.5065
  					],
  					[
  						22.2658,
  						53.5066
  					],
  					[
  						22.2659,
  						53.5065
  					],
  					[
  						22.2658,
  						53.5065
  					],
  					[
  						22.2659,
  						53.5065
  					],
  					[
  						22.2659,
  						53.5064
  					],
  					[
  						22.2662,
  						53.506
  					],
  					[
  						22.2661,
  						53.5058
  					],
  					[
  						22.2664,
  						53.5047
  					],
  					[
  						22.2669,
  						53.5029
  					],
  					[
  						22.2668,
  						53.5029
  					],
  					[
  						22.2669,
  						53.5029
  					],
  					[
  						22.2668,
  						53.5029
  					],
  					[
  						22.2646,
  						53.5014
  					],
  					[
  						22.2646,
  						53.5013
  					],
  					[
  						22.2646,
  						53.5014
  					],
  					[
  						22.2646,
  						53.5013
  					],
  					[
  						22.2434,
  						53.4936
  					],
  					[
  						22.262,
  						53.4757
  					],
  					[
  						22.262,
  						53.4754
  					],
  					[
  						22.2542,
  						53.4738
  					],
  					[
  						22.2309,
  						53.4408
  					],
  					[
  						22.2794,
  						53.4378
  					],
  					[
  						22.2399,
  						53.4257
  					],
  					[
  						22.267,
  						53.3918
  					],
  					[
  						22.236,
  						53.3691
  					],
  					[
  						22.2375,
  						53.3258
  					],
  					[
  						22.2449,
  						53.3069
  					],
  					[
  						22.2053,
  						53.2992
  					],
  					[
  						22.1532,
  						53.3074
  					],
  					[
  						22.1332,
  						53.297
  					],
  					[
  						22.1152,
  						53.2636
  					],
  					[
  						22.0216,
  						53.273
  					],
  					[
  						21.9856,
  						53.2391
  					],
  					[
  						21.9484,
  						53.248
  					],
  					[
  						21.9567,
  						53.281
  					],
  					[
  						21.9047,
  						53.2741
  					],
  					[
  						21.8838,
  						53.2911
  					],
  					[
  						21.8768,
  						53.3189
  					],
  					[
  						21.8252,
  						53.3224
  					],
  					[
  						21.8042,
  						53.3352
  					],
  					[
  						21.7354,
  						53.3127
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 64,
  			name: "powiat Opole",
  			province: "Opolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.853,
  						50.6648
  					],
  					[
  						17.8275,
  						50.6778
  					],
  					[
  						17.7836,
  						50.6838
  					],
  					[
  						17.8094,
  						50.7132
  					],
  					[
  						17.8806,
  						50.7167
  					],
  					[
  						17.8596,
  						50.7315
  					],
  					[
  						17.8735,
  						50.7506
  					],
  					[
  						17.8583,
  						50.7645
  					],
  					[
  						17.8585,
  						50.7647
  					],
  					[
  						17.927,
  						50.7674
  					],
  					[
  						17.9338,
  						50.7373
  					],
  					[
  						17.9271,
  						50.7133
  					],
  					[
  						17.9583,
  						50.7006
  					],
  					[
  						18.0016,
  						50.6577
  					],
  					[
  						18.0324,
  						50.6496
  					],
  					[
  						18.0327,
  						50.6221
  					],
  					[
  						18.0147,
  						50.622
  					],
  					[
  						17.9538,
  						50.6023
  					],
  					[
  						17.9605,
  						50.6205
  					],
  					[
  						17.8512,
  						50.6437
  					],
  					[
  						17.853,
  						50.6648
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 65,
  			name: "powiat ostródzki",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.5603,
  						53.9167
  					],
  					[
  						19.5813,
  						53.9271
  					],
  					[
  						19.576,
  						53.9483
  					],
  					[
  						19.6165,
  						53.962
  					],
  					[
  						19.6804,
  						53.9413
  					],
  					[
  						19.7064,
  						53.9663
  					],
  					[
  						19.7264,
  						53.9639
  					],
  					[
  						19.7908,
  						53.9847
  					],
  					[
  						19.7997,
  						53.983
  					],
  					[
  						19.8022,
  						53.9808
  					],
  					[
  						19.8039,
  						53.9805
  					],
  					[
  						19.8091,
  						53.9779
  					],
  					[
  						19.8099,
  						53.9777
  					],
  					[
  						19.7986,
  						53.9919
  					],
  					[
  						19.8202,
  						54.0114
  					],
  					[
  						19.8746,
  						54.0158
  					],
  					[
  						19.9017,
  						54.0372
  					],
  					[
  						19.9651,
  						54.0211
  					],
  					[
  						19.9783,
  						54.0395
  					],
  					[
  						20.0205,
  						54.033
  					],
  					[
  						20.0479,
  						54.0644
  					],
  					[
  						20.0582,
  						54.0769
  					],
  					[
  						20.0928,
  						54.0762
  					],
  					[
  						20.1105,
  						54.0537
  					],
  					[
  						20.138,
  						54.0437
  					],
  					[
  						20.143,
  						54.0107
  					],
  					[
  						20.161,
  						53.9848
  					],
  					[
  						20.151,
  						53.9643
  					],
  					[
  						20.1158,
  						53.9277
  					],
  					[
  						20.1107,
  						53.9024
  					],
  					[
  						20.1381,
  						53.8865
  					],
  					[
  						20.1778,
  						53.8822
  					],
  					[
  						20.1731,
  						53.8631
  					],
  					[
  						20.1291,
  						53.8504
  					],
  					[
  						20.1225,
  						53.8362
  					],
  					[
  						20.1551,
  						53.7906
  					],
  					[
  						20.1594,
  						53.768
  					],
  					[
  						20.1119,
  						53.7664
  					],
  					[
  						20.1177,
  						53.7508
  					],
  					[
  						20.1452,
  						53.7328
  					],
  					[
  						20.1129,
  						53.7127
  					],
  					[
  						20.1435,
  						53.7026
  					],
  					[
  						20.1332,
  						53.6667
  					],
  					[
  						20.1436,
  						53.6391
  					],
  					[
  						20.1156,
  						53.6154
  					],
  					[
  						20.1656,
  						53.5636
  					],
  					[
  						20.1701,
  						53.5467
  					],
  					[
  						20.2286,
  						53.5227
  					],
  					[
  						20.268,
  						53.49
  					],
  					[
  						20.2333,
  						53.4723
  					],
  					[
  						20.1869,
  						53.4584
  					],
  					[
  						20.1919,
  						53.4346
  					],
  					[
  						20.2288,
  						53.412
  					],
  					[
  						20.2011,
  						53.3952
  					],
  					[
  						20.1346,
  						53.4241
  					],
  					[
  						20.1117,
  						53.4149
  					],
  					[
  						20.092,
  						53.3785
  					],
  					[
  						20.0619,
  						53.3925
  					],
  					[
  						20.0265,
  						53.3943
  					],
  					[
  						19.9786,
  						53.4146
  					],
  					[
  						19.9773,
  						53.4345
  					],
  					[
  						19.948,
  						53.4384
  					],
  					[
  						19.9188,
  						53.4761
  					],
  					[
  						19.8959,
  						53.4842
  					],
  					[
  						19.896,
  						53.5199
  					],
  					[
  						19.8773,
  						53.5638
  					],
  					[
  						19.824,
  						53.5774
  					],
  					[
  						19.8166,
  						53.5816
  					],
  					[
  						19.8109,
  						53.6011
  					],
  					[
  						19.771,
  						53.608
  					],
  					[
  						19.7385,
  						53.6172
  					],
  					[
  						19.808,
  						53.6707
  					],
  					[
  						19.7895,
  						53.6868
  					],
  					[
  						19.7654,
  						53.6771
  					],
  					[
  						19.7414,
  						53.6922
  					],
  					[
  						19.7039,
  						53.7002
  					],
  					[
  						19.7017,
  						53.7191
  					],
  					[
  						19.7306,
  						53.7281
  					],
  					[
  						19.7193,
  						53.7498
  					],
  					[
  						19.7511,
  						53.7785
  					],
  					[
  						19.7394,
  						53.8322
  					],
  					[
  						19.7198,
  						53.8366
  					],
  					[
  						19.7127,
  						53.8657
  					],
  					[
  						19.6732,
  						53.888
  					],
  					[
  						19.6543,
  						53.8799
  					],
  					[
  						19.6257,
  						53.8946
  					],
  					[
  						19.5849,
  						53.8931
  					],
  					[
  						19.5826,
  						53.9109
  					],
  					[
  						19.5603,
  						53.9167
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 66,
  			name: "powiat przemyski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.0929,
  						49.9288
  					],
  					[
  						23.0314,
  						49.8795
  					],
  					[
  						22.9955,
  						49.8422
  					],
  					[
  						22.9707,
  						49.8386
  					],
  					[
  						22.9544,
  						49.8033
  					],
  					[
  						22.9328,
  						49.7933
  					],
  					[
  						22.8734,
  						49.7406
  					],
  					[
  						22.8478,
  						49.7101
  					],
  					[
  						22.8056,
  						49.6934
  					],
  					[
  						22.7872,
  						49.6765
  					],
  					[
  						22.7833,
  						49.6572
  					],
  					[
  						22.7494,
  						49.6313
  					],
  					[
  						22.6861,
  						49.5731
  					],
  					[
  						22.6639,
  						49.5932
  					],
  					[
  						22.632,
  						49.5898
  					],
  					[
  						22.6035,
  						49.6166
  					],
  					[
  						22.5842,
  						49.6512
  					],
  					[
  						22.584,
  						49.67
  					],
  					[
  						22.5277,
  						49.6635
  					],
  					[
  						22.5372,
  						49.6374
  					],
  					[
  						22.4855,
  						49.6089
  					],
  					[
  						22.4626,
  						49.5899
  					],
  					[
  						22.4279,
  						49.5932
  					],
  					[
  						22.3904,
  						49.6127
  					],
  					[
  						22.3889,
  						49.63
  					],
  					[
  						22.349,
  						49.6553
  					],
  					[
  						22.3236,
  						49.6723
  					],
  					[
  						22.327,
  						49.6857
  					],
  					[
  						22.3049,
  						49.7004
  					],
  					[
  						22.2596,
  						49.7117
  					],
  					[
  						22.2945,
  						49.7446
  					],
  					[
  						22.3305,
  						49.7522
  					],
  					[
  						22.3364,
  						49.7666
  					],
  					[
  						22.2953,
  						49.7961
  					],
  					[
  						22.321,
  						49.8153
  					],
  					[
  						22.3029,
  						49.8237
  					],
  					[
  						22.3073,
  						49.8617
  					],
  					[
  						22.2991,
  						49.8728
  					],
  					[
  						22.3035,
  						49.8729
  					],
  					[
  						22.3038,
  						49.8729
  					],
  					[
  						22.3054,
  						49.8727
  					],
  					[
  						22.3056,
  						49.8729
  					],
  					[
  						22.3066,
  						49.8729
  					],
  					[
  						22.3431,
  						49.8858
  					],
  					[
  						22.4184,
  						49.8883
  					],
  					[
  						22.4795,
  						49.8491
  					],
  					[
  						22.5439,
  						49.8386
  					],
  					[
  						22.5916,
  						49.8374
  					],
  					[
  						22.6635,
  						49.8655
  					],
  					[
  						22.6774,
  						49.8819
  					],
  					[
  						22.6718,
  						49.8978
  					],
  					[
  						22.7564,
  						49.9195
  					],
  					[
  						22.7821,
  						49.8954
  					],
  					[
  						22.8362,
  						49.9063
  					],
  					[
  						22.8573,
  						49.8874
  					],
  					[
  						22.8935,
  						49.8877
  					],
  					[
  						22.9148,
  						49.9057
  					],
  					[
  						22.9146,
  						49.9327
  					],
  					[
  						22.9557,
  						49.9236
  					],
  					[
  						22.9601,
  						49.9494
  					],
  					[
  						23.0342,
  						49.9402
  					],
  					[
  						23.057,
  						49.9273
  					],
  					[
  						23.0929,
  						49.9288
  					]
  				],
  				[
  					[
  						22.7635,
  						49.8082
  					],
  					[
  						22.7434,
  						49.8182
  					],
  					[
  						22.7249,
  						49.7908
  					],
  					[
  						22.7381,
  						49.7601
  					],
  					[
  						22.7754,
  						49.7464
  					],
  					[
  						22.8126,
  						49.7549
  					],
  					[
  						22.8485,
  						49.7841
  					],
  					[
  						22.8086,
  						49.7921
  					],
  					[
  						22.7971,
  						49.8114
  					],
  					[
  						22.7635,
  						49.8082
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 67,
  			name: "powiat Przemyśl",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.7635,
  						49.8082
  					],
  					[
  						22.7971,
  						49.8114
  					],
  					[
  						22.8086,
  						49.7921
  					],
  					[
  						22.8485,
  						49.7841
  					],
  					[
  						22.8126,
  						49.7549
  					],
  					[
  						22.7754,
  						49.7464
  					],
  					[
  						22.7381,
  						49.7601
  					],
  					[
  						22.7249,
  						49.7908
  					],
  					[
  						22.7434,
  						49.8182
  					],
  					[
  						22.7635,
  						49.8082
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 68,
  			name: "powiat warszawski zachodni",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.8205,
  						52.3789
  					],
  					[
  						20.8968,
  						52.3746
  					],
  					[
  						20.9151,
  						52.354
  					],
  					[
  						20.9221,
  						52.3237
  					],
  					[
  						20.895,
  						52.3213
  					],
  					[
  						20.8758,
  						52.2987
  					],
  					[
  						20.8787,
  						52.2651
  					],
  					[
  						20.891,
  						52.247
  					],
  					[
  						20.8731,
  						52.2291
  					],
  					[
  						20.8709,
  						52.2089
  					],
  					[
  						20.8531,
  						52.1972
  					],
  					[
  						20.816,
  						52.1911
  					],
  					[
  						20.7402,
  						52.1876
  					],
  					[
  						20.6989,
  						52.19
  					],
  					[
  						20.6413,
  						52.1814
  					],
  					[
  						20.6309,
  						52.1651
  					],
  					[
  						20.6038,
  						52.1576
  					],
  					[
  						20.545,
  						52.165
  					],
  					[
  						20.5321,
  						52.1895
  					],
  					[
  						20.5074,
  						52.1975
  					],
  					[
  						20.4849,
  						52.1838
  					],
  					[
  						20.4895,
  						52.2376
  					],
  					[
  						20.4426,
  						52.2411
  					],
  					[
  						20.4257,
  						52.2343
  					],
  					[
  						20.3972,
  						52.2458
  					],
  					[
  						20.3451,
  						52.2379
  					],
  					[
  						20.3357,
  						52.2571
  					],
  					[
  						20.3483,
  						52.2945
  					],
  					[
  						20.3829,
  						52.2948
  					],
  					[
  						20.3853,
  						52.3194
  					],
  					[
  						20.4215,
  						52.3311
  					],
  					[
  						20.4574,
  						52.322
  					],
  					[
  						20.4392,
  						52.2882
  					],
  					[
  						20.5342,
  						52.2948
  					],
  					[
  						20.5295,
  						52.3119
  					],
  					[
  						20.561,
  						52.3262
  					],
  					[
  						20.6041,
  						52.3337
  					],
  					[
  						20.6201,
  						52.3113
  					],
  					[
  						20.6464,
  						52.3148
  					],
  					[
  						20.7312,
  						52.3481
  					],
  					[
  						20.7405,
  						52.3223
  					],
  					[
  						20.7622,
  						52.3231
  					],
  					[
  						20.7789,
  						52.3506
  					],
  					[
  						20.8205,
  						52.3461
  					],
  					[
  						20.8205,
  						52.3789
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 69,
  			name: "powiat włodawski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.3209,
  						51.6566
  					],
  					[
  						23.3308,
  						51.6761
  					],
  					[
  						23.3592,
  						51.6863
  					],
  					[
  						23.4141,
  						51.7224
  					],
  					[
  						23.4018,
  						51.738
  					],
  					[
  						23.447,
  						51.7421
  					],
  					[
  						23.4484,
  						51.7651
  					],
  					[
  						23.4652,
  						51.7806
  					],
  					[
  						23.5187,
  						51.7603
  					],
  					[
  						23.5306,
  						51.7431
  					],
  					[
  						23.5581,
  						51.7016
  					],
  					[
  						23.5491,
  						51.6839
  					],
  					[
  						23.5578,
  						51.6647
  					],
  					[
  						23.5398,
  						51.6549
  					],
  					[
  						23.5425,
  						51.6003
  					],
  					[
  						23.5679,
  						51.5756
  					],
  					[
  						23.5651,
  						51.5344
  					],
  					[
  						23.593,
  						51.5354
  					],
  					[
  						23.6247,
  						51.5144
  					],
  					[
  						23.6211,
  						51.4959
  					],
  					[
  						23.6703,
  						51.4825
  					],
  					[
  						23.6513,
  						51.4455
  					],
  					[
  						23.7005,
  						51.4099
  					],
  					[
  						23.6806,
  						51.3801
  					],
  					[
  						23.6563,
  						51.3586
  					],
  					[
  						23.6562,
  						51.3391
  					],
  					[
  						23.6361,
  						51.3291
  					],
  					[
  						23.6562,
  						51.287
  					],
  					[
  						23.6857,
  						51.2904
  					],
  					[
  						23.7093,
  						51.2773
  					],
  					[
  						23.6536,
  						51.2768
  					],
  					[
  						23.6279,
  						51.2648
  					],
  					[
  						23.5991,
  						51.2756
  					],
  					[
  						23.5595,
  						51.3168
  					],
  					[
  						23.5087,
  						51.3251
  					],
  					[
  						23.5087,
  						51.3584
  					],
  					[
  						23.478,
  						51.3741
  					],
  					[
  						23.4581,
  						51.3545
  					],
  					[
  						23.4319,
  						51.3639
  					],
  					[
  						23.3859,
  						51.3529
  					],
  					[
  						23.3503,
  						51.3506
  					],
  					[
  						23.285,
  						51.3623
  					],
  					[
  						23.2692,
  						51.3298
  					],
  					[
  						23.2341,
  						51.3281
  					],
  					[
  						23.2167,
  						51.349
  					],
  					[
  						23.1952,
  						51.358
  					],
  					[
  						23.1396,
  						51.3662
  					],
  					[
  						23.0915,
  						51.3671
  					],
  					[
  						23.0939,
  						51.3778
  					],
  					[
  						23.0636,
  						51.4215
  					],
  					[
  						23.0912,
  						51.4621
  					],
  					[
  						23.1035,
  						51.4656
  					],
  					[
  						23.1765,
  						51.4593
  					],
  					[
  						23.1927,
  						51.467
  					],
  					[
  						23.2161,
  						51.5141
  					],
  					[
  						23.1548,
  						51.5561
  					],
  					[
  						23.1783,
  						51.5959
  					],
  					[
  						23.2018,
  						51.6144
  					],
  					[
  						23.2283,
  						51.6058
  					],
  					[
  						23.2562,
  						51.6114
  					],
  					[
  						23.2528,
  						51.6324
  					],
  					[
  						23.3109,
  						51.6278
  					],
  					[
  						23.3209,
  						51.6566
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 70,
  			name: "powiat Lublin",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.4654,
  						51.2364
  					],
  					[
  						22.4661,
  						51.2554
  					],
  					[
  						22.4928,
  						51.2816
  					],
  					[
  						22.5721,
  						51.286
  					],
  					[
  						22.6049,
  						51.2806
  					],
  					[
  						22.6645,
  						51.2425
  					],
  					[
  						22.6388,
  						51.214
  					],
  					[
  						22.612,
  						51.2094
  					],
  					[
  						22.6199,
  						51.1797
  					],
  					[
  						22.5541,
  						51.1765
  					],
  					[
  						22.5549,
  						51.1487
  					],
  					[
  						22.4842,
  						51.1439
  					],
  					[
  						22.4714,
  						51.1589
  					],
  					[
  						22.5158,
  						51.1864
  					],
  					[
  						22.4707,
  						51.2127
  					],
  					[
  						22.4654,
  						51.2364
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 71,
  			name: "powiat bocheński",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.3483,
  						50.0999
  					],
  					[
  						20.3538,
  						50.1171
  					],
  					[
  						20.3692,
  						50.1136
  					],
  					[
  						20.4429,
  						50.1425
  					],
  					[
  						20.5111,
  						50.1385
  					],
  					[
  						20.5081,
  						50.1039
  					],
  					[
  						20.5291,
  						50.0995
  					],
  					[
  						20.529,
  						50.0799
  					],
  					[
  						20.5658,
  						50.0804
  					],
  					[
  						20.6238,
  						50.0655
  					],
  					[
  						20.5982,
  						50.044
  					],
  					[
  						20.5774,
  						49.9986
  					],
  					[
  						20.5522,
  						49.9943
  					],
  					[
  						20.5504,
  						49.9572
  					],
  					[
  						20.5245,
  						49.9459
  					],
  					[
  						20.5367,
  						49.9306
  					],
  					[
  						20.5368,
  						49.9306
  					],
  					[
  						20.5367,
  						49.9306
  					],
  					[
  						20.5368,
  						49.9306
  					],
  					[
  						20.5389,
  						49.9283
  					],
  					[
  						20.5413,
  						49.9235
  					],
  					[
  						20.5549,
  						49.9142
  					],
  					[
  						20.5658,
  						49.8956
  					],
  					[
  						20.5547,
  						49.8846
  					],
  					[
  						20.5785,
  						49.8379
  					],
  					[
  						20.5224,
  						49.8287
  					],
  					[
  						20.5346,
  						49.8144
  					],
  					[
  						20.5181,
  						49.7982
  					],
  					[
  						20.4826,
  						49.7982
  					],
  					[
  						20.4709,
  						49.7803
  					],
  					[
  						20.4127,
  						49.7847
  					],
  					[
  						20.3641,
  						49.7789
  					],
  					[
  						20.3436,
  						49.8157
  					],
  					[
  						20.3148,
  						49.8227
  					],
  					[
  						20.2902,
  						49.8057
  					],
  					[
  						20.2726,
  						49.8182
  					],
  					[
  						20.2667,
  						49.8212
  					],
  					[
  						20.2583,
  						49.8309
  					],
  					[
  						20.2443,
  						49.8295
  					],
  					[
  						20.2442,
  						49.8297
  					],
  					[
  						20.2325,
  						49.8636
  					],
  					[
  						20.2594,
  						49.8713
  					],
  					[
  						20.2713,
  						49.8923
  					],
  					[
  						20.3056,
  						49.9145
  					],
  					[
  						20.316,
  						49.9678
  					],
  					[
  						20.3528,
  						49.9904
  					],
  					[
  						20.3239,
  						49.998
  					],
  					[
  						20.3208,
  						50.0185
  					],
  					[
  						20.3876,
  						50.0221
  					],
  					[
  						20.3797,
  						50.0646
  					],
  					[
  						20.3554,
  						50.0706
  					],
  					[
  						20.3483,
  						50.0999
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 72,
  			name: "powiat Tarnów",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.8937,
  						50.0121
  					],
  					[
  						20.8936,
  						50.0272
  					],
  					[
  						20.9278,
  						50.036
  					],
  					[
  						20.9385,
  						50.0666
  					],
  					[
  						20.9967,
  						50.0649
  					],
  					[
  						21.0347,
  						50.0505
  					],
  					[
  						21.033,
  						50.0327
  					],
  					[
  						21.0606,
  						50.0168
  					],
  					[
  						21.0224,
  						50.003
  					],
  					[
  						21.0241,
  						49.9894
  					],
  					[
  						20.9757,
  						49.9884
  					],
  					[
  						20.9721,
  						49.9882
  					],
  					[
  						20.9707,
  						49.9878
  					],
  					[
  						20.9135,
  						49.9884
  					],
  					[
  						20.8937,
  						50.0121
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 73,
  			name: "powiat wschowski",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.9681,
  						51.7879
  					],
  					[
  						15.9507,
  						51.8007
  					],
  					[
  						15.8839,
  						51.7989
  					],
  					[
  						15.8805,
  						51.8236
  					],
  					[
  						15.841,
  						51.8292
  					],
  					[
  						15.8352,
  						51.8519
  					],
  					[
  						15.8965,
  						51.8524
  					],
  					[
  						15.9087,
  						51.867
  					],
  					[
  						15.9428,
  						51.8757
  					],
  					[
  						15.9803,
  						51.8748
  					],
  					[
  						15.9918,
  						51.9036
  					],
  					[
  						15.9714,
  						51.9259
  					],
  					[
  						15.997,
  						51.9481
  					],
  					[
  						16.0106,
  						51.9814
  					],
  					[
  						16.0606,
  						51.9772
  					],
  					[
  						16.106,
  						51.9968
  					],
  					[
  						16.1212,
  						51.9919
  					],
  					[
  						16.1373,
  						51.9544
  					],
  					[
  						16.1262,
  						51.9339
  					],
  					[
  						16.1382,
  						51.9255
  					],
  					[
  						16.1087,
  						51.9036
  					],
  					[
  						16.169,
  						51.8845
  					],
  					[
  						16.1929,
  						51.8851
  					],
  					[
  						16.2149,
  						51.8698
  					],
  					[
  						16.2521,
  						51.9005
  					],
  					[
  						16.2803,
  						51.9002
  					],
  					[
  						16.3204,
  						51.8869
  					],
  					[
  						16.3351,
  						51.8711
  					],
  					[
  						16.4005,
  						51.8378
  					],
  					[
  						16.4018,
  						51.8045
  					],
  					[
  						16.4162,
  						51.7849
  					],
  					[
  						16.3765,
  						51.7626
  					],
  					[
  						16.3476,
  						51.7091
  					],
  					[
  						16.2694,
  						51.6847
  					],
  					[
  						16.2701,
  						51.6635
  					],
  					[
  						16.2184,
  						51.7133
  					],
  					[
  						16.16,
  						51.7117
  					],
  					[
  						16.1779,
  						51.7638
  					],
  					[
  						16.1332,
  						51.7591
  					],
  					[
  						16.034,
  						51.785
  					],
  					[
  						16.035,
  						51.7953
  					],
  					[
  						15.9948,
  						51.8048
  					],
  					[
  						15.9681,
  						51.7879
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 74,
  			name: "powiat gorzowski",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.3317,
  						52.9044
  					],
  					[
  						15.3654,
  						52.9018
  					],
  					[
  						15.3734,
  						52.8878
  					],
  					[
  						15.4234,
  						52.8865
  					],
  					[
  						15.4406,
  						52.8718
  					],
  					[
  						15.4422,
  						52.8411
  					],
  					[
  						15.4248,
  						52.8391
  					],
  					[
  						15.4271,
  						52.8133
  					],
  					[
  						15.4582,
  						52.7939
  					],
  					[
  						15.4562,
  						52.7765
  					],
  					[
  						15.4903,
  						52.752
  					],
  					[
  						15.5415,
  						52.7697
  					],
  					[
  						15.5758,
  						52.7673
  					],
  					[
  						15.5874,
  						52.7263
  					],
  					[
  						15.6037,
  						52.7141
  					],
  					[
  						15.5681,
  						52.6964
  					],
  					[
  						15.5375,
  						52.6937
  					],
  					[
  						15.4405,
  						52.701
  					],
  					[
  						15.3878,
  						52.6875
  					],
  					[
  						15.4043,
  						52.6605
  					],
  					[
  						15.371,
  						52.6425
  					],
  					[
  						15.3483,
  						52.6033
  					],
  					[
  						15.3503,
  						52.5915
  					],
  					[
  						15.306,
  						52.5901
  					],
  					[
  						15.2096,
  						52.5844
  					],
  					[
  						15.211,
  						52.6081
  					],
  					[
  						15.1947,
  						52.6356
  					],
  					[
  						15.1641,
  						52.6472
  					],
  					[
  						15.1374,
  						52.644
  					],
  					[
  						15.107,
  						52.618
  					],
  					[
  						15.0642,
  						52.6211
  					],
  					[
  						15.037,
  						52.6422
  					],
  					[
  						14.9992,
  						52.6403
  					],
  					[
  						14.9353,
  						52.6197
  					],
  					[
  						14.8803,
  						52.6154
  					],
  					[
  						14.8466,
  						52.6213
  					],
  					[
  						14.7846,
  						52.6015
  					],
  					[
  						14.7605,
  						52.6039
  					],
  					[
  						14.7044,
  						52.5923
  					],
  					[
  						14.6473,
  						52.5722
  					],
  					[
  						14.637,
  						52.5753
  					],
  					[
  						14.6137,
  						52.5866
  					],
  					[
  						14.5962,
  						52.6107
  					],
  					[
  						14.564,
  						52.6247
  					],
  					[
  						14.6383,
  						52.6593
  					],
  					[
  						14.6583,
  						52.6423
  					],
  					[
  						14.7214,
  						52.631
  					],
  					[
  						14.7476,
  						52.6471
  					],
  					[
  						14.7501,
  						52.6653
  					],
  					[
  						14.7916,
  						52.6971
  					],
  					[
  						14.7997,
  						52.7375
  					],
  					[
  						14.7894,
  						52.752
  					],
  					[
  						14.8135,
  						52.773
  					],
  					[
  						14.8489,
  						52.7775
  					],
  					[
  						14.8644,
  						52.7912
  					],
  					[
  						14.8545,
  						52.8245
  					],
  					[
  						14.9198,
  						52.8468
  					],
  					[
  						14.8904,
  						52.8607
  					],
  					[
  						14.9178,
  						52.8893
  					],
  					[
  						14.9783,
  						52.8661
  					],
  					[
  						14.9908,
  						52.8425
  					],
  					[
  						15.0388,
  						52.8612
  					],
  					[
  						15.0718,
  						52.8306
  					],
  					[
  						15.2856,
  						52.886
  					],
  					[
  						15.3317,
  						52.9044
  					]
  				],
  				[
  					[
  						15.2832,
  						52.7314
  					],
  					[
  						15.2822,
  						52.7694
  					],
  					[
  						15.2298,
  						52.7737
  					],
  					[
  						15.1874,
  						52.7633
  					],
  					[
  						15.1353,
  						52.7769
  					],
  					[
  						15.1247,
  						52.7474
  					],
  					[
  						15.1406,
  						52.7312
  					],
  					[
  						15.1348,
  						52.7099
  					],
  					[
  						15.1843,
  						52.7098
  					],
  					[
  						15.2062,
  						52.6968
  					],
  					[
  						15.2499,
  						52.685
  					],
  					[
  						15.2984,
  						52.693
  					],
  					[
  						15.3109,
  						52.7185
  					],
  					[
  						15.2832,
  						52.7314
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 75,
  			name: "powiat międzyrzecki",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.6037,
  						52.7141
  					],
  					[
  						15.6367,
  						52.7012
  					],
  					[
  						15.7377,
  						52.7133
  					],
  					[
  						15.7705,
  						52.7023
  					],
  					[
  						15.7933,
  						52.7069
  					],
  					[
  						15.814,
  						52.6678
  					],
  					[
  						15.7819,
  						52.6617
  					],
  					[
  						15.7763,
  						52.6379
  					],
  					[
  						15.7846,
  						52.6185
  					],
  					[
  						15.8281,
  						52.5825
  					],
  					[
  						15.8324,
  						52.5662
  					],
  					[
  						15.8584,
  						52.544
  					],
  					[
  						15.8348,
  						52.5293
  					],
  					[
  						15.863,
  						52.5104
  					],
  					[
  						15.8916,
  						52.4732
  					],
  					[
  						15.8956,
  						52.4466
  					],
  					[
  						15.846,
  						52.4314
  					],
  					[
  						15.8041,
  						52.4434
  					],
  					[
  						15.8434,
  						52.403
  					],
  					[
  						15.8962,
  						52.3942
  					],
  					[
  						15.8893,
  						52.3608
  					],
  					[
  						15.8824,
  						52.3273
  					],
  					[
  						15.8919,
  						52.3103
  					],
  					[
  						15.8808,
  						52.2904
  					],
  					[
  						15.8302,
  						52.3205
  					],
  					[
  						15.7994,
  						52.3183
  					],
  					[
  						15.725,
  						52.2906
  					],
  					[
  						15.6262,
  						52.3208
  					],
  					[
  						15.6224,
  						52.3427
  					],
  					[
  						15.5644,
  						52.3517
  					],
  					[
  						15.455,
  						52.3605
  					],
  					[
  						15.4358,
  						52.3756
  					],
  					[
  						15.45,
  						52.3863
  					],
  					[
  						15.4087,
  						52.4218
  					],
  					[
  						15.3613,
  						52.416
  					],
  					[
  						15.3338,
  						52.4263
  					],
  					[
  						15.3221,
  						52.455
  					],
  					[
  						15.3042,
  						52.4733
  					],
  					[
  						15.2658,
  						52.4852
  					],
  					[
  						15.2753,
  						52.5083
  					],
  					[
  						15.2763,
  						52.541
  					],
  					[
  						15.3102,
  						52.5439
  					],
  					[
  						15.306,
  						52.5901
  					],
  					[
  						15.3503,
  						52.5915
  					],
  					[
  						15.3483,
  						52.6033
  					],
  					[
  						15.371,
  						52.6425
  					],
  					[
  						15.4043,
  						52.6605
  					],
  					[
  						15.3878,
  						52.6875
  					],
  					[
  						15.4405,
  						52.701
  					],
  					[
  						15.5375,
  						52.6937
  					],
  					[
  						15.5681,
  						52.6964
  					],
  					[
  						15.6037,
  						52.7141
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 76,
  			name: "powiat słubicki",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						14.9204,
  						52.3674
  					],
  					[
  						14.92,
  						52.3668
  					],
  					[
  						14.8769,
  						52.3624
  					],
  					[
  						14.8748,
  						52.3418
  					],
  					[
  						14.906,
  						52.3268
  					],
  					[
  						14.8802,
  						52.3111
  					],
  					[
  						14.8688,
  						52.2916
  					],
  					[
  						14.9095,
  						52.2742
  					],
  					[
  						14.8972,
  						52.2402
  					],
  					[
  						14.9133,
  						52.2099
  					],
  					[
  						14.8889,
  						52.2065
  					],
  					[
  						14.885,
  						52.1647
  					],
  					[
  						14.8592,
  						52.1466
  					],
  					[
  						14.8108,
  						52.1383
  					],
  					[
  						14.8049,
  						52.0947
  					],
  					[
  						14.7552,
  						52.07
  					],
  					[
  						14.7413,
  						52.0852
  					],
  					[
  						14.6947,
  						52.1016
  					],
  					[
  						14.6816,
  						52.1166
  					],
  					[
  						14.6791,
  						52.1435
  					],
  					[
  						14.7053,
  						52.1735
  					],
  					[
  						14.6854,
  						52.1924
  					],
  					[
  						14.7117,
  						52.2192
  					],
  					[
  						14.7149,
  						52.2368
  					],
  					[
  						14.6927,
  						52.2557
  					],
  					[
  						14.5926,
  						52.2747
  					],
  					[
  						14.5758,
  						52.2886
  					],
  					[
  						14.5849,
  						52.3065
  					],
  					[
  						14.5536,
  						52.3499
  					],
  					[
  						14.5521,
  						52.3741
  					],
  					[
  						14.535,
  						52.3935
  					],
  					[
  						14.5476,
  						52.4317
  					],
  					[
  						14.5793,
  						52.4417
  					],
  					[
  						14.6331,
  						52.4901
  					],
  					[
  						14.605,
  						52.5276
  					],
  					[
  						14.6185,
  						52.5569
  					],
  					[
  						14.637,
  						52.5753
  					],
  					[
  						14.6473,
  						52.5722
  					],
  					[
  						14.711,
  						52.5471
  					],
  					[
  						14.8131,
  						52.5391
  					],
  					[
  						14.8055,
  						52.5253
  					],
  					[
  						14.8236,
  						52.5072
  					],
  					[
  						14.8763,
  						52.5118
  					],
  					[
  						14.929,
  						52.5299
  					],
  					[
  						14.9819,
  						52.5235
  					],
  					[
  						14.9722,
  						52.5061
  					],
  					[
  						14.9921,
  						52.4614
  					],
  					[
  						14.9943,
  						52.4601
  					],
  					[
  						15.0335,
  						52.4544
  					],
  					[
  						15.0247,
  						52.4293
  					],
  					[
  						15.0354,
  						52.413
  					],
  					[
  						15.0245,
  						52.3911
  					],
  					[
  						14.9835,
  						52.3913
  					],
  					[
  						14.9817,
  						52.4032
  					],
  					[
  						14.9465,
  						52.4096
  					],
  					[
  						14.9261,
  						52.3969
  					],
  					[
  						14.9204,
  						52.3674
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 77,
  			name: "powiat nowotomyski",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.4607,
  						52.3766
  					],
  					[
  						16.468,
  						52.3513
  					],
  					[
  						16.5104,
  						52.3386
  					],
  					[
  						16.4995,
  						52.315
  					],
  					[
  						16.5005,
  						52.2783
  					],
  					[
  						16.5127,
  						52.2699
  					],
  					[
  						16.4799,
  						52.2504
  					],
  					[
  						16.4572,
  						52.2684
  					],
  					[
  						16.4201,
  						52.2488
  					],
  					[
  						16.3906,
  						52.2673
  					],
  					[
  						16.3698,
  						52.2662
  					],
  					[
  						16.2995,
  						52.2872
  					],
  					[
  						16.2262,
  						52.2717
  					],
  					[
  						16.1734,
  						52.2681
  					],
  					[
  						16.1797,
  						52.2532
  					],
  					[
  						16.1637,
  						52.2265
  					],
  					[
  						16.0725,
  						52.2437
  					],
  					[
  						16.0426,
  						52.2306
  					],
  					[
  						15.9963,
  						52.232
  					],
  					[
  						15.987,
  						52.2127
  					],
  					[
  						15.9497,
  						52.215
  					],
  					[
  						15.9382,
  						52.1967
  					],
  					[
  						15.908,
  						52.1999
  					],
  					[
  						15.8883,
  						52.186
  					],
  					[
  						15.861,
  						52.1828
  					],
  					[
  						15.8495,
  						52.2133
  					],
  					[
  						15.8608,
  						52.2276
  					],
  					[
  						15.8524,
  						52.2621
  					],
  					[
  						15.8808,
  						52.2904
  					],
  					[
  						15.8919,
  						52.3103
  					],
  					[
  						15.8824,
  						52.3273
  					],
  					[
  						15.8893,
  						52.3608
  					],
  					[
  						15.8962,
  						52.3942
  					],
  					[
  						15.8434,
  						52.403
  					],
  					[
  						15.8041,
  						52.4434
  					],
  					[
  						15.846,
  						52.4314
  					],
  					[
  						15.8956,
  						52.4466
  					],
  					[
  						15.8916,
  						52.4732
  					],
  					[
  						15.9346,
  						52.4835
  					],
  					[
  						15.9658,
  						52.4483
  					],
  					[
  						16.0176,
  						52.4583
  					],
  					[
  						16.0255,
  						52.4887
  					],
  					[
  						16.0649,
  						52.4905
  					],
  					[
  						16.0757,
  						52.5082
  					],
  					[
  						16.0995,
  						52.5142
  					],
  					[
  						16.1388,
  						52.5064
  					],
  					[
  						16.1481,
  						52.4844
  					],
  					[
  						16.1942,
  						52.4889
  					],
  					[
  						16.2312,
  						52.4891
  					],
  					[
  						16.2533,
  						52.4733
  					],
  					[
  						16.29,
  						52.4716
  					],
  					[
  						16.3611,
  						52.4254
  					],
  					[
  						16.4095,
  						52.4047
  					],
  					[
  						16.4423,
  						52.4052
  					],
  					[
  						16.4414,
  						52.3876
  					],
  					[
  						16.4607,
  						52.3766
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 78,
  			name: "powiat wągrowiecki",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.007,
  						52.8284
  					],
  					[
  						17.0509,
  						52.8333
  					],
  					[
  						17.0787,
  						52.8906
  					],
  					[
  						17.1446,
  						52.9068
  					],
  					[
  						17.1743,
  						52.9409
  					],
  					[
  						17.1783,
  						52.9574
  					],
  					[
  						17.2017,
  						52.9666
  					],
  					[
  						17.1883,
  						52.9893
  					],
  					[
  						17.1882,
  						53.015
  					],
  					[
  						17.2174,
  						53.0226
  					],
  					[
  						17.2534,
  						53.0189
  					],
  					[
  						17.2985,
  						53.0494
  					],
  					[
  						17.289,
  						53.084
  					],
  					[
  						17.3239,
  						53.0783
  					],
  					[
  						17.3367,
  						53.0427
  					],
  					[
  						17.3016,
  						52.9948
  					],
  					[
  						17.3169,
  						52.974
  					],
  					[
  						17.3686,
  						52.9733
  					],
  					[
  						17.3946,
  						52.9824
  					],
  					[
  						17.4573,
  						52.9509
  					],
  					[
  						17.4913,
  						52.9458
  					],
  					[
  						17.5186,
  						52.928
  					],
  					[
  						17.5125,
  						52.9088
  					],
  					[
  						17.5271,
  						52.8582
  					],
  					[
  						17.5133,
  						52.8549
  					],
  					[
  						17.521,
  						52.8215
  					],
  					[
  						17.4974,
  						52.7855
  					],
  					[
  						17.4159,
  						52.7838
  					],
  					[
  						17.4078,
  						52.7618
  					],
  					[
  						17.4585,
  						52.7389
  					],
  					[
  						17.4357,
  						52.7246
  					],
  					[
  						17.4363,
  						52.6892
  					],
  					[
  						17.3681,
  						52.6828
  					],
  					[
  						17.3355,
  						52.6739
  					],
  					[
  						17.3332,
  						52.6497
  					],
  					[
  						17.2739,
  						52.6313
  					],
  					[
  						17.2362,
  						52.6095
  					],
  					[
  						17.2278,
  						52.5913
  					],
  					[
  						17.1853,
  						52.5764
  					],
  					[
  						17.1514,
  						52.574
  					],
  					[
  						17.1303,
  						52.5668
  					],
  					[
  						17.1185,
  						52.5915
  					],
  					[
  						17.122,
  						52.6277
  					],
  					[
  						17.1008,
  						52.6234
  					],
  					[
  						17.058,
  						52.6417
  					],
  					[
  						17.0611,
  						52.6613
  					],
  					[
  						17.0329,
  						52.6762
  					],
  					[
  						17.0443,
  						52.6854
  					],
  					[
  						17.0866,
  						52.6818
  					],
  					[
  						17.1058,
  						52.6886
  					],
  					[
  						17.1163,
  						52.7272
  					],
  					[
  						17.1325,
  						52.7323
  					],
  					[
  						17.1145,
  						52.7737
  					],
  					[
  						17.0991,
  						52.7828
  					],
  					[
  						17.0695,
  						52.7748
  					],
  					[
  						17.0064,
  						52.7823
  					],
  					[
  						17.007,
  						52.8284
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 79,
  			name: "powiat bielski",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.2193,
  						52.9023
  					],
  					[
  						23.2651,
  						52.9059
  					],
  					[
  						23.3,
  						52.8926
  					],
  					[
  						23.3302,
  						52.8935
  					],
  					[
  						23.3346,
  						52.8562
  					],
  					[
  						23.3496,
  						52.846
  					],
  					[
  						23.3491,
  						52.8174
  					],
  					[
  						23.3705,
  						52.8077
  					],
  					[
  						23.3784,
  						52.7263
  					],
  					[
  						23.4017,
  						52.6853
  					],
  					[
  						23.3688,
  						52.6408
  					],
  					[
  						23.3235,
  						52.6499
  					],
  					[
  						23.2862,
  						52.6285
  					],
  					[
  						23.2762,
  						52.597
  					],
  					[
  						23.2326,
  						52.5963
  					],
  					[
  						23.2084,
  						52.5751
  					],
  					[
  						23.1748,
  						52.566
  					],
  					[
  						23.1097,
  						52.5845
  					],
  					[
  						23.0744,
  						52.5767
  					],
  					[
  						23.0133,
  						52.5762
  					],
  					[
  						23.0012,
  						52.582
  					],
  					[
  						22.9364,
  						52.5916
  					],
  					[
  						22.8808,
  						52.6447
  					],
  					[
  						22.844,
  						52.6503
  					],
  					[
  						22.8321,
  						52.6618
  					],
  					[
  						22.7924,
  						52.6504
  					],
  					[
  						22.7864,
  						52.6724
  					],
  					[
  						22.7432,
  						52.6879
  					],
  					[
  						22.7173,
  						52.6746
  					],
  					[
  						22.6762,
  						52.704
  					],
  					[
  						22.661,
  						52.7012
  					],
  					[
  						22.6121,
  						52.7394
  					],
  					[
  						22.6593,
  						52.7519
  					],
  					[
  						22.6965,
  						52.7776
  					],
  					[
  						22.703,
  						52.8028
  					],
  					[
  						22.7291,
  						52.8035
  					],
  					[
  						22.7641,
  						52.8188
  					],
  					[
  						22.7742,
  						52.8571
  					],
  					[
  						22.7919,
  						52.8543
  					],
  					[
  						22.8697,
  						52.8645
  					],
  					[
  						22.8802,
  						52.8834
  					],
  					[
  						22.9073,
  						52.8741
  					],
  					[
  						22.9385,
  						52.8878
  					],
  					[
  						22.9345,
  						52.9216
  					],
  					[
  						22.9528,
  						52.9257
  					],
  					[
  						22.9959,
  						52.9094
  					],
  					[
  						23.0485,
  						52.9029
  					],
  					[
  						23.1791,
  						52.9123
  					],
  					[
  						23.2193,
  						52.9023
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 80,
  			name: "powiat suwalski",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.792,
  						54.3633
  					],
  					[
  						22.8114,
  						54.371
  					],
  					[
  						22.8363,
  						54.4065
  					],
  					[
  						22.9838,
  						54.3896
  					],
  					[
  						23.0102,
  						54.3828
  					],
  					[
  						22.9939,
  						54.3619
  					],
  					[
  						23.0477,
  						54.3492
  					],
  					[
  						23.0421,
  						54.316
  					],
  					[
  						23.0922,
  						54.2985
  					],
  					[
  						23.1404,
  						54.3159
  					],
  					[
  						23.1543,
  						54.297
  					],
  					[
  						23.1287,
  						54.2771
  					],
  					[
  						23.1411,
  						54.2593
  					],
  					[
  						23.1087,
  						54.2454
  					],
  					[
  						23.1534,
  						54.1976
  					],
  					[
  						23.143,
  						54.1707
  					],
  					[
  						23.1143,
  						54.1742
  					],
  					[
  						23.08,
  						54.1358
  					],
  					[
  						23.0833,
  						54.1074
  					],
  					[
  						23.1203,
  						54.0932
  					],
  					[
  						23.1178,
  						54.0689
  					],
  					[
  						23.1344,
  						54.0354
  					],
  					[
  						23.1403,
  						54.0271
  					],
  					[
  						23.1358,
  						54.0181
  					],
  					[
  						23.1278,
  						54.0205
  					],
  					[
  						23.0371,
  						54.0096
  					],
  					[
  						22.9883,
  						54.0163
  					],
  					[
  						22.8718,
  						53.9962
  					],
  					[
  						22.8867,
  						53.9683
  					],
  					[
  						22.8506,
  						53.9661
  					],
  					[
  						22.8571,
  						53.9446
  					],
  					[
  						22.8219,
  						53.9276
  					],
  					[
  						22.7783,
  						53.9229
  					],
  					[
  						22.7512,
  						53.9432
  					],
  					[
  						22.7237,
  						53.9526
  					],
  					[
  						22.694,
  						53.9773
  					],
  					[
  						22.691,
  						54.0004
  					],
  					[
  						22.6707,
  						54.0289
  					],
  					[
  						22.6286,
  						54.0475
  					],
  					[
  						22.6008,
  						54.0519
  					],
  					[
  						22.6038,
  						54.0819
  					],
  					[
  						22.6355,
  						54.093
  					],
  					[
  						22.6019,
  						54.1365
  					],
  					[
  						22.5471,
  						54.1377
  					],
  					[
  						22.5369,
  						54.1604
  					],
  					[
  						22.5191,
  						54.1677
  					],
  					[
  						22.4815,
  						54.2024
  					],
  					[
  						22.5278,
  						54.2294
  					],
  					[
  						22.5319,
  						54.2489
  					],
  					[
  						22.5796,
  						54.2652
  					],
  					[
  						22.6107,
  						54.2599
  					],
  					[
  						22.6447,
  						54.2878
  					],
  					[
  						22.6929,
  						54.2754
  					],
  					[
  						22.784,
  						54.3058
  					],
  					[
  						22.8061,
  						54.3495
  					],
  					[
  						22.792,
  						54.3633
  					]
  				],
  				[
  					[
  						22.9771,
  						54.1005
  					],
  					[
  						22.9813,
  						54.1058
  					],
  					[
  						22.9731,
  						54.154
  					],
  					[
  						22.9318,
  						54.1573
  					],
  					[
  						22.9309,
  						54.1394
  					],
  					[
  						22.8917,
  						54.1339
  					],
  					[
  						22.8722,
  						54.1154
  					],
  					[
  						22.9011,
  						54.0603
  					],
  					[
  						22.9373,
  						54.0514
  					],
  					[
  						22.9933,
  						54.0688
  					],
  					[
  						22.9771,
  						54.1005
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 81,
  			name: "powiat słupski",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.4913,
  						54.7601
  					],
  					[
  						17.5166,
  						54.7472
  					],
  					[
  						17.4744,
  						54.7286
  					],
  					[
  						17.4167,
  						54.7126
  					],
  					[
  						17.508,
  						54.6992
  					],
  					[
  						17.5238,
  						54.6771
  					],
  					[
  						17.5096,
  						54.6616
  					],
  					[
  						17.5765,
  						54.6534
  					],
  					[
  						17.6164,
  						54.6372
  					],
  					[
  						17.6058,
  						54.6152
  					],
  					[
  						17.5816,
  						54.6061
  					],
  					[
  						17.5805,
  						54.5901
  					],
  					[
  						17.5486,
  						54.5499
  					],
  					[
  						17.6018,
  						54.5345
  					],
  					[
  						17.5674,
  						54.5117
  					],
  					[
  						17.539,
  						54.5032
  					],
  					[
  						17.5552,
  						54.492
  					],
  					[
  						17.6183,
  						54.468
  					],
  					[
  						17.6004,
  						54.4425
  					],
  					[
  						17.582,
  						54.4261
  					],
  					[
  						17.5405,
  						54.4332
  					],
  					[
  						17.509,
  						54.4281
  					],
  					[
  						17.4854,
  						54.41
  					],
  					[
  						17.4832,
  						54.3756
  					],
  					[
  						17.4519,
  						54.3717
  					],
  					[
  						17.4604,
  						54.3371
  					],
  					[
  						17.437,
  						54.3216
  					],
  					[
  						17.4234,
  						54.299
  					],
  					[
  						17.4258,
  						54.2698
  					],
  					[
  						17.3606,
  						54.2433
  					],
  					[
  						17.3424,
  						54.2796
  					],
  					[
  						17.3446,
  						54.3134
  					],
  					[
  						17.283,
  						54.2969
  					],
  					[
  						17.2399,
  						54.3141
  					],
  					[
  						17.1504,
  						54.2829
  					],
  					[
  						17.1139,
  						54.2888
  					],
  					[
  						17.0849,
  						54.3108
  					],
  					[
  						17.0428,
  						54.3077
  					],
  					[
  						17.0226,
  						54.2691
  					],
  					[
  						17.0226,
  						54.2689
  					],
  					[
  						17.0181,
  						54.2662
  					],
  					[
  						17.0172,
  						54.2655
  					],
  					[
  						17.0172,
  						54.2654
  					],
  					[
  						17.0172,
  						54.2653
  					],
  					[
  						17.0172,
  						54.2654
  					],
  					[
  						17.0172,
  						54.2653
  					],
  					[
  						17.0163,
  						54.265
  					],
  					[
  						17.0192,
  						54.2617
  					],
  					[
  						17.0128,
  						54.2251
  					],
  					[
  						17.0303,
  						54.2111
  					],
  					[
  						17.0083,
  						54.1885
  					],
  					[
  						16.9704,
  						54.1865
  					],
  					[
  						16.9732,
  						54.1558
  					],
  					[
  						16.9213,
  						54.1533
  					],
  					[
  						16.8756,
  						54.1146
  					],
  					[
  						16.7933,
  						54.0845
  					],
  					[
  						16.8046,
  						54.1161
  					],
  					[
  						16.779,
  						54.1192
  					],
  					[
  						16.7736,
  						54.1535
  					],
  					[
  						16.7341,
  						54.1767
  					],
  					[
  						16.7327,
  						54.2037
  					],
  					[
  						16.713,
  						54.2126
  					],
  					[
  						16.7317,
  						54.2319
  					],
  					[
  						16.8313,
  						54.2458
  					],
  					[
  						16.8651,
  						54.261
  					],
  					[
  						16.8543,
  						54.3076
  					],
  					[
  						16.8139,
  						54.3186
  					],
  					[
  						16.8231,
  						54.3379
  					],
  					[
  						16.8229,
  						54.3379
  					],
  					[
  						16.8231,
  						54.3379
  					],
  					[
  						16.8215,
  						54.3683
  					],
  					[
  						16.8586,
  						54.3826
  					],
  					[
  						16.8244,
  						54.4157
  					],
  					[
  						16.8411,
  						54.4384
  					],
  					[
  						16.8275,
  						54.4648
  					],
  					[
  						16.7933,
  						54.4874
  					],
  					[
  						16.7566,
  						54.4946
  					],
  					[
  						16.7392,
  						54.5177
  					],
  					[
  						16.7481,
  						54.5276
  					],
  					[
  						16.6991,
  						54.5692
  					],
  					[
  						16.748,
  						54.5683
  					],
  					[
  						16.8536,
  						54.5889
  					],
  					[
  						16.89,
  						54.5917
  					],
  					[
  						16.9521,
  						54.6126
  					],
  					[
  						17.0508,
  						54.6697
  					],
  					[
  						17.1518,
  						54.6985
  					],
  					[
  						17.2419,
  						54.7296
  					],
  					[
  						17.3545,
  						54.7497
  					],
  					[
  						17.4913,
  						54.7601
  					]
  				],
  				[
  					[
  						17.031,
  						54.4246
  					],
  					[
  						17.0429,
  						54.4399
  					],
  					[
  						17.105,
  						54.4541
  					],
  					[
  						17.0808,
  						54.4706
  					],
  					[
  						17.0814,
  						54.4865
  					],
  					[
  						17.0436,
  						54.4957
  					],
  					[
  						17.0061,
  						54.496
  					],
  					[
  						16.9782,
  						54.4851
  					],
  					[
  						16.9517,
  						54.4585
  					],
  					[
  						17.0243,
  						54.4457
  					],
  					[
  						17.031,
  						54.4246
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 82,
  			name: "powiat ostrowiecki",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.1329,
  						50.8222
  					],
  					[
  						21.1415,
  						50.8457
  					],
  					[
  						21.1378,
  						50.8888
  					],
  					[
  						21.1611,
  						50.8919
  					],
  					[
  						21.1581,
  						50.9079
  					],
  					[
  						21.1644,
  						50.9153
  					],
  					[
  						21.1671,
  						50.9166
  					],
  					[
  						21.1638,
  						50.9366
  					],
  					[
  						21.2007,
  						50.9466
  					],
  					[
  						21.1992,
  						50.9877
  					],
  					[
  						21.2212,
  						51.0021
  					],
  					[
  						21.2496,
  						50.9903
  					],
  					[
  						21.2854,
  						50.9876
  					],
  					[
  						21.2914,
  						51.0072
  					],
  					[
  						21.3255,
  						51.0361
  					],
  					[
  						21.3825,
  						51.0405
  					],
  					[
  						21.4313,
  						51.0295
  					],
  					[
  						21.4636,
  						51.0131
  					],
  					[
  						21.513,
  						51.0561
  					],
  					[
  						21.5901,
  						51.0578
  					],
  					[
  						21.6302,
  						51.0634
  					],
  					[
  						21.6629,
  						51.0239
  					],
  					[
  						21.6872,
  						51.0196
  					],
  					[
  						21.6573,
  						50.9854
  					],
  					[
  						21.6305,
  						50.9878
  					],
  					[
  						21.5905,
  						50.9532
  					],
  					[
  						21.6156,
  						50.9252
  					],
  					[
  						21.5845,
  						50.9066
  					],
  					[
  						21.5697,
  						50.872
  					],
  					[
  						21.5704,
  						50.853
  					],
  					[
  						21.5464,
  						50.8512
  					],
  					[
  						21.4969,
  						50.8267
  					],
  					[
  						21.4568,
  						50.8486
  					],
  					[
  						21.4598,
  						50.8755
  					],
  					[
  						21.4035,
  						50.8862
  					],
  					[
  						21.3685,
  						50.8827
  					],
  					[
  						21.3606,
  						50.8709
  					],
  					[
  						21.321,
  						50.8638
  					],
  					[
  						21.2573,
  						50.8443
  					],
  					[
  						21.2327,
  						50.8193
  					],
  					[
  						21.1883,
  						50.8263
  					],
  					[
  						21.1329,
  						50.8222
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 83,
  			name: "powiat skarżyski",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.9837,
  						51.1665
  					],
  					[
  						20.9489,
  						51.1433
  					],
  					[
  						20.9759,
  						51.1322
  					],
  					[
  						20.9588,
  						51.0849
  					],
  					[
  						20.9028,
  						51.0826
  					],
  					[
  						20.9132,
  						51.0318
  					],
  					[
  						20.9018,
  						51.025
  					],
  					[
  						20.9016,
  						51.0247
  					],
  					[
  						20.8792,
  						51.0221
  					],
  					[
  						20.8568,
  						50.9994
  					],
  					[
  						20.8388,
  						50.9961
  					],
  					[
  						20.8283,
  						50.9629
  					],
  					[
  						20.8549,
  						50.9567
  					],
  					[
  						20.8331,
  						50.9346
  					],
  					[
  						20.7944,
  						50.9501
  					],
  					[
  						20.7641,
  						50.9498
  					],
  					[
  						20.761,
  						50.9756
  					],
  					[
  						20.7375,
  						50.9776
  					],
  					[
  						20.7396,
  						51.0092
  					],
  					[
  						20.7103,
  						51.0266
  					],
  					[
  						20.6864,
  						51.0109
  					],
  					[
  						20.6406,
  						51.0284
  					],
  					[
  						20.6721,
  						51.0495
  					],
  					[
  						20.65,
  						51.0626
  					],
  					[
  						20.6047,
  						51.0514
  					],
  					[
  						20.6049,
  						51.0785
  					],
  					[
  						20.6283,
  						51.0988
  					],
  					[
  						20.6546,
  						51.1009
  					],
  					[
  						20.6749,
  						51.1209
  					],
  					[
  						20.6855,
  						51.1512
  					],
  					[
  						20.7184,
  						51.1727
  					],
  					[
  						20.813,
  						51.1458
  					],
  					[
  						20.8216,
  						51.1784
  					],
  					[
  						20.8798,
  						51.1544
  					],
  					[
  						20.9207,
  						51.1953
  					],
  					[
  						20.9837,
  						51.1665
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 84,
  			name: "powiat kartuski",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.4078,
  						54.4762
  					],
  					[
  						18.438,
  						54.4631
  					],
  					[
  						18.451,
  						54.4433
  					],
  					[
  						18.442,
  						54.4082
  					],
  					[
  						18.4599,
  						54.3974
  					],
  					[
  						18.4412,
  						54.3574
  					],
  					[
  						18.4685,
  						54.3467
  					],
  					[
  						18.4569,
  						54.3323
  					],
  					[
  						18.488,
  						54.317
  					],
  					[
  						18.46,
  						54.3076
  					],
  					[
  						18.4333,
  						54.2793
  					],
  					[
  						18.3944,
  						54.2784
  					],
  					[
  						18.3618,
  						54.2623
  					],
  					[
  						18.328,
  						54.2655
  					],
  					[
  						18.3051,
  						54.249
  					],
  					[
  						18.2543,
  						54.2332
  					],
  					[
  						18.2151,
  						54.196
  					],
  					[
  						18.2229,
  						54.1879
  					],
  					[
  						18.2205,
  						54.1889
  					],
  					[
  						18.1649,
  						54.1987
  					],
  					[
  						18.1503,
  						54.1869
  					],
  					[
  						18.1142,
  						54.2017
  					],
  					[
  						18.088,
  						54.1995
  					],
  					[
  						18.0617,
  						54.1812
  					],
  					[
  						17.995,
  						54.1772
  					],
  					[
  						17.988,
  						54.1977
  					],
  					[
  						17.9082,
  						54.1743
  					],
  					[
  						17.8967,
  						54.1859
  					],
  					[
  						17.8625,
  						54.1911
  					],
  					[
  						17.8342,
  						54.1786
  					],
  					[
  						17.8002,
  						54.1782
  					],
  					[
  						17.7196,
  						54.2091
  					],
  					[
  						17.6975,
  						54.2367
  					],
  					[
  						17.7241,
  						54.2625
  					],
  					[
  						17.7079,
  						54.3038
  					],
  					[
  						17.7154,
  						54.3221
  					],
  					[
  						17.7422,
  						54.3292
  					],
  					[
  						17.7443,
  						54.3459
  					],
  					[
  						17.7442,
  						54.3459
  					],
  					[
  						17.7443,
  						54.3459
  					],
  					[
  						17.7442,
  						54.3459
  					],
  					[
  						17.7416,
  						54.3493
  					],
  					[
  						17.7504,
  						54.3544
  					],
  					[
  						17.7625,
  						54.3535
  					],
  					[
  						17.8015,
  						54.386
  					],
  					[
  						17.813,
  						54.4155
  					],
  					[
  						17.8812,
  						54.41
  					],
  					[
  						17.9279,
  						54.4147
  					],
  					[
  						17.9578,
  						54.4315
  					],
  					[
  						17.9917,
  						54.4319
  					],
  					[
  						18.0275,
  						54.4229
  					],
  					[
  						18.0483,
  						54.4335
  					],
  					[
  						18.0958,
  						54.4291
  					],
  					[
  						18.1436,
  						54.4137
  					],
  					[
  						18.181,
  						54.4181
  					],
  					[
  						18.2043,
  						54.4363
  					],
  					[
  						18.2474,
  						54.4399
  					],
  					[
  						18.2985,
  						54.4247
  					],
  					[
  						18.3473,
  						54.4242
  					],
  					[
  						18.3647,
  						54.4393
  					],
  					[
  						18.399,
  						54.4394
  					],
  					[
  						18.4173,
  						54.4562
  					],
  					[
  						18.4078,
  						54.4762
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 85,
  			name: "powiat częstochowski",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.0889,
  						50.8655
  					],
  					[
  						19.0724,
  						50.8851
  					],
  					[
  						19.0644,
  						50.9156
  					],
  					[
  						19.0941,
  						50.9241
  					],
  					[
  						19.0946,
  						50.9255
  					],
  					[
  						19.0766,
  						50.964
  					],
  					[
  						19.1252,
  						50.9743
  					],
  					[
  						19.1236,
  						50.9996
  					],
  					[
  						19.1497,
  						51.0096
  					],
  					[
  						19.165,
  						50.9946
  					],
  					[
  						19.2065,
  						50.9855
  					],
  					[
  						19.2407,
  						50.9904
  					],
  					[
  						19.2562,
  						51.0063
  					],
  					[
  						19.2431,
  						51.0368
  					],
  					[
  						19.2605,
  						51.0311
  					],
  					[
  						19.2918,
  						51.0455
  					],
  					[
  						19.3227,
  						51.0462
  					],
  					[
  						19.3185,
  						51.0282
  					],
  					[
  						19.3746,
  						50.9944
  					],
  					[
  						19.4021,
  						50.994
  					],
  					[
  						19.4322,
  						50.9649
  					],
  					[
  						19.438,
  						50.9439
  					],
  					[
  						19.4698,
  						50.9154
  					],
  					[
  						19.4711,
  						50.8859
  					],
  					[
  						19.5092,
  						50.8811
  					],
  					[
  						19.5251,
  						50.8941
  					],
  					[
  						19.5697,
  						50.9083
  					],
  					[
  						19.5867,
  						50.9053
  					],
  					[
  						19.6139,
  						50.8773
  					],
  					[
  						19.6616,
  						50.8744
  					],
  					[
  						19.6701,
  						50.8487
  					],
  					[
  						19.7279,
  						50.8433
  					],
  					[
  						19.7471,
  						50.866
  					],
  					[
  						19.8194,
  						50.8385
  					],
  					[
  						19.8257,
  						50.825
  					],
  					[
  						19.7954,
  						50.7837
  					],
  					[
  						19.7705,
  						50.7773
  					],
  					[
  						19.7417,
  						50.7547
  					],
  					[
  						19.7044,
  						50.7523
  					],
  					[
  						19.7129,
  						50.7292
  					],
  					[
  						19.7145,
  						50.7153
  					],
  					[
  						19.7513,
  						50.686
  					],
  					[
  						19.7864,
  						50.6684
  					],
  					[
  						19.7516,
  						50.6568
  					],
  					[
  						19.7326,
  						50.637
  					],
  					[
  						19.7035,
  						50.644
  					],
  					[
  						19.7135,
  						50.6758
  					],
  					[
  						19.6913,
  						50.6914
  					],
  					[
  						19.6807,
  						50.6631
  					],
  					[
  						19.6233,
  						50.658
  					],
  					[
  						19.5782,
  						50.6495
  					],
  					[
  						19.5383,
  						50.682
  					],
  					[
  						19.5192,
  						50.6704
  					],
  					[
  						19.474,
  						50.6863
  					],
  					[
  						19.4027,
  						50.6761
  					],
  					[
  						19.325,
  						50.6876
  					],
  					[
  						19.2994,
  						50.6804
  					],
  					[
  						19.2778,
  						50.6949
  					],
  					[
  						19.2452,
  						50.7044
  					],
  					[
  						19.2197,
  						50.6856
  					],
  					[
  						19.178,
  						50.6873
  					],
  					[
  						19.1784,
  						50.6862
  					],
  					[
  						19.1766,
  						50.6803
  					],
  					[
  						19.1628,
  						50.6656
  					],
  					[
  						19.1783,
  						50.6492
  					],
  					[
  						19.0975,
  						50.6352
  					],
  					[
  						19.0612,
  						50.6346
  					],
  					[
  						19.0435,
  						50.66
  					],
  					[
  						18.9847,
  						50.6627
  					],
  					[
  						18.9836,
  						50.68
  					],
  					[
  						18.9402,
  						50.7056
  					],
  					[
  						18.9131,
  						50.7334
  					],
  					[
  						18.9143,
  						50.7645
  					],
  					[
  						18.8667,
  						50.761
  					],
  					[
  						18.8487,
  						50.7661
  					],
  					[
  						18.8647,
  						50.7993
  					],
  					[
  						18.9067,
  						50.8041
  					],
  					[
  						18.8991,
  						50.8179
  					],
  					[
  						18.9552,
  						50.8262
  					],
  					[
  						18.9723,
  						50.812
  					],
  					[
  						18.9987,
  						50.8237
  					],
  					[
  						19.0293,
  						50.8233
  					],
  					[
  						19.0117,
  						50.7886
  					],
  					[
  						19.0337,
  						50.7484
  					],
  					[
  						19.0667,
  						50.7427
  					],
  					[
  						19.1449,
  						50.7582
  					],
  					[
  						19.1939,
  						50.7522
  					],
  					[
  						19.2253,
  						50.7883
  					],
  					[
  						19.2185,
  						50.8012
  					],
  					[
  						19.2319,
  						50.8225
  					],
  					[
  						19.1931,
  						50.8335
  					],
  					[
  						19.1821,
  						50.877
  					],
  					[
  						19.15,
  						50.879
  					],
  					[
  						19.1295,
  						50.8546
  					],
  					[
  						19.0889,
  						50.8655
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 86,
  			name: "powiat pyrzycki",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						14.8618,
  						53.2465
  					],
  					[
  						15.004,
  						53.2636
  					],
  					[
  						15.0411,
  						53.26
  					],
  					[
  						15.0688,
  						53.2328
  					],
  					[
  						15.0617,
  						53.188
  					],
  					[
  						15.1054,
  						53.1737
  					],
  					[
  						15.1741,
  						53.1778
  					],
  					[
  						15.1587,
  						53.1551
  					],
  					[
  						15.2122,
  						53.1376
  					],
  					[
  						15.198,
  						53.1084
  					],
  					[
  						15.1986,
  						53.0851
  					],
  					[
  						15.1588,
  						53.061
  					],
  					[
  						15.1398,
  						53.0284
  					],
  					[
  						15.0821,
  						53.04
  					],
  					[
  						15.06,
  						53.0596
  					],
  					[
  						15.0203,
  						53.0454
  					],
  					[
  						15.0392,
  						53.0338
  					],
  					[
  						15.0496,
  						53.0025
  					],
  					[
  						15.0334,
  						52.9894
  					],
  					[
  						14.9911,
  						52.9948
  					],
  					[
  						14.9763,
  						52.9703
  					],
  					[
  						14.9537,
  						52.982
  					],
  					[
  						14.897,
  						52.9913
  					],
  					[
  						14.8948,
  						53.0208
  					],
  					[
  						14.9172,
  						53.0245
  					],
  					[
  						14.9162,
  						53.043
  					],
  					[
  						14.8721,
  						53.0506
  					],
  					[
  						14.8491,
  						53.0626
  					],
  					[
  						14.787,
  						53.0234
  					],
  					[
  						14.7326,
  						53.037
  					],
  					[
  						14.7561,
  						53.0653
  					],
  					[
  						14.7405,
  						53.0764
  					],
  					[
  						14.7471,
  						53.1148
  					],
  					[
  						14.7247,
  						53.1369
  					],
  					[
  						14.73,
  						53.1587
  					],
  					[
  						14.6897,
  						53.1553
  					],
  					[
  						14.6895,
  						53.1779
  					],
  					[
  						14.7022,
  						53.2457
  					],
  					[
  						14.7159,
  						53.2735
  					],
  					[
  						14.7482,
  						53.2667
  					],
  					[
  						14.7874,
  						53.244
  					],
  					[
  						14.8144,
  						53.2375
  					],
  					[
  						14.8618,
  						53.2465
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 87,
  			name: "powiat Siemianowice Śląskie",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.0013,
  						50.2963
  					],
  					[
  						18.9872,
  						50.3095
  					],
  					[
  						18.9854,
  						50.3359
  					],
  					[
  						19.0105,
  						50.3307
  					],
  					[
  						19.0415,
  						50.3488
  					],
  					[
  						19.0543,
  						50.3387
  					],
  					[
  						19.0457,
  						50.3008
  					],
  					[
  						19.0611,
  						50.2954
  					],
  					[
  						19.051,
  						50.2754
  					],
  					[
  						19.0013,
  						50.2963
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 88,
  			name: "powiat Elbląg",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.3822,
  						54.1753
  					],
  					[
  						19.3743,
  						54.2067
  					],
  					[
  						19.3875,
  						54.2206
  					],
  					[
  						19.4334,
  						54.2162
  					],
  					[
  						19.4516,
  						54.2297
  					],
  					[
  						19.4458,
  						54.258
  					],
  					[
  						19.446,
  						54.2577
  					],
  					[
  						19.4461,
  						54.2577
  					],
  					[
  						19.446,
  						54.2577
  					],
  					[
  						19.4461,
  						54.2577
  					],
  					[
  						19.5051,
  						54.2487
  					],
  					[
  						19.5089,
  						54.2325
  					],
  					[
  						19.4772,
  						54.222
  					],
  					[
  						19.4769,
  						54.2199
  					],
  					[
  						19.4761,
  						54.2198
  					],
  					[
  						19.4742,
  						54.217
  					],
  					[
  						19.4742,
  						54.2167
  					],
  					[
  						19.4719,
  						54.213
  					],
  					[
  						19.4983,
  						54.2032
  					],
  					[
  						19.5079,
  						54.1722
  					],
  					[
  						19.4624,
  						54.1612
  					],
  					[
  						19.4877,
  						54.1492
  					],
  					[
  						19.4436,
  						54.1366
  					],
  					[
  						19.3782,
  						54.1415
  					],
  					[
  						19.3591,
  						54.1635
  					],
  					[
  						19.3822,
  						54.1753
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 89,
  			name: "powiat gryfiński",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						14.6937,
  						53.3584
  					],
  					[
  						14.7463,
  						53.3292
  					],
  					[
  						14.7758,
  						53.3381
  					],
  					[
  						14.8009,
  						53.3258
  					],
  					[
  						14.8406,
  						53.3202
  					],
  					[
  						14.8752,
  						53.3014
  					],
  					[
  						14.8589,
  						53.2724
  					],
  					[
  						14.8618,
  						53.2465
  					],
  					[
  						14.8144,
  						53.2375
  					],
  					[
  						14.7874,
  						53.244
  					],
  					[
  						14.7482,
  						53.2667
  					],
  					[
  						14.7159,
  						53.2735
  					],
  					[
  						14.7022,
  						53.2457
  					],
  					[
  						14.6895,
  						53.1779
  					],
  					[
  						14.6897,
  						53.1553
  					],
  					[
  						14.73,
  						53.1587
  					],
  					[
  						14.7247,
  						53.1369
  					],
  					[
  						14.7471,
  						53.1148
  					],
  					[
  						14.7405,
  						53.0764
  					],
  					[
  						14.7561,
  						53.0653
  					],
  					[
  						14.7326,
  						53.037
  					],
  					[
  						14.6968,
  						53.0065
  					],
  					[
  						14.7031,
  						52.9722
  					],
  					[
  						14.7222,
  						52.9503
  					],
  					[
  						14.7556,
  						52.9429
  					],
  					[
  						14.6953,
  						52.9241
  					],
  					[
  						14.6857,
  						52.8738
  					],
  					[
  						14.6488,
  						52.8557
  					],
  					[
  						14.6552,
  						52.83
  					],
  					[
  						14.6143,
  						52.8142
  					],
  					[
  						14.6085,
  						52.7845
  					],
  					[
  						14.5844,
  						52.761
  					],
  					[
  						14.5228,
  						52.7252
  					],
  					[
  						14.472,
  						52.7038
  					],
  					[
  						14.4364,
  						52.6799
  					],
  					[
  						14.424,
  						52.6962
  					],
  					[
  						14.3525,
  						52.7507
  					],
  					[
  						14.2804,
  						52.7737
  					],
  					[
  						14.2175,
  						52.8169
  					],
  					[
  						14.1301,
  						52.8283
  					],
  					[
  						14.1237,
  						52.8454
  					],
  					[
  						14.1588,
  						52.8773
  					],
  					[
  						14.1388,
  						52.9518
  					],
  					[
  						14.1437,
  						52.9614
  					],
  					[
  						14.2094,
  						52.9882
  					],
  					[
  						14.2356,
  						52.9932
  					],
  					[
  						14.338,
  						53.0466
  					],
  					[
  						14.3655,
  						53.0786
  					],
  					[
  						14.3873,
  						53.1424
  					],
  					[
  						14.3663,
  						53.172
  					],
  					[
  						14.3773,
  						53.2018
  					],
  					[
  						14.4496,
  						53.2595
  					],
  					[
  						14.4452,
  						53.2744
  					],
  					[
  						14.4713,
  						53.3153
  					],
  					[
  						14.5035,
  						53.3358
  					],
  					[
  						14.539,
  						53.3481
  					],
  					[
  						14.5455,
  						53.3595
  					],
  					[
  						14.5545,
  						53.3545
  					],
  					[
  						14.5323,
  						53.3361
  					],
  					[
  						14.5751,
  						53.3335
  					],
  					[
  						14.6182,
  						53.362
  					],
  					[
  						14.6665,
  						53.3553
  					],
  					[
  						14.6937,
  						53.3584
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 90,
  			name: "powiat Bytom",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.927,
  						50.3181
  					],
  					[
  						18.896,
  						50.3249
  					],
  					[
  						18.896,
  						50.325
  					],
  					[
  						18.8623,
  						50.3281
  					],
  					[
  						18.8515,
  						50.3394
  					],
  					[
  						18.8159,
  						50.3534
  					],
  					[
  						18.8002,
  						50.3739
  					],
  					[
  						18.7886,
  						50.3925
  					],
  					[
  						18.8342,
  						50.4125
  					],
  					[
  						18.8945,
  						50.3973
  					],
  					[
  						18.884,
  						50.3831
  					],
  					[
  						18.9145,
  						50.3722
  					],
  					[
  						18.9349,
  						50.3611
  					],
  					[
  						18.964,
  						50.355
  					],
  					[
  						18.9591,
  						50.3353
  					],
  					[
  						18.9488,
  						50.3235
  					],
  					[
  						18.9487,
  						50.3236
  					],
  					[
  						18.9488,
  						50.3235
  					],
  					[
  						18.9487,
  						50.3236
  					],
  					[
  						18.927,
  						50.3181
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 91,
  			name: "powiat złotoryjski",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.0297,
  						51.1462
  					],
  					[
  						16.0386,
  						51.1287
  					],
  					[
  						16.0473,
  						51.1153
  					],
  					[
  						16.0279,
  						51.1055
  					],
  					[
  						16.0107,
  						51.0794
  					],
  					[
  						15.9698,
  						51.0739
  					],
  					[
  						15.9329,
  						51.0612
  					],
  					[
  						15.9426,
  						51.0351
  					],
  					[
  						15.9767,
  						51.0211
  					],
  					[
  						15.9848,
  						50.9966
  					],
  					[
  						16.0014,
  						50.9909
  					],
  					[
  						15.976,
  						50.9483
  					],
  					[
  						15.9329,
  						50.9236
  					],
  					[
  						15.9069,
  						50.9271
  					],
  					[
  						15.8803,
  						50.9451
  					],
  					[
  						15.8324,
  						50.9398
  					],
  					[
  						15.8151,
  						50.9663
  					],
  					[
  						15.8224,
  						50.9803
  					],
  					[
  						15.7377,
  						51.0114
  					],
  					[
  						15.7605,
  						51.0251
  					],
  					[
  						15.7629,
  						51.054
  					],
  					[
  						15.7315,
  						51.0949
  					],
  					[
  						15.7194,
  						51.1082
  					],
  					[
  						15.7272,
  						51.1396
  					],
  					[
  						15.6978,
  						51.1593
  					],
  					[
  						15.7396,
  						51.1712
  					],
  					[
  						15.7575,
  						51.1906
  					],
  					[
  						15.753,
  						51.2186
  					],
  					[
  						15.8049,
  						51.2473
  					],
  					[
  						15.8079,
  						51.2621
  					],
  					[
  						15.8721,
  						51.2475
  					],
  					[
  						15.9047,
  						51.2462
  					],
  					[
  						15.9281,
  						51.2319
  					],
  					[
  						15.9527,
  						51.2048
  					],
  					[
  						15.983,
  						51.2201
  					],
  					[
  						16.0376,
  						51.2271
  					],
  					[
  						16.062,
  						51.197
  					],
  					[
  						16.0318,
  						51.1768
  					],
  					[
  						16.0297,
  						51.1462
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 92,
  			name: "powiat wrocławski",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.1003,
  						51.1759
  					],
  					[
  						17.0875,
  						51.2143
  					],
  					[
  						17.0728,
  						51.2329
  					],
  					[
  						17.0923,
  						51.2491
  					],
  					[
  						17.1322,
  						51.2541
  					],
  					[
  						17.1576,
  						51.2396
  					],
  					[
  						17.1992,
  						51.2687
  					],
  					[
  						17.2421,
  						51.267
  					],
  					[
  						17.2611,
  						51.2524
  					],
  					[
  						17.251,
  						51.2395
  					],
  					[
  						17.2757,
  						51.2236
  					],
  					[
  						17.3106,
  						51.2148
  					],
  					[
  						17.2902,
  						51.1739
  					],
  					[
  						17.3449,
  						51.1686
  					],
  					[
  						17.3062,
  						51.1485
  					],
  					[
  						17.33,
  						51.1403
  					],
  					[
  						17.3288,
  						51.1178
  					],
  					[
  						17.376,
  						51.1037
  					],
  					[
  						17.3389,
  						51.0915
  					],
  					[
  						17.3212,
  						51.064
  					],
  					[
  						17.2961,
  						51.0663
  					],
  					[
  						17.2735,
  						51.0482
  					],
  					[
  						17.2514,
  						51.0171
  					],
  					[
  						17.2163,
  						51.0053
  					],
  					[
  						17.1974,
  						51.0094
  					],
  					[
  						17.1677,
  						50.9889
  					],
  					[
  						17.1601,
  						50.9675
  					],
  					[
  						17.1151,
  						50.9615
  					],
  					[
  						17.1041,
  						50.9498
  					],
  					[
  						17.1126,
  						50.9217
  					],
  					[
  						17.0801,
  						50.9258
  					],
  					[
  						17.0692,
  						50.9031
  					],
  					[
  						17.0173,
  						50.9171
  					],
  					[
  						16.9591,
  						50.9045
  					],
  					[
  						16.9407,
  						50.8646
  					],
  					[
  						16.9015,
  						50.8704
  					],
  					[
  						16.9212,
  						50.8454
  					],
  					[
  						16.9139,
  						50.8257
  					],
  					[
  						16.8884,
  						50.8122
  					],
  					[
  						16.8763,
  						50.8322
  					],
  					[
  						16.8329,
  						50.8339
  					],
  					[
  						16.824,
  						50.82
  					],
  					[
  						16.775,
  						50.8445
  					],
  					[
  						16.7277,
  						50.8376
  					],
  					[
  						16.6971,
  						50.8431
  					],
  					[
  						16.6764,
  						50.8535
  					],
  					[
  						16.6716,
  						50.8768
  					],
  					[
  						16.6957,
  						50.8886
  					],
  					[
  						16.6891,
  						50.9341
  					],
  					[
  						16.618,
  						50.9282
  					],
  					[
  						16.5758,
  						50.9199
  					],
  					[
  						16.5905,
  						50.9609
  					],
  					[
  						16.5817,
  						50.9756
  					],
  					[
  						16.63,
  						50.9815
  					],
  					[
  						16.6027,
  						51.0018
  					],
  					[
  						16.6213,
  						51.0129
  					],
  					[
  						16.7102,
  						51.0329
  					],
  					[
  						16.721,
  						51.0614
  					],
  					[
  						16.7579,
  						51.0545
  					],
  					[
  						16.768,
  						51.0756
  					],
  					[
  						16.7536,
  						51.0842
  					],
  					[
  						16.7832,
  						51.1014
  					],
  					[
  						16.811,
  						51.0934
  					],
  					[
  						16.8307,
  						51.1118
  					],
  					[
  						16.8768,
  						51.0945
  					],
  					[
  						16.9229,
  						51.0978
  					],
  					[
  						16.9581,
  						51.0674
  					],
  					[
  						16.9551,
  						51.0587
  					],
  					[
  						17.0279,
  						51.0427
  					],
  					[
  						17.0958,
  						51.0594
  					],
  					[
  						17.1114,
  						51.0792
  					],
  					[
  						17.151,
  						51.0822
  					],
  					[
  						17.1761,
  						51.1062
  					],
  					[
  						17.1369,
  						51.1278
  					],
  					[
  						17.1504,
  						51.1444
  					],
  					[
  						17.1573,
  						51.1785
  					],
  					[
  						17.1003,
  						51.1759
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 93,
  			name: "powiat milicki",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.5192,
  						51.604
  					],
  					[
  						17.5219,
  						51.59
  					],
  					[
  						17.5562,
  						51.5843
  					],
  					[
  						17.5749,
  						51.5493
  					],
  					[
  						17.5727,
  						51.5299
  					],
  					[
  						17.5543,
  						51.5175
  					],
  					[
  						17.5216,
  						51.5146
  					],
  					[
  						17.514,
  						51.5015
  					],
  					[
  						17.527,
  						51.4572
  					],
  					[
  						17.4808,
  						51.4482
  					],
  					[
  						17.4256,
  						51.431
  					],
  					[
  						17.4292,
  						51.4139
  					],
  					[
  						17.3972,
  						51.4044
  					],
  					[
  						17.3955,
  						51.3886
  					],
  					[
  						17.3705,
  						51.3681
  					],
  					[
  						17.3401,
  						51.3729
  					],
  					[
  						17.2626,
  						51.3983
  					],
  					[
  						17.2356,
  						51.3918
  					],
  					[
  						17.2019,
  						51.414
  					],
  					[
  						17.171,
  						51.4156
  					],
  					[
  						17.1341,
  						51.4302
  					],
  					[
  						17.1124,
  						51.4481
  					],
  					[
  						17.1,
  						51.4959
  					],
  					[
  						17.057,
  						51.5303
  					],
  					[
  						17.0029,
  						51.53
  					],
  					[
  						16.9906,
  						51.55
  					],
  					[
  						17.0461,
  						51.556
  					],
  					[
  						17.1085,
  						51.576
  					],
  					[
  						17.1255,
  						51.5653
  					],
  					[
  						17.2147,
  						51.5738
  					],
  					[
  						17.2083,
  						51.6112
  					],
  					[
  						17.2156,
  						51.6296
  					],
  					[
  						17.2574,
  						51.6428
  					],
  					[
  						17.3301,
  						51.6479
  					],
  					[
  						17.3862,
  						51.6351
  					],
  					[
  						17.4713,
  						51.6261
  					],
  					[
  						17.5192,
  						51.604
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 94,
  			name: "powiat lubiński",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.1996,
  						51.4852
  					],
  					[
  						16.1974,
  						51.4853
  					],
  					[
  						16.1971,
  						51.4849
  					],
  					[
  						16.1795,
  						51.4995
  					],
  					[
  						16.2102,
  						51.5246
  					],
  					[
  						16.2435,
  						51.5221
  					],
  					[
  						16.2684,
  						51.566
  					],
  					[
  						16.3193,
  						51.5735
  					],
  					[
  						16.3277,
  						51.5984
  					],
  					[
  						16.3554,
  						51.6092
  					],
  					[
  						16.3916,
  						51.6106
  					],
  					[
  						16.3892,
  						51.5877
  					],
  					[
  						16.4322,
  						51.5757
  					],
  					[
  						16.4633,
  						51.5595
  					],
  					[
  						16.4516,
  						51.542
  					],
  					[
  						16.4594,
  						51.5253
  					],
  					[
  						16.4822,
  						51.5161
  					],
  					[
  						16.4673,
  						51.5015
  					],
  					[
  						16.4546,
  						51.4936
  					],
  					[
  						16.4384,
  						51.4275
  					],
  					[
  						16.4766,
  						51.3692
  					],
  					[
  						16.4534,
  						51.3399
  					],
  					[
  						16.4608,
  						51.3257
  					],
  					[
  						16.4157,
  						51.2937
  					],
  					[
  						16.3878,
  						51.3186
  					],
  					[
  						16.341,
  						51.3324
  					],
  					[
  						16.3084,
  						51.2913
  					],
  					[
  						16.2869,
  						51.2964
  					],
  					[
  						16.2603,
  						51.2837
  					],
  					[
  						16.2122,
  						51.2954
  					],
  					[
  						16.1903,
  						51.279
  					],
  					[
  						16.1573,
  						51.2931
  					],
  					[
  						16.0932,
  						51.2872
  					],
  					[
  						16.0888,
  						51.2985
  					],
  					[
  						16.0167,
  						51.307
  					],
  					[
  						16.0138,
  						51.3275
  					],
  					[
  						16.0799,
  						51.3377
  					],
  					[
  						16.0713,
  						51.3551
  					],
  					[
  						16.1086,
  						51.4005
  					],
  					[
  						16.0714,
  						51.4378
  					],
  					[
  						16.0887,
  						51.4645
  					],
  					[
  						16.1859,
  						51.4572
  					],
  					[
  						16.1996,
  						51.4852
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 95,
  			name: "powiat lipnowski",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.9778,
  						52.8495
  					],
  					[
  						19.0186,
  						52.8462
  					],
  					[
  						19.0415,
  						52.8541
  					],
  					[
  						19.0627,
  						52.8834
  					],
  					[
  						19.0505,
  						52.9157
  					],
  					[
  						19.0174,
  						52.9333
  					],
  					[
  						19.0096,
  						52.9646
  					],
  					[
  						19.056,
  						52.9709
  					],
  					[
  						19.0942,
  						52.969
  					],
  					[
  						19.1487,
  						52.9621
  					],
  					[
  						19.1562,
  						52.9768
  					],
  					[
  						19.1836,
  						52.9891
  					],
  					[
  						19.239,
  						53.0015
  					],
  					[
  						19.2594,
  						52.9853
  					],
  					[
  						19.2962,
  						52.9704
  					],
  					[
  						19.3078,
  						52.9447
  					],
  					[
  						19.3999,
  						52.9293
  					],
  					[
  						19.4447,
  						52.939
  					],
  					[
  						19.4654,
  						52.9165
  					],
  					[
  						19.4586,
  						52.9067
  					],
  					[
  						19.5087,
  						52.8679
  					],
  					[
  						19.475,
  						52.8654
  					],
  					[
  						19.473,
  						52.8515
  					],
  					[
  						19.423,
  						52.8327
  					],
  					[
  						19.4712,
  						52.7854
  					],
  					[
  						19.4946,
  						52.7784
  					],
  					[
  						19.5026,
  						52.715
  					],
  					[
  						19.5258,
  						52.7037
  					],
  					[
  						19.4931,
  						52.7146
  					],
  					[
  						19.4413,
  						52.723
  					],
  					[
  						19.4467,
  						52.7056
  					],
  					[
  						19.4303,
  						52.6716
  					],
  					[
  						19.403,
  						52.6445
  					],
  					[
  						19.3804,
  						52.641
  					],
  					[
  						19.3679,
  						52.6283
  					],
  					[
  						19.3381,
  						52.6273
  					],
  					[
  						19.2478,
  						52.6393
  					],
  					[
  						19.1763,
  						52.6559
  					],
  					[
  						19.1826,
  						52.6613
  					],
  					[
  						19.1809,
  						52.6859
  					],
  					[
  						19.1807,
  						52.686
  					],
  					[
  						19.1809,
  						52.6859
  					],
  					[
  						19.1807,
  						52.686
  					],
  					[
  						19.1779,
  						52.7003
  					],
  					[
  						19.174,
  						52.7226
  					],
  					[
  						19.1325,
  						52.739
  					],
  					[
  						19.0859,
  						52.7477
  					],
  					[
  						19.0275,
  						52.7173
  					],
  					[
  						19.0009,
  						52.7141
  					],
  					[
  						18.9826,
  						52.736
  					],
  					[
  						18.9571,
  						52.7524
  					],
  					[
  						18.9385,
  						52.7826
  					],
  					[
  						18.9092,
  						52.8226
  					],
  					[
  						18.9073,
  						52.8358
  					],
  					[
  						18.9281,
  						52.8357
  					],
  					[
  						18.9533,
  						52.8519
  					],
  					[
  						18.9778,
  						52.8495
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 96,
  			name: "powiat żniński",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.7867,
  						52.6515
  					],
  					[
  						17.739,
  						52.6509
  					],
  					[
  						17.7491,
  						52.6325
  					],
  					[
  						17.7092,
  						52.612
  					],
  					[
  						17.6824,
  						52.6238
  					],
  					[
  						17.6776,
  						52.6486
  					],
  					[
  						17.6465,
  						52.6448
  					],
  					[
  						17.6314,
  						52.6791
  					],
  					[
  						17.6404,
  						52.6924
  					],
  					[
  						17.6146,
  						52.703
  					],
  					[
  						17.544,
  						52.6896
  					],
  					[
  						17.5168,
  						52.6742
  					],
  					[
  						17.5008,
  						52.6846
  					],
  					[
  						17.4672,
  						52.6804
  					],
  					[
  						17.488,
  						52.7293
  					],
  					[
  						17.4585,
  						52.7389
  					],
  					[
  						17.4078,
  						52.7618
  					],
  					[
  						17.4159,
  						52.7838
  					],
  					[
  						17.4974,
  						52.7855
  					],
  					[
  						17.521,
  						52.8215
  					],
  					[
  						17.5133,
  						52.8549
  					],
  					[
  						17.5271,
  						52.8582
  					],
  					[
  						17.5125,
  						52.9088
  					],
  					[
  						17.5622,
  						52.8949
  					],
  					[
  						17.614,
  						52.9167
  					],
  					[
  						17.7086,
  						52.9254
  					],
  					[
  						17.7256,
  						52.9165
  					],
  					[
  						17.7646,
  						52.9244
  					],
  					[
  						17.8086,
  						52.9412
  					],
  					[
  						17.8527,
  						52.9783
  					],
  					[
  						17.8529,
  						53.0271
  					],
  					[
  						17.8784,
  						53.043
  					],
  					[
  						17.8942,
  						53.033
  					],
  					[
  						17.9391,
  						53.0386
  					],
  					[
  						17.9633,
  						53.0316
  					],
  					[
  						18.0088,
  						52.9628
  					],
  					[
  						18.0157,
  						52.9448
  					],
  					[
  						17.9681,
  						52.9244
  					],
  					[
  						17.9967,
  						52.9061
  					],
  					[
  						18.0328,
  						52.9077
  					],
  					[
  						18.0591,
  						52.875
  					],
  					[
  						18.0495,
  						52.8576
  					],
  					[
  						18.0526,
  						52.8064
  					],
  					[
  						18.0269,
  						52.8083
  					],
  					[
  						17.9964,
  						52.797
  					],
  					[
  						17.9842,
  						52.817
  					],
  					[
  						17.9372,
  						52.8417
  					],
  					[
  						17.8862,
  						52.8214
  					],
  					[
  						17.9169,
  						52.7478
  					],
  					[
  						17.8702,
  						52.7387
  					],
  					[
  						17.8022,
  						52.6914
  					],
  					[
  						17.8155,
  						52.6762
  					],
  					[
  						17.7867,
  						52.6515
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 97,
  			name: "powiat radziejowski",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.8286,
  						52.6484
  					],
  					[
  						18.8078,
  						52.6211
  					],
  					[
  						18.7467,
  						52.5902
  					],
  					[
  						18.7321,
  						52.5614
  					],
  					[
  						18.7583,
  						52.5419
  					],
  					[
  						18.734,
  						52.4947
  					],
  					[
  						18.7304,
  						52.4571
  					],
  					[
  						18.6848,
  						52.428
  					],
  					[
  						18.6577,
  						52.4236
  					],
  					[
  						18.6501,
  						52.4503
  					],
  					[
  						18.5717,
  						52.465
  					],
  					[
  						18.5597,
  						52.4841
  					],
  					[
  						18.5267,
  						52.4988
  					],
  					[
  						18.5266,
  						52.4988
  					],
  					[
  						18.5267,
  						52.4988
  					],
  					[
  						18.5266,
  						52.4988
  					],
  					[
  						18.4925,
  						52.5032
  					],
  					[
  						18.4622,
  						52.4904
  					],
  					[
  						18.4635,
  						52.4766
  					],
  					[
  						18.384,
  						52.4772
  					],
  					[
  						18.3759,
  						52.5039
  					],
  					[
  						18.3772,
  						52.5375
  					],
  					[
  						18.4438,
  						52.5588
  					],
  					[
  						18.4474,
  						52.5787
  					],
  					[
  						18.4757,
  						52.5789
  					],
  					[
  						18.4803,
  						52.6245
  					],
  					[
  						18.4568,
  						52.6456
  					],
  					[
  						18.4714,
  						52.6693
  					],
  					[
  						18.4696,
  						52.6892
  					],
  					[
  						18.4999,
  						52.6921
  					],
  					[
  						18.5074,
  						52.7109
  					],
  					[
  						18.5965,
  						52.724
  					],
  					[
  						18.6508,
  						52.7258
  					],
  					[
  						18.722,
  						52.7093
  					],
  					[
  						18.7754,
  						52.6817
  					],
  					[
  						18.8286,
  						52.6484
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 98,
  			name: "powiat nakielski",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.8784,
  						53.043
  					],
  					[
  						17.8529,
  						53.0271
  					],
  					[
  						17.8527,
  						52.9783
  					],
  					[
  						17.8086,
  						52.9412
  					],
  					[
  						17.7646,
  						52.9244
  					],
  					[
  						17.7256,
  						52.9165
  					],
  					[
  						17.7086,
  						52.9254
  					],
  					[
  						17.614,
  						52.9167
  					],
  					[
  						17.5622,
  						52.8949
  					],
  					[
  						17.5125,
  						52.9088
  					],
  					[
  						17.5186,
  						52.928
  					],
  					[
  						17.4913,
  						52.9458
  					],
  					[
  						17.4573,
  						52.9509
  					],
  					[
  						17.3946,
  						52.9824
  					],
  					[
  						17.3686,
  						52.9733
  					],
  					[
  						17.3169,
  						52.974
  					],
  					[
  						17.3016,
  						52.9948
  					],
  					[
  						17.3367,
  						53.0427
  					],
  					[
  						17.3239,
  						53.0783
  					],
  					[
  						17.3572,
  						53.0872
  					],
  					[
  						17.3609,
  						53.1174
  					],
  					[
  						17.3897,
  						53.1442
  					],
  					[
  						17.3365,
  						53.1554
  					],
  					[
  						17.3458,
  						53.2011
  					],
  					[
  						17.3319,
  						53.2178
  					],
  					[
  						17.3689,
  						53.2268
  					],
  					[
  						17.4051,
  						53.2268
  					],
  					[
  						17.4388,
  						53.2675
  					],
  					[
  						17.4532,
  						53.284
  					],
  					[
  						17.5261,
  						53.2776
  					],
  					[
  						17.5553,
  						53.2949
  					],
  					[
  						17.614,
  						53.2745
  					],
  					[
  						17.7024,
  						53.2859
  					],
  					[
  						17.6857,
  						53.2116
  					],
  					[
  						17.7099,
  						53.2116
  					],
  					[
  						17.7146,
  						53.1876
  					],
  					[
  						17.7468,
  						53.1813
  					],
  					[
  						17.755,
  						53.1655
  					],
  					[
  						17.744,
  						53.1423
  					],
  					[
  						17.784,
  						53.1395
  					],
  					[
  						17.7904,
  						53.1279
  					],
  					[
  						17.7786,
  						53.0999
  					],
  					[
  						17.8402,
  						53.0917
  					],
  					[
  						17.8463,
  						53.0671
  					],
  					[
  						17.8784,
  						53.043
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 99,
  			name: "powiat bartoszycki",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.5794,
  						54.2
  					],
  					[
  						20.5181,
  						54.1904
  					],
  					[
  						20.5095,
  						54.1902
  					],
  					[
  						20.5072,
  						54.1895
  					],
  					[
  						20.4998,
  						54.1866
  					],
  					[
  						20.4979,
  						54.186
  					],
  					[
  						20.4925,
  						54.1854
  					],
  					[
  						20.4701,
  						54.1946
  					],
  					[
  						20.4682,
  						54.1958
  					],
  					[
  						20.4084,
  						54.2086
  					],
  					[
  						20.3936,
  						54.2219
  					],
  					[
  						20.3883,
  						54.2356
  					],
  					[
  						20.3475,
  						54.2582
  					],
  					[
  						20.3091,
  						54.2713
  					],
  					[
  						20.261,
  						54.275
  					],
  					[
  						20.2786,
  						54.305
  					],
  					[
  						20.2679,
  						54.3129
  					],
  					[
  						20.2773,
  						54.3411
  					],
  					[
  						20.3041,
  						54.3474
  					],
  					[
  						20.3354,
  						54.3716
  					],
  					[
  						20.3135,
  						54.4022
  					],
  					[
  						20.4385,
  						54.3879
  					],
  					[
  						20.584,
  						54.378
  					],
  					[
  						20.6224,
  						54.371
  					],
  					[
  						20.6894,
  						54.3723
  					],
  					[
  						20.8184,
  						54.36
  					],
  					[
  						21.0067,
  						54.3536
  					],
  					[
  						21.0381,
  						54.3486
  					],
  					[
  						21.1432,
  						54.3426
  					],
  					[
  						21.2205,
  						54.3348
  					],
  					[
  						21.217,
  						54.3125
  					],
  					[
  						21.1671,
  						54.2958
  					],
  					[
  						21.1852,
  						54.2757
  					],
  					[
  						21.1793,
  						54.26
  					],
  					[
  						21.139,
  						54.2569
  					],
  					[
  						21.1214,
  						54.2764
  					],
  					[
  						21.0972,
  						54.2842
  					],
  					[
  						21.0928,
  						54.2567
  					],
  					[
  						21.0578,
  						54.2589
  					],
  					[
  						21.0307,
  						54.2243
  					],
  					[
  						21.0523,
  						54.2107
  					],
  					[
  						21.0247,
  						54.1236
  					],
  					[
  						21.0574,
  						54.1283
  					],
  					[
  						21.1045,
  						54.0941
  					],
  					[
  						21.0696,
  						54.0828
  					],
  					[
  						21.0882,
  						54.0609
  					],
  					[
  						21.0821,
  						54.0371
  					],
  					[
  						21.0595,
  						54.0358
  					],
  					[
  						21.0359,
  						54.0569
  					],
  					[
  						20.9937,
  						54.0288
  					],
  					[
  						20.9463,
  						54.0503
  					],
  					[
  						20.9209,
  						54.0296
  					],
  					[
  						20.8808,
  						54.0414
  					],
  					[
  						20.8561,
  						54.039
  					],
  					[
  						20.8441,
  						54.0229
  					],
  					[
  						20.7926,
  						54.0348
  					],
  					[
  						20.7806,
  						54.074
  					],
  					[
  						20.804,
  						54.0831
  					],
  					[
  						20.8168,
  						54.1188
  					],
  					[
  						20.7926,
  						54.1253
  					],
  					[
  						20.7949,
  						54.1458
  					],
  					[
  						20.7512,
  						54.1886
  					],
  					[
  						20.7332,
  						54.2134
  					],
  					[
  						20.6927,
  						54.1987
  					],
  					[
  						20.6763,
  						54.2107
  					],
  					[
  						20.5916,
  						54.192
  					],
  					[
  						20.5794,
  						54.2
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 100,
  			name: "powiat żywiecki",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.3168,
  						49.7779
  					],
  					[
  						19.3499,
  						49.7714
  					],
  					[
  						19.366,
  						49.7778
  					],
  					[
  						19.3995,
  						49.7617
  					],
  					[
  						19.415,
  						49.7753
  					],
  					[
  						19.4364,
  						49.7571
  					],
  					[
  						19.4446,
  						49.7349
  					],
  					[
  						19.4293,
  						49.7195
  					],
  					[
  						19.4004,
  						49.7108
  					],
  					[
  						19.3738,
  						49.6926
  					],
  					[
  						19.4138,
  						49.6728
  					],
  					[
  						19.4411,
  						49.6805
  					],
  					[
  						19.4778,
  						49.6608
  					],
  					[
  						19.4689,
  						49.648
  					],
  					[
  						19.4808,
  						49.6244
  					],
  					[
  						19.4674,
  						49.6138
  					],
  					[
  						19.4096,
  						49.5918
  					],
  					[
  						19.4002,
  						49.5742
  					],
  					[
  						19.3714,
  						49.5674
  					],
  					[
  						19.3624,
  						49.5361
  					],
  					[
  						19.2643,
  						49.5324
  					],
  					[
  						19.2336,
  						49.5109
  					],
  					[
  						19.2209,
  						49.475
  					],
  					[
  						19.219,
  						49.4486
  					],
  					[
  						19.1857,
  						49.4347
  					],
  					[
  						19.1974,
  						49.4146
  					],
  					[
  						19.1534,
  						49.4038
  					],
  					[
  						19.1073,
  						49.4037
  					],
  					[
  						19.0915,
  						49.416
  					],
  					[
  						19.0539,
  						49.4152
  					],
  					[
  						19.027,
  						49.394
  					],
  					[
  						18.9712,
  						49.4021
  					],
  					[
  						18.9883,
  						49.4318
  					],
  					[
  						18.9608,
  						49.4547
  					],
  					[
  						18.9716,
  						49.5043
  					],
  					[
  						18.9466,
  						49.5174
  					],
  					[
  						18.9548,
  						49.5362
  					],
  					[
  						18.9802,
  						49.5386
  					],
  					[
  						18.984,
  						49.587
  					],
  					[
  						19.0173,
  						49.6223
  					],
  					[
  						19.0015,
  						49.6566
  					],
  					[
  						19.0069,
  						49.6721
  					],
  					[
  						19.0597,
  						49.7056
  					],
  					[
  						19.0753,
  						49.7058
  					],
  					[
  						19.0755,
  						49.7059
  					],
  					[
  						19.1174,
  						49.7072
  					],
  					[
  						19.1216,
  						49.7435
  					],
  					[
  						19.1485,
  						49.7677
  					],
  					[
  						19.1275,
  						49.7786
  					],
  					[
  						19.1468,
  						49.8016
  					],
  					[
  						19.142,
  						49.8146
  					],
  					[
  						19.1856,
  						49.8288
  					],
  					[
  						19.2201,
  						49.7888
  					],
  					[
  						19.249,
  						49.7916
  					],
  					[
  						19.2719,
  						49.7757
  					],
  					[
  						19.3168,
  						49.7779
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 101,
  			name: "powiat sokólski",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.5887,
  						53.6959
  					],
  					[
  						23.6269,
  						53.5958
  					],
  					[
  						23.6672,
  						53.5126
  					],
  					[
  						23.7074,
  						53.4365
  					],
  					[
  						23.7371,
  						53.3916
  					],
  					[
  						23.7635,
  						53.3381
  					],
  					[
  						23.8188,
  						53.244
  					],
  					[
  						23.8553,
  						53.2318
  					],
  					[
  						23.8684,
  						53.1939
  					],
  					[
  						23.9095,
  						53.1674
  					],
  					[
  						23.838,
  						53.1497
  					],
  					[
  						23.7485,
  						53.157
  					],
  					[
  						23.7192,
  						53.1538
  					],
  					[
  						23.7117,
  						53.1696
  					],
  					[
  						23.5358,
  						53.2103
  					],
  					[
  						23.494,
  						53.2151
  					],
  					[
  						23.5126,
  						53.2559
  					],
  					[
  						23.4083,
  						53.2737
  					],
  					[
  						23.4077,
  						53.274
  					],
  					[
  						23.3947,
  						53.31
  					],
  					[
  						23.3618,
  						53.3277
  					],
  					[
  						23.3581,
  						53.3511
  					],
  					[
  						23.3342,
  						53.3468
  					],
  					[
  						23.3191,
  						53.367
  					],
  					[
  						23.2198,
  						53.3847
  					],
  					[
  						23.1602,
  						53.3832
  					],
  					[
  						23.1527,
  						53.35
  					],
  					[
  						23.1178,
  						53.3392
  					],
  					[
  						23.0942,
  						53.3463
  					],
  					[
  						23.1093,
  						53.3976
  					],
  					[
  						23.0584,
  						53.4019
  					],
  					[
  						23.0642,
  						53.4506
  					],
  					[
  						23.074,
  						53.4961
  					],
  					[
  						23.0536,
  						53.526
  					],
  					[
  						23.0225,
  						53.5344
  					],
  					[
  						23.003,
  						53.5562
  					],
  					[
  						22.9972,
  						53.5781
  					],
  					[
  						22.9578,
  						53.5914
  					],
  					[
  						22.9325,
  						53.5809
  					],
  					[
  						22.9298,
  						53.5849
  					],
  					[
  						22.9287,
  						53.6071
  					],
  					[
  						22.9583,
  						53.6161
  					],
  					[
  						22.9577,
  						53.6002
  					],
  					[
  						23.0048,
  						53.6102
  					],
  					[
  						23.0076,
  						53.6262
  					],
  					[
  						23.0389,
  						53.6317
  					],
  					[
  						23.0546,
  						53.6358
  					],
  					[
  						23.0759,
  						53.665
  					],
  					[
  						23.1228,
  						53.677
  					],
  					[
  						23.1867,
  						53.7026
  					],
  					[
  						23.2233,
  						53.7143
  					],
  					[
  						23.2466,
  						53.7076
  					],
  					[
  						23.2958,
  						53.7079
  					],
  					[
  						23.34,
  						53.7219
  					],
  					[
  						23.4147,
  						53.7002
  					],
  					[
  						23.4667,
  						53.7031
  					],
  					[
  						23.5034,
  						53.6921
  					],
  					[
  						23.5321,
  						53.7102
  					],
  					[
  						23.5887,
  						53.6959
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 102,
  			name: "powiat jasielski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.3322,
  						49.8108
  					],
  					[
  						21.3358,
  						49.8273
  					],
  					[
  						21.2971,
  						49.8429
  					],
  					[
  						21.3497,
  						49.8375
  					],
  					[
  						21.3455,
  						49.8683
  					],
  					[
  						21.3786,
  						49.8667
  					],
  					[
  						21.407,
  						49.8286
  					],
  					[
  						21.4457,
  						49.8324
  					],
  					[
  						21.4433,
  						49.8343
  					],
  					[
  						21.4432,
  						49.8343
  					],
  					[
  						21.4433,
  						49.8343
  					],
  					[
  						21.4432,
  						49.8343
  					],
  					[
  						21.4774,
  						49.8405
  					],
  					[
  						21.5525,
  						49.8278
  					],
  					[
  						21.5598,
  						49.7861
  					],
  					[
  						21.6181,
  						49.7979
  					],
  					[
  						21.6342,
  						49.7739
  					],
  					[
  						21.6509,
  						49.7728
  					],
  					[
  						21.6245,
  						49.7614
  					],
  					[
  						21.6105,
  						49.7608
  					],
  					[
  						21.6209,
  						49.7266
  					],
  					[
  						21.608,
  						49.7071
  					],
  					[
  						21.6071,
  						49.7067
  					],
  					[
  						21.5798,
  						49.6921
  					],
  					[
  						21.5853,
  						49.653
  					],
  					[
  						21.5854,
  						49.6527
  					],
  					[
  						21.5779,
  						49.6477
  					],
  					[
  						21.5724,
  						49.6319
  					],
  					[
  						21.6099,
  						49.6363
  					],
  					[
  						21.6213,
  						49.6333
  					],
  					[
  						21.6208,
  						49.6328
  					],
  					[
  						21.6209,
  						49.6312
  					],
  					[
  						21.6206,
  						49.631
  					],
  					[
  						21.6207,
  						49.6308
  					],
  					[
  						21.6216,
  						49.6288
  					],
  					[
  						21.6209,
  						49.6285
  					],
  					[
  						21.6207,
  						49.6284
  					],
  					[
  						21.6194,
  						49.626
  					],
  					[
  						21.6177,
  						49.6023
  					],
  					[
  						21.5984,
  						49.5845
  					],
  					[
  						21.5849,
  						49.5549
  					],
  					[
  						21.5824,
  						49.5524
  					],
  					[
  						21.6011,
  						49.5314
  					],
  					[
  						21.6142,
  						49.4969
  					],
  					[
  						21.5892,
  						49.4845
  					],
  					[
  						21.591,
  						49.4706
  					],
  					[
  						21.5696,
  						49.4565
  					],
  					[
  						21.5803,
  						49.4353
  					],
  					[
  						21.5342,
  						49.4354
  					],
  					[
  						21.5112,
  						49.4197
  					],
  					[
  						21.4341,
  						49.4123
  					],
  					[
  						21.3987,
  						49.4338
  					],
  					[
  						21.3922,
  						49.4558
  					],
  					[
  						21.4114,
  						49.4678
  					],
  					[
  						21.3907,
  						49.489
  					],
  					[
  						21.3929,
  						49.5115
  					],
  					[
  						21.3753,
  						49.5629
  					],
  					[
  						21.3638,
  						49.577
  					],
  					[
  						21.3267,
  						49.5937
  					],
  					[
  						21.3627,
  						49.6336
  					],
  					[
  						21.3417,
  						49.6593
  					],
  					[
  						21.3408,
  						49.6972
  					],
  					[
  						21.3102,
  						49.7488
  					],
  					[
  						21.2578,
  						49.7521
  					],
  					[
  						21.2418,
  						49.7761
  					],
  					[
  						21.2761,
  						49.8039
  					],
  					[
  						21.3084,
  						49.7961
  					],
  					[
  						21.3322,
  						49.8108
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 103,
  			name: "powiat głubczycki",
  			province: "Opolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.9191,
  						50.2651
  					],
  					[
  						17.927,
  						50.2113
  					],
  					[
  						17.9598,
  						50.2187
  					],
  					[
  						17.9786,
  						50.2049
  					],
  					[
  						17.9811,
  						50.1835
  					],
  					[
  						18.0325,
  						50.1732
  					],
  					[
  						18.0598,
  						50.1747
  					],
  					[
  						18.0661,
  						50.157
  					],
  					[
  						18.0502,
  						50.1381
  					],
  					[
  						18.068,
  						50.1295
  					],
  					[
  						18.0723,
  						50.1098
  					],
  					[
  						18.035,
  						50.0658
  					],
  					[
  						18.0052,
  						50.0535
  					],
  					[
  						18.0434,
  						50.0367
  					],
  					[
  						18.0354,
  						50.011
  					],
  					[
  						17.9916,
  						50.0147
  					],
  					[
  						17.954,
  						50.0051
  					],
  					[
  						17.9229,
  						49.9787
  					],
  					[
  						17.8686,
  						49.9725
  					],
  					[
  						17.8266,
  						49.9942
  					],
  					[
  						17.8277,
  						50.0113
  					],
  					[
  						17.7779,
  						50.0201
  					],
  					[
  						17.7719,
  						50.0459
  					],
  					[
  						17.7568,
  						50.0609
  					],
  					[
  						17.7309,
  						50.0972
  					],
  					[
  						17.7051,
  						50.1144
  					],
  					[
  						17.6766,
  						50.103
  					],
  					[
  						17.6503,
  						50.1108
  					],
  					[
  						17.6391,
  						50.1314
  					],
  					[
  						17.6108,
  						50.1401
  					],
  					[
  						17.5927,
  						50.1599
  					],
  					[
  						17.6267,
  						50.1704
  					],
  					[
  						17.6282,
  						50.1716
  					],
  					[
  						17.6282,
  						50.1717
  					],
  					[
  						17.6282,
  						50.1716
  					],
  					[
  						17.6282,
  						50.1717
  					],
  					[
  						17.6283,
  						50.1718
  					],
  					[
  						17.6286,
  						50.1719
  					],
  					[
  						17.629,
  						50.1723
  					],
  					[
  						17.6293,
  						50.1726
  					],
  					[
  						17.6293,
  						50.1727
  					],
  					[
  						17.6293,
  						50.1726
  					],
  					[
  						17.6293,
  						50.1727
  					],
  					[
  						17.6298,
  						50.1728
  					],
  					[
  						17.6415,
  						50.1755
  					],
  					[
  						17.6423,
  						50.1758
  					],
  					[
  						17.6432,
  						50.1758
  					],
  					[
  						17.6773,
  						50.182
  					],
  					[
  						17.6799,
  						50.1827
  					],
  					[
  						17.7021,
  						50.1845
  					],
  					[
  						17.711,
  						50.1955
  					],
  					[
  						17.7104,
  						50.1982
  					],
  					[
  						17.7101,
  						50.1992
  					],
  					[
  						17.7585,
  						50.2066
  					],
  					[
  						17.765,
  						50.2364
  					],
  					[
  						17.7365,
  						50.2505
  					],
  					[
  						17.7272,
  						50.274
  					],
  					[
  						17.7449,
  						50.292
  					],
  					[
  						17.7514,
  						50.2995
  					],
  					[
  						17.8175,
  						50.3193
  					],
  					[
  						17.8366,
  						50.2893
  					],
  					[
  						17.8618,
  						50.2777
  					],
  					[
  						17.8813,
  						50.2864
  					],
  					[
  						17.9191,
  						50.2651
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 104,
  			name: "powiat nowosądecki",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.7132,
  						49.8066
  					],
  					[
  						20.7407,
  						49.7868
  					],
  					[
  						20.7742,
  						49.7857
  					],
  					[
  						20.8078,
  						49.7699
  					],
  					[
  						20.8453,
  						49.7639
  					],
  					[
  						20.8824,
  						49.7318
  					],
  					[
  						20.8826,
  						49.7317
  					],
  					[
  						20.8886,
  						49.7017
  					],
  					[
  						20.9078,
  						49.6836
  					],
  					[
  						20.9565,
  						49.6723
  					],
  					[
  						20.9618,
  						49.6824
  					],
  					[
  						21.0041,
  						49.6766
  					],
  					[
  						21.0585,
  						49.6435
  					],
  					[
  						21.0471,
  						49.6201
  					],
  					[
  						21.0172,
  						49.6153
  					],
  					[
  						20.9994,
  						49.5968
  					],
  					[
  						21.0304,
  						49.5669
  					],
  					[
  						20.9994,
  						49.5334
  					],
  					[
  						21.018,
  						49.496
  					],
  					[
  						21.0363,
  						49.4905
  					],
  					[
  						21.0378,
  						49.4705
  					],
  					[
  						21.0201,
  						49.46
  					],
  					[
  						21.0547,
  						49.4212
  					],
  					[
  						21.0543,
  						49.4042
  					],
  					[
  						21.1041,
  						49.3764
  					],
  					[
  						21.0941,
  						49.3651
  					],
  					[
  						21.0439,
  						49.3654
  					],
  					[
  						20.9882,
  						49.3271
  					],
  					[
  						20.9941,
  						49.3127
  					],
  					[
  						20.9403,
  						49.2992
  					],
  					[
  						20.9105,
  						49.3072
  					],
  					[
  						20.8972,
  						49.3253
  					],
  					[
  						20.8595,
  						49.3484
  					],
  					[
  						20.8259,
  						49.3344
  					],
  					[
  						20.7792,
  						49.3751
  					],
  					[
  						20.7475,
  						49.3923
  					],
  					[
  						20.7461,
  						49.4121
  					],
  					[
  						20.6927,
  						49.42
  					],
  					[
  						20.6426,
  						49.401
  					],
  					[
  						20.6149,
  						49.4178
  					],
  					[
  						20.607,
  						49.4484
  					],
  					[
  						20.5774,
  						49.4653
  					],
  					[
  						20.5368,
  						49.473
  					],
  					[
  						20.4987,
  						49.4726
  					],
  					[
  						20.4807,
  						49.4649
  					],
  					[
  						20.4472,
  						49.4997
  					],
  					[
  						20.4447,
  						49.5135
  					],
  					[
  						20.4085,
  						49.5164
  					],
  					[
  						20.3912,
  						49.5309
  					],
  					[
  						20.362,
  						49.5341
  					],
  					[
  						20.3856,
  						49.5611
  					],
  					[
  						20.3695,
  						49.5891
  					],
  					[
  						20.3704,
  						49.6209
  					],
  					[
  						20.4328,
  						49.6084
  					],
  					[
  						20.4432,
  						49.5926
  					],
  					[
  						20.4696,
  						49.5945
  					],
  					[
  						20.5054,
  						49.5777
  					],
  					[
  						20.5395,
  						49.5827
  					],
  					[
  						20.5473,
  						49.6111
  					],
  					[
  						20.5225,
  						49.6288
  					],
  					[
  						20.5486,
  						49.636
  					],
  					[
  						20.5547,
  						49.6585
  					],
  					[
  						20.5796,
  						49.6755
  					],
  					[
  						20.5859,
  						49.6954
  					],
  					[
  						20.5523,
  						49.7163
  					],
  					[
  						20.5458,
  						49.7336
  					],
  					[
  						20.566,
  						49.7359
  					],
  					[
  						20.5851,
  						49.7619
  					],
  					[
  						20.6296,
  						49.7963
  					],
  					[
  						20.6663,
  						49.8061
  					],
  					[
  						20.7132,
  						49.8066
  					]
  				],
  				[
  					[
  						20.6674,
  						49.6303
  					],
  					[
  						20.6821,
  						49.6207
  					],
  					[
  						20.6484,
  						49.5816
  					],
  					[
  						20.6793,
  						49.5738
  					],
  					[
  						20.7181,
  						49.5549
  					],
  					[
  						20.7283,
  						49.5641
  					],
  					[
  						20.751,
  						49.5792
  					],
  					[
  						20.7418,
  						49.6022
  					],
  					[
  						20.759,
  						49.6075
  					],
  					[
  						20.7457,
  						49.6359
  					],
  					[
  						20.7238,
  						49.652
  					],
  					[
  						20.6789,
  						49.6584
  					],
  					[
  						20.6674,
  						49.6303
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 105,
  			name: "powiat Zielona Góra",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.638,
  						51.9051
  					],
  					[
  						15.6518,
  						51.8751
  					],
  					[
  						15.6295,
  						51.8504
  					],
  					[
  						15.5984,
  						51.8519
  					],
  					[
  						15.5084,
  						51.8201
  					],
  					[
  						15.4659,
  						51.8274
  					],
  					[
  						15.4467,
  						51.8293
  					],
  					[
  						15.4239,
  						51.855
  					],
  					[
  						15.4214,
  						51.884
  					],
  					[
  						15.4581,
  						51.9062
  					],
  					[
  						15.4494,
  						51.941
  					],
  					[
  						15.406,
  						51.9495
  					],
  					[
  						15.4314,
  						51.9849
  					],
  					[
  						15.4389,
  						52.0152
  					],
  					[
  						15.5128,
  						52.0154
  					],
  					[
  						15.5412,
  						52.0338
  					],
  					[
  						15.5786,
  						52.0338
  					],
  					[
  						15.6102,
  						52.0064
  					],
  					[
  						15.6365,
  						52.006
  					],
  					[
  						15.6066,
  						51.9478
  					],
  					[
  						15.6449,
  						51.9474
  					],
  					[
  						15.6328,
  						51.9252
  					],
  					[
  						15.638,
  						51.9051
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 106,
  			name: "powiat Skierniewice",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.2005,
  						51.9735
  					],
  					[
  						20.2003,
  						51.9726
  					],
  					[
  						20.2005,
  						51.9735
  					],
  					[
  						20.1864,
  						51.9749
  					],
  					[
  						20.184,
  						51.9312
  					],
  					[
  						20.1319,
  						51.933
  					],
  					[
  						20.1131,
  						51.9432
  					],
  					[
  						20.1103,
  						51.966
  					],
  					[
  						20.1502,
  						51.9876
  					],
  					[
  						20.2005,
  						51.9735
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 107,
  			name: "powiat żagański",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.0862,
  						51.4255
  					],
  					[
  						15.0473,
  						51.4364
  					],
  					[
  						15.0487,
  						51.4819
  					],
  					[
  						14.9929,
  						51.4827
  					],
  					[
  						15.024,
  						51.5169
  					],
  					[
  						15.0173,
  						51.5412
  					],
  					[
  						15.0513,
  						51.5469
  					],
  					[
  						15.0622,
  						51.5617
  					],
  					[
  						15.1112,
  						51.5455
  					],
  					[
  						15.1701,
  						51.5499
  					],
  					[
  						15.1805,
  						51.5607
  					],
  					[
  						15.1659,
  						51.5806
  					],
  					[
  						15.2359,
  						51.5906
  					],
  					[
  						15.2543,
  						51.6041
  					],
  					[
  						15.2702,
  						51.6688
  					],
  					[
  						15.2521,
  						51.6748
  					],
  					[
  						15.2357,
  						51.698
  					],
  					[
  						15.2439,
  						51.7135
  					],
  					[
  						15.233,
  						51.7406
  					],
  					[
  						15.2981,
  						51.7544
  					],
  					[
  						15.3106,
  						51.742
  					],
  					[
  						15.3457,
  						51.7365
  					],
  					[
  						15.3821,
  						51.7464
  					],
  					[
  						15.3966,
  						51.7694
  					],
  					[
  						15.4422,
  						51.7817
  					],
  					[
  						15.4635,
  						51.7746
  					],
  					[
  						15.5194,
  						51.7213
  					],
  					[
  						15.5194,
  						51.6834
  					],
  					[
  						15.579,
  						51.6943
  					],
  					[
  						15.6004,
  						51.67
  					],
  					[
  						15.6621,
  						51.6693
  					],
  					[
  						15.696,
  						51.6599
  					],
  					[
  						15.6981,
  						51.6596
  					],
  					[
  						15.729,
  						51.645
  					],
  					[
  						15.7563,
  						51.6597
  					],
  					[
  						15.7854,
  						51.659
  					],
  					[
  						15.8343,
  						51.6722
  					],
  					[
  						15.8497,
  						51.6652
  					],
  					[
  						15.8526,
  						51.6495
  					],
  					[
  						15.8304,
  						51.6368
  					],
  					[
  						15.834,
  						51.6222
  					],
  					[
  						15.8158,
  						51.6029
  					],
  					[
  						15.8239,
  						51.5738
  					],
  					[
  						15.7695,
  						51.5696
  					],
  					[
  						15.713,
  						51.5428
  					],
  					[
  						15.714,
  						51.5174
  					],
  					[
  						15.6789,
  						51.5124
  					],
  					[
  						15.6548,
  						51.4722
  					],
  					[
  						15.6347,
  						51.4789
  					],
  					[
  						15.595,
  						51.4697
  					],
  					[
  						15.4877,
  						51.5276
  					],
  					[
  						15.4858,
  						51.5136
  					],
  					[
  						15.437,
  						51.5273
  					],
  					[
  						15.3712,
  						51.5079
  					],
  					[
  						15.3772,
  						51.4698
  					],
  					[
  						15.3394,
  						51.4741
  					],
  					[
  						15.3433,
  						51.4469
  					],
  					[
  						15.3249,
  						51.4185
  					],
  					[
  						15.2755,
  						51.4298
  					],
  					[
  						15.252,
  						51.449
  					],
  					[
  						15.2082,
  						51.4443
  					],
  					[
  						15.187,
  						51.464
  					],
  					[
  						15.1506,
  						51.4424
  					],
  					[
  						15.0862,
  						51.4255
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 108,
  			name: "powiat Gdańsk",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.5075,
  						54.4228
  					],
  					[
  						18.5529,
  						54.4214
  					],
  					[
  						18.5912,
  						54.4302
  					],
  					[
  						18.6435,
  						54.4085
  					],
  					[
  						18.6624,
  						54.4131
  					],
  					[
  						18.6976,
  						54.4013
  					],
  					[
  						18.7355,
  						54.3745
  					],
  					[
  						18.7762,
  						54.3705
  					],
  					[
  						18.8508,
  						54.3522
  					],
  					[
  						18.9172,
  						54.3463
  					],
  					[
  						18.95,
  						54.3583
  					],
  					[
  						18.9336,
  						54.3097
  					],
  					[
  						18.9407,
  						54.2802
  					],
  					[
  						18.9226,
  						54.2881
  					],
  					[
  						18.9101,
  						54.3124
  					],
  					[
  						18.8731,
  						54.3104
  					],
  					[
  						18.8153,
  						54.3446
  					],
  					[
  						18.7929,
  						54.3465
  					],
  					[
  						18.7641,
  						54.3333
  					],
  					[
  						18.7279,
  						54.3415
  					],
  					[
  						18.6899,
  						54.3015
  					],
  					[
  						18.6393,
  						54.291
  					],
  					[
  						18.6383,
  						54.2756
  					],
  					[
  						18.6382,
  						54.2756
  					],
  					[
  						18.6383,
  						54.2756
  					],
  					[
  						18.6382,
  						54.2756
  					],
  					[
  						18.6048,
  						54.2785
  					],
  					[
  						18.6058,
  						54.2987
  					],
  					[
  						18.5753,
  						54.3032
  					],
  					[
  						18.5661,
  						54.317
  					],
  					[
  						18.5367,
  						54.3196
  					],
  					[
  						18.5056,
  						54.3356
  					],
  					[
  						18.488,
  						54.317
  					],
  					[
  						18.4569,
  						54.3323
  					],
  					[
  						18.4685,
  						54.3467
  					],
  					[
  						18.4412,
  						54.3574
  					],
  					[
  						18.4599,
  						54.3974
  					],
  					[
  						18.442,
  						54.4082
  					],
  					[
  						18.451,
  						54.4433
  					],
  					[
  						18.5075,
  						54.4228
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 109,
  			name: "powiat lęborski",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.6666,
  						54.7832
  					],
  					[
  						17.6763,
  						54.7716
  					],
  					[
  						17.7225,
  						54.7743
  					],
  					[
  						17.7251,
  						54.756
  					],
  					[
  						17.7708,
  						54.7375
  					],
  					[
  						17.7493,
  						54.7245
  					],
  					[
  						17.7824,
  						54.7018
  					],
  					[
  						17.797,
  						54.6679
  					],
  					[
  						17.8268,
  						54.6559
  					],
  					[
  						17.8141,
  						54.6361
  					],
  					[
  						17.8201,
  						54.616
  					],
  					[
  						17.7783,
  						54.6145
  					],
  					[
  						17.7844,
  						54.5914
  					],
  					[
  						17.8267,
  						54.5619
  					],
  					[
  						17.8368,
  						54.5248
  					],
  					[
  						17.8799,
  						54.4976
  					],
  					[
  						17.8866,
  						54.4805
  					],
  					[
  						17.8501,
  						54.4687
  					],
  					[
  						17.8528,
  						54.4439
  					],
  					[
  						17.8812,
  						54.41
  					],
  					[
  						17.813,
  						54.4155
  					],
  					[
  						17.8015,
  						54.386
  					],
  					[
  						17.7625,
  						54.3535
  					],
  					[
  						17.7504,
  						54.3544
  					],
  					[
  						17.7446,
  						54.3744
  					],
  					[
  						17.6641,
  						54.3819
  					],
  					[
  						17.6527,
  						54.4085
  					],
  					[
  						17.6004,
  						54.4425
  					],
  					[
  						17.6183,
  						54.468
  					],
  					[
  						17.5552,
  						54.492
  					],
  					[
  						17.539,
  						54.5032
  					],
  					[
  						17.5674,
  						54.5117
  					],
  					[
  						17.6018,
  						54.5345
  					],
  					[
  						17.5486,
  						54.5499
  					],
  					[
  						17.5805,
  						54.5901
  					],
  					[
  						17.5816,
  						54.6061
  					],
  					[
  						17.6058,
  						54.6152
  					],
  					[
  						17.6164,
  						54.6372
  					],
  					[
  						17.5765,
  						54.6534
  					],
  					[
  						17.5096,
  						54.6616
  					],
  					[
  						17.5238,
  						54.6771
  					],
  					[
  						17.508,
  						54.6992
  					],
  					[
  						17.4167,
  						54.7126
  					],
  					[
  						17.4744,
  						54.7286
  					],
  					[
  						17.5166,
  						54.7472
  					],
  					[
  						17.4913,
  						54.7601
  					],
  					[
  						17.5508,
  						54.7701
  					],
  					[
  						17.6666,
  						54.7832
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 110,
  			name: "powiat Łódź",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.3373,
  						51.7841
  					],
  					[
  						19.3366,
  						51.8202
  					],
  					[
  						19.374,
  						51.8369
  					],
  					[
  						19.3741,
  						51.8369
  					],
  					[
  						19.374,
  						51.8369
  					],
  					[
  						19.3741,
  						51.8368
  					],
  					[
  						19.3741,
  						51.8369
  					],
  					[
  						19.3741,
  						51.8368
  					],
  					[
  						19.3754,
  						51.8368
  					],
  					[
  						19.3825,
  						51.8367
  					],
  					[
  						19.3873,
  						51.8259
  					],
  					[
  						19.4559,
  						51.8363
  					],
  					[
  						19.4567,
  						51.8487
  					],
  					[
  						19.4903,
  						51.8591
  					],
  					[
  						19.568,
  						51.8376
  					],
  					[
  						19.5779,
  						51.8155
  					],
  					[
  						19.6164,
  						51.8144
  					],
  					[
  						19.6295,
  						51.7235
  					],
  					[
  						19.6075,
  						51.6976
  					],
  					[
  						19.5766,
  						51.7066
  					],
  					[
  						19.5615,
  						51.697
  					],
  					[
  						19.4841,
  						51.6981
  					],
  					[
  						19.4687,
  						51.6883
  					],
  					[
  						19.4318,
  						51.6866
  					],
  					[
  						19.4186,
  						51.6932
  					],
  					[
  						19.3594,
  						51.6992
  					],
  					[
  						19.3444,
  						51.7339
  					],
  					[
  						19.3717,
  						51.7421
  					],
  					[
  						19.3746,
  						51.7559
  					],
  					[
  						19.3376,
  						51.7673
  					],
  					[
  						19.3373,
  						51.7841
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 111,
  			name: "powiat piotrkowski",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.9067,
  						51.3644
  					],
  					[
  						19.9432,
  						51.3489
  					],
  					[
  						19.9584,
  						51.358
  					],
  					[
  						19.9909,
  						51.3562
  					],
  					[
  						19.9866,
  						51.3338
  					],
  					[
  						20.0169,
  						51.3203
  					],
  					[
  						20.0486,
  						51.2938
  					],
  					[
  						20.041,
  						51.2795
  					],
  					[
  						20.0629,
  						51.2646
  					],
  					[
  						20.0642,
  						51.2473
  					],
  					[
  						19.9923,
  						51.2206
  					],
  					[
  						20.0132,
  						51.2005
  					],
  					[
  						19.9932,
  						51.1844
  					],
  					[
  						19.965,
  						51.2018
  					],
  					[
  						19.9284,
  						51.183
  					],
  					[
  						19.9032,
  						51.1599
  					],
  					[
  						19.9121,
  						51.1472
  					],
  					[
  						19.9016,
  						51.107
  					],
  					[
  						19.8418,
  						51.1212
  					],
  					[
  						19.8272,
  						51.1392
  					],
  					[
  						19.7552,
  						51.1413
  					],
  					[
  						19.7316,
  						51.1525
  					],
  					[
  						19.729,
  						51.1818
  					],
  					[
  						19.6983,
  						51.1895
  					],
  					[
  						19.6976,
  						51.1631
  					],
  					[
  						19.6801,
  						51.1552
  					],
  					[
  						19.6382,
  						51.1578
  					],
  					[
  						19.6211,
  						51.1492
  					],
  					[
  						19.5793,
  						51.1483
  					],
  					[
  						19.5752,
  						51.1762
  					],
  					[
  						19.5752,
  						51.1763
  					],
  					[
  						19.5752,
  						51.1762
  					],
  					[
  						19.5752,
  						51.1763
  					],
  					[
  						19.566,
  						51.1809
  					],
  					[
  						19.5713,
  						51.2004
  					],
  					[
  						19.5377,
  						51.2227
  					],
  					[
  						19.5379,
  						51.2376
  					],
  					[
  						19.5257,
  						51.2688
  					],
  					[
  						19.4819,
  						51.2752
  					],
  					[
  						19.4599,
  						51.2861
  					],
  					[
  						19.4876,
  						51.3076
  					],
  					[
  						19.4738,
  						51.3405
  					],
  					[
  						19.4993,
  						51.3619
  					],
  					[
  						19.4677,
  						51.4008
  					],
  					[
  						19.4775,
  						51.4173
  					],
  					[
  						19.474,
  						51.443
  					],
  					[
  						19.4633,
  						51.4677
  					],
  					[
  						19.4338,
  						51.4697
  					],
  					[
  						19.4545,
  						51.5045
  					],
  					[
  						19.4143,
  						51.5254
  					],
  					[
  						19.459,
  						51.5315
  					],
  					[
  						19.4683,
  						51.5426
  					],
  					[
  						19.5059,
  						51.5218
  					],
  					[
  						19.5411,
  						51.513
  					],
  					[
  						19.5981,
  						51.515
  					],
  					[
  						19.6166,
  						51.5559
  					],
  					[
  						19.5942,
  						51.5811
  					],
  					[
  						19.6158,
  						51.59
  					],
  					[
  						19.6374,
  						51.6258
  					],
  					[
  						19.6644,
  						51.649
  					],
  					[
  						19.6903,
  						51.6495
  					],
  					[
  						19.7083,
  						51.6295
  					],
  					[
  						19.7242,
  						51.5967
  					],
  					[
  						19.7134,
  						51.572
  					],
  					[
  						19.7494,
  						51.5572
  					],
  					[
  						19.7734,
  						51.5586
  					],
  					[
  						19.7954,
  						51.5318
  					],
  					[
  						19.8218,
  						51.543
  					],
  					[
  						19.8257,
  						51.5697
  					],
  					[
  						19.8496,
  						51.5784
  					],
  					[
  						19.8891,
  						51.5439
  					],
  					[
  						19.8601,
  						51.5225
  					],
  					[
  						19.8719,
  						51.5089
  					],
  					[
  						19.9021,
  						51.5133
  					],
  					[
  						19.922,
  						51.4948
  					],
  					[
  						19.9185,
  						51.4823
  					],
  					[
  						19.958,
  						51.4769
  					],
  					[
  						19.9597,
  						51.4529
  					],
  					[
  						19.9264,
  						51.4242
  					],
  					[
  						19.9032,
  						51.4096
  					],
  					[
  						19.8634,
  						51.4011
  					],
  					[
  						19.8659,
  						51.378
  					],
  					[
  						19.9067,
  						51.3644
  					]
  				],
  				[
  					[
  						19.7007,
  						51.3757
  					],
  					[
  						19.7444,
  						51.3785
  					],
  					[
  						19.7496,
  						51.4123
  					],
  					[
  						19.7814,
  						51.4347
  					],
  					[
  						19.7833,
  						51.4529
  					],
  					[
  						19.7407,
  						51.4443
  					],
  					[
  						19.659,
  						51.4424
  					],
  					[
  						19.6265,
  						51.4104
  					],
  					[
  						19.6344,
  						51.3859
  					],
  					[
  						19.6783,
  						51.3732
  					],
  					[
  						19.7007,
  						51.3757
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 112,
  			name: "powiat ostrowski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.2837,
  						52.879
  					],
  					[
  						22.2932,
  						52.8711
  					],
  					[
  						22.3051,
  						52.8393
  					],
  					[
  						22.2523,
  						52.8338
  					],
  					[
  						22.3037,
  						52.748
  					],
  					[
  						22.3385,
  						52.751
  					],
  					[
  						22.3542,
  						52.7753
  					],
  					[
  						22.3772,
  						52.7784
  					],
  					[
  						22.3897,
  						52.7955
  					],
  					[
  						22.4538,
  						52.7882
  					],
  					[
  						22.4469,
  						52.7267
  					],
  					[
  						22.435,
  						52.6981
  					],
  					[
  						22.4447,
  						52.6821
  					],
  					[
  						22.4513,
  						52.6247
  					],
  					[
  						22.4086,
  						52.6097
  					],
  					[
  						22.3939,
  						52.6129
  					],
  					[
  						22.3495,
  						52.6562
  					],
  					[
  						22.3085,
  						52.668
  					],
  					[
  						22.2783,
  						52.6693
  					],
  					[
  						22.2117,
  						52.6981
  					],
  					[
  						22.1032,
  						52.693
  					],
  					[
  						22.043,
  						52.6762
  					],
  					[
  						22.0537,
  						52.6613
  					],
  					[
  						22.0489,
  						52.6339
  					],
  					[
  						22.0351,
  						52.6216
  					],
  					[
  						21.9998,
  						52.6219
  					],
  					[
  						22.0026,
  						52.6305
  					],
  					[
  						21.9995,
  						52.647
  					],
  					[
  						21.9574,
  						52.6481
  					],
  					[
  						21.9195,
  						52.6603
  					],
  					[
  						21.9231,
  						52.6846
  					],
  					[
  						21.8958,
  						52.703
  					],
  					[
  						21.8666,
  						52.6989
  					],
  					[
  						21.7928,
  						52.6752
  					],
  					[
  						21.773,
  						52.6649
  					],
  					[
  						21.7222,
  						52.6802
  					],
  					[
  						21.7058,
  						52.7005
  					],
  					[
  						21.6601,
  						52.6988
  					],
  					[
  						21.6509,
  						52.728
  					],
  					[
  						21.6973,
  						52.7323
  					],
  					[
  						21.7045,
  						52.7962
  					],
  					[
  						21.676,
  						52.7956
  					],
  					[
  						21.6509,
  						52.8086
  					],
  					[
  						21.6303,
  						52.8315
  					],
  					[
  						21.6019,
  						52.8342
  					],
  					[
  						21.6243,
  						52.8525
  					],
  					[
  						21.6135,
  						52.8928
  					],
  					[
  						21.6586,
  						52.9064
  					],
  					[
  						21.6956,
  						52.9087
  					],
  					[
  						21.7907,
  						52.8972
  					],
  					[
  						21.8026,
  						52.9111
  					],
  					[
  						21.8437,
  						52.9157
  					],
  					[
  						21.8313,
  						52.9395
  					],
  					[
  						21.8837,
  						52.9609
  					],
  					[
  						21.9256,
  						52.949
  					],
  					[
  						21.9604,
  						52.9798
  					],
  					[
  						21.9761,
  						52.9788
  					],
  					[
  						22.0279,
  						52.9343
  					],
  					[
  						21.9917,
  						52.9196
  					],
  					[
  						22.0084,
  						52.9037
  					],
  					[
  						22.0038,
  						52.8847
  					],
  					[
  						22.035,
  						52.8851
  					],
  					[
  						22.0379,
  						52.8511
  					],
  					[
  						22.084,
  						52.8457
  					],
  					[
  						22.1014,
  						52.862
  					],
  					[
  						22.1242,
  						52.8427
  					],
  					[
  						22.1741,
  						52.8581
  					],
  					[
  						22.2097,
  						52.8545
  					],
  					[
  						22.2072,
  						52.883
  					],
  					[
  						22.2509,
  						52.8764
  					],
  					[
  						22.2837,
  						52.879
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 113,
  			name: "powiat starogardzki",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.1064,
  						53.9255
  					],
  					[
  						18.1615,
  						53.9599
  					],
  					[
  						18.2037,
  						53.956
  					],
  					[
  						18.2179,
  						53.9422
  					],
  					[
  						18.2616,
  						53.9581
  					],
  					[
  						18.3031,
  						53.9652
  					],
  					[
  						18.325,
  						54.0021
  					],
  					[
  						18.2796,
  						53.9935
  					],
  					[
  						18.2876,
  						54.0142
  					],
  					[
  						18.2866,
  						54.0145
  					],
  					[
  						18.2946,
  						54.036
  					],
  					[
  						18.344,
  						54.0459
  					],
  					[
  						18.3558,
  						54.0583
  					],
  					[
  						18.3337,
  						54.0862
  					],
  					[
  						18.351,
  						54.1069
  					],
  					[
  						18.3288,
  						54.1133
  					],
  					[
  						18.3272,
  						54.1411
  					],
  					[
  						18.3654,
  						54.1359
  					],
  					[
  						18.3912,
  						54.1212
  					],
  					[
  						18.4818,
  						54.1193
  					],
  					[
  						18.5333,
  						54.1264
  					],
  					[
  						18.5478,
  						54.1106
  					],
  					[
  						18.5907,
  						54.1059
  					],
  					[
  						18.5693,
  						54.0686
  					],
  					[
  						18.5715,
  						54.0416
  					],
  					[
  						18.6175,
  						54.0338
  					],
  					[
  						18.6312,
  						54.0197
  					],
  					[
  						18.674,
  						54.0058
  					],
  					[
  						18.6588,
  						53.9825
  					],
  					[
  						18.6733,
  						53.9547
  					],
  					[
  						18.6495,
  						53.9531
  					],
  					[
  						18.6473,
  						53.9517
  					],
  					[
  						18.6316,
  						53.935
  					],
  					[
  						18.6249,
  						53.9212
  					],
  					[
  						18.5875,
  						53.8619
  					],
  					[
  						18.6123,
  						53.8277
  					],
  					[
  						18.5943,
  						53.8014
  					],
  					[
  						18.6339,
  						53.7998
  					],
  					[
  						18.6367,
  						53.7703
  					],
  					[
  						18.6998,
  						53.7737
  					],
  					[
  						18.7229,
  						53.7635
  					],
  					[
  						18.73,
  						53.744
  					],
  					[
  						18.6908,
  						53.7208
  					],
  					[
  						18.6966,
  						53.7
  					],
  					[
  						18.6768,
  						53.6907
  					],
  					[
  						18.6552,
  						53.6936
  					],
  					[
  						18.6306,
  						53.6746
  					],
  					[
  						18.5856,
  						53.6736
  					],
  					[
  						18.5802,
  						53.6579
  					],
  					[
  						18.5506,
  						53.6559
  					],
  					[
  						18.5145,
  						53.7038
  					],
  					[
  						18.4681,
  						53.6959
  					],
  					[
  						18.3542,
  						53.6874
  					],
  					[
  						18.3462,
  						53.6923
  					],
  					[
  						18.2638,
  						53.701
  					],
  					[
  						18.2739,
  						53.7317
  					],
  					[
  						18.2561,
  						53.7462
  					],
  					[
  						18.2047,
  						53.7401
  					],
  					[
  						18.1706,
  						53.7453
  					],
  					[
  						18.1518,
  						53.7682
  					],
  					[
  						18.108,
  						53.7696
  					],
  					[
  						18.072,
  						53.7811
  					],
  					[
  						18.0752,
  						53.7975
  					],
  					[
  						18.1226,
  						53.824
  					],
  					[
  						18.0874,
  						53.8346
  					],
  					[
  						18.0708,
  						53.8739
  					],
  					[
  						18.108,
  						53.8937
  					],
  					[
  						18.1402,
  						53.8934
  					],
  					[
  						18.1064,
  						53.9255
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 114,
  			name: "powiat Poznań",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.7794,
  						52.4592
  					],
  					[
  						16.7392,
  						52.4654
  					],
  					[
  						16.7831,
  						52.4825
  					],
  					[
  						16.8305,
  						52.4694
  					],
  					[
  						16.8962,
  						52.4653
  					],
  					[
  						16.8882,
  						52.4947
  					],
  					[
  						16.9717,
  						52.5011
  					],
  					[
  						16.9757,
  						52.4415
  					],
  					[
  						17.0248,
  						52.4377
  					],
  					[
  						17.0655,
  						52.4163
  					],
  					[
  						17.0447,
  						52.404
  					],
  					[
  						17.0586,
  						52.3575
  					],
  					[
  						17.0377,
  						52.329
  					],
  					[
  						17.0121,
  						52.3369
  					],
  					[
  						16.9835,
  						52.324
  					],
  					[
  						16.9959,
  						52.2919
  					],
  					[
  						16.9476,
  						52.3107
  					],
  					[
  						16.899,
  						52.3385
  					],
  					[
  						16.9017,
  						52.3559
  					],
  					[
  						16.8662,
  						52.359
  					],
  					[
  						16.8341,
  						52.3704
  					],
  					[
  						16.7951,
  						52.4108
  					],
  					[
  						16.8008,
  						52.4373
  					],
  					[
  						16.7794,
  						52.4592
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 115,
  			name: "powiat Konin",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.3086,
  						52.294
  					],
  					[
  						18.3124,
  						52.2799
  					],
  					[
  						18.2924,
  						52.2655
  					],
  					[
  						18.2941,
  						52.2507
  					],
  					[
  						18.3238,
  						52.2454
  					],
  					[
  						18.3158,
  						52.2199
  					],
  					[
  						18.2929,
  						52.2232
  					],
  					[
  						18.2662,
  						52.1879
  					],
  					[
  						18.2316,
  						52.1896
  					],
  					[
  						18.2188,
  						52.1897
  					],
  					[
  						18.2243,
  						52.2152
  					],
  					[
  						18.1926,
  						52.2338
  					],
  					[
  						18.2032,
  						52.2441
  					],
  					[
  						18.2525,
  						52.257
  					],
  					[
  						18.2464,
  						52.2724
  					],
  					[
  						18.2085,
  						52.2894
  					],
  					[
  						18.2332,
  						52.2993
  					],
  					[
  						18.2271,
  						52.3286
  					],
  					[
  						18.3071,
  						52.317
  					],
  					[
  						18.3086,
  						52.294
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 116,
  			name: "powiat stalowowolski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.8434,
  						50.7392
  					],
  					[
  						21.8406,
  						50.7601
  					],
  					[
  						21.8643,
  						50.8027
  					],
  					[
  						21.8954,
  						50.7797
  					],
  					[
  						21.9502,
  						50.7716
  					],
  					[
  						21.9724,
  						50.7878
  					],
  					[
  						21.9944,
  						50.7832
  					],
  					[
  						22.0521,
  						50.8205
  					],
  					[
  						22.163,
  						50.7973
  					],
  					[
  						22.1523,
  						50.7718
  					],
  					[
  						22.1975,
  						50.7609
  					],
  					[
  						22.2007,
  						50.7523
  					],
  					[
  						22.1704,
  						50.7062
  					],
  					[
  						22.1691,
  						50.6889
  					],
  					[
  						22.1469,
  						50.673
  					],
  					[
  						22.2232,
  						50.6598
  					],
  					[
  						22.2463,
  						50.6249
  					],
  					[
  						22.2639,
  						50.604
  					],
  					[
  						22.2499,
  						50.5744
  					],
  					[
  						22.2072,
  						50.568
  					],
  					[
  						22.2286,
  						50.5479
  					],
  					[
  						22.1908,
  						50.5403
  					],
  					[
  						22.157,
  						50.546
  					],
  					[
  						22.0957,
  						50.5464
  					],
  					[
  						22.0649,
  						50.5129
  					],
  					[
  						22.0866,
  						50.4534
  					],
  					[
  						22.0585,
  						50.4535
  					],
  					[
  						22.0623,
  						50.4161
  					],
  					[
  						22.0391,
  						50.4091
  					],
  					[
  						22.0246,
  						50.3878
  					],
  					[
  						22.0177,
  						50.3619
  					],
  					[
  						21.9839,
  						50.3674
  					],
  					[
  						21.952,
  						50.384
  					],
  					[
  						21.9192,
  						50.4148
  					],
  					[
  						21.8812,
  						50.3919
  					],
  					[
  						21.8519,
  						50.4623
  					],
  					[
  						21.8822,
  						50.4729
  					],
  					[
  						21.8839,
  						50.4884
  					],
  					[
  						21.9652,
  						50.5034
  					],
  					[
  						21.9807,
  						50.533
  					],
  					[
  						21.9689,
  						50.5399
  					],
  					[
  						21.9825,
  						50.5691
  					],
  					[
  						21.9371,
  						50.5781
  					],
  					[
  						21.9407,
  						50.5886
  					],
  					[
  						21.9102,
  						50.6016
  					],
  					[
  						21.9043,
  						50.6151
  					],
  					[
  						21.8708,
  						50.6313
  					],
  					[
  						21.8583,
  						50.6473
  					],
  					[
  						21.8805,
  						50.7027
  					],
  					[
  						21.8434,
  						50.7392
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 117,
  			name: "powiat Tarnobrzeg",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.6012,
  						50.5197
  					],
  					[
  						21.6575,
  						50.573
  					],
  					[
  						21.6674,
  						50.6011
  					],
  					[
  						21.7074,
  						50.6276
  					],
  					[
  						21.7226,
  						50.6454
  					],
  					[
  						21.7483,
  						50.6552
  					],
  					[
  						21.7792,
  						50.645
  					],
  					[
  						21.7733,
  						50.6226
  					],
  					[
  						21.793,
  						50.6119
  					],
  					[
  						21.7368,
  						50.5624
  					],
  					[
  						21.7112,
  						50.5347
  					],
  					[
  						21.6594,
  						50.535
  					],
  					[
  						21.6228,
  						50.5128
  					],
  					[
  						21.6012,
  						50.5197
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 118,
  			name: "powiat płoński",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.4904,
  						52.72
  					],
  					[
  						20.4965,
  						52.7094
  					],
  					[
  						20.5423,
  						52.7068
  					],
  					[
  						20.6114,
  						52.7342
  					],
  					[
  						20.6576,
  						52.7112
  					],
  					[
  						20.6927,
  						52.7175
  					],
  					[
  						20.7057,
  						52.6999
  					],
  					[
  						20.7282,
  						52.7045
  					],
  					[
  						20.73,
  						52.6875
  					],
  					[
  						20.6961,
  						52.6763
  					],
  					[
  						20.7148,
  						52.6173
  					],
  					[
  						20.7056,
  						52.5893
  					],
  					[
  						20.6558,
  						52.5954
  					],
  					[
  						20.6085,
  						52.5676
  					],
  					[
  						20.6201,
  						52.53
  					],
  					[
  						20.5902,
  						52.5143
  					],
  					[
  						20.5731,
  						52.4653
  					],
  					[
  						20.5419,
  						52.4671
  					],
  					[
  						20.487,
  						52.4414
  					],
  					[
  						20.4832,
  						52.4285
  					],
  					[
  						20.4975,
  						52.4219
  					],
  					[
  						20.4048,
  						52.3843
  					],
  					[
  						20.3134,
  						52.3912
  					],
  					[
  						20.251,
  						52.3881
  					],
  					[
  						20.2312,
  						52.4345
  					],
  					[
  						20.2364,
  						52.456
  					],
  					[
  						20.2413,
  						52.4941
  					],
  					[
  						20.2259,
  						52.5134
  					],
  					[
  						20.1937,
  						52.5211
  					],
  					[
  						20.2006,
  						52.5472
  					],
  					[
  						20.1633,
  						52.5742
  					],
  					[
  						20.1476,
  						52.6158
  					],
  					[
  						20.1668,
  						52.65
  					],
  					[
  						20.1619,
  						52.6721
  					],
  					[
  						20.1252,
  						52.6829
  					],
  					[
  						20.0885,
  						52.6766
  					],
  					[
  						20.0745,
  						52.694
  					],
  					[
  						20.0468,
  						52.7037
  					],
  					[
  						20.0421,
  						52.7217
  					],
  					[
  						20.0598,
  						52.7367
  					],
  					[
  						20.0647,
  						52.7595
  					],
  					[
  						19.9641,
  						52.7808
  					],
  					[
  						19.964,
  						52.7808
  					],
  					[
  						19.9641,
  						52.7808
  					],
  					[
  						19.9699,
  						52.8093
  					],
  					[
  						19.9915,
  						52.828
  					],
  					[
  						20.0002,
  						52.8541
  					],
  					[
  						20.0439,
  						52.8361
  					],
  					[
  						20.0877,
  						52.8359
  					],
  					[
  						20.1267,
  						52.8261
  					],
  					[
  						20.1445,
  						52.8514
  					],
  					[
  						20.1478,
  						52.8862
  					],
  					[
  						20.1876,
  						52.8957
  					],
  					[
  						20.2643,
  						52.8475
  					],
  					[
  						20.2147,
  						52.8236
  					],
  					[
  						20.2184,
  						52.7947
  					],
  					[
  						20.2641,
  						52.7773
  					],
  					[
  						20.3006,
  						52.7868
  					],
  					[
  						20.3146,
  						52.7691
  					],
  					[
  						20.3505,
  						52.7721
  					],
  					[
  						20.3508,
  						52.7573
  					],
  					[
  						20.4021,
  						52.7302
  					],
  					[
  						20.4254,
  						52.7382
  					],
  					[
  						20.4661,
  						52.7324
  					],
  					[
  						20.4904,
  						52.72
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 119,
  			name: "powiat mławski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.4111,
  						53.2142
  					],
  					[
  						20.4584,
  						53.2468
  					],
  					[
  						20.4754,
  						53.2341
  					],
  					[
  						20.5619,
  						53.2265
  					],
  					[
  						20.6091,
  						53.239
  					],
  					[
  						20.6119,
  						53.2523
  					],
  					[
  						20.6572,
  						53.2515
  					],
  					[
  						20.676,
  						53.2695
  					],
  					[
  						20.6788,
  						53.2494
  					],
  					[
  						20.7083,
  						53.2255
  					],
  					[
  						20.6907,
  						53.2189
  					],
  					[
  						20.7201,
  						53.1829
  					],
  					[
  						20.7006,
  						53.1634
  					],
  					[
  						20.7029,
  						53.124
  					],
  					[
  						20.7264,
  						53.1071
  					],
  					[
  						20.6914,
  						53.0895
  					],
  					[
  						20.6654,
  						53.087
  					],
  					[
  						20.6209,
  						53.1048
  					],
  					[
  						20.5966,
  						53.0964
  					],
  					[
  						20.5703,
  						53.0741
  					],
  					[
  						20.5851,
  						53.0366
  					],
  					[
  						20.5373,
  						53.0152
  					],
  					[
  						20.5481,
  						53.0049
  					],
  					[
  						20.4952,
  						52.9759
  					],
  					[
  						20.5036,
  						52.9614
  					],
  					[
  						20.4428,
  						52.9548
  					],
  					[
  						20.4565,
  						52.9221
  					],
  					[
  						20.4249,
  						52.9164
  					],
  					[
  						20.4035,
  						52.8679
  					],
  					[
  						20.3901,
  						52.8608
  					],
  					[
  						20.3181,
  						52.8421
  					],
  					[
  						20.3075,
  						52.8503
  					],
  					[
  						20.2643,
  						52.8475
  					],
  					[
  						20.1876,
  						52.8957
  					],
  					[
  						20.1478,
  						52.8862
  					],
  					[
  						20.1311,
  						52.889
  					],
  					[
  						20.101,
  						52.8725
  					],
  					[
  						20.0934,
  						52.8937
  					],
  					[
  						20.0325,
  						52.9292
  					],
  					[
  						20.0373,
  						52.9677
  					],
  					[
  						20.0428,
  						53.0331
  					],
  					[
  						20.0856,
  						53.0521
  					],
  					[
  						20.0864,
  						53.0702
  					],
  					[
  						20.1172,
  						53.0921
  					],
  					[
  						20.1351,
  						53.1425
  					],
  					[
  						20.1653,
  						53.1558
  					],
  					[
  						20.2902,
  						53.1391
  					],
  					[
  						20.3538,
  						53.1471
  					],
  					[
  						20.3261,
  						53.1606
  					],
  					[
  						20.3701,
  						53.1773
  					],
  					[
  						20.4111,
  						53.2142
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 120,
  			name: "powiat siedlecki",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.4678,
  						52.3216
  					],
  					[
  						22.5101,
  						52.3296
  					],
  					[
  						22.5402,
  						52.3653
  					],
  					[
  						22.537,
  						52.3857
  					],
  					[
  						22.5629,
  						52.4105
  					],
  					[
  						22.6663,
  						52.3857
  					],
  					[
  						22.6869,
  						52.393
  					],
  					[
  						22.7228,
  						52.3833
  					],
  					[
  						22.7204,
  						52.3723
  					],
  					[
  						22.7407,
  						52.3439
  					],
  					[
  						22.7187,
  						52.334
  					],
  					[
  						22.6737,
  						52.3199
  					],
  					[
  						22.7232,
  						52.3068
  					],
  					[
  						22.7238,
  						52.2804
  					],
  					[
  						22.6698,
  						52.2691
  					],
  					[
  						22.678,
  						52.2421
  					],
  					[
  						22.636,
  						52.2385
  					],
  					[
  						22.6474,
  						52.2191
  					],
  					[
  						22.6286,
  						52.199
  					],
  					[
  						22.6289,
  						52.1721
  					],
  					[
  						22.59,
  						52.1807
  					],
  					[
  						22.5764,
  						52.1526
  					],
  					[
  						22.5793,
  						52.1364
  					],
  					[
  						22.6483,
  						52.0909
  					],
  					[
  						22.6691,
  						52.063
  					],
  					[
  						22.6561,
  						52.0357
  					],
  					[
  						22.6229,
  						52.0187
  					],
  					[
  						22.6083,
  						52.037
  					],
  					[
  						22.5475,
  						52.0445
  					],
  					[
  						22.5159,
  						52.0684
  					],
  					[
  						22.4833,
  						52.0672
  					],
  					[
  						22.456,
  						52.0296
  					],
  					[
  						22.425,
  						52.015
  					],
  					[
  						22.3843,
  						52.0163
  					],
  					[
  						22.3449,
  						51.9968
  					],
  					[
  						22.316,
  						52.014
  					],
  					[
  						22.3227,
  						52.0369
  					],
  					[
  						22.2975,
  						52.0374
  					],
  					[
  						22.286,
  						52.0195
  					],
  					[
  						22.2537,
  						52.0045
  					],
  					[
  						22.1519,
  						52.0284
  					],
  					[
  						22.1374,
  						52.0062
  					],
  					[
  						22.0766,
  						52.0059
  					],
  					[
  						22.0508,
  						52.0206
  					],
  					[
  						22.0265,
  						52.0157
  					],
  					[
  						21.967,
  						51.9888
  					],
  					[
  						21.9467,
  						51.9929
  					],
  					[
  						21.9447,
  						51.9925
  					],
  					[
  						21.8892,
  						51.9732
  					],
  					[
  						21.8879,
  						51.9908
  					],
  					[
  						21.87,
  						52.0364
  					],
  					[
  						21.8679,
  						52.0375
  					],
  					[
  						21.9406,
  						52.0727
  					],
  					[
  						21.9763,
  						52.0908
  					],
  					[
  						21.9468,
  						52.1061
  					],
  					[
  						21.9376,
  						52.147
  					],
  					[
  						21.9199,
  						52.149
  					],
  					[
  						21.9161,
  						52.1752
  					],
  					[
  						21.9418,
  						52.2164
  					],
  					[
  						21.9675,
  						52.2209
  					],
  					[
  						22.0488,
  						52.2095
  					],
  					[
  						22.0507,
  						52.2274
  					],
  					[
  						22.0765,
  						52.239
  					],
  					[
  						22.0527,
  						52.255
  					],
  					[
  						22.0424,
  						52.2932
  					],
  					[
  						22.0922,
  						52.3143
  					],
  					[
  						22.076,
  						52.3382
  					],
  					[
  						22.1197,
  						52.3135
  					],
  					[
  						22.165,
  						52.316
  					],
  					[
  						22.197,
  						52.291
  					],
  					[
  						22.2139,
  						52.3039
  					],
  					[
  						22.2737,
  						52.317
  					],
  					[
  						22.3001,
  						52.3013
  					],
  					[
  						22.3676,
  						52.3041
  					],
  					[
  						22.3818,
  						52.3148
  					],
  					[
  						22.4165,
  						52.3137
  					],
  					[
  						22.4678,
  						52.3216
  					]
  				],
  				[
  					[
  						22.2409,
  						52.1314
  					],
  					[
  						22.2662,
  						52.1452
  					],
  					[
  						22.3136,
  						52.1487
  					],
  					[
  						22.3301,
  						52.1618
  					],
  					[
  						22.2639,
  						52.1957
  					],
  					[
  						22.2253,
  						52.1708
  					],
  					[
  						22.2409,
  						52.1314
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 121,
  			name: "powiat garwoliński",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.6155,
  						51.6176
  					],
  					[
  						21.5861,
  						51.6246
  					],
  					[
  						21.5432,
  						51.6642
  					],
  					[
  						21.4728,
  						51.6648
  					],
  					[
  						21.4451,
  						51.7043
  					],
  					[
  						21.4454,
  						51.7208
  					],
  					[
  						21.4103,
  						51.745
  					],
  					[
  						21.4351,
  						51.7838
  					],
  					[
  						21.3823,
  						51.8221
  					],
  					[
  						21.3105,
  						51.8427
  					],
  					[
  						21.2864,
  						51.8617
  					],
  					[
  						21.2758,
  						51.8768
  					],
  					[
  						21.3204,
  						51.9032
  					],
  					[
  						21.3376,
  						51.8951
  					],
  					[
  						21.4003,
  						51.9007
  					],
  					[
  						21.4491,
  						51.9122
  					],
  					[
  						21.465,
  						51.9257
  					],
  					[
  						21.469,
  						51.9788
  					],
  					[
  						21.5137,
  						51.9836
  					],
  					[
  						21.5313,
  						52.0216
  					],
  					[
  						21.5777,
  						52.0332
  					],
  					[
  						21.6452,
  						52.0083
  					],
  					[
  						21.6728,
  						52.0177
  					],
  					[
  						21.7173,
  						51.997
  					],
  					[
  						21.7517,
  						51.9906
  					],
  					[
  						21.7684,
  						51.9749
  					],
  					[
  						21.8181,
  						51.9789
  					],
  					[
  						21.8272,
  						51.9956
  					],
  					[
  						21.8879,
  						51.9908
  					],
  					[
  						21.8892,
  						51.9732
  					],
  					[
  						21.8664,
  						51.9434
  					],
  					[
  						21.89,
  						51.9284
  					],
  					[
  						21.8856,
  						51.9119
  					],
  					[
  						21.908,
  						51.903
  					],
  					[
  						21.9121,
  						51.8865
  					],
  					[
  						21.8859,
  						51.8604
  					],
  					[
  						21.8453,
  						51.8412
  					],
  					[
  						21.8946,
  						51.8328
  					],
  					[
  						21.9174,
  						51.8396
  					],
  					[
  						21.9422,
  						51.826
  					],
  					[
  						21.9564,
  						51.7938
  					],
  					[
  						21.8973,
  						51.7688
  					],
  					[
  						21.8666,
  						51.7687
  					],
  					[
  						21.8357,
  						51.7438
  					],
  					[
  						21.8709,
  						51.7321
  					],
  					[
  						21.88,
  						51.6936
  					],
  					[
  						21.8558,
  						51.6772
  					],
  					[
  						21.8387,
  						51.6522
  					],
  					[
  						21.76,
  						51.6404
  					],
  					[
  						21.7492,
  						51.612
  					],
  					[
  						21.7138,
  						51.6351
  					],
  					[
  						21.6524,
  						51.6585
  					],
  					[
  						21.6362,
  						51.6543
  					],
  					[
  						21.6401,
  						51.6259
  					],
  					[
  						21.6155,
  						51.6176
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 122,
  			name: "powiat lipski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.3825,
  						51.0405
  					],
  					[
  						21.3831,
  						51.0583
  					],
  					[
  						21.3542,
  						51.0662
  					],
  					[
  						21.3555,
  						51.0853
  					],
  					[
  						21.3111,
  						51.0842
  					],
  					[
  						21.3443,
  						51.1762
  					],
  					[
  						21.3618,
  						51.1832
  					],
  					[
  						21.4251,
  						51.1844
  					],
  					[
  						21.3938,
  						51.2059
  					],
  					[
  						21.4162,
  						51.2212
  					],
  					[
  						21.4518,
  						51.2207
  					],
  					[
  						21.4677,
  						51.2525
  					],
  					[
  						21.501,
  						51.2727
  					],
  					[
  						21.5159,
  						51.2635
  					],
  					[
  						21.5608,
  						51.2726
  					],
  					[
  						21.5401,
  						51.2952
  					],
  					[
  						21.6319,
  						51.2742
  					],
  					[
  						21.6542,
  						51.2749
  					],
  					[
  						21.6676,
  						51.3022
  					],
  					[
  						21.705,
  						51.2918
  					],
  					[
  						21.7053,
  						51.2916
  					],
  					[
  						21.7421,
  						51.2761
  					],
  					[
  						21.8217,
  						51.2627
  					],
  					[
  						21.8082,
  						51.2543
  					],
  					[
  						21.8166,
  						51.2306
  					],
  					[
  						21.7886,
  						51.2017
  					],
  					[
  						21.7871,
  						51.1451
  					],
  					[
  						21.803,
  						51.0721
  					],
  					[
  						21.7521,
  						51.0374
  					],
  					[
  						21.7299,
  						51.0473
  					],
  					[
  						21.7052,
  						51.0427
  					],
  					[
  						21.6763,
  						51.078
  					],
  					[
  						21.6302,
  						51.0634
  					],
  					[
  						21.5901,
  						51.0578
  					],
  					[
  						21.513,
  						51.0561
  					],
  					[
  						21.4636,
  						51.0131
  					],
  					[
  						21.4313,
  						51.0295
  					],
  					[
  						21.3825,
  						51.0405
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 123,
  			name: "powiat hrubieszowski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.9747,
  						50.4129
  					],
  					[
  						23.9907,
  						50.4317
  					],
  					[
  						23.9378,
  						50.4398
  					],
  					[
  						23.9159,
  						50.456
  					],
  					[
  						23.8757,
  						50.4713
  					],
  					[
  						23.9027,
  						50.4811
  					],
  					[
  						23.9191,
  						50.5042
  					],
  					[
  						23.9616,
  						50.5265
  					],
  					[
  						23.9578,
  						50.5447
  					],
  					[
  						23.9878,
  						50.5485
  					],
  					[
  						23.9639,
  						50.5679
  					],
  					[
  						23.9199,
  						50.578
  					],
  					[
  						23.8889,
  						50.5569
  					],
  					[
  						23.8582,
  						50.5564
  					],
  					[
  						23.8496,
  						50.5759
  					],
  					[
  						23.8053,
  						50.5921
  					],
  					[
  						23.7777,
  						50.5886
  					],
  					[
  						23.7534,
  						50.5982
  					],
  					[
  						23.7569,
  						50.624
  					],
  					[
  						23.773,
  						50.6404
  					],
  					[
  						23.7187,
  						50.6487
  					],
  					[
  						23.7027,
  						50.6732
  					],
  					[
  						23.7229,
  						50.6928
  					],
  					[
  						23.6715,
  						50.6903
  					],
  					[
  						23.6534,
  						50.6811
  					],
  					[
  						23.6229,
  						50.684
  					],
  					[
  						23.6254,
  						50.7087
  					],
  					[
  						23.6696,
  						50.7135
  					],
  					[
  						23.6455,
  						50.7393
  					],
  					[
  						23.6592,
  						50.7533
  					],
  					[
  						23.6611,
  						50.7908
  					],
  					[
  						23.6362,
  						50.8132
  					],
  					[
  						23.6426,
  						50.8365
  					],
  					[
  						23.6494,
  						50.8537
  					],
  					[
  						23.5804,
  						50.8735
  					],
  					[
  						23.6032,
  						50.8776
  					],
  					[
  						23.596,
  						50.8956
  					],
  					[
  						23.5999,
  						50.9314
  					],
  					[
  						23.6505,
  						50.9407
  					],
  					[
  						23.6944,
  						50.9408
  					],
  					[
  						23.7206,
  						50.9224
  					],
  					[
  						23.7724,
  						50.9238
  					],
  					[
  						23.7861,
  						50.9324
  					],
  					[
  						23.8379,
  						50.9419
  					],
  					[
  						23.8876,
  						50.9339
  					],
  					[
  						23.8754,
  						50.9732
  					],
  					[
  						23.9276,
  						50.9749
  					],
  					[
  						23.937,
  						51.0034
  					],
  					[
  						23.9667,
  						50.9791
  					],
  					[
  						23.9697,
  						50.9509
  					],
  					[
  						23.9988,
  						50.9274
  					],
  					[
  						24.0589,
  						50.8922
  					],
  					[
  						24.0869,
  						50.8888
  					],
  					[
  						24.1433,
  						50.8582
  					],
  					[
  						24.0968,
  						50.8365
  					],
  					[
  						24.0449,
  						50.8337
  					],
  					[
  						24.0246,
  						50.8407
  					],
  					[
  						23.9896,
  						50.8375
  					],
  					[
  						23.9638,
  						50.8144
  					],
  					[
  						23.9575,
  						50.7941
  					],
  					[
  						23.9683,
  						50.7763
  					],
  					[
  						24.0096,
  						50.772
  					],
  					[
  						24.0205,
  						50.747
  					],
  					[
  						24.0184,
  						50.7251
  					],
  					[
  						24.0461,
  						50.7171
  					],
  					[
  						24.072,
  						50.7206
  					],
  					[
  						24.0629,
  						50.6836
  					],
  					[
  						24.0867,
  						50.6691
  					],
  					[
  						24.0987,
  						50.5995
  					],
  					[
  						24.0913,
  						50.562
  					],
  					[
  						24.0701,
  						50.5034
  					],
  					[
  						24.0345,
  						50.4448
  					],
  					[
  						24.0058,
  						50.4354
  					],
  					[
  						23.9975,
  						50.4121
  					],
  					[
  						23.9747,
  						50.4129
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 124,
  			name: "powiat kraśnicki",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.1675,
  						51.0442
  					],
  					[
  						22.1776,
  						51.0355
  					],
  					[
  						22.2691,
  						51.0315
  					],
  					[
  						22.3666,
  						51.043
  					],
  					[
  						22.3761,
  						51.0373
  					],
  					[
  						22.3872,
  						50.9992
  					],
  					[
  						22.4526,
  						50.9835
  					],
  					[
  						22.4467,
  						50.9721
  					],
  					[
  						22.479,
  						50.9488
  					],
  					[
  						22.454,
  						50.9168
  					],
  					[
  						22.4748,
  						50.9129
  					],
  					[
  						22.4681,
  						50.8873
  					],
  					[
  						22.4181,
  						50.8874
  					],
  					[
  						22.3991,
  						50.8344
  					],
  					[
  						22.3598,
  						50.8093
  					],
  					[
  						22.3305,
  						50.7979
  					],
  					[
  						22.2752,
  						50.8143
  					],
  					[
  						22.2798,
  						50.8244
  					],
  					[
  						22.2481,
  						50.8422
  					],
  					[
  						22.163,
  						50.7973
  					],
  					[
  						22.0521,
  						50.8205
  					],
  					[
  						21.9944,
  						50.7832
  					],
  					[
  						21.9724,
  						50.7878
  					],
  					[
  						21.9502,
  						50.7716
  					],
  					[
  						21.8954,
  						50.7797
  					],
  					[
  						21.8643,
  						50.8027
  					],
  					[
  						21.8665,
  						50.8221
  					],
  					[
  						21.8416,
  						50.8443
  					],
  					[
  						21.8474,
  						50.8617
  					],
  					[
  						21.8358,
  						50.8783
  					],
  					[
  						21.8307,
  						50.905
  					],
  					[
  						21.8129,
  						50.9345
  					],
  					[
  						21.8172,
  						50.974
  					],
  					[
  						21.8406,
  						50.9819
  					],
  					[
  						21.8752,
  						50.979
  					],
  					[
  						21.9298,
  						50.9595
  					],
  					[
  						21.9607,
  						50.9627
  					],
  					[
  						21.9978,
  						50.9919
  					],
  					[
  						22.0349,
  						50.9875
  					],
  					[
  						22.0199,
  						51.0214
  					],
  					[
  						22.0312,
  						51.0517
  					],
  					[
  						22.0531,
  						51.0593
  					],
  					[
  						22.0826,
  						51.0472
  					],
  					[
  						22.1388,
  						51.0505
  					],
  					[
  						22.1675,
  						51.0442
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 125,
  			name: "powiat łączyński",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.9812,
  						51.4239
  					],
  					[
  						23.0039,
  						51.4175
  					],
  					[
  						23.0198,
  						51.4345
  					],
  					[
  						23.0636,
  						51.4215
  					],
  					[
  						23.0939,
  						51.3778
  					],
  					[
  						23.0915,
  						51.3671
  					],
  					[
  						23.1396,
  						51.3662
  					],
  					[
  						23.1952,
  						51.358
  					],
  					[
  						23.2167,
  						51.349
  					],
  					[
  						23.2341,
  						51.3281
  					],
  					[
  						23.2692,
  						51.3298
  					],
  					[
  						23.2339,
  						51.3138
  					],
  					[
  						23.2073,
  						51.2619
  					],
  					[
  						23.1632,
  						51.2596
  					],
  					[
  						23.1386,
  						51.2375
  					],
  					[
  						23.0918,
  						51.243
  					],
  					[
  						23.0711,
  						51.2219
  					],
  					[
  						23.0404,
  						51.2051
  					],
  					[
  						23.0409,
  						51.1836
  					],
  					[
  						22.9993,
  						51.1788
  					],
  					[
  						22.9756,
  						51.1958
  					],
  					[
  						22.923,
  						51.174
  					],
  					[
  						22.8758,
  						51.1807
  					],
  					[
  						22.8598,
  						51.215
  					],
  					[
  						22.8447,
  						51.2352
  					],
  					[
  						22.8582,
  						51.254
  					],
  					[
  						22.8454,
  						51.2707
  					],
  					[
  						22.8084,
  						51.2845
  					],
  					[
  						22.7699,
  						51.2781
  					],
  					[
  						22.7845,
  						51.3003
  					],
  					[
  						22.7056,
  						51.323
  					],
  					[
  						22.6765,
  						51.3467
  					],
  					[
  						22.6689,
  						51.3645
  					],
  					[
  						22.712,
  						51.3873
  					],
  					[
  						22.7418,
  						51.3877
  					],
  					[
  						22.7797,
  						51.4022
  					],
  					[
  						22.8297,
  						51.3884
  					],
  					[
  						22.8721,
  						51.3864
  					],
  					[
  						22.9365,
  						51.4077
  					],
  					[
  						22.9761,
  						51.3993
  					],
  					[
  						22.9812,
  						51.4239
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 126,
  			name: "powiat opolski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.8217,
  						51.2627
  					],
  					[
  						21.8601,
  						51.2747
  					],
  					[
  						21.866,
  						51.2944
  					],
  					[
  						21.8906,
  						51.3087
  					],
  					[
  						21.9372,
  						51.2712
  					],
  					[
  						21.9507,
  						51.2925
  					],
  					[
  						21.9799,
  						51.3008
  					],
  					[
  						22.0228,
  						51.2916
  					],
  					[
  						22.0392,
  						51.2802
  					],
  					[
  						22.0628,
  						51.2939
  					],
  					[
  						22.0883,
  						51.2782
  					],
  					[
  						22.1678,
  						51.2566
  					],
  					[
  						22.1294,
  						51.2277
  					],
  					[
  						22.1631,
  						51.2188
  					],
  					[
  						22.1665,
  						51.1891
  					],
  					[
  						22.1446,
  						51.1739
  					],
  					[
  						22.1196,
  						51.1712
  					],
  					[
  						22.125,
  						51.1519
  					],
  					[
  						22.182,
  						51.1545
  					],
  					[
  						22.1785,
  						51.1366
  					],
  					[
  						22.2208,
  						51.1272
  					],
  					[
  						22.2319,
  						51.1078
  					],
  					[
  						22.2217,
  						51.0877
  					],
  					[
  						22.2156,
  						51.0453
  					],
  					[
  						22.1675,
  						51.0442
  					],
  					[
  						22.1388,
  						51.0505
  					],
  					[
  						22.0826,
  						51.0472
  					],
  					[
  						22.0531,
  						51.0593
  					],
  					[
  						22.0312,
  						51.0517
  					],
  					[
  						22.0199,
  						51.0214
  					],
  					[
  						22.0349,
  						50.9875
  					],
  					[
  						21.9978,
  						50.9919
  					],
  					[
  						21.9607,
  						50.9627
  					],
  					[
  						21.9298,
  						50.9595
  					],
  					[
  						21.8752,
  						50.979
  					],
  					[
  						21.8406,
  						50.9819
  					],
  					[
  						21.8172,
  						50.974
  					],
  					[
  						21.8195,
  						51.0092
  					],
  					[
  						21.8033,
  						51.0219
  					],
  					[
  						21.8264,
  						51.047
  					],
  					[
  						21.803,
  						51.0721
  					],
  					[
  						21.7871,
  						51.1451
  					],
  					[
  						21.7886,
  						51.2017
  					],
  					[
  						21.8166,
  						51.2306
  					],
  					[
  						21.8082,
  						51.2543
  					],
  					[
  						21.8217,
  						51.2627
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 127,
  			name: "powiat rycki",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.1933,
  						51.6597
  					],
  					[
  						22.189,
  						51.644
  					],
  					[
  						22.2132,
  						51.6043
  					],
  					[
  						22.1878,
  						51.5844
  					],
  					[
  						22.1206,
  						51.5695
  					],
  					[
  						22.0607,
  						51.5735
  					],
  					[
  						22.0095,
  						51.5753
  					],
  					[
  						21.9504,
  						51.5355
  					],
  					[
  						21.9331,
  						51.5447
  					],
  					[
  						21.8871,
  						51.5304
  					],
  					[
  						21.8514,
  						51.5479
  					],
  					[
  						21.8331,
  						51.5484
  					],
  					[
  						21.8174,
  						51.5642
  					],
  					[
  						21.7824,
  						51.5686
  					],
  					[
  						21.7558,
  						51.5604
  					],
  					[
  						21.6961,
  						51.5701
  					],
  					[
  						21.6556,
  						51.5824
  					],
  					[
  						21.6484,
  						51.603
  					],
  					[
  						21.6155,
  						51.6176
  					],
  					[
  						21.6401,
  						51.6259
  					],
  					[
  						21.6362,
  						51.6543
  					],
  					[
  						21.6524,
  						51.6585
  					],
  					[
  						21.7138,
  						51.6351
  					],
  					[
  						21.7492,
  						51.612
  					],
  					[
  						21.76,
  						51.6404
  					],
  					[
  						21.8387,
  						51.6522
  					],
  					[
  						21.8558,
  						51.6772
  					],
  					[
  						21.88,
  						51.6936
  					],
  					[
  						21.8709,
  						51.7321
  					],
  					[
  						21.8357,
  						51.7438
  					],
  					[
  						21.8666,
  						51.7687
  					],
  					[
  						21.8973,
  						51.7688
  					],
  					[
  						21.9564,
  						51.7938
  					],
  					[
  						21.984,
  						51.7854
  					],
  					[
  						22.0644,
  						51.7802
  					],
  					[
  						22.0626,
  						51.7379
  					],
  					[
  						22.074,
  						51.7284
  					],
  					[
  						22.139,
  						51.7054
  					],
  					[
  						22.1624,
  						51.6849
  					],
  					[
  						22.1573,
  						51.6679
  					],
  					[
  						22.1933,
  						51.6597
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 128,
  			name: "powiat Zamość",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.3064,
  						50.7445
  					],
  					[
  						23.301,
  						50.7156
  					],
  					[
  						23.2778,
  						50.6959
  					],
  					[
  						23.2584,
  						50.6924
  					],
  					[
  						23.2205,
  						50.7027
  					],
  					[
  						23.2128,
  						50.724
  					],
  					[
  						23.2715,
  						50.7485
  					],
  					[
  						23.3064,
  						50.7445
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 129,
  			name: "powiat dąbrowski",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.1465,
  						50.3538
  					],
  					[
  						21.1657,
  						50.3423
  					],
  					[
  						21.2088,
  						50.3549
  					],
  					[
  						21.2225,
  						50.3109
  					],
  					[
  						21.194,
  						50.3042
  					],
  					[
  						21.1832,
  						50.2865
  					],
  					[
  						21.1481,
  						50.2553
  					],
  					[
  						21.1821,
  						50.2393
  					],
  					[
  						21.1422,
  						50.2377
  					],
  					[
  						21.1708,
  						50.207
  					],
  					[
  						21.1708,
  						50.1769
  					],
  					[
  						21.1533,
  						50.1492
  					],
  					[
  						21.1524,
  						50.1476
  					],
  					[
  						21.1318,
  						50.1358
  					],
  					[
  						21.1402,
  						50.115
  					],
  					[
  						21.0799,
  						50.1148
  					],
  					[
  						21.0604,
  						50.1068
  					],
  					[
  						21,
  						50.1168
  					],
  					[
  						20.9566,
  						50.1122
  					],
  					[
  						20.9487,
  						50.1481
  					],
  					[
  						20.9186,
  						50.1658
  					],
  					[
  						20.8811,
  						50.161
  					],
  					[
  						20.8645,
  						50.1683
  					],
  					[
  						20.8696,
  						50.1974
  					],
  					[
  						20.8507,
  						50.2147
  					],
  					[
  						20.8506,
  						50.2147
  					],
  					[
  						20.8507,
  						50.2147
  					],
  					[
  						20.8506,
  						50.2147
  					],
  					[
  						20.8311,
  						50.2232
  					],
  					[
  						20.7589,
  						50.2084
  					],
  					[
  						20.728,
  						50.2428
  					],
  					[
  						20.728,
  						50.2503
  					],
  					[
  						20.7747,
  						50.2777
  					],
  					[
  						20.8058,
  						50.2895
  					],
  					[
  						20.8276,
  						50.2751
  					],
  					[
  						20.8549,
  						50.2961
  					],
  					[
  						20.8929,
  						50.306
  					],
  					[
  						20.9319,
  						50.2981
  					],
  					[
  						20.9451,
  						50.3125
  					],
  					[
  						21.0617,
  						50.317
  					],
  					[
  						21.0831,
  						50.3364
  					],
  					[
  						21.113,
  						50.3384
  					],
  					[
  						21.1465,
  						50.3538
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 130,
  			name: "powiat krakowski",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "MultiPolygon",
  			coordinates: [
  				[
  					[
  						[
  							19.9245,
  							50.1113
  						],
  						[
  							19.8925,
  							50.1261
  						],
  						[
  							19.8515,
  							50.0944
  						],
  						[
  							19.8112,
  							50.0802
  						],
  						[
  							19.8213,
  							50.0577
  						],
  						[
  							19.7922,
  							50.0118
  						],
  						[
  							19.8009,
  							49.994
  						],
  						[
  							19.8495,
  							49.9947
  						],
  						[
  							19.8633,
  							49.9748
  						],
  						[
  							19.8822,
  							49.975
  						],
  						[
  							19.8823,
  							49.975
  						],
  						[
  							19.8822,
  							49.975
  						],
  						[
  							19.8823,
  							49.975
  						],
  						[
  							19.8874,
  							49.9796
  						],
  						[
  							19.8874,
  							49.9798
  						],
  						[
  							19.9257,
  							49.9813
  						],
  						[
  							19.9634,
  							49.9686
  						],
  						[
  							20.0013,
  							49.9311
  						],
  						[
  							19.9626,
  							49.9245
  						],
  						[
  							19.9334,
  							49.9122
  						],
  						[
  							19.9331,
  							49.9119
  						],
  						[
  							19.9336,
  							49.9101
  						],
  						[
  							19.9337,
  							49.909
  						],
  						[
  							19.9336,
  							49.9089
  						],
  						[
  							19.9335,
  							49.9088
  						],
  						[
  							19.9299,
  							49.9046
  						],
  						[
  							19.9298,
  							49.9046
  						],
  						[
  							19.9299,
  							49.9046
  						],
  						[
  							19.9038,
  							49.9013
  						],
  						[
  							19.9037,
  							49.9013
  						],
  						[
  							19.9038,
  							49.9013
  						],
  						[
  							19.9037,
  							49.9013
  						],
  						[
  							19.9016,
  							49.9021
  						],
  						[
  							19.9015,
  							49.9021
  						],
  						[
  							19.9016,
  							49.9021
  						],
  						[
  							19.9015,
  							49.9021
  						],
  						[
  							19.8996,
  							49.9039
  						],
  						[
  							19.8992,
  							49.9053
  						],
  						[
  							19.883,
  							49.9241
  						],
  						[
  							19.8482,
  							49.9225
  						],
  						[
  							19.8103,
  							49.8852
  						],
  						[
  							19.7727,
  							49.893
  						],
  						[
  							19.765,
  							49.9035
  						],
  						[
  							19.7324,
  							49.9177
  						],
  						[
  							19.7236,
  							49.9403
  						],
  						[
  							19.7209,
  							49.9446
  						],
  						[
  							19.6975,
  							49.9506
  						],
  						[
  							19.6576,
  							49.9569
  						],
  						[
  							19.6609,
  							49.976
  						],
  						[
  							19.6394,
  							49.9896
  						],
  						[
  							19.6106,
  							49.9814
  						],
  						[
  							19.5809,
  							49.9889
  						],
  						[
  							19.5603,
  							50.0121
  						],
  						[
  							19.6014,
  							50.0329
  						],
  						[
  							19.6282,
  							50.0339
  						],
  						[
  							19.61,
  							50.0486
  						],
  						[
  							19.6059,
  							50.0512
  						],
  						[
  							19.6052,
  							50.0575
  						],
  						[
  							19.6055,
  							50.0587
  						],
  						[
  							19.5779,
  							50.092
  						],
  						[
  							19.5392,
  							50.1117
  						],
  						[
  							19.5466,
  							50.1847
  						],
  						[
  							19.5253,
  							50.2007
  						],
  						[
  							19.5887,
  							50.1981
  						],
  						[
  							19.5954,
  							50.1895
  						],
  						[
  							19.6481,
  							50.2
  						],
  						[
  							19.6845,
  							50.2551
  						],
  						[
  							19.6729,
  							50.2967
  						],
  						[
  							19.7041,
  							50.2996
  						],
  						[
  							19.7455,
  							50.2885
  						],
  						[
  							19.7746,
  							50.2714
  						],
  						[
  							19.8342,
  							50.2635
  						],
  						[
  							19.9014,
  							50.2761
  						],
  						[
  							19.9513,
  							50.2828
  						],
  						[
  							19.9957,
  							50.2827
  						],
  						[
  							20.0469,
  							50.2983
  						],
  						[
  							20.0742,
  							50.2942
  						],
  						[
  							20.1216,
  							50.3056
  						],
  						[
  							20.1769,
  							50.2902
  						],
  						[
  							20.1727,
  							50.2756
  						],
  						[
  							20.138,
  							50.2705
  						],
  						[
  							20.135,
  							50.2419
  						],
  						[
  							20.1634,
  							50.2284
  						],
  						[
  							20.1557,
  							50.2042
  						],
  						[
  							20.1749,
  							50.1868
  						],
  						[
  							20.1762,
  							50.1498
  						],
  						[
  							20.2045,
  							50.1297
  						],
  						[
  							20.2013,
  							50.1204
  						],
  						[
  							20.16,
  							50.1215
  						],
  						[
  							20.1431,
  							50.1065
  						],
  						[
  							20.0962,
  							50.1193
  						],
  						[
  							20.079,
  							50.1124
  						],
  						[
  							20.0386,
  							50.1132
  						],
  						[
  							20.0275,
  							50.1044
  						],
  						[
  							19.9245,
  							50.1113
  						]
  					]
  				],
  				[
  					[
  						[
  							20.2091,
  							50.1156
  						],
  						[
  							20.2346,
  							50.111
  						],
  						[
  							20.2774,
  							50.1306
  						],
  						[
  							20.2844,
  							50.1593
  						],
  						[
  							20.3292,
  							50.1444
  						],
  						[
  							20.3218,
  							50.1223
  						],
  						[
  							20.3538,
  							50.1171
  						],
  						[
  							20.3483,
  							50.0999
  						],
  						[
  							20.3396,
  							50.0919
  						],
  						[
  							20.2993,
  							50.0979
  						],
  						[
  							20.2887,
  							50.0837
  						],
  						[
  							20.2342,
  							50.0678
  						],
  						[
  							20.2173,
  							50.0534
  						],
  						[
  							20.193,
  							50.0705
  						],
  						[
  							20.1916,
  							50.0974
  						],
  						[
  							20.2091,
  							50.1156
  						]
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 131,
  			name: "powiat wieruszowski",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.5612,
  						51.3836
  					],
  					[
  						18.5376,
  						51.3732
  					],
  					[
  						18.5478,
  						51.3404
  					],
  					[
  						18.4982,
  						51.3278
  					],
  					[
  						18.5028,
  						51.2997
  					],
  					[
  						18.4755,
  						51.3035
  					],
  					[
  						18.4605,
  						51.3251
  					],
  					[
  						18.4053,
  						51.3162
  					],
  					[
  						18.4015,
  						51.2773
  					],
  					[
  						18.3698,
  						51.2641
  					],
  					[
  						18.3658,
  						51.2173
  					],
  					[
  						18.3475,
  						51.1864
  					],
  					[
  						18.3497,
  						51.1372
  					],
  					[
  						18.315,
  						51.134
  					],
  					[
  						18.2596,
  						51.1576
  					],
  					[
  						18.1869,
  						51.1571
  					],
  					[
  						18.1637,
  						51.1725
  					],
  					[
  						18.1652,
  						51.2123
  					],
  					[
  						18.1786,
  						51.2203
  					],
  					[
  						18.1796,
  						51.2222
  					],
  					[
  						18.1533,
  						51.264
  					],
  					[
  						18.1031,
  						51.2804
  					],
  					[
  						18.1128,
  						51.3108
  					],
  					[
  						18.0925,
  						51.3257
  					],
  					[
  						18.0988,
  						51.362
  					],
  					[
  						18.1351,
  						51.3608
  					],
  					[
  						18.1493,
  						51.3914
  					],
  					[
  						18.1897,
  						51.3865
  					],
  					[
  						18.2062,
  						51.401
  					],
  					[
  						18.2113,
  						51.423
  					],
  					[
  						18.1882,
  						51.4412
  					],
  					[
  						18.2279,
  						51.4519
  					],
  					[
  						18.2553,
  						51.4388
  					],
  					[
  						18.3263,
  						51.4198
  					],
  					[
  						18.3293,
  						51.3919
  					],
  					[
  						18.3436,
  						51.3884
  					],
  					[
  						18.4642,
  						51.3994
  					],
  					[
  						18.5025,
  						51.3961
  					],
  					[
  						18.5215,
  						51.3846
  					],
  					[
  						18.5612,
  						51.3836
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 132,
  			name: "powiat żarski",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.1064,
  						51.8628
  					],
  					[
  						15.0774,
  						51.839
  					],
  					[
  						15.1532,
  						51.8465
  					],
  					[
  						15.1703,
  						51.8071
  					],
  					[
  						15.1433,
  						51.8043
  					],
  					[
  						15.1521,
  						51.7841
  					],
  					[
  						15.1235,
  						51.7788
  					],
  					[
  						15.1359,
  						51.7581
  					],
  					[
  						15.1789,
  						51.7572
  					],
  					[
  						15.1974,
  						51.7842
  					],
  					[
  						15.2157,
  						51.7818
  					],
  					[
  						15.233,
  						51.7406
  					],
  					[
  						15.2439,
  						51.7135
  					],
  					[
  						15.2357,
  						51.698
  					],
  					[
  						15.2521,
  						51.6748
  					],
  					[
  						15.2702,
  						51.6688
  					],
  					[
  						15.2543,
  						51.6041
  					],
  					[
  						15.2359,
  						51.5906
  					],
  					[
  						15.1659,
  						51.5806
  					],
  					[
  						15.1805,
  						51.5607
  					],
  					[
  						15.1701,
  						51.5499
  					],
  					[
  						15.1112,
  						51.5455
  					],
  					[
  						15.0622,
  						51.5617
  					],
  					[
  						15.0513,
  						51.5469
  					],
  					[
  						15.0173,
  						51.5412
  					],
  					[
  						15.024,
  						51.5169
  					],
  					[
  						14.9929,
  						51.4827
  					],
  					[
  						15.0487,
  						51.4819
  					],
  					[
  						15.0473,
  						51.4364
  					],
  					[
  						15.0862,
  						51.4255
  					],
  					[
  						15.0712,
  						51.397
  					],
  					[
  						15.0179,
  						51.3935
  					],
  					[
  						15.0089,
  						51.3644
  					],
  					[
  						14.9742,
  						51.364
  					],
  					[
  						14.9589,
  						51.4109
  					],
  					[
  						14.9742,
  						51.4419
  					],
  					[
  						14.947,
  						51.4721
  					],
  					[
  						14.9224,
  						51.4823
  					],
  					[
  						14.8528,
  						51.4893
  					],
  					[
  						14.7967,
  						51.5176
  					],
  					[
  						14.7665,
  						51.5189
  					],
  					[
  						14.7291,
  						51.5314
  					],
  					[
  						14.7289,
  						51.5504
  					],
  					[
  						14.7112,
  						51.5627
  					],
  					[
  						14.7304,
  						51.5841
  					],
  					[
  						14.7651,
  						51.6078
  					],
  					[
  						14.7541,
  						51.6268
  					],
  					[
  						14.7577,
  						51.6602
  					],
  					[
  						14.7468,
  						51.6762
  					],
  					[
  						14.6681,
  						51.7258
  					],
  					[
  						14.6499,
  						51.7865
  					],
  					[
  						14.6745,
  						51.7861
  					],
  					[
  						14.693,
  						51.8105
  					],
  					[
  						14.7309,
  						51.8156
  					],
  					[
  						14.7623,
  						51.8579
  					],
  					[
  						14.7984,
  						51.8478
  					],
  					[
  						14.8584,
  						51.8497
  					],
  					[
  						14.8488,
  						51.8756
  					],
  					[
  						14.8821,
  						51.8716
  					],
  					[
  						14.9272,
  						51.8789
  					],
  					[
  						14.9499,
  						51.889
  					],
  					[
  						14.9942,
  						51.8831
  					],
  					[
  						15.0151,
  						51.888
  					],
  					[
  						15.1064,
  						51.8628
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 133,
  			name: "powiat krośnieński",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						14.6499,
  						51.7865
  					],
  					[
  						14.6431,
  						51.7968
  					],
  					[
  						14.6049,
  						51.805
  					],
  					[
  						14.5905,
  						51.8387
  					],
  					[
  						14.6124,
  						51.8576
  					],
  					[
  						14.6526,
  						51.8744
  					],
  					[
  						14.6913,
  						51.9081
  					],
  					[
  						14.7188,
  						51.9413
  					],
  					[
  						14.707,
  						51.9796
  					],
  					[
  						14.714,
  						52.0037
  					],
  					[
  						14.7416,
  						52.0242
  					],
  					[
  						14.7552,
  						52.07
  					],
  					[
  						14.8049,
  						52.0947
  					],
  					[
  						14.8108,
  						52.1383
  					],
  					[
  						14.8592,
  						52.1466
  					],
  					[
  						14.885,
  						52.1647
  					],
  					[
  						14.8889,
  						52.2065
  					],
  					[
  						14.9133,
  						52.2099
  					],
  					[
  						14.9636,
  						52.2093
  					],
  					[
  						15.009,
  						52.2152
  					],
  					[
  						15.0703,
  						52.2324
  					],
  					[
  						15.0913,
  						52.2261
  					],
  					[
  						15.101,
  						52.205
  					],
  					[
  						15.1978,
  						52.2188
  					],
  					[
  						15.2208,
  						52.1946
  					],
  					[
  						15.2884,
  						52.214
  					],
  					[
  						15.304,
  						52.1903
  					],
  					[
  						15.2928,
  						52.1432
  					],
  					[
  						15.306,
  						52.1313
  					],
  					[
  						15.286,
  						52.1053
  					],
  					[
  						15.289,
  						52.089
  					],
  					[
  						15.2566,
  						52.0848
  					],
  					[
  						15.2781,
  						52.0216
  					],
  					[
  						15.2648,
  						52.016
  					],
  					[
  						15.2933,
  						51.9621
  					],
  					[
  						15.2692,
  						51.9315
  					],
  					[
  						15.2502,
  						51.9334
  					],
  					[
  						15.2324,
  						51.8991
  					],
  					[
  						15.2111,
  						51.9006
  					],
  					[
  						15.1064,
  						51.8628
  					],
  					[
  						15.0151,
  						51.888
  					],
  					[
  						14.9942,
  						51.8831
  					],
  					[
  						14.9499,
  						51.889
  					],
  					[
  						14.9272,
  						51.8789
  					],
  					[
  						14.8821,
  						51.8716
  					],
  					[
  						14.8488,
  						51.8756
  					],
  					[
  						14.8584,
  						51.8497
  					],
  					[
  						14.7984,
  						51.8478
  					],
  					[
  						14.7623,
  						51.8579
  					],
  					[
  						14.7309,
  						51.8156
  					],
  					[
  						14.693,
  						51.8105
  					],
  					[
  						14.6745,
  						51.7861
  					],
  					[
  						14.6499,
  						51.7865
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 134,
  			name: "powiat dębicki",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.5112,
  						50.1615
  					],
  					[
  						21.5673,
  						50.1299
  					],
  					[
  						21.5462,
  						50.109
  					],
  					[
  						21.5411,
  						50.0891
  					],
  					[
  						21.5018,
  						50.0768
  					],
  					[
  						21.4978,
  						50.05
  					],
  					[
  						21.526,
  						50.0387
  					],
  					[
  						21.5297,
  						50.0254
  					],
  					[
  						21.5171,
  						50.0253
  					],
  					[
  						21.515,
  						50.0226
  					],
  					[
  						21.4642,
  						49.9924
  					],
  					[
  						21.4679,
  						49.9673
  					],
  					[
  						21.4982,
  						49.9469
  					],
  					[
  						21.5093,
  						49.9097
  					],
  					[
  						21.5235,
  						49.8929
  					],
  					[
  						21.5017,
  						49.8804
  					],
  					[
  						21.4876,
  						49.8792
  					],
  					[
  						21.4774,
  						49.8405
  					],
  					[
  						21.4432,
  						49.8343
  					],
  					[
  						21.4433,
  						49.8343
  					],
  					[
  						21.4432,
  						49.8343
  					],
  					[
  						21.4433,
  						49.8343
  					],
  					[
  						21.4457,
  						49.8324
  					],
  					[
  						21.407,
  						49.8286
  					],
  					[
  						21.3786,
  						49.8667
  					],
  					[
  						21.3455,
  						49.8683
  					],
  					[
  						21.3497,
  						49.8375
  					],
  					[
  						21.2971,
  						49.8429
  					],
  					[
  						21.2573,
  						49.8413
  					],
  					[
  						21.2343,
  						49.8501
  					],
  					[
  						21.2254,
  						49.8841
  					],
  					[
  						21.2796,
  						49.892
  					],
  					[
  						21.2847,
  						49.9241
  					],
  					[
  						21.248,
  						49.9304
  					],
  					[
  						21.1791,
  						49.9287
  					],
  					[
  						21.1507,
  						49.9761
  					],
  					[
  						21.1544,
  						50.0034
  					],
  					[
  						21.1788,
  						50.0118
  					],
  					[
  						21.1929,
  						50.0293
  					],
  					[
  						21.1515,
  						50.0453
  					],
  					[
  						21.1798,
  						50.0787
  					],
  					[
  						21.1846,
  						50.1003
  					],
  					[
  						21.1485,
  						50.1264
  					],
  					[
  						21.1524,
  						50.1476
  					],
  					[
  						21.1533,
  						50.1492
  					],
  					[
  						21.2213,
  						50.1339
  					],
  					[
  						21.3022,
  						50.1313
  					],
  					[
  						21.3093,
  						50.1476
  					],
  					[
  						21.3652,
  						50.1536
  					],
  					[
  						21.3687,
  						50.1675
  					],
  					[
  						21.4805,
  						50.1686
  					],
  					[
  						21.5112,
  						50.1615
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 135,
  			name: "powiat namysłowski",
  			province: "Opolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.7953,
  						51.1941
  					],
  					[
  						17.8422,
  						51.1889
  					],
  					[
  						17.8512,
  						51.1724
  					],
  					[
  						17.8329,
  						51.143
  					],
  					[
  						17.8122,
  						51.1349
  					],
  					[
  						17.8234,
  						51.118
  					],
  					[
  						17.8648,
  						51.1138
  					],
  					[
  						17.8854,
  						51.1037
  					],
  					[
  						17.9173,
  						51.1127
  					],
  					[
  						17.9395,
  						51.1089
  					],
  					[
  						17.9349,
  						51.0939
  					],
  					[
  						17.9511,
  						51.055
  					],
  					[
  						17.9358,
  						51.0479
  					],
  					[
  						17.9242,
  						51.0125
  					],
  					[
  						17.9379,
  						50.9807
  					],
  					[
  						17.9886,
  						50.9849
  					],
  					[
  						18.0117,
  						50.9636
  					],
  					[
  						17.9713,
  						50.9682
  					],
  					[
  						17.9494,
  						50.9053
  					],
  					[
  						17.9051,
  						50.9101
  					],
  					[
  						17.89,
  						50.8612
  					],
  					[
  						17.9044,
  						50.8394
  					],
  					[
  						17.8722,
  						50.8405
  					],
  					[
  						17.8501,
  						50.8618
  					],
  					[
  						17.8099,
  						50.8693
  					],
  					[
  						17.8032,
  						50.8956
  					],
  					[
  						17.7327,
  						50.907
  					],
  					[
  						17.692,
  						50.919
  					],
  					[
  						17.6542,
  						50.9632
  					],
  					[
  						17.6659,
  						50.9745
  					],
  					[
  						17.6089,
  						50.9829
  					],
  					[
  						17.5682,
  						50.977
  					],
  					[
  						17.5437,
  						50.9998
  					],
  					[
  						17.5143,
  						51.0116
  					],
  					[
  						17.5335,
  						51.043
  					],
  					[
  						17.5184,
  						51.0515
  					],
  					[
  						17.5366,
  						51.0693
  					],
  					[
  						17.5582,
  						51.0678
  					],
  					[
  						17.5821,
  						51.0818
  					],
  					[
  						17.5624,
  						51.0926
  					],
  					[
  						17.5782,
  						51.1108
  					],
  					[
  						17.5764,
  						51.1294
  					],
  					[
  						17.5455,
  						51.1436
  					],
  					[
  						17.5447,
  						51.1545
  					],
  					[
  						17.6206,
  						51.1754
  					],
  					[
  						17.6693,
  						51.1608
  					],
  					[
  						17.7538,
  						51.1868
  					],
  					[
  						17.7953,
  						51.1941
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 136,
  			name: "powiat czarnkowsko-trzcianecki",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.3905,
  						53.131
  					],
  					[
  						16.4954,
  						53.1148
  					],
  					[
  						16.5106,
  						53.1268
  					],
  					[
  						16.5804,
  						53.1213
  					],
  					[
  						16.6102,
  						53.1068
  					],
  					[
  						16.6952,
  						53.1299
  					],
  					[
  						16.7113,
  						53.1144
  					],
  					[
  						16.6918,
  						53.0905
  					],
  					[
  						16.6748,
  						53.0943
  					],
  					[
  						16.6587,
  						53.0631
  					],
  					[
  						16.6254,
  						53.0444
  					],
  					[
  						16.6502,
  						53.0226
  					],
  					[
  						16.6495,
  						52.9914
  					],
  					[
  						16.6325,
  						52.9893
  					],
  					[
  						16.6486,
  						52.9569
  					],
  					[
  						16.7005,
  						52.9525
  					],
  					[
  						16.7067,
  						52.9687
  					],
  					[
  						16.7378,
  						52.9799
  					],
  					[
  						16.7749,
  						52.9316
  					],
  					[
  						16.7714,
  						52.897
  					],
  					[
  						16.7802,
  						52.8888
  					],
  					[
  						16.7606,
  						52.8657
  					],
  					[
  						16.7286,
  						52.8522
  					],
  					[
  						16.7253,
  						52.8339
  					],
  					[
  						16.7982,
  						52.7951
  					],
  					[
  						16.7324,
  						52.7495
  					],
  					[
  						16.7111,
  						52.7263
  					],
  					[
  						16.7044,
  						52.7497
  					],
  					[
  						16.6303,
  						52.751
  					],
  					[
  						16.5833,
  						52.7431
  					],
  					[
  						16.5582,
  						52.7388
  					],
  					[
  						16.5172,
  						52.7596
  					],
  					[
  						16.4318,
  						52.7502
  					],
  					[
  						16.4394,
  						52.7661
  					],
  					[
  						16.3583,
  						52.7756
  					],
  					[
  						16.3367,
  						52.7607
  					],
  					[
  						16.3128,
  						52.7764
  					],
  					[
  						16.2858,
  						52.7659
  					],
  					[
  						16.2419,
  						52.7932
  					],
  					[
  						16.185,
  						52.7941
  					],
  					[
  						16.1391,
  						52.7855
  					],
  					[
  						16.0664,
  						52.7489
  					],
  					[
  						16.0616,
  						52.7285
  					],
  					[
  						16.0138,
  						52.7347
  					],
  					[
  						15.9814,
  						52.7504
  					],
  					[
  						15.9469,
  						52.7549
  					],
  					[
  						15.9423,
  						52.7591
  					],
  					[
  						15.9262,
  						52.784
  					],
  					[
  						15.9346,
  						52.8014
  					],
  					[
  						15.8932,
  						52.8128
  					],
  					[
  						15.9741,
  						52.859
  					],
  					[
  						15.978,
  						52.9099
  					],
  					[
  						15.9798,
  						52.9337
  					],
  					[
  						15.9605,
  						52.9561
  					],
  					[
  						15.9537,
  						53.0016
  					],
  					[
  						15.9625,
  						53.0414
  					],
  					[
  						16.0231,
  						53.0356
  					],
  					[
  						16.0835,
  						53.0145
  					],
  					[
  						16.1378,
  						53.0137
  					],
  					[
  						16.1861,
  						53.0336
  					],
  					[
  						16.2709,
  						53.0492
  					],
  					[
  						16.3169,
  						53.0367
  					],
  					[
  						16.3642,
  						53.0822
  					],
  					[
  						16.346,
  						53.1124
  					],
  					[
  						16.3905,
  						53.131
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 137,
  			name: "powiat Płock",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.6955,
  						52.4737
  					],
  					[
  						19.6378,
  						52.5027
  					],
  					[
  						19.6477,
  						52.5299
  					],
  					[
  						19.6674,
  						52.5428
  					],
  					[
  						19.6313,
  						52.5531
  					],
  					[
  						19.6467,
  						52.5703
  					],
  					[
  						19.6507,
  						52.5971
  					],
  					[
  						19.6948,
  						52.5963
  					],
  					[
  						19.7282,
  						52.5821
  					],
  					[
  						19.7406,
  						52.5528
  					],
  					[
  						19.7663,
  						52.5528
  					],
  					[
  						19.7777,
  						52.5132
  					],
  					[
  						19.7338,
  						52.5045
  					],
  					[
  						19.6955,
  						52.4737
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 138,
  			name: "powiat grajewski",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.6968,
  						53.7616
  					],
  					[
  						22.7324,
  						53.7515
  					],
  					[
  						22.7442,
  						53.7295
  					],
  					[
  						22.7249,
  						53.7109
  					],
  					[
  						22.7286,
  						53.6986
  					],
  					[
  						22.7871,
  						53.6813
  					],
  					[
  						22.8442,
  						53.6866
  					],
  					[
  						22.7766,
  						53.6673
  					],
  					[
  						22.7812,
  						53.653
  					],
  					[
  						22.7452,
  						53.632
  					],
  					[
  						22.7113,
  						53.6265
  					],
  					[
  						22.6701,
  						53.6045
  					],
  					[
  						22.6737,
  						53.5952
  					],
  					[
  						22.7273,
  						53.5786
  					],
  					[
  						22.6988,
  						53.5685
  					],
  					[
  						22.6347,
  						53.5293
  					],
  					[
  						22.6446,
  						53.5207
  					],
  					[
  						22.6079,
  						53.4875
  					],
  					[
  						22.6116,
  						53.4649
  					],
  					[
  						22.5752,
  						53.454
  					],
  					[
  						22.5685,
  						53.4412
  					],
  					[
  						22.5372,
  						53.4308
  					],
  					[
  						22.5437,
  						53.4044
  					],
  					[
  						22.5233,
  						53.3805
  					],
  					[
  						22.5085,
  						53.366
  					],
  					[
  						22.4976,
  						53.3486
  					],
  					[
  						22.4056,
  						53.3514
  					],
  					[
  						22.4054,
  						53.3652
  					],
  					[
  						22.3611,
  						53.3714
  					],
  					[
  						22.3634,
  						53.3918
  					],
  					[
  						22.3257,
  						53.4085
  					],
  					[
  						22.2964,
  						53.4008
  					],
  					[
  						22.2794,
  						53.4378
  					],
  					[
  						22.2309,
  						53.4408
  					],
  					[
  						22.2542,
  						53.4738
  					],
  					[
  						22.262,
  						53.4754
  					],
  					[
  						22.262,
  						53.4757
  					],
  					[
  						22.2434,
  						53.4936
  					],
  					[
  						22.2646,
  						53.5013
  					],
  					[
  						22.2646,
  						53.5014
  					],
  					[
  						22.2646,
  						53.5013
  					],
  					[
  						22.2646,
  						53.5014
  					],
  					[
  						22.2668,
  						53.5029
  					],
  					[
  						22.2669,
  						53.5029
  					],
  					[
  						22.2668,
  						53.5029
  					],
  					[
  						22.2669,
  						53.5029
  					],
  					[
  						22.2664,
  						53.5047
  					],
  					[
  						22.2661,
  						53.5058
  					],
  					[
  						22.2662,
  						53.506
  					],
  					[
  						22.2659,
  						53.5064
  					],
  					[
  						22.2659,
  						53.5065
  					],
  					[
  						22.2658,
  						53.5065
  					],
  					[
  						22.2659,
  						53.5065
  					],
  					[
  						22.2658,
  						53.5066
  					],
  					[
  						22.2658,
  						53.5065
  					],
  					[
  						22.2658,
  						53.5066
  					],
  					[
  						22.2406,
  						53.5357
  					],
  					[
  						22.1855,
  						53.51
  					],
  					[
  						22.1702,
  						53.5355
  					],
  					[
  						22.1357,
  						53.5445
  					],
  					[
  						22.1943,
  						53.5662
  					],
  					[
  						22.2391,
  						53.5961
  					],
  					[
  						22.3056,
  						53.6268
  					],
  					[
  						22.3532,
  						53.6519
  					],
  					[
  						22.4007,
  						53.6671
  					],
  					[
  						22.423,
  						53.6815
  					],
  					[
  						22.4685,
  						53.6675
  					],
  					[
  						22.4654,
  						53.6901
  					],
  					[
  						22.5142,
  						53.6992
  					],
  					[
  						22.5848,
  						53.7269
  					],
  					[
  						22.6108,
  						53.7192
  					],
  					[
  						22.6261,
  						53.7422
  					],
  					[
  						22.6968,
  						53.7616
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 139,
  			name: "powiat starachowicki",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.9132,
  						51.0318
  					],
  					[
  						20.9028,
  						51.0826
  					],
  					[
  						20.9588,
  						51.0849
  					],
  					[
  						20.9759,
  						51.1322
  					],
  					[
  						20.9489,
  						51.1433
  					],
  					[
  						20.9837,
  						51.1665
  					],
  					[
  						20.9985,
  						51.1445
  					],
  					[
  						21.0566,
  						51.1571
  					],
  					[
  						21.0696,
  						51.174
  					],
  					[
  						21.0684,
  						51.2069
  					],
  					[
  						21.1106,
  						51.2008
  					],
  					[
  						21.1161,
  						51.1789
  					],
  					[
  						21.0912,
  						51.1551
  					],
  					[
  						21.154,
  						51.1255
  					],
  					[
  						21.1602,
  						51.1022
  					],
  					[
  						21.1528,
  						51.0803
  					],
  					[
  						21.3111,
  						51.0842
  					],
  					[
  						21.3555,
  						51.0853
  					],
  					[
  						21.3542,
  						51.0662
  					],
  					[
  						21.3831,
  						51.0583
  					],
  					[
  						21.3825,
  						51.0405
  					],
  					[
  						21.3255,
  						51.0361
  					],
  					[
  						21.2914,
  						51.0072
  					],
  					[
  						21.2854,
  						50.9876
  					],
  					[
  						21.2496,
  						50.9903
  					],
  					[
  						21.2212,
  						51.0021
  					],
  					[
  						21.1992,
  						50.9877
  					],
  					[
  						21.2007,
  						50.9466
  					],
  					[
  						21.1638,
  						50.9366
  					],
  					[
  						21.1671,
  						50.9166
  					],
  					[
  						21.1644,
  						50.9153
  					],
  					[
  						21.1581,
  						50.9079
  					],
  					[
  						21.1346,
  						50.9119
  					],
  					[
  						21.1236,
  						50.9096
  					],
  					[
  						21.0396,
  						50.9005
  					],
  					[
  						21.027,
  						50.8999
  					],
  					[
  						20.9944,
  						50.9204
  					],
  					[
  						21.004,
  						50.9525
  					],
  					[
  						21.0043,
  						50.9526
  					],
  					[
  						21.0044,
  						50.9526
  					],
  					[
  						21.0043,
  						50.9526
  					],
  					[
  						21.0044,
  						50.9526
  					],
  					[
  						21.0044,
  						50.9527
  					],
  					[
  						21.0084,
  						50.9521
  					],
  					[
  						21.0002,
  						50.9726
  					],
  					[
  						20.9701,
  						50.9921
  					],
  					[
  						20.9604,
  						51.013
  					],
  					[
  						20.9132,
  						51.0318
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 140,
  			name: "powiat konecki",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.2146,
  						51.2096
  					],
  					[
  						20.2516,
  						51.2068
  					],
  					[
  						20.256,
  						51.2367
  					],
  					[
  						20.2428,
  						51.2458
  					],
  					[
  						20.3101,
  						51.2431
  					],
  					[
  						20.3344,
  						51.2547
  					],
  					[
  						20.3797,
  						51.246
  					],
  					[
  						20.3904,
  						51.2722
  					],
  					[
  						20.365,
  						51.3075
  					],
  					[
  						20.3653,
  						51.3079
  					],
  					[
  						20.3644,
  						51.3084
  					],
  					[
  						20.3644,
  						51.3105
  					],
  					[
  						20.4144,
  						51.3207
  					],
  					[
  						20.4328,
  						51.3394
  					],
  					[
  						20.4639,
  						51.3317
  					],
  					[
  						20.5072,
  						51.3314
  					],
  					[
  						20.4926,
  						51.3073
  					],
  					[
  						20.5016,
  						51.2869
  					],
  					[
  						20.537,
  						51.2697
  					],
  					[
  						20.5248,
  						51.2604
  					],
  					[
  						20.546,
  						51.2304
  					],
  					[
  						20.579,
  						51.2447
  					],
  					[
  						20.6105,
  						51.2425
  					],
  					[
  						20.6106,
  						51.2425
  					],
  					[
  						20.6105,
  						51.2425
  					],
  					[
  						20.6216,
  						51.2301
  					],
  					[
  						20.7003,
  						51.196
  					],
  					[
  						20.6853,
  						51.1736
  					],
  					[
  						20.6855,
  						51.1512
  					],
  					[
  						20.6749,
  						51.1209
  					],
  					[
  						20.6546,
  						51.1009
  					],
  					[
  						20.6283,
  						51.0988
  					],
  					[
  						20.6049,
  						51.0785
  					],
  					[
  						20.6047,
  						51.0514
  					],
  					[
  						20.5161,
  						51.051
  					],
  					[
  						20.508,
  						51.0617
  					],
  					[
  						20.4518,
  						51.0526
  					],
  					[
  						20.4301,
  						51.0355
  					],
  					[
  						20.3848,
  						51.034
  					],
  					[
  						20.3477,
  						51.0086
  					],
  					[
  						20.278,
  						50.9921
  					],
  					[
  						20.2744,
  						51.0056
  					],
  					[
  						20.2413,
  						51.0104
  					],
  					[
  						20.1925,
  						50.9748
  					],
  					[
  						20.118,
  						50.9846
  					],
  					[
  						20.0579,
  						50.9808
  					],
  					[
  						20.0395,
  						50.9902
  					],
  					[
  						20.0509,
  						51.0264
  					],
  					[
  						20.0454,
  						51.0686
  					],
  					[
  						19.9818,
  						51.0731
  					],
  					[
  						19.9929,
  						51.1004
  					],
  					[
  						19.9927,
  						51.1341
  					],
  					[
  						20.0258,
  						51.1647
  					],
  					[
  						19.9938,
  						51.184
  					],
  					[
  						20.0258,
  						51.2004
  					],
  					[
  						20.1195,
  						51.1893
  					],
  					[
  						20.206,
  						51.2
  					],
  					[
  						20.2146,
  						51.2096
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 141,
  			name: "powiat elbląski",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.9791,
  						54.1338
  					],
  					[
  						19.996,
  						54.112
  					],
  					[
  						20.0371,
  						54.1076
  					],
  					[
  						20.0582,
  						54.0769
  					],
  					[
  						20.0479,
  						54.0644
  					],
  					[
  						20.0205,
  						54.033
  					],
  					[
  						19.9783,
  						54.0395
  					],
  					[
  						19.9651,
  						54.0211
  					],
  					[
  						19.9017,
  						54.0372
  					],
  					[
  						19.8746,
  						54.0158
  					],
  					[
  						19.8202,
  						54.0114
  					],
  					[
  						19.7986,
  						53.9919
  					],
  					[
  						19.8099,
  						53.9777
  					],
  					[
  						19.8091,
  						53.9779
  					],
  					[
  						19.8039,
  						53.9805
  					],
  					[
  						19.8022,
  						53.9808
  					],
  					[
  						19.7997,
  						53.983
  					],
  					[
  						19.7908,
  						53.9847
  					],
  					[
  						19.7264,
  						53.9639
  					],
  					[
  						19.7064,
  						53.9663
  					],
  					[
  						19.6804,
  						53.9413
  					],
  					[
  						19.6165,
  						53.962
  					],
  					[
  						19.576,
  						53.9483
  					],
  					[
  						19.4587,
  						53.9421
  					],
  					[
  						19.4168,
  						53.9263
  					],
  					[
  						19.3738,
  						53.9354
  					],
  					[
  						19.3658,
  						53.9608
  					],
  					[
  						19.3777,
  						53.985
  					],
  					[
  						19.3602,
  						54.0045
  					],
  					[
  						19.3201,
  						54.0271
  					],
  					[
  						19.268,
  						54.0251
  					],
  					[
  						19.2663,
  						54.051
  					],
  					[
  						19.2254,
  						54.0771
  					],
  					[
  						19.2555,
  						54.0857
  					],
  					[
  						19.2177,
  						54.1161
  					],
  					[
  						19.2576,
  						54.1508
  					],
  					[
  						19.247,
  						54.1672
  					],
  					[
  						19.2853,
  						54.1865
  					],
  					[
  						19.3202,
  						54.1914
  					],
  					[
  						19.3175,
  						54.2257
  					],
  					[
  						19.2878,
  						54.2552
  					],
  					[
  						19.2534,
  						54.2703
  					],
  					[
  						19.2908,
  						54.2992
  					],
  					[
  						19.415,
  						54.3201
  					],
  					[
  						19.6357,
  						54.3922
  					],
  					[
  						19.6246,
  						54.3403
  					],
  					[
  						19.6369,
  						54.3276
  					],
  					[
  						19.6191,
  						54.302
  					],
  					[
  						19.642,
  						54.2941
  					],
  					[
  						19.6488,
  						54.2768
  					],
  					[
  						19.68,
  						54.2648
  					],
  					[
  						19.7414,
  						54.2649
  					],
  					[
  						19.7814,
  						54.2457
  					],
  					[
  						19.7768,
  						54.21
  					],
  					[
  						19.784,
  						54.174
  					],
  					[
  						19.807,
  						54.158
  					],
  					[
  						19.7535,
  						54.1499
  					],
  					[
  						19.7346,
  						54.1227
  					],
  					[
  						19.7871,
  						54.1041
  					],
  					[
  						19.8319,
  						54.1069
  					],
  					[
  						19.8557,
  						54.1235
  					],
  					[
  						19.9142,
  						54.1229
  					],
  					[
  						19.9791,
  						54.1338
  					]
  				],
  				[
  					[
  						19.4719,
  						54.213
  					],
  					[
  						19.4742,
  						54.2167
  					],
  					[
  						19.4742,
  						54.217
  					],
  					[
  						19.4761,
  						54.2198
  					],
  					[
  						19.4769,
  						54.2199
  					],
  					[
  						19.4772,
  						54.222
  					],
  					[
  						19.5089,
  						54.2325
  					],
  					[
  						19.5051,
  						54.2487
  					],
  					[
  						19.4461,
  						54.2577
  					],
  					[
  						19.446,
  						54.2577
  					],
  					[
  						19.4461,
  						54.2577
  					],
  					[
  						19.446,
  						54.2577
  					],
  					[
  						19.4458,
  						54.258
  					],
  					[
  						19.4516,
  						54.2297
  					],
  					[
  						19.4334,
  						54.2162
  					],
  					[
  						19.3875,
  						54.2206
  					],
  					[
  						19.3743,
  						54.2067
  					],
  					[
  						19.3822,
  						54.1753
  					],
  					[
  						19.3591,
  						54.1635
  					],
  					[
  						19.3782,
  						54.1415
  					],
  					[
  						19.4436,
  						54.1366
  					],
  					[
  						19.4877,
  						54.1492
  					],
  					[
  						19.4624,
  						54.1612
  					],
  					[
  						19.5079,
  						54.1722
  					],
  					[
  						19.4983,
  						54.2032
  					],
  					[
  						19.4719,
  						54.213
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 142,
  			name: "powiat nidzicki",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.4111,
  						53.2142
  					],
  					[
  						20.388,
  						53.2379
  					],
  					[
  						20.338,
  						53.2229
  					],
  					[
  						20.2476,
  						53.2383
  					],
  					[
  						20.2429,
  						53.2544
  					],
  					[
  						20.2571,
  						53.2774
  					],
  					[
  						20.2301,
  						53.3061
  					],
  					[
  						20.1801,
  						53.3304
  					],
  					[
  						20.2011,
  						53.3952
  					],
  					[
  						20.2288,
  						53.412
  					],
  					[
  						20.1919,
  						53.4346
  					],
  					[
  						20.1869,
  						53.4584
  					],
  					[
  						20.2333,
  						53.4723
  					],
  					[
  						20.2601,
  						53.4648
  					],
  					[
  						20.3501,
  						53.4622
  					],
  					[
  						20.3728,
  						53.4697
  					],
  					[
  						20.3679,
  						53.4963
  					],
  					[
  						20.368,
  						53.4963
  					],
  					[
  						20.3679,
  						53.4963
  					],
  					[
  						20.4415,
  						53.4957
  					],
  					[
  						20.4667,
  						53.4876
  					],
  					[
  						20.4724,
  						53.5192
  					],
  					[
  						20.511,
  						53.5307
  					],
  					[
  						20.5575,
  						53.5216
  					],
  					[
  						20.5987,
  						53.5307
  					],
  					[
  						20.6168,
  						53.499
  					],
  					[
  						20.5947,
  						53.4867
  					],
  					[
  						20.6053,
  						53.468
  					],
  					[
  						20.632,
  						53.4523
  					],
  					[
  						20.6789,
  						53.462
  					],
  					[
  						20.6952,
  						53.4298
  					],
  					[
  						20.7122,
  						53.4152
  					],
  					[
  						20.7371,
  						53.4146
  					],
  					[
  						20.7684,
  						53.3894
  					],
  					[
  						20.7858,
  						53.3526
  					],
  					[
  						20.817,
  						53.334
  					],
  					[
  						20.7916,
  						53.3095
  					],
  					[
  						20.7517,
  						53.313
  					],
  					[
  						20.6933,
  						53.2921
  					],
  					[
  						20.676,
  						53.2695
  					],
  					[
  						20.6572,
  						53.2515
  					],
  					[
  						20.6119,
  						53.2523
  					],
  					[
  						20.6091,
  						53.239
  					],
  					[
  						20.5619,
  						53.2265
  					],
  					[
  						20.4754,
  						53.2341
  					],
  					[
  						20.4584,
  						53.2468
  					],
  					[
  						20.4111,
  						53.2142
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 143,
  			name: "powiat nowomiejski",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.904,
  						53.436
  					],
  					[
  						19.8606,
  						53.4292
  					],
  					[
  						19.8307,
  						53.3955
  					],
  					[
  						19.849,
  						53.3535
  					],
  					[
  						19.7945,
  						53.3524
  					],
  					[
  						19.7968,
  						53.3349
  					],
  					[
  						19.7569,
  						53.3212
  					],
  					[
  						19.7386,
  						53.3029
  					],
  					[
  						19.7181,
  						53.3021
  					],
  					[
  						19.6898,
  						53.3068
  					],
  					[
  						19.6901,
  						53.3363
  					],
  					[
  						19.6416,
  						53.3446
  					],
  					[
  						19.587,
  						53.3317
  					],
  					[
  						19.5201,
  						53.3304
  					],
  					[
  						19.526,
  						53.3521
  					],
  					[
  						19.5199,
  						53.3703
  					],
  					[
  						19.4852,
  						53.36
  					],
  					[
  						19.4326,
  						53.3638
  					],
  					[
  						19.3806,
  						53.4109
  					],
  					[
  						19.3295,
  						53.405
  					],
  					[
  						19.2912,
  						53.3892
  					],
  					[
  						19.2592,
  						53.3965
  					],
  					[
  						19.2445,
  						53.4109
  					],
  					[
  						19.2546,
  						53.4315
  					],
  					[
  						19.2243,
  						53.4566
  					],
  					[
  						19.2363,
  						53.4683
  					],
  					[
  						19.2256,
  						53.4888
  					],
  					[
  						19.1892,
  						53.5116
  					],
  					[
  						19.2188,
  						53.5243
  					],
  					[
  						19.2297,
  						53.5186
  					],
  					[
  						19.3139,
  						53.5448
  					],
  					[
  						19.3467,
  						53.5604
  					],
  					[
  						19.3762,
  						53.551
  					],
  					[
  						19.4115,
  						53.5694
  					],
  					[
  						19.4634,
  						53.563
  					],
  					[
  						19.4665,
  						53.5534
  					],
  					[
  						19.5716,
  						53.5228
  					],
  					[
  						19.611,
  						53.524
  					],
  					[
  						19.6075,
  						53.4933
  					],
  					[
  						19.6293,
  						53.4728
  					],
  					[
  						19.6699,
  						53.4549
  					],
  					[
  						19.6997,
  						53.467
  					],
  					[
  						19.715,
  						53.4443
  					],
  					[
  						19.7772,
  						53.4393
  					],
  					[
  						19.8288,
  						53.4555
  					],
  					[
  						19.853,
  						53.4357
  					],
  					[
  						19.8719,
  						53.4435
  					],
  					[
  						19.904,
  						53.436
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 144,
  			name: "powiat Ruda Śląska",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.7979,
  						50.2466
  					],
  					[
  						18.7969,
  						50.2463
  					],
  					[
  						18.7923,
  						50.2468
  					],
  					[
  						18.7994,
  						50.2739
  					],
  					[
  						18.8218,
  						50.2739
  					],
  					[
  						18.831,
  						50.3202
  					],
  					[
  						18.8623,
  						50.3281
  					],
  					[
  						18.896,
  						50.325
  					],
  					[
  						18.896,
  						50.3249
  					],
  					[
  						18.8835,
  						50.2949
  					],
  					[
  						18.9046,
  						50.2781
  					],
  					[
  						18.9144,
  						50.2739
  					],
  					[
  						18.9298,
  						50.2709
  					],
  					[
  						18.9336,
  						50.2542
  					],
  					[
  						18.9561,
  						50.2391
  					],
  					[
  						18.9454,
  						50.2319
  					],
  					[
  						18.9442,
  						50.2315
  					],
  					[
  						18.9438,
  						50.2317
  					],
  					[
  						18.9428,
  						50.2316
  					],
  					[
  						18.9427,
  						50.2316
  					],
  					[
  						18.9428,
  						50.2316
  					],
  					[
  						18.9427,
  						50.2316
  					],
  					[
  						18.9426,
  						50.2315
  					],
  					[
  						18.9425,
  						50.2315
  					],
  					[
  						18.9426,
  						50.2315
  					],
  					[
  						18.9425,
  						50.2315
  					],
  					[
  						18.9424,
  						50.2315
  					],
  					[
  						18.9389,
  						50.2312
  					],
  					[
  						18.9389,
  						50.2311
  					],
  					[
  						18.9389,
  						50.2312
  					],
  					[
  						18.9375,
  						50.2308
  					],
  					[
  						18.9374,
  						50.2308
  					],
  					[
  						18.9375,
  						50.2308
  					],
  					[
  						18.9374,
  						50.2308
  					],
  					[
  						18.9367,
  						50.2308
  					],
  					[
  						18.9336,
  						50.2302
  					],
  					[
  						18.9128,
  						50.2283
  					],
  					[
  						18.9078,
  						50.2289
  					],
  					[
  						18.902,
  						50.2317
  					],
  					[
  						18.8969,
  						50.2194
  					],
  					[
  						18.8688,
  						50.2084
  					],
  					[
  						18.8529,
  						50.2281
  					],
  					[
  						18.7979,
  						50.2466
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 145,
  			name: "powiat białogardzki",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.4443,
  						53.9185
  					],
  					[
  						16.4418,
  						53.9071
  					],
  					[
  						16.4405,
  						53.9042
  					],
  					[
  						16.3661,
  						53.9168
  					],
  					[
  						16.3397,
  						53.8987
  					],
  					[
  						16.3264,
  						53.877
  					],
  					[
  						16.2647,
  						53.8709
  					],
  					[
  						16.2551,
  						53.8429
  					],
  					[
  						16.216,
  						53.8399
  					],
  					[
  						16.2005,
  						53.8254
  					],
  					[
  						16.1663,
  						53.8093
  					],
  					[
  						16.1479,
  						53.8225
  					],
  					[
  						16.154,
  						53.8424
  					],
  					[
  						16.1406,
  						53.8786
  					],
  					[
  						16.0978,
  						53.8861
  					],
  					[
  						16.0687,
  						53.8984
  					],
  					[
  						16.0463,
  						53.8806
  					],
  					[
  						16.013,
  						53.9019
  					],
  					[
  						15.9615,
  						53.9156
  					],
  					[
  						15.9329,
  						53.9117
  					],
  					[
  						15.9128,
  						53.9215
  					],
  					[
  						15.8753,
  						53.9168
  					],
  					[
  						15.8387,
  						53.9014
  					],
  					[
  						15.7869,
  						53.8906
  					],
  					[
  						15.7822,
  						53.9154
  					],
  					[
  						15.8083,
  						53.9281
  					],
  					[
  						15.7559,
  						53.9434
  					],
  					[
  						15.7257,
  						53.964
  					],
  					[
  						15.7209,
  						53.9903
  					],
  					[
  						15.7534,
  						54.0111
  					],
  					[
  						15.7393,
  						54.0271
  					],
  					[
  						15.7485,
  						54.0768
  					],
  					[
  						15.792,
  						54.0675
  					],
  					[
  						15.8328,
  						54.0843
  					],
  					[
  						15.8805,
  						54.1347
  					],
  					[
  						15.8802,
  						54.1457
  					],
  					[
  						15.9171,
  						54.1391
  					],
  					[
  						15.9128,
  						54.126
  					],
  					[
  						15.9359,
  						54.1063
  					],
  					[
  						15.9095,
  						54.089
  					],
  					[
  						15.9105,
  						54.0766
  					],
  					[
  						16.0026,
  						54.0734
  					],
  					[
  						16.0426,
  						54.0924
  					],
  					[
  						16.0834,
  						54.1066
  					],
  					[
  						16.1224,
  						54.058
  					],
  					[
  						16.1688,
  						54.0436
  					],
  					[
  						16.2451,
  						54.022
  					],
  					[
  						16.3488,
  						54.012
  					],
  					[
  						16.3278,
  						53.9842
  					],
  					[
  						16.3692,
  						53.9855
  					],
  					[
  						16.4308,
  						53.9671
  					],
  					[
  						16.4438,
  						53.9494
  					],
  					[
  						16.4443,
  						53.9185
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 146,
  			name: "powiat tarnogórski",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.0791,
  						50.5079
  					],
  					[
  						19.1149,
  						50.5122
  					],
  					[
  						19.1336,
  						50.5225
  					],
  					[
  						19.1345,
  						50.5043
  					],
  					[
  						19.0887,
  						50.4571
  					],
  					[
  						19.0425,
  						50.4526
  					],
  					[
  						19.0238,
  						50.4488
  					],
  					[
  						19.0117,
  						50.4292
  					],
  					[
  						18.9887,
  						50.4308
  					],
  					[
  						18.9708,
  						50.4132
  					],
  					[
  						18.9283,
  						50.4208
  					],
  					[
  						18.9145,
  						50.3722
  					],
  					[
  						18.884,
  						50.3831
  					],
  					[
  						18.8945,
  						50.3973
  					],
  					[
  						18.8342,
  						50.4125
  					],
  					[
  						18.7886,
  						50.3925
  					],
  					[
  						18.8002,
  						50.3739
  					],
  					[
  						18.7466,
  						50.3679
  					],
  					[
  						18.7541,
  						50.3416
  					],
  					[
  						18.7319,
  						50.3315
  					],
  					[
  						18.7135,
  						50.3281
  					],
  					[
  						18.6802,
  						50.3395
  					],
  					[
  						18.6581,
  						50.3739
  					],
  					[
  						18.6506,
  						50.4124
  					],
  					[
  						18.6505,
  						50.4125
  					],
  					[
  						18.6506,
  						50.4124
  					],
  					[
  						18.6505,
  						50.4125
  					],
  					[
  						18.6374,
  						50.4211
  					],
  					[
  						18.614,
  						50.4372
  					],
  					[
  						18.6282,
  						50.4589
  					],
  					[
  						18.6231,
  						50.4883
  					],
  					[
  						18.6526,
  						50.4991
  					],
  					[
  						18.6377,
  						50.5246
  					],
  					[
  						18.6491,
  						50.5456
  					],
  					[
  						18.6075,
  						50.55
  					],
  					[
  						18.6162,
  						50.5692
  					],
  					[
  						18.5908,
  						50.5778
  					],
  					[
  						18.6017,
  						50.6045
  					],
  					[
  						18.7102,
  						50.587
  					],
  					[
  						18.7262,
  						50.5955
  					],
  					[
  						18.7736,
  						50.5897
  					],
  					[
  						18.7798,
  						50.5719
  					],
  					[
  						18.8289,
  						50.5576
  					],
  					[
  						18.8445,
  						50.5441
  					],
  					[
  						18.8698,
  						50.569
  					],
  					[
  						18.8158,
  						50.5877
  					],
  					[
  						18.8506,
  						50.6143
  					],
  					[
  						18.8761,
  						50.5861
  					],
  					[
  						18.9062,
  						50.5766
  					],
  					[
  						18.9918,
  						50.5708
  					],
  					[
  						19.0299,
  						50.5617
  					],
  					[
  						19.0227,
  						50.5427
  					],
  					[
  						19.0432,
  						50.5184
  					],
  					[
  						19.0528,
  						50.4933
  					],
  					[
  						19.0791,
  						50.5079
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 147,
  			name: "powiat zawierciański",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.7513,
  						50.686
  					],
  					[
  						19.7145,
  						50.7153
  					],
  					[
  						19.7129,
  						50.7292
  					],
  					[
  						19.755,
  						50.716
  					],
  					[
  						19.8108,
  						50.7254
  					],
  					[
  						19.8083,
  						50.7059
  					],
  					[
  						19.8474,
  						50.7018
  					],
  					[
  						19.873,
  						50.683
  					],
  					[
  						19.8445,
  						50.6668
  					],
  					[
  						19.8352,
  						50.6514
  					],
  					[
  						19.9098,
  						50.642
  					],
  					[
  						19.9035,
  						50.6196
  					],
  					[
  						19.8619,
  						50.6217
  					],
  					[
  						19.8445,
  						50.5986
  					],
  					[
  						19.7887,
  						50.5545
  					],
  					[
  						19.8417,
  						50.5551
  					],
  					[
  						19.8548,
  						50.5439
  					],
  					[
  						19.9022,
  						50.5393
  					],
  					[
  						19.9117,
  						50.5118
  					],
  					[
  						19.95,
  						50.5048
  					],
  					[
  						19.964,
  						50.4887
  					],
  					[
  						19.9005,
  						50.4735
  					],
  					[
  						19.8969,
  						50.4524
  					],
  					[
  						19.853,
  						50.4474
  					],
  					[
  						19.8446,
  						50.4342
  					],
  					[
  						19.8445,
  						50.4342
  					],
  					[
  						19.8,
  						50.4439
  					],
  					[
  						19.7248,
  						50.4409
  					],
  					[
  						19.7019,
  						50.4482
  					],
  					[
  						19.6776,
  						50.4339
  					],
  					[
  						19.6717,
  						50.4158
  					],
  					[
  						19.6167,
  						50.4062
  					],
  					[
  						19.5501,
  						50.4128
  					],
  					[
  						19.5185,
  						50.4167
  					],
  					[
  						19.4876,
  						50.397
  					],
  					[
  						19.4917,
  						50.366
  					],
  					[
  						19.4594,
  						50.3633
  					],
  					[
  						19.4053,
  						50.3625
  					],
  					[
  						19.346,
  						50.3963
  					],
  					[
  						19.3223,
  						50.3917
  					],
  					[
  						19.2914,
  						50.4096
  					],
  					[
  						19.2926,
  						50.4232
  					],
  					[
  						19.2498,
  						50.4369
  					],
  					[
  						19.2932,
  						50.4332
  					],
  					[
  						19.2841,
  						50.4518
  					],
  					[
  						19.2706,
  						50.4933
  					],
  					[
  						19.2711,
  						50.4961
  					],
  					[
  						19.2856,
  						50.5105
  					],
  					[
  						19.2898,
  						50.5155
  					],
  					[
  						19.3067,
  						50.5213
  					],
  					[
  						19.3432,
  						50.5074
  					],
  					[
  						19.3911,
  						50.5252
  					],
  					[
  						19.3768,
  						50.5626
  					],
  					[
  						19.3913,
  						50.583
  					],
  					[
  						19.4136,
  						50.5907
  					],
  					[
  						19.4659,
  						50.5824
  					],
  					[
  						19.4862,
  						50.6021
  					],
  					[
  						19.5418,
  						50.612
  					],
  					[
  						19.5641,
  						50.6247
  					],
  					[
  						19.5945,
  						50.618
  					],
  					[
  						19.6201,
  						50.6229
  					],
  					[
  						19.6233,
  						50.658
  					],
  					[
  						19.6807,
  						50.6631
  					],
  					[
  						19.6913,
  						50.6914
  					],
  					[
  						19.7135,
  						50.6758
  					],
  					[
  						19.7035,
  						50.644
  					],
  					[
  						19.7326,
  						50.637
  					],
  					[
  						19.7516,
  						50.6568
  					],
  					[
  						19.7864,
  						50.6684
  					],
  					[
  						19.7513,
  						50.686
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 148,
  			name: "powiat Chorzów",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.9561,
  						50.2391
  					],
  					[
  						18.9336,
  						50.2542
  					],
  					[
  						18.9298,
  						50.2709
  					],
  					[
  						18.9312,
  						50.271
  					],
  					[
  						18.935,
  						50.2851
  					],
  					[
  						18.919,
  						50.3025
  					],
  					[
  						18.927,
  						50.3181
  					],
  					[
  						18.9487,
  						50.3236
  					],
  					[
  						18.9488,
  						50.3235
  					],
  					[
  						18.9487,
  						50.3236
  					],
  					[
  						18.9488,
  						50.3235
  					],
  					[
  						18.9591,
  						50.3353
  					],
  					[
  						18.9854,
  						50.3359
  					],
  					[
  						18.9872,
  						50.3095
  					],
  					[
  						19.0013,
  						50.2963
  					],
  					[
  						18.9921,
  						50.2721
  					],
  					[
  						18.9639,
  						50.2841
  					],
  					[
  						18.9561,
  						50.2391
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 149,
  			name: "powiat Katowice",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.9342,
  						50.1586
  					],
  					[
  						18.9312,
  						50.1593
  					],
  					[
  						18.9481,
  						50.1669
  					],
  					[
  						18.9136,
  						50.2221
  					],
  					[
  						18.8969,
  						50.2194
  					],
  					[
  						18.902,
  						50.2317
  					],
  					[
  						18.9078,
  						50.2289
  					],
  					[
  						18.9128,
  						50.2283
  					],
  					[
  						18.9336,
  						50.2302
  					],
  					[
  						18.9367,
  						50.2308
  					],
  					[
  						18.9374,
  						50.2308
  					],
  					[
  						18.9375,
  						50.2308
  					],
  					[
  						18.9374,
  						50.2308
  					],
  					[
  						18.9375,
  						50.2308
  					],
  					[
  						18.9389,
  						50.2312
  					],
  					[
  						18.9389,
  						50.2311
  					],
  					[
  						18.9389,
  						50.2312
  					],
  					[
  						18.9424,
  						50.2315
  					],
  					[
  						18.9425,
  						50.2315
  					],
  					[
  						18.9426,
  						50.2315
  					],
  					[
  						18.9425,
  						50.2315
  					],
  					[
  						18.9426,
  						50.2315
  					],
  					[
  						18.9427,
  						50.2316
  					],
  					[
  						18.9428,
  						50.2316
  					],
  					[
  						18.9427,
  						50.2316
  					],
  					[
  						18.9428,
  						50.2316
  					],
  					[
  						18.9438,
  						50.2317
  					],
  					[
  						18.9442,
  						50.2315
  					],
  					[
  						18.9454,
  						50.2319
  					],
  					[
  						18.9561,
  						50.2391
  					],
  					[
  						18.9639,
  						50.2841
  					],
  					[
  						18.9921,
  						50.2721
  					],
  					[
  						19.0013,
  						50.2963
  					],
  					[
  						19.051,
  						50.2754
  					],
  					[
  						19.0611,
  						50.2954
  					],
  					[
  						19.0713,
  						50.2943
  					],
  					[
  						19.0978,
  						50.2798
  					],
  					[
  						19.1224,
  						50.2668
  					],
  					[
  						19.1244,
  						50.266
  					],
  					[
  						19.1224,
  						50.2668
  					],
  					[
  						19.1026,
  						50.2391
  					],
  					[
  						19.0916,
  						50.2098
  					],
  					[
  						19.11,
  						50.1609
  					],
  					[
  						19.1091,
  						50.1599
  					],
  					[
  						19.0816,
  						50.1313
  					],
  					[
  						19.0373,
  						50.1464
  					],
  					[
  						19.0222,
  						50.1758
  					],
  					[
  						18.9489,
  						50.1556
  					],
  					[
  						18.9342,
  						50.1586
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 150,
  			name: "powiat bolesławiecki",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.714,
  						51.5174
  					],
  					[
  						15.8075,
  						51.5026
  					],
  					[
  						15.8514,
  						51.4544
  					],
  					[
  						15.8222,
  						51.4507
  					],
  					[
  						15.8169,
  						51.4084
  					],
  					[
  						15.8445,
  						51.3948
  					],
  					[
  						15.8403,
  						51.3836
  					],
  					[
  						15.8251,
  						51.3526
  					],
  					[
  						15.7718,
  						51.3194
  					],
  					[
  						15.7836,
  						51.2896
  					],
  					[
  						15.7435,
  						51.2531
  					],
  					[
  						15.753,
  						51.2186
  					],
  					[
  						15.7575,
  						51.1906
  					],
  					[
  						15.7396,
  						51.1712
  					],
  					[
  						15.6978,
  						51.1593
  					],
  					[
  						15.633,
  						51.1855
  					],
  					[
  						15.5877,
  						51.1792
  					],
  					[
  						15.5341,
  						51.1878
  					],
  					[
  						15.4785,
  						51.1752
  					],
  					[
  						15.4876,
  						51.1494
  					],
  					[
  						15.4795,
  						51.136
  					],
  					[
  						15.4437,
  						51.1124
  					],
  					[
  						15.4283,
  						51.1202
  					],
  					[
  						15.4305,
  						51.1418
  					],
  					[
  						15.3907,
  						51.1564
  					],
  					[
  						15.3943,
  						51.1751
  					],
  					[
  						15.3402,
  						51.1995
  					],
  					[
  						15.3072,
  						51.1846
  					],
  					[
  						15.2796,
  						51.192
  					],
  					[
  						15.217,
  						51.1931
  					],
  					[
  						15.2137,
  						51.2235
  					],
  					[
  						15.2416,
  						51.2423
  					],
  					[
  						15.24,
  						51.255
  					],
  					[
  						15.2988,
  						51.2675
  					],
  					[
  						15.3101,
  						51.2534
  					],
  					[
  						15.3399,
  						51.2591
  					],
  					[
  						15.2972,
  						51.2794
  					],
  					[
  						15.2855,
  						51.3196
  					],
  					[
  						15.2679,
  						51.3276
  					],
  					[
  						15.2486,
  						51.3678
  					],
  					[
  						15.2687,
  						51.3731
  					],
  					[
  						15.2562,
  						51.399
  					],
  					[
  						15.2962,
  						51.4066
  					],
  					[
  						15.2755,
  						51.4298
  					],
  					[
  						15.3249,
  						51.4185
  					],
  					[
  						15.3433,
  						51.4469
  					],
  					[
  						15.3394,
  						51.4741
  					],
  					[
  						15.3772,
  						51.4698
  					],
  					[
  						15.3712,
  						51.5079
  					],
  					[
  						15.437,
  						51.5273
  					],
  					[
  						15.4858,
  						51.5136
  					],
  					[
  						15.4877,
  						51.5276
  					],
  					[
  						15.595,
  						51.4697
  					],
  					[
  						15.6347,
  						51.4789
  					],
  					[
  						15.6548,
  						51.4722
  					],
  					[
  						15.6789,
  						51.5124
  					],
  					[
  						15.714,
  						51.5174
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 151,
  			name: "powiat Wałbrzych",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.2723,
  						50.854
  					],
  					[
  						16.3421,
  						50.8385
  					],
  					[
  						16.3322,
  						50.8105
  					],
  					[
  						16.3507,
  						50.7932
  					],
  					[
  						16.3276,
  						50.7804
  					],
  					[
  						16.3456,
  						50.7675
  					],
  					[
  						16.3036,
  						50.7233
  					],
  					[
  						16.2636,
  						50.718
  					],
  					[
  						16.2277,
  						50.761
  					],
  					[
  						16.2399,
  						50.7956
  					],
  					[
  						16.275,
  						50.8139
  					],
  					[
  						16.247,
  						50.8236
  					],
  					[
  						16.2723,
  						50.854
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 152,
  			name: "powiat sępoleński",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.7695,
  						53.4332
  					],
  					[
  						17.7707,
  						53.4023
  					],
  					[
  						17.7061,
  						53.3716
  					],
  					[
  						17.6873,
  						53.3416
  					],
  					[
  						17.7308,
  						53.3352
  					],
  					[
  						17.7324,
  						53.3214
  					],
  					[
  						17.7024,
  						53.2859
  					],
  					[
  						17.614,
  						53.2745
  					],
  					[
  						17.5553,
  						53.2949
  					],
  					[
  						17.5261,
  						53.2776
  					],
  					[
  						17.4532,
  						53.284
  					],
  					[
  						17.4388,
  						53.2675
  					],
  					[
  						17.3944,
  						53.2892
  					],
  					[
  						17.3847,
  						53.307
  					],
  					[
  						17.3555,
  						53.3291
  					],
  					[
  						17.3252,
  						53.3472
  					],
  					[
  						17.2572,
  						53.3634
  					],
  					[
  						17.248,
  						53.3756
  					],
  					[
  						17.2957,
  						53.4037
  					],
  					[
  						17.2947,
  						53.4218
  					],
  					[
  						17.3309,
  						53.4364
  					],
  					[
  						17.3456,
  						53.4529
  					],
  					[
  						17.3476,
  						53.4534
  					],
  					[
  						17.3825,
  						53.4686
  					],
  					[
  						17.3907,
  						53.491
  					],
  					[
  						17.4115,
  						53.5337
  					],
  					[
  						17.4136,
  						53.5603
  					],
  					[
  						17.4282,
  						53.5892
  					],
  					[
  						17.4664,
  						53.6016
  					],
  					[
  						17.4664,
  						53.6015
  					],
  					[
  						17.523,
  						53.6063
  					],
  					[
  						17.5433,
  						53.5809
  					],
  					[
  						17.5793,
  						53.5785
  					],
  					[
  						17.6044,
  						53.5969
  					],
  					[
  						17.6508,
  						53.5816
  					],
  					[
  						17.6567,
  						53.5712
  					],
  					[
  						17.6318,
  						53.5573
  					],
  					[
  						17.6365,
  						53.5341
  					],
  					[
  						17.6765,
  						53.5007
  					],
  					[
  						17.7198,
  						53.5052
  					],
  					[
  						17.73,
  						53.4342
  					],
  					[
  						17.7695,
  						53.4332
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 153,
  			name: "powiat Włocławek",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.9826,
  						52.736
  					],
  					[
  						19.0009,
  						52.7141
  					],
  					[
  						19.0233,
  						52.6871
  					],
  					[
  						19.0423,
  						52.6899
  					],
  					[
  						19.1093,
  						52.6689
  					],
  					[
  						19.1826,
  						52.6613
  					],
  					[
  						19.1763,
  						52.6559
  					],
  					[
  						19.1497,
  						52.6265
  					],
  					[
  						19.1201,
  						52.629
  					],
  					[
  						19.1063,
  						52.6133
  					],
  					[
  						19.071,
  						52.6248
  					],
  					[
  						19.0466,
  						52.6003
  					],
  					[
  						19.004,
  						52.6028
  					],
  					[
  						19.0296,
  						52.6266
  					],
  					[
  						19.0128,
  						52.6465
  					],
  					[
  						19.0263,
  						52.6601
  					],
  					[
  						19.0175,
  						52.6759
  					],
  					[
  						18.9394,
  						52.6966
  					],
  					[
  						18.9521,
  						52.7317
  					],
  					[
  						18.9826,
  						52.736
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 154,
  			name: "powiat hajnowski",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.9102,
  						52.9043
  					],
  					[
  						23.9162,
  						52.9048
  					],
  					[
  						23.9258,
  						52.8988
  					],
  					[
  						23.9246,
  						52.8307
  					],
  					[
  						23.9396,
  						52.8132
  					],
  					[
  						23.9386,
  						52.7129
  					],
  					[
  						23.7562,
  						52.6145
  					],
  					[
  						23.7186,
  						52.6147
  					],
  					[
  						23.6414,
  						52.6075
  					],
  					[
  						23.5402,
  						52.5802
  					],
  					[
  						23.4666,
  						52.5494
  					],
  					[
  						23.4081,
  						52.5115
  					],
  					[
  						23.3621,
  						52.4735
  					],
  					[
  						23.3139,
  						52.4267
  					],
  					[
  						23.2784,
  						52.4409
  					],
  					[
  						23.2756,
  						52.474
  					],
  					[
  						23.2572,
  						52.4903
  					],
  					[
  						23.3148,
  						52.5014
  					],
  					[
  						23.267,
  						52.5314
  					],
  					[
  						23.1925,
  						52.5434
  					],
  					[
  						23.1748,
  						52.566
  					],
  					[
  						23.2084,
  						52.5751
  					],
  					[
  						23.2326,
  						52.5963
  					],
  					[
  						23.2762,
  						52.597
  					],
  					[
  						23.2862,
  						52.6285
  					],
  					[
  						23.3235,
  						52.6499
  					],
  					[
  						23.3688,
  						52.6408
  					],
  					[
  						23.4017,
  						52.6853
  					],
  					[
  						23.3784,
  						52.7263
  					],
  					[
  						23.3705,
  						52.8077
  					],
  					[
  						23.3491,
  						52.8174
  					],
  					[
  						23.3496,
  						52.846
  					],
  					[
  						23.3346,
  						52.8562
  					],
  					[
  						23.3302,
  						52.8935
  					],
  					[
  						23.3682,
  						52.8931
  					],
  					[
  						23.3905,
  						52.9052
  					],
  					[
  						23.3746,
  						52.9291
  					],
  					[
  						23.375,
  						52.9651
  					],
  					[
  						23.4189,
  						52.9639
  					],
  					[
  						23.4341,
  						52.9746
  					],
  					[
  						23.4934,
  						52.9902
  					],
  					[
  						23.5062,
  						52.9756
  					],
  					[
  						23.5648,
  						52.9744
  					],
  					[
  						23.6158,
  						52.9547
  					],
  					[
  						23.624,
  						52.9332
  					],
  					[
  						23.702,
  						52.9373
  					],
  					[
  						23.7904,
  						52.9378
  					],
  					[
  						23.8243,
  						52.9107
  					],
  					[
  						23.9102,
  						52.9043
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 155,
  			name: "powiat chrzanowski",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.5103,
  						50.0257
  					],
  					[
  						19.4795,
  						50.0274
  					],
  					[
  						19.4631,
  						50.0394
  					],
  					[
  						19.4315,
  						50.0245
  					],
  					[
  						19.3794,
  						50.0357
  					],
  					[
  						19.3688,
  						50.0464
  					],
  					[
  						19.3105,
  						50.0466
  					],
  					[
  						19.2967,
  						50.0574
  					],
  					[
  						19.2863,
  						50.0956
  					],
  					[
  						19.2592,
  						50.1169
  					],
  					[
  						19.2778,
  						50.1197
  					],
  					[
  						19.2883,
  						50.1404
  					],
  					[
  						19.3316,
  						50.1442
  					],
  					[
  						19.3637,
  						50.1905
  					],
  					[
  						19.4025,
  						50.2019
  					],
  					[
  						19.442,
  						50.2266
  					],
  					[
  						19.4841,
  						50.2291
  					],
  					[
  						19.5631,
  						50.2108
  					],
  					[
  						19.5887,
  						50.1981
  					],
  					[
  						19.5253,
  						50.2007
  					],
  					[
  						19.5466,
  						50.1847
  					],
  					[
  						19.5392,
  						50.1117
  					],
  					[
  						19.5779,
  						50.092
  					],
  					[
  						19.6055,
  						50.0587
  					],
  					[
  						19.6052,
  						50.0575
  					],
  					[
  						19.6059,
  						50.0512
  					],
  					[
  						19.61,
  						50.0486
  					],
  					[
  						19.6282,
  						50.0339
  					],
  					[
  						19.6014,
  						50.0329
  					],
  					[
  						19.5603,
  						50.0121
  					],
  					[
  						19.5103,
  						50.0257
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 156,
  			name: "powiat wejherowski",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.431,
  						54.5665
  					],
  					[
  						18.431,
  						54.5658
  					],
  					[
  						18.3896,
  						54.5423
  					],
  					[
  						18.3802,
  						54.5069
  					],
  					[
  						18.4078,
  						54.4762
  					],
  					[
  						18.4173,
  						54.4562
  					],
  					[
  						18.399,
  						54.4394
  					],
  					[
  						18.3647,
  						54.4393
  					],
  					[
  						18.3473,
  						54.4242
  					],
  					[
  						18.2985,
  						54.4247
  					],
  					[
  						18.2474,
  						54.4399
  					],
  					[
  						18.2043,
  						54.4363
  					],
  					[
  						18.181,
  						54.4181
  					],
  					[
  						18.1436,
  						54.4137
  					],
  					[
  						18.0958,
  						54.4291
  					],
  					[
  						18.0483,
  						54.4335
  					],
  					[
  						18.0275,
  						54.4229
  					],
  					[
  						17.9917,
  						54.4319
  					],
  					[
  						17.9578,
  						54.4315
  					],
  					[
  						17.9279,
  						54.4147
  					],
  					[
  						17.8812,
  						54.41
  					],
  					[
  						17.8528,
  						54.4439
  					],
  					[
  						17.8501,
  						54.4687
  					],
  					[
  						17.8866,
  						54.4805
  					],
  					[
  						17.8799,
  						54.4976
  					],
  					[
  						17.8368,
  						54.5248
  					],
  					[
  						17.8267,
  						54.5619
  					],
  					[
  						17.7844,
  						54.5914
  					],
  					[
  						17.7783,
  						54.6145
  					],
  					[
  						17.8201,
  						54.616
  					],
  					[
  						17.8141,
  						54.6361
  					],
  					[
  						17.8268,
  						54.6559
  					],
  					[
  						17.797,
  						54.6679
  					],
  					[
  						17.7824,
  						54.7018
  					],
  					[
  						17.7493,
  						54.7245
  					],
  					[
  						17.7708,
  						54.7375
  					],
  					[
  						17.7251,
  						54.756
  					],
  					[
  						17.7225,
  						54.7743
  					],
  					[
  						17.6763,
  						54.7716
  					],
  					[
  						17.6666,
  						54.7832
  					],
  					[
  						17.7561,
  						54.8016
  					],
  					[
  						17.9159,
  						54.8245
  					],
  					[
  						17.9179,
  						54.7962
  					],
  					[
  						17.9573,
  						54.7792
  					],
  					[
  						17.9727,
  						54.7618
  					],
  					[
  						17.9995,
  						54.7528
  					],
  					[
  						18.0389,
  						54.757
  					],
  					[
  						18.0228,
  						54.7768
  					],
  					[
  						18.0636,
  						54.7753
  					],
  					[
  						18.0928,
  						54.7391
  					],
  					[
  						18.0926,
  						54.7251
  					],
  					[
  						18.1169,
  						54.6993
  					],
  					[
  						18.1545,
  						54.6951
  					],
  					[
  						18.2203,
  						54.6669
  					],
  					[
  						18.2427,
  						54.6482
  					],
  					[
  						18.3453,
  						54.6338
  					],
  					[
  						18.3816,
  						54.6336
  					],
  					[
  						18.3878,
  						54.6143
  					],
  					[
  						18.423,
  						54.5917
  					],
  					[
  						18.431,
  						54.5665
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 157,
  			name: "powiat Szczecin",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						14.778,
  						53.403
  					],
  					[
  						14.7903,
  						53.3945
  					],
  					[
  						14.7322,
  						53.3733
  					],
  					[
  						14.7562,
  						53.3634
  					],
  					[
  						14.7693,
  						53.345
  					],
  					[
  						14.7919,
  						53.3424
  					],
  					[
  						14.8009,
  						53.3258
  					],
  					[
  						14.7758,
  						53.3381
  					],
  					[
  						14.7463,
  						53.3292
  					],
  					[
  						14.6937,
  						53.3584
  					],
  					[
  						14.6665,
  						53.3553
  					],
  					[
  						14.6182,
  						53.362
  					],
  					[
  						14.5751,
  						53.3335
  					],
  					[
  						14.5323,
  						53.3361
  					],
  					[
  						14.5545,
  						53.3545
  					],
  					[
  						14.5743,
  						53.3714
  					],
  					[
  						14.4918,
  						53.3936
  					],
  					[
  						14.471,
  						53.4178
  					],
  					[
  						14.4751,
  						53.4391
  					],
  					[
  						14.47,
  						53.4614
  					],
  					[
  						14.4439,
  						53.4848
  					],
  					[
  						14.4645,
  						53.497
  					],
  					[
  						14.5626,
  						53.4973
  					],
  					[
  						14.5844,
  						53.5052
  					],
  					[
  						14.5855,
  						53.5329
  					],
  					[
  						14.6353,
  						53.5339
  					],
  					[
  						14.6365,
  						53.5284
  					],
  					[
  						14.6368,
  						53.5272
  					],
  					[
  						14.6388,
  						53.5258
  					],
  					[
  						14.6781,
  						53.524
  					],
  					[
  						14.702,
  						53.5044
  					],
  					[
  						14.6934,
  						53.4772
  					],
  					[
  						14.712,
  						53.4496
  					],
  					[
  						14.7526,
  						53.4258
  					],
  					[
  						14.7268,
  						53.4047
  					],
  					[
  						14.778,
  						53.403
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 158,
  			name: "powiat pucki",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.4222,
  						54.788
  					],
  					[
  						18.4221,
  						54.7876
  					],
  					[
  						18.3964,
  						54.7464
  					],
  					[
  						18.3938,
  						54.7296
  					],
  					[
  						18.473,
  						54.6946
  					],
  					[
  						18.4659,
  						54.6557
  					],
  					[
  						18.4746,
  						54.6311
  					],
  					[
  						18.512,
  						54.6342
  					],
  					[
  						18.5162,
  						54.6066
  					],
  					[
  						18.5417,
  						54.5845
  					],
  					[
  						18.5137,
  						54.5632
  					],
  					[
  						18.4618,
  						54.5574
  					],
  					[
  						18.431,
  						54.5665
  					],
  					[
  						18.423,
  						54.5917
  					],
  					[
  						18.3878,
  						54.6143
  					],
  					[
  						18.3816,
  						54.6336
  					],
  					[
  						18.3453,
  						54.6338
  					],
  					[
  						18.2427,
  						54.6482
  					],
  					[
  						18.2203,
  						54.6669
  					],
  					[
  						18.1545,
  						54.6951
  					],
  					[
  						18.1169,
  						54.6993
  					],
  					[
  						18.0926,
  						54.7251
  					],
  					[
  						18.0928,
  						54.7391
  					],
  					[
  						18.0636,
  						54.7753
  					],
  					[
  						18.0228,
  						54.7768
  					],
  					[
  						18.0389,
  						54.757
  					],
  					[
  						17.9995,
  						54.7528
  					],
  					[
  						17.9727,
  						54.7618
  					],
  					[
  						17.9573,
  						54.7792
  					],
  					[
  						17.9179,
  						54.7962
  					],
  					[
  						17.9159,
  						54.8245
  					],
  					[
  						17.9678,
  						54.8323
  					],
  					[
  						18.0803,
  						54.8352
  					],
  					[
  						18.1289,
  						54.8336
  					],
  					[
  						18.3294,
  						54.8353
  					],
  					[
  						18.3697,
  						54.8139
  					],
  					[
  						18.5444,
  						54.7501
  					],
  					[
  						18.6616,
  						54.7111
  					],
  					[
  						18.7332,
  						54.6819
  					],
  					[
  						18.7944,
  						54.6481
  					],
  					[
  						18.8262,
  						54.6233
  					],
  					[
  						18.8137,
  						54.5932
  					],
  					[
  						18.7791,
  						54.6131
  					],
  					[
  						18.7642,
  						54.6376
  					],
  					[
  						18.7158,
  						54.6782
  					],
  					[
  						18.6856,
  						54.6947
  					],
  					[
  						18.654,
  						54.6998
  					],
  					[
  						18.6268,
  						54.7184
  					],
  					[
  						18.4222,
  						54.788
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 159,
  			name: "powiat rawski",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.1158,
  						51.7402
  					],
  					[
  						20.1384,
  						51.7424
  					],
  					[
  						20.146,
  						51.7603
  					],
  					[
  						20.1693,
  						51.7643
  					],
  					[
  						20.189,
  						51.7839
  					],
  					[
  						20.1853,
  						51.8028
  					],
  					[
  						20.1251,
  						51.8132
  					],
  					[
  						20.1365,
  						51.8357
  					],
  					[
  						20.215,
  						51.8505
  					],
  					[
  						20.3322,
  						51.848
  					],
  					[
  						20.3318,
  						51.8707
  					],
  					[
  						20.3741,
  						51.8596
  					],
  					[
  						20.415,
  						51.8697
  					],
  					[
  						20.4399,
  						51.8501
  					],
  					[
  						20.4785,
  						51.8679
  					],
  					[
  						20.51,
  						51.8671
  					],
  					[
  						20.5188,
  						51.8924
  					],
  					[
  						20.5691,
  						51.8877
  					],
  					[
  						20.5906,
  						51.8494
  					],
  					[
  						20.6054,
  						51.8496
  					],
  					[
  						20.5963,
  						51.8398
  					],
  					[
  						20.6077,
  						51.8161
  					],
  					[
  						20.5816,
  						51.8111
  					],
  					[
  						20.5789,
  						51.7936
  					],
  					[
  						20.595,
  						51.7693
  					],
  					[
  						20.5826,
  						51.748
  					],
  					[
  						20.6388,
  						51.7375
  					],
  					[
  						20.6584,
  						51.7242
  					],
  					[
  						20.6532,
  						51.6772
  					],
  					[
  						20.6203,
  						51.6576
  					],
  					[
  						20.5354,
  						51.6687
  					],
  					[
  						20.5145,
  						51.6855
  					],
  					[
  						20.4672,
  						51.6928
  					],
  					[
  						20.4003,
  						51.6728
  					],
  					[
  						20.385,
  						51.6416
  					],
  					[
  						20.2945,
  						51.6553
  					],
  					[
  						20.2811,
  						51.6662
  					],
  					[
  						20.2853,
  						51.6886
  					],
  					[
  						20.2646,
  						51.7102
  					],
  					[
  						20.232,
  						51.7128
  					],
  					[
  						20.2205,
  						51.7244
  					],
  					[
  						20.1776,
  						51.7101
  					],
  					[
  						20.116,
  						51.7309
  					],
  					[
  						20.1158,
  						51.7402
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 160,
  			name: "powiat łowicki",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.8685,
  						51.9159
  					],
  					[
  						19.8435,
  						51.9354
  					],
  					[
  						19.84,
  						51.952
  					],
  					[
  						19.8319,
  						51.9769
  					],
  					[
  						19.8048,
  						51.9745
  					],
  					[
  						19.7862,
  						51.9867
  					],
  					[
  						19.7308,
  						51.9967
  					],
  					[
  						19.7195,
  						52.0135
  					],
  					[
  						19.6795,
  						52.0292
  					],
  					[
  						19.6338,
  						52.0192
  					],
  					[
  						19.6207,
  						52.0288
  					],
  					[
  						19.5622,
  						52.0347
  					],
  					[
  						19.5421,
  						52.0473
  					],
  					[
  						19.5454,
  						52.0851
  					],
  					[
  						19.524,
  						52.101
  					],
  					[
  						19.5314,
  						52.1249
  					],
  					[
  						19.6085,
  						52.1158
  					],
  					[
  						19.6348,
  						52.1202
  					],
  					[
  						19.6465,
  						52.1375
  					],
  					[
  						19.698,
  						52.1435
  					],
  					[
  						19.689,
  						52.1723
  					],
  					[
  						19.7173,
  						52.1794
  					],
  					[
  						19.7137,
  						52.2038
  					],
  					[
  						19.7376,
  						52.2091
  					],
  					[
  						19.764,
  						52.2294
  					],
  					[
  						19.7361,
  						52.2586
  					],
  					[
  						19.773,
  						52.2646
  					],
  					[
  						19.816,
  						52.2839
  					],
  					[
  						19.8475,
  						52.2721
  					],
  					[
  						19.8778,
  						52.2891
  					],
  					[
  						19.8856,
  						52.3098
  					],
  					[
  						19.9361,
  						52.2997
  					],
  					[
  						19.9651,
  						52.2683
  					],
  					[
  						20.0421,
  						52.2577
  					],
  					[
  						20.0376,
  						52.2467
  					],
  					[
  						20.0805,
  						52.233
  					],
  					[
  						20.0621,
  						52.1881
  					],
  					[
  						20.0874,
  						52.1682
  					],
  					[
  						20.091,
  						52.1526
  					],
  					[
  						20.1156,
  						52.1438
  					],
  					[
  						20.1117,
  						52.1313
  					],
  					[
  						20.1241,
  						52.0937
  					],
  					[
  						20.0928,
  						52.0857
  					],
  					[
  						20.1192,
  						52.0694
  					],
  					[
  						20.1268,
  						52.0428
  					],
  					[
  						20.1117,
  						52.0285
  					],
  					[
  						20.0674,
  						52.0134
  					],
  					[
  						20.0617,
  						51.9947
  					],
  					[
  						20.0054,
  						51.9838
  					],
  					[
  						20.0023,
  						51.9959
  					],
  					[
  						19.9612,
  						51.9921
  					],
  					[
  						19.9479,
  						51.9693
  					],
  					[
  						19.9069,
  						51.949
  					],
  					[
  						19.9005,
  						51.9095
  					],
  					[
  						19.8685,
  						51.9159
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 161,
  			name: "powiat skierniewicki",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.1156,
  						52.1438
  					],
  					[
  						20.1606,
  						52.1513
  					],
  					[
  						20.1651,
  						52.1386
  					],
  					[
  						20.2023,
  						52.1147
  					],
  					[
  						20.2519,
  						52.1173
  					],
  					[
  						20.2689,
  						52.1007
  					],
  					[
  						20.2699,
  						52.0771
  					],
  					[
  						20.2531,
  						52.0553
  					],
  					[
  						20.2006,
  						52.0301
  					],
  					[
  						20.2256,
  						52.005
  					],
  					[
  						20.2551,
  						51.9956
  					],
  					[
  						20.2715,
  						51.9713
  					],
  					[
  						20.2407,
  						51.951
  					],
  					[
  						20.2427,
  						51.9345
  					],
  					[
  						20.2895,
  						51.9383
  					],
  					[
  						20.3239,
  						51.922
  					],
  					[
  						20.3538,
  						51.9197
  					],
  					[
  						20.4136,
  						51.9304
  					],
  					[
  						20.4394,
  						51.9435
  					],
  					[
  						20.4755,
  						51.9311
  					],
  					[
  						20.4983,
  						51.8895
  					],
  					[
  						20.5188,
  						51.8924
  					],
  					[
  						20.51,
  						51.8671
  					],
  					[
  						20.4785,
  						51.8679
  					],
  					[
  						20.4399,
  						51.8501
  					],
  					[
  						20.415,
  						51.8697
  					],
  					[
  						20.3741,
  						51.8596
  					],
  					[
  						20.3318,
  						51.8707
  					],
  					[
  						20.3322,
  						51.848
  					],
  					[
  						20.215,
  						51.8505
  					],
  					[
  						20.1365,
  						51.8357
  					],
  					[
  						20.1251,
  						51.8132
  					],
  					[
  						20.1853,
  						51.8028
  					],
  					[
  						20.189,
  						51.7839
  					],
  					[
  						20.1693,
  						51.7643
  					],
  					[
  						20.146,
  						51.7603
  					],
  					[
  						20.1384,
  						51.7424
  					],
  					[
  						20.1158,
  						51.7402
  					],
  					[
  						20.0938,
  						51.7386
  					],
  					[
  						20.0606,
  						51.7626
  					],
  					[
  						20.0162,
  						51.7735
  					],
  					[
  						19.9909,
  						51.7787
  					],
  					[
  						19.9889,
  						51.7796
  					],
  					[
  						20.0141,
  						51.8269
  					],
  					[
  						19.9586,
  						51.8474
  					],
  					[
  						19.9227,
  						51.8496
  					],
  					[
  						19.8895,
  						51.8624
  					],
  					[
  						19.8685,
  						51.9159
  					],
  					[
  						19.9005,
  						51.9095
  					],
  					[
  						19.9069,
  						51.949
  					],
  					[
  						19.9479,
  						51.9693
  					],
  					[
  						19.9612,
  						51.9921
  					],
  					[
  						20.0023,
  						51.9959
  					],
  					[
  						20.0054,
  						51.9838
  					],
  					[
  						20.0617,
  						51.9947
  					],
  					[
  						20.0674,
  						52.0134
  					],
  					[
  						20.1117,
  						52.0285
  					],
  					[
  						20.1268,
  						52.0428
  					],
  					[
  						20.1192,
  						52.0694
  					],
  					[
  						20.0928,
  						52.0857
  					],
  					[
  						20.1241,
  						52.0937
  					],
  					[
  						20.1117,
  						52.1313
  					],
  					[
  						20.1156,
  						52.1438
  					]
  				],
  				[
  					[
  						20.2005,
  						51.9735
  					],
  					[
  						20.2003,
  						51.9726
  					],
  					[
  						20.2005,
  						51.9735
  					],
  					[
  						20.1502,
  						51.9876
  					],
  					[
  						20.1103,
  						51.966
  					],
  					[
  						20.1131,
  						51.9432
  					],
  					[
  						20.1319,
  						51.933
  					],
  					[
  						20.184,
  						51.9312
  					],
  					[
  						20.1864,
  						51.9749
  					],
  					[
  						20.2005,
  						51.9735
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 162,
  			name: "powiat iławski",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.771,
  						53.608
  					],
  					[
  						19.8109,
  						53.6011
  					],
  					[
  						19.8166,
  						53.5816
  					],
  					[
  						19.824,
  						53.5774
  					],
  					[
  						19.8773,
  						53.5638
  					],
  					[
  						19.896,
  						53.5199
  					],
  					[
  						19.8959,
  						53.4842
  					],
  					[
  						19.9188,
  						53.4761
  					],
  					[
  						19.948,
  						53.4384
  					],
  					[
  						19.904,
  						53.436
  					],
  					[
  						19.8719,
  						53.4435
  					],
  					[
  						19.853,
  						53.4357
  					],
  					[
  						19.8288,
  						53.4555
  					],
  					[
  						19.7772,
  						53.4393
  					],
  					[
  						19.715,
  						53.4443
  					],
  					[
  						19.6997,
  						53.467
  					],
  					[
  						19.6699,
  						53.4549
  					],
  					[
  						19.6293,
  						53.4728
  					],
  					[
  						19.6075,
  						53.4933
  					],
  					[
  						19.611,
  						53.524
  					],
  					[
  						19.5716,
  						53.5228
  					],
  					[
  						19.4665,
  						53.5534
  					],
  					[
  						19.4634,
  						53.563
  					],
  					[
  						19.4115,
  						53.5694
  					],
  					[
  						19.3762,
  						53.551
  					],
  					[
  						19.3467,
  						53.5604
  					],
  					[
  						19.3139,
  						53.5448
  					],
  					[
  						19.2297,
  						53.5186
  					],
  					[
  						19.2188,
  						53.5243
  					],
  					[
  						19.1997,
  						53.5701
  					],
  					[
  						19.1821,
  						53.579
  					],
  					[
  						19.1293,
  						53.5883
  					],
  					[
  						19.1304,
  						53.6083
  					],
  					[
  						19.1791,
  						53.6404
  					],
  					[
  						19.2151,
  						53.6492
  					],
  					[
  						19.2129,
  						53.6914
  					],
  					[
  						19.3009,
  						53.7522
  					],
  					[
  						19.2997,
  						53.782
  					],
  					[
  						19.323,
  						53.8139
  					],
  					[
  						19.3707,
  						53.8142
  					],
  					[
  						19.4542,
  						53.7976
  					],
  					[
  						19.4719,
  						53.7849
  					],
  					[
  						19.5004,
  						53.8066
  					],
  					[
  						19.4796,
  						53.8168
  					],
  					[
  						19.513,
  						53.8421
  					],
  					[
  						19.5335,
  						53.8801
  					],
  					[
  						19.5528,
  						53.8942
  					],
  					[
  						19.5603,
  						53.9167
  					],
  					[
  						19.5826,
  						53.9109
  					],
  					[
  						19.5849,
  						53.8931
  					],
  					[
  						19.6257,
  						53.8946
  					],
  					[
  						19.6543,
  						53.8799
  					],
  					[
  						19.6732,
  						53.888
  					],
  					[
  						19.7127,
  						53.8657
  					],
  					[
  						19.7198,
  						53.8366
  					],
  					[
  						19.7394,
  						53.8322
  					],
  					[
  						19.7511,
  						53.7785
  					],
  					[
  						19.7193,
  						53.7498
  					],
  					[
  						19.7306,
  						53.7281
  					],
  					[
  						19.7017,
  						53.7191
  					],
  					[
  						19.7039,
  						53.7002
  					],
  					[
  						19.7414,
  						53.6922
  					],
  					[
  						19.7654,
  						53.6771
  					],
  					[
  						19.7895,
  						53.6868
  					],
  					[
  						19.808,
  						53.6707
  					],
  					[
  						19.7385,
  						53.6172
  					],
  					[
  						19.771,
  						53.608
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 163,
  			name: "powiat niżański",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.1908,
  						50.5403
  					],
  					[
  						22.2286,
  						50.5479
  					],
  					[
  						22.2072,
  						50.568
  					],
  					[
  						22.2499,
  						50.5744
  					],
  					[
  						22.2639,
  						50.604
  					],
  					[
  						22.2463,
  						50.6249
  					],
  					[
  						22.3493,
  						50.6141
  					],
  					[
  						22.4073,
  						50.5855
  					],
  					[
  						22.4653,
  						50.5919
  					],
  					[
  						22.4832,
  						50.5812
  					],
  					[
  						22.5197,
  						50.5832
  					],
  					[
  						22.5362,
  						50.5721
  					],
  					[
  						22.5343,
  						50.5375
  					],
  					[
  						22.5412,
  						50.5057
  					],
  					[
  						22.571,
  						50.5099
  					],
  					[
  						22.5672,
  						50.4832
  					],
  					[
  						22.5454,
  						50.452
  					],
  					[
  						22.5205,
  						50.4642
  					],
  					[
  						22.4972,
  						50.4552
  					],
  					[
  						22.4563,
  						50.4522
  					],
  					[
  						22.4462,
  						50.419
  					],
  					[
  						22.4119,
  						50.4234
  					],
  					[
  						22.4054,
  						50.3944
  					],
  					[
  						22.4414,
  						50.38
  					],
  					[
  						22.436,
  						50.3685
  					],
  					[
  						22.4556,
  						50.3501
  					],
  					[
  						22.4539,
  						50.3352
  					],
  					[
  						22.4175,
  						50.334
  					],
  					[
  						22.3724,
  						50.3502
  					],
  					[
  						22.3546,
  						50.3732
  					],
  					[
  						22.3129,
  						50.3748
  					],
  					[
  						22.3099,
  						50.3933
  					],
  					[
  						22.2778,
  						50.3842
  					],
  					[
  						22.2545,
  						50.3637
  					],
  					[
  						22.1931,
  						50.3366
  					],
  					[
  						22.1976,
  						50.3521
  					],
  					[
  						22.1527,
  						50.3476
  					],
  					[
  						22.1019,
  						50.355
  					],
  					[
  						22.07,
  						50.3313
  					],
  					[
  						21.9988,
  						50.3239
  					],
  					[
  						22.0056,
  						50.3089
  					],
  					[
  						21.9732,
  						50.3131
  					],
  					[
  						21.9947,
  						50.3325
  					],
  					[
  						21.9839,
  						50.3674
  					],
  					[
  						22.0177,
  						50.3619
  					],
  					[
  						22.0246,
  						50.3878
  					],
  					[
  						22.0391,
  						50.4091
  					],
  					[
  						22.0623,
  						50.4161
  					],
  					[
  						22.0585,
  						50.4535
  					],
  					[
  						22.0866,
  						50.4534
  					],
  					[
  						22.0649,
  						50.5129
  					],
  					[
  						22.0957,
  						50.5464
  					],
  					[
  						22.157,
  						50.546
  					],
  					[
  						22.1908,
  						50.5403
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 164,
  			name: "powiat tarnobrzeski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.7792,
  						50.645
  					],
  					[
  						21.7938,
  						50.6757
  					],
  					[
  						21.8189,
  						50.69
  					],
  					[
  						21.8434,
  						50.7392
  					],
  					[
  						21.8805,
  						50.7027
  					],
  					[
  						21.8583,
  						50.6473
  					],
  					[
  						21.8708,
  						50.6313
  					],
  					[
  						21.9043,
  						50.6151
  					],
  					[
  						21.9102,
  						50.6016
  					],
  					[
  						21.9407,
  						50.5886
  					],
  					[
  						21.9371,
  						50.5781
  					],
  					[
  						21.9825,
  						50.5691
  					],
  					[
  						21.9689,
  						50.5399
  					],
  					[
  						21.9807,
  						50.533
  					],
  					[
  						21.9652,
  						50.5034
  					],
  					[
  						21.8839,
  						50.4884
  					],
  					[
  						21.8822,
  						50.4729
  					],
  					[
  						21.8528,
  						50.4705
  					],
  					[
  						21.7764,
  						50.4492
  					],
  					[
  						21.793,
  						50.4356
  					],
  					[
  						21.7973,
  						50.406
  					],
  					[
  						21.7568,
  						50.3878
  					],
  					[
  						21.6705,
  						50.4369
  					],
  					[
  						21.6479,
  						50.4101
  					],
  					[
  						21.6368,
  						50.39
  					],
  					[
  						21.5996,
  						50.3871
  					],
  					[
  						21.5985,
  						50.3869
  					],
  					[
  						21.5507,
  						50.4009
  					],
  					[
  						21.5656,
  						50.4353
  					],
  					[
  						21.5345,
  						50.4489
  					],
  					[
  						21.499,
  						50.4747
  					],
  					[
  						21.4821,
  						50.4964
  					],
  					[
  						21.5178,
  						50.5093
  					],
  					[
  						21.5538,
  						50.5205
  					],
  					[
  						21.6012,
  						50.5197
  					],
  					[
  						21.6228,
  						50.5128
  					],
  					[
  						21.6594,
  						50.535
  					],
  					[
  						21.7112,
  						50.5347
  					],
  					[
  						21.7368,
  						50.5624
  					],
  					[
  						21.793,
  						50.6119
  					],
  					[
  						21.7733,
  						50.6226
  					],
  					[
  						21.7792,
  						50.645
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 165,
  			name: "powiat nowodworski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.4215,
  						52.3311
  					],
  					[
  						20.4187,
  						52.3711
  					],
  					[
  						20.4048,
  						52.3843
  					],
  					[
  						20.4975,
  						52.4219
  					],
  					[
  						20.4832,
  						52.4285
  					],
  					[
  						20.487,
  						52.4414
  					],
  					[
  						20.5419,
  						52.4671
  					],
  					[
  						20.5731,
  						52.4653
  					],
  					[
  						20.5902,
  						52.5143
  					],
  					[
  						20.6201,
  						52.53
  					],
  					[
  						20.6085,
  						52.5676
  					],
  					[
  						20.6558,
  						52.5954
  					],
  					[
  						20.7056,
  						52.5893
  					],
  					[
  						20.7148,
  						52.6173
  					],
  					[
  						20.7578,
  						52.6433
  					],
  					[
  						20.8287,
  						52.633
  					],
  					[
  						20.8606,
  						52.6382
  					],
  					[
  						20.8683,
  						52.6041
  					],
  					[
  						20.907,
  						52.5886
  					],
  					[
  						20.9239,
  						52.5641
  					],
  					[
  						20.9305,
  						52.5589
  					],
  					[
  						20.919,
  						52.5288
  					],
  					[
  						20.9002,
  						52.5192
  					],
  					[
  						20.8919,
  						52.4849
  					],
  					[
  						20.8187,
  						52.4849
  					],
  					[
  						20.7631,
  						52.4686
  					],
  					[
  						20.7617,
  						52.4045
  					],
  					[
  						20.8205,
  						52.3789
  					],
  					[
  						20.8205,
  						52.3461
  					],
  					[
  						20.7789,
  						52.3506
  					],
  					[
  						20.7622,
  						52.3231
  					],
  					[
  						20.7405,
  						52.3223
  					],
  					[
  						20.7312,
  						52.3481
  					],
  					[
  						20.6464,
  						52.3148
  					],
  					[
  						20.6201,
  						52.3113
  					],
  					[
  						20.6041,
  						52.3337
  					],
  					[
  						20.561,
  						52.3262
  					],
  					[
  						20.5295,
  						52.3119
  					],
  					[
  						20.5342,
  						52.2948
  					],
  					[
  						20.4392,
  						52.2882
  					],
  					[
  						20.4574,
  						52.322
  					],
  					[
  						20.4215,
  						52.3311
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 166,
  			name: "powiat pruszkowski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.6309,
  						52.1651
  					],
  					[
  						20.6413,
  						52.1814
  					],
  					[
  						20.6989,
  						52.19
  					],
  					[
  						20.7402,
  						52.1876
  					],
  					[
  						20.816,
  						52.1911
  					],
  					[
  						20.8531,
  						52.1972
  					],
  					[
  						20.8672,
  						52.1825
  					],
  					[
  						20.9191,
  						52.1768
  					],
  					[
  						20.9374,
  						52.1602
  					],
  					[
  						20.985,
  						52.1391
  					],
  					[
  						20.9864,
  						52.1176
  					],
  					[
  						20.9283,
  						52.1198
  					],
  					[
  						20.8916,
  						52.091
  					],
  					[
  						20.8694,
  						52.0908
  					],
  					[
  						20.8396,
  						52.0618
  					],
  					[
  						20.8097,
  						52.0515
  					],
  					[
  						20.8121,
  						52.0221
  					],
  					[
  						20.7722,
  						52.0006
  					],
  					[
  						20.7409,
  						52.0397
  					],
  					[
  						20.7232,
  						52.0471
  					],
  					[
  						20.7345,
  						52.0831
  					],
  					[
  						20.6905,
  						52.0969
  					],
  					[
  						20.7148,
  						52.1137
  					],
  					[
  						20.7445,
  						52.1107
  					],
  					[
  						20.7482,
  						52.1269
  					],
  					[
  						20.7028,
  						52.1368
  					],
  					[
  						20.6804,
  						52.1294
  					],
  					[
  						20.6698,
  						52.1589
  					],
  					[
  						20.6309,
  						52.1651
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 167,
  			name: "powiat przysuski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.4203,
  						51.6
  					],
  					[
  						20.4249,
  						51.6116
  					],
  					[
  						20.4569,
  						51.6162
  					],
  					[
  						20.4719,
  						51.6075
  					],
  					[
  						20.5364,
  						51.6126
  					],
  					[
  						20.497,
  						51.5818
  					],
  					[
  						20.4953,
  						51.5605
  					],
  					[
  						20.5746,
  						51.5662
  					],
  					[
  						20.5803,
  						51.5679
  					],
  					[
  						20.6436,
  						51.5837
  					],
  					[
  						20.7045,
  						51.5772
  					],
  					[
  						20.7199,
  						51.5402
  					],
  					[
  						20.759,
  						51.5506
  					],
  					[
  						20.7679,
  						51.5285
  					],
  					[
  						20.7987,
  						51.5117
  					],
  					[
  						20.7801,
  						51.4475
  					],
  					[
  						20.7645,
  						51.419
  					],
  					[
  						20.8117,
  						51.4098
  					],
  					[
  						20.8511,
  						51.4219
  					],
  					[
  						20.8869,
  						51.4027
  					],
  					[
  						20.8575,
  						51.376
  					],
  					[
  						20.8382,
  						51.3642
  					],
  					[
  						20.8545,
  						51.3432
  					],
  					[
  						20.8163,
  						51.3164
  					],
  					[
  						20.7795,
  						51.3192
  					],
  					[
  						20.7611,
  						51.2961
  					],
  					[
  						20.779,
  						51.2883
  					],
  					[
  						20.7578,
  						51.2668
  					],
  					[
  						20.7323,
  						51.2592
  					],
  					[
  						20.7089,
  						51.269
  					],
  					[
  						20.667,
  						51.2516
  					],
  					[
  						20.6145,
  						51.2498
  					],
  					[
  						20.6106,
  						51.2425
  					],
  					[
  						20.6105,
  						51.2425
  					],
  					[
  						20.579,
  						51.2447
  					],
  					[
  						20.546,
  						51.2304
  					],
  					[
  						20.5248,
  						51.2604
  					],
  					[
  						20.537,
  						51.2697
  					],
  					[
  						20.5016,
  						51.2869
  					],
  					[
  						20.4926,
  						51.3073
  					],
  					[
  						20.5072,
  						51.3314
  					],
  					[
  						20.4639,
  						51.3317
  					],
  					[
  						20.4328,
  						51.3394
  					],
  					[
  						20.427,
  						51.3711
  					],
  					[
  						20.4467,
  						51.41
  					],
  					[
  						20.4803,
  						51.4097
  					],
  					[
  						20.4896,
  						51.4213
  					],
  					[
  						20.4967,
  						51.4484
  					],
  					[
  						20.5264,
  						51.4684
  					],
  					[
  						20.5199,
  						51.5098
  					],
  					[
  						20.4945,
  						51.5003
  					],
  					[
  						20.4502,
  						51.5081
  					],
  					[
  						20.4677,
  						51.5609
  					],
  					[
  						20.4414,
  						51.5715
  					],
  					[
  						20.4203,
  						51.6
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 168,
  			name: "powiat białobrzeski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.1248,
  						51.7279
  					],
  					[
  						21.1761,
  						51.7321
  					],
  					[
  						21.1734,
  						51.6735
  					],
  					[
  						21.214,
  						51.6664
  					],
  					[
  						21.2145,
  						51.6521
  					],
  					[
  						21.2429,
  						51.6367
  					],
  					[
  						21.2063,
  						51.607
  					],
  					[
  						21.2055,
  						51.5887
  					],
  					[
  						21.1507,
  						51.5891
  					],
  					[
  						21.0892,
  						51.5769
  					],
  					[
  						21.0705,
  						51.5611
  					],
  					[
  						21.0721,
  						51.5415
  					],
  					[
  						21.0252,
  						51.5345
  					],
  					[
  						20.9984,
  						51.5178
  					],
  					[
  						21.001,
  						51.5021
  					],
  					[
  						20.9327,
  						51.5007
  					],
  					[
  						20.9428,
  						51.5249
  					],
  					[
  						20.8907,
  						51.5151
  					],
  					[
  						20.8286,
  						51.5202
  					],
  					[
  						20.7987,
  						51.5117
  					],
  					[
  						20.7679,
  						51.5285
  					],
  					[
  						20.759,
  						51.5506
  					],
  					[
  						20.7199,
  						51.5402
  					],
  					[
  						20.7045,
  						51.5772
  					],
  					[
  						20.6436,
  						51.5837
  					],
  					[
  						20.651,
  						51.6065
  					],
  					[
  						20.692,
  						51.6096
  					],
  					[
  						20.7137,
  						51.6241
  					],
  					[
  						20.7738,
  						51.626
  					],
  					[
  						20.8141,
  						51.6379
  					],
  					[
  						20.8127,
  						51.6676
  					],
  					[
  						20.7739,
  						51.6866
  					],
  					[
  						20.8317,
  						51.7119
  					],
  					[
  						20.8779,
  						51.7056
  					],
  					[
  						20.8901,
  						51.7397
  					],
  					[
  						20.9452,
  						51.7538
  					],
  					[
  						20.973,
  						51.7458
  					],
  					[
  						20.9742,
  						51.7311
  					],
  					[
  						21.0097,
  						51.7181
  					],
  					[
  						21.007,
  						51.7039
  					],
  					[
  						21.0324,
  						51.6902
  					],
  					[
  						21.0734,
  						51.6983
  					],
  					[
  						21.1007,
  						51.7286
  					],
  					[
  						21.1248,
  						51.7279
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 169,
  			name: "powiat wyszkowski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.1428,
  						52.519
  					],
  					[
  						21.1196,
  						52.5315
  					],
  					[
  						21.1218,
  						52.5536
  					],
  					[
  						21.1733,
  						52.5597
  					],
  					[
  						21.1728,
  						52.574
  					],
  					[
  						21.2325,
  						52.5694
  					],
  					[
  						21.2531,
  						52.5968
  					],
  					[
  						21.2463,
  						52.6367
  					],
  					[
  						21.2832,
  						52.6335
  					],
  					[
  						21.2989,
  						52.6664
  					],
  					[
  						21.2881,
  						52.6774
  					],
  					[
  						21.338,
  						52.7047
  					],
  					[
  						21.3534,
  						52.7259
  					],
  					[
  						21.3281,
  						52.7488
  					],
  					[
  						21.3208,
  						52.7766
  					],
  					[
  						21.3228,
  						52.7866
  					],
  					[
  						21.4019,
  						52.7906
  					],
  					[
  						21.4385,
  						52.7733
  					],
  					[
  						21.4792,
  						52.8014
  					],
  					[
  						21.5976,
  						52.8084
  					],
  					[
  						21.6019,
  						52.8342
  					],
  					[
  						21.6303,
  						52.8315
  					],
  					[
  						21.6509,
  						52.8086
  					],
  					[
  						21.676,
  						52.7956
  					],
  					[
  						21.7045,
  						52.7962
  					],
  					[
  						21.6973,
  						52.7323
  					],
  					[
  						21.6509,
  						52.728
  					],
  					[
  						21.6601,
  						52.6988
  					],
  					[
  						21.7058,
  						52.7005
  					],
  					[
  						21.7222,
  						52.6802
  					],
  					[
  						21.773,
  						52.6649
  					],
  					[
  						21.7282,
  						52.6529
  					],
  					[
  						21.6754,
  						52.6302
  					],
  					[
  						21.6678,
  						52.6165
  					],
  					[
  						21.617,
  						52.6125
  					],
  					[
  						21.616,
  						52.6011
  					],
  					[
  						21.5773,
  						52.5957
  					],
  					[
  						21.5968,
  						52.5532
  					],
  					[
  						21.5578,
  						52.5535
  					],
  					[
  						21.5565,
  						52.5203
  					],
  					[
  						21.5406,
  						52.5125
  					],
  					[
  						21.5265,
  						52.482
  					],
  					[
  						21.4821,
  						52.4717
  					],
  					[
  						21.4443,
  						52.4736
  					],
  					[
  						21.4268,
  						52.4629
  					],
  					[
  						21.3796,
  						52.4713
  					],
  					[
  						21.3567,
  						52.4866
  					],
  					[
  						21.3521,
  						52.503
  					],
  					[
  						21.313,
  						52.5026
  					],
  					[
  						21.3059,
  						52.533
  					],
  					[
  						21.2253,
  						52.5337
  					],
  					[
  						21.1428,
  						52.519
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 170,
  			name: "powiat biłgorajski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.5197,
  						50.5832
  					],
  					[
  						22.5938,
  						50.5917
  					],
  					[
  						22.6453,
  						50.625
  					],
  					[
  						22.6783,
  						50.6524
  					],
  					[
  						22.6549,
  						50.664
  					],
  					[
  						22.646,
  						50.6903
  					],
  					[
  						22.6141,
  						50.7131
  					],
  					[
  						22.6503,
  						50.7258
  					],
  					[
  						22.6433,
  						50.7392
  					],
  					[
  						22.6738,
  						50.7678
  					],
  					[
  						22.642,
  						50.795
  					],
  					[
  						22.6247,
  						50.8044
  					],
  					[
  						22.6142,
  						50.8325
  					],
  					[
  						22.5781,
  						50.8384
  					],
  					[
  						22.6013,
  						50.8389
  					],
  					[
  						22.6507,
  						50.8583
  					],
  					[
  						22.6784,
  						50.8479
  					],
  					[
  						22.7128,
  						50.88
  					],
  					[
  						22.7129,
  						50.88
  					],
  					[
  						22.7128,
  						50.88
  					],
  					[
  						22.7129,
  						50.88
  					],
  					[
  						22.7712,
  						50.8844
  					],
  					[
  						22.8013,
  						50.8779
  					],
  					[
  						22.8092,
  						50.8352
  					],
  					[
  						22.8541,
  						50.815
  					],
  					[
  						22.8861,
  						50.8211
  					],
  					[
  						22.8881,
  						50.8078
  					],
  					[
  						22.8677,
  						50.7838
  					],
  					[
  						22.8286,
  						50.7839
  					],
  					[
  						22.797,
  						50.7691
  					],
  					[
  						22.7665,
  						50.7709
  					],
  					[
  						22.7834,
  						50.7238
  					],
  					[
  						22.8228,
  						50.7148
  					],
  					[
  						22.7939,
  						50.6885
  					],
  					[
  						22.8005,
  						50.6571
  					],
  					[
  						22.786,
  						50.6428
  					],
  					[
  						22.8346,
  						50.6092
  					],
  					[
  						22.835,
  						50.6313
  					],
  					[
  						22.8818,
  						50.6416
  					],
  					[
  						22.8732,
  						50.6361
  					],
  					[
  						22.9021,
  						50.5953
  					],
  					[
  						22.9303,
  						50.601
  					],
  					[
  						22.9434,
  						50.573
  					],
  					[
  						22.986,
  						50.566
  					],
  					[
  						23.004,
  						50.5222
  					],
  					[
  						23.1124,
  						50.5341
  					],
  					[
  						23.1492,
  						50.5201
  					],
  					[
  						23.1796,
  						50.4963
  					],
  					[
  						23.1166,
  						50.4667
  					],
  					[
  						23.1167,
  						50.4417
  					],
  					[
  						23.0946,
  						50.4565
  					],
  					[
  						23.048,
  						50.4216
  					],
  					[
  						23.1413,
  						50.3667
  					],
  					[
  						23.0891,
  						50.3298
  					],
  					[
  						23.0668,
  						50.3231
  					],
  					[
  						23.0541,
  						50.3058
  					],
  					[
  						23.0172,
  						50.2869
  					],
  					[
  						22.9852,
  						50.2943
  					],
  					[
  						22.9443,
  						50.2922
  					],
  					[
  						22.8806,
  						50.3008
  					],
  					[
  						22.8413,
  						50.2976
  					],
  					[
  						22.8214,
  						50.302
  					],
  					[
  						22.752,
  						50.3029
  					],
  					[
  						22.7193,
  						50.2955
  					],
  					[
  						22.7076,
  						50.2914
  					],
  					[
  						22.7009,
  						50.2947
  					],
  					[
  						22.6382,
  						50.3031
  					],
  					[
  						22.6189,
  						50.3084
  					],
  					[
  						22.6078,
  						50.3109
  					],
  					[
  						22.6079,
  						50.3108
  					],
  					[
  						22.6076,
  						50.3109
  					],
  					[
  						22.6078,
  						50.3109
  					],
  					[
  						22.6198,
  						50.3331
  					],
  					[
  						22.668,
  						50.3393
  					],
  					[
  						22.6715,
  						50.3549
  					],
  					[
  						22.6706,
  						50.3548
  					],
  					[
  						22.6694,
  						50.3541
  					],
  					[
  						22.6687,
  						50.3543
  					],
  					[
  						22.6676,
  						50.354
  					],
  					[
  						22.6676,
  						50.3539
  					],
  					[
  						22.6616,
  						50.3553
  					],
  					[
  						22.6555,
  						50.3558
  					],
  					[
  						22.644,
  						50.3583
  					],
  					[
  						22.6422,
  						50.358
  					],
  					[
  						22.6421,
  						50.358
  					],
  					[
  						22.6422,
  						50.358
  					],
  					[
  						22.6421,
  						50.358
  					],
  					[
  						22.5955,
  						50.3487
  					],
  					[
  						22.5493,
  						50.3572
  					],
  					[
  						22.5437,
  						50.3563
  					],
  					[
  						22.5149,
  						50.3458
  					],
  					[
  						22.4514,
  						50.3708
  					],
  					[
  						22.4529,
  						50.3886
  					],
  					[
  						22.4205,
  						50.4002
  					],
  					[
  						22.4054,
  						50.3944
  					],
  					[
  						22.4119,
  						50.4234
  					],
  					[
  						22.4462,
  						50.419
  					],
  					[
  						22.4563,
  						50.4522
  					],
  					[
  						22.4972,
  						50.4552
  					],
  					[
  						22.5205,
  						50.4642
  					],
  					[
  						22.5454,
  						50.452
  					],
  					[
  						22.5672,
  						50.4832
  					],
  					[
  						22.571,
  						50.5099
  					],
  					[
  						22.5412,
  						50.5057
  					],
  					[
  						22.5343,
  						50.5375
  					],
  					[
  						22.5362,
  						50.5721
  					],
  					[
  						22.5197,
  						50.5832
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 171,
  			name: "powiat chełmski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.2692,
  						51.3298
  					],
  					[
  						23.285,
  						51.3623
  					],
  					[
  						23.3503,
  						51.3506
  					],
  					[
  						23.3859,
  						51.3529
  					],
  					[
  						23.4319,
  						51.3639
  					],
  					[
  						23.4581,
  						51.3545
  					],
  					[
  						23.478,
  						51.3741
  					],
  					[
  						23.5087,
  						51.3584
  					],
  					[
  						23.5087,
  						51.3251
  					],
  					[
  						23.5595,
  						51.3168
  					],
  					[
  						23.5991,
  						51.2756
  					],
  					[
  						23.6279,
  						51.2648
  					],
  					[
  						23.6536,
  						51.2768
  					],
  					[
  						23.7093,
  						51.2773
  					],
  					[
  						23.7256,
  						51.2618
  					],
  					[
  						23.7275,
  						51.2357
  					],
  					[
  						23.7681,
  						51.2003
  					],
  					[
  						23.8089,
  						51.1846
  					],
  					[
  						23.8305,
  						51.1622
  					],
  					[
  						23.8579,
  						51.1581
  					],
  					[
  						23.8703,
  						51.1399
  					],
  					[
  						23.8504,
  						51.1249
  					],
  					[
  						23.8572,
  						51.0995
  					],
  					[
  						23.8764,
  						51.0792
  					],
  					[
  						23.9114,
  						51.0742
  					],
  					[
  						23.9182,
  						51.0254
  					],
  					[
  						23.937,
  						51.0034
  					],
  					[
  						23.9276,
  						50.9749
  					],
  					[
  						23.8754,
  						50.9732
  					],
  					[
  						23.8876,
  						50.9339
  					],
  					[
  						23.8379,
  						50.9419
  					],
  					[
  						23.7861,
  						50.9324
  					],
  					[
  						23.7724,
  						50.9238
  					],
  					[
  						23.7206,
  						50.9224
  					],
  					[
  						23.6944,
  						50.9408
  					],
  					[
  						23.6505,
  						50.9407
  					],
  					[
  						23.5999,
  						50.9314
  					],
  					[
  						23.596,
  						50.8956
  					],
  					[
  						23.6032,
  						50.8776
  					],
  					[
  						23.5804,
  						50.8735
  					],
  					[
  						23.5483,
  						50.8836
  					],
  					[
  						23.4775,
  						50.8891
  					],
  					[
  						23.4795,
  						50.8983
  					],
  					[
  						23.4789,
  						50.8985
  					],
  					[
  						23.4319,
  						50.9328
  					],
  					[
  						23.4273,
  						50.9518
  					],
  					[
  						23.3857,
  						50.9786
  					],
  					[
  						23.455,
  						51.0151
  					],
  					[
  						23.4486,
  						51.0416
  					],
  					[
  						23.4295,
  						51.0384
  					],
  					[
  						23.3588,
  						51.0502
  					],
  					[
  						23.3418,
  						51.0452
  					],
  					[
  						23.2739,
  						51.0572
  					],
  					[
  						23.2296,
  						51.0719
  					],
  					[
  						23.1918,
  						51.0777
  					],
  					[
  						23.17,
  						51.0988
  					],
  					[
  						23.0756,
  						51.0851
  					],
  					[
  						23.0647,
  						51.0973
  					],
  					[
  						23.0625,
  						51.098
  					],
  					[
  						23.0528,
  						51.1137
  					],
  					[
  						23.0521,
  						51.1465
  					],
  					[
  						23.0406,
  						51.1536
  					],
  					[
  						23.0409,
  						51.1836
  					],
  					[
  						23.0404,
  						51.2051
  					],
  					[
  						23.0711,
  						51.2219
  					],
  					[
  						23.0918,
  						51.243
  					],
  					[
  						23.1386,
  						51.2375
  					],
  					[
  						23.1632,
  						51.2596
  					],
  					[
  						23.2073,
  						51.2619
  					],
  					[
  						23.2339,
  						51.3138
  					],
  					[
  						23.2692,
  						51.3298
  					]
  				],
  				[
  					[
  						23.4899,
  						51.1033
  					],
  					[
  						23.5302,
  						51.1105
  					],
  					[
  						23.5462,
  						51.1412
  					],
  					[
  						23.5002,
  						51.1513
  					],
  					[
  						23.463,
  						51.1679
  					],
  					[
  						23.42,
  						51.1489
  					],
  					[
  						23.4528,
  						51.1159
  					],
  					[
  						23.4899,
  						51.1033
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 172,
  			name: "powiat parczewski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.3209,
  						51.6566
  					],
  					[
  						23.3109,
  						51.6278
  					],
  					[
  						23.2528,
  						51.6324
  					],
  					[
  						23.2562,
  						51.6114
  					],
  					[
  						23.2283,
  						51.6058
  					],
  					[
  						23.2018,
  						51.6144
  					],
  					[
  						23.1783,
  						51.5959
  					],
  					[
  						23.1548,
  						51.5561
  					],
  					[
  						23.2161,
  						51.5141
  					],
  					[
  						23.1927,
  						51.467
  					],
  					[
  						23.1765,
  						51.4593
  					],
  					[
  						23.1035,
  						51.4656
  					],
  					[
  						23.0912,
  						51.4621
  					],
  					[
  						23.0636,
  						51.4215
  					],
  					[
  						23.0198,
  						51.4345
  					],
  					[
  						23.0039,
  						51.4175
  					],
  					[
  						22.9812,
  						51.4239
  					],
  					[
  						22.973,
  						51.4697
  					],
  					[
  						23.0012,
  						51.4814
  					],
  					[
  						23.0186,
  						51.5008
  					],
  					[
  						22.9937,
  						51.5258
  					],
  					[
  						22.9703,
  						51.5255
  					],
  					[
  						22.9151,
  						51.5542
  					],
  					[
  						22.8788,
  						51.5618
  					],
  					[
  						22.8803,
  						51.5294
  					],
  					[
  						22.8465,
  						51.5308
  					],
  					[
  						22.8247,
  						51.517
  					],
  					[
  						22.7853,
  						51.5208
  					],
  					[
  						22.7851,
  						51.5607
  					],
  					[
  						22.7257,
  						51.5714
  					],
  					[
  						22.6772,
  						51.5933
  					],
  					[
  						22.683,
  						51.6177
  					],
  					[
  						22.7196,
  						51.6592
  					],
  					[
  						22.7235,
  						51.6774
  					],
  					[
  						22.774,
  						51.6767
  					],
  					[
  						22.8219,
  						51.7331
  					],
  					[
  						22.8543,
  						51.7284
  					],
  					[
  						22.8734,
  						51.7412
  					],
  					[
  						22.9101,
  						51.7436
  					],
  					[
  						22.9443,
  						51.7907
  					],
  					[
  						22.9837,
  						51.7861
  					],
  					[
  						23.0019,
  						51.7718
  					],
  					[
  						23.023,
  						51.7803
  					],
  					[
  						23.0397,
  						51.7617
  					],
  					[
  						23.0693,
  						51.754
  					],
  					[
  						23.1209,
  						51.7508
  					],
  					[
  						23.1715,
  						51.705
  					],
  					[
  						23.1965,
  						51.7164
  					],
  					[
  						23.2309,
  						51.7141
  					],
  					[
  						23.2883,
  						51.6964
  					],
  					[
  						23.3209,
  						51.6566
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 173,
  			name: "powiat świdnicki",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.7699,
  						51.2781
  					],
  					[
  						22.8084,
  						51.2845
  					],
  					[
  						22.8454,
  						51.2707
  					],
  					[
  						22.8582,
  						51.254
  					],
  					[
  						22.8447,
  						51.2352
  					],
  					[
  						22.8598,
  						51.215
  					],
  					[
  						22.8758,
  						51.1807
  					],
  					[
  						22.923,
  						51.174
  					],
  					[
  						22.9756,
  						51.1958
  					],
  					[
  						22.9993,
  						51.1788
  					],
  					[
  						23.0409,
  						51.1836
  					],
  					[
  						23.0406,
  						51.1536
  					],
  					[
  						23.0521,
  						51.1465
  					],
  					[
  						23.0528,
  						51.1137
  					],
  					[
  						23.0625,
  						51.098
  					],
  					[
  						23.0647,
  						51.0973
  					],
  					[
  						23.0363,
  						51.0876
  					],
  					[
  						23.0056,
  						51.0929
  					],
  					[
  						22.9594,
  						51.1197
  					],
  					[
  						22.9241,
  						51.1185
  					],
  					[
  						22.8774,
  						51.0593
  					],
  					[
  						22.8934,
  						51.0491
  					],
  					[
  						22.9015,
  						51.0243
  					],
  					[
  						22.9519,
  						51.0211
  					],
  					[
  						22.9469,
  						51.0012
  					],
  					[
  						22.9264,
  						50.9972
  					],
  					[
  						22.9177,
  						50.9765
  					],
  					[
  						22.879,
  						50.9652
  					],
  					[
  						22.8447,
  						50.9743
  					],
  					[
  						22.8135,
  						50.9734
  					],
  					[
  						22.7773,
  						50.9928
  					],
  					[
  						22.8101,
  						51.0183
  					],
  					[
  						22.8117,
  						51.0409
  					],
  					[
  						22.7874,
  						51.0536
  					],
  					[
  						22.7725,
  						51.0737
  					],
  					[
  						22.6988,
  						51.1031
  					],
  					[
  						22.6811,
  						51.1521
  					],
  					[
  						22.6868,
  						51.1776
  					],
  					[
  						22.7013,
  						51.1911
  					],
  					[
  						22.6388,
  						51.214
  					],
  					[
  						22.6645,
  						51.2425
  					],
  					[
  						22.7199,
  						51.235
  					],
  					[
  						22.7418,
  						51.2501
  					],
  					[
  						22.724,
  						51.2641
  					],
  					[
  						22.7699,
  						51.2781
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 174,
  			name: "powiat kutnowski",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.2892,
  						52.3927
  					],
  					[
  						19.3287,
  						52.3607
  					],
  					[
  						19.3222,
  						52.3484
  					],
  					[
  						19.3585,
  						52.3415
  					],
  					[
  						19.4059,
  						52.3451
  					],
  					[
  						19.4261,
  						52.3373
  					],
  					[
  						19.4628,
  						52.3429
  					],
  					[
  						19.5021,
  						52.3333
  					],
  					[
  						19.4915,
  						52.3203
  					],
  					[
  						19.5486,
  						52.2941
  					],
  					[
  						19.616,
  						52.2882
  					],
  					[
  						19.6238,
  						52.264
  					],
  					[
  						19.6729,
  						52.2561
  					],
  					[
  						19.699,
  						52.2785
  					],
  					[
  						19.7361,
  						52.2586
  					],
  					[
  						19.764,
  						52.2294
  					],
  					[
  						19.7376,
  						52.2091
  					],
  					[
  						19.7137,
  						52.2038
  					],
  					[
  						19.7173,
  						52.1794
  					],
  					[
  						19.689,
  						52.1723
  					],
  					[
  						19.698,
  						52.1435
  					],
  					[
  						19.6465,
  						52.1375
  					],
  					[
  						19.6348,
  						52.1202
  					],
  					[
  						19.6085,
  						52.1158
  					],
  					[
  						19.5314,
  						52.1249
  					],
  					[
  						19.5293,
  						52.1322
  					],
  					[
  						19.468,
  						52.1294
  					],
  					[
  						19.4505,
  						52.12
  					],
  					[
  						19.3909,
  						52.1098
  					],
  					[
  						19.356,
  						52.113
  					],
  					[
  						19.3494,
  						52.1446
  					],
  					[
  						19.3201,
  						52.1716
  					],
  					[
  						19.2934,
  						52.1765
  					],
  					[
  						19.2669,
  						52.163
  					],
  					[
  						19.2508,
  						52.1823
  					],
  					[
  						19.2137,
  						52.1819
  					],
  					[
  						19.1786,
  						52.2054
  					],
  					[
  						19.1359,
  						52.1954
  					],
  					[
  						19.0776,
  						52.2001
  					],
  					[
  						19.0898,
  						52.2067
  					],
  					[
  						19.0805,
  						52.2385
  					],
  					[
  						19.1025,
  						52.2425
  					],
  					[
  						19.0948,
  						52.2706
  					],
  					[
  						19.05,
  						52.2734
  					],
  					[
  						19.0363,
  						52.3154
  					],
  					[
  						19.0471,
  						52.3328
  					],
  					[
  						19.1008,
  						52.3479
  					],
  					[
  						19.1596,
  						52.3408
  					],
  					[
  						19.2092,
  						52.3534
  					],
  					[
  						19.2639,
  						52.3842
  					],
  					[
  						19.2892,
  						52.3927
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 175,
  			name: "powiat łódzki wschodni",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.9813,
  						51.741
  					],
  					[
  						19.9129,
  						51.6644
  					],
  					[
  						19.881,
  						51.6637
  					],
  					[
  						19.8708,
  						51.6858
  					],
  					[
  						19.7907,
  						51.708
  					],
  					[
  						19.7519,
  						51.7102
  					],
  					[
  						19.7335,
  						51.6926
  					],
  					[
  						19.7208,
  						51.6387
  					],
  					[
  						19.7083,
  						51.6295
  					],
  					[
  						19.6903,
  						51.6495
  					],
  					[
  						19.6644,
  						51.649
  					],
  					[
  						19.6374,
  						51.6258
  					],
  					[
  						19.6158,
  						51.59
  					],
  					[
  						19.5942,
  						51.5811
  					],
  					[
  						19.6166,
  						51.5559
  					],
  					[
  						19.5981,
  						51.515
  					],
  					[
  						19.5411,
  						51.513
  					],
  					[
  						19.5059,
  						51.5218
  					],
  					[
  						19.4683,
  						51.5426
  					],
  					[
  						19.4761,
  						51.5674
  					],
  					[
  						19.4523,
  						51.5778
  					],
  					[
  						19.4668,
  						51.603
  					],
  					[
  						19.4189,
  						51.6313
  					],
  					[
  						19.4354,
  						51.6465
  					],
  					[
  						19.4318,
  						51.6866
  					],
  					[
  						19.4687,
  						51.6883
  					],
  					[
  						19.4841,
  						51.6981
  					],
  					[
  						19.5615,
  						51.697
  					],
  					[
  						19.5766,
  						51.7066
  					],
  					[
  						19.6075,
  						51.6976
  					],
  					[
  						19.6295,
  						51.7235
  					],
  					[
  						19.6164,
  						51.8144
  					],
  					[
  						19.5779,
  						51.8155
  					],
  					[
  						19.568,
  						51.8376
  					],
  					[
  						19.6101,
  						51.8473
  					],
  					[
  						19.6223,
  						51.8576
  					],
  					[
  						19.6605,
  						51.8538
  					],
  					[
  						19.6543,
  						51.8277
  					],
  					[
  						19.6778,
  						51.8043
  					],
  					[
  						19.68,
  						51.7791
  					],
  					[
  						19.6446,
  						51.7571
  					],
  					[
  						19.6682,
  						51.738
  					],
  					[
  						19.685,
  						51.7522
  					],
  					[
  						19.7306,
  						51.7502
  					],
  					[
  						19.7387,
  						51.7587
  					],
  					[
  						19.7648,
  						51.7492
  					],
  					[
  						19.8443,
  						51.7831
  					],
  					[
  						19.8714,
  						51.7746
  					],
  					[
  						19.9092,
  						51.7763
  					],
  					[
  						19.9353,
  						51.7639
  					],
  					[
  						19.917,
  						51.7513
  					],
  					[
  						19.9396,
  						51.7398
  					],
  					[
  						19.9813,
  						51.741
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 176,
  			name: "powiat kolbuszowski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.6479,
  						50.4101
  					],
  					[
  						21.6705,
  						50.4369
  					],
  					[
  						21.7568,
  						50.3878
  					],
  					[
  						21.7973,
  						50.406
  					],
  					[
  						21.793,
  						50.4356
  					],
  					[
  						21.7764,
  						50.4492
  					],
  					[
  						21.8528,
  						50.4705
  					],
  					[
  						21.8822,
  						50.4729
  					],
  					[
  						21.8519,
  						50.4623
  					],
  					[
  						21.8812,
  						50.3919
  					],
  					[
  						21.9192,
  						50.4148
  					],
  					[
  						21.952,
  						50.384
  					],
  					[
  						21.9839,
  						50.3674
  					],
  					[
  						21.9947,
  						50.3325
  					],
  					[
  						21.9732,
  						50.3131
  					],
  					[
  						22.0056,
  						50.3089
  					],
  					[
  						22.0082,
  						50.3026
  					],
  					[
  						22.086,
  						50.3076
  					],
  					[
  						22.0813,
  						50.2861
  					],
  					[
  						22.0935,
  						50.2691
  					],
  					[
  						22.08,
  						50.2637
  					],
  					[
  						22.0303,
  						50.2323
  					],
  					[
  						22.0219,
  						50.2308
  					],
  					[
  						22.0142,
  						50.2317
  					],
  					[
  						22.0136,
  						50.2319
  					],
  					[
  						22.0109,
  						50.2322
  					],
  					[
  						22.0103,
  						50.232
  					],
  					[
  						22.0092,
  						50.2323
  					],
  					[
  						22.0091,
  						50.2323
  					],
  					[
  						22.0092,
  						50.2323
  					],
  					[
  						22.0091,
  						50.2323
  					],
  					[
  						22.0059,
  						50.2323
  					],
  					[
  						22.0055,
  						50.2323
  					],
  					[
  						22.0044,
  						50.2323
  					],
  					[
  						21.9969,
  						50.2341
  					],
  					[
  						21.9507,
  						50.2487
  					],
  					[
  						21.9202,
  						50.2357
  					],
  					[
  						21.9308,
  						50.1983
  					],
  					[
  						21.9275,
  						50.1939
  					],
  					[
  						21.9193,
  						50.187
  					],
  					[
  						21.9193,
  						50.1866
  					],
  					[
  						21.8648,
  						50.1774
  					],
  					[
  						21.8594,
  						50.151
  					],
  					[
  						21.8034,
  						50.1514
  					],
  					[
  						21.7963,
  						50.1693
  					],
  					[
  						21.771,
  						50.1729
  					],
  					[
  						21.7459,
  						50.1578
  					],
  					[
  						21.6953,
  						50.1786
  					],
  					[
  						21.6269,
  						50.1843
  					],
  					[
  						21.631,
  						50.2009
  					],
  					[
  						21.6027,
  						50.2091
  					],
  					[
  						21.5767,
  						50.2227
  					],
  					[
  						21.6102,
  						50.2497
  					],
  					[
  						21.5561,
  						50.2762
  					],
  					[
  						21.5304,
  						50.2948
  					],
  					[
  						21.5739,
  						50.2961
  					],
  					[
  						21.5668,
  						50.3323
  					],
  					[
  						21.6011,
  						50.3425
  					],
  					[
  						21.6376,
  						50.3432
  					],
  					[
  						21.5985,
  						50.3869
  					],
  					[
  						21.5996,
  						50.3871
  					],
  					[
  						21.6368,
  						50.39
  					],
  					[
  						21.6479,
  						50.4101
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 177,
  			name: "powiat oleski",
  			province: "Opolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.5177,
  						51.113
  					],
  					[
  						18.5208,
  						51.1403
  					],
  					[
  						18.5537,
  						51.1388
  					],
  					[
  						18.5623,
  						51.1065
  					],
  					[
  						18.5808,
  						51.0903
  					],
  					[
  						18.6235,
  						51.0769
  					],
  					[
  						18.6232,
  						51.0766
  					],
  					[
  						18.6232,
  						51.076
  					],
  					[
  						18.6232,
  						51.0756
  					],
  					[
  						18.6232,
  						51.0755
  					],
  					[
  						18.6375,
  						51.0634
  					],
  					[
  						18.673,
  						51.0569
  					],
  					[
  						18.6954,
  						51.0157
  					],
  					[
  						18.6562,
  						51.005
  					],
  					[
  						18.6682,
  						50.989
  					],
  					[
  						18.6483,
  						50.9693
  					],
  					[
  						18.6483,
  						50.969
  					],
  					[
  						18.6124,
  						50.9551
  					],
  					[
  						18.6303,
  						50.9312
  					],
  					[
  						18.6488,
  						50.9313
  					],
  					[
  						18.6545,
  						50.9147
  					],
  					[
  						18.6159,
  						50.8536
  					],
  					[
  						18.5882,
  						50.8516
  					],
  					[
  						18.558,
  						50.8341
  					],
  					[
  						18.5622,
  						50.8089
  					],
  					[
  						18.5219,
  						50.8024
  					],
  					[
  						18.5272,
  						50.7801
  					],
  					[
  						18.55,
  						50.7596
  					],
  					[
  						18.5483,
  						50.732
  					],
  					[
  						18.509,
  						50.7261
  					],
  					[
  						18.4839,
  						50.7083
  					],
  					[
  						18.4994,
  						50.6895
  					],
  					[
  						18.4941,
  						50.6643
  					],
  					[
  						18.5133,
  						50.6581
  					],
  					[
  						18.5132,
  						50.6307
  					],
  					[
  						18.4699,
  						50.6208
  					],
  					[
  						18.4557,
  						50.6618
  					],
  					[
  						18.4588,
  						50.6793
  					],
  					[
  						18.3839,
  						50.7024
  					],
  					[
  						18.3427,
  						50.6958
  					],
  					[
  						18.2974,
  						50.7294
  					],
  					[
  						18.274,
  						50.7229
  					],
  					[
  						18.2349,
  						50.7438
  					],
  					[
  						18.2639,
  						50.7606
  					],
  					[
  						18.2541,
  						50.7811
  					],
  					[
  						18.2302,
  						50.7968
  					],
  					[
  						18.2656,
  						50.8154
  					],
  					[
  						18.351,
  						50.8114
  					],
  					[
  						18.3298,
  						50.8398
  					],
  					[
  						18.3601,
  						50.8507
  					],
  					[
  						18.3357,
  						50.8843
  					],
  					[
  						18.3313,
  						50.9094
  					],
  					[
  						18.3467,
  						50.9395
  					],
  					[
  						18.3805,
  						50.954
  					],
  					[
  						18.3611,
  						50.9714
  					],
  					[
  						18.3514,
  						51.0022
  					],
  					[
  						18.3148,
  						51.0193
  					],
  					[
  						18.3075,
  						51.0412
  					],
  					[
  						18.3459,
  						51.0614
  					],
  					[
  						18.3481,
  						51.0936
  					],
  					[
  						18.3147,
  						51.0985
  					],
  					[
  						18.315,
  						51.134
  					],
  					[
  						18.3497,
  						51.1372
  					],
  					[
  						18.4219,
  						51.1171
  					],
  					[
  						18.4543,
  						51.1151
  					],
  					[
  						18.4987,
  						51.0996
  					],
  					[
  						18.5177,
  						51.113
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 178,
  			name: "powiat strzelecki",
  			province: "Opolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.3427,
  						50.6958
  					],
  					[
  						18.3839,
  						50.7024
  					],
  					[
  						18.4588,
  						50.6793
  					],
  					[
  						18.4557,
  						50.6618
  					],
  					[
  						18.4699,
  						50.6208
  					],
  					[
  						18.5132,
  						50.6307
  					],
  					[
  						18.5174,
  						50.6255
  					],
  					[
  						18.5873,
  						50.6138
  					],
  					[
  						18.6017,
  						50.6045
  					],
  					[
  						18.5908,
  						50.5778
  					],
  					[
  						18.6162,
  						50.5692
  					],
  					[
  						18.6075,
  						50.55
  					],
  					[
  						18.559,
  						50.5401
  					],
  					[
  						18.4779,
  						50.5527
  					],
  					[
  						18.4356,
  						50.5447
  					],
  					[
  						18.4479,
  						50.4994
  					],
  					[
  						18.4665,
  						50.4995
  					],
  					[
  						18.4813,
  						50.4583
  					],
  					[
  						18.452,
  						50.4626
  					],
  					[
  						18.44,
  						50.4807
  					],
  					[
  						18.4097,
  						50.4746
  					],
  					[
  						18.3796,
  						50.4788
  					],
  					[
  						18.3872,
  						50.4323
  					],
  					[
  						18.3698,
  						50.4158
  					],
  					[
  						18.3699,
  						50.4158
  					],
  					[
  						18.3698,
  						50.4158
  					],
  					[
  						18.3699,
  						50.4158
  					],
  					[
  						18.3936,
  						50.3915
  					],
  					[
  						18.3577,
  						50.3566
  					],
  					[
  						18.3301,
  						50.3817
  					],
  					[
  						18.2902,
  						50.4012
  					],
  					[
  						18.2756,
  						50.3871
  					],
  					[
  						18.1889,
  						50.3766
  					],
  					[
  						18.1535,
  						50.3866
  					],
  					[
  						18.1604,
  						50.3999
  					],
  					[
  						18.1479,
  						50.4297
  					],
  					[
  						18.1466,
  						50.4563
  					],
  					[
  						18.129,
  						50.4804
  					],
  					[
  						18.1051,
  						50.4859
  					],
  					[
  						18.0908,
  						50.5118
  					],
  					[
  						18.118,
  						50.5543
  					],
  					[
  						18.1289,
  						50.5785
  					],
  					[
  						18.1579,
  						50.5983
  					],
  					[
  						18.2071,
  						50.6495
  					],
  					[
  						18.2431,
  						50.6372
  					],
  					[
  						18.2788,
  						50.6429
  					],
  					[
  						18.2775,
  						50.6711
  					],
  					[
  						18.3048,
  						50.6714
  					],
  					[
  						18.3427,
  						50.6958
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 179,
  			name: "powiat złotowski",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.8487,
  						53.6287
  					],
  					[
  						16.8665,
  						53.6503
  					],
  					[
  						16.8922,
  						53.6559
  					],
  					[
  						16.8934,
  						53.6285
  					],
  					[
  						16.941,
  						53.5817
  					],
  					[
  						16.9488,
  						53.5496
  					],
  					[
  						16.9794,
  						53.556
  					],
  					[
  						17.0014,
  						53.5498
  					],
  					[
  						16.9941,
  						53.5319
  					],
  					[
  						17.0328,
  						53.5158
  					],
  					[
  						17.0646,
  						53.5232
  					],
  					[
  						17.0898,
  						53.5427
  					],
  					[
  						17.1637,
  						53.5281
  					],
  					[
  						17.1724,
  						53.5327
  					],
  					[
  						17.2822,
  						53.5337
  					],
  					[
  						17.3055,
  						53.5127
  					],
  					[
  						17.3507,
  						53.4935
  					],
  					[
  						17.3907,
  						53.491
  					],
  					[
  						17.3825,
  						53.4686
  					],
  					[
  						17.3476,
  						53.4534
  					],
  					[
  						17.3456,
  						53.4529
  					],
  					[
  						17.3309,
  						53.4364
  					],
  					[
  						17.2947,
  						53.4218
  					],
  					[
  						17.2957,
  						53.4037
  					],
  					[
  						17.248,
  						53.3756
  					],
  					[
  						17.2572,
  						53.3634
  					],
  					[
  						17.2659,
  						53.3508
  					],
  					[
  						17.2576,
  						53.3256
  					],
  					[
  						17.2449,
  						53.3115
  					],
  					[
  						17.2098,
  						53.3035
  					],
  					[
  						17.1859,
  						53.2891
  					],
  					[
  						17.1893,
  						53.2715
  					],
  					[
  						17.142,
  						53.262
  					],
  					[
  						17.1393,
  						53.2376
  					],
  					[
  						17.0771,
  						53.2396
  					],
  					[
  						17.0453,
  						53.224
  					],
  					[
  						16.9956,
  						53.2343
  					],
  					[
  						16.9135,
  						53.2049
  					],
  					[
  						16.914,
  						53.1789
  					],
  					[
  						16.857,
  						53.1779
  					],
  					[
  						16.7873,
  						53.1884
  					],
  					[
  						16.7864,
  						53.2083
  					],
  					[
  						16.8216,
  						53.2415
  					],
  					[
  						16.8001,
  						53.2515
  					],
  					[
  						16.8006,
  						53.2516
  					],
  					[
  						16.8025,
  						53.2523
  					],
  					[
  						16.7815,
  						53.2903
  					],
  					[
  						16.7145,
  						53.2991
  					],
  					[
  						16.6566,
  						53.3209
  					],
  					[
  						16.6235,
  						53.3462
  					],
  					[
  						16.594,
  						53.345
  					],
  					[
  						16.5257,
  						53.3672
  					],
  					[
  						16.4994,
  						53.385
  					],
  					[
  						16.4751,
  						53.3881
  					],
  					[
  						16.4398,
  						53.4593
  					],
  					[
  						16.4542,
  						53.4885
  					],
  					[
  						16.4901,
  						53.4703
  					],
  					[
  						16.5844,
  						53.4837
  					],
  					[
  						16.6417,
  						53.4842
  					],
  					[
  						16.6954,
  						53.5181
  					],
  					[
  						16.7206,
  						53.5262
  					],
  					[
  						16.7278,
  						53.5673
  					],
  					[
  						16.7603,
  						53.6175
  					],
  					[
  						16.8138,
  						53.6308
  					],
  					[
  						16.8487,
  						53.6287
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 180,
  			name: "powiat Suwałki",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.9813,
  						54.1058
  					],
  					[
  						22.9771,
  						54.1005
  					],
  					[
  						22.9933,
  						54.0688
  					],
  					[
  						22.9373,
  						54.0514
  					],
  					[
  						22.9011,
  						54.0603
  					],
  					[
  						22.8722,
  						54.1154
  					],
  					[
  						22.8917,
  						54.1339
  					],
  					[
  						22.9309,
  						54.1394
  					],
  					[
  						22.9318,
  						54.1573
  					],
  					[
  						22.9731,
  						54.154
  					],
  					[
  						22.9813,
  						54.1058
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 181,
  			name: "powiat kościański",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.8601,
  						51.9271
  					],
  					[
  						16.8169,
  						51.9355
  					],
  					[
  						16.8039,
  						51.9491
  					],
  					[
  						16.7779,
  						51.9482
  					],
  					[
  						16.7013,
  						51.9669
  					],
  					[
  						16.6045,
  						51.9621
  					],
  					[
  						16.5816,
  						51.9677
  					],
  					[
  						16.5523,
  						51.9556
  					],
  					[
  						16.5037,
  						51.9589
  					],
  					[
  						16.4939,
  						51.9441
  					],
  					[
  						16.4256,
  						51.9585
  					],
  					[
  						16.4264,
  						51.9737
  					],
  					[
  						16.4525,
  						52.0081
  					],
  					[
  						16.4467,
  						52.0336
  					],
  					[
  						16.4504,
  						52.0533
  					],
  					[
  						16.4698,
  						52.0571
  					],
  					[
  						16.4661,
  						52.0821
  					],
  					[
  						16.5244,
  						52.0947
  					],
  					[
  						16.5227,
  						52.1115
  					],
  					[
  						16.5671,
  						52.1227
  					],
  					[
  						16.5727,
  						52.1479
  					],
  					[
  						16.603,
  						52.1711
  					],
  					[
  						16.626,
  						52.1894
  					],
  					[
  						16.6844,
  						52.2092
  					],
  					[
  						16.7102,
  						52.1936
  					],
  					[
  						16.7413,
  						52.2155
  					],
  					[
  						16.7813,
  						52.2029
  					],
  					[
  						16.7746,
  						52.1851
  					],
  					[
  						16.7993,
  						52.1768
  					],
  					[
  						16.7903,
  						52.1408
  					],
  					[
  						16.8219,
  						52.1184
  					],
  					[
  						16.8581,
  						52.1152
  					],
  					[
  						16.8919,
  						52.0661
  					],
  					[
  						16.9181,
  						52.0684
  					],
  					[
  						16.917,
  						52.046
  					],
  					[
  						16.8884,
  						52.0213
  					],
  					[
  						16.9431,
  						52.0157
  					],
  					[
  						16.9793,
  						52.0022
  					],
  					[
  						17.0047,
  						51.9802
  					],
  					[
  						17.0097,
  						51.9651
  					],
  					[
  						16.9676,
  						51.9556
  					],
  					[
  						16.9066,
  						51.918
  					],
  					[
  						16.8601,
  						51.9271
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 182,
  			name: "powiat grodziski",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.4504,
  						52.0533
  					],
  					[
  						16.4467,
  						52.0336
  					],
  					[
  						16.3767,
  						52.0546
  					],
  					[
  						16.3714,
  						52.0744
  					],
  					[
  						16.3405,
  						52.0841
  					],
  					[
  						16.2832,
  						52.0579
  					],
  					[
  						16.2521,
  						52.0943
  					],
  					[
  						16.2146,
  						52.0943
  					],
  					[
  						16.1705,
  						52.1394
  					],
  					[
  						16.1499,
  						52.1476
  					],
  					[
  						16.1592,
  						52.1759
  					],
  					[
  						16.1067,
  						52.1626
  					],
  					[
  						16.0874,
  						52.1758
  					],
  					[
  						16.0756,
  						52.2081
  					],
  					[
  						16.0725,
  						52.2437
  					],
  					[
  						16.1637,
  						52.2265
  					],
  					[
  						16.1797,
  						52.2532
  					],
  					[
  						16.1734,
  						52.2681
  					],
  					[
  						16.2262,
  						52.2717
  					],
  					[
  						16.2995,
  						52.2872
  					],
  					[
  						16.3698,
  						52.2662
  					],
  					[
  						16.3906,
  						52.2673
  					],
  					[
  						16.4201,
  						52.2488
  					],
  					[
  						16.4572,
  						52.2684
  					],
  					[
  						16.4799,
  						52.2504
  					],
  					[
  						16.5127,
  						52.2699
  					],
  					[
  						16.572,
  						52.284
  					],
  					[
  						16.604,
  						52.2707
  					],
  					[
  						16.6074,
  						52.2565
  					],
  					[
  						16.5891,
  						52.2363
  					],
  					[
  						16.603,
  						52.1711
  					],
  					[
  						16.5727,
  						52.1479
  					],
  					[
  						16.5671,
  						52.1227
  					],
  					[
  						16.5227,
  						52.1115
  					],
  					[
  						16.5244,
  						52.0947
  					],
  					[
  						16.4661,
  						52.0821
  					],
  					[
  						16.4698,
  						52.0571
  					],
  					[
  						16.4504,
  						52.0533
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 183,
  			name: "powiat szamotulski",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.0138,
  						52.7347
  					],
  					[
  						16.0616,
  						52.7285
  					],
  					[
  						16.0664,
  						52.7489
  					],
  					[
  						16.1391,
  						52.7855
  					],
  					[
  						16.185,
  						52.7941
  					],
  					[
  						16.2419,
  						52.7932
  					],
  					[
  						16.2858,
  						52.7659
  					],
  					[
  						16.3128,
  						52.7764
  					],
  					[
  						16.3367,
  						52.7607
  					],
  					[
  						16.3583,
  						52.7756
  					],
  					[
  						16.4394,
  						52.7661
  					],
  					[
  						16.4318,
  						52.7502
  					],
  					[
  						16.5172,
  						52.7596
  					],
  					[
  						16.5582,
  						52.7388
  					],
  					[
  						16.5833,
  						52.7431
  					],
  					[
  						16.588,
  						52.7113
  					],
  					[
  						16.6371,
  						52.6895
  					],
  					[
  						16.6001,
  						52.6667
  					],
  					[
  						16.641,
  						52.6278
  					],
  					[
  						16.6545,
  						52.5985
  					],
  					[
  						16.6996,
  						52.5728
  					],
  					[
  						16.7298,
  						52.5661
  					],
  					[
  						16.7336,
  						52.5442
  					],
  					[
  						16.7048,
  						52.5317
  					],
  					[
  						16.6498,
  						52.5296
  					],
  					[
  						16.6495,
  						52.5143
  					],
  					[
  						16.6289,
  						52.4943
  					],
  					[
  						16.6039,
  						52.454
  					],
  					[
  						16.5849,
  						52.4422
  					],
  					[
  						16.5992,
  						52.4198
  					],
  					[
  						16.584,
  						52.3976
  					],
  					[
  						16.4607,
  						52.3766
  					],
  					[
  						16.4414,
  						52.3876
  					],
  					[
  						16.4423,
  						52.4052
  					],
  					[
  						16.4095,
  						52.4047
  					],
  					[
  						16.3611,
  						52.4254
  					],
  					[
  						16.29,
  						52.4716
  					],
  					[
  						16.2533,
  						52.4733
  					],
  					[
  						16.2312,
  						52.4891
  					],
  					[
  						16.1942,
  						52.4889
  					],
  					[
  						16.1864,
  						52.5071
  					],
  					[
  						16.2324,
  						52.5286
  					],
  					[
  						16.2574,
  						52.5695
  					],
  					[
  						16.2902,
  						52.579
  					],
  					[
  						16.259,
  						52.6025
  					],
  					[
  						16.2685,
  						52.6183
  					],
  					[
  						16.3385,
  						52.6203
  					],
  					[
  						16.2818,
  						52.6504
  					],
  					[
  						16.2475,
  						52.6517
  					],
  					[
  						16.207,
  						52.6779
  					],
  					[
  						16.1233,
  						52.6877
  					],
  					[
  						16.0788,
  						52.7041
  					],
  					[
  						16.0564,
  						52.7238
  					],
  					[
  						16.0321,
  						52.7206
  					],
  					[
  						16.0138,
  						52.7347
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 184,
  			name: "powiat Kielce",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.6774,
  						50.8629
  					],
  					[
  						20.7205,
  						50.8623
  					],
  					[
  						20.6729,
  						50.8441
  					],
  					[
  						20.6453,
  						50.8073
  					],
  					[
  						20.6151,
  						50.8055
  					],
  					[
  						20.5887,
  						50.8169
  					],
  					[
  						20.5532,
  						50.8128
  					],
  					[
  						20.5353,
  						50.8389
  					],
  					[
  						20.516,
  						50.8409
  					],
  					[
  						20.528,
  						50.8734
  					],
  					[
  						20.5499,
  						50.9024
  					],
  					[
  						20.6165,
  						50.9123
  					],
  					[
  						20.6601,
  						50.9034
  					],
  					[
  						20.6774,
  						50.8629
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 185,
  			name: "powiat staszowski",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.8741,
  						50.6357
  					],
  					[
  						20.8781,
  						50.6614
  					],
  					[
  						20.9052,
  						50.6547
  					],
  					[
  						20.9445,
  						50.6583
  					],
  					[
  						20.9553,
  						50.6727
  					],
  					[
  						20.9969,
  						50.6689
  					],
  					[
  						20.9959,
  						50.633
  					],
  					[
  						21.0354,
  						50.6457
  					],
  					[
  						21.0671,
  						50.6301
  					],
  					[
  						21.141,
  						50.6379
  					],
  					[
  						21.1575,
  						50.6474
  					],
  					[
  						21.1622,
  						50.6921
  					],
  					[
  						21.1622,
  						50.6922
  					],
  					[
  						21.1622,
  						50.6921
  					],
  					[
  						21.1458,
  						50.6988
  					],
  					[
  						21.1976,
  						50.7019
  					],
  					[
  						21.2683,
  						50.6852
  					],
  					[
  						21.2838,
  						50.6949
  					],
  					[
  						21.3502,
  						50.6835
  					],
  					[
  						21.3551,
  						50.6559
  					],
  					[
  						21.3969,
  						50.6502
  					],
  					[
  						21.3909,
  						50.6308
  					],
  					[
  						21.4032,
  						50.5911
  					],
  					[
  						21.4502,
  						50.5733
  					],
  					[
  						21.478,
  						50.5517
  					],
  					[
  						21.4828,
  						50.531
  					],
  					[
  						21.5178,
  						50.5093
  					],
  					[
  						21.4821,
  						50.4964
  					],
  					[
  						21.4427,
  						50.4847
  					],
  					[
  						21.4437,
  						50.4565
  					],
  					[
  						21.4013,
  						50.4392
  					],
  					[
  						21.3671,
  						50.441
  					],
  					[
  						21.281,
  						50.4084
  					],
  					[
  						21.2088,
  						50.3549
  					],
  					[
  						21.1657,
  						50.3423
  					],
  					[
  						21.1465,
  						50.3538
  					],
  					[
  						21.1349,
  						50.3619
  					],
  					[
  						21.1126,
  						50.3766
  					],
  					[
  						21.1255,
  						50.4031
  					],
  					[
  						21.0925,
  						50.4126
  					],
  					[
  						21.0809,
  						50.4333
  					],
  					[
  						21.0372,
  						50.4341
  					],
  					[
  						21.0069,
  						50.4513
  					],
  					[
  						21.0154,
  						50.4894
  					],
  					[
  						21.0551,
  						50.4797
  					],
  					[
  						21.0585,
  						50.4775
  					],
  					[
  						21.0759,
  						50.4765
  					],
  					[
  						21.0962,
  						50.52
  					],
  					[
  						21.0737,
  						50.5288
  					],
  					[
  						21.0529,
  						50.5663
  					],
  					[
  						21.0232,
  						50.5582
  					],
  					[
  						20.976,
  						50.5584
  					],
  					[
  						20.9506,
  						50.5682
  					],
  					[
  						20.9374,
  						50.5941
  					],
  					[
  						20.9163,
  						50.6142
  					],
  					[
  						20.9121,
  						50.6367
  					],
  					[
  						20.8741,
  						50.6357
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 186,
  			name: "powiat ełcki",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.0596,
  						53.8599
  					],
  					[
  						22.0787,
  						53.8692
  					],
  					[
  						22.1423,
  						53.8653
  					],
  					[
  						22.1543,
  						53.8822
  					],
  					[
  						22.097,
  						53.9031
  					],
  					[
  						22.0891,
  						53.9249
  					],
  					[
  						22.1175,
  						53.9821
  					],
  					[
  						22.1659,
  						54.0038
  					],
  					[
  						22.206,
  						54.0024
  					],
  					[
  						22.2434,
  						53.9773
  					],
  					[
  						22.235,
  						53.9567
  					],
  					[
  						22.2772,
  						53.941
  					],
  					[
  						22.2874,
  						53.9547
  					],
  					[
  						22.3311,
  						53.929
  					],
  					[
  						22.3557,
  						53.9386
  					],
  					[
  						22.4165,
  						53.9377
  					],
  					[
  						22.4396,
  						53.9043
  					],
  					[
  						22.4898,
  						53.8912
  					],
  					[
  						22.5947,
  						53.9026
  					],
  					[
  						22.6268,
  						53.921
  					],
  					[
  						22.6372,
  						53.9397
  					],
  					[
  						22.6655,
  						53.9484
  					],
  					[
  						22.7237,
  						53.9526
  					],
  					[
  						22.7512,
  						53.9432
  					],
  					[
  						22.7783,
  						53.9229
  					],
  					[
  						22.779,
  						53.8656
  					],
  					[
  						22.7267,
  						53.8332
  					],
  					[
  						22.7268,
  						53.8039
  					],
  					[
  						22.6968,
  						53.7616
  					],
  					[
  						22.6261,
  						53.7422
  					],
  					[
  						22.6108,
  						53.7192
  					],
  					[
  						22.5848,
  						53.7269
  					],
  					[
  						22.5142,
  						53.6992
  					],
  					[
  						22.4654,
  						53.6901
  					],
  					[
  						22.4685,
  						53.6675
  					],
  					[
  						22.423,
  						53.6815
  					],
  					[
  						22.4007,
  						53.6671
  					],
  					[
  						22.3532,
  						53.6519
  					],
  					[
  						22.3056,
  						53.6268
  					],
  					[
  						22.2473,
  						53.6487
  					],
  					[
  						22.2044,
  						53.6572
  					],
  					[
  						22.1787,
  						53.6703
  					],
  					[
  						22.1898,
  						53.7004
  					],
  					[
  						22.2229,
  						53.7113
  					],
  					[
  						22.215,
  						53.7401
  					],
  					[
  						22.1912,
  						53.7635
  					],
  					[
  						22.156,
  						53.7756
  					],
  					[
  						22.1176,
  						53.7982
  					],
  					[
  						22.1274,
  						53.8159
  					],
  					[
  						22.1024,
  						53.8351
  					],
  					[
  						22.0445,
  						53.8383
  					],
  					[
  						22.0596,
  						53.8599
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 187,
  			name: "powiat dzierżoniowski",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.6971,
  						50.8431
  					],
  					[
  						16.7277,
  						50.8376
  					],
  					[
  						16.775,
  						50.8445
  					],
  					[
  						16.824,
  						50.82
  					],
  					[
  						16.8329,
  						50.8339
  					],
  					[
  						16.8763,
  						50.8322
  					],
  					[
  						16.8884,
  						50.8122
  					],
  					[
  						16.8929,
  						50.7961
  					],
  					[
  						16.882,
  						50.7683
  					],
  					[
  						16.8893,
  						50.7582
  					],
  					[
  						16.8634,
  						50.727
  					],
  					[
  						16.893,
  						50.7197
  					],
  					[
  						16.8878,
  						50.7159
  					],
  					[
  						16.8818,
  						50.7091
  					],
  					[
  						16.8725,
  						50.6805
  					],
  					[
  						16.8492,
  						50.6784
  					],
  					[
  						16.8057,
  						50.6602
  					],
  					[
  						16.7773,
  						50.6622
  					],
  					[
  						16.7264,
  						50.6675
  					],
  					[
  						16.7008,
  						50.6598
  					],
  					[
  						16.7024,
  						50.6408
  					],
  					[
  						16.6704,
  						50.6465
  					],
  					[
  						16.6149,
  						50.625
  					],
  					[
  						16.5831,
  						50.6283
  					],
  					[
  						16.5582,
  						50.6336
  					],
  					[
  						16.5021,
  						50.6731
  					],
  					[
  						16.4797,
  						50.6811
  					],
  					[
  						16.4889,
  						50.7144
  					],
  					[
  						16.5197,
  						50.7206
  					],
  					[
  						16.5581,
  						50.7438
  					],
  					[
  						16.548,
  						50.7772
  					],
  					[
  						16.5938,
  						50.7989
  					],
  					[
  						16.5792,
  						50.818
  					],
  					[
  						16.6387,
  						50.8258
  					],
  					[
  						16.669,
  						50.8205
  					],
  					[
  						16.6971,
  						50.8431
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 188,
  			name: "powiat tczewski",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.5907,
  						54.1059
  					],
  					[
  						18.5957,
  						54.1201
  					],
  					[
  						18.6237,
  						54.1257
  					],
  					[
  						18.6289,
  						54.1423
  					],
  					[
  						18.6608,
  						54.1401
  					],
  					[
  						18.7443,
  						54.1517
  					],
  					[
  						18.8061,
  						54.1541
  					],
  					[
  						18.8282,
  						54.1416
  					],
  					[
  						18.8074,
  						54.0975
  					],
  					[
  						18.8169,
  						54.044
  					],
  					[
  						18.8369,
  						54.0185
  					],
  					[
  						18.8373,
  						53.9946
  					],
  					[
  						18.8645,
  						53.9746
  					],
  					[
  						18.8613,
  						53.9468
  					],
  					[
  						18.8617,
  						53.9279
  					],
  					[
  						18.8787,
  						53.91
  					],
  					[
  						18.8833,
  						53.882
  					],
  					[
  						18.8405,
  						53.8352
  					],
  					[
  						18.8498,
  						53.8056
  					],
  					[
  						18.8389,
  						53.7847
  					],
  					[
  						18.8565,
  						53.7489
  					],
  					[
  						18.8449,
  						53.7274
  					],
  					[
  						18.789,
  						53.7021
  					],
  					[
  						18.7084,
  						53.6865
  					],
  					[
  						18.6966,
  						53.7
  					],
  					[
  						18.6908,
  						53.7208
  					],
  					[
  						18.73,
  						53.744
  					],
  					[
  						18.7229,
  						53.7635
  					],
  					[
  						18.6998,
  						53.7737
  					],
  					[
  						18.6367,
  						53.7703
  					],
  					[
  						18.6339,
  						53.7998
  					],
  					[
  						18.5943,
  						53.8014
  					],
  					[
  						18.6123,
  						53.8277
  					],
  					[
  						18.5875,
  						53.8619
  					],
  					[
  						18.6249,
  						53.9212
  					],
  					[
  						18.6316,
  						53.935
  					],
  					[
  						18.6473,
  						53.9517
  					],
  					[
  						18.6495,
  						53.9531
  					],
  					[
  						18.6733,
  						53.9547
  					],
  					[
  						18.6588,
  						53.9825
  					],
  					[
  						18.674,
  						54.0058
  					],
  					[
  						18.6312,
  						54.0197
  					],
  					[
  						18.6175,
  						54.0338
  					],
  					[
  						18.5715,
  						54.0416
  					],
  					[
  						18.5693,
  						54.0686
  					],
  					[
  						18.5907,
  						54.1059
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 189,
  			name: "powiat kołobrzeski",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.792,
  						54.2272
  					],
  					[
  						15.7925,
  						54.2041
  					],
  					[
  						15.8196,
  						54.1667
  					],
  					[
  						15.8472,
  						54.1472
  					],
  					[
  						15.8802,
  						54.1457
  					],
  					[
  						15.8805,
  						54.1347
  					],
  					[
  						15.8328,
  						54.0843
  					],
  					[
  						15.792,
  						54.0675
  					],
  					[
  						15.7485,
  						54.0768
  					],
  					[
  						15.7393,
  						54.0271
  					],
  					[
  						15.7534,
  						54.0111
  					],
  					[
  						15.7209,
  						53.9903
  					],
  					[
  						15.7257,
  						53.964
  					],
  					[
  						15.6997,
  						53.9567
  					],
  					[
  						15.6451,
  						53.9643
  					],
  					[
  						15.6299,
  						53.946
  					],
  					[
  						15.5875,
  						53.9334
  					],
  					[
  						15.5627,
  						53.9124
  					],
  					[
  						15.5634,
  						53.8906
  					],
  					[
  						15.5313,
  						53.8736
  					],
  					[
  						15.4792,
  						53.8771
  					],
  					[
  						15.4861,
  						53.8925
  					],
  					[
  						15.4539,
  						53.893
  					],
  					[
  						15.4336,
  						53.9181
  					],
  					[
  						15.4636,
  						53.9269
  					],
  					[
  						15.4661,
  						53.9404
  					],
  					[
  						15.4261,
  						53.966
  					],
  					[
  						15.4206,
  						54.0148
  					],
  					[
  						15.4349,
  						54.0402
  					],
  					[
  						15.4549,
  						54.0482
  					],
  					[
  						15.4382,
  						54.074
  					],
  					[
  						15.4007,
  						54.0825
  					],
  					[
  						15.3704,
  						54.0746
  					],
  					[
  						15.3549,
  						54.0859
  					],
  					[
  						15.3801,
  						54.1058
  					],
  					[
  						15.3542,
  						54.1211
  					],
  					[
  						15.388,
  						54.1591
  					],
  					[
  						15.4801,
  						54.166
  					],
  					[
  						15.5245,
  						54.1748
  					],
  					[
  						15.5532,
  						54.1876
  					],
  					[
  						15.5884,
  						54.1876
  					],
  					[
  						15.7188,
  						54.2092
  					],
  					[
  						15.792,
  						54.2272
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 190,
  			name: "powiat Koszalin",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.3206,
  						54.2057
  					],
  					[
  						16.2923,
  						54.173
  					],
  					[
  						16.2626,
  						54.1585
  					],
  					[
  						16.2085,
  						54.1655
  					],
  					[
  						16.2188,
  						54.1419
  					],
  					[
  						16.1828,
  						54.1389
  					],
  					[
  						16.1769,
  						54.1564
  					],
  					[
  						16.1375,
  						54.1775
  					],
  					[
  						16.1099,
  						54.2217
  					],
  					[
  						16.1285,
  						54.2419
  					],
  					[
  						16.19,
  						54.2742
  					],
  					[
  						16.2146,
  						54.227
  					],
  					[
  						16.2958,
  						54.2198
  					],
  					[
  						16.3206,
  						54.2057
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 191,
  			name: "powiat kłobucki",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.1236,
  						50.9996
  					],
  					[
  						19.1252,
  						50.9743
  					],
  					[
  						19.0766,
  						50.964
  					],
  					[
  						19.0946,
  						50.9255
  					],
  					[
  						19.0941,
  						50.9241
  					],
  					[
  						19.0644,
  						50.9156
  					],
  					[
  						19.0724,
  						50.8851
  					],
  					[
  						19.0889,
  						50.8655
  					],
  					[
  						19.0871,
  						50.8608
  					],
  					[
  						19.0648,
  						50.861
  					],
  					[
  						19.0402,
  						50.8414
  					],
  					[
  						19.0382,
  						50.8256
  					],
  					[
  						19.0293,
  						50.8233
  					],
  					[
  						18.9987,
  						50.8237
  					],
  					[
  						18.9723,
  						50.812
  					],
  					[
  						18.9552,
  						50.8262
  					],
  					[
  						18.8991,
  						50.8179
  					],
  					[
  						18.9067,
  						50.8041
  					],
  					[
  						18.8647,
  						50.7993
  					],
  					[
  						18.8487,
  						50.7661
  					],
  					[
  						18.8099,
  						50.7685
  					],
  					[
  						18.8045,
  						50.7975
  					],
  					[
  						18.7324,
  						50.7921
  					],
  					[
  						18.6876,
  						50.8138
  					],
  					[
  						18.6264,
  						50.8322
  					],
  					[
  						18.6159,
  						50.8536
  					],
  					[
  						18.6545,
  						50.9147
  					],
  					[
  						18.6488,
  						50.9313
  					],
  					[
  						18.6303,
  						50.9312
  					],
  					[
  						18.6124,
  						50.9551
  					],
  					[
  						18.6483,
  						50.969
  					],
  					[
  						18.6483,
  						50.9693
  					],
  					[
  						18.6682,
  						50.989
  					],
  					[
  						18.6562,
  						51.005
  					],
  					[
  						18.6954,
  						51.0157
  					],
  					[
  						18.673,
  						51.0569
  					],
  					[
  						18.7029,
  						51.0644
  					],
  					[
  						18.7679,
  						51.0648
  					],
  					[
  						18.8029,
  						51.0634
  					],
  					[
  						18.863,
  						51.0727
  					],
  					[
  						18.8835,
  						51.059
  					],
  					[
  						18.9189,
  						51.098
  					],
  					[
  						18.9554,
  						51.0902
  					],
  					[
  						19.0116,
  						51.0664
  					],
  					[
  						19.0157,
  						51.0527
  					],
  					[
  						19.1044,
  						51.0263
  					],
  					[
  						19.1236,
  						50.9996
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 192,
  			name: "powiat gliwicki",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.6075,
  						50.55
  					],
  					[
  						18.6491,
  						50.5456
  					],
  					[
  						18.6377,
  						50.5246
  					],
  					[
  						18.6526,
  						50.4991
  					],
  					[
  						18.6231,
  						50.4883
  					],
  					[
  						18.6282,
  						50.4589
  					],
  					[
  						18.614,
  						50.4372
  					],
  					[
  						18.6374,
  						50.4211
  					],
  					[
  						18.6505,
  						50.4125
  					],
  					[
  						18.6506,
  						50.4124
  					],
  					[
  						18.6505,
  						50.4125
  					],
  					[
  						18.6506,
  						50.4124
  					],
  					[
  						18.6581,
  						50.3739
  					],
  					[
  						18.6134,
  						50.3691
  					],
  					[
  						18.5982,
  						50.3272
  					],
  					[
  						18.5616,
  						50.3442
  					],
  					[
  						18.5449,
  						50.3381
  					],
  					[
  						18.5916,
  						50.2968
  					],
  					[
  						18.5724,
  						50.295
  					],
  					[
  						18.565,
  						50.2587
  					],
  					[
  						18.6108,
  						50.2644
  					],
  					[
  						18.642,
  						50.2622
  					],
  					[
  						18.6588,
  						50.2405
  					],
  					[
  						18.6851,
  						50.2272
  					],
  					[
  						18.7211,
  						50.2357
  					],
  					[
  						18.7358,
  						50.2708
  					],
  					[
  						18.7387,
  						50.2677
  					],
  					[
  						18.7505,
  						50.264
  					],
  					[
  						18.7911,
  						50.2468
  					],
  					[
  						18.7912,
  						50.2468
  					],
  					[
  						18.7911,
  						50.2468
  					],
  					[
  						18.7912,
  						50.2468
  					],
  					[
  						18.7923,
  						50.2468
  					],
  					[
  						18.7969,
  						50.2463
  					],
  					[
  						18.7973,
  						50.2446
  					],
  					[
  						18.7945,
  						50.2387
  					],
  					[
  						18.7945,
  						50.2386
  					],
  					[
  						18.7945,
  						50.2387
  					],
  					[
  						18.7945,
  						50.2386
  					],
  					[
  						18.7974,
  						50.2107
  					],
  					[
  						18.7757,
  						50.1934
  					],
  					[
  						18.7528,
  						50.2031
  					],
  					[
  						18.7197,
  						50.2001
  					],
  					[
  						18.6946,
  						50.1752
  					],
  					[
  						18.6423,
  						50.1849
  					],
  					[
  						18.6204,
  						50.1745
  					],
  					[
  						18.6201,
  						50.1741
  					],
  					[
  						18.5874,
  						50.1726
  					],
  					[
  						18.558,
  						50.181
  					],
  					[
  						18.4947,
  						50.1799
  					],
  					[
  						18.448,
  						50.2469
  					],
  					[
  						18.4259,
  						50.249
  					],
  					[
  						18.427,
  						50.2687
  					],
  					[
  						18.3921,
  						50.3134
  					],
  					[
  						18.3947,
  						50.3378
  					],
  					[
  						18.3577,
  						50.3566
  					],
  					[
  						18.3936,
  						50.3915
  					],
  					[
  						18.3699,
  						50.4158
  					],
  					[
  						18.3698,
  						50.4158
  					],
  					[
  						18.3699,
  						50.4158
  					],
  					[
  						18.3698,
  						50.4158
  					],
  					[
  						18.3872,
  						50.4323
  					],
  					[
  						18.3796,
  						50.4788
  					],
  					[
  						18.4097,
  						50.4746
  					],
  					[
  						18.44,
  						50.4807
  					],
  					[
  						18.452,
  						50.4626
  					],
  					[
  						18.4813,
  						50.4583
  					],
  					[
  						18.4665,
  						50.4995
  					],
  					[
  						18.4479,
  						50.4994
  					],
  					[
  						18.4356,
  						50.5447
  					],
  					[
  						18.4779,
  						50.5527
  					],
  					[
  						18.559,
  						50.5401
  					],
  					[
  						18.6075,
  						50.55
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 193,
  			name: "powiat lubliniecki",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.6017,
  						50.6045
  					],
  					[
  						18.5873,
  						50.6138
  					],
  					[
  						18.5174,
  						50.6255
  					],
  					[
  						18.5132,
  						50.6307
  					],
  					[
  						18.5133,
  						50.6581
  					],
  					[
  						18.4941,
  						50.6643
  					],
  					[
  						18.4994,
  						50.6895
  					],
  					[
  						18.4839,
  						50.7083
  					],
  					[
  						18.509,
  						50.7261
  					],
  					[
  						18.5483,
  						50.732
  					],
  					[
  						18.55,
  						50.7596
  					],
  					[
  						18.5272,
  						50.7801
  					],
  					[
  						18.5219,
  						50.8024
  					],
  					[
  						18.5622,
  						50.8089
  					],
  					[
  						18.558,
  						50.8341
  					],
  					[
  						18.5882,
  						50.8516
  					],
  					[
  						18.6159,
  						50.8536
  					],
  					[
  						18.6264,
  						50.8322
  					],
  					[
  						18.6876,
  						50.8138
  					],
  					[
  						18.7324,
  						50.7921
  					],
  					[
  						18.8045,
  						50.7975
  					],
  					[
  						18.8099,
  						50.7685
  					],
  					[
  						18.8487,
  						50.7661
  					],
  					[
  						18.8667,
  						50.761
  					],
  					[
  						18.9143,
  						50.7645
  					],
  					[
  						18.9131,
  						50.7334
  					],
  					[
  						18.9402,
  						50.7056
  					],
  					[
  						18.9836,
  						50.68
  					],
  					[
  						18.9847,
  						50.6627
  					],
  					[
  						19.0435,
  						50.66
  					],
  					[
  						19.0612,
  						50.6346
  					],
  					[
  						19.0975,
  						50.6352
  					],
  					[
  						19.1093,
  						50.6204
  					],
  					[
  						19.0734,
  						50.6161
  					],
  					[
  						19.1029,
  						50.5779
  					],
  					[
  						19.0772,
  						50.5558
  					],
  					[
  						19.0934,
  						50.5159
  					],
  					[
  						19.0791,
  						50.5079
  					],
  					[
  						19.0528,
  						50.4933
  					],
  					[
  						19.0432,
  						50.5184
  					],
  					[
  						19.0227,
  						50.5427
  					],
  					[
  						19.0299,
  						50.5617
  					],
  					[
  						18.9918,
  						50.5708
  					],
  					[
  						18.9062,
  						50.5766
  					],
  					[
  						18.8761,
  						50.5861
  					],
  					[
  						18.8506,
  						50.6143
  					],
  					[
  						18.8158,
  						50.5877
  					],
  					[
  						18.8698,
  						50.569
  					],
  					[
  						18.8445,
  						50.5441
  					],
  					[
  						18.8289,
  						50.5576
  					],
  					[
  						18.7798,
  						50.5719
  					],
  					[
  						18.7736,
  						50.5897
  					],
  					[
  						18.7262,
  						50.5955
  					],
  					[
  						18.7102,
  						50.587
  					],
  					[
  						18.6017,
  						50.6045
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 194,
  			name: "powiat Bielsko-Biała",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.9864,
  						49.7367
  					],
  					[
  						18.9546,
  						49.7442
  					],
  					[
  						18.9523,
  						49.7647
  					],
  					[
  						18.9745,
  						49.7924
  					],
  					[
  						18.9514,
  						49.8155
  					],
  					[
  						18.9959,
  						49.8438
  					],
  					[
  						19.0115,
  						49.8651
  					],
  					[
  						19.0664,
  						49.8752
  					],
  					[
  						19.1132,
  						49.8759
  					],
  					[
  						19.1191,
  						49.8288
  					],
  					[
  						19.1019,
  						49.807
  					],
  					[
  						19.111,
  						49.7971
  					],
  					[
  						19.063,
  						49.7633
  					],
  					[
  						19.0242,
  						49.7667
  					],
  					[
  						19.0025,
  						49.7606
  					],
  					[
  						18.9864,
  						49.7367
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 195,
  			name: "powiat Legnica",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.1282,
  						51.2002
  					],
  					[
  						16.1632,
  						51.2416
  					],
  					[
  						16.2205,
  						51.2402
  					],
  					[
  						16.2302,
  						51.1987
  					],
  					[
  						16.1953,
  						51.1933
  					],
  					[
  						16.1837,
  						51.1607
  					],
  					[
  						16.1057,
  						51.1668
  					],
  					[
  						16.0928,
  						51.184
  					],
  					[
  						16.1282,
  						51.2002
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 196,
  			name: "powiat grudziądzki",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.2243,
  						53.4566
  					],
  					[
  						19.1952,
  						53.4526
  					],
  					[
  						19.1238,
  						53.4316
  					],
  					[
  						19.1391,
  						53.4213
  					],
  					[
  						19.1069,
  						53.3806
  					],
  					[
  						19.0768,
  						53.3927
  					],
  					[
  						19.0448,
  						53.3608
  					],
  					[
  						18.9366,
  						53.3399
  					],
  					[
  						18.91,
  						53.3438
  					],
  					[
  						18.8848,
  						53.332
  					],
  					[
  						18.8606,
  						53.3565
  					],
  					[
  						18.822,
  						53.3832
  					],
  					[
  						18.7934,
  						53.3856
  					],
  					[
  						18.7242,
  						53.3648
  					],
  					[
  						18.6847,
  						53.3934
  					],
  					[
  						18.6402,
  						53.393
  					],
  					[
  						18.5983,
  						53.4123
  					],
  					[
  						18.6264,
  						53.4274
  					],
  					[
  						18.6802,
  						53.4391
  					],
  					[
  						18.704,
  						53.4517
  					],
  					[
  						18.7125,
  						53.4296
  					],
  					[
  						18.7571,
  						53.4247
  					],
  					[
  						18.7621,
  						53.4348
  					],
  					[
  						18.8067,
  						53.4316
  					],
  					[
  						18.8135,
  						53.4461
  					],
  					[
  						18.7793,
  						53.4582
  					],
  					[
  						18.8133,
  						53.4866
  					],
  					[
  						18.8668,
  						53.4981
  					],
  					[
  						18.8293,
  						53.524
  					],
  					[
  						18.8099,
  						53.5075
  					],
  					[
  						18.7797,
  						53.5044
  					],
  					[
  						18.7563,
  						53.5239
  					],
  					[
  						18.7641,
  						53.5479
  					],
  					[
  						18.7616,
  						53.6049
  					],
  					[
  						18.7735,
  						53.607
  					],
  					[
  						18.89,
  						53.5995
  					],
  					[
  						18.9436,
  						53.5882
  					],
  					[
  						19.0966,
  						53.5967
  					],
  					[
  						19.1293,
  						53.5883
  					],
  					[
  						19.1821,
  						53.579
  					],
  					[
  						19.1997,
  						53.5701
  					],
  					[
  						19.2188,
  						53.5243
  					],
  					[
  						19.1892,
  						53.5116
  					],
  					[
  						19.2256,
  						53.4888
  					],
  					[
  						19.2363,
  						53.4683
  					],
  					[
  						19.2243,
  						53.4566
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 197,
  			name: "powiat wołowski",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.8006,
  						51.2587
  					],
  					[
  						16.7249,
  						51.2597
  					],
  					[
  						16.6916,
  						51.2413
  					],
  					[
  						16.6761,
  						51.2497
  					],
  					[
  						16.6294,
  						51.2512
  					],
  					[
  						16.5976,
  						51.2399
  					],
  					[
  						16.5792,
  						51.2488
  					],
  					[
  						16.5347,
  						51.2436
  					],
  					[
  						16.4969,
  						51.2261
  					],
  					[
  						16.4714,
  						51.2312
  					],
  					[
  						16.4583,
  						51.2715
  					],
  					[
  						16.4363,
  						51.275
  					],
  					[
  						16.4157,
  						51.2937
  					],
  					[
  						16.4608,
  						51.3257
  					],
  					[
  						16.4534,
  						51.3399
  					],
  					[
  						16.4766,
  						51.3692
  					],
  					[
  						16.4384,
  						51.4275
  					],
  					[
  						16.4546,
  						51.4936
  					],
  					[
  						16.4673,
  						51.5015
  					],
  					[
  						16.5406,
  						51.5112
  					],
  					[
  						16.5906,
  						51.5048
  					],
  					[
  						16.6012,
  						51.5156
  					],
  					[
  						16.6499,
  						51.515
  					],
  					[
  						16.6421,
  						51.4923
  					],
  					[
  						16.6945,
  						51.4966
  					],
  					[
  						16.7642,
  						51.4854
  					],
  					[
  						16.7967,
  						51.4561
  					],
  					[
  						16.7984,
  						51.4208
  					],
  					[
  						16.7813,
  						51.4023
  					],
  					[
  						16.7976,
  						51.3828
  					],
  					[
  						16.7752,
  						51.362
  					],
  					[
  						16.8081,
  						51.3347
  					],
  					[
  						16.8101,
  						51.2739
  					],
  					[
  						16.8006,
  						51.2587
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 198,
  			name: "powiat toruński",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.0942,
  						52.969
  					],
  					[
  						19.056,
  						52.9709
  					],
  					[
  						19.0096,
  						52.9646
  					],
  					[
  						19.0174,
  						52.9333
  					],
  					[
  						19.0505,
  						52.9157
  					],
  					[
  						19.0627,
  						52.8834
  					],
  					[
  						19.0415,
  						52.8541
  					],
  					[
  						19.0186,
  						52.8462
  					],
  					[
  						18.9778,
  						52.8495
  					],
  					[
  						18.9533,
  						52.8519
  					],
  					[
  						18.9281,
  						52.8357
  					],
  					[
  						18.9073,
  						52.8358
  					],
  					[
  						18.8891,
  						52.8595
  					],
  					[
  						18.8546,
  						52.8682
  					],
  					[
  						18.8132,
  						52.9063
  					],
  					[
  						18.7692,
  						52.9102
  					],
  					[
  						18.7226,
  						52.9334
  					],
  					[
  						18.695,
  						52.9225
  					],
  					[
  						18.6896,
  						52.8975
  					],
  					[
  						18.6244,
  						52.8876
  					],
  					[
  						18.6034,
  						52.8673
  					],
  					[
  						18.5647,
  						52.879
  					],
  					[
  						18.5129,
  						52.908
  					],
  					[
  						18.4957,
  						52.9485
  					],
  					[
  						18.4457,
  						52.9424
  					],
  					[
  						18.4397,
  						52.9558
  					],
  					[
  						18.3609,
  						52.9461
  					],
  					[
  						18.3904,
  						52.9867
  					],
  					[
  						18.3669,
  						52.9869
  					],
  					[
  						18.38,
  						53.0175
  					],
  					[
  						18.4074,
  						53.0395
  					],
  					[
  						18.3004,
  						53.0796
  					],
  					[
  						18.2451,
  						53.0834
  					],
  					[
  						18.154,
  						53.0988
  					],
  					[
  						18.1449,
  						53.1036
  					],
  					[
  						18.1868,
  						53.1063
  					],
  					[
  						18.2409,
  						53.1288
  					],
  					[
  						18.2732,
  						53.1335
  					],
  					[
  						18.304,
  						53.1281
  					],
  					[
  						18.3034,
  						53.1542
  					],
  					[
  						18.3495,
  						53.1698
  					],
  					[
  						18.4162,
  						53.1833
  					],
  					[
  						18.468,
  						53.2017
  					],
  					[
  						18.5682,
  						53.2266
  					],
  					[
  						18.6048,
  						53.2432
  					],
  					[
  						18.653,
  						53.2248
  					],
  					[
  						18.6844,
  						53.2569
  					],
  					[
  						18.7249,
  						53.263
  					],
  					[
  						18.7766,
  						53.2459
  					],
  					[
  						18.7727,
  						53.228
  					],
  					[
  						18.8031,
  						53.22
  					],
  					[
  						18.7618,
  						53.2011
  					],
  					[
  						18.7442,
  						53.18
  					],
  					[
  						18.7523,
  						53.1554
  					],
  					[
  						18.7952,
  						53.1332
  					],
  					[
  						18.8276,
  						53.077
  					],
  					[
  						18.8646,
  						53.067
  					],
  					[
  						18.8649,
  						53.0448
  					],
  					[
  						18.9087,
  						53.0244
  					],
  					[
  						18.9514,
  						53.015
  					],
  					[
  						18.9374,
  						52.9922
  					],
  					[
  						18.9826,
  						52.9871
  					],
  					[
  						19.0748,
  						52.9931
  					],
  					[
  						19.0942,
  						52.969
  					]
  				],
  				[
  					[
  						18.5504,
  						52.9631
  					],
  					[
  						18.5676,
  						52.9753
  					],
  					[
  						18.6082,
  						52.9742
  					],
  					[
  						18.6598,
  						52.9894
  					],
  					[
  						18.6752,
  						52.9725
  					],
  					[
  						18.7009,
  						52.9769
  					],
  					[
  						18.6888,
  						52.998
  					],
  					[
  						18.7313,
  						53.0186
  					],
  					[
  						18.7289,
  						53.0433
  					],
  					[
  						18.7075,
  						53.0567
  					],
  					[
  						18.6518,
  						53.0656
  					],
  					[
  						18.6178,
  						53.0574
  					],
  					[
  						18.5718,
  						53.0641
  					],
  					[
  						18.5444,
  						53.0597
  					],
  					[
  						18.5186,
  						53.043
  					],
  					[
  						18.5245,
  						53.0256
  					],
  					[
  						18.4886,
  						53.0277
  					],
  					[
  						18.4764,
  						53.0113
  					],
  					[
  						18.5354,
  						53.0094
  					],
  					[
  						18.5627,
  						53.0023
  					],
  					[
  						18.5504,
  						52.9631
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 199,
  			name: "powiat chełmiński",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.6264,
  						53.4274
  					],
  					[
  						18.5983,
  						53.4123
  					],
  					[
  						18.6402,
  						53.393
  					],
  					[
  						18.6847,
  						53.3934
  					],
  					[
  						18.7242,
  						53.3648
  					],
  					[
  						18.6957,
  						53.3443
  					],
  					[
  						18.6994,
  						53.3279
  					],
  					[
  						18.738,
  						53.3193
  					],
  					[
  						18.7389,
  						53.2772
  					],
  					[
  						18.7249,
  						53.263
  					],
  					[
  						18.6844,
  						53.2569
  					],
  					[
  						18.653,
  						53.2248
  					],
  					[
  						18.6048,
  						53.2432
  					],
  					[
  						18.5682,
  						53.2266
  					],
  					[
  						18.468,
  						53.2017
  					],
  					[
  						18.4162,
  						53.1833
  					],
  					[
  						18.3495,
  						53.1698
  					],
  					[
  						18.3489,
  						53.2103
  					],
  					[
  						18.3189,
  						53.2234
  					],
  					[
  						18.3134,
  						53.2403
  					],
  					[
  						18.2797,
  						53.2531
  					],
  					[
  						18.3071,
  						53.2684
  					],
  					[
  						18.3294,
  						53.3171
  					],
  					[
  						18.3684,
  						53.3481
  					],
  					[
  						18.4061,
  						53.3616
  					],
  					[
  						18.4192,
  						53.3767
  					],
  					[
  						18.45,
  						53.3788
  					],
  					[
  						18.4966,
  						53.4165
  					],
  					[
  						18.5453,
  						53.4165
  					],
  					[
  						18.5679,
  						53.4267
  					],
  					[
  						18.6264,
  						53.4274
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 200,
  			name: "powiat wodzisławski",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.4423,
  						50.0864
  					],
  					[
  						18.4614,
  						50.0804
  					],
  					[
  						18.4794,
  						50.0526
  					],
  					[
  						18.5232,
  						50.0382
  					],
  					[
  						18.5491,
  						50.0336
  					],
  					[
  						18.5719,
  						49.9981
  					],
  					[
  						18.59,
  						49.9989
  					],
  					[
  						18.6117,
  						49.9787
  					],
  					[
  						18.5739,
  						49.9762
  					],
  					[
  						18.5376,
  						49.9466
  					],
  					[
  						18.5396,
  						49.9257
  					],
  					[
  						18.535,
  						49.9003
  					],
  					[
  						18.5081,
  						49.9028
  					],
  					[
  						18.4847,
  						49.9092
  					],
  					[
  						18.4642,
  						49.9218
  					],
  					[
  						18.3921,
  						49.934
  					],
  					[
  						18.333,
  						49.9494
  					],
  					[
  						18.2797,
  						49.9994
  					],
  					[
  						18.2789,
  						50.0133
  					],
  					[
  						18.2388,
  						50.0449
  					],
  					[
  						18.3491,
  						50.0576
  					],
  					[
  						18.3788,
  						50.0752
  					],
  					[
  						18.4038,
  						50.0721
  					],
  					[
  						18.4423,
  						50.0864
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 201,
  			name: "powiat leski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.423,
  						49.5535
  					],
  					[
  						22.466,
  						49.5437
  					],
  					[
  						22.4951,
  						49.5221
  					],
  					[
  						22.4913,
  						49.4979
  					],
  					[
  						22.4757,
  						49.4902
  					],
  					[
  						22.5336,
  						49.4628
  					],
  					[
  						22.5178,
  						49.4478
  					],
  					[
  						22.4832,
  						49.4351
  					],
  					[
  						22.4672,
  						49.4059
  					],
  					[
  						22.4932,
  						49.3854
  					],
  					[
  						22.4744,
  						49.3772
  					],
  					[
  						22.5163,
  						49.3386
  					],
  					[
  						22.4983,
  						49.3237
  					],
  					[
  						22.4646,
  						49.2809
  					],
  					[
  						22.4493,
  						49.2484
  					],
  					[
  						22.4768,
  						49.2283
  					],
  					[
  						22.4807,
  						49.1862
  					],
  					[
  						22.5531,
  						49.1566
  					],
  					[
  						22.5369,
  						49.1227
  					],
  					[
  						22.5456,
  						49.092
  					],
  					[
  						22.4871,
  						49.0884
  					],
  					[
  						22.4553,
  						49.1037
  					],
  					[
  						22.4095,
  						49.1051
  					],
  					[
  						22.3697,
  						49.1455
  					],
  					[
  						22.3346,
  						49.1465
  					],
  					[
  						22.3205,
  						49.1356
  					],
  					[
  						22.2462,
  						49.1533
  					],
  					[
  						22.2219,
  						49.1844
  					],
  					[
  						22.2375,
  						49.2019
  					],
  					[
  						22.2501,
  						49.2383
  					],
  					[
  						22.2266,
  						49.2593
  					],
  					[
  						22.1952,
  						49.2674
  					],
  					[
  						22.188,
  						49.2985
  					],
  					[
  						22.219,
  						49.3265
  					],
  					[
  						22.2142,
  						49.338
  					],
  					[
  						22.2388,
  						49.3803
  					],
  					[
  						22.275,
  						49.4294
  					],
  					[
  						22.2856,
  						49.4552
  					],
  					[
  						22.2831,
  						49.4845
  					],
  					[
  						22.2996,
  						49.5121
  					],
  					[
  						22.3309,
  						49.5297
  					],
  					[
  						22.3502,
  						49.5503
  					],
  					[
  						22.3956,
  						49.5276
  					],
  					[
  						22.423,
  						49.5535
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 202,
  			name: "powiat bieszczadzki",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.6861,
  						49.5731
  					],
  					[
  						22.6747,
  						49.5492
  					],
  					[
  						22.6408,
  						49.53
  					],
  					[
  						22.6512,
  						49.5084
  					],
  					[
  						22.6967,
  						49.4951
  					],
  					[
  						22.7135,
  						49.4362
  					],
  					[
  						22.7468,
  						49.3599
  					],
  					[
  						22.751,
  						49.3166
  					],
  					[
  						22.7441,
  						49.2988
  					],
  					[
  						22.7396,
  						49.2473
  					],
  					[
  						22.7149,
  						49.2265
  					],
  					[
  						22.7345,
  						49.2119
  					],
  					[
  						22.7075,
  						49.1748
  					],
  					[
  						22.752,
  						49.1814
  					],
  					[
  						22.7384,
  						49.1595
  					],
  					[
  						22.7924,
  						49.1534
  					],
  					[
  						22.7934,
  						49.138
  					],
  					[
  						22.8421,
  						49.11
  					],
  					[
  						22.876,
  						49.0967
  					],
  					[
  						22.8665,
  						49.0409
  					],
  					[
  						22.8916,
  						49.0077
  					],
  					[
  						22.8474,
  						49.0025
  					],
  					[
  						22.8337,
  						49.0261
  					],
  					[
  						22.7655,
  						49.0535
  					],
  					[
  						22.6991,
  						49.0497
  					],
  					[
  						22.6833,
  						49.0389
  					],
  					[
  						22.6516,
  						49.0508
  					],
  					[
  						22.6257,
  						49.0803
  					],
  					[
  						22.5825,
  						49.0973
  					],
  					[
  						22.5456,
  						49.092
  					],
  					[
  						22.5369,
  						49.1227
  					],
  					[
  						22.5531,
  						49.1566
  					],
  					[
  						22.4807,
  						49.1862
  					],
  					[
  						22.4768,
  						49.2283
  					],
  					[
  						22.4493,
  						49.2484
  					],
  					[
  						22.4646,
  						49.2809
  					],
  					[
  						22.4983,
  						49.3237
  					],
  					[
  						22.5163,
  						49.3386
  					],
  					[
  						22.4744,
  						49.3772
  					],
  					[
  						22.4932,
  						49.3854
  					],
  					[
  						22.4672,
  						49.4059
  					],
  					[
  						22.4832,
  						49.4351
  					],
  					[
  						22.5178,
  						49.4478
  					],
  					[
  						22.5336,
  						49.4628
  					],
  					[
  						22.4757,
  						49.4902
  					],
  					[
  						22.4913,
  						49.4979
  					],
  					[
  						22.4951,
  						49.5221
  					],
  					[
  						22.466,
  						49.5437
  					],
  					[
  						22.423,
  						49.5535
  					],
  					[
  						22.395,
  						49.5715
  					],
  					[
  						22.4279,
  						49.5932
  					],
  					[
  						22.4626,
  						49.5899
  					],
  					[
  						22.4855,
  						49.6089
  					],
  					[
  						22.5372,
  						49.6374
  					],
  					[
  						22.5277,
  						49.6635
  					],
  					[
  						22.584,
  						49.67
  					],
  					[
  						22.5842,
  						49.6512
  					],
  					[
  						22.6035,
  						49.6166
  					],
  					[
  						22.632,
  						49.5898
  					],
  					[
  						22.6639,
  						49.5932
  					],
  					[
  						22.6861,
  						49.5731
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 203,
  			name: "powiat prudnicki",
  			province: "Opolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.763,
  						50.5546
  					],
  					[
  						17.8138,
  						50.5302
  					],
  					[
  						17.7575,
  						50.4858
  					],
  					[
  						17.7642,
  						50.4623
  					],
  					[
  						17.7535,
  						50.4212
  					],
  					[
  						17.775,
  						50.423
  					],
  					[
  						17.8165,
  						50.4099
  					],
  					[
  						17.8291,
  						50.4263
  					],
  					[
  						17.8574,
  						50.4123
  					],
  					[
  						17.8867,
  						50.3813
  					],
  					[
  						17.9244,
  						50.3729
  					],
  					[
  						17.9435,
  						50.3554
  					],
  					[
  						17.9656,
  						50.3592
  					],
  					[
  						18.0266,
  						50.355
  					],
  					[
  						18.0323,
  						50.346
  					],
  					[
  						18.0283,
  						50.3254
  					],
  					[
  						17.9373,
  						50.3151
  					],
  					[
  						17.9113,
  						50.3037
  					],
  					[
  						17.9354,
  						50.2888
  					],
  					[
  						17.9191,
  						50.2651
  					],
  					[
  						17.8813,
  						50.2864
  					],
  					[
  						17.8618,
  						50.2777
  					],
  					[
  						17.8366,
  						50.2893
  					],
  					[
  						17.8175,
  						50.3193
  					],
  					[
  						17.7514,
  						50.2995
  					],
  					[
  						17.7291,
  						50.3034
  					],
  					[
  						17.7225,
  						50.3177
  					],
  					[
  						17.6869,
  						50.328
  					],
  					[
  						17.6891,
  						50.3019
  					],
  					[
  						17.6684,
  						50.2908
  					],
  					[
  						17.6655,
  						50.2881
  					],
  					[
  						17.6635,
  						50.2869
  					],
  					[
  						17.6586,
  						50.285
  					],
  					[
  						17.6173,
  						50.2669
  					],
  					[
  						17.6038,
  						50.2689
  					],
  					[
  						17.5993,
  						50.2703
  					],
  					[
  						17.5987,
  						50.2705
  					],
  					[
  						17.5981,
  						50.2707
  					],
  					[
  						17.5981,
  						50.2724
  					],
  					[
  						17.5981,
  						50.273
  					],
  					[
  						17.598,
  						50.2733
  					],
  					[
  						17.598,
  						50.2734
  					],
  					[
  						17.5978,
  						50.2737
  					],
  					[
  						17.5977,
  						50.2737
  					],
  					[
  						17.5978,
  						50.2737
  					],
  					[
  						17.5977,
  						50.2737
  					],
  					[
  						17.5979,
  						50.2741
  					],
  					[
  						17.5978,
  						50.2744
  					],
  					[
  						17.5978,
  						50.2745
  					],
  					[
  						17.5975,
  						50.2749
  					],
  					[
  						17.5969,
  						50.2754
  					],
  					[
  						17.5942,
  						50.277
  					],
  					[
  						17.5937,
  						50.2771
  					],
  					[
  						17.5932,
  						50.2773
  					],
  					[
  						17.5919,
  						50.2783
  					],
  					[
  						17.5868,
  						50.278
  					],
  					[
  						17.5867,
  						50.278
  					],
  					[
  						17.5866,
  						50.278
  					],
  					[
  						17.5867,
  						50.278
  					],
  					[
  						17.5866,
  						50.278
  					],
  					[
  						17.5861,
  						50.278
  					],
  					[
  						17.5799,
  						50.2771
  					],
  					[
  						17.5733,
  						50.275
  					],
  					[
  						17.5733,
  						50.2749
  					],
  					[
  						17.5733,
  						50.275
  					],
  					[
  						17.5648,
  						50.2713
  					],
  					[
  						17.5646,
  						50.271
  					],
  					[
  						17.5048,
  						50.2747
  					],
  					[
  						17.4886,
  						50.2776
  					],
  					[
  						17.4518,
  						50.2977
  					],
  					[
  						17.455,
  						50.3678
  					],
  					[
  						17.479,
  						50.3953
  					],
  					[
  						17.5191,
  						50.4098
  					],
  					[
  						17.5336,
  						50.4134
  					],
  					[
  						17.5343,
  						50.41
  					],
  					[
  						17.5623,
  						50.4092
  					],
  					[
  						17.595,
  						50.4237
  					],
  					[
  						17.6135,
  						50.4356
  					],
  					[
  						17.6144,
  						50.4359
  					],
  					[
  						17.6172,
  						50.4368
  					],
  					[
  						17.6191,
  						50.4376
  					],
  					[
  						17.6212,
  						50.4388
  					],
  					[
  						17.6218,
  						50.4392
  					],
  					[
  						17.628,
  						50.4401
  					],
  					[
  						17.6701,
  						50.4574
  					],
  					[
  						17.6745,
  						50.4841
  					],
  					[
  						17.7194,
  						50.4866
  					],
  					[
  						17.7021,
  						50.5027
  					],
  					[
  						17.763,
  						50.5546
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 204,
  			name: "powiat ząbkowicki",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.1649,
  						50.6135
  					],
  					[
  						17.124,
  						50.6084
  					],
  					[
  						17.1149,
  						50.5874
  					],
  					[
  						17.0613,
  						50.5369
  					],
  					[
  						17.0743,
  						50.515
  					],
  					[
  						17.0692,
  						50.514
  					],
  					[
  						17.0618,
  						50.5093
  					],
  					[
  						17.062,
  						50.4756
  					],
  					[
  						17.0492,
  						50.4643
  					],
  					[
  						17.0201,
  						50.4803
  					],
  					[
  						16.976,
  						50.4756
  					],
  					[
  						16.9474,
  						50.4802
  					],
  					[
  						16.9403,
  						50.4611
  					],
  					[
  						16.9079,
  						50.4494
  					],
  					[
  						16.881,
  						50.4423
  					],
  					[
  						16.8603,
  						50.4077
  					],
  					[
  						16.8084,
  						50.3998
  					],
  					[
  						16.7882,
  						50.4251
  					],
  					[
  						16.7686,
  						50.4251
  					],
  					[
  						16.7571,
  						50.4539
  					],
  					[
  						16.7338,
  						50.4769
  					],
  					[
  						16.6974,
  						50.4802
  					],
  					[
  						16.7003,
  						50.4968
  					],
  					[
  						16.6751,
  						50.5165
  					],
  					[
  						16.6796,
  						50.5404
  					],
  					[
  						16.642,
  						50.5497
  					],
  					[
  						16.6354,
  						50.573
  					],
  					[
  						16.6059,
  						50.5884
  					],
  					[
  						16.5831,
  						50.6283
  					],
  					[
  						16.6149,
  						50.625
  					],
  					[
  						16.6704,
  						50.6465
  					],
  					[
  						16.7024,
  						50.6408
  					],
  					[
  						16.7008,
  						50.6598
  					],
  					[
  						16.7264,
  						50.6675
  					],
  					[
  						16.7773,
  						50.6622
  					],
  					[
  						16.8057,
  						50.6602
  					],
  					[
  						16.8492,
  						50.6784
  					],
  					[
  						16.8725,
  						50.6805
  					],
  					[
  						16.8818,
  						50.7091
  					],
  					[
  						16.9224,
  						50.7095
  					],
  					[
  						16.958,
  						50.6933
  					],
  					[
  						17.0051,
  						50.696
  					],
  					[
  						17.0648,
  						50.6936
  					],
  					[
  						17.0687,
  						50.6804
  					],
  					[
  						17.1191,
  						50.672
  					],
  					[
  						17.1369,
  						50.6356
  					],
  					[
  						17.1649,
  						50.6135
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 205,
  			name: "powiat makowski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.1817,
  						53.1146
  					],
  					[
  						21.2479,
  						53.0862
  					],
  					[
  						21.2979,
  						53.0798
  					],
  					[
  						21.3368,
  						53.0428
  					],
  					[
  						21.4632,
  						52.9998
  					],
  					[
  						21.4914,
  						52.9805
  					],
  					[
  						21.4689,
  						52.9627
  					],
  					[
  						21.4711,
  						52.9486
  					],
  					[
  						21.4427,
  						52.9373
  					],
  					[
  						21.4648,
  						52.9193
  					],
  					[
  						21.4566,
  						52.9024
  					],
  					[
  						21.4273,
  						52.8789
  					],
  					[
  						21.4374,
  						52.8471
  					],
  					[
  						21.4752,
  						52.8153
  					],
  					[
  						21.4792,
  						52.8014
  					],
  					[
  						21.4385,
  						52.7733
  					],
  					[
  						21.4019,
  						52.7906
  					],
  					[
  						21.3228,
  						52.7866
  					],
  					[
  						21.3208,
  						52.7766
  					],
  					[
  						21.2836,
  						52.7789
  					],
  					[
  						21.2148,
  						52.7631
  					],
  					[
  						21.1903,
  						52.7666
  					],
  					[
  						21.1823,
  						52.7852
  					],
  					[
  						21.1304,
  						52.8037
  					],
  					[
  						21.1032,
  						52.799
  					],
  					[
  						21.0945,
  						52.7797
  					],
  					[
  						21.0644,
  						52.791
  					],
  					[
  						21.0017,
  						52.7692
  					],
  					[
  						20.9773,
  						52.7817
  					],
  					[
  						20.9551,
  						52.8086
  					],
  					[
  						20.9407,
  						52.8099
  					],
  					[
  						20.8807,
  						52.8431
  					],
  					[
  						20.8617,
  						52.8699
  					],
  					[
  						20.9413,
  						52.8763
  					],
  					[
  						20.9936,
  						52.8912
  					],
  					[
  						21.0054,
  						52.9055
  					],
  					[
  						20.9765,
  						52.9356
  					],
  					[
  						21.0056,
  						52.9435
  					],
  					[
  						21.0385,
  						52.9454
  					],
  					[
  						21.0365,
  						52.9676
  					],
  					[
  						21.0021,
  						52.9928
  					],
  					[
  						20.9971,
  						53.0238
  					],
  					[
  						21.0109,
  						53.054
  					],
  					[
  						21.0627,
  						53.0801
  					],
  					[
  						21.0824,
  						53.0825
  					],
  					[
  						21.086,
  						53.1077
  					],
  					[
  						21.1347,
  						53.1255
  					],
  					[
  						21.1461,
  						53.1372
  					],
  					[
  						21.1817,
  						53.1146
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 206,
  			name: "powiat pszczyński",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.9331,
  						50.0819
  					],
  					[
  						19.0014,
  						50.0837
  					],
  					[
  						19.0361,
  						50.0772
  					],
  					[
  						19.0371,
  						50.0464
  					],
  					[
  						19.0534,
  						50.0274
  					],
  					[
  						19.0867,
  						50.0227
  					],
  					[
  						19.1078,
  						50.0348
  					],
  					[
  						19.1445,
  						50.0394
  					],
  					[
  						19.119,
  						50.0092
  					],
  					[
  						19.12,
  						49.9607
  					],
  					[
  						19.0932,
  						49.9567
  					],
  					[
  						19.0516,
  						49.9564
  					],
  					[
  						19.0054,
  						49.9443
  					],
  					[
  						18.9768,
  						49.9246
  					],
  					[
  						18.9769,
  						49.9246
  					],
  					[
  						18.9768,
  						49.9246
  					],
  					[
  						18.9769,
  						49.9246
  					],
  					[
  						18.8906,
  						49.9119
  					],
  					[
  						18.8528,
  						49.92
  					],
  					[
  						18.7778,
  						49.9127
  					],
  					[
  						18.7521,
  						49.9351
  					],
  					[
  						18.7103,
  						49.9228
  					],
  					[
  						18.722,
  						49.8975
  					],
  					[
  						18.6684,
  						49.8859
  					],
  					[
  						18.6296,
  						49.8999
  					],
  					[
  						18.6316,
  						49.921
  					],
  					[
  						18.6575,
  						49.9213
  					],
  					[
  						18.6821,
  						49.9377
  					],
  					[
  						18.6821,
  						49.958
  					],
  					[
  						18.6519,
  						49.9585
  					],
  					[
  						18.6678,
  						50.0095
  					],
  					[
  						18.6797,
  						50.0048
  					],
  					[
  						18.7028,
  						50.0143
  					],
  					[
  						18.7384,
  						49.9995
  					],
  					[
  						18.7736,
  						50.0009
  					],
  					[
  						18.7736,
  						50.0203
  					],
  					[
  						18.7511,
  						50.0373
  					],
  					[
  						18.7536,
  						50.0544
  					],
  					[
  						18.8478,
  						50.0704
  					],
  					[
  						18.8575,
  						50.0973
  					],
  					[
  						18.9001,
  						50.0965
  					],
  					[
  						18.9331,
  						50.0819
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 207,
  			name: "powiat gołdapski",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.1462,
  						54.1815
  					],
  					[
  						22.1194,
  						54.1744
  					],
  					[
  						22.0523,
  						54.179
  					],
  					[
  						22.0227,
  						54.1725
  					],
  					[
  						21.9975,
  						54.1778
  					],
  					[
  						21.9942,
  						54.1957
  					],
  					[
  						21.9688,
  						54.2289
  					],
  					[
  						21.9845,
  						54.2602
  					],
  					[
  						21.9621,
  						54.2845
  					],
  					[
  						21.963,
  						54.3062
  					],
  					[
  						21.938,
  						54.3333
  					],
  					[
  						22.097,
  						54.3374
  					],
  					[
  						22.1528,
  						54.3366
  					],
  					[
  						22.2257,
  						54.3438
  					],
  					[
  						22.2599,
  						54.3406
  					],
  					[
  						22.3825,
  						54.3447
  					],
  					[
  						22.4218,
  						54.3485
  					],
  					[
  						22.5281,
  						54.3492
  					],
  					[
  						22.5713,
  						54.3539
  					],
  					[
  						22.6416,
  						54.3538
  					],
  					[
  						22.6806,
  						54.3602
  					],
  					[
  						22.792,
  						54.3633
  					],
  					[
  						22.8061,
  						54.3495
  					],
  					[
  						22.784,
  						54.3058
  					],
  					[
  						22.6929,
  						54.2754
  					],
  					[
  						22.6447,
  						54.2878
  					],
  					[
  						22.6107,
  						54.2599
  					],
  					[
  						22.5796,
  						54.2652
  					],
  					[
  						22.5319,
  						54.2489
  					],
  					[
  						22.5278,
  						54.2294
  					],
  					[
  						22.4815,
  						54.2024
  					],
  					[
  						22.4513,
  						54.2093
  					],
  					[
  						22.3691,
  						54.1977
  					],
  					[
  						22.3559,
  						54.1837
  					],
  					[
  						22.297,
  						54.1922
  					],
  					[
  						22.2629,
  						54.1678
  					],
  					[
  						22.2102,
  						54.1809
  					],
  					[
  						22.1726,
  						54.1977
  					],
  					[
  						22.1462,
  						54.1815
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 208,
  			name: "powiat Sopot",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.5075,
  						54.4228
  					],
  					[
  						18.5045,
  						54.445
  					],
  					[
  						18.525,
  						54.4575
  					],
  					[
  						18.5622,
  						54.4639
  					],
  					[
  						18.5912,
  						54.4302
  					],
  					[
  						18.5529,
  						54.4214
  					],
  					[
  						18.5075,
  						54.4228
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 209,
  			name: "powiat rzeszowski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.1931,
  						50.3366
  					],
  					[
  						22.1887,
  						50.3191
  					],
  					[
  						22.212,
  						50.2999
  					],
  					[
  						22.1988,
  						50.2856
  					],
  					[
  						22.248,
  						50.2609
  					],
  					[
  						22.2335,
  						50.2468
  					],
  					[
  						22.1976,
  						50.2337
  					],
  					[
  						22.1966,
  						50.2063
  					],
  					[
  						22.1774,
  						50.1741
  					],
  					[
  						22.1427,
  						50.1849
  					],
  					[
  						22.0956,
  						50.1736
  					],
  					[
  						22.1071,
  						50.139
  					],
  					[
  						22.1281,
  						50.1148
  					],
  					[
  						22.171,
  						50.1061
  					],
  					[
  						22.169,
  						50.0861
  					],
  					[
  						22.1228,
  						50.0434
  					],
  					[
  						22.131,
  						50.0278
  					],
  					[
  						22.1308,
  						50.0274
  					],
  					[
  						22.131,
  						50.0274
  					],
  					[
  						22.1308,
  						50.0274
  					],
  					[
  						22.1307,
  						50.0262
  					],
  					[
  						22.1332,
  						50.0206
  					],
  					[
  						22.1447,
  						50.0087
  					],
  					[
  						22.1874,
  						49.9988
  					],
  					[
  						22.2106,
  						49.9712
  					],
  					[
  						22.226,
  						49.9691
  					],
  					[
  						22.2263,
  						49.9691
  					],
  					[
  						22.2272,
  						49.9686
  					],
  					[
  						22.2286,
  						49.9677
  					],
  					[
  						22.2287,
  						49.9677
  					],
  					[
  						22.2287,
  						49.9676
  					],
  					[
  						22.2286,
  						49.9677
  					],
  					[
  						22.2287,
  						49.9676
  					],
  					[
  						22.2296,
  						49.9671
  					],
  					[
  						22.23,
  						49.9668
  					],
  					[
  						22.2302,
  						49.9662
  					],
  					[
  						22.2301,
  						49.9662
  					],
  					[
  						22.2302,
  						49.9662
  					],
  					[
  						22.2301,
  						49.9662
  					],
  					[
  						22.2298,
  						49.9661
  					],
  					[
  						22.2279,
  						49.9651
  					],
  					[
  						22.227,
  						49.9648
  					],
  					[
  						22.2265,
  						49.9645
  					],
  					[
  						22.2259,
  						49.9632
  					],
  					[
  						22.2257,
  						49.9585
  					],
  					[
  						22.2259,
  						49.9582
  					],
  					[
  						22.2261,
  						49.9565
  					],
  					[
  						22.2263,
  						49.9541
  					],
  					[
  						22.2254,
  						49.9531
  					],
  					[
  						22.2342,
  						49.9315
  					],
  					[
  						22.2456,
  						49.8954
  					],
  					[
  						22.2459,
  						49.8946
  					],
  					[
  						22.2511,
  						49.8896
  					],
  					[
  						22.2654,
  						49.8801
  					],
  					[
  						22.2641,
  						49.8788
  					],
  					[
  						22.2634,
  						49.878
  					],
  					[
  						22.2645,
  						49.876
  					],
  					[
  						22.2649,
  						49.8752
  					],
  					[
  						22.265,
  						49.8752
  					],
  					[
  						22.2649,
  						49.8752
  					],
  					[
  						22.265,
  						49.8752
  					],
  					[
  						22.2991,
  						49.8728
  					],
  					[
  						22.3073,
  						49.8617
  					],
  					[
  						22.3029,
  						49.8237
  					],
  					[
  						22.321,
  						49.8153
  					],
  					[
  						22.2953,
  						49.7961
  					],
  					[
  						22.3364,
  						49.7666
  					],
  					[
  						22.3305,
  						49.7522
  					],
  					[
  						22.2945,
  						49.7446
  					],
  					[
  						22.2623,
  						49.7632
  					],
  					[
  						22.2196,
  						49.7733
  					],
  					[
  						22.2062,
  						49.7956
  					],
  					[
  						22.1568,
  						49.7826
  					],
  					[
  						22.1565,
  						49.7827
  					],
  					[
  						22.1557,
  						49.7827
  					],
  					[
  						22.1541,
  						49.7839
  					],
  					[
  						22.1534,
  						49.7838
  					],
  					[
  						22.1521,
  						49.7843
  					],
  					[
  						22.152,
  						49.7844
  					],
  					[
  						22.1449,
  						49.7897
  					],
  					[
  						22.1373,
  						49.7956
  					],
  					[
  						22.1077,
  						49.8245
  					],
  					[
  						22.1018,
  						49.8301
  					],
  					[
  						22.102,
  						49.8316
  					],
  					[
  						22.0497,
  						49.8249
  					],
  					[
  						22.0202,
  						49.8376
  					],
  					[
  						21.9455,
  						49.8752
  					],
  					[
  						21.9169,
  						49.9083
  					],
  					[
  						21.9024,
  						49.925
  					],
  					[
  						21.9033,
  						49.9529
  					],
  					[
  						21.8812,
  						49.9552
  					],
  					[
  						21.8605,
  						49.9598
  					],
  					[
  						21.8598,
  						49.9606
  					],
  					[
  						21.7923,
  						49.9729
  					],
  					[
  						21.7482,
  						49.9689
  					],
  					[
  						21.7659,
  						49.9758
  					],
  					[
  						21.7714,
  						49.9788
  					],
  					[
  						21.7732,
  						49.9792
  					],
  					[
  						21.7746,
  						49.9794
  					],
  					[
  						21.7757,
  						49.9802
  					],
  					[
  						21.7759,
  						49.9811
  					],
  					[
  						21.7751,
  						49.9849
  					],
  					[
  						21.7741,
  						49.9864
  					],
  					[
  						21.774,
  						49.987
  					],
  					[
  						21.7735,
  						49.9876
  					],
  					[
  						21.7746,
  						49.9896
  					],
  					[
  						21.7752,
  						49.9908
  					],
  					[
  						21.7752,
  						49.991
  					],
  					[
  						21.7815,
  						49.9955
  					],
  					[
  						21.8078,
  						50.0086
  					],
  					[
  						21.8088,
  						50.0385
  					],
  					[
  						21.7985,
  						50.0723
  					],
  					[
  						21.8196,
  						50.0807
  					],
  					[
  						21.8124,
  						50.0975
  					],
  					[
  						21.7874,
  						50.0984
  					],
  					[
  						21.8034,
  						50.1514
  					],
  					[
  						21.8594,
  						50.151
  					],
  					[
  						21.8648,
  						50.1774
  					],
  					[
  						21.9193,
  						50.1866
  					],
  					[
  						21.9193,
  						50.187
  					],
  					[
  						21.9275,
  						50.1939
  					],
  					[
  						21.9308,
  						50.1983
  					],
  					[
  						21.9202,
  						50.2357
  					],
  					[
  						21.9507,
  						50.2487
  					],
  					[
  						21.9969,
  						50.2341
  					],
  					[
  						22.0044,
  						50.2323
  					],
  					[
  						22.0055,
  						50.2323
  					],
  					[
  						22.0059,
  						50.2323
  					],
  					[
  						22.0091,
  						50.2323
  					],
  					[
  						22.0092,
  						50.2323
  					],
  					[
  						22.0091,
  						50.2323
  					],
  					[
  						22.0092,
  						50.2323
  					],
  					[
  						22.0103,
  						50.232
  					],
  					[
  						22.0109,
  						50.2322
  					],
  					[
  						22.0136,
  						50.2319
  					],
  					[
  						22.0142,
  						50.2317
  					],
  					[
  						22.0219,
  						50.2308
  					],
  					[
  						22.0303,
  						50.2323
  					],
  					[
  						22.08,
  						50.2637
  					],
  					[
  						22.0935,
  						50.2691
  					],
  					[
  						22.0813,
  						50.2861
  					],
  					[
  						22.086,
  						50.3076
  					],
  					[
  						22.0082,
  						50.3026
  					],
  					[
  						22.0056,
  						50.3089
  					],
  					[
  						21.9988,
  						50.3239
  					],
  					[
  						22.07,
  						50.3313
  					],
  					[
  						22.1019,
  						50.355
  					],
  					[
  						22.1527,
  						50.3476
  					],
  					[
  						22.1976,
  						50.3521
  					],
  					[
  						22.1931,
  						50.3366
  					]
  				],
  				[
  					[
  						21.9733,
  						49.9351
  					],
  					[
  						21.9899,
  						49.9398
  					],
  					[
  						21.9952,
  						49.963
  					],
  					[
  						22.0336,
  						49.9704
  					],
  					[
  						22.0434,
  						49.99
  					],
  					[
  						22.0835,
  						49.9959
  					],
  					[
  						22.0923,
  						50.0182
  					],
  					[
  						22.0365,
  						50.0683
  					],
  					[
  						21.9901,
  						50.0778
  					],
  					[
  						21.9345,
  						50.0721
  					],
  					[
  						21.9208,
  						50.0563
  					],
  					[
  						21.8681,
  						50.0481
  					],
  					[
  						21.9387,
  						50.019
  					],
  					[
  						21.9363,
  						49.9977
  					],
  					[
  						21.9555,
  						49.9843
  					],
  					[
  						21.9583,
  						49.9574
  					],
  					[
  						21.9733,
  						49.9351
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 210,
  			name: "powiat jeleniogórski",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.8319,
  						50.7427
  					],
  					[
  						15.8143,
  						50.7554
  					],
  					[
  						15.7792,
  						50.7423
  					],
  					[
  						15.7057,
  						50.7373
  					],
  					[
  						15.6839,
  						50.7526
  					],
  					[
  						15.62,
  						50.7678
  					],
  					[
  						15.6487,
  						50.8013
  					],
  					[
  						15.6299,
  						50.8071
  					],
  					[
  						15.6661,
  						50.8471
  					],
  					[
  						15.7086,
  						50.8477
  					],
  					[
  						15.7358,
  						50.8732
  					],
  					[
  						15.7647,
  						50.8593
  					],
  					[
  						15.7725,
  						50.8842
  					],
  					[
  						15.8023,
  						50.9004
  					],
  					[
  						15.8308,
  						50.8931
  					],
  					[
  						15.8772,
  						50.9003
  					],
  					[
  						15.8698,
  						50.9133
  					],
  					[
  						15.8283,
  						50.9321
  					],
  					[
  						15.8012,
  						50.9158
  					],
  					[
  						15.7632,
  						50.9289
  					],
  					[
  						15.7333,
  						50.9204
  					],
  					[
  						15.7077,
  						50.9236
  					],
  					[
  						15.6578,
  						50.8963
  					],
  					[
  						15.6637,
  						50.8769
  					],
  					[
  						15.6302,
  						50.8624
  					],
  					[
  						15.6171,
  						50.8305
  					],
  					[
  						15.5838,
  						50.8129
  					],
  					[
  						15.5779,
  						50.7787
  					],
  					[
  						15.5243,
  						50.777
  					],
  					[
  						15.511,
  						50.7908
  					],
  					[
  						15.4805,
  						50.7908
  					],
  					[
  						15.4502,
  						50.8071
  					],
  					[
  						15.4208,
  						50.8032
  					],
  					[
  						15.3921,
  						50.7759
  					],
  					[
  						15.3748,
  						50.7776
  					],
  					[
  						15.3662,
  						50.8018
  					],
  					[
  						15.3682,
  						50.836
  					],
  					[
  						15.4132,
  						50.833
  					],
  					[
  						15.4134,
  						50.853
  					],
  					[
  						15.4392,
  						50.8523
  					],
  					[
  						15.4562,
  						50.8848
  					],
  					[
  						15.4877,
  						50.8786
  					],
  					[
  						15.5011,
  						50.8891
  					],
  					[
  						15.4867,
  						50.9118
  					],
  					[
  						15.5221,
  						50.9391
  					],
  					[
  						15.5686,
  						50.9396
  					],
  					[
  						15.5902,
  						50.9491
  					],
  					[
  						15.6381,
  						50.9492
  					],
  					[
  						15.6978,
  						50.9644
  					],
  					[
  						15.6774,
  						50.9848
  					],
  					[
  						15.7377,
  						51.0114
  					],
  					[
  						15.8224,
  						50.9803
  					],
  					[
  						15.8151,
  						50.9663
  					],
  					[
  						15.8324,
  						50.9398
  					],
  					[
  						15.8803,
  						50.9451
  					],
  					[
  						15.9069,
  						50.9271
  					],
  					[
  						15.9329,
  						50.9236
  					],
  					[
  						15.931,
  						50.9007
  					],
  					[
  						15.962,
  						50.8946
  					],
  					[
  						15.9525,
  						50.8728
  					],
  					[
  						15.9572,
  						50.8485
  					],
  					[
  						15.8888,
  						50.8042
  					],
  					[
  						15.8925,
  						50.7907
  					],
  					[
  						15.8675,
  						50.7697
  					],
  					[
  						15.8618,
  						50.7454
  					],
  					[
  						15.8319,
  						50.7427
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 211,
  			name: "powiat świdnicki",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.3372,
  						51.029
  					],
  					[
  						16.369,
  						51.0252
  					],
  					[
  						16.3807,
  						51.0128
  					],
  					[
  						16.4173,
  						51.0043
  					],
  					[
  						16.4698,
  						51.0073
  					],
  					[
  						16.5265,
  						50.991
  					],
  					[
  						16.5608,
  						50.9996
  					],
  					[
  						16.6027,
  						51.0018
  					],
  					[
  						16.63,
  						50.9815
  					],
  					[
  						16.5817,
  						50.9756
  					],
  					[
  						16.5905,
  						50.9609
  					],
  					[
  						16.5758,
  						50.9199
  					],
  					[
  						16.618,
  						50.9282
  					],
  					[
  						16.6891,
  						50.9341
  					],
  					[
  						16.6957,
  						50.8886
  					],
  					[
  						16.6716,
  						50.8768
  					],
  					[
  						16.6764,
  						50.8535
  					],
  					[
  						16.6971,
  						50.8431
  					],
  					[
  						16.669,
  						50.8205
  					],
  					[
  						16.6387,
  						50.8258
  					],
  					[
  						16.5792,
  						50.818
  					],
  					[
  						16.5938,
  						50.7989
  					],
  					[
  						16.548,
  						50.7772
  					],
  					[
  						16.5581,
  						50.7438
  					],
  					[
  						16.5197,
  						50.7206
  					],
  					[
  						16.4889,
  						50.7144
  					],
  					[
  						16.4621,
  						50.7462
  					],
  					[
  						16.409,
  						50.7664
  					],
  					[
  						16.3769,
  						50.7861
  					],
  					[
  						16.3507,
  						50.7932
  					],
  					[
  						16.3322,
  						50.8105
  					],
  					[
  						16.3421,
  						50.8385
  					],
  					[
  						16.2723,
  						50.854
  					],
  					[
  						16.2794,
  						50.8691
  					],
  					[
  						16.2396,
  						50.8868
  					],
  					[
  						16.2039,
  						50.8857
  					],
  					[
  						16.2009,
  						50.9058
  					],
  					[
  						16.1595,
  						50.9507
  					],
  					[
  						16.2009,
  						50.9739
  					],
  					[
  						16.2155,
  						51.0186
  					],
  					[
  						16.2651,
  						51.0022
  					],
  					[
  						16.2691,
  						51.0121
  					],
  					[
  						16.3372,
  						51.029
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 212,
  			name: "powiat opoczyński",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.9264,
  						51.4242
  					],
  					[
  						19.9707,
  						51.4312
  					],
  					[
  						20.0089,
  						51.4332
  					],
  					[
  						20.0363,
  						51.4335
  					],
  					[
  						20.0613,
  						51.455
  					],
  					[
  						20.0552,
  						51.4681
  					],
  					[
  						20.1016,
  						51.4706
  					],
  					[
  						20.1291,
  						51.4633
  					],
  					[
  						20.1918,
  						51.4631
  					],
  					[
  						20.1994,
  						51.4822
  					],
  					[
  						20.254,
  						51.5151
  					],
  					[
  						20.252,
  						51.5233
  					],
  					[
  						20.3004,
  						51.5528
  					],
  					[
  						20.3322,
  						51.5833
  					],
  					[
  						20.3668,
  						51.5764
  					],
  					[
  						20.4203,
  						51.6
  					],
  					[
  						20.4414,
  						51.5715
  					],
  					[
  						20.4677,
  						51.5609
  					],
  					[
  						20.4502,
  						51.5081
  					],
  					[
  						20.4945,
  						51.5003
  					],
  					[
  						20.5199,
  						51.5098
  					],
  					[
  						20.5264,
  						51.4684
  					],
  					[
  						20.4967,
  						51.4484
  					],
  					[
  						20.4896,
  						51.4213
  					],
  					[
  						20.4803,
  						51.4097
  					],
  					[
  						20.4467,
  						51.41
  					],
  					[
  						20.427,
  						51.3711
  					],
  					[
  						20.4328,
  						51.3394
  					],
  					[
  						20.4144,
  						51.3207
  					],
  					[
  						20.3644,
  						51.3105
  					],
  					[
  						20.3644,
  						51.3084
  					],
  					[
  						20.3653,
  						51.3079
  					],
  					[
  						20.365,
  						51.3075
  					],
  					[
  						20.3904,
  						51.2722
  					],
  					[
  						20.3797,
  						51.246
  					],
  					[
  						20.3344,
  						51.2547
  					],
  					[
  						20.3101,
  						51.2431
  					],
  					[
  						20.2428,
  						51.2458
  					],
  					[
  						20.256,
  						51.2367
  					],
  					[
  						20.2516,
  						51.2068
  					],
  					[
  						20.2146,
  						51.2096
  					],
  					[
  						20.206,
  						51.2
  					],
  					[
  						20.1195,
  						51.1893
  					],
  					[
  						20.0258,
  						51.2004
  					],
  					[
  						19.9938,
  						51.184
  					],
  					[
  						19.9932,
  						51.1844
  					],
  					[
  						20.0132,
  						51.2005
  					],
  					[
  						19.9923,
  						51.2206
  					],
  					[
  						20.0642,
  						51.2473
  					],
  					[
  						20.0629,
  						51.2646
  					],
  					[
  						20.041,
  						51.2795
  					],
  					[
  						20.0486,
  						51.2938
  					],
  					[
  						20.0169,
  						51.3203
  					],
  					[
  						19.9866,
  						51.3338
  					],
  					[
  						19.9909,
  						51.3562
  					],
  					[
  						19.9584,
  						51.358
  					],
  					[
  						19.9432,
  						51.3489
  					],
  					[
  						19.9067,
  						51.3644
  					],
  					[
  						19.8659,
  						51.378
  					],
  					[
  						19.8634,
  						51.4011
  					],
  					[
  						19.9032,
  						51.4096
  					],
  					[
  						19.9264,
  						51.4242
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 213,
  			name: "powiat człuchowski",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.4666,
  						53.6035
  					],
  					[
  						17.4664,
  						53.6016
  					],
  					[
  						17.4664,
  						53.6015
  					],
  					[
  						17.4664,
  						53.6016
  					],
  					[
  						17.4282,
  						53.5892
  					],
  					[
  						17.4136,
  						53.5603
  					],
  					[
  						17.4115,
  						53.5337
  					],
  					[
  						17.3907,
  						53.491
  					],
  					[
  						17.3507,
  						53.4935
  					],
  					[
  						17.3055,
  						53.5127
  					],
  					[
  						17.2822,
  						53.5337
  					],
  					[
  						17.1724,
  						53.5327
  					],
  					[
  						17.1637,
  						53.5281
  					],
  					[
  						17.0898,
  						53.5427
  					],
  					[
  						17.0646,
  						53.5232
  					],
  					[
  						17.0328,
  						53.5158
  					],
  					[
  						16.9941,
  						53.5319
  					],
  					[
  						17.0014,
  						53.5498
  					],
  					[
  						16.9794,
  						53.556
  					],
  					[
  						16.9488,
  						53.5496
  					],
  					[
  						16.941,
  						53.5817
  					],
  					[
  						16.8934,
  						53.6285
  					],
  					[
  						16.8922,
  						53.6559
  					],
  					[
  						16.8773,
  						53.7191
  					],
  					[
  						16.8577,
  						53.7471
  					],
  					[
  						16.9307,
  						53.7772
  					],
  					[
  						16.9445,
  						53.8009
  					],
  					[
  						16.9095,
  						53.8018
  					],
  					[
  						16.9086,
  						53.8214
  					],
  					[
  						16.8762,
  						53.8318
  					],
  					[
  						16.8653,
  						53.8518
  					],
  					[
  						16.8724,
  						53.8687
  					],
  					[
  						16.9063,
  						53.8758
  					],
  					[
  						16.9765,
  						53.8796
  					],
  					[
  						16.9821,
  						53.9049
  					],
  					[
  						16.9865,
  						53.9215
  					],
  					[
  						17.02,
  						53.9397
  					],
  					[
  						17.0049,
  						53.9576
  					],
  					[
  						17.0306,
  						53.9723
  					],
  					[
  						17.0493,
  						53.9646
  					],
  					[
  						17.0976,
  						53.9887
  					],
  					[
  						17.1209,
  						54.0112
  					],
  					[
  						17.1767,
  						54.0044
  					],
  					[
  						17.1813,
  						53.9893
  					],
  					[
  						17.2317,
  						53.9817
  					],
  					[
  						17.2265,
  						53.9576
  					],
  					[
  						17.2755,
  						53.906
  					],
  					[
  						17.2643,
  						53.8903
  					],
  					[
  						17.2979,
  						53.8728
  					],
  					[
  						17.3209,
  						53.8779
  					],
  					[
  						17.3423,
  						53.8614
  					],
  					[
  						17.3554,
  						53.8101
  					],
  					[
  						17.3772,
  						53.7919
  					],
  					[
  						17.4195,
  						53.7862
  					],
  					[
  						17.4375,
  						53.788
  					],
  					[
  						17.4619,
  						53.7652
  					],
  					[
  						17.4751,
  						53.7398
  					],
  					[
  						17.4567,
  						53.7269
  					],
  					[
  						17.5211,
  						53.7159
  					],
  					[
  						17.4917,
  						53.6497
  					],
  					[
  						17.4762,
  						53.6501
  					],
  					[
  						17.4666,
  						53.6035
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 214,
  			name: "powiat ostrowski",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.0874,
  						51.7062
  					],
  					[
  						18.0806,
  						51.6909
  					],
  					[
  						18.1168,
  						51.6894
  					],
  					[
  						18.1114,
  						51.6667
  					],
  					[
  						18.0794,
  						51.6542
  					],
  					[
  						18.0747,
  						51.6376
  					],
  					[
  						18.1089,
  						51.5998
  					],
  					[
  						18.1773,
  						51.5801
  					],
  					[
  						18.1884,
  						51.558
  					],
  					[
  						18.1773,
  						51.5457
  					],
  					[
  						18.1505,
  						51.5373
  					],
  					[
  						18.1166,
  						51.544
  					],
  					[
  						18.0789,
  						51.5407
  					],
  					[
  						18.0607,
  						51.558
  					],
  					[
  						18.0212,
  						51.5699
  					],
  					[
  						17.9819,
  						51.5632
  					],
  					[
  						17.9483,
  						51.569
  					],
  					[
  						17.9297,
  						51.5463
  					],
  					[
  						17.9003,
  						51.5377
  					],
  					[
  						17.8612,
  						51.497
  					],
  					[
  						17.8233,
  						51.4811
  					],
  					[
  						17.7836,
  						51.4961
  					],
  					[
  						17.7416,
  						51.4779
  					],
  					[
  						17.7537,
  						51.4634
  					],
  					[
  						17.7845,
  						51.4656
  					],
  					[
  						17.7494,
  						51.4276
  					],
  					[
  						17.75,
  						51.4113
  					],
  					[
  						17.7031,
  						51.3995
  					],
  					[
  						17.6686,
  						51.416
  					],
  					[
  						17.6129,
  						51.423
  					],
  					[
  						17.6039,
  						51.4094
  					],
  					[
  						17.5706,
  						51.4051
  					],
  					[
  						17.5406,
  						51.4213
  					],
  					[
  						17.5519,
  						51.4352
  					],
  					[
  						17.527,
  						51.4572
  					],
  					[
  						17.514,
  						51.5015
  					],
  					[
  						17.5216,
  						51.5146
  					],
  					[
  						17.5543,
  						51.5175
  					],
  					[
  						17.5727,
  						51.5299
  					],
  					[
  						17.5749,
  						51.5493
  					],
  					[
  						17.5562,
  						51.5843
  					],
  					[
  						17.5714,
  						51.59
  					],
  					[
  						17.578,
  						51.6137
  					],
  					[
  						17.5484,
  						51.6273
  					],
  					[
  						17.5633,
  						51.6717
  					],
  					[
  						17.6044,
  						51.6747
  					],
  					[
  						17.6193,
  						51.6981
  					],
  					[
  						17.6614,
  						51.715
  					],
  					[
  						17.6608,
  						51.7363
  					],
  					[
  						17.7072,
  						51.7446
  					],
  					[
  						17.6467,
  						51.7956
  					],
  					[
  						17.6464,
  						51.8045
  					],
  					[
  						17.731,
  						51.8161
  					],
  					[
  						17.7497,
  						51.7898
  					],
  					[
  						17.8171,
  						51.7988
  					],
  					[
  						17.8738,
  						51.7857
  					],
  					[
  						17.9315,
  						51.7785
  					],
  					[
  						17.9496,
  						51.7861
  					],
  					[
  						17.9903,
  						51.7783
  					],
  					[
  						18.0096,
  						51.7597
  					],
  					[
  						18.0017,
  						51.7258
  					],
  					[
  						18.0103,
  						51.7139
  					],
  					[
  						18.0874,
  						51.7062
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 215,
  			name: "powiat Kalisz",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.0096,
  						51.7597
  					],
  					[
  						18.0425,
  						51.7795
  					],
  					[
  						18.0959,
  						51.7939
  					],
  					[
  						18.137,
  						51.7602
  					],
  					[
  						18.1492,
  						51.7339
  					],
  					[
  						18.119,
  						51.7092
  					],
  					[
  						18.0874,
  						51.7062
  					],
  					[
  						18.0103,
  						51.7139
  					],
  					[
  						18.0017,
  						51.7258
  					],
  					[
  						18.0096,
  						51.7597
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 216,
  			name: "powiat strzyżowski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.5508,
  						49.8973
  					],
  					[
  						21.599,
  						49.9219
  					],
  					[
  						21.6205,
  						49.9206
  					],
  					[
  						21.621,
  						49.9212
  					],
  					[
  						21.6508,
  						49.924
  					],
  					[
  						21.6542,
  						49.9248
  					],
  					[
  						21.6933,
  						49.9419
  					],
  					[
  						21.6905,
  						49.9627
  					],
  					[
  						21.7482,
  						49.9689
  					],
  					[
  						21.7923,
  						49.9729
  					],
  					[
  						21.8598,
  						49.9606
  					],
  					[
  						21.8605,
  						49.9598
  					],
  					[
  						21.8812,
  						49.9552
  					],
  					[
  						21.9033,
  						49.9529
  					],
  					[
  						21.9024,
  						49.925
  					],
  					[
  						21.9169,
  						49.9083
  					],
  					[
  						21.9455,
  						49.8752
  					],
  					[
  						22.0202,
  						49.8376
  					],
  					[
  						22.0106,
  						49.8191
  					],
  					[
  						21.9668,
  						49.8225
  					],
  					[
  						21.9487,
  						49.8145
  					],
  					[
  						21.9448,
  						49.8114
  					],
  					[
  						21.9454,
  						49.8107
  					],
  					[
  						21.9454,
  						49.8104
  					],
  					[
  						21.9451,
  						49.8097
  					],
  					[
  						21.9448,
  						49.809
  					],
  					[
  						21.942,
  						49.8059
  					],
  					[
  						21.9419,
  						49.8059
  					],
  					[
  						21.942,
  						49.8059
  					],
  					[
  						21.9423,
  						49.8052
  					],
  					[
  						21.9421,
  						49.8047
  					],
  					[
  						21.9276,
  						49.7865
  					],
  					[
  						21.8948,
  						49.7811
  					],
  					[
  						21.8583,
  						49.7918
  					],
  					[
  						21.8117,
  						49.7812
  					],
  					[
  						21.7726,
  						49.8006
  					],
  					[
  						21.7568,
  						49.7965
  					],
  					[
  						21.7352,
  						49.7958
  					],
  					[
  						21.7169,
  						49.8121
  					],
  					[
  						21.6606,
  						49.8438
  					],
  					[
  						21.6545,
  						49.8387
  					],
  					[
  						21.6299,
  						49.821
  					],
  					[
  						21.627,
  						49.7975
  					],
  					[
  						21.6181,
  						49.7979
  					],
  					[
  						21.5598,
  						49.7861
  					],
  					[
  						21.5525,
  						49.8278
  					],
  					[
  						21.4774,
  						49.8405
  					],
  					[
  						21.4876,
  						49.8792
  					],
  					[
  						21.5017,
  						49.8804
  					],
  					[
  						21.5235,
  						49.8929
  					],
  					[
  						21.5508,
  						49.8973
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 217,
  			name: "powiat miński",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.4475,
  						52.3037
  					],
  					[
  						21.4871,
  						52.3058
  					],
  					[
  						21.4973,
  						52.3293
  					],
  					[
  						21.5191,
  						52.3376
  					],
  					[
  						21.5677,
  						52.3408
  					],
  					[
  						21.582,
  						52.3535
  					],
  					[
  						21.5791,
  						52.3542
  					],
  					[
  						21.578,
  						52.3546
  					],
  					[
  						21.5737,
  						52.3563
  					],
  					[
  						21.5733,
  						52.3566
  					],
  					[
  						21.5725,
  						52.3569
  					],
  					[
  						21.5697,
  						52.3585
  					],
  					[
  						21.6303,
  						52.3616
  					],
  					[
  						21.6425,
  						52.3788
  					],
  					[
  						21.7042,
  						52.39
  					],
  					[
  						21.7402,
  						52.3831
  					],
  					[
  						21.754,
  						52.3584
  					],
  					[
  						21.7966,
  						52.3533
  					],
  					[
  						21.8036,
  						52.3431
  					],
  					[
  						21.7578,
  						52.333
  					],
  					[
  						21.7382,
  						52.3137
  					],
  					[
  						21.7843,
  						52.3077
  					],
  					[
  						21.7954,
  						52.2899
  					],
  					[
  						21.7927,
  						52.2631
  					],
  					[
  						21.8475,
  						52.2564
  					],
  					[
  						21.8669,
  						52.2372
  					],
  					[
  						21.8703,
  						52.2356
  					],
  					[
  						21.8719,
  						52.2346
  					],
  					[
  						21.8724,
  						52.2343
  					],
  					[
  						21.8737,
  						52.2335
  					],
  					[
  						21.8905,
  						52.2277
  					],
  					[
  						21.9418,
  						52.2164
  					],
  					[
  						21.9161,
  						52.1752
  					],
  					[
  						21.9199,
  						52.149
  					],
  					[
  						21.9376,
  						52.147
  					],
  					[
  						21.9468,
  						52.1061
  					],
  					[
  						21.9763,
  						52.0908
  					],
  					[
  						21.9406,
  						52.0727
  					],
  					[
  						21.8679,
  						52.0375
  					],
  					[
  						21.87,
  						52.0364
  					],
  					[
  						21.8879,
  						51.9908
  					],
  					[
  						21.8272,
  						51.9956
  					],
  					[
  						21.8181,
  						51.9789
  					],
  					[
  						21.7684,
  						51.9749
  					],
  					[
  						21.7517,
  						51.9906
  					],
  					[
  						21.7173,
  						51.997
  					],
  					[
  						21.6728,
  						52.0177
  					],
  					[
  						21.6452,
  						52.0083
  					],
  					[
  						21.5777,
  						52.0332
  					],
  					[
  						21.5752,
  						52.0521
  					],
  					[
  						21.5489,
  						52.0872
  					],
  					[
  						21.5147,
  						52.0953
  					],
  					[
  						21.5174,
  						52.1119
  					],
  					[
  						21.4826,
  						52.1383
  					],
  					[
  						21.4512,
  						52.1461
  					],
  					[
  						21.43,
  						52.1676
  					],
  					[
  						21.3722,
  						52.1664
  					],
  					[
  						21.3967,
  						52.1883
  					],
  					[
  						21.3236,
  						52.2127
  					],
  					[
  						21.2833,
  						52.2215
  					],
  					[
  						21.2505,
  						52.2226
  					],
  					[
  						21.2505,
  						52.2627
  					],
  					[
  						21.2955,
  						52.2675
  					],
  					[
  						21.2976,
  						52.2789
  					],
  					[
  						21.4402,
  						52.2625
  					],
  					[
  						21.4593,
  						52.2705
  					],
  					[
  						21.4133,
  						52.2871
  					],
  					[
  						21.4011,
  						52.3049
  					],
  					[
  						21.4475,
  						52.3037
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 218,
  			name: "powiat zwoleński",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.55,
  						51.4446
  					],
  					[
  						21.5568,
  						51.4517
  					],
  					[
  						21.6068,
  						51.4515
  					],
  					[
  						21.6067,
  						51.4725
  					],
  					[
  						21.693,
  						51.4721
  					],
  					[
  						21.7022,
  						51.4894
  					],
  					[
  						21.7423,
  						51.4782
  					],
  					[
  						21.7356,
  						51.4541
  					],
  					[
  						21.7524,
  						51.4272
  					],
  					[
  						21.7877,
  						51.4202
  					],
  					[
  						21.7677,
  						51.4135
  					],
  					[
  						21.8018,
  						51.3783
  					],
  					[
  						21.8322,
  						51.3805
  					],
  					[
  						21.848,
  						51.365
  					],
  					[
  						21.8234,
  						51.3033
  					],
  					[
  						21.7831,
  						51.2937
  					],
  					[
  						21.8118,
  						51.2915
  					],
  					[
  						21.8601,
  						51.2747
  					],
  					[
  						21.8217,
  						51.2627
  					],
  					[
  						21.7421,
  						51.2761
  					],
  					[
  						21.7053,
  						51.2916
  					],
  					[
  						21.705,
  						51.2918
  					],
  					[
  						21.6676,
  						51.3022
  					],
  					[
  						21.6542,
  						51.2749
  					],
  					[
  						21.6319,
  						51.2742
  					],
  					[
  						21.5401,
  						51.2952
  					],
  					[
  						21.5608,
  						51.2726
  					],
  					[
  						21.5159,
  						51.2635
  					],
  					[
  						21.501,
  						51.2727
  					],
  					[
  						21.4677,
  						51.2525
  					],
  					[
  						21.4518,
  						51.2207
  					],
  					[
  						21.4162,
  						51.2212
  					],
  					[
  						21.3635,
  						51.2292
  					],
  					[
  						21.3362,
  						51.2503
  					],
  					[
  						21.3432,
  						51.2583
  					],
  					[
  						21.3671,
  						51.2971
  					],
  					[
  						21.3641,
  						51.3079
  					],
  					[
  						21.3554,
  						51.3283
  					],
  					[
  						21.3874,
  						51.3465
  					],
  					[
  						21.4318,
  						51.3542
  					],
  					[
  						21.471,
  						51.4018
  					],
  					[
  						21.5635,
  						51.4252
  					],
  					[
  						21.55,
  						51.4446
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 219,
  			name: "powiat żuromiński",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.9915,
  						52.828
  					],
  					[
  						19.9549,
  						52.8592
  					],
  					[
  						19.964,
  						52.8824
  					],
  					[
  						19.9325,
  						52.9007
  					],
  					[
  						19.888,
  						52.9094
  					],
  					[
  						19.8633,
  						52.9048
  					],
  					[
  						19.84,
  						52.9206
  					],
  					[
  						19.817,
  						52.9207
  					],
  					[
  						19.7698,
  						52.9592
  					],
  					[
  						19.6974,
  						52.9714
  					],
  					[
  						19.6848,
  						52.963
  					],
  					[
  						19.6702,
  						52.9935
  					],
  					[
  						19.6835,
  						53.0186
  					],
  					[
  						19.6522,
  						53.0378
  					],
  					[
  						19.6388,
  						53.0931
  					],
  					[
  						19.6465,
  						53.1122
  					],
  					[
  						19.6671,
  						53.1061
  					],
  					[
  						19.712,
  						53.1347
  					],
  					[
  						19.7616,
  						53.1518
  					],
  					[
  						19.7776,
  						53.155
  					],
  					[
  						19.8388,
  						53.1414
  					],
  					[
  						19.8254,
  						53.1733
  					],
  					[
  						19.8707,
  						53.2009
  					],
  					[
  						19.9134,
  						53.2115
  					],
  					[
  						19.9074,
  						53.177
  					],
  					[
  						19.9548,
  						53.1602
  					],
  					[
  						19.9782,
  						53.1439
  					],
  					[
  						20.0387,
  						53.1592
  					],
  					[
  						20.0762,
  						53.1573
  					],
  					[
  						20.1042,
  						53.1681
  					],
  					[
  						20.1351,
  						53.1425
  					],
  					[
  						20.1172,
  						53.0921
  					],
  					[
  						20.0864,
  						53.0702
  					],
  					[
  						20.0856,
  						53.0521
  					],
  					[
  						20.0428,
  						53.0331
  					],
  					[
  						20.0373,
  						52.9677
  					],
  					[
  						20.0325,
  						52.9292
  					],
  					[
  						20.0934,
  						52.8937
  					],
  					[
  						20.101,
  						52.8725
  					],
  					[
  						20.1311,
  						52.889
  					],
  					[
  						20.1478,
  						52.8862
  					],
  					[
  						20.1445,
  						52.8514
  					],
  					[
  						20.1267,
  						52.8261
  					],
  					[
  						20.0877,
  						52.8359
  					],
  					[
  						20.0439,
  						52.8361
  					],
  					[
  						20.0002,
  						52.8541
  					],
  					[
  						19.9915,
  						52.828
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 220,
  			name: "powiat lubelski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.1678,
  						51.2566
  					],
  					[
  						22.2243,
  						51.2672
  					],
  					[
  						22.2456,
  						51.2626
  					],
  					[
  						22.3103,
  						51.2771
  					],
  					[
  						22.2769,
  						51.2921
  					],
  					[
  						22.2844,
  						51.3175
  					],
  					[
  						22.251,
  						51.3334
  					],
  					[
  						22.2902,
  						51.347
  					],
  					[
  						22.2658,
  						51.3664
  					],
  					[
  						22.2932,
  						51.3998
  					],
  					[
  						22.3013,
  						51.4283
  					],
  					[
  						22.3289,
  						51.4278
  					],
  					[
  						22.3566,
  						51.43
  					],
  					[
  						22.3906,
  						51.4044
  					],
  					[
  						22.4253,
  						51.3909
  					],
  					[
  						22.4578,
  						51.4089
  					],
  					[
  						22.4898,
  						51.4032
  					],
  					[
  						22.4899,
  						51.4032
  					],
  					[
  						22.4898,
  						51.4032
  					],
  					[
  						22.4899,
  						51.4032
  					],
  					[
  						22.4907,
  						51.4025
  					],
  					[
  						22.4912,
  						51.402
  					],
  					[
  						22.4913,
  						51.4022
  					],
  					[
  						22.4913,
  						51.402
  					],
  					[
  						22.4912,
  						51.402
  					],
  					[
  						22.4915,
  						51.4015
  					],
  					[
  						22.5118,
  						51.3757
  					],
  					[
  						22.566,
  						51.3915
  					],
  					[
  						22.6028,
  						51.3796
  					],
  					[
  						22.6349,
  						51.3796
  					],
  					[
  						22.6689,
  						51.3645
  					],
  					[
  						22.6765,
  						51.3467
  					],
  					[
  						22.7056,
  						51.323
  					],
  					[
  						22.7845,
  						51.3003
  					],
  					[
  						22.7699,
  						51.2781
  					],
  					[
  						22.724,
  						51.2641
  					],
  					[
  						22.7418,
  						51.2501
  					],
  					[
  						22.7199,
  						51.235
  					],
  					[
  						22.6645,
  						51.2425
  					],
  					[
  						22.6049,
  						51.2806
  					],
  					[
  						22.5721,
  						51.286
  					],
  					[
  						22.4928,
  						51.2816
  					],
  					[
  						22.4661,
  						51.2554
  					],
  					[
  						22.4654,
  						51.2364
  					],
  					[
  						22.4707,
  						51.2127
  					],
  					[
  						22.5158,
  						51.1864
  					],
  					[
  						22.4714,
  						51.1589
  					],
  					[
  						22.4842,
  						51.1439
  					],
  					[
  						22.5549,
  						51.1487
  					],
  					[
  						22.5541,
  						51.1765
  					],
  					[
  						22.6199,
  						51.1797
  					],
  					[
  						22.612,
  						51.2094
  					],
  					[
  						22.6388,
  						51.214
  					],
  					[
  						22.7013,
  						51.1911
  					],
  					[
  						22.6868,
  						51.1776
  					],
  					[
  						22.6811,
  						51.1521
  					],
  					[
  						22.6988,
  						51.1031
  					],
  					[
  						22.7725,
  						51.0737
  					],
  					[
  						22.7874,
  						51.0536
  					],
  					[
  						22.8117,
  						51.0409
  					],
  					[
  						22.8101,
  						51.0183
  					],
  					[
  						22.7773,
  						50.9928
  					],
  					[
  						22.8135,
  						50.9734
  					],
  					[
  						22.7886,
  						50.9654
  					],
  					[
  						22.7871,
  						50.9372
  					],
  					[
  						22.7616,
  						50.9071
  					],
  					[
  						22.7712,
  						50.8844
  					],
  					[
  						22.7129,
  						50.88
  					],
  					[
  						22.7128,
  						50.88
  					],
  					[
  						22.7129,
  						50.88
  					],
  					[
  						22.7128,
  						50.88
  					],
  					[
  						22.6784,
  						50.8479
  					],
  					[
  						22.6507,
  						50.8583
  					],
  					[
  						22.6013,
  						50.8389
  					],
  					[
  						22.5781,
  						50.8384
  					],
  					[
  						22.5327,
  						50.8476
  					],
  					[
  						22.5402,
  						50.8707
  					],
  					[
  						22.5373,
  						50.9089
  					],
  					[
  						22.4863,
  						50.9063
  					],
  					[
  						22.4748,
  						50.9129
  					],
  					[
  						22.454,
  						50.9168
  					],
  					[
  						22.479,
  						50.9488
  					],
  					[
  						22.4467,
  						50.9721
  					],
  					[
  						22.4526,
  						50.9835
  					],
  					[
  						22.3872,
  						50.9992
  					],
  					[
  						22.3761,
  						51.0373
  					],
  					[
  						22.3666,
  						51.043
  					],
  					[
  						22.2691,
  						51.0315
  					],
  					[
  						22.1776,
  						51.0355
  					],
  					[
  						22.1675,
  						51.0442
  					],
  					[
  						22.2156,
  						51.0453
  					],
  					[
  						22.2217,
  						51.0877
  					],
  					[
  						22.2319,
  						51.1078
  					],
  					[
  						22.2208,
  						51.1272
  					],
  					[
  						22.1785,
  						51.1366
  					],
  					[
  						22.182,
  						51.1545
  					],
  					[
  						22.125,
  						51.1519
  					],
  					[
  						22.1196,
  						51.1712
  					],
  					[
  						22.1446,
  						51.1739
  					],
  					[
  						22.1665,
  						51.1891
  					],
  					[
  						22.1631,
  						51.2188
  					],
  					[
  						22.1294,
  						51.2277
  					],
  					[
  						22.1678,
  						51.2566
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 221,
  			name: "powiat proszowicki",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.5632,
  						50.1997
  					],
  					[
  						20.624,
  						50.2007
  					],
  					[
  						20.6328,
  						50.2104
  					],
  					[
  						20.6394,
  						50.211
  					],
  					[
  						20.6815,
  						50.2059
  					],
  					[
  						20.6815,
  						50.2008
  					],
  					[
  						20.636,
  						50.1699
  					],
  					[
  						20.5802,
  						50.1418
  					],
  					[
  						20.5346,
  						50.1461
  					],
  					[
  						20.5111,
  						50.1385
  					],
  					[
  						20.4429,
  						50.1425
  					],
  					[
  						20.3692,
  						50.1136
  					],
  					[
  						20.3538,
  						50.1171
  					],
  					[
  						20.3218,
  						50.1223
  					],
  					[
  						20.3292,
  						50.1444
  					],
  					[
  						20.2844,
  						50.1593
  					],
  					[
  						20.2774,
  						50.1306
  					],
  					[
  						20.2346,
  						50.111
  					],
  					[
  						20.2091,
  						50.1156
  					],
  					[
  						20.2013,
  						50.1204
  					],
  					[
  						20.2045,
  						50.1297
  					],
  					[
  						20.1762,
  						50.1498
  					],
  					[
  						20.1749,
  						50.1868
  					],
  					[
  						20.1557,
  						50.2042
  					],
  					[
  						20.1634,
  						50.2284
  					],
  					[
  						20.135,
  						50.2419
  					],
  					[
  						20.138,
  						50.2705
  					],
  					[
  						20.1727,
  						50.2756
  					],
  					[
  						20.1769,
  						50.2902
  					],
  					[
  						20.1936,
  						50.2994
  					],
  					[
  						20.24,
  						50.3003
  					],
  					[
  						20.2926,
  						50.3222
  					],
  					[
  						20.3279,
  						50.3186
  					],
  					[
  						20.3383,
  						50.2919
  					],
  					[
  						20.3331,
  						50.2675
  					],
  					[
  						20.3676,
  						50.2487
  					],
  					[
  						20.3847,
  						50.2076
  					],
  					[
  						20.4102,
  						50.2118
  					],
  					[
  						20.4155,
  						50.1912
  					],
  					[
  						20.4697,
  						50.2008
  					],
  					[
  						20.5117,
  						50.1893
  					],
  					[
  						20.5632,
  						50.1997
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 222,
  			name: "powiat wielicki",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.3483,
  						50.0999
  					],
  					[
  						20.3554,
  						50.0706
  					],
  					[
  						20.3797,
  						50.0646
  					],
  					[
  						20.3876,
  						50.0221
  					],
  					[
  						20.3208,
  						50.0185
  					],
  					[
  						20.3239,
  						49.998
  					],
  					[
  						20.3528,
  						49.9904
  					],
  					[
  						20.316,
  						49.9678
  					],
  					[
  						20.3056,
  						49.9145
  					],
  					[
  						20.2713,
  						49.8923
  					],
  					[
  						20.2594,
  						49.8713
  					],
  					[
  						20.2325,
  						49.8636
  					],
  					[
  						20.2219,
  						49.8662
  					],
  					[
  						20.1825,
  						49.8783
  					],
  					[
  						20.1683,
  						49.8939
  					],
  					[
  						20.1267,
  						49.8885
  					],
  					[
  						20.1193,
  						49.9122
  					],
  					[
  						20.0909,
  						49.9224
  					],
  					[
  						20.0906,
  						49.9229
  					],
  					[
  						20.0903,
  						49.9233
  					],
  					[
  						20.0849,
  						49.9274
  					],
  					[
  						20.0618,
  						49.9155
  					],
  					[
  						20.0199,
  						49.9099
  					],
  					[
  						20.006,
  						49.9177
  					],
  					[
  						20.0013,
  						49.9311
  					],
  					[
  						19.9634,
  						49.9686
  					],
  					[
  						19.9644,
  						49.9777
  					],
  					[
  						19.9771,
  						49.9809
  					],
  					[
  						19.9822,
  						49.9797
  					],
  					[
  						20.0186,
  						49.9859
  					],
  					[
  						20.0657,
  						50.0078
  					],
  					[
  						20.0798,
  						50.0359
  					],
  					[
  						20.1251,
  						50.0397
  					],
  					[
  						20.2173,
  						50.0534
  					],
  					[
  						20.2342,
  						50.0678
  					],
  					[
  						20.2887,
  						50.0837
  					],
  					[
  						20.2993,
  						50.0979
  					],
  					[
  						20.3396,
  						50.0919
  					],
  					[
  						20.3483,
  						50.0999
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 223,
  			name: "powiat sieradzki",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.472,
  						51.851
  					],
  					[
  						18.5073,
  						51.8544
  					],
  					[
  						18.5227,
  						51.8344
  					],
  					[
  						18.55,
  						51.8454
  					],
  					[
  						18.5949,
  						51.8481
  					],
  					[
  						18.6132,
  						51.8344
  					],
  					[
  						18.6857,
  						51.821
  					],
  					[
  						18.6683,
  						51.8018
  					],
  					[
  						18.6551,
  						51.7472
  					],
  					[
  						18.7344,
  						51.7347
  					],
  					[
  						18.7642,
  						51.7496
  					],
  					[
  						18.8395,
  						51.7269
  					],
  					[
  						18.8415,
  						51.6968
  					],
  					[
  						18.821,
  						51.685
  					],
  					[
  						18.8198,
  						51.6582
  					],
  					[
  						18.8734,
  						51.6165
  					],
  					[
  						18.8798,
  						51.6009
  					],
  					[
  						18.8475,
  						51.5886
  					],
  					[
  						18.817,
  						51.5619
  					],
  					[
  						18.8714,
  						51.5185
  					],
  					[
  						18.8631,
  						51.4891
  					],
  					[
  						18.8693,
  						51.4822
  					],
  					[
  						18.8785,
  						51.4661
  					],
  					[
  						18.8408,
  						51.4454
  					],
  					[
  						18.8249,
  						51.4424
  					],
  					[
  						18.803,
  						51.4105
  					],
  					[
  						18.7682,
  						51.3799
  					],
  					[
  						18.7668,
  						51.3652
  					],
  					[
  						18.6626,
  						51.3585
  					],
  					[
  						18.5612,
  						51.3836
  					],
  					[
  						18.5215,
  						51.3846
  					],
  					[
  						18.5025,
  						51.3961
  					],
  					[
  						18.4642,
  						51.3994
  					],
  					[
  						18.3436,
  						51.3884
  					],
  					[
  						18.3293,
  						51.3919
  					],
  					[
  						18.3263,
  						51.4198
  					],
  					[
  						18.3616,
  						51.468
  					],
  					[
  						18.3828,
  						51.4773
  					],
  					[
  						18.3801,
  						51.5182
  					],
  					[
  						18.3586,
  						51.5364
  					],
  					[
  						18.3706,
  						51.591
  					],
  					[
  						18.3521,
  						51.6006
  					],
  					[
  						18.3684,
  						51.6174
  					],
  					[
  						18.3682,
  						51.618
  					],
  					[
  						18.3809,
  						51.6523
  					],
  					[
  						18.3553,
  						51.6605
  					],
  					[
  						18.3642,
  						51.6817
  					],
  					[
  						18.4122,
  						51.7006
  					],
  					[
  						18.4082,
  						51.7266
  					],
  					[
  						18.4322,
  						51.7648
  					],
  					[
  						18.4093,
  						51.7917
  					],
  					[
  						18.4443,
  						51.7985
  					],
  					[
  						18.4393,
  						51.8255
  					],
  					[
  						18.4648,
  						51.8212
  					],
  					[
  						18.472,
  						51.851
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 224,
  			name: "powiat brzeziński",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.9889,
  						51.7796
  					],
  					[
  						19.9909,
  						51.7787
  					],
  					[
  						20.0162,
  						51.7735
  					],
  					[
  						20.0082,
  						51.7689
  					],
  					[
  						20.0003,
  						51.7634
  					],
  					[
  						19.985,
  						51.7433
  					],
  					[
  						19.9813,
  						51.741
  					],
  					[
  						19.9396,
  						51.7398
  					],
  					[
  						19.917,
  						51.7513
  					],
  					[
  						19.9353,
  						51.7639
  					],
  					[
  						19.9092,
  						51.7763
  					],
  					[
  						19.8714,
  						51.7746
  					],
  					[
  						19.8443,
  						51.7831
  					],
  					[
  						19.7648,
  						51.7492
  					],
  					[
  						19.7387,
  						51.7587
  					],
  					[
  						19.7306,
  						51.7502
  					],
  					[
  						19.685,
  						51.7522
  					],
  					[
  						19.6682,
  						51.738
  					],
  					[
  						19.6446,
  						51.7571
  					],
  					[
  						19.68,
  						51.7791
  					],
  					[
  						19.6778,
  						51.8043
  					],
  					[
  						19.6543,
  						51.8277
  					],
  					[
  						19.6605,
  						51.8538
  					],
  					[
  						19.7064,
  						51.8793
  					],
  					[
  						19.6898,
  						51.9055
  					],
  					[
  						19.6897,
  						51.9092
  					],
  					[
  						19.7243,
  						51.9465
  					],
  					[
  						19.7646,
  						51.9452
  					],
  					[
  						19.84,
  						51.952
  					],
  					[
  						19.8435,
  						51.9354
  					],
  					[
  						19.8685,
  						51.9159
  					],
  					[
  						19.8895,
  						51.8624
  					],
  					[
  						19.9227,
  						51.8496
  					],
  					[
  						19.9586,
  						51.8474
  					],
  					[
  						20.0141,
  						51.8269
  					],
  					[
  						19.9889,
  						51.7796
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 225,
  			name: "powiat strzelecko-drezdenecki",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.3317,
  						52.9044
  					],
  					[
  						15.2836,
  						52.9448
  					],
  					[
  						15.2868,
  						52.9572
  					],
  					[
  						15.3507,
  						52.9431
  					],
  					[
  						15.3686,
  						52.9466
  					],
  					[
  						15.3868,
  						52.9687
  					],
  					[
  						15.4438,
  						52.9899
  					],
  					[
  						15.5545,
  						53.0119
  					],
  					[
  						15.5734,
  						52.9866
  					],
  					[
  						15.6377,
  						52.9773
  					],
  					[
  						15.6919,
  						52.9982
  					],
  					[
  						15.7191,
  						52.9886
  					],
  					[
  						15.7691,
  						52.9995
  					],
  					[
  						15.7675,
  						53.0203
  					],
  					[
  						15.7917,
  						53.0592
  					],
  					[
  						15.8216,
  						53.0652
  					],
  					[
  						15.8115,
  						53.0844
  					],
  					[
  						15.86,
  						53.0937
  					],
  					[
  						15.8482,
  						53.1152
  					],
  					[
  						15.8753,
  						53.1211
  					],
  					[
  						15.982,
  						53.1155
  					],
  					[
  						15.9943,
  						53.0731
  					],
  					[
  						15.9625,
  						53.0414
  					],
  					[
  						15.9537,
  						53.0016
  					],
  					[
  						15.9605,
  						52.9561
  					],
  					[
  						15.9798,
  						52.9337
  					],
  					[
  						15.978,
  						52.9099
  					],
  					[
  						15.9741,
  						52.859
  					],
  					[
  						15.8932,
  						52.8128
  					],
  					[
  						15.9346,
  						52.8014
  					],
  					[
  						15.9262,
  						52.784
  					],
  					[
  						15.9423,
  						52.7591
  					],
  					[
  						15.9469,
  						52.7549
  					],
  					[
  						15.9449,
  						52.7292
  					],
  					[
  						15.9074,
  						52.7149
  					],
  					[
  						15.8373,
  						52.7063
  					],
  					[
  						15.7933,
  						52.7069
  					],
  					[
  						15.7705,
  						52.7023
  					],
  					[
  						15.7377,
  						52.7133
  					],
  					[
  						15.6367,
  						52.7012
  					],
  					[
  						15.6037,
  						52.7141
  					],
  					[
  						15.5874,
  						52.7263
  					],
  					[
  						15.5758,
  						52.7673
  					],
  					[
  						15.5415,
  						52.7697
  					],
  					[
  						15.4903,
  						52.752
  					],
  					[
  						15.4562,
  						52.7765
  					],
  					[
  						15.4582,
  						52.7939
  					],
  					[
  						15.4271,
  						52.8133
  					],
  					[
  						15.4248,
  						52.8391
  					],
  					[
  						15.4422,
  						52.8411
  					],
  					[
  						15.4406,
  						52.8718
  					],
  					[
  						15.4234,
  						52.8865
  					],
  					[
  						15.3734,
  						52.8878
  					],
  					[
  						15.3654,
  						52.9018
  					],
  					[
  						15.3317,
  						52.9044
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 226,
  			name: "powiat świebodziński",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.8808,
  						52.2904
  					],
  					[
  						15.8524,
  						52.2621
  					],
  					[
  						15.8608,
  						52.2276
  					],
  					[
  						15.8495,
  						52.2133
  					],
  					[
  						15.8031,
  						52.21
  					],
  					[
  						15.7732,
  						52.1942
  					],
  					[
  						15.7367,
  						52.1918
  					],
  					[
  						15.7222,
  						52.1691
  					],
  					[
  						15.6713,
  						52.161
  					],
  					[
  						15.657,
  						52.1827
  					],
  					[
  						15.6069,
  						52.1641
  					],
  					[
  						15.5909,
  						52.1375
  					],
  					[
  						15.5555,
  						52.1249
  					],
  					[
  						15.5263,
  						52.1246
  					],
  					[
  						15.4805,
  						52.1009
  					],
  					[
  						15.4378,
  						52.1105
  					],
  					[
  						15.4148,
  						52.0973
  					],
  					[
  						15.3955,
  						52.1148
  					],
  					[
  						15.3657,
  						52.1145
  					],
  					[
  						15.306,
  						52.1313
  					],
  					[
  						15.2928,
  						52.1432
  					],
  					[
  						15.304,
  						52.1903
  					],
  					[
  						15.2884,
  						52.214
  					],
  					[
  						15.2208,
  						52.1946
  					],
  					[
  						15.1978,
  						52.2188
  					],
  					[
  						15.101,
  						52.205
  					],
  					[
  						15.0913,
  						52.2261
  					],
  					[
  						15.1549,
  						52.2377
  					],
  					[
  						15.2263,
  						52.2865
  					],
  					[
  						15.2022,
  						52.3098
  					],
  					[
  						15.2427,
  						52.3117
  					],
  					[
  						15.2425,
  						52.3428
  					],
  					[
  						15.2574,
  						52.3716
  					],
  					[
  						15.2899,
  						52.3764
  					],
  					[
  						15.3449,
  						52.3659
  					],
  					[
  						15.3576,
  						52.3794
  					],
  					[
  						15.4049,
  						52.3705
  					],
  					[
  						15.4358,
  						52.3756
  					],
  					[
  						15.455,
  						52.3605
  					],
  					[
  						15.5644,
  						52.3517
  					],
  					[
  						15.6224,
  						52.3427
  					],
  					[
  						15.6262,
  						52.3208
  					],
  					[
  						15.725,
  						52.2906
  					],
  					[
  						15.7994,
  						52.3183
  					],
  					[
  						15.8302,
  						52.3205
  					],
  					[
  						15.8808,
  						52.2904
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 227,
  			name: "powiat leżajski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.4054,
  						50.3944
  					],
  					[
  						22.4205,
  						50.4002
  					],
  					[
  						22.4529,
  						50.3886
  					],
  					[
  						22.4514,
  						50.3708
  					],
  					[
  						22.5149,
  						50.3458
  					],
  					[
  						22.5437,
  						50.3563
  					],
  					[
  						22.5493,
  						50.3572
  					],
  					[
  						22.5955,
  						50.3487
  					],
  					[
  						22.6421,
  						50.358
  					],
  					[
  						22.6422,
  						50.358
  					],
  					[
  						22.6421,
  						50.358
  					],
  					[
  						22.6422,
  						50.358
  					],
  					[
  						22.644,
  						50.3583
  					],
  					[
  						22.6555,
  						50.3558
  					],
  					[
  						22.6616,
  						50.3553
  					],
  					[
  						22.6676,
  						50.3539
  					],
  					[
  						22.6676,
  						50.354
  					],
  					[
  						22.6687,
  						50.3543
  					],
  					[
  						22.6694,
  						50.3541
  					],
  					[
  						22.6706,
  						50.3548
  					],
  					[
  						22.6715,
  						50.3549
  					],
  					[
  						22.668,
  						50.3393
  					],
  					[
  						22.6198,
  						50.3331
  					],
  					[
  						22.6078,
  						50.3109
  					],
  					[
  						22.6076,
  						50.3109
  					],
  					[
  						22.6079,
  						50.3108
  					],
  					[
  						22.6078,
  						50.3109
  					],
  					[
  						22.6189,
  						50.3084
  					],
  					[
  						22.6382,
  						50.3031
  					],
  					[
  						22.6195,
  						50.2668
  					],
  					[
  						22.5925,
  						50.2757
  					],
  					[
  						22.5736,
  						50.2512
  					],
  					[
  						22.6063,
  						50.2216
  					],
  					[
  						22.562,
  						50.2089
  					],
  					[
  						22.5351,
  						50.1941
  					],
  					[
  						22.5205,
  						50.1525
  					],
  					[
  						22.524,
  						50.1307
  					],
  					[
  						22.4479,
  						50.1231
  					],
  					[
  						22.4093,
  						50.1259
  					],
  					[
  						22.3546,
  						50.1772
  					],
  					[
  						22.2843,
  						50.2048
  					],
  					[
  						22.2686,
  						50.2275
  					],
  					[
  						22.2335,
  						50.2468
  					],
  					[
  						22.248,
  						50.2609
  					],
  					[
  						22.1988,
  						50.2856
  					],
  					[
  						22.212,
  						50.2999
  					],
  					[
  						22.1887,
  						50.3191
  					],
  					[
  						22.1931,
  						50.3366
  					],
  					[
  						22.2545,
  						50.3637
  					],
  					[
  						22.2778,
  						50.3842
  					],
  					[
  						22.3099,
  						50.3933
  					],
  					[
  						22.3129,
  						50.3748
  					],
  					[
  						22.3546,
  						50.3732
  					],
  					[
  						22.3724,
  						50.3502
  					],
  					[
  						22.4175,
  						50.334
  					],
  					[
  						22.4539,
  						50.3352
  					],
  					[
  						22.4556,
  						50.3501
  					],
  					[
  						22.436,
  						50.3685
  					],
  					[
  						22.4414,
  						50.38
  					],
  					[
  						22.4054,
  						50.3944
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 228,
  			name: "powiat lubaczowski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.5479,
  						50.2518
  					],
  					[
  						23.4701,
  						50.2179
  					],
  					[
  						23.4294,
  						50.1842
  					],
  					[
  						23.3803,
  						50.1594
  					],
  					[
  						23.314,
  						50.112
  					],
  					[
  						23.2792,
  						50.0998
  					],
  					[
  						23.2393,
  						50.0545
  					],
  					[
  						23.216,
  						50.0475
  					],
  					[
  						23.213,
  						50.0311
  					],
  					[
  						23.1538,
  						49.9808
  					],
  					[
  						23.0865,
  						49.9841
  					],
  					[
  						23.0069,
  						49.9973
  					],
  					[
  						23.037,
  						50.0202
  					],
  					[
  						23.0471,
  						50.0402
  					],
  					[
  						23.0307,
  						50.056
  					],
  					[
  						22.9964,
  						50.0686
  					],
  					[
  						22.9537,
  						50.0738
  					],
  					[
  						22.9479,
  						50.0927
  					],
  					[
  						22.9154,
  						50.0988
  					],
  					[
  						22.9124,
  						50.1241
  					],
  					[
  						22.9302,
  						50.1586
  					],
  					[
  						22.9258,
  						50.173
  					],
  					[
  						22.8857,
  						50.165
  					],
  					[
  						22.8689,
  						50.1896
  					],
  					[
  						22.7978,
  						50.2094
  					],
  					[
  						22.836,
  						50.2698
  					],
  					[
  						22.8413,
  						50.2976
  					],
  					[
  						22.8806,
  						50.3008
  					],
  					[
  						22.9443,
  						50.2922
  					],
  					[
  						22.9852,
  						50.2943
  					],
  					[
  						23.0172,
  						50.2869
  					],
  					[
  						23.0541,
  						50.3058
  					],
  					[
  						23.0668,
  						50.3231
  					],
  					[
  						23.0891,
  						50.3298
  					],
  					[
  						23.1413,
  						50.3667
  					],
  					[
  						23.1838,
  						50.396
  					],
  					[
  						23.2521,
  						50.3653
  					],
  					[
  						23.3053,
  						50.38
  					],
  					[
  						23.3176,
  						50.3927
  					],
  					[
  						23.3535,
  						50.4019
  					],
  					[
  						23.3789,
  						50.3683
  					],
  					[
  						23.405,
  						50.364
  					],
  					[
  						23.4362,
  						50.3454
  					],
  					[
  						23.4065,
  						50.3058
  					],
  					[
  						23.457,
  						50.3032
  					],
  					[
  						23.47,
  						50.2936
  					],
  					[
  						23.4999,
  						50.2995
  					],
  					[
  						23.5179,
  						50.2897
  					],
  					[
  						23.5089,
  						50.2613
  					],
  					[
  						23.5479,
  						50.2518
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 229,
  			name: "powiat chodzieski",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.289,
  						53.084
  					],
  					[
  						17.2985,
  						53.0494
  					],
  					[
  						17.2534,
  						53.0189
  					],
  					[
  						17.2174,
  						53.0226
  					],
  					[
  						17.1882,
  						53.015
  					],
  					[
  						17.1883,
  						52.9893
  					],
  					[
  						17.2017,
  						52.9666
  					],
  					[
  						17.1783,
  						52.9574
  					],
  					[
  						17.1743,
  						52.9409
  					],
  					[
  						17.1446,
  						52.9068
  					],
  					[
  						17.0787,
  						52.8906
  					],
  					[
  						17.0509,
  						52.8333
  					],
  					[
  						17.007,
  						52.8284
  					],
  					[
  						16.973,
  						52.8318
  					],
  					[
  						16.9412,
  						52.8172
  					],
  					[
  						16.8865,
  						52.831
  					],
  					[
  						16.8848,
  						52.8401
  					],
  					[
  						16.8307,
  						52.8584
  					],
  					[
  						16.8079,
  						52.8538
  					],
  					[
  						16.7802,
  						52.8888
  					],
  					[
  						16.7714,
  						52.897
  					],
  					[
  						16.7749,
  						52.9316
  					],
  					[
  						16.7378,
  						52.9799
  					],
  					[
  						16.741,
  						53.0028
  					],
  					[
  						16.7798,
  						53.0135
  					],
  					[
  						16.8078,
  						53.053
  					],
  					[
  						16.884,
  						53.0502
  					],
  					[
  						16.9508,
  						53.0534
  					],
  					[
  						17.0277,
  						53.0669
  					],
  					[
  						17.0738,
  						53.068
  					],
  					[
  						17.1746,
  						53.0819
  					],
  					[
  						17.2061,
  						53.0897
  					],
  					[
  						17.2369,
  						53.0787
  					],
  					[
  						17.289,
  						53.084
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 230,
  			name: "powiat międzychodzki",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.9469,
  						52.7549
  					],
  					[
  						15.9814,
  						52.7504
  					],
  					[
  						16.0138,
  						52.7347
  					],
  					[
  						16.0321,
  						52.7206
  					],
  					[
  						16.0564,
  						52.7238
  					],
  					[
  						16.0788,
  						52.7041
  					],
  					[
  						16.1233,
  						52.6877
  					],
  					[
  						16.207,
  						52.6779
  					],
  					[
  						16.2475,
  						52.6517
  					],
  					[
  						16.2818,
  						52.6504
  					],
  					[
  						16.3385,
  						52.6203
  					],
  					[
  						16.2685,
  						52.6183
  					],
  					[
  						16.259,
  						52.6025
  					],
  					[
  						16.2902,
  						52.579
  					],
  					[
  						16.2574,
  						52.5695
  					],
  					[
  						16.2324,
  						52.5286
  					],
  					[
  						16.1864,
  						52.5071
  					],
  					[
  						16.1942,
  						52.4889
  					],
  					[
  						16.1481,
  						52.4844
  					],
  					[
  						16.1388,
  						52.5064
  					],
  					[
  						16.0995,
  						52.5142
  					],
  					[
  						16.0757,
  						52.5082
  					],
  					[
  						16.0649,
  						52.4905
  					],
  					[
  						16.0255,
  						52.4887
  					],
  					[
  						16.0176,
  						52.4583
  					],
  					[
  						15.9658,
  						52.4483
  					],
  					[
  						15.9346,
  						52.4835
  					],
  					[
  						15.8916,
  						52.4732
  					],
  					[
  						15.863,
  						52.5104
  					],
  					[
  						15.8348,
  						52.5293
  					],
  					[
  						15.8584,
  						52.544
  					],
  					[
  						15.8324,
  						52.5662
  					],
  					[
  						15.8281,
  						52.5825
  					],
  					[
  						15.7846,
  						52.6185
  					],
  					[
  						15.7763,
  						52.6379
  					],
  					[
  						15.7819,
  						52.6617
  					],
  					[
  						15.814,
  						52.6678
  					],
  					[
  						15.7933,
  						52.7069
  					],
  					[
  						15.8373,
  						52.7063
  					],
  					[
  						15.9074,
  						52.7149
  					],
  					[
  						15.9449,
  						52.7292
  					],
  					[
  						15.9469,
  						52.7549
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 231,
  			name: "powiat kluczborski",
  			province: "Opolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.3514,
  						51.0022
  					],
  					[
  						18.3611,
  						50.9714
  					],
  					[
  						18.3805,
  						50.954
  					],
  					[
  						18.3467,
  						50.9395
  					],
  					[
  						18.3313,
  						50.9094
  					],
  					[
  						18.3357,
  						50.8843
  					],
  					[
  						18.3601,
  						50.8507
  					],
  					[
  						18.3298,
  						50.8398
  					],
  					[
  						18.351,
  						50.8114
  					],
  					[
  						18.2656,
  						50.8154
  					],
  					[
  						18.2302,
  						50.7968
  					],
  					[
  						18.2021,
  						50.8046
  					],
  					[
  						18.1939,
  						50.8337
  					],
  					[
  						18.1302,
  						50.8295
  					],
  					[
  						18.1055,
  						50.8144
  					],
  					[
  						18.0924,
  						50.8478
  					],
  					[
  						18.106,
  						50.8945
  					],
  					[
  						18.0686,
  						50.9233
  					],
  					[
  						18.0605,
  						50.9399
  					],
  					[
  						18.0117,
  						50.9636
  					],
  					[
  						17.9886,
  						50.9849
  					],
  					[
  						17.9379,
  						50.9807
  					],
  					[
  						17.9242,
  						51.0125
  					],
  					[
  						17.9358,
  						51.0479
  					],
  					[
  						17.9511,
  						51.055
  					],
  					[
  						17.9349,
  						51.0939
  					],
  					[
  						17.9395,
  						51.1089
  					],
  					[
  						18.0394,
  						51.131
  					],
  					[
  						18.126,
  						51.1691
  					],
  					[
  						18.1637,
  						51.1725
  					],
  					[
  						18.1869,
  						51.1571
  					],
  					[
  						18.2596,
  						51.1576
  					],
  					[
  						18.315,
  						51.134
  					],
  					[
  						18.3147,
  						51.0985
  					],
  					[
  						18.3481,
  						51.0936
  					],
  					[
  						18.3459,
  						51.0614
  					],
  					[
  						18.3075,
  						51.0412
  					],
  					[
  						18.3148,
  						51.0193
  					],
  					[
  						18.3514,
  						51.0022
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 232,
  			name: "powiat jędrzejowski",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.2496,
  						50.8653
  					],
  					[
  						20.2727,
  						50.8643
  					],
  					[
  						20.3077,
  						50.8483
  					],
  					[
  						20.3234,
  						50.7994
  					],
  					[
  						20.3816,
  						50.7827
  					],
  					[
  						20.419,
  						50.747
  					],
  					[
  						20.4632,
  						50.7417
  					],
  					[
  						20.4744,
  						50.7307
  					],
  					[
  						20.5145,
  						50.718
  					],
  					[
  						20.5175,
  						50.7081
  					],
  					[
  						20.5605,
  						50.6988
  					],
  					[
  						20.5568,
  						50.6892
  					],
  					[
  						20.5843,
  						50.6679
  					],
  					[
  						20.5538,
  						50.6414
  					],
  					[
  						20.5088,
  						50.638
  					],
  					[
  						20.4982,
  						50.6041
  					],
  					[
  						20.514,
  						50.5964
  					],
  					[
  						20.4991,
  						50.5674
  					],
  					[
  						20.4739,
  						50.5585
  					],
  					[
  						20.4583,
  						50.5297
  					],
  					[
  						20.4161,
  						50.541
  					],
  					[
  						20.3658,
  						50.5476
  					],
  					[
  						20.3435,
  						50.5291
  					],
  					[
  						20.3418,
  						50.4977
  					],
  					[
  						20.3694,
  						50.4885
  					],
  					[
  						20.3621,
  						50.4743
  					],
  					[
  						20.3334,
  						50.4705
  					],
  					[
  						20.3223,
  						50.4496
  					],
  					[
  						20.2729,
  						50.4699
  					],
  					[
  						20.2258,
  						50.4781
  					],
  					[
  						20.204,
  						50.4957
  					],
  					[
  						20.1666,
  						50.4844
  					],
  					[
  						20.0937,
  						50.4896
  					],
  					[
  						20.0763,
  						50.5096
  					],
  					[
  						20.0389,
  						50.5002
  					],
  					[
  						20.0076,
  						50.5155
  					],
  					[
  						19.9771,
  						50.5192
  					],
  					[
  						19.95,
  						50.5048
  					],
  					[
  						19.9117,
  						50.5118
  					],
  					[
  						19.9022,
  						50.5393
  					],
  					[
  						19.8548,
  						50.5439
  					],
  					[
  						19.8417,
  						50.5551
  					],
  					[
  						19.7887,
  						50.5545
  					],
  					[
  						19.8445,
  						50.5986
  					],
  					[
  						19.8619,
  						50.6217
  					],
  					[
  						19.9035,
  						50.6196
  					],
  					[
  						19.9395,
  						50.6208
  					],
  					[
  						19.9686,
  						50.6332
  					],
  					[
  						20.0011,
  						50.6233
  					],
  					[
  						20.0318,
  						50.6336
  					],
  					[
  						20.0245,
  						50.6543
  					],
  					[
  						20.0467,
  						50.684
  					],
  					[
  						20.0726,
  						50.6853
  					],
  					[
  						20.1016,
  						50.7056
  					],
  					[
  						20.0629,
  						50.723
  					],
  					[
  						20.0524,
  						50.7402
  					],
  					[
  						20.08,
  						50.7723
  					],
  					[
  						20.0951,
  						50.7729
  					],
  					[
  						20.1039,
  						50.8001
  					],
  					[
  						20.1248,
  						50.8329
  					],
  					[
  						20.1418,
  						50.8433
  					],
  					[
  						20.216,
  						50.83
  					],
  					[
  						20.2496,
  						50.8653
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 233,
  			name: "powiat gostyński",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.1886,
  						51.9675
  					],
  					[
  						17.2287,
  						51.9674
  					],
  					[
  						17.2409,
  						51.9522
  					],
  					[
  						17.314,
  						51.9115
  					],
  					[
  						17.3072,
  						51.8966
  					],
  					[
  						17.3368,
  						51.8856
  					],
  					[
  						17.3366,
  						51.8635
  					],
  					[
  						17.3171,
  						51.8486
  					],
  					[
  						17.3381,
  						51.8346
  					],
  					[
  						17.3172,
  						51.813
  					],
  					[
  						17.3225,
  						51.7613
  					],
  					[
  						17.2761,
  						51.7654
  					],
  					[
  						17.1805,
  						51.7912
  					],
  					[
  						17.1528,
  						51.746
  					],
  					[
  						17.1836,
  						51.7379
  					],
  					[
  						17.1758,
  						51.7147
  					],
  					[
  						17.1271,
  						51.7119
  					],
  					[
  						17.1281,
  						51.702
  					],
  					[
  						17.0791,
  						51.7196
  					],
  					[
  						17.0372,
  						51.7139
  					],
  					[
  						17.0363,
  						51.6984
  					],
  					[
  						16.9994,
  						51.6955
  					],
  					[
  						16.96,
  						51.7123
  					],
  					[
  						16.9373,
  						51.7128
  					],
  					[
  						16.9243,
  						51.6945
  					],
  					[
  						16.8867,
  						51.6946
  					],
  					[
  						16.8587,
  						51.714
  					],
  					[
  						16.8614,
  						51.7315
  					],
  					[
  						16.8033,
  						51.7464
  					],
  					[
  						16.7289,
  						51.7334
  					],
  					[
  						16.7416,
  						51.7923
  					],
  					[
  						16.7691,
  						51.784
  					],
  					[
  						16.8493,
  						51.7987
  					],
  					[
  						16.862,
  						51.8135
  					],
  					[
  						16.8512,
  						51.842
  					],
  					[
  						16.8982,
  						51.8628
  					],
  					[
  						16.9005,
  						51.8797
  					],
  					[
  						16.8637,
  						51.9123
  					],
  					[
  						16.8601,
  						51.9271
  					],
  					[
  						16.9066,
  						51.918
  					],
  					[
  						16.9676,
  						51.9556
  					],
  					[
  						17.0097,
  						51.9651
  					],
  					[
  						17.0047,
  						51.9802
  					],
  					[
  						17.0433,
  						51.9714
  					],
  					[
  						17.0352,
  						51.9426
  					],
  					[
  						17.1208,
  						51.925
  					],
  					[
  						17.1258,
  						51.9465
  					],
  					[
  						17.1886,
  						51.9675
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 234,
  			name: "powiat kazimierski",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.2926,
  						50.3222
  					],
  					[
  						20.3053,
  						50.3359
  					],
  					[
  						20.352,
  						50.3376
  					],
  					[
  						20.3638,
  						50.349
  					],
  					[
  						20.3878,
  						50.3595
  					],
  					[
  						20.4321,
  						50.3542
  					],
  					[
  						20.4687,
  						50.369
  					],
  					[
  						20.4867,
  						50.3908
  					],
  					[
  						20.5103,
  						50.3761
  					],
  					[
  						20.5296,
  						50.3642
  					],
  					[
  						20.543,
  						50.3387
  					],
  					[
  						20.5795,
  						50.3296
  					],
  					[
  						20.6265,
  						50.3313
  					],
  					[
  						20.6881,
  						50.2897
  					],
  					[
  						20.7747,
  						50.2777
  					],
  					[
  						20.728,
  						50.2503
  					],
  					[
  						20.728,
  						50.2428
  					],
  					[
  						20.7313,
  						50.2333
  					],
  					[
  						20.6866,
  						50.2179
  					],
  					[
  						20.6815,
  						50.2059
  					],
  					[
  						20.6394,
  						50.211
  					],
  					[
  						20.6328,
  						50.2104
  					],
  					[
  						20.624,
  						50.2007
  					],
  					[
  						20.5632,
  						50.1997
  					],
  					[
  						20.5117,
  						50.1893
  					],
  					[
  						20.4697,
  						50.2008
  					],
  					[
  						20.4155,
  						50.1912
  					],
  					[
  						20.4102,
  						50.2118
  					],
  					[
  						20.3847,
  						50.2076
  					],
  					[
  						20.3676,
  						50.2487
  					],
  					[
  						20.3331,
  						50.2675
  					],
  					[
  						20.3383,
  						50.2919
  					],
  					[
  						20.3279,
  						50.3186
  					],
  					[
  						20.2926,
  						50.3222
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 235,
  			name: "powiat kaliski",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.2285,
  						52.039
  					],
  					[
  						18.2668,
  						52.0341
  					],
  					[
  						18.2513,
  						52.0083
  					],
  					[
  						18.2973,
  						51.9805
  					],
  					[
  						18.3233,
  						51.9459
  					],
  					[
  						18.3269,
  						51.9263
  					],
  					[
  						18.3519,
  						51.9071
  					],
  					[
  						18.4102,
  						51.911
  					],
  					[
  						18.413,
  						51.8895
  					],
  					[
  						18.4378,
  						51.8709
  					],
  					[
  						18.4744,
  						51.8696
  					],
  					[
  						18.472,
  						51.851
  					],
  					[
  						18.4648,
  						51.8212
  					],
  					[
  						18.4393,
  						51.8255
  					],
  					[
  						18.4443,
  						51.7985
  					],
  					[
  						18.4093,
  						51.7917
  					],
  					[
  						18.4322,
  						51.7648
  					],
  					[
  						18.4082,
  						51.7266
  					],
  					[
  						18.4122,
  						51.7006
  					],
  					[
  						18.3642,
  						51.6817
  					],
  					[
  						18.3553,
  						51.6605
  					],
  					[
  						18.3809,
  						51.6523
  					],
  					[
  						18.3682,
  						51.618
  					],
  					[
  						18.3684,
  						51.6174
  					],
  					[
  						18.3521,
  						51.6006
  					],
  					[
  						18.3706,
  						51.591
  					],
  					[
  						18.3586,
  						51.5364
  					],
  					[
  						18.3187,
  						51.5462
  					],
  					[
  						18.2592,
  						51.5469
  					],
  					[
  						18.2044,
  						51.5329
  					],
  					[
  						18.1773,
  						51.5457
  					],
  					[
  						18.1884,
  						51.558
  					],
  					[
  						18.1773,
  						51.5801
  					],
  					[
  						18.1089,
  						51.5998
  					],
  					[
  						18.0747,
  						51.6376
  					],
  					[
  						18.0794,
  						51.6542
  					],
  					[
  						18.1114,
  						51.6667
  					],
  					[
  						18.1168,
  						51.6894
  					],
  					[
  						18.0806,
  						51.6909
  					],
  					[
  						18.0874,
  						51.7062
  					],
  					[
  						18.119,
  						51.7092
  					],
  					[
  						18.1492,
  						51.7339
  					],
  					[
  						18.137,
  						51.7602
  					],
  					[
  						18.0959,
  						51.7939
  					],
  					[
  						18.0425,
  						51.7795
  					],
  					[
  						18.0414,
  						51.7828
  					],
  					[
  						18.0153,
  						51.8005
  					],
  					[
  						18.0213,
  						51.8147
  					],
  					[
  						18.012,
  						51.846
  					],
  					[
  						17.986,
  						51.8539
  					],
  					[
  						17.934,
  						51.9363
  					],
  					[
  						17.9485,
  						51.9529
  					],
  					[
  						17.98,
  						51.9589
  					],
  					[
  						17.9472,
  						52.0001
  					],
  					[
  						17.9905,
  						51.9976
  					],
  					[
  						18.0611,
  						51.9796
  					],
  					[
  						18.1683,
  						51.9861
  					],
  					[
  						18.1675,
  						52.0084
  					],
  					[
  						18.2134,
  						52.0146
  					],
  					[
  						18.2285,
  						52.039
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 236,
  			name: "powiat siemiatycki",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.1748,
  						52.566
  					],
  					[
  						23.1925,
  						52.5434
  					],
  					[
  						23.267,
  						52.5314
  					],
  					[
  						23.3148,
  						52.5014
  					],
  					[
  						23.2572,
  						52.4903
  					],
  					[
  						23.2756,
  						52.474
  					],
  					[
  						23.2784,
  						52.4409
  					],
  					[
  						23.3139,
  						52.4267
  					],
  					[
  						23.2999,
  						52.4038
  					],
  					[
  						23.278,
  						52.3928
  					],
  					[
  						23.2162,
  						52.3304
  					],
  					[
  						23.1783,
  						52.2831
  					],
  					[
  						23.1284,
  						52.2878
  					],
  					[
  						23.1069,
  						52.2991
  					],
  					[
  						23.0725,
  						52.2816
  					],
  					[
  						23.0452,
  						52.3249
  					],
  					[
  						22.997,
  						52.3316
  					],
  					[
  						22.9572,
  						52.3682
  					],
  					[
  						22.9197,
  						52.3745
  					],
  					[
  						22.8513,
  						52.3588
  					],
  					[
  						22.7526,
  						52.384
  					],
  					[
  						22.7204,
  						52.3723
  					],
  					[
  						22.7228,
  						52.3833
  					],
  					[
  						22.6869,
  						52.393
  					],
  					[
  						22.6663,
  						52.3857
  					],
  					[
  						22.5629,
  						52.4105
  					],
  					[
  						22.5419,
  						52.4242
  					],
  					[
  						22.5542,
  						52.4632
  					],
  					[
  						22.5289,
  						52.4623
  					],
  					[
  						22.5101,
  						52.4902
  					],
  					[
  						22.5267,
  						52.5212
  					],
  					[
  						22.4693,
  						52.5652
  					],
  					[
  						22.4578,
  						52.5854
  					],
  					[
  						22.4875,
  						52.6199
  					],
  					[
  						22.4883,
  						52.6199
  					],
  					[
  						22.49,
  						52.6202
  					],
  					[
  						22.5206,
  						52.6097
  					],
  					[
  						22.6035,
  						52.5991
  					],
  					[
  						22.6546,
  						52.6233
  					],
  					[
  						22.6981,
  						52.6309
  					],
  					[
  						22.703,
  						52.6663
  					],
  					[
  						22.7173,
  						52.6746
  					],
  					[
  						22.7432,
  						52.6879
  					],
  					[
  						22.7864,
  						52.6724
  					],
  					[
  						22.7924,
  						52.6504
  					],
  					[
  						22.8321,
  						52.6618
  					],
  					[
  						22.844,
  						52.6503
  					],
  					[
  						22.8808,
  						52.6447
  					],
  					[
  						22.9364,
  						52.5916
  					],
  					[
  						23.0012,
  						52.582
  					],
  					[
  						23.0133,
  						52.5762
  					],
  					[
  						23.0744,
  						52.5767
  					],
  					[
  						23.1097,
  						52.5845
  					],
  					[
  						23.1748,
  						52.566
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 237,
  			name: "powiat gdański",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.9407,
  						54.2802
  					],
  					[
  						18.9441,
  						54.2395
  					],
  					[
  						18.9128,
  						54.2057
  					],
  					[
  						18.8649,
  						54.1876
  					],
  					[
  						18.8366,
  						54.1555
  					],
  					[
  						18.8282,
  						54.1416
  					],
  					[
  						18.8061,
  						54.1541
  					],
  					[
  						18.7443,
  						54.1517
  					],
  					[
  						18.6608,
  						54.1401
  					],
  					[
  						18.6289,
  						54.1423
  					],
  					[
  						18.6237,
  						54.1257
  					],
  					[
  						18.5957,
  						54.1201
  					],
  					[
  						18.5907,
  						54.1059
  					],
  					[
  						18.5478,
  						54.1106
  					],
  					[
  						18.5333,
  						54.1264
  					],
  					[
  						18.4818,
  						54.1193
  					],
  					[
  						18.3912,
  						54.1212
  					],
  					[
  						18.3654,
  						54.1359
  					],
  					[
  						18.3272,
  						54.1411
  					],
  					[
  						18.233,
  						54.1673
  					],
  					[
  						18.2229,
  						54.1879
  					],
  					[
  						18.2151,
  						54.196
  					],
  					[
  						18.2543,
  						54.2332
  					],
  					[
  						18.3051,
  						54.249
  					],
  					[
  						18.328,
  						54.2655
  					],
  					[
  						18.3618,
  						54.2623
  					],
  					[
  						18.3944,
  						54.2784
  					],
  					[
  						18.4333,
  						54.2793
  					],
  					[
  						18.46,
  						54.3076
  					],
  					[
  						18.488,
  						54.317
  					],
  					[
  						18.5056,
  						54.3356
  					],
  					[
  						18.5367,
  						54.3196
  					],
  					[
  						18.5661,
  						54.317
  					],
  					[
  						18.5753,
  						54.3032
  					],
  					[
  						18.6058,
  						54.2987
  					],
  					[
  						18.6048,
  						54.2785
  					],
  					[
  						18.6382,
  						54.2756
  					],
  					[
  						18.6383,
  						54.2756
  					],
  					[
  						18.6382,
  						54.2756
  					],
  					[
  						18.6383,
  						54.2756
  					],
  					[
  						18.6393,
  						54.291
  					],
  					[
  						18.6899,
  						54.3015
  					],
  					[
  						18.7279,
  						54.3415
  					],
  					[
  						18.7641,
  						54.3333
  					],
  					[
  						18.7929,
  						54.3465
  					],
  					[
  						18.8153,
  						54.3446
  					],
  					[
  						18.8731,
  						54.3104
  					],
  					[
  						18.9101,
  						54.3124
  					],
  					[
  						18.9226,
  						54.2881
  					],
  					[
  						18.9407,
  						54.2802
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 238,
  			name: "powiat szczycieński",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.1048,
  						53.7705
  					],
  					[
  						21.1202,
  						53.7352
  					],
  					[
  						21.1721,
  						53.7139
  					],
  					[
  						21.214,
  						53.685
  					],
  					[
  						21.2086,
  						53.6706
  					],
  					[
  						21.2567,
  						53.6678
  					],
  					[
  						21.3139,
  						53.6279
  					],
  					[
  						21.3453,
  						53.6327
  					],
  					[
  						21.3871,
  						53.6398
  					],
  					[
  						21.4216,
  						53.6382
  					],
  					[
  						21.41,
  						53.6078
  					],
  					[
  						21.4229,
  						53.6032
  					],
  					[
  						21.456,
  						53.5093
  					],
  					[
  						21.4817,
  						53.4952
  					],
  					[
  						21.55,
  						53.486
  					],
  					[
  						21.5517,
  						53.4781
  					],
  					[
  						21.5179,
  						53.477
  					],
  					[
  						21.4347,
  						53.4632
  					],
  					[
  						21.4263,
  						53.4489
  					],
  					[
  						21.4109,
  						53.4277
  					],
  					[
  						21.3393,
  						53.4195
  					],
  					[
  						21.2815,
  						53.4268
  					],
  					[
  						21.2497,
  						53.4196
  					],
  					[
  						21.1413,
  						53.3773
  					],
  					[
  						21.1361,
  						53.3656
  					],
  					[
  						21.0539,
  						53.3343
  					],
  					[
  						21.0312,
  						53.3513
  					],
  					[
  						20.9917,
  						53.3614
  					],
  					[
  						20.9144,
  						53.3482
  					],
  					[
  						20.9171,
  						53.3219
  					],
  					[
  						20.8722,
  						53.3211
  					],
  					[
  						20.8487,
  						53.2923
  					],
  					[
  						20.7916,
  						53.3095
  					],
  					[
  						20.817,
  						53.334
  					],
  					[
  						20.7858,
  						53.3526
  					],
  					[
  						20.7684,
  						53.3894
  					],
  					[
  						20.7371,
  						53.4146
  					],
  					[
  						20.7122,
  						53.4152
  					],
  					[
  						20.6952,
  						53.4298
  					],
  					[
  						20.6789,
  						53.462
  					],
  					[
  						20.632,
  						53.4523
  					],
  					[
  						20.6053,
  						53.468
  					],
  					[
  						20.5947,
  						53.4867
  					],
  					[
  						20.6168,
  						53.499
  					],
  					[
  						20.5987,
  						53.5307
  					],
  					[
  						20.5975,
  						53.5565
  					],
  					[
  						20.6184,
  						53.5663
  					],
  					[
  						20.6478,
  						53.5955
  					],
  					[
  						20.6536,
  						53.618
  					],
  					[
  						20.7179,
  						53.6046
  					],
  					[
  						20.6882,
  						53.6293
  					],
  					[
  						20.7012,
  						53.6608
  					],
  					[
  						20.7592,
  						53.6951
  					],
  					[
  						20.7708,
  						53.6928
  					],
  					[
  						20.8356,
  						53.7378
  					],
  					[
  						20.9088,
  						53.7794
  					],
  					[
  						20.9585,
  						53.7835
  					],
  					[
  						20.9705,
  						53.7645
  					],
  					[
  						21.0528,
  						53.791
  					],
  					[
  						21.067,
  						53.7636
  					],
  					[
  						21.1048,
  						53.7705
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 239,
  			name: "powiat łobeski",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.2225,
  						53.7268
  					],
  					[
  						15.2813,
  						53.7547
  					],
  					[
  						15.3278,
  						53.7617
  					],
  					[
  						15.352,
  						53.7787
  					],
  					[
  						15.3399,
  						53.8004
  					],
  					[
  						15.368,
  						53.8392
  					],
  					[
  						15.3976,
  						53.8472
  					],
  					[
  						15.4403,
  						53.8464
  					],
  					[
  						15.4677,
  						53.8561
  					],
  					[
  						15.4792,
  						53.8771
  					],
  					[
  						15.5313,
  						53.8736
  					],
  					[
  						15.5388,
  						53.8642
  					],
  					[
  						15.5544,
  						53.8484
  					],
  					[
  						15.5564,
  						53.8465
  					],
  					[
  						15.5569,
  						53.845
  					],
  					[
  						15.5621,
  						53.8299
  					],
  					[
  						15.5604,
  						53.8069
  					],
  					[
  						15.6031,
  						53.7547
  					],
  					[
  						15.6215,
  						53.7524
  					],
  					[
  						15.6837,
  						53.6943
  					],
  					[
  						15.76,
  						53.6658
  					],
  					[
  						15.7907,
  						53.66
  					],
  					[
  						15.8001,
  						53.6397
  					],
  					[
  						15.7733,
  						53.6359
  					],
  					[
  						15.7747,
  						53.5928
  					],
  					[
  						15.7561,
  						53.5972
  					],
  					[
  						15.7322,
  						53.571
  					],
  					[
  						15.7146,
  						53.5721
  					],
  					[
  						15.7049,
  						53.4975
  					],
  					[
  						15.6885,
  						53.4845
  					],
  					[
  						15.6288,
  						53.4814
  					],
  					[
  						15.6214,
  						53.5032
  					],
  					[
  						15.5903,
  						53.5046
  					],
  					[
  						15.5156,
  						53.4708
  					],
  					[
  						15.4682,
  						53.477
  					],
  					[
  						15.4186,
  						53.5219
  					],
  					[
  						15.3669,
  						53.5374
  					],
  					[
  						15.3371,
  						53.5316
  					],
  					[
  						15.3249,
  						53.5149
  					],
  					[
  						15.2894,
  						53.5092
  					],
  					[
  						15.2581,
  						53.5335
  					],
  					[
  						15.2365,
  						53.5314
  					],
  					[
  						15.2196,
  						53.5449
  					],
  					[
  						15.154,
  						53.5535
  					],
  					[
  						15.1672,
  						53.5848
  					],
  					[
  						15.2128,
  						53.5966
  					],
  					[
  						15.2092,
  						53.6229
  					],
  					[
  						15.2731,
  						53.6277
  					],
  					[
  						15.3112,
  						53.6221
  					],
  					[
  						15.3018,
  						53.6606
  					],
  					[
  						15.2607,
  						53.683
  					],
  					[
  						15.248,
  						53.7093
  					],
  					[
  						15.2225,
  						53.7268
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 240,
  			name: "powiat gryficki",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.388,
  						54.1591
  					],
  					[
  						15.3542,
  						54.1211
  					],
  					[
  						15.3801,
  						54.1058
  					],
  					[
  						15.3549,
  						54.0859
  					],
  					[
  						15.3704,
  						54.0746
  					],
  					[
  						15.4007,
  						54.0825
  					],
  					[
  						15.4382,
  						54.074
  					],
  					[
  						15.4549,
  						54.0482
  					],
  					[
  						15.4349,
  						54.0402
  					],
  					[
  						15.4206,
  						54.0148
  					],
  					[
  						15.4261,
  						53.966
  					],
  					[
  						15.4661,
  						53.9404
  					],
  					[
  						15.4636,
  						53.9269
  					],
  					[
  						15.4336,
  						53.9181
  					],
  					[
  						15.4539,
  						53.893
  					],
  					[
  						15.4861,
  						53.8925
  					],
  					[
  						15.4792,
  						53.8771
  					],
  					[
  						15.4677,
  						53.8561
  					],
  					[
  						15.4403,
  						53.8464
  					],
  					[
  						15.3976,
  						53.8472
  					],
  					[
  						15.368,
  						53.8392
  					],
  					[
  						15.3399,
  						53.8004
  					],
  					[
  						15.352,
  						53.7787
  					],
  					[
  						15.3278,
  						53.7617
  					],
  					[
  						15.2813,
  						53.7547
  					],
  					[
  						15.2225,
  						53.7268
  					],
  					[
  						15.1915,
  						53.7516
  					],
  					[
  						15.1697,
  						53.7576
  					],
  					[
  						15.1467,
  						53.7863
  					],
  					[
  						15.0832,
  						53.7939
  					],
  					[
  						15.0967,
  						53.8127
  					],
  					[
  						15.0599,
  						53.8149
  					],
  					[
  						15.0388,
  						53.8373
  					],
  					[
  						15.0528,
  						53.8561
  					],
  					[
  						15.0419,
  						53.8795
  					],
  					[
  						15.0552,
  						53.9027
  					],
  					[
  						15.0245,
  						53.9121
  					],
  					[
  						15.0602,
  						53.9315
  					],
  					[
  						15.0578,
  						53.9648
  					],
  					[
  						14.9928,
  						54.0055
  					],
  					[
  						14.954,
  						54.0403
  					],
  					[
  						14.9011,
  						54.0447
  					],
  					[
  						14.8958,
  						54.0546
  					],
  					[
  						15.0596,
  						54.0949
  					],
  					[
  						15.0955,
  						54.1003
  					],
  					[
  						15.2472,
  						54.135
  					],
  					[
  						15.286,
  						54.1471
  					],
  					[
  						15.388,
  						54.1591
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 241,
  			name: "powiat myszkowski",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.1766,
  						50.6803
  					],
  					[
  						19.1784,
  						50.6862
  					],
  					[
  						19.178,
  						50.6873
  					],
  					[
  						19.2197,
  						50.6856
  					],
  					[
  						19.2452,
  						50.7044
  					],
  					[
  						19.2778,
  						50.6949
  					],
  					[
  						19.2994,
  						50.6804
  					],
  					[
  						19.325,
  						50.6876
  					],
  					[
  						19.4027,
  						50.6761
  					],
  					[
  						19.474,
  						50.6863
  					],
  					[
  						19.5192,
  						50.6704
  					],
  					[
  						19.5383,
  						50.682
  					],
  					[
  						19.5782,
  						50.6495
  					],
  					[
  						19.6233,
  						50.658
  					],
  					[
  						19.6201,
  						50.6229
  					],
  					[
  						19.5945,
  						50.618
  					],
  					[
  						19.5641,
  						50.6247
  					],
  					[
  						19.5418,
  						50.612
  					],
  					[
  						19.4862,
  						50.6021
  					],
  					[
  						19.4659,
  						50.5824
  					],
  					[
  						19.4136,
  						50.5907
  					],
  					[
  						19.3913,
  						50.583
  					],
  					[
  						19.3768,
  						50.5626
  					],
  					[
  						19.3911,
  						50.5252
  					],
  					[
  						19.3432,
  						50.5074
  					],
  					[
  						19.3067,
  						50.5213
  					],
  					[
  						19.2681,
  						50.5364
  					],
  					[
  						19.247,
  						50.5235
  					],
  					[
  						19.2136,
  						50.5217
  					],
  					[
  						19.1827,
  						50.5337
  					],
  					[
  						19.1336,
  						50.5225
  					],
  					[
  						19.1149,
  						50.5122
  					],
  					[
  						19.0791,
  						50.5079
  					],
  					[
  						19.0934,
  						50.5159
  					],
  					[
  						19.0772,
  						50.5558
  					],
  					[
  						19.1029,
  						50.5779
  					],
  					[
  						19.0734,
  						50.6161
  					],
  					[
  						19.1093,
  						50.6204
  					],
  					[
  						19.0975,
  						50.6352
  					],
  					[
  						19.1783,
  						50.6492
  					],
  					[
  						19.1628,
  						50.6656
  					],
  					[
  						19.1766,
  						50.6803
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 242,
  			name: "powiat oleśnicki",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.527,
  						51.4572
  					],
  					[
  						17.5519,
  						51.4352
  					],
  					[
  						17.5406,
  						51.4213
  					],
  					[
  						17.5706,
  						51.4051
  					],
  					[
  						17.6039,
  						51.4094
  					],
  					[
  						17.6129,
  						51.423
  					],
  					[
  						17.6686,
  						51.416
  					],
  					[
  						17.7031,
  						51.3995
  					],
  					[
  						17.75,
  						51.4113
  					],
  					[
  						17.72,
  						51.3861
  					],
  					[
  						17.7098,
  						51.3589
  					],
  					[
  						17.7436,
  						51.3465
  					],
  					[
  						17.7438,
  						51.3287
  					],
  					[
  						17.7649,
  						51.3164
  					],
  					[
  						17.7605,
  						51.3097
  					],
  					[
  						17.7429,
  						51.2573
  					],
  					[
  						17.7565,
  						51.2166
  					],
  					[
  						17.7953,
  						51.1941
  					],
  					[
  						17.7538,
  						51.1868
  					],
  					[
  						17.6693,
  						51.1608
  					],
  					[
  						17.6206,
  						51.1754
  					],
  					[
  						17.5447,
  						51.1545
  					],
  					[
  						17.5455,
  						51.1436
  					],
  					[
  						17.5764,
  						51.1294
  					],
  					[
  						17.5782,
  						51.1108
  					],
  					[
  						17.5624,
  						51.0926
  					],
  					[
  						17.5821,
  						51.0818
  					],
  					[
  						17.5582,
  						51.0678
  					],
  					[
  						17.5366,
  						51.0693
  					],
  					[
  						17.5184,
  						51.0515
  					],
  					[
  						17.427,
  						51.07
  					],
  					[
  						17.4331,
  						51.0877
  					],
  					[
  						17.417,
  						51.0999
  					],
  					[
  						17.376,
  						51.1037
  					],
  					[
  						17.3288,
  						51.1178
  					],
  					[
  						17.33,
  						51.1403
  					],
  					[
  						17.3062,
  						51.1485
  					],
  					[
  						17.3449,
  						51.1686
  					],
  					[
  						17.2902,
  						51.1739
  					],
  					[
  						17.3106,
  						51.2148
  					],
  					[
  						17.2757,
  						51.2236
  					],
  					[
  						17.251,
  						51.2395
  					],
  					[
  						17.2611,
  						51.2524
  					],
  					[
  						17.2421,
  						51.267
  					],
  					[
  						17.265,
  						51.2855
  					],
  					[
  						17.2555,
  						51.3102
  					],
  					[
  						17.2686,
  						51.3524
  					],
  					[
  						17.2879,
  						51.3423
  					],
  					[
  						17.3118,
  						51.3489
  					],
  					[
  						17.3401,
  						51.3729
  					],
  					[
  						17.3705,
  						51.3681
  					],
  					[
  						17.3955,
  						51.3886
  					],
  					[
  						17.3972,
  						51.4044
  					],
  					[
  						17.4292,
  						51.4139
  					],
  					[
  						17.4256,
  						51.431
  					],
  					[
  						17.4808,
  						51.4482
  					],
  					[
  						17.527,
  						51.4572
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 243,
  			name: "powiat strzeliński",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.3183,
  						50.8211
  					],
  					[
  						17.3547,
  						50.7948
  					],
  					[
  						17.3451,
  						50.7843
  					],
  					[
  						17.2908,
  						50.7925
  					],
  					[
  						17.2664,
  						50.7718
  					],
  					[
  						17.2976,
  						50.7533
  					],
  					[
  						17.2756,
  						50.7446
  					],
  					[
  						17.252,
  						50.7177
  					],
  					[
  						17.2202,
  						50.7014
  					],
  					[
  						17.2591,
  						50.6905
  					],
  					[
  						17.2395,
  						50.6713
  					],
  					[
  						17.2302,
  						50.6407
  					],
  					[
  						17.2322,
  						50.6145
  					],
  					[
  						17.1649,
  						50.6135
  					],
  					[
  						17.1369,
  						50.6356
  					],
  					[
  						17.1191,
  						50.672
  					],
  					[
  						17.0687,
  						50.6804
  					],
  					[
  						17.0648,
  						50.6936
  					],
  					[
  						17.0051,
  						50.696
  					],
  					[
  						16.958,
  						50.6933
  					],
  					[
  						16.9224,
  						50.7095
  					],
  					[
  						16.8818,
  						50.7091
  					],
  					[
  						16.8878,
  						50.7159
  					],
  					[
  						16.893,
  						50.7197
  					],
  					[
  						16.8634,
  						50.727
  					],
  					[
  						16.8893,
  						50.7582
  					],
  					[
  						16.882,
  						50.7683
  					],
  					[
  						16.8929,
  						50.7961
  					],
  					[
  						16.8884,
  						50.8122
  					],
  					[
  						16.9139,
  						50.8257
  					],
  					[
  						16.9212,
  						50.8454
  					],
  					[
  						16.9015,
  						50.8704
  					],
  					[
  						16.9407,
  						50.8646
  					],
  					[
  						16.9591,
  						50.9045
  					],
  					[
  						17.0173,
  						50.9171
  					],
  					[
  						17.0692,
  						50.9031
  					],
  					[
  						17.073,
  						50.8897
  					],
  					[
  						17.0874,
  						50.8845
  					],
  					[
  						17.1253,
  						50.8405
  					],
  					[
  						17.1554,
  						50.8634
  					],
  					[
  						17.1905,
  						50.8599
  					],
  					[
  						17.2056,
  						50.8694
  					],
  					[
  						17.2401,
  						50.8641
  					],
  					[
  						17.2451,
  						50.8478
  					],
  					[
  						17.2947,
  						50.8195
  					],
  					[
  						17.3183,
  						50.8211
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 244,
  			name: "powiat wąbrzeski",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.1069,
  						53.3806
  					],
  					[
  						19.084,
  						53.3575
  					],
  					[
  						19.1224,
  						53.3394
  					],
  					[
  						19.1394,
  						53.2771
  					],
  					[
  						19.1135,
  						53.2671
  					],
  					[
  						19.1405,
  						53.2466
  					],
  					[
  						19.1421,
  						53.2275
  					],
  					[
  						19.1181,
  						53.215
  					],
  					[
  						19.0862,
  						53.1848
  					],
  					[
  						19.0404,
  						53.1734
  					],
  					[
  						18.9993,
  						53.1852
  					],
  					[
  						19.0128,
  						53.2028
  					],
  					[
  						18.9882,
  						53.2107
  					],
  					[
  						18.9665,
  						53.1882
  					],
  					[
  						18.8988,
  						53.1837
  					],
  					[
  						18.8111,
  						53.1838
  					],
  					[
  						18.7618,
  						53.2011
  					],
  					[
  						18.8031,
  						53.22
  					],
  					[
  						18.7727,
  						53.228
  					],
  					[
  						18.7766,
  						53.2459
  					],
  					[
  						18.7249,
  						53.263
  					],
  					[
  						18.7389,
  						53.2772
  					],
  					[
  						18.738,
  						53.3193
  					],
  					[
  						18.6994,
  						53.3279
  					],
  					[
  						18.6957,
  						53.3443
  					],
  					[
  						18.7242,
  						53.3648
  					],
  					[
  						18.7934,
  						53.3856
  					],
  					[
  						18.822,
  						53.3832
  					],
  					[
  						18.8606,
  						53.3565
  					],
  					[
  						18.8848,
  						53.332
  					],
  					[
  						18.91,
  						53.3438
  					],
  					[
  						18.9366,
  						53.3399
  					],
  					[
  						19.0448,
  						53.3608
  					],
  					[
  						19.0768,
  						53.3927
  					],
  					[
  						19.1069,
  						53.3806
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 245,
  			name: "powiat kętrzyński",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.5622,
  						54.0808
  					],
  					[
  						21.5497,
  						54.0416
  					],
  					[
  						21.5515,
  						53.9973
  					],
  					[
  						21.514,
  						53.9866
  					],
  					[
  						21.4586,
  						53.9599
  					],
  					[
  						21.4356,
  						53.9763
  					],
  					[
  						21.4077,
  						53.9678
  					],
  					[
  						21.384,
  						53.9958
  					],
  					[
  						21.3126,
  						53.9945
  					],
  					[
  						21.2793,
  						53.978
  					],
  					[
  						21.2327,
  						53.9699
  					],
  					[
  						21.2322,
  						53.952
  					],
  					[
  						21.1807,
  						53.9382
  					],
  					[
  						21.1717,
  						53.9578
  					],
  					[
  						21.1465,
  						53.9595
  					],
  					[
  						21.1277,
  						53.9385
  					],
  					[
  						21.1063,
  						53.9603
  					],
  					[
  						21.1229,
  						53.9866
  					],
  					[
  						21.0864,
  						53.9978
  					],
  					[
  						21.0821,
  						54.0371
  					],
  					[
  						21.0882,
  						54.0609
  					],
  					[
  						21.0696,
  						54.0828
  					],
  					[
  						21.1045,
  						54.0941
  					],
  					[
  						21.0574,
  						54.1283
  					],
  					[
  						21.0247,
  						54.1236
  					],
  					[
  						21.0523,
  						54.2107
  					],
  					[
  						21.0307,
  						54.2243
  					],
  					[
  						21.0578,
  						54.2589
  					],
  					[
  						21.0928,
  						54.2567
  					],
  					[
  						21.0972,
  						54.2842
  					],
  					[
  						21.1214,
  						54.2764
  					],
  					[
  						21.139,
  						54.2569
  					],
  					[
  						21.1793,
  						54.26
  					],
  					[
  						21.1852,
  						54.2757
  					],
  					[
  						21.1671,
  						54.2958
  					],
  					[
  						21.217,
  						54.3125
  					],
  					[
  						21.2205,
  						54.3348
  					],
  					[
  						21.2744,
  						54.3284
  					],
  					[
  						21.3795,
  						54.3311
  					],
  					[
  						21.437,
  						54.3262
  					],
  					[
  						21.4461,
  						54.3182
  					],
  					[
  						21.4958,
  						54.324
  					],
  					[
  						21.5593,
  						54.3225
  					],
  					[
  						21.5645,
  						54.2779
  					],
  					[
  						21.5382,
  						54.2621
  					],
  					[
  						21.5379,
  						54.2435
  					],
  					[
  						21.5644,
  						54.2347
  					],
  					[
  						21.5723,
  						54.2177
  					],
  					[
  						21.6023,
  						54.2201
  					],
  					[
  						21.595,
  						54.1956
  					],
  					[
  						21.5537,
  						54.1857
  					],
  					[
  						21.5779,
  						54.1631
  					],
  					[
  						21.5737,
  						54.1464
  					],
  					[
  						21.545,
  						54.1439
  					],
  					[
  						21.5342,
  						54.1289
  					],
  					[
  						21.5387,
  						54.0967
  					],
  					[
  						21.5622,
  						54.0808
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 246,
  			name: "powiat białostocki",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.4077,
  						53.274
  					],
  					[
  						23.4083,
  						53.2737
  					],
  					[
  						23.5126,
  						53.2559
  					],
  					[
  						23.494,
  						53.2151
  					],
  					[
  						23.5358,
  						53.2103
  					],
  					[
  						23.7117,
  						53.1696
  					],
  					[
  						23.7192,
  						53.1538
  					],
  					[
  						23.7485,
  						53.157
  					],
  					[
  						23.838,
  						53.1497
  					],
  					[
  						23.9095,
  						53.1674
  					],
  					[
  						23.9158,
  						53.143
  					],
  					[
  						23.8973,
  						53.1312
  					],
  					[
  						23.8721,
  						53.082
  					],
  					[
  						23.9254,
  						53.0246
  					],
  					[
  						23.9311,
  						52.9762
  					],
  					[
  						23.9463,
  						52.9587
  					],
  					[
  						23.9165,
  						52.9388
  					],
  					[
  						23.9162,
  						52.9048
  					],
  					[
  						23.9102,
  						52.9043
  					],
  					[
  						23.8243,
  						52.9107
  					],
  					[
  						23.7904,
  						52.9378
  					],
  					[
  						23.702,
  						52.9373
  					],
  					[
  						23.624,
  						52.9332
  					],
  					[
  						23.6158,
  						52.9547
  					],
  					[
  						23.5648,
  						52.9744
  					],
  					[
  						23.5062,
  						52.9756
  					],
  					[
  						23.4934,
  						52.9902
  					],
  					[
  						23.4341,
  						52.9746
  					],
  					[
  						23.4189,
  						52.9639
  					],
  					[
  						23.375,
  						52.9651
  					],
  					[
  						23.3746,
  						52.9291
  					],
  					[
  						23.3905,
  						52.9052
  					],
  					[
  						23.3682,
  						52.8931
  					],
  					[
  						23.3302,
  						52.8935
  					],
  					[
  						23.3,
  						52.8926
  					],
  					[
  						23.2651,
  						52.9059
  					],
  					[
  						23.2193,
  						52.9023
  					],
  					[
  						23.1791,
  						52.9123
  					],
  					[
  						23.0485,
  						52.9029
  					],
  					[
  						22.9959,
  						52.9094
  					],
  					[
  						22.9528,
  						52.9257
  					],
  					[
  						22.9345,
  						52.9216
  					],
  					[
  						22.9385,
  						52.8878
  					],
  					[
  						22.9073,
  						52.8741
  					],
  					[
  						22.8802,
  						52.8834
  					],
  					[
  						22.8697,
  						52.8645
  					],
  					[
  						22.7919,
  						52.8543
  					],
  					[
  						22.7742,
  						52.8571
  					],
  					[
  						22.7446,
  						52.8944
  					],
  					[
  						22.7186,
  						52.9062
  					],
  					[
  						22.7106,
  						52.9296
  					],
  					[
  						22.7625,
  						52.9262
  					],
  					[
  						22.7689,
  						52.9513
  					],
  					[
  						22.7869,
  						52.9665
  					],
  					[
  						22.7687,
  						52.982
  					],
  					[
  						22.7612,
  						53.0066
  					],
  					[
  						22.7864,
  						53.0323
  					],
  					[
  						22.8629,
  						53.0552
  					],
  					[
  						22.8158,
  						53.079
  					],
  					[
  						22.8028,
  						53.1012
  					],
  					[
  						22.8102,
  						53.1208
  					],
  					[
  						22.7549,
  						53.1148
  					],
  					[
  						22.6989,
  						53.1258
  					],
  					[
  						22.6613,
  						53.1435
  					],
  					[
  						22.6163,
  						53.1314
  					],
  					[
  						22.594,
  						53.0941
  					],
  					[
  						22.5493,
  						53.1095
  					],
  					[
  						22.5503,
  						53.1254
  					],
  					[
  						22.5052,
  						53.1408
  					],
  					[
  						22.4837,
  						53.165
  					],
  					[
  						22.4691,
  						53.2034
  					],
  					[
  						22.4797,
  						53.2134
  					],
  					[
  						22.5446,
  						53.2206
  					],
  					[
  						22.5644,
  						53.2091
  					],
  					[
  						22.6059,
  						53.2108
  					],
  					[
  						22.6175,
  						53.2361
  					],
  					[
  						22.6418,
  						53.2491
  					],
  					[
  						22.6656,
  						53.2448
  					],
  					[
  						22.7097,
  						53.2772
  					],
  					[
  						22.7396,
  						53.2678
  					],
  					[
  						22.7419,
  						53.2499
  					],
  					[
  						22.7707,
  						53.2374
  					],
  					[
  						22.78,
  						53.2143
  					],
  					[
  						22.8119,
  						53.2236
  					],
  					[
  						22.885,
  						53.227
  					],
  					[
  						22.9213,
  						53.2601
  					],
  					[
  						22.9781,
  						53.2874
  					],
  					[
  						23.0246,
  						53.2805
  					],
  					[
  						23.028,
  						53.2997
  					],
  					[
  						23.0775,
  						53.3061
  					],
  					[
  						23.0813,
  						53.3276
  					],
  					[
  						23.1097,
  						53.3196
  					],
  					[
  						23.1178,
  						53.3392
  					],
  					[
  						23.1527,
  						53.35
  					],
  					[
  						23.1602,
  						53.3832
  					],
  					[
  						23.2198,
  						53.3847
  					],
  					[
  						23.3191,
  						53.367
  					],
  					[
  						23.3342,
  						53.3468
  					],
  					[
  						23.3581,
  						53.3511
  					],
  					[
  						23.3618,
  						53.3277
  					],
  					[
  						23.3947,
  						53.31
  					],
  					[
  						23.4077,
  						53.274
  					]
  				],
  				[
  					[
  						23.0802,
  						53.1785
  					],
  					[
  						23.0672,
  						53.1349
  					],
  					[
  						23.0804,
  						53.1113
  					],
  					[
  						23.119,
  						53.105
  					],
  					[
  						23.1311,
  						53.0847
  					],
  					[
  						23.1602,
  						53.0927
  					],
  					[
  						23.2266,
  						53.0786
  					],
  					[
  						23.2472,
  						53.0998
  					],
  					[
  						23.2202,
  						53.1125
  					],
  					[
  						23.2326,
  						53.1308
  					],
  					[
  						23.2405,
  						53.1666
  					],
  					[
  						23.2001,
  						53.1801
  					],
  					[
  						23.1091,
  						53.1718
  					],
  					[
  						23.0802,
  						53.1785
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 247,
  			name: "powiat augustowski",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.1278,
  						54.0205
  					],
  					[
  						23.1294,
  						54.0042
  					],
  					[
  						23.0901,
  						53.989
  					],
  					[
  						23.08,
  						53.962
  					],
  					[
  						23.1363,
  						53.961
  					],
  					[
  						23.1638,
  						53.9515
  					],
  					[
  						23.2262,
  						53.9595
  					],
  					[
  						23.266,
  						53.9455
  					],
  					[
  						23.3295,
  						53.951
  					],
  					[
  						23.389,
  						53.9251
  					],
  					[
  						23.3943,
  						53.9083
  					],
  					[
  						23.4635,
  						53.8949
  					],
  					[
  						23.5116,
  						53.9159
  					],
  					[
  						23.5241,
  						53.8626
  					],
  					[
  						23.5482,
  						53.8561
  					],
  					[
  						23.5447,
  						53.7963
  					],
  					[
  						23.5491,
  						53.7678
  					],
  					[
  						23.5821,
  						53.7438
  					],
  					[
  						23.5887,
  						53.6959
  					],
  					[
  						23.5321,
  						53.7102
  					],
  					[
  						23.5034,
  						53.6921
  					],
  					[
  						23.4667,
  						53.7031
  					],
  					[
  						23.4147,
  						53.7002
  					],
  					[
  						23.34,
  						53.7219
  					],
  					[
  						23.2958,
  						53.7079
  					],
  					[
  						23.2466,
  						53.7076
  					],
  					[
  						23.2233,
  						53.7143
  					],
  					[
  						23.1867,
  						53.7026
  					],
  					[
  						23.1228,
  						53.677
  					],
  					[
  						23.0759,
  						53.665
  					],
  					[
  						23.0546,
  						53.6358
  					],
  					[
  						23.0389,
  						53.6317
  					],
  					[
  						23.0076,
  						53.6262
  					],
  					[
  						23.0048,
  						53.6102
  					],
  					[
  						22.9577,
  						53.6002
  					],
  					[
  						22.9583,
  						53.6161
  					],
  					[
  						22.9287,
  						53.6071
  					],
  					[
  						22.9298,
  						53.5849
  					],
  					[
  						22.8993,
  						53.5701
  					],
  					[
  						22.8739,
  						53.5829
  					],
  					[
  						22.8874,
  						53.603
  					],
  					[
  						22.8775,
  						53.6748
  					],
  					[
  						22.8442,
  						53.6866
  					],
  					[
  						22.7871,
  						53.6813
  					],
  					[
  						22.7286,
  						53.6986
  					],
  					[
  						22.7249,
  						53.7109
  					],
  					[
  						22.7442,
  						53.7295
  					],
  					[
  						22.7324,
  						53.7515
  					],
  					[
  						22.6968,
  						53.7616
  					],
  					[
  						22.7268,
  						53.8039
  					],
  					[
  						22.7267,
  						53.8332
  					],
  					[
  						22.779,
  						53.8656
  					],
  					[
  						22.7783,
  						53.9229
  					],
  					[
  						22.8219,
  						53.9276
  					],
  					[
  						22.8571,
  						53.9446
  					],
  					[
  						22.8506,
  						53.9661
  					],
  					[
  						22.8867,
  						53.9683
  					],
  					[
  						22.8718,
  						53.9962
  					],
  					[
  						22.9883,
  						54.0163
  					],
  					[
  						23.0371,
  						54.0096
  					],
  					[
  						23.1278,
  						54.0205
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 248,
  			name: "powiat wałbrzyski",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.2039,
  						50.8857
  					],
  					[
  						16.2396,
  						50.8868
  					],
  					[
  						16.2794,
  						50.8691
  					],
  					[
  						16.2723,
  						50.854
  					],
  					[
  						16.247,
  						50.8236
  					],
  					[
  						16.275,
  						50.8139
  					],
  					[
  						16.2399,
  						50.7956
  					],
  					[
  						16.2277,
  						50.761
  					],
  					[
  						16.2636,
  						50.718
  					],
  					[
  						16.3036,
  						50.7233
  					],
  					[
  						16.3456,
  						50.7675
  					],
  					[
  						16.3276,
  						50.7804
  					],
  					[
  						16.3507,
  						50.7932
  					],
  					[
  						16.3769,
  						50.7861
  					],
  					[
  						16.409,
  						50.7664
  					],
  					[
  						16.4621,
  						50.7462
  					],
  					[
  						16.4889,
  						50.7144
  					],
  					[
  						16.4797,
  						50.6811
  					],
  					[
  						16.4766,
  						50.668
  					],
  					[
  						16.4424,
  						50.6474
  					],
  					[
  						16.4047,
  						50.6541
  					],
  					[
  						16.3778,
  						50.6369
  					],
  					[
  						16.3431,
  						50.6615
  					],
  					[
  						16.305,
  						50.6591
  					],
  					[
  						16.2339,
  						50.6711
  					],
  					[
  						16.2205,
  						50.6365
  					],
  					[
  						16.1997,
  						50.6311
  					],
  					[
  						16.1988,
  						50.6307
  					],
  					[
  						16.1704,
  						50.6453
  					],
  					[
  						16.1073,
  						50.6621
  					],
  					[
  						16.1122,
  						50.6783
  					],
  					[
  						16.1647,
  						50.6831
  					],
  					[
  						16.1738,
  						50.7086
  					],
  					[
  						16.1341,
  						50.7095
  					],
  					[
  						16.1005,
  						50.749
  					],
  					[
  						16.1078,
  						50.7586
  					],
  					[
  						16.0771,
  						50.7858
  					],
  					[
  						16.0679,
  						50.8263
  					],
  					[
  						16.0869,
  						50.861
  					],
  					[
  						16.103,
  						50.8589
  					],
  					[
  						16.12,
  						50.853
  					],
  					[
  						16.148,
  						50.8635
  					],
  					[
  						16.179,
  						50.8639
  					],
  					[
  						16.2039,
  						50.8857
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 249,
  			name: "powiat kłodzki",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.4797,
  						50.6811
  					],
  					[
  						16.5021,
  						50.6731
  					],
  					[
  						16.5582,
  						50.6336
  					],
  					[
  						16.5831,
  						50.6283
  					],
  					[
  						16.6059,
  						50.5884
  					],
  					[
  						16.6354,
  						50.573
  					],
  					[
  						16.642,
  						50.5497
  					],
  					[
  						16.6796,
  						50.5404
  					],
  					[
  						16.6751,
  						50.5165
  					],
  					[
  						16.7003,
  						50.4968
  					],
  					[
  						16.6974,
  						50.4802
  					],
  					[
  						16.7338,
  						50.4769
  					],
  					[
  						16.7571,
  						50.4539
  					],
  					[
  						16.7686,
  						50.4251
  					],
  					[
  						16.7882,
  						50.4251
  					],
  					[
  						16.8084,
  						50.3998
  					],
  					[
  						16.8603,
  						50.4077
  					],
  					[
  						16.9082,
  						50.3911
  					],
  					[
  						16.9407,
  						50.3198
  					],
  					[
  						17.0026,
  						50.3021
  					],
  					[
  						17.02,
  						50.2783
  					],
  					[
  						17.0016,
  						50.2564
  					],
  					[
  						17.0283,
  						50.23
  					],
  					[
  						16.9985,
  						50.2159
  					],
  					[
  						16.9763,
  						50.2449
  					],
  					[
  						16.956,
  						50.2225
  					],
  					[
  						16.9174,
  						50.2262
  					],
  					[
  						16.8875,
  						50.2156
  					],
  					[
  						16.8716,
  						50.197
  					],
  					[
  						16.8469,
  						50.2073
  					],
  					[
  						16.8099,
  						50.1893
  					],
  					[
  						16.7833,
  						50.1456
  					],
  					[
  						16.7466,
  						50.1351
  					],
  					[
  						16.7239,
  						50.1052
  					],
  					[
  						16.7036,
  						50.0963
  					],
  					[
  						16.6409,
  						50.1122
  					],
  					[
  						16.6029,
  						50.1347
  					],
  					[
  						16.5608,
  						50.1643
  					],
  					[
  						16.5608,
  						50.2053
  					],
  					[
  						16.5483,
  						50.2297
  					],
  					[
  						16.5228,
  						50.2394
  					],
  					[
  						16.4667,
  						50.2875
  					],
  					[
  						16.4322,
  						50.3238
  					],
  					[
  						16.4321,
  						50.324
  					],
  					[
  						16.3993,
  						50.3192
  					],
  					[
  						16.3612,
  						50.3536
  					],
  					[
  						16.3608,
  						50.3795
  					],
  					[
  						16.3023,
  						50.3822
  					],
  					[
  						16.2865,
  						50.3677
  					],
  					[
  						16.2381,
  						50.4141
  					],
  					[
  						16.2218,
  						50.4069
  					],
  					[
  						16.2052,
  						50.4487
  					],
  					[
  						16.2557,
  						50.4676
  					],
  					[
  						16.2685,
  						50.4829
  					],
  					[
  						16.2941,
  						50.4792
  					],
  					[
  						16.319,
  						50.5079
  					],
  					[
  						16.3438,
  						50.4958
  					],
  					[
  						16.4018,
  						50.5299
  					],
  					[
  						16.4109,
  						50.5479
  					],
  					[
  						16.4034,
  						50.5663
  					],
  					[
  						16.4449,
  						50.5796
  					],
  					[
  						16.423,
  						50.6063
  					],
  					[
  						16.3944,
  						50.6187
  					],
  					[
  						16.3778,
  						50.6369
  					],
  					[
  						16.4047,
  						50.6541
  					],
  					[
  						16.4424,
  						50.6474
  					],
  					[
  						16.4766,
  						50.668
  					],
  					[
  						16.4797,
  						50.6811
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 250,
  			name: "powiat Tychy",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.9331,
  						50.0819
  					],
  					[
  						18.954,
  						50.1115
  					],
  					[
  						18.9253,
  						50.1323
  					],
  					[
  						18.9342,
  						50.1586
  					],
  					[
  						18.9489,
  						50.1556
  					],
  					[
  						19.0222,
  						50.1758
  					],
  					[
  						19.0373,
  						50.1464
  					],
  					[
  						19.0816,
  						50.1313
  					],
  					[
  						19.0759,
  						50.1113
  					],
  					[
  						19.0513,
  						50.0823
  					],
  					[
  						19.0361,
  						50.0772
  					],
  					[
  						19.0014,
  						50.0837
  					],
  					[
  						18.9331,
  						50.0819
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 251,
  			name: "powiat Rybnik",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.642,
  						50.0507
  					],
  					[
  						18.6366,
  						50.0497
  					],
  					[
  						18.6099,
  						50.0413
  					],
  					[
  						18.6093,
  						50.0417
  					],
  					[
  						18.6005,
  						50.0411
  					],
  					[
  						18.5394,
  						50.0589
  					],
  					[
  						18.5232,
  						50.0382
  					],
  					[
  						18.4794,
  						50.0526
  					],
  					[
  						18.4614,
  						50.0804
  					],
  					[
  						18.4423,
  						50.0864
  					],
  					[
  						18.4752,
  						50.0853
  					],
  					[
  						18.4858,
  						50.1147
  					],
  					[
  						18.4519,
  						50.1206
  					],
  					[
  						18.4554,
  						50.1532
  					],
  					[
  						18.4502,
  						50.1555
  					],
  					[
  						18.4947,
  						50.1799
  					],
  					[
  						18.558,
  						50.181
  					],
  					[
  						18.5754,
  						50.1377
  					],
  					[
  						18.5948,
  						50.1444
  					],
  					[
  						18.6256,
  						50.147
  					],
  					[
  						18.6135,
  						50.1209
  					],
  					[
  						18.6318,
  						50.1105
  					],
  					[
  						18.6376,
  						50.0851
  					],
  					[
  						18.6568,
  						50.0813
  					],
  					[
  						18.642,
  						50.0507
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 252,
  			name: "powiat sokołowski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.1783,
  						52.459
  					],
  					[
  						22.1569,
  						52.4828
  					],
  					[
  						22.0965,
  						52.5153
  					],
  					[
  						22.0836,
  						52.5325
  					],
  					[
  						22.0539,
  						52.5357
  					],
  					[
  						22.0566,
  						52.5557
  					],
  					[
  						22.0397,
  						52.5739
  					],
  					[
  						22.0044,
  						52.5719
  					],
  					[
  						21.984,
  						52.5901
  					],
  					[
  						21.9998,
  						52.6219
  					],
  					[
  						22.0351,
  						52.6216
  					],
  					[
  						22.0489,
  						52.6339
  					],
  					[
  						22.0537,
  						52.6613
  					],
  					[
  						22.043,
  						52.6762
  					],
  					[
  						22.1032,
  						52.693
  					],
  					[
  						22.2117,
  						52.6981
  					],
  					[
  						22.2783,
  						52.6693
  					],
  					[
  						22.3085,
  						52.668
  					],
  					[
  						22.3495,
  						52.6562
  					],
  					[
  						22.3939,
  						52.6129
  					],
  					[
  						22.4086,
  						52.6097
  					],
  					[
  						22.4578,
  						52.5854
  					],
  					[
  						22.4693,
  						52.5652
  					],
  					[
  						22.5267,
  						52.5212
  					],
  					[
  						22.5101,
  						52.4902
  					],
  					[
  						22.5289,
  						52.4623
  					],
  					[
  						22.5542,
  						52.4632
  					],
  					[
  						22.5419,
  						52.4242
  					],
  					[
  						22.5629,
  						52.4105
  					],
  					[
  						22.537,
  						52.3857
  					],
  					[
  						22.5402,
  						52.3653
  					],
  					[
  						22.5101,
  						52.3296
  					],
  					[
  						22.4678,
  						52.3216
  					],
  					[
  						22.4165,
  						52.3137
  					],
  					[
  						22.3818,
  						52.3148
  					],
  					[
  						22.3676,
  						52.3041
  					],
  					[
  						22.3001,
  						52.3013
  					],
  					[
  						22.2737,
  						52.317
  					],
  					[
  						22.2139,
  						52.3039
  					],
  					[
  						22.197,
  						52.291
  					],
  					[
  						22.165,
  						52.316
  					],
  					[
  						22.1197,
  						52.3135
  					],
  					[
  						22.076,
  						52.3382
  					],
  					[
  						22.1309,
  						52.3547
  					],
  					[
  						22.124,
  						52.3718
  					],
  					[
  						22.0898,
  						52.3878
  					],
  					[
  						22.0903,
  						52.4099
  					],
  					[
  						22.1355,
  						52.4254
  					],
  					[
  						22.1783,
  						52.459
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 253,
  			name: "powiat grójecki",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.6579,
  						51.9255
  					],
  					[
  						20.686,
  						51.9548
  					],
  					[
  						20.7291,
  						51.944
  					],
  					[
  						20.8021,
  						51.9584
  					],
  					[
  						20.8336,
  						51.9347
  					],
  					[
  						20.861,
  						51.9286
  					],
  					[
  						20.9269,
  						51.9339
  					],
  					[
  						20.9564,
  						51.9252
  					],
  					[
  						20.9844,
  						51.9124
  					],
  					[
  						21.0059,
  						51.9269
  					],
  					[
  						21.0449,
  						51.9278
  					],
  					[
  						21.0869,
  						51.9396
  					],
  					[
  						21.1582,
  						51.9274
  					],
  					[
  						21.1837,
  						51.928
  					],
  					[
  						21.1978,
  						51.8996
  					],
  					[
  						21.2391,
  						51.9016
  					],
  					[
  						21.2758,
  						51.8768
  					],
  					[
  						21.2864,
  						51.8617
  					],
  					[
  						21.2621,
  						51.8532
  					],
  					[
  						21.2864,
  						51.8172
  					],
  					[
  						21.2428,
  						51.7984
  					],
  					[
  						21.2361,
  						51.7859
  					],
  					[
  						21.2036,
  						51.7832
  					],
  					[
  						21.1659,
  						51.7703
  					],
  					[
  						21.1186,
  						51.7439
  					],
  					[
  						21.1248,
  						51.7279
  					],
  					[
  						21.1007,
  						51.7286
  					],
  					[
  						21.0734,
  						51.6983
  					],
  					[
  						21.0324,
  						51.6902
  					],
  					[
  						21.007,
  						51.7039
  					],
  					[
  						21.0097,
  						51.7181
  					],
  					[
  						20.9742,
  						51.7311
  					],
  					[
  						20.973,
  						51.7458
  					],
  					[
  						20.9452,
  						51.7538
  					],
  					[
  						20.8901,
  						51.7397
  					],
  					[
  						20.8779,
  						51.7056
  					],
  					[
  						20.8317,
  						51.7119
  					],
  					[
  						20.7739,
  						51.6866
  					],
  					[
  						20.8127,
  						51.6676
  					],
  					[
  						20.8141,
  						51.6379
  					],
  					[
  						20.7738,
  						51.626
  					],
  					[
  						20.7137,
  						51.6241
  					],
  					[
  						20.692,
  						51.6096
  					],
  					[
  						20.651,
  						51.6065
  					],
  					[
  						20.6436,
  						51.5837
  					],
  					[
  						20.5803,
  						51.5679
  					],
  					[
  						20.5746,
  						51.5662
  					],
  					[
  						20.4953,
  						51.5605
  					],
  					[
  						20.497,
  						51.5818
  					],
  					[
  						20.5364,
  						51.6126
  					],
  					[
  						20.4719,
  						51.6075
  					],
  					[
  						20.4569,
  						51.6162
  					],
  					[
  						20.4249,
  						51.6116
  					],
  					[
  						20.4148,
  						51.634
  					],
  					[
  						20.385,
  						51.6416
  					],
  					[
  						20.4003,
  						51.6728
  					],
  					[
  						20.4672,
  						51.6928
  					],
  					[
  						20.5145,
  						51.6855
  					],
  					[
  						20.5354,
  						51.6687
  					],
  					[
  						20.6203,
  						51.6576
  					],
  					[
  						20.6532,
  						51.6772
  					],
  					[
  						20.6584,
  						51.7242
  					],
  					[
  						20.6388,
  						51.7375
  					],
  					[
  						20.5826,
  						51.748
  					],
  					[
  						20.595,
  						51.7693
  					],
  					[
  						20.5789,
  						51.7936
  					],
  					[
  						20.5816,
  						51.8111
  					],
  					[
  						20.6077,
  						51.8161
  					],
  					[
  						20.5963,
  						51.8398
  					],
  					[
  						20.6054,
  						51.8496
  					],
  					[
  						20.6434,
  						51.8515
  					],
  					[
  						20.6438,
  						51.9017
  					],
  					[
  						20.6579,
  						51.9255
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 254,
  			name: "powiat lubartowski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.3984,
  						51.7138
  					],
  					[
  						22.4835,
  						51.6945
  					],
  					[
  						22.5117,
  						51.6698
  					],
  					[
  						22.5649,
  						51.6604
  					],
  					[
  						22.6104,
  						51.622
  					],
  					[
  						22.6637,
  						51.5911
  					],
  					[
  						22.6772,
  						51.5933
  					],
  					[
  						22.7257,
  						51.5714
  					],
  					[
  						22.7851,
  						51.5607
  					],
  					[
  						22.7853,
  						51.5208
  					],
  					[
  						22.8247,
  						51.517
  					],
  					[
  						22.8465,
  						51.5308
  					],
  					[
  						22.8803,
  						51.5294
  					],
  					[
  						22.8788,
  						51.5618
  					],
  					[
  						22.9151,
  						51.5542
  					],
  					[
  						22.9703,
  						51.5255
  					],
  					[
  						22.9937,
  						51.5258
  					],
  					[
  						23.0186,
  						51.5008
  					],
  					[
  						23.0012,
  						51.4814
  					],
  					[
  						22.973,
  						51.4697
  					],
  					[
  						22.9812,
  						51.4239
  					],
  					[
  						22.9761,
  						51.3993
  					],
  					[
  						22.9365,
  						51.4077
  					],
  					[
  						22.8721,
  						51.3864
  					],
  					[
  						22.8297,
  						51.3884
  					],
  					[
  						22.7797,
  						51.4022
  					],
  					[
  						22.7418,
  						51.3877
  					],
  					[
  						22.712,
  						51.3873
  					],
  					[
  						22.6689,
  						51.3645
  					],
  					[
  						22.6349,
  						51.3796
  					],
  					[
  						22.6028,
  						51.3796
  					],
  					[
  						22.566,
  						51.3915
  					],
  					[
  						22.5118,
  						51.3757
  					],
  					[
  						22.4915,
  						51.4015
  					],
  					[
  						22.4912,
  						51.402
  					],
  					[
  						22.4913,
  						51.402
  					],
  					[
  						22.4913,
  						51.4022
  					],
  					[
  						22.4912,
  						51.402
  					],
  					[
  						22.4907,
  						51.4025
  					],
  					[
  						22.4899,
  						51.4032
  					],
  					[
  						22.4898,
  						51.4032
  					],
  					[
  						22.4899,
  						51.4032
  					],
  					[
  						22.4898,
  						51.4032
  					],
  					[
  						22.4578,
  						51.4089
  					],
  					[
  						22.4253,
  						51.3909
  					],
  					[
  						22.3906,
  						51.4044
  					],
  					[
  						22.3566,
  						51.43
  					],
  					[
  						22.3289,
  						51.4278
  					],
  					[
  						22.3013,
  						51.4283
  					],
  					[
  						22.2708,
  						51.4312
  					],
  					[
  						22.21,
  						51.4583
  					],
  					[
  						22.1913,
  						51.4977
  					],
  					[
  						22.2558,
  						51.5097
  					],
  					[
  						22.2481,
  						51.5321
  					],
  					[
  						22.2548,
  						51.5544
  					],
  					[
  						22.2264,
  						51.5631
  					],
  					[
  						22.209,
  						51.5844
  					],
  					[
  						22.1878,
  						51.5844
  					],
  					[
  						22.2132,
  						51.6043
  					],
  					[
  						22.189,
  						51.644
  					],
  					[
  						22.1933,
  						51.6597
  					],
  					[
  						22.2891,
  						51.6376
  					],
  					[
  						22.3069,
  						51.6731
  					],
  					[
  						22.3246,
  						51.6507
  					],
  					[
  						22.3676,
  						51.6578
  					],
  					[
  						22.3984,
  						51.7138
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 255,
  			name: "powiat puławski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.0607,
  						51.5735
  					],
  					[
  						22.1206,
  						51.5695
  					],
  					[
  						22.1878,
  						51.5844
  					],
  					[
  						22.209,
  						51.5844
  					],
  					[
  						22.2264,
  						51.5631
  					],
  					[
  						22.2548,
  						51.5544
  					],
  					[
  						22.2481,
  						51.5321
  					],
  					[
  						22.2558,
  						51.5097
  					],
  					[
  						22.1913,
  						51.4977
  					],
  					[
  						22.21,
  						51.4583
  					],
  					[
  						22.2708,
  						51.4312
  					],
  					[
  						22.3013,
  						51.4283
  					],
  					[
  						22.2932,
  						51.3998
  					],
  					[
  						22.2658,
  						51.3664
  					],
  					[
  						22.2902,
  						51.347
  					],
  					[
  						22.251,
  						51.3334
  					],
  					[
  						22.2844,
  						51.3175
  					],
  					[
  						22.2769,
  						51.2921
  					],
  					[
  						22.3103,
  						51.2771
  					],
  					[
  						22.2456,
  						51.2626
  					],
  					[
  						22.2243,
  						51.2672
  					],
  					[
  						22.1678,
  						51.2566
  					],
  					[
  						22.0883,
  						51.2782
  					],
  					[
  						22.0628,
  						51.2939
  					],
  					[
  						22.0392,
  						51.2802
  					],
  					[
  						22.0228,
  						51.2916
  					],
  					[
  						21.9799,
  						51.3008
  					],
  					[
  						21.9507,
  						51.2925
  					],
  					[
  						21.9372,
  						51.2712
  					],
  					[
  						21.8906,
  						51.3087
  					],
  					[
  						21.866,
  						51.2944
  					],
  					[
  						21.8601,
  						51.2747
  					],
  					[
  						21.8118,
  						51.2915
  					],
  					[
  						21.7831,
  						51.2937
  					],
  					[
  						21.8234,
  						51.3033
  					],
  					[
  						21.848,
  						51.365
  					],
  					[
  						21.8322,
  						51.3805
  					],
  					[
  						21.8018,
  						51.3783
  					],
  					[
  						21.7677,
  						51.4135
  					],
  					[
  						21.7877,
  						51.4202
  					],
  					[
  						21.8014,
  						51.4276
  					],
  					[
  						21.8402,
  						51.4203
  					],
  					[
  						21.874,
  						51.4716
  					],
  					[
  						21.847,
  						51.488
  					],
  					[
  						21.8553,
  						51.5104
  					],
  					[
  						21.8331,
  						51.5484
  					],
  					[
  						21.8514,
  						51.5479
  					],
  					[
  						21.8871,
  						51.5304
  					],
  					[
  						21.9331,
  						51.5447
  					],
  					[
  						21.9504,
  						51.5355
  					],
  					[
  						22.0095,
  						51.5753
  					],
  					[
  						22.0607,
  						51.5735
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 256,
  			name: "powiat radzyński",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.3984,
  						51.7138
  					],
  					[
  						22.4366,
  						51.7461
  					],
  					[
  						22.3796,
  						51.8044
  					],
  					[
  						22.3795,
  						51.8044
  					],
  					[
  						22.3796,
  						51.8044
  					],
  					[
  						22.3795,
  						51.8044
  					],
  					[
  						22.3526,
  						51.8134
  					],
  					[
  						22.3752,
  						51.8351
  					],
  					[
  						22.3564,
  						51.8423
  					],
  					[
  						22.3731,
  						51.8607
  					],
  					[
  						22.3956,
  						51.8537
  					],
  					[
  						22.4226,
  						51.8648
  					],
  					[
  						22.4555,
  						51.8424
  					],
  					[
  						22.4821,
  						51.8561
  					],
  					[
  						22.4903,
  						51.8865
  					],
  					[
  						22.5151,
  						51.8735
  					],
  					[
  						22.5718,
  						51.896
  					],
  					[
  						22.567,
  						51.9291
  					],
  					[
  						22.5537,
  						51.9368
  					],
  					[
  						22.576,
  						51.9678
  					],
  					[
  						22.6335,
  						51.9693
  					],
  					[
  						22.654,
  						51.9393
  					],
  					[
  						22.6861,
  						51.9352
  					],
  					[
  						22.724,
  						51.9401
  					],
  					[
  						22.7711,
  						51.9377
  					],
  					[
  						22.7798,
  						51.905
  					],
  					[
  						22.7637,
  						51.9007
  					],
  					[
  						22.7564,
  						51.8732
  					],
  					[
  						22.7306,
  						51.8401
  					],
  					[
  						22.7434,
  						51.8125
  					],
  					[
  						22.764,
  						51.8135
  					],
  					[
  						22.7914,
  						51.8573
  					],
  					[
  						22.882,
  						51.8624
  					],
  					[
  						22.8808,
  						51.8474
  					],
  					[
  						22.9676,
  						51.8929
  					],
  					[
  						23.0361,
  						51.894
  					],
  					[
  						23.0605,
  						51.8644
  					],
  					[
  						23.0461,
  						51.8426
  					],
  					[
  						23.023,
  						51.7803
  					],
  					[
  						23.0019,
  						51.7718
  					],
  					[
  						22.9837,
  						51.7861
  					],
  					[
  						22.9443,
  						51.7907
  					],
  					[
  						22.9101,
  						51.7436
  					],
  					[
  						22.8734,
  						51.7412
  					],
  					[
  						22.8543,
  						51.7284
  					],
  					[
  						22.8219,
  						51.7331
  					],
  					[
  						22.774,
  						51.6767
  					],
  					[
  						22.7235,
  						51.6774
  					],
  					[
  						22.7196,
  						51.6592
  					],
  					[
  						22.683,
  						51.6177
  					],
  					[
  						22.6772,
  						51.5933
  					],
  					[
  						22.6637,
  						51.5911
  					],
  					[
  						22.6104,
  						51.622
  					],
  					[
  						22.5649,
  						51.6604
  					],
  					[
  						22.5117,
  						51.6698
  					],
  					[
  						22.4835,
  						51.6945
  					],
  					[
  						22.3984,
  						51.7138
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 257,
  			name: "powiat Biała Podlaska",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.1778,
  						52.0076
  					],
  					[
  						23.1223,
  						51.9964
  					],
  					[
  						23.074,
  						52.0028
  					],
  					[
  						23.0711,
  						52.035
  					],
  					[
  						23.0944,
  						52.0543
  					],
  					[
  						23.1471,
  						52.0598
  					],
  					[
  						23.1524,
  						52.0522
  					],
  					[
  						23.2099,
  						52.0568
  					],
  					[
  						23.2115,
  						52.033
  					],
  					[
  						23.1778,
  						52.0076
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 258,
  			name: "powiat Nowy Sącz",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.6793,
  						49.5738
  					],
  					[
  						20.6484,
  						49.5816
  					],
  					[
  						20.6821,
  						49.6207
  					],
  					[
  						20.6674,
  						49.6303
  					],
  					[
  						20.6789,
  						49.6584
  					],
  					[
  						20.7238,
  						49.652
  					],
  					[
  						20.7457,
  						49.6359
  					],
  					[
  						20.759,
  						49.6075
  					],
  					[
  						20.7418,
  						49.6022
  					],
  					[
  						20.751,
  						49.5792
  					],
  					[
  						20.7283,
  						49.5641
  					],
  					[
  						20.7181,
  						49.5549
  					],
  					[
  						20.6793,
  						49.5738
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 259,
  			name: "powiat Gorzów Wielkopolski",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.2832,
  						52.7314
  					],
  					[
  						15.3109,
  						52.7185
  					],
  					[
  						15.2984,
  						52.693
  					],
  					[
  						15.2499,
  						52.685
  					],
  					[
  						15.2062,
  						52.6968
  					],
  					[
  						15.1843,
  						52.7098
  					],
  					[
  						15.1348,
  						52.7099
  					],
  					[
  						15.1406,
  						52.7312
  					],
  					[
  						15.1247,
  						52.7474
  					],
  					[
  						15.1353,
  						52.7769
  					],
  					[
  						15.1874,
  						52.7633
  					],
  					[
  						15.2298,
  						52.7737
  					],
  					[
  						15.2822,
  						52.7694
  					],
  					[
  						15.2832,
  						52.7314
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 260,
  			name: "powiat pilski",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.2576,
  						53.3256
  					],
  					[
  						17.2659,
  						53.3508
  					],
  					[
  						17.2572,
  						53.3634
  					],
  					[
  						17.3252,
  						53.3472
  					],
  					[
  						17.3555,
  						53.3291
  					],
  					[
  						17.3847,
  						53.307
  					],
  					[
  						17.3944,
  						53.2892
  					],
  					[
  						17.4388,
  						53.2675
  					],
  					[
  						17.4051,
  						53.2268
  					],
  					[
  						17.3689,
  						53.2268
  					],
  					[
  						17.3319,
  						53.2178
  					],
  					[
  						17.3458,
  						53.2011
  					],
  					[
  						17.3365,
  						53.1554
  					],
  					[
  						17.3897,
  						53.1442
  					],
  					[
  						17.3609,
  						53.1174
  					],
  					[
  						17.3572,
  						53.0872
  					],
  					[
  						17.3239,
  						53.0783
  					],
  					[
  						17.289,
  						53.084
  					],
  					[
  						17.2369,
  						53.0787
  					],
  					[
  						17.2061,
  						53.0897
  					],
  					[
  						17.1746,
  						53.0819
  					],
  					[
  						17.0738,
  						53.068
  					],
  					[
  						17.0277,
  						53.0669
  					],
  					[
  						16.9508,
  						53.0534
  					],
  					[
  						16.884,
  						53.0502
  					],
  					[
  						16.8078,
  						53.053
  					],
  					[
  						16.7798,
  						53.0135
  					],
  					[
  						16.741,
  						53.0028
  					],
  					[
  						16.7378,
  						52.9799
  					],
  					[
  						16.7067,
  						52.9687
  					],
  					[
  						16.7005,
  						52.9525
  					],
  					[
  						16.6486,
  						52.9569
  					],
  					[
  						16.6325,
  						52.9893
  					],
  					[
  						16.6495,
  						52.9914
  					],
  					[
  						16.6502,
  						53.0226
  					],
  					[
  						16.6254,
  						53.0444
  					],
  					[
  						16.6587,
  						53.0631
  					],
  					[
  						16.6748,
  						53.0943
  					],
  					[
  						16.6918,
  						53.0905
  					],
  					[
  						16.7113,
  						53.1144
  					],
  					[
  						16.6952,
  						53.1299
  					],
  					[
  						16.6102,
  						53.1068
  					],
  					[
  						16.5804,
  						53.1213
  					],
  					[
  						16.5106,
  						53.1268
  					],
  					[
  						16.4954,
  						53.1148
  					],
  					[
  						16.3905,
  						53.131
  					],
  					[
  						16.3992,
  						53.1637
  					],
  					[
  						16.4248,
  						53.1486
  					],
  					[
  						16.4552,
  						53.1644
  					],
  					[
  						16.5011,
  						53.1727
  					],
  					[
  						16.5586,
  						53.229
  					],
  					[
  						16.5957,
  						53.2277
  					],
  					[
  						16.6096,
  						53.2087
  					],
  					[
  						16.6346,
  						53.2199
  					],
  					[
  						16.6207,
  						53.2336
  					],
  					[
  						16.6342,
  						53.2603
  					],
  					[
  						16.6745,
  						53.2901
  					],
  					[
  						16.7145,
  						53.2991
  					],
  					[
  						16.7815,
  						53.2903
  					],
  					[
  						16.8025,
  						53.2523
  					],
  					[
  						16.8006,
  						53.2516
  					],
  					[
  						16.8001,
  						53.2515
  					],
  					[
  						16.8216,
  						53.2415
  					],
  					[
  						16.7864,
  						53.2083
  					],
  					[
  						16.7873,
  						53.1884
  					],
  					[
  						16.857,
  						53.1779
  					],
  					[
  						16.914,
  						53.1789
  					],
  					[
  						16.9135,
  						53.2049
  					],
  					[
  						16.9956,
  						53.2343
  					],
  					[
  						17.0453,
  						53.224
  					],
  					[
  						17.0771,
  						53.2396
  					],
  					[
  						17.1393,
  						53.2376
  					],
  					[
  						17.142,
  						53.262
  					],
  					[
  						17.1893,
  						53.2715
  					],
  					[
  						17.1859,
  						53.2891
  					],
  					[
  						17.2098,
  						53.3035
  					],
  					[
  						17.2449,
  						53.3115
  					],
  					[
  						17.2576,
  						53.3256
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 261,
  			name: "powiat wysokomazowiecki",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.2932,
  						52.8711
  					],
  					[
  						22.3506,
  						52.9076
  					],
  					[
  						22.3451,
  						52.9354
  					],
  					[
  						22.3579,
  						52.9535
  					],
  					[
  						22.3499,
  						52.9715
  					],
  					[
  						22.4045,
  						52.9864
  					],
  					[
  						22.4043,
  						53.0071
  					],
  					[
  						22.4425,
  						53.0262
  					],
  					[
  						22.4413,
  						53.0406
  					],
  					[
  						22.4772,
  						53.042
  					],
  					[
  						22.516,
  						53.0581
  					],
  					[
  						22.5621,
  						53.0638
  					],
  					[
  						22.594,
  						53.0941
  					],
  					[
  						22.6163,
  						53.1314
  					],
  					[
  						22.6613,
  						53.1435
  					],
  					[
  						22.6989,
  						53.1258
  					],
  					[
  						22.7549,
  						53.1148
  					],
  					[
  						22.8102,
  						53.1208
  					],
  					[
  						22.8028,
  						53.1012
  					],
  					[
  						22.8158,
  						53.079
  					],
  					[
  						22.8629,
  						53.0552
  					],
  					[
  						22.7864,
  						53.0323
  					],
  					[
  						22.7612,
  						53.0066
  					],
  					[
  						22.7687,
  						52.982
  					],
  					[
  						22.7869,
  						52.9665
  					],
  					[
  						22.7689,
  						52.9513
  					],
  					[
  						22.7625,
  						52.9262
  					],
  					[
  						22.7106,
  						52.9296
  					],
  					[
  						22.7186,
  						52.9062
  					],
  					[
  						22.7446,
  						52.8944
  					],
  					[
  						22.7742,
  						52.8571
  					],
  					[
  						22.7641,
  						52.8188
  					],
  					[
  						22.7291,
  						52.8035
  					],
  					[
  						22.703,
  						52.8028
  					],
  					[
  						22.6965,
  						52.7776
  					],
  					[
  						22.6593,
  						52.7519
  					],
  					[
  						22.6121,
  						52.7394
  					],
  					[
  						22.661,
  						52.7012
  					],
  					[
  						22.6762,
  						52.704
  					],
  					[
  						22.7173,
  						52.6746
  					],
  					[
  						22.703,
  						52.6663
  					],
  					[
  						22.6981,
  						52.6309
  					],
  					[
  						22.6546,
  						52.6233
  					],
  					[
  						22.6035,
  						52.5991
  					],
  					[
  						22.5206,
  						52.6097
  					],
  					[
  						22.49,
  						52.6202
  					],
  					[
  						22.4883,
  						52.6199
  					],
  					[
  						22.4875,
  						52.6199
  					],
  					[
  						22.4578,
  						52.5854
  					],
  					[
  						22.4086,
  						52.6097
  					],
  					[
  						22.4513,
  						52.6247
  					],
  					[
  						22.4447,
  						52.6821
  					],
  					[
  						22.435,
  						52.6981
  					],
  					[
  						22.4469,
  						52.7267
  					],
  					[
  						22.4538,
  						52.7882
  					],
  					[
  						22.3897,
  						52.7955
  					],
  					[
  						22.3772,
  						52.7784
  					],
  					[
  						22.3542,
  						52.7753
  					],
  					[
  						22.3385,
  						52.751
  					],
  					[
  						22.3037,
  						52.748
  					],
  					[
  						22.2523,
  						52.8338
  					],
  					[
  						22.3051,
  						52.8393
  					],
  					[
  						22.2932,
  						52.8711
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 262,
  			name: "powiat buski",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.8021,
  						50.558
  					],
  					[
  						20.7971,
  						50.578
  					],
  					[
  						20.8165,
  						50.5918
  					],
  					[
  						20.8272,
  						50.6342
  					],
  					[
  						20.8741,
  						50.6357
  					],
  					[
  						20.9121,
  						50.6367
  					],
  					[
  						20.9163,
  						50.6142
  					],
  					[
  						20.9374,
  						50.5941
  					],
  					[
  						20.9506,
  						50.5682
  					],
  					[
  						20.976,
  						50.5584
  					],
  					[
  						21.0232,
  						50.5582
  					],
  					[
  						21.0529,
  						50.5663
  					],
  					[
  						21.0737,
  						50.5288
  					],
  					[
  						21.0962,
  						50.52
  					],
  					[
  						21.0759,
  						50.4765
  					],
  					[
  						21.0585,
  						50.4775
  					],
  					[
  						21.0551,
  						50.4797
  					],
  					[
  						21.0154,
  						50.4894
  					],
  					[
  						21.0069,
  						50.4513
  					],
  					[
  						21.0372,
  						50.4341
  					],
  					[
  						21.0809,
  						50.4333
  					],
  					[
  						21.0925,
  						50.4126
  					],
  					[
  						21.1255,
  						50.4031
  					],
  					[
  						21.1126,
  						50.3766
  					],
  					[
  						21.1349,
  						50.3619
  					],
  					[
  						21.1465,
  						50.3538
  					],
  					[
  						21.113,
  						50.3384
  					],
  					[
  						21.0831,
  						50.3364
  					],
  					[
  						21.0617,
  						50.317
  					],
  					[
  						20.9451,
  						50.3125
  					],
  					[
  						20.9319,
  						50.2981
  					],
  					[
  						20.8929,
  						50.306
  					],
  					[
  						20.8549,
  						50.2961
  					],
  					[
  						20.8276,
  						50.2751
  					],
  					[
  						20.8058,
  						50.2895
  					],
  					[
  						20.7747,
  						50.2777
  					],
  					[
  						20.6881,
  						50.2897
  					],
  					[
  						20.6265,
  						50.3313
  					],
  					[
  						20.6043,
  						50.3562
  					],
  					[
  						20.6515,
  						50.3746
  					],
  					[
  						20.6317,
  						50.4097
  					],
  					[
  						20.6502,
  						50.4482
  					],
  					[
  						20.6168,
  						50.4524
  					],
  					[
  						20.6439,
  						50.4951
  					],
  					[
  						20.6056,
  						50.5226
  					],
  					[
  						20.6756,
  						50.5278
  					],
  					[
  						20.6844,
  						50.5463
  					],
  					[
  						20.7065,
  						50.5615
  					],
  					[
  						20.7523,
  						50.5631
  					],
  					[
  						20.7494,
  						50.5437
  					],
  					[
  						20.7746,
  						50.5366
  					],
  					[
  						20.8021,
  						50.558
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 263,
  			name: "powiat śremski",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.0047,
  						51.9802
  					],
  					[
  						16.9793,
  						52.0022
  					],
  					[
  						16.9431,
  						52.0157
  					],
  					[
  						16.8884,
  						52.0213
  					],
  					[
  						16.917,
  						52.046
  					],
  					[
  						16.9181,
  						52.0684
  					],
  					[
  						16.8919,
  						52.0661
  					],
  					[
  						16.8581,
  						52.1152
  					],
  					[
  						16.8219,
  						52.1184
  					],
  					[
  						16.7903,
  						52.1408
  					],
  					[
  						16.7993,
  						52.1768
  					],
  					[
  						16.8499,
  						52.1866
  					],
  					[
  						16.8722,
  						52.1824
  					],
  					[
  						16.9053,
  						52.198
  					],
  					[
  						16.9416,
  						52.1771
  					],
  					[
  						16.9777,
  						52.1854
  					],
  					[
  						17.0353,
  						52.1631
  					],
  					[
  						17.0984,
  						52.1838
  					],
  					[
  						17.0947,
  						52.1647
  					],
  					[
  						17.1142,
  						52.1402
  					],
  					[
  						17.143,
  						52.133
  					],
  					[
  						17.1386,
  						52.1007
  					],
  					[
  						17.1831,
  						52.0993
  					],
  					[
  						17.2263,
  						52.1097
  					],
  					[
  						17.2926,
  						52.0959
  					],
  					[
  						17.3198,
  						52.0828
  					],
  					[
  						17.2757,
  						52.0674
  					],
  					[
  						17.2735,
  						52.0367
  					],
  					[
  						17.3265,
  						52.0106
  					],
  					[
  						17.3235,
  						51.9871
  					],
  					[
  						17.2226,
  						51.9877
  					],
  					[
  						17.1886,
  						51.9675
  					],
  					[
  						17.1258,
  						51.9465
  					],
  					[
  						17.1208,
  						51.925
  					],
  					[
  						17.0352,
  						51.9426
  					],
  					[
  						17.0433,
  						51.9714
  					],
  					[
  						17.0047,
  						51.9802
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 264,
  			name: "powiat kępiński",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.0647,
  						51.3821
  					],
  					[
  						18.067,
  						51.3809
  					],
  					[
  						18.0988,
  						51.362
  					],
  					[
  						18.0925,
  						51.3257
  					],
  					[
  						18.1128,
  						51.3108
  					],
  					[
  						18.1031,
  						51.2804
  					],
  					[
  						18.1533,
  						51.264
  					],
  					[
  						18.1796,
  						51.2222
  					],
  					[
  						18.1786,
  						51.2203
  					],
  					[
  						18.1652,
  						51.2123
  					],
  					[
  						18.1637,
  						51.1725
  					],
  					[
  						18.126,
  						51.1691
  					],
  					[
  						18.0394,
  						51.131
  					],
  					[
  						17.9395,
  						51.1089
  					],
  					[
  						17.9173,
  						51.1127
  					],
  					[
  						17.8854,
  						51.1037
  					],
  					[
  						17.8648,
  						51.1138
  					],
  					[
  						17.8234,
  						51.118
  					],
  					[
  						17.8122,
  						51.1349
  					],
  					[
  						17.8329,
  						51.143
  					],
  					[
  						17.8512,
  						51.1724
  					],
  					[
  						17.8422,
  						51.1889
  					],
  					[
  						17.7953,
  						51.1941
  					],
  					[
  						17.7565,
  						51.2166
  					],
  					[
  						17.7429,
  						51.2573
  					],
  					[
  						17.7605,
  						51.3097
  					],
  					[
  						17.8244,
  						51.294
  					],
  					[
  						17.8346,
  						51.3307
  					],
  					[
  						17.8762,
  						51.3454
  					],
  					[
  						17.8763,
  						51.3477
  					],
  					[
  						17.8762,
  						51.3477
  					],
  					[
  						17.8763,
  						51.3477
  					],
  					[
  						17.8762,
  						51.3477
  					],
  					[
  						17.8762,
  						51.3487
  					],
  					[
  						17.876,
  						51.3493
  					],
  					[
  						17.8982,
  						51.3475
  					],
  					[
  						17.9229,
  						51.3658
  					],
  					[
  						17.96,
  						51.3387
  					],
  					[
  						18.0476,
  						51.3934
  					],
  					[
  						18.0647,
  						51.3821
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 265,
  			name: "powiat turecki",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.6857,
  						51.821
  					],
  					[
  						18.6132,
  						51.8344
  					],
  					[
  						18.5949,
  						51.8481
  					],
  					[
  						18.55,
  						51.8454
  					],
  					[
  						18.5227,
  						51.8344
  					],
  					[
  						18.5073,
  						51.8544
  					],
  					[
  						18.472,
  						51.851
  					],
  					[
  						18.4744,
  						51.8696
  					],
  					[
  						18.4378,
  						51.8709
  					],
  					[
  						18.413,
  						51.8895
  					],
  					[
  						18.4102,
  						51.911
  					],
  					[
  						18.3519,
  						51.9071
  					],
  					[
  						18.3269,
  						51.9263
  					],
  					[
  						18.3233,
  						51.9459
  					],
  					[
  						18.2973,
  						51.9805
  					],
  					[
  						18.2513,
  						52.0083
  					],
  					[
  						18.2668,
  						52.0341
  					],
  					[
  						18.2285,
  						52.039
  					],
  					[
  						18.2182,
  						52.0767
  					],
  					[
  						18.2378,
  						52.0998
  					],
  					[
  						18.2379,
  						52.0998
  					],
  					[
  						18.2378,
  						52.0998
  					],
  					[
  						18.2379,
  						52.0998
  					],
  					[
  						18.2727,
  						52.1083
  					],
  					[
  						18.2868,
  						52.1255
  					],
  					[
  						18.3293,
  						52.1228
  					],
  					[
  						18.3761,
  						52.139
  					],
  					[
  						18.3869,
  						52.1515
  					],
  					[
  						18.4209,
  						52.1553
  					],
  					[
  						18.4648,
  						52.1708
  					],
  					[
  						18.4877,
  						52.1509
  					],
  					[
  						18.5267,
  						52.1366
  					],
  					[
  						18.631,
  						52.1208
  					],
  					[
  						18.6671,
  						52.1354
  					],
  					[
  						18.6863,
  						52.1279
  					],
  					[
  						18.693,
  						52.0883
  					],
  					[
  						18.7179,
  						52.0657
  					],
  					[
  						18.7165,
  						52.0323
  					],
  					[
  						18.7346,
  						52.0027
  					],
  					[
  						18.7425,
  						51.9371
  					],
  					[
  						18.7679,
  						51.9278
  					],
  					[
  						18.721,
  						51.8735
  					],
  					[
  						18.6968,
  						51.8657
  					],
  					[
  						18.6857,
  						51.821
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 266,
  			name: "powiat opatowski",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.5704,
  						50.853
  					],
  					[
  						21.5697,
  						50.872
  					],
  					[
  						21.5845,
  						50.9066
  					],
  					[
  						21.6156,
  						50.9252
  					],
  					[
  						21.5905,
  						50.9532
  					],
  					[
  						21.6305,
  						50.9878
  					],
  					[
  						21.6573,
  						50.9854
  					],
  					[
  						21.6872,
  						51.0196
  					],
  					[
  						21.6629,
  						51.0239
  					],
  					[
  						21.6302,
  						51.0634
  					],
  					[
  						21.6763,
  						51.078
  					],
  					[
  						21.7052,
  						51.0427
  					],
  					[
  						21.7299,
  						51.0473
  					],
  					[
  						21.7521,
  						51.0374
  					],
  					[
  						21.803,
  						51.0721
  					],
  					[
  						21.8264,
  						51.047
  					],
  					[
  						21.8033,
  						51.0219
  					],
  					[
  						21.8195,
  						51.0092
  					],
  					[
  						21.8172,
  						50.974
  					],
  					[
  						21.8129,
  						50.9345
  					],
  					[
  						21.8307,
  						50.905
  					],
  					[
  						21.8358,
  						50.8783
  					],
  					[
  						21.7989,
  						50.8703
  					],
  					[
  						21.7535,
  						50.876
  					],
  					[
  						21.748,
  						50.8454
  					],
  					[
  						21.713,
  						50.8419
  					],
  					[
  						21.721,
  						50.8208
  					],
  					[
  						21.7194,
  						50.7809
  					],
  					[
  						21.6892,
  						50.7731
  					],
  					[
  						21.6429,
  						50.7927
  					],
  					[
  						21.6227,
  						50.7951
  					],
  					[
  						21.5555,
  						50.7641
  					],
  					[
  						21.5573,
  						50.7314
  					],
  					[
  						21.5337,
  						50.7128
  					],
  					[
  						21.5419,
  						50.6998
  					],
  					[
  						21.517,
  						50.6799
  					],
  					[
  						21.4898,
  						50.7054
  					],
  					[
  						21.4164,
  						50.7042
  					],
  					[
  						21.3502,
  						50.6835
  					],
  					[
  						21.2838,
  						50.6949
  					],
  					[
  						21.2683,
  						50.6852
  					],
  					[
  						21.1976,
  						50.7019
  					],
  					[
  						21.1458,
  						50.6988
  					],
  					[
  						21.1373,
  						50.7205
  					],
  					[
  						21.1697,
  						50.7497
  					],
  					[
  						21.1357,
  						50.7643
  					],
  					[
  						21.1462,
  						50.8115
  					],
  					[
  						21.1329,
  						50.8222
  					],
  					[
  						21.1883,
  						50.8263
  					],
  					[
  						21.2327,
  						50.8193
  					],
  					[
  						21.2573,
  						50.8443
  					],
  					[
  						21.321,
  						50.8638
  					],
  					[
  						21.3606,
  						50.8709
  					],
  					[
  						21.3685,
  						50.8827
  					],
  					[
  						21.4035,
  						50.8862
  					],
  					[
  						21.4598,
  						50.8755
  					],
  					[
  						21.4568,
  						50.8486
  					],
  					[
  						21.4969,
  						50.8267
  					],
  					[
  						21.5464,
  						50.8512
  					],
  					[
  						21.5704,
  						50.853
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 267,
  			name: "powiat Słupsk",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.031,
  						54.4246
  					],
  					[
  						17.0243,
  						54.4457
  					],
  					[
  						16.9517,
  						54.4585
  					],
  					[
  						16.9782,
  						54.4851
  					],
  					[
  						17.0061,
  						54.496
  					],
  					[
  						17.0436,
  						54.4957
  					],
  					[
  						17.0814,
  						54.4865
  					],
  					[
  						17.0808,
  						54.4706
  					],
  					[
  						17.105,
  						54.4541
  					],
  					[
  						17.0429,
  						54.4399
  					],
  					[
  						17.031,
  						54.4246
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 268,
  			name: "powiat pińczowski",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.5843,
  						50.6679
  					],
  					[
  						20.6266,
  						50.6703
  					],
  					[
  						20.6479,
  						50.661
  					],
  					[
  						20.6421,
  						50.64
  					],
  					[
  						20.6588,
  						50.6152
  					],
  					[
  						20.6585,
  						50.5917
  					],
  					[
  						20.6309,
  						50.587
  					],
  					[
  						20.6257,
  						50.5706
  					],
  					[
  						20.6411,
  						50.5571
  					],
  					[
  						20.6844,
  						50.5463
  					],
  					[
  						20.6756,
  						50.5278
  					],
  					[
  						20.6056,
  						50.5226
  					],
  					[
  						20.6439,
  						50.4951
  					],
  					[
  						20.6168,
  						50.4524
  					],
  					[
  						20.6502,
  						50.4482
  					],
  					[
  						20.6317,
  						50.4097
  					],
  					[
  						20.6515,
  						50.3746
  					],
  					[
  						20.6043,
  						50.3562
  					],
  					[
  						20.6265,
  						50.3313
  					],
  					[
  						20.5795,
  						50.3296
  					],
  					[
  						20.543,
  						50.3387
  					],
  					[
  						20.5296,
  						50.3642
  					],
  					[
  						20.5103,
  						50.3761
  					],
  					[
  						20.4867,
  						50.3908
  					],
  					[
  						20.4687,
  						50.369
  					],
  					[
  						20.4321,
  						50.3542
  					],
  					[
  						20.3878,
  						50.3595
  					],
  					[
  						20.3638,
  						50.349
  					],
  					[
  						20.352,
  						50.3376
  					],
  					[
  						20.3053,
  						50.3359
  					],
  					[
  						20.3269,
  						50.3515
  					],
  					[
  						20.3209,
  						50.3845
  					],
  					[
  						20.3058,
  						50.389
  					],
  					[
  						20.2899,
  						50.4191
  					],
  					[
  						20.2606,
  						50.4415
  					],
  					[
  						20.2729,
  						50.4699
  					],
  					[
  						20.3223,
  						50.4496
  					],
  					[
  						20.3334,
  						50.4705
  					],
  					[
  						20.3621,
  						50.4743
  					],
  					[
  						20.3694,
  						50.4885
  					],
  					[
  						20.3418,
  						50.4977
  					],
  					[
  						20.3435,
  						50.5291
  					],
  					[
  						20.3658,
  						50.5476
  					],
  					[
  						20.4161,
  						50.541
  					],
  					[
  						20.4583,
  						50.5297
  					],
  					[
  						20.4739,
  						50.5585
  					],
  					[
  						20.4991,
  						50.5674
  					],
  					[
  						20.514,
  						50.5964
  					],
  					[
  						20.4982,
  						50.6041
  					],
  					[
  						20.5088,
  						50.638
  					],
  					[
  						20.5538,
  						50.6414
  					],
  					[
  						20.5843,
  						50.6679
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 269,
  			name: "powiat koszaliński",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.7317,
  						54.2319
  					],
  					[
  						16.713,
  						54.2126
  					],
  					[
  						16.7327,
  						54.2037
  					],
  					[
  						16.7341,
  						54.1767
  					],
  					[
  						16.7736,
  						54.1535
  					],
  					[
  						16.779,
  						54.1192
  					],
  					[
  						16.8046,
  						54.1161
  					],
  					[
  						16.7933,
  						54.0845
  					],
  					[
  						16.8126,
  						54.0731
  					],
  					[
  						16.7848,
  						54.0201
  					],
  					[
  						16.8014,
  						54.004
  					],
  					[
  						16.7928,
  						53.9856
  					],
  					[
  						16.7583,
  						53.9887
  					],
  					[
  						16.7623,
  						53.9662
  					],
  					[
  						16.7189,
  						53.9534
  					],
  					[
  						16.7101,
  						53.9188
  					],
  					[
  						16.7348,
  						53.8911
  					],
  					[
  						16.6817,
  						53.8897
  					],
  					[
  						16.6635,
  						53.9092
  					],
  					[
  						16.6341,
  						53.8995
  					],
  					[
  						16.594,
  						53.9039
  					],
  					[
  						16.5798,
  						53.8867
  					],
  					[
  						16.5411,
  						53.8886
  					],
  					[
  						16.5255,
  						53.9023
  					],
  					[
  						16.4871,
  						53.9082
  					],
  					[
  						16.4758,
  						53.9084
  					],
  					[
  						16.4647,
  						53.9079
  					],
  					[
  						16.4405,
  						53.9042
  					],
  					[
  						16.4418,
  						53.9071
  					],
  					[
  						16.4443,
  						53.9185
  					],
  					[
  						16.4438,
  						53.9494
  					],
  					[
  						16.4308,
  						53.9671
  					],
  					[
  						16.3692,
  						53.9855
  					],
  					[
  						16.3278,
  						53.9842
  					],
  					[
  						16.3488,
  						54.012
  					],
  					[
  						16.2451,
  						54.022
  					],
  					[
  						16.1688,
  						54.0436
  					],
  					[
  						16.1224,
  						54.058
  					],
  					[
  						16.0834,
  						54.1066
  					],
  					[
  						16.0426,
  						54.0924
  					],
  					[
  						16.0026,
  						54.0734
  					],
  					[
  						15.9105,
  						54.0766
  					],
  					[
  						15.9095,
  						54.089
  					],
  					[
  						15.9359,
  						54.1063
  					],
  					[
  						15.9128,
  						54.126
  					],
  					[
  						15.9171,
  						54.1391
  					],
  					[
  						15.8802,
  						54.1457
  					],
  					[
  						15.8472,
  						54.1472
  					],
  					[
  						15.8196,
  						54.1667
  					],
  					[
  						15.7925,
  						54.2041
  					],
  					[
  						15.792,
  						54.2272
  					],
  					[
  						15.8483,
  						54.2411
  					],
  					[
  						15.974,
  						54.2513
  					],
  					[
  						16.0293,
  						54.2585
  					],
  					[
  						16.1024,
  						54.2744
  					],
  					[
  						16.1546,
  						54.2922
  					],
  					[
  						16.2142,
  						54.3207
  					],
  					[
  						16.2516,
  						54.3148
  					],
  					[
  						16.2762,
  						54.3337
  					],
  					[
  						16.319,
  						54.3211
  					],
  					[
  						16.3356,
  						54.2873
  					],
  					[
  						16.3947,
  						54.2923
  					],
  					[
  						16.4121,
  						54.2809
  					],
  					[
  						16.3966,
  						54.2549
  					],
  					[
  						16.4438,
  						54.2501
  					],
  					[
  						16.4136,
  						54.2176
  					],
  					[
  						16.438,
  						54.2126
  					],
  					[
  						16.4733,
  						54.2228
  					],
  					[
  						16.4956,
  						54.2391
  					],
  					[
  						16.529,
  						54.2378
  					],
  					[
  						16.57,
  						54.2201
  					],
  					[
  						16.5466,
  						54.1909
  					],
  					[
  						16.6056,
  						54.1931
  					],
  					[
  						16.6163,
  						54.223
  					],
  					[
  						16.6796,
  						54.2134
  					],
  					[
  						16.7105,
  						54.242
  					],
  					[
  						16.7317,
  						54.2319
  					]
  				],
  				[
  					[
  						16.3206,
  						54.2057
  					],
  					[
  						16.2958,
  						54.2198
  					],
  					[
  						16.2146,
  						54.227
  					],
  					[
  						16.19,
  						54.2742
  					],
  					[
  						16.1285,
  						54.2419
  					],
  					[
  						16.1099,
  						54.2217
  					],
  					[
  						16.1375,
  						54.1775
  					],
  					[
  						16.1769,
  						54.1564
  					],
  					[
  						16.1828,
  						54.1389
  					],
  					[
  						16.2188,
  						54.1419
  					],
  					[
  						16.2085,
  						54.1655
  					],
  					[
  						16.2626,
  						54.1585
  					],
  					[
  						16.2923,
  						54.173
  					],
  					[
  						16.3206,
  						54.2057
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 270,
  			name: "powiat bielski",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.0932,
  						49.9567
  					],
  					[
  						19.1186,
  						49.9389
  					],
  					[
  						19.1617,
  						49.9395
  					],
  					[
  						19.1849,
  						49.9501
  					],
  					[
  						19.1945,
  						49.886
  					],
  					[
  						19.1571,
  						49.8651
  					],
  					[
  						19.1709,
  						49.853
  					],
  					[
  						19.2026,
  						49.8716
  					],
  					[
  						19.2709,
  						49.8607
  					],
  					[
  						19.29,
  						49.8506
  					],
  					[
  						19.2866,
  						49.8164
  					],
  					[
  						19.3168,
  						49.7779
  					],
  					[
  						19.2719,
  						49.7757
  					],
  					[
  						19.249,
  						49.7916
  					],
  					[
  						19.2201,
  						49.7888
  					],
  					[
  						19.1856,
  						49.8288
  					],
  					[
  						19.142,
  						49.8146
  					],
  					[
  						19.1468,
  						49.8016
  					],
  					[
  						19.1275,
  						49.7786
  					],
  					[
  						19.1485,
  						49.7677
  					],
  					[
  						19.1216,
  						49.7435
  					],
  					[
  						19.1174,
  						49.7072
  					],
  					[
  						19.0755,
  						49.7059
  					],
  					[
  						19.0753,
  						49.7058
  					],
  					[
  						19.0597,
  						49.7056
  					],
  					[
  						19.0069,
  						49.6721
  					],
  					[
  						19.0015,
  						49.6566
  					],
  					[
  						18.9595,
  						49.6665
  					],
  					[
  						18.9545,
  						49.6789
  					],
  					[
  						18.9939,
  						49.7104
  					],
  					[
  						18.9864,
  						49.7367
  					],
  					[
  						19.0025,
  						49.7606
  					],
  					[
  						19.0242,
  						49.7667
  					],
  					[
  						19.063,
  						49.7633
  					],
  					[
  						19.111,
  						49.7971
  					],
  					[
  						19.1019,
  						49.807
  					],
  					[
  						19.1191,
  						49.8288
  					],
  					[
  						19.1132,
  						49.8759
  					],
  					[
  						19.0664,
  						49.8752
  					],
  					[
  						19.0115,
  						49.8651
  					],
  					[
  						18.9959,
  						49.8438
  					],
  					[
  						18.9514,
  						49.8155
  					],
  					[
  						18.9745,
  						49.7924
  					],
  					[
  						18.9523,
  						49.7647
  					],
  					[
  						18.9546,
  						49.7442
  					],
  					[
  						18.9152,
  						49.759
  					],
  					[
  						18.8931,
  						49.7787
  					],
  					[
  						18.8493,
  						49.8016
  					],
  					[
  						18.8485,
  						49.8031
  					],
  					[
  						18.8354,
  						49.8346
  					],
  					[
  						18.8389,
  						49.8759
  					],
  					[
  						18.8808,
  						49.887
  					],
  					[
  						18.8906,
  						49.9119
  					],
  					[
  						18.9769,
  						49.9246
  					],
  					[
  						18.9768,
  						49.9246
  					],
  					[
  						18.9769,
  						49.9246
  					],
  					[
  						18.9768,
  						49.9246
  					],
  					[
  						19.0054,
  						49.9443
  					],
  					[
  						19.0516,
  						49.9564
  					],
  					[
  						19.0932,
  						49.9567
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 271,
  			name: "powiat będziński",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "MultiPolygon",
  			coordinates: [
  				[
  					[
  						[
  							19.1336,
  							50.5225
  						],
  						[
  							19.1827,
  							50.5337
  						],
  						[
  							19.2136,
  							50.5217
  						],
  						[
  							19.247,
  							50.5235
  						],
  						[
  							19.2681,
  							50.5364
  						],
  						[
  							19.3067,
  							50.5213
  						],
  						[
  							19.2898,
  							50.5155
  						],
  						[
  							19.2856,
  							50.5105
  						],
  						[
  							19.2711,
  							50.4961
  						],
  						[
  							19.2706,
  							50.4933
  						],
  						[
  							19.2841,
  							50.4518
  						],
  						[
  							19.2932,
  							50.4332
  						],
  						[
  							19.2498,
  							50.4369
  						],
  						[
  							19.2265,
  							50.4194
  						],
  						[
  							19.2002,
  							50.3843
  						],
  						[
  							19.1976,
  							50.3943
  						],
  						[
  							19.1828,
  							50.3864
  						],
  						[
  							19.1896,
  							50.3546
  						],
  						[
  							19.155,
  							50.3321
  						],
  						[
  							19.1656,
  							50.3133
  						],
  						[
  							19.1442,
  							50.3061
  						],
  						[
  							19.1443,
  							50.3061
  						],
  						[
  							19.1442,
  							50.3061
  						],
  						[
  							19.1443,
  							50.3061
  						],
  						[
  							19.0713,
  							50.2943
  						],
  						[
  							19.0611,
  							50.2954
  						],
  						[
  							19.0457,
  							50.3008
  						],
  						[
  							19.0543,
  							50.3387
  						],
  						[
  							19.0415,
  							50.3488
  						],
  						[
  							18.9976,
  							50.3676
  						],
  						[
  							18.9634,
  							50.3743
  						],
  						[
  							18.981,
  							50.3929
  						],
  						[
  							18.9708,
  							50.4132
  						],
  						[
  							18.9887,
  							50.4308
  						],
  						[
  							19.0117,
  							50.4292
  						],
  						[
  							19.0238,
  							50.4488
  						],
  						[
  							19.0425,
  							50.4526
  						],
  						[
  							19.0887,
  							50.4571
  						],
  						[
  							19.1345,
  							50.5043
  						],
  						[
  							19.1336,
  							50.5225
  						]
  					]
  				],
  				[
  					[
  						[
  							19.3119,
  							50.2583
  						],
  						[
  							19.3114,
  							50.275
  						],
  						[
  							19.2851,
  							50.2917
  						],
  						[
  							19.3394,
  							50.3062
  						],
  						[
  							19.3541,
  							50.3259
  						],
  						[
  							19.4066,
  							50.3174
  						],
  						[
  							19.4106,
  							50.3026
  						],
  						[
  							19.3816,
  							50.273
  						],
  						[
  							19.3234,
  							50.2591
  						],
  						[
  							19.3119,
  							50.2583
  						]
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 272,
  			name: "powiat wągorzewski",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.5622,
  						54.0808
  					],
  					[
  						21.5387,
  						54.0967
  					],
  					[
  						21.5342,
  						54.1289
  					],
  					[
  						21.545,
  						54.1439
  					],
  					[
  						21.5737,
  						54.1464
  					],
  					[
  						21.5779,
  						54.1631
  					],
  					[
  						21.5537,
  						54.1857
  					],
  					[
  						21.595,
  						54.1956
  					],
  					[
  						21.6023,
  						54.2201
  					],
  					[
  						21.5723,
  						54.2177
  					],
  					[
  						21.5644,
  						54.2347
  					],
  					[
  						21.5379,
  						54.2435
  					],
  					[
  						21.5382,
  						54.2621
  					],
  					[
  						21.5645,
  						54.2779
  					],
  					[
  						21.5593,
  						54.3225
  					],
  					[
  						21.7962,
  						54.3318
  					],
  					[
  						21.938,
  						54.3333
  					],
  					[
  						21.963,
  						54.3062
  					],
  					[
  						21.9621,
  						54.2845
  					],
  					[
  						21.9845,
  						54.2602
  					],
  					[
  						21.9688,
  						54.2289
  					],
  					[
  						21.9942,
  						54.1957
  					],
  					[
  						21.9975,
  						54.1778
  					],
  					[
  						22.0227,
  						54.1725
  					],
  					[
  						22.0251,
  						54.1391
  					],
  					[
  						21.9376,
  						54.1287
  					],
  					[
  						21.9291,
  						54.1139
  					],
  					[
  						21.8874,
  						54.0872
  					],
  					[
  						21.8383,
  						54.0998
  					],
  					[
  						21.8167,
  						54.0918
  					],
  					[
  						21.7685,
  						54.1004
  					],
  					[
  						21.7227,
  						54.0971
  					],
  					[
  						21.6722,
  						54.1025
  					],
  					[
  						21.6497,
  						54.114
  					],
  					[
  						21.6005,
  						54.1127
  					],
  					[
  						21.5622,
  						54.0808
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 273,
  			name: "powiat bieruńsko-lędziński",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.0816,
  						50.1313
  					],
  					[
  						19.1091,
  						50.1599
  					],
  					[
  						19.11,
  						50.1609
  					],
  					[
  						19.13,
  						50.153
  					],
  					[
  						19.169,
  						50.1544
  					],
  					[
  						19.1855,
  						50.1694
  					],
  					[
  						19.2418,
  						50.1613
  					],
  					[
  						19.2538,
  						50.1342
  					],
  					[
  						19.2133,
  						50.0741
  					],
  					[
  						19.1445,
  						50.0394
  					],
  					[
  						19.1078,
  						50.0348
  					],
  					[
  						19.0867,
  						50.0227
  					],
  					[
  						19.0534,
  						50.0274
  					],
  					[
  						19.0371,
  						50.0464
  					],
  					[
  						19.0361,
  						50.0772
  					],
  					[
  						19.0513,
  						50.0823
  					],
  					[
  						19.0759,
  						50.1113
  					],
  					[
  						19.0816,
  						50.1313
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 274,
  			name: "powiat policki",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						14.2739,
  						53.7852
  					],
  					[
  						14.3814,
  						53.7686
  					],
  					[
  						14.498,
  						53.7035
  					],
  					[
  						14.523,
  						53.6743
  					],
  					[
  						14.5606,
  						53.6502
  					],
  					[
  						14.6093,
  						53.5541
  					],
  					[
  						14.6353,
  						53.5339
  					],
  					[
  						14.5855,
  						53.5329
  					],
  					[
  						14.5844,
  						53.5052
  					],
  					[
  						14.5626,
  						53.4973
  					],
  					[
  						14.4645,
  						53.497
  					],
  					[
  						14.4439,
  						53.4848
  					],
  					[
  						14.47,
  						53.4614
  					],
  					[
  						14.4751,
  						53.4391
  					],
  					[
  						14.471,
  						53.4178
  					],
  					[
  						14.4918,
  						53.3936
  					],
  					[
  						14.5743,
  						53.3714
  					],
  					[
  						14.5545,
  						53.3545
  					],
  					[
  						14.5455,
  						53.3595
  					],
  					[
  						14.539,
  						53.3481
  					],
  					[
  						14.5035,
  						53.3358
  					],
  					[
  						14.4713,
  						53.3153
  					],
  					[
  						14.4452,
  						53.2744
  					],
  					[
  						14.4212,
  						53.2761
  					],
  					[
  						14.4154,
  						53.3244
  					],
  					[
  						14.3733,
  						53.4089
  					],
  					[
  						14.3713,
  						53.4564
  					],
  					[
  						14.3581,
  						53.4573
  					],
  					[
  						14.3507,
  						53.496
  					],
  					[
  						14.3269,
  						53.5038
  					],
  					[
  						14.3026,
  						53.5534
  					],
  					[
  						14.3139,
  						53.5651
  					],
  					[
  						14.3169,
  						53.6181
  					],
  					[
  						14.2839,
  						53.6344
  					],
  					[
  						14.2823,
  						53.6743
  					],
  					[
  						14.2668,
  						53.6987
  					],
  					[
  						14.2836,
  						53.7723
  					],
  					[
  						14.2739,
  						53.7852
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 275,
  			name: "powiat polkowicki",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.714,
  						51.5174
  					],
  					[
  						15.713,
  						51.5428
  					],
  					[
  						15.7695,
  						51.5696
  					],
  					[
  						15.8239,
  						51.5738
  					],
  					[
  						15.8158,
  						51.6029
  					],
  					[
  						15.834,
  						51.6222
  					],
  					[
  						15.8304,
  						51.6368
  					],
  					[
  						15.8526,
  						51.6495
  					],
  					[
  						15.8497,
  						51.6652
  					],
  					[
  						15.9125,
  						51.6717
  					],
  					[
  						15.9331,
  						51.6631
  					],
  					[
  						15.9407,
  						51.641
  					],
  					[
  						15.9625,
  						51.6385
  					],
  					[
  						15.9802,
  						51.6108
  					],
  					[
  						16.0179,
  						51.6032
  					],
  					[
  						15.9851,
  						51.5613
  					],
  					[
  						16.0026,
  						51.5379
  					],
  					[
  						16.0332,
  						51.5598
  					],
  					[
  						16.0697,
  						51.5562
  					],
  					[
  						16.0985,
  						51.5908
  					],
  					[
  						16.0858,
  						51.6105
  					],
  					[
  						16.1305,
  						51.6092
  					],
  					[
  						16.1421,
  						51.6169
  					],
  					[
  						16.1929,
  						51.6167
  					],
  					[
  						16.2158,
  						51.6335
  					],
  					[
  						16.2384,
  						51.6168
  					],
  					[
  						16.3037,
  						51.613
  					],
  					[
  						16.3277,
  						51.5984
  					],
  					[
  						16.3193,
  						51.5735
  					],
  					[
  						16.2684,
  						51.566
  					],
  					[
  						16.2435,
  						51.5221
  					],
  					[
  						16.2102,
  						51.5246
  					],
  					[
  						16.1795,
  						51.4995
  					],
  					[
  						16.1971,
  						51.4849
  					],
  					[
  						16.1974,
  						51.4853
  					],
  					[
  						16.1996,
  						51.4852
  					],
  					[
  						16.1859,
  						51.4572
  					],
  					[
  						16.0887,
  						51.4645
  					],
  					[
  						16.0714,
  						51.4378
  					],
  					[
  						16.1086,
  						51.4005
  					],
  					[
  						16.0713,
  						51.3551
  					],
  					[
  						16.0799,
  						51.3377
  					],
  					[
  						16.0138,
  						51.3275
  					],
  					[
  						15.9537,
  						51.3435
  					],
  					[
  						15.8403,
  						51.3836
  					],
  					[
  						15.8445,
  						51.3948
  					],
  					[
  						15.8169,
  						51.4084
  					],
  					[
  						15.8222,
  						51.4507
  					],
  					[
  						15.8514,
  						51.4544
  					],
  					[
  						15.8075,
  						51.5026
  					],
  					[
  						15.714,
  						51.5174
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 276,
  			name: "powiat Jastrzębie-Zdrój",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.611,
  						50.0184
  					],
  					[
  						18.6515,
  						50.0208
  					],
  					[
  						18.6797,
  						50.0048
  					],
  					[
  						18.6678,
  						50.0095
  					],
  					[
  						18.6519,
  						49.9585
  					],
  					[
  						18.6821,
  						49.958
  					],
  					[
  						18.6821,
  						49.9377
  					],
  					[
  						18.6575,
  						49.9213
  					],
  					[
  						18.6316,
  						49.921
  					],
  					[
  						18.6296,
  						49.8999
  					],
  					[
  						18.5757,
  						49.9104
  					],
  					[
  						18.5745,
  						49.915
  					],
  					[
  						18.5396,
  						49.9257
  					],
  					[
  						18.5376,
  						49.9466
  					],
  					[
  						18.5739,
  						49.9762
  					],
  					[
  						18.6117,
  						49.9787
  					],
  					[
  						18.59,
  						49.9989
  					],
  					[
  						18.611,
  						50.0184
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 277,
  			name: "powiat tatrzański",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.1547,
  						49.3861
  					],
  					[
  						20.1551,
  						49.385
  					],
  					[
  						20.1901,
  						49.3377
  					],
  					[
  						20.1758,
  						49.3141
  					],
  					[
  						20.1329,
  						49.3006
  					],
  					[
  						20.1287,
  						49.2771
  					],
  					[
  						20.1022,
  						49.2529
  					],
  					[
  						20.1016,
  						49.2227
  					],
  					[
  						20.0872,
  						49.2075
  					],
  					[
  						20.0878,
  						49.1836
  					],
  					[
  						20.0756,
  						49.1787
  					],
  					[
  						20.0205,
  						49.2015
  					],
  					[
  						20.0086,
  						49.2201
  					],
  					[
  						19.9712,
  						49.23
  					],
  					[
  						19.9193,
  						49.2358
  					],
  					[
  						19.9019,
  						49.213
  					],
  					[
  						19.8703,
  						49.1985
  					],
  					[
  						19.8406,
  						49.1937
  					],
  					[
  						19.8075,
  						49.2057
  					],
  					[
  						19.795,
  						49.1984
  					],
  					[
  						19.7631,
  						49.2076
  					],
  					[
  						19.7663,
  						49.2346
  					],
  					[
  						19.7925,
  						49.268
  					],
  					[
  						19.8228,
  						49.2768
  					],
  					[
  						19.7926,
  						49.3026
  					],
  					[
  						19.805,
  						49.3227
  					],
  					[
  						19.7953,
  						49.3475
  					],
  					[
  						19.8438,
  						49.3541
  					],
  					[
  						19.8542,
  						49.3439
  					],
  					[
  						19.8998,
  						49.3398
  					],
  					[
  						19.9415,
  						49.3539
  					],
  					[
  						19.9429,
  						49.3823
  					],
  					[
  						19.9708,
  						49.3745
  					],
  					[
  						20.0441,
  						49.4059
  					],
  					[
  						20.0514,
  						49.4209
  					],
  					[
  						20.0559,
  						49.4251
  					],
  					[
  						20.0559,
  						49.4248
  					],
  					[
  						20.116,
  						49.4138
  					],
  					[
  						20.1127,
  						49.3987
  					],
  					[
  						20.1547,
  						49.3861
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 278,
  			name: "powiat nowotarski",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.9389,
  						49.62
  					],
  					[
  						19.956,
  						49.6406
  					],
  					[
  						19.9468,
  						49.6585
  					],
  					[
  						19.9919,
  						49.6535
  					],
  					[
  						20.0041,
  						49.6346
  					],
  					[
  						19.9994,
  						49.6133
  					],
  					[
  						20.0252,
  						49.5775
  					],
  					[
  						20.046,
  						49.5593
  					],
  					[
  						20.0673,
  						49.5601
  					],
  					[
  						20.1143,
  						49.5451
  					],
  					[
  						20.1503,
  						49.5439
  					],
  					[
  						20.2136,
  						49.5509
  					],
  					[
  						20.2618,
  						49.5682
  					],
  					[
  						20.3123,
  						49.5664
  					],
  					[
  						20.3393,
  						49.5389
  					],
  					[
  						20.362,
  						49.5341
  					],
  					[
  						20.3912,
  						49.5309
  					],
  					[
  						20.4085,
  						49.5164
  					],
  					[
  						20.4447,
  						49.5135
  					],
  					[
  						20.4472,
  						49.4997
  					],
  					[
  						20.4807,
  						49.4649
  					],
  					[
  						20.4987,
  						49.4726
  					],
  					[
  						20.5368,
  						49.473
  					],
  					[
  						20.5774,
  						49.4653
  					],
  					[
  						20.607,
  						49.4484
  					],
  					[
  						20.6149,
  						49.4178
  					],
  					[
  						20.6002,
  						49.3883
  					],
  					[
  						20.5577,
  						49.3781
  					],
  					[
  						20.5099,
  						49.3934
  					],
  					[
  						20.5034,
  						49.404
  					],
  					[
  						20.4642,
  						49.416
  					],
  					[
  						20.4048,
  						49.3923
  					],
  					[
  						20.3824,
  						49.391
  					],
  					[
  						20.325,
  						49.403
  					],
  					[
  						20.3243,
  						49.3906
  					],
  					[
  						20.3229,
  						49.353
  					],
  					[
  						20.2509,
  						49.3505
  					],
  					[
  						20.1901,
  						49.3377
  					],
  					[
  						20.1551,
  						49.385
  					],
  					[
  						20.1547,
  						49.3861
  					],
  					[
  						20.1127,
  						49.3987
  					],
  					[
  						20.116,
  						49.4138
  					],
  					[
  						20.0559,
  						49.4248
  					],
  					[
  						20.0559,
  						49.4251
  					],
  					[
  						20.0514,
  						49.4209
  					],
  					[
  						20.0441,
  						49.4059
  					],
  					[
  						19.9708,
  						49.3745
  					],
  					[
  						19.9429,
  						49.3823
  					],
  					[
  						19.9415,
  						49.3539
  					],
  					[
  						19.8998,
  						49.3398
  					],
  					[
  						19.8542,
  						49.3439
  					],
  					[
  						19.8438,
  						49.3541
  					],
  					[
  						19.7953,
  						49.3475
  					],
  					[
  						19.7906,
  						49.4107
  					],
  					[
  						19.7463,
  						49.4079
  					],
  					[
  						19.7296,
  						49.3917
  					],
  					[
  						19.6346,
  						49.4125
  					],
  					[
  						19.6474,
  						49.4332
  					],
  					[
  						19.6475,
  						49.4332
  					],
  					[
  						19.6474,
  						49.4332
  					],
  					[
  						19.6475,
  						49.4332
  					],
  					[
  						19.5816,
  						49.458
  					],
  					[
  						19.5816,
  						49.4583
  					],
  					[
  						19.5812,
  						49.4595
  					],
  					[
  						19.5787,
  						49.4624
  					],
  					[
  						19.5752,
  						49.464
  					],
  					[
  						19.5749,
  						49.4642
  					],
  					[
  						19.5732,
  						49.466
  					],
  					[
  						19.5731,
  						49.4667
  					],
  					[
  						19.572,
  						49.4677
  					],
  					[
  						19.5705,
  						49.469
  					],
  					[
  						19.5691,
  						49.4701
  					],
  					[
  						19.5689,
  						49.4702
  					],
  					[
  						19.5574,
  						49.4869
  					],
  					[
  						19.5571,
  						49.4873
  					],
  					[
  						19.5541,
  						49.4897
  					],
  					[
  						19.554,
  						49.4897
  					],
  					[
  						19.5541,
  						49.4897
  					],
  					[
  						19.554,
  						49.4897
  					],
  					[
  						19.5517,
  						49.5074
  					],
  					[
  						19.5304,
  						49.5358
  					],
  					[
  						19.5293,
  						49.573
  					],
  					[
  						19.592,
  						49.5929
  					],
  					[
  						19.5903,
  						49.6225
  					],
  					[
  						19.6193,
  						49.6237
  					],
  					[
  						19.6765,
  						49.5756
  					],
  					[
  						19.6953,
  						49.5788
  					],
  					[
  						19.7528,
  						49.5718
  					],
  					[
  						19.7618,
  						49.5889
  					],
  					[
  						19.767,
  						49.5904
  					],
  					[
  						19.8254,
  						49.5922
  					],
  					[
  						19.8627,
  						49.5993
  					],
  					[
  						19.8719,
  						49.6334
  					],
  					[
  						19.8937,
  						49.6376
  					],
  					[
  						19.9389,
  						49.62
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 279,
  			name: "powiat lwówecki",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.6978,
  						51.1593
  					],
  					[
  						15.7272,
  						51.1396
  					],
  					[
  						15.7194,
  						51.1082
  					],
  					[
  						15.7315,
  						51.0949
  					],
  					[
  						15.7629,
  						51.054
  					],
  					[
  						15.7605,
  						51.0251
  					],
  					[
  						15.7377,
  						51.0114
  					],
  					[
  						15.6774,
  						50.9848
  					],
  					[
  						15.6978,
  						50.9644
  					],
  					[
  						15.6381,
  						50.9492
  					],
  					[
  						15.5902,
  						50.9491
  					],
  					[
  						15.5686,
  						50.9396
  					],
  					[
  						15.5221,
  						50.9391
  					],
  					[
  						15.4867,
  						50.9118
  					],
  					[
  						15.5011,
  						50.8891
  					],
  					[
  						15.4877,
  						50.8786
  					],
  					[
  						15.4562,
  						50.8848
  					],
  					[
  						15.4392,
  						50.8523
  					],
  					[
  						15.4134,
  						50.853
  					],
  					[
  						15.4132,
  						50.833
  					],
  					[
  						15.3682,
  						50.836
  					],
  					[
  						15.3522,
  						50.8515
  					],
  					[
  						15.3098,
  						50.8614
  					],
  					[
  						15.277,
  						50.8946
  					],
  					[
  						15.3033,
  						50.912
  					],
  					[
  						15.3378,
  						50.9015
  					],
  					[
  						15.3529,
  						50.9219
  					],
  					[
  						15.3316,
  						50.9602
  					],
  					[
  						15.3058,
  						50.9864
  					],
  					[
  						15.3869,
  						51.0005
  					],
  					[
  						15.3777,
  						51.0239
  					],
  					[
  						15.4078,
  						51.0423
  					],
  					[
  						15.3959,
  						51.0519
  					],
  					[
  						15.4155,
  						51.0748
  					],
  					[
  						15.4075,
  						51.1003
  					],
  					[
  						15.4283,
  						51.1202
  					],
  					[
  						15.4437,
  						51.1124
  					],
  					[
  						15.4795,
  						51.136
  					],
  					[
  						15.4876,
  						51.1494
  					],
  					[
  						15.4785,
  						51.1752
  					],
  					[
  						15.5341,
  						51.1878
  					],
  					[
  						15.5877,
  						51.1792
  					],
  					[
  						15.633,
  						51.1855
  					],
  					[
  						15.6978,
  						51.1593
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 280,
  			name: "powiat legionowski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.0852,
  						52.3374
  					],
  					[
  						21.0607,
  						52.3627
  					],
  					[
  						21.0057,
  						52.3641
  					],
  					[
  						20.9713,
  						52.359
  					],
  					[
  						20.9436,
  						52.3663
  					],
  					[
  						20.9151,
  						52.354
  					],
  					[
  						20.8968,
  						52.3746
  					],
  					[
  						20.8205,
  						52.3789
  					],
  					[
  						20.7617,
  						52.4045
  					],
  					[
  						20.7631,
  						52.4686
  					],
  					[
  						20.8187,
  						52.4849
  					],
  					[
  						20.8919,
  						52.4849
  					],
  					[
  						20.9002,
  						52.5192
  					],
  					[
  						20.919,
  						52.5288
  					],
  					[
  						20.9305,
  						52.5589
  					],
  					[
  						20.9708,
  						52.5574
  					],
  					[
  						20.977,
  						52.5384
  					],
  					[
  						21.0348,
  						52.5346
  					],
  					[
  						21.0602,
  						52.5479
  					],
  					[
  						21.1218,
  						52.5536
  					],
  					[
  						21.1196,
  						52.5315
  					],
  					[
  						21.1428,
  						52.519
  					],
  					[
  						21.0802,
  						52.5078
  					],
  					[
  						21.0646,
  						52.4777
  					],
  					[
  						21.1088,
  						52.4562
  					],
  					[
  						21.1,
  						52.4342
  					],
  					[
  						21.1208,
  						52.4112
  					],
  					[
  						21.0961,
  						52.4018
  					],
  					[
  						21.0978,
  						52.3832
  					],
  					[
  						21.1167,
  						52.3684
  					],
  					[
  						21.0852,
  						52.3374
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 281,
  			name: "powiat olecki",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.4815,
  						54.2024
  					],
  					[
  						22.5191,
  						54.1677
  					],
  					[
  						22.5369,
  						54.1604
  					],
  					[
  						22.5471,
  						54.1377
  					],
  					[
  						22.6019,
  						54.1365
  					],
  					[
  						22.6355,
  						54.093
  					],
  					[
  						22.6038,
  						54.0819
  					],
  					[
  						22.6008,
  						54.0519
  					],
  					[
  						22.6286,
  						54.0475
  					],
  					[
  						22.6707,
  						54.0289
  					],
  					[
  						22.691,
  						54.0004
  					],
  					[
  						22.694,
  						53.9773
  					],
  					[
  						22.7237,
  						53.9526
  					],
  					[
  						22.6655,
  						53.9484
  					],
  					[
  						22.6372,
  						53.9397
  					],
  					[
  						22.6268,
  						53.921
  					],
  					[
  						22.5947,
  						53.9026
  					],
  					[
  						22.4898,
  						53.8912
  					],
  					[
  						22.4396,
  						53.9043
  					],
  					[
  						22.4165,
  						53.9377
  					],
  					[
  						22.3557,
  						53.9386
  					],
  					[
  						22.3311,
  						53.929
  					],
  					[
  						22.2874,
  						53.9547
  					],
  					[
  						22.2772,
  						53.941
  					],
  					[
  						22.235,
  						53.9567
  					],
  					[
  						22.2434,
  						53.9773
  					],
  					[
  						22.206,
  						54.0024
  					],
  					[
  						22.1659,
  						54.0038
  					],
  					[
  						22.1514,
  						54.0349
  					],
  					[
  						22.1877,
  						54.0379
  					],
  					[
  						22.2014,
  						54.0602
  					],
  					[
  						22.1829,
  						54.0847
  					],
  					[
  						22.1102,
  						54.1335
  					],
  					[
  						22.1366,
  						54.1397
  					],
  					[
  						22.1575,
  						54.1788
  					],
  					[
  						22.1462,
  						54.1815
  					],
  					[
  						22.1726,
  						54.1977
  					],
  					[
  						22.2102,
  						54.1809
  					],
  					[
  						22.2629,
  						54.1678
  					],
  					[
  						22.297,
  						54.1922
  					],
  					[
  						22.3559,
  						54.1837
  					],
  					[
  						22.3691,
  						54.1977
  					],
  					[
  						22.4513,
  						54.2093
  					],
  					[
  						22.4815,
  						54.2024
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 282,
  			name: "powiat tomaszowski",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.9707,
  						51.4312
  					],
  					[
  						19.9264,
  						51.4242
  					],
  					[
  						19.9597,
  						51.4529
  					],
  					[
  						19.958,
  						51.4769
  					],
  					[
  						19.9185,
  						51.4823
  					],
  					[
  						19.922,
  						51.4948
  					],
  					[
  						19.9021,
  						51.5133
  					],
  					[
  						19.8719,
  						51.5089
  					],
  					[
  						19.8601,
  						51.5225
  					],
  					[
  						19.8891,
  						51.5439
  					],
  					[
  						19.8496,
  						51.5784
  					],
  					[
  						19.8257,
  						51.5697
  					],
  					[
  						19.8218,
  						51.543
  					],
  					[
  						19.7954,
  						51.5318
  					],
  					[
  						19.7734,
  						51.5586
  					],
  					[
  						19.7494,
  						51.5572
  					],
  					[
  						19.7134,
  						51.572
  					],
  					[
  						19.7242,
  						51.5967
  					],
  					[
  						19.7083,
  						51.6295
  					],
  					[
  						19.7208,
  						51.6387
  					],
  					[
  						19.7335,
  						51.6926
  					],
  					[
  						19.7519,
  						51.7102
  					],
  					[
  						19.7907,
  						51.708
  					],
  					[
  						19.8708,
  						51.6858
  					],
  					[
  						19.881,
  						51.6637
  					],
  					[
  						19.9129,
  						51.6644
  					],
  					[
  						19.9813,
  						51.741
  					],
  					[
  						19.985,
  						51.7433
  					],
  					[
  						20.0003,
  						51.7634
  					],
  					[
  						20.0082,
  						51.7689
  					],
  					[
  						20.0162,
  						51.7735
  					],
  					[
  						20.0606,
  						51.7626
  					],
  					[
  						20.0938,
  						51.7386
  					],
  					[
  						20.1158,
  						51.7402
  					],
  					[
  						20.116,
  						51.7309
  					],
  					[
  						20.1776,
  						51.7101
  					],
  					[
  						20.2205,
  						51.7244
  					],
  					[
  						20.232,
  						51.7128
  					],
  					[
  						20.2646,
  						51.7102
  					],
  					[
  						20.2853,
  						51.6886
  					],
  					[
  						20.2811,
  						51.6662
  					],
  					[
  						20.2945,
  						51.6553
  					],
  					[
  						20.385,
  						51.6416
  					],
  					[
  						20.4148,
  						51.634
  					],
  					[
  						20.4249,
  						51.6116
  					],
  					[
  						20.4203,
  						51.6
  					],
  					[
  						20.3668,
  						51.5764
  					],
  					[
  						20.3322,
  						51.5833
  					],
  					[
  						20.3004,
  						51.5528
  					],
  					[
  						20.252,
  						51.5233
  					],
  					[
  						20.254,
  						51.5151
  					],
  					[
  						20.1994,
  						51.4822
  					],
  					[
  						20.1918,
  						51.4631
  					],
  					[
  						20.1291,
  						51.4633
  					],
  					[
  						20.1016,
  						51.4706
  					],
  					[
  						20.0552,
  						51.4681
  					],
  					[
  						20.0613,
  						51.455
  					],
  					[
  						20.0363,
  						51.4335
  					],
  					[
  						20.0089,
  						51.4332
  					],
  					[
  						19.9707,
  						51.4312
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 283,
  			name: "powiat zambrowski",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.9761,
  						52.9788
  					],
  					[
  						22.0284,
  						52.993
  					],
  					[
  						22.0682,
  						53.0501
  					],
  					[
  						22.0572,
  						53.1066
  					],
  					[
  						22.0927,
  						53.1172
  					],
  					[
  						22.1022,
  						53.0896
  					],
  					[
  						22.0953,
  						53.0597
  					],
  					[
  						22.1114,
  						53.0511
  					],
  					[
  						22.1563,
  						53.0614
  					],
  					[
  						22.173,
  						53.0485
  					],
  					[
  						22.2191,
  						53.0402
  					],
  					[
  						22.2648,
  						53.0731
  					],
  					[
  						22.3139,
  						53.0876
  					],
  					[
  						22.3037,
  						53.1132
  					],
  					[
  						22.3173,
  						53.1283
  					],
  					[
  						22.3626,
  						53.1374
  					],
  					[
  						22.3668,
  						53.1518
  					],
  					[
  						22.4123,
  						53.1839
  					],
  					[
  						22.4441,
  						53.1881
  					],
  					[
  						22.4691,
  						53.2034
  					],
  					[
  						22.4837,
  						53.165
  					],
  					[
  						22.5052,
  						53.1408
  					],
  					[
  						22.5503,
  						53.1254
  					],
  					[
  						22.5493,
  						53.1095
  					],
  					[
  						22.594,
  						53.0941
  					],
  					[
  						22.5621,
  						53.0638
  					],
  					[
  						22.516,
  						53.0581
  					],
  					[
  						22.4772,
  						53.042
  					],
  					[
  						22.4413,
  						53.0406
  					],
  					[
  						22.4425,
  						53.0262
  					],
  					[
  						22.4043,
  						53.0071
  					],
  					[
  						22.4045,
  						52.9864
  					],
  					[
  						22.3499,
  						52.9715
  					],
  					[
  						22.3579,
  						52.9535
  					],
  					[
  						22.3451,
  						52.9354
  					],
  					[
  						22.3506,
  						52.9076
  					],
  					[
  						22.2932,
  						52.8711
  					],
  					[
  						22.2837,
  						52.879
  					],
  					[
  						22.2509,
  						52.8764
  					],
  					[
  						22.2072,
  						52.883
  					],
  					[
  						22.2097,
  						52.8545
  					],
  					[
  						22.1741,
  						52.8581
  					],
  					[
  						22.1242,
  						52.8427
  					],
  					[
  						22.1014,
  						52.862
  					],
  					[
  						22.084,
  						52.8457
  					],
  					[
  						22.0379,
  						52.8511
  					],
  					[
  						22.035,
  						52.8851
  					],
  					[
  						22.0038,
  						52.8847
  					],
  					[
  						22.0084,
  						52.9037
  					],
  					[
  						21.9917,
  						52.9196
  					],
  					[
  						22.0279,
  						52.9343
  					],
  					[
  						21.9761,
  						52.9788
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 284,
  			name: "powiat bytowski",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.2979,
  						53.8728
  					],
  					[
  						17.2643,
  						53.8903
  					],
  					[
  						17.2755,
  						53.906
  					],
  					[
  						17.2265,
  						53.9576
  					],
  					[
  						17.2317,
  						53.9817
  					],
  					[
  						17.1813,
  						53.9893
  					],
  					[
  						17.1767,
  						54.0044
  					],
  					[
  						17.1209,
  						54.0112
  					],
  					[
  						17.0976,
  						53.9887
  					],
  					[
  						17.0493,
  						53.9646
  					],
  					[
  						17.0306,
  						53.9723
  					],
  					[
  						17.0049,
  						53.9576
  					],
  					[
  						17.02,
  						53.9397
  					],
  					[
  						16.9865,
  						53.9215
  					],
  					[
  						16.9821,
  						53.9049
  					],
  					[
  						16.9647,
  						53.9046
  					],
  					[
  						16.9087,
  						53.9253
  					],
  					[
  						16.8755,
  						53.9446
  					],
  					[
  						16.8746,
  						53.977
  					],
  					[
  						16.8423,
  						53.9979
  					],
  					[
  						16.7928,
  						53.9856
  					],
  					[
  						16.8014,
  						54.004
  					],
  					[
  						16.7848,
  						54.0201
  					],
  					[
  						16.8126,
  						54.0731
  					],
  					[
  						16.7933,
  						54.0845
  					],
  					[
  						16.8756,
  						54.1146
  					],
  					[
  						16.9213,
  						54.1533
  					],
  					[
  						16.9732,
  						54.1558
  					],
  					[
  						16.9704,
  						54.1865
  					],
  					[
  						17.0083,
  						54.1885
  					],
  					[
  						17.0303,
  						54.2111
  					],
  					[
  						17.0128,
  						54.2251
  					],
  					[
  						17.0192,
  						54.2617
  					],
  					[
  						17.0163,
  						54.265
  					],
  					[
  						17.0172,
  						54.2653
  					],
  					[
  						17.0172,
  						54.2654
  					],
  					[
  						17.0172,
  						54.2653
  					],
  					[
  						17.0172,
  						54.2654
  					],
  					[
  						17.0172,
  						54.2655
  					],
  					[
  						17.0181,
  						54.2662
  					],
  					[
  						17.0226,
  						54.2689
  					],
  					[
  						17.0226,
  						54.2691
  					],
  					[
  						17.0428,
  						54.3077
  					],
  					[
  						17.0849,
  						54.3108
  					],
  					[
  						17.1139,
  						54.2888
  					],
  					[
  						17.1504,
  						54.2829
  					],
  					[
  						17.2399,
  						54.3141
  					],
  					[
  						17.283,
  						54.2969
  					],
  					[
  						17.3446,
  						54.3134
  					],
  					[
  						17.3424,
  						54.2796
  					],
  					[
  						17.3606,
  						54.2433
  					],
  					[
  						17.4258,
  						54.2698
  					],
  					[
  						17.4234,
  						54.299
  					],
  					[
  						17.437,
  						54.3216
  					],
  					[
  						17.4604,
  						54.3371
  					],
  					[
  						17.4519,
  						54.3717
  					],
  					[
  						17.4832,
  						54.3756
  					],
  					[
  						17.4854,
  						54.41
  					],
  					[
  						17.509,
  						54.4281
  					],
  					[
  						17.5405,
  						54.4332
  					],
  					[
  						17.582,
  						54.4261
  					],
  					[
  						17.6004,
  						54.4425
  					],
  					[
  						17.6527,
  						54.4085
  					],
  					[
  						17.6641,
  						54.3819
  					],
  					[
  						17.7446,
  						54.3744
  					],
  					[
  						17.7504,
  						54.3544
  					],
  					[
  						17.7416,
  						54.3493
  					],
  					[
  						17.7442,
  						54.3459
  					],
  					[
  						17.7443,
  						54.3459
  					],
  					[
  						17.7442,
  						54.3459
  					],
  					[
  						17.7443,
  						54.3459
  					],
  					[
  						17.7422,
  						54.3292
  					],
  					[
  						17.7154,
  						54.3221
  					],
  					[
  						17.7079,
  						54.3038
  					],
  					[
  						17.7241,
  						54.2625
  					],
  					[
  						17.6975,
  						54.2367
  					],
  					[
  						17.7196,
  						54.2091
  					],
  					[
  						17.8002,
  						54.1782
  					],
  					[
  						17.7696,
  						54.15
  					],
  					[
  						17.739,
  						54.1558
  					],
  					[
  						17.7215,
  						54.127
  					],
  					[
  						17.7339,
  						54.1071
  					],
  					[
  						17.697,
  						54.088
  					],
  					[
  						17.6637,
  						54.097
  					],
  					[
  						17.6697,
  						54.0684
  					],
  					[
  						17.6543,
  						54.0331
  					],
  					[
  						17.6468,
  						54.0259
  					],
  					[
  						17.582,
  						54.0313
  					],
  					[
  						17.5747,
  						53.9893
  					],
  					[
  						17.5185,
  						53.9771
  					],
  					[
  						17.4893,
  						53.9226
  					],
  					[
  						17.4434,
  						53.932
  					],
  					[
  						17.4012,
  						53.9188
  					],
  					[
  						17.3667,
  						53.94
  					],
  					[
  						17.3232,
  						53.9107
  					],
  					[
  						17.2979,
  						53.8728
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 285,
  			name: "powiat płocki",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.964,
  						52.7808
  					],
  					[
  						19.9641,
  						52.7808
  					],
  					[
  						20.0647,
  						52.7595
  					],
  					[
  						20.0598,
  						52.7367
  					],
  					[
  						20.0421,
  						52.7217
  					],
  					[
  						20.0468,
  						52.7037
  					],
  					[
  						20.0745,
  						52.694
  					],
  					[
  						20.0885,
  						52.6766
  					],
  					[
  						20.1252,
  						52.6829
  					],
  					[
  						20.1619,
  						52.6721
  					],
  					[
  						20.1668,
  						52.65
  					],
  					[
  						20.1476,
  						52.6158
  					],
  					[
  						20.1633,
  						52.5742
  					],
  					[
  						20.2006,
  						52.5472
  					],
  					[
  						20.1937,
  						52.5211
  					],
  					[
  						20.2259,
  						52.5134
  					],
  					[
  						20.2413,
  						52.4941
  					],
  					[
  						20.2364,
  						52.456
  					],
  					[
  						20.2312,
  						52.4345
  					],
  					[
  						20.251,
  						52.3881
  					],
  					[
  						20.2221,
  						52.3817
  					],
  					[
  						20.1597,
  						52.3799
  					],
  					[
  						20.1392,
  						52.3862
  					],
  					[
  						20.0912,
  						52.3793
  					],
  					[
  						20.0198,
  						52.3832
  					],
  					[
  						19.9915,
  						52.4003
  					],
  					[
  						19.9713,
  						52.3764
  					],
  					[
  						20.0023,
  						52.369
  					],
  					[
  						19.9828,
  						52.3376
  					],
  					[
  						19.9574,
  						52.3276
  					],
  					[
  						19.9417,
  						52.3418
  					],
  					[
  						19.8121,
  						52.3916
  					],
  					[
  						19.8115,
  						52.3612
  					],
  					[
  						19.7786,
  						52.3496
  					],
  					[
  						19.7542,
  						52.3522
  					],
  					[
  						19.7376,
  						52.3383
  					],
  					[
  						19.7201,
  						52.3543
  					],
  					[
  						19.689,
  						52.3554
  					],
  					[
  						19.683,
  						52.3797
  					],
  					[
  						19.6626,
  						52.3884
  					],
  					[
  						19.6638,
  						52.4121
  					],
  					[
  						19.6329,
  						52.4161
  					],
  					[
  						19.6009,
  						52.4015
  					],
  					[
  						19.5615,
  						52.4056
  					],
  					[
  						19.5631,
  						52.4428
  					],
  					[
  						19.5504,
  						52.4535
  					],
  					[
  						19.5595,
  						52.4833
  					],
  					[
  						19.5336,
  						52.4967
  					],
  					[
  						19.4999,
  						52.526
  					],
  					[
  						19.4347,
  						52.5234
  					],
  					[
  						19.3957,
  						52.5129
  					],
  					[
  						19.3515,
  						52.535
  					],
  					[
  						19.3411,
  						52.5671
  					],
  					[
  						19.3782,
  						52.5686
  					],
  					[
  						19.3952,
  						52.5901
  					],
  					[
  						19.4261,
  						52.6114
  					],
  					[
  						19.3679,
  						52.6283
  					],
  					[
  						19.3804,
  						52.641
  					],
  					[
  						19.403,
  						52.6445
  					],
  					[
  						19.4303,
  						52.6716
  					],
  					[
  						19.4467,
  						52.7056
  					],
  					[
  						19.4413,
  						52.723
  					],
  					[
  						19.4931,
  						52.7146
  					],
  					[
  						19.5258,
  						52.7037
  					],
  					[
  						19.62,
  						52.6888
  					],
  					[
  						19.64,
  						52.6785
  					],
  					[
  						19.6918,
  						52.6833
  					],
  					[
  						19.743,
  						52.6963
  					],
  					[
  						19.7755,
  						52.6947
  					],
  					[
  						19.7968,
  						52.7246
  					],
  					[
  						19.8234,
  						52.7338
  					],
  					[
  						19.8481,
  						52.728
  					],
  					[
  						19.8732,
  						52.7482
  					],
  					[
  						19.9053,
  						52.7607
  					],
  					[
  						19.951,
  						52.7649
  					],
  					[
  						19.964,
  						52.7808
  					]
  				],
  				[
  					[
  						19.6955,
  						52.4737
  					],
  					[
  						19.7338,
  						52.5045
  					],
  					[
  						19.7777,
  						52.5132
  					],
  					[
  						19.7663,
  						52.5528
  					],
  					[
  						19.7406,
  						52.5528
  					],
  					[
  						19.7282,
  						52.5821
  					],
  					[
  						19.6948,
  						52.5963
  					],
  					[
  						19.6507,
  						52.5971
  					],
  					[
  						19.6467,
  						52.5703
  					],
  					[
  						19.6313,
  						52.5531
  					],
  					[
  						19.6674,
  						52.5428
  					],
  					[
  						19.6477,
  						52.5299
  					],
  					[
  						19.6378,
  						52.5027
  					],
  					[
  						19.6955,
  						52.4737
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 286,
  			name: "powiat pułtuski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.3208,
  						52.7766
  					],
  					[
  						21.3281,
  						52.7488
  					],
  					[
  						21.3534,
  						52.7259
  					],
  					[
  						21.338,
  						52.7047
  					],
  					[
  						21.2881,
  						52.6774
  					],
  					[
  						21.2989,
  						52.6664
  					],
  					[
  						21.2832,
  						52.6335
  					],
  					[
  						21.2463,
  						52.6367
  					],
  					[
  						21.2531,
  						52.5968
  					],
  					[
  						21.2325,
  						52.5694
  					],
  					[
  						21.1728,
  						52.574
  					],
  					[
  						21.1733,
  						52.5597
  					],
  					[
  						21.1218,
  						52.5536
  					],
  					[
  						21.0602,
  						52.5479
  					],
  					[
  						21.0348,
  						52.5346
  					],
  					[
  						20.977,
  						52.5384
  					],
  					[
  						20.9708,
  						52.5574
  					],
  					[
  						20.9305,
  						52.5589
  					],
  					[
  						20.9239,
  						52.5641
  					],
  					[
  						20.907,
  						52.5886
  					],
  					[
  						20.8683,
  						52.6041
  					],
  					[
  						20.8606,
  						52.6382
  					],
  					[
  						20.8287,
  						52.633
  					],
  					[
  						20.7578,
  						52.6433
  					],
  					[
  						20.7148,
  						52.6173
  					],
  					[
  						20.6961,
  						52.6763
  					],
  					[
  						20.73,
  						52.6875
  					],
  					[
  						20.7282,
  						52.7045
  					],
  					[
  						20.7818,
  						52.7133
  					],
  					[
  						20.7774,
  						52.7363
  					],
  					[
  						20.8027,
  						52.7572
  					],
  					[
  						20.8589,
  						52.7581
  					],
  					[
  						20.8714,
  						52.7676
  					],
  					[
  						20.9062,
  						52.7575
  					],
  					[
  						20.9231,
  						52.7696
  					],
  					[
  						20.9136,
  						52.7864
  					],
  					[
  						20.9407,
  						52.8099
  					],
  					[
  						20.9551,
  						52.8086
  					],
  					[
  						20.9773,
  						52.7817
  					],
  					[
  						21.0017,
  						52.7692
  					],
  					[
  						21.0644,
  						52.791
  					],
  					[
  						21.0945,
  						52.7797
  					],
  					[
  						21.1032,
  						52.799
  					],
  					[
  						21.1304,
  						52.8037
  					],
  					[
  						21.1823,
  						52.7852
  					],
  					[
  						21.1903,
  						52.7666
  					],
  					[
  						21.2148,
  						52.7631
  					],
  					[
  						21.2836,
  						52.7789
  					],
  					[
  						21.3208,
  						52.7766
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 287,
  			name: "powiat sochaczewski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.4849,
  						52.1838
  					],
  					[
  						20.4165,
  						52.1934
  					],
  					[
  						20.3945,
  						52.164
  					],
  					[
  						20.411,
  						52.1403
  					],
  					[
  						20.3476,
  						52.1314
  					],
  					[
  						20.3469,
  						52.1512
  					],
  					[
  						20.3089,
  						52.1377
  					],
  					[
  						20.2684,
  						52.1461
  					],
  					[
  						20.2687,
  						52.126
  					],
  					[
  						20.2519,
  						52.1173
  					],
  					[
  						20.2023,
  						52.1147
  					],
  					[
  						20.1651,
  						52.1386
  					],
  					[
  						20.1606,
  						52.1513
  					],
  					[
  						20.1156,
  						52.1438
  					],
  					[
  						20.091,
  						52.1526
  					],
  					[
  						20.0874,
  						52.1682
  					],
  					[
  						20.0621,
  						52.1881
  					],
  					[
  						20.0805,
  						52.233
  					],
  					[
  						20.0376,
  						52.2467
  					],
  					[
  						20.0421,
  						52.2577
  					],
  					[
  						19.9651,
  						52.2683
  					],
  					[
  						19.9361,
  						52.2997
  					],
  					[
  						19.9828,
  						52.3376
  					],
  					[
  						20.0023,
  						52.369
  					],
  					[
  						19.9713,
  						52.3764
  					],
  					[
  						19.9915,
  						52.4003
  					],
  					[
  						20.0198,
  						52.3832
  					],
  					[
  						20.0912,
  						52.3793
  					],
  					[
  						20.1392,
  						52.3862
  					],
  					[
  						20.1597,
  						52.3799
  					],
  					[
  						20.2221,
  						52.3817
  					],
  					[
  						20.251,
  						52.3881
  					],
  					[
  						20.3134,
  						52.3912
  					],
  					[
  						20.4048,
  						52.3843
  					],
  					[
  						20.4187,
  						52.3711
  					],
  					[
  						20.4215,
  						52.3311
  					],
  					[
  						20.3853,
  						52.3194
  					],
  					[
  						20.3829,
  						52.2948
  					],
  					[
  						20.3483,
  						52.2945
  					],
  					[
  						20.3357,
  						52.2571
  					],
  					[
  						20.3451,
  						52.2379
  					],
  					[
  						20.3972,
  						52.2458
  					],
  					[
  						20.4257,
  						52.2343
  					],
  					[
  						20.4426,
  						52.2411
  					],
  					[
  						20.4895,
  						52.2376
  					],
  					[
  						20.4849,
  						52.1838
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 288,
  			name: "powiat ciechanowski",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.6654,
  						53.087
  					],
  					[
  						20.6826,
  						53.0745
  					],
  					[
  						20.6752,
  						53.0402
  					],
  					[
  						20.6992,
  						52.9879
  					],
  					[
  						20.7826,
  						52.9772
  					],
  					[
  						20.8021,
  						52.9649
  					],
  					[
  						20.7924,
  						52.9425
  					],
  					[
  						20.8366,
  						52.9068
  					],
  					[
  						20.8617,
  						52.8699
  					],
  					[
  						20.8807,
  						52.8431
  					],
  					[
  						20.9407,
  						52.8099
  					],
  					[
  						20.9136,
  						52.7864
  					],
  					[
  						20.9231,
  						52.7696
  					],
  					[
  						20.9062,
  						52.7575
  					],
  					[
  						20.8714,
  						52.7676
  					],
  					[
  						20.8589,
  						52.7581
  					],
  					[
  						20.8027,
  						52.7572
  					],
  					[
  						20.7774,
  						52.7363
  					],
  					[
  						20.7818,
  						52.7133
  					],
  					[
  						20.7282,
  						52.7045
  					],
  					[
  						20.7057,
  						52.6999
  					],
  					[
  						20.6927,
  						52.7175
  					],
  					[
  						20.6576,
  						52.7112
  					],
  					[
  						20.6114,
  						52.7342
  					],
  					[
  						20.5423,
  						52.7068
  					],
  					[
  						20.4965,
  						52.7094
  					],
  					[
  						20.4904,
  						52.72
  					],
  					[
  						20.4661,
  						52.7324
  					],
  					[
  						20.4254,
  						52.7382
  					],
  					[
  						20.4021,
  						52.7302
  					],
  					[
  						20.3508,
  						52.7573
  					],
  					[
  						20.3505,
  						52.7721
  					],
  					[
  						20.3146,
  						52.7691
  					],
  					[
  						20.3006,
  						52.7868
  					],
  					[
  						20.2641,
  						52.7773
  					],
  					[
  						20.2184,
  						52.7947
  					],
  					[
  						20.2147,
  						52.8236
  					],
  					[
  						20.2643,
  						52.8475
  					],
  					[
  						20.3075,
  						52.8503
  					],
  					[
  						20.3181,
  						52.8421
  					],
  					[
  						20.3901,
  						52.8608
  					],
  					[
  						20.4035,
  						52.8679
  					],
  					[
  						20.4249,
  						52.9164
  					],
  					[
  						20.4565,
  						52.9221
  					],
  					[
  						20.4428,
  						52.9548
  					],
  					[
  						20.5036,
  						52.9614
  					],
  					[
  						20.4952,
  						52.9759
  					],
  					[
  						20.5481,
  						53.0049
  					],
  					[
  						20.5373,
  						53.0152
  					],
  					[
  						20.5851,
  						53.0366
  					],
  					[
  						20.5703,
  						53.0741
  					],
  					[
  						20.5966,
  						53.0964
  					],
  					[
  						20.6209,
  						53.1048
  					],
  					[
  						20.6654,
  						53.087
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 289,
  			name: "powiat bialski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.1284,
  						52.2878
  					],
  					[
  						23.1783,
  						52.2831
  					],
  					[
  						23.2012,
  						52.2781
  					],
  					[
  						23.2,
  						52.2297
  					],
  					[
  						23.239,
  						52.2196
  					],
  					[
  						23.3377,
  						52.2062
  					],
  					[
  						23.4002,
  						52.1945
  					],
  					[
  						23.432,
  						52.1734
  					],
  					[
  						23.4582,
  						52.1846
  					],
  					[
  						23.4908,
  						52.1686
  					],
  					[
  						23.5212,
  						52.1329
  					],
  					[
  						23.5431,
  						52.1204
  					],
  					[
  						23.5986,
  						52.1174
  					],
  					[
  						23.6201,
  						52.0913
  					],
  					[
  						23.6536,
  						52.0711
  					],
  					[
  						23.6631,
  						52.0242
  					],
  					[
  						23.689,
  						51.9919
  					],
  					[
  						23.6654,
  						51.9789
  					],
  					[
  						23.6693,
  						51.9647
  					],
  					[
  						23.6398,
  						51.9535
  					],
  					[
  						23.6447,
  						51.9324
  					],
  					[
  						23.612,
  						51.9174
  					],
  					[
  						23.6369,
  						51.8918
  					],
  					[
  						23.6071,
  						51.8763
  					],
  					[
  						23.6203,
  						51.8315
  					],
  					[
  						23.6402,
  						51.8048
  					],
  					[
  						23.6313,
  						51.7815
  					],
  					[
  						23.5614,
  						51.7613
  					],
  					[
  						23.5306,
  						51.7431
  					],
  					[
  						23.5187,
  						51.7603
  					],
  					[
  						23.4652,
  						51.7806
  					],
  					[
  						23.4484,
  						51.7651
  					],
  					[
  						23.447,
  						51.7421
  					],
  					[
  						23.4018,
  						51.738
  					],
  					[
  						23.4141,
  						51.7224
  					],
  					[
  						23.3592,
  						51.6863
  					],
  					[
  						23.3308,
  						51.6761
  					],
  					[
  						23.3209,
  						51.6566
  					],
  					[
  						23.2883,
  						51.6964
  					],
  					[
  						23.2309,
  						51.7141
  					],
  					[
  						23.1965,
  						51.7164
  					],
  					[
  						23.1715,
  						51.705
  					],
  					[
  						23.1209,
  						51.7508
  					],
  					[
  						23.0693,
  						51.754
  					],
  					[
  						23.0397,
  						51.7617
  					],
  					[
  						23.023,
  						51.7803
  					],
  					[
  						23.0461,
  						51.8426
  					],
  					[
  						23.0605,
  						51.8644
  					],
  					[
  						23.0361,
  						51.894
  					],
  					[
  						22.9676,
  						51.8929
  					],
  					[
  						22.8808,
  						51.8474
  					],
  					[
  						22.882,
  						51.8624
  					],
  					[
  						22.7914,
  						51.8573
  					],
  					[
  						22.764,
  						51.8135
  					],
  					[
  						22.7434,
  						51.8125
  					],
  					[
  						22.7306,
  						51.8401
  					],
  					[
  						22.7564,
  						51.8732
  					],
  					[
  						22.7637,
  						51.9007
  					],
  					[
  						22.7798,
  						51.905
  					],
  					[
  						22.7711,
  						51.9377
  					],
  					[
  						22.724,
  						51.9401
  					],
  					[
  						22.6861,
  						51.9352
  					],
  					[
  						22.654,
  						51.9393
  					],
  					[
  						22.6335,
  						51.9693
  					],
  					[
  						22.6334,
  						51.9991
  					],
  					[
  						22.6229,
  						52.0187
  					],
  					[
  						22.6561,
  						52.0357
  					],
  					[
  						22.6691,
  						52.063
  					],
  					[
  						22.6483,
  						52.0909
  					],
  					[
  						22.6776,
  						52.1089
  					],
  					[
  						22.7539,
  						52.095
  					],
  					[
  						22.7871,
  						52.0681
  					],
  					[
  						22.8063,
  						52.0792
  					],
  					[
  						22.8375,
  						52.0799
  					],
  					[
  						22.8491,
  						52.0684
  					],
  					[
  						22.9021,
  						52.0635
  					],
  					[
  						22.8942,
  						52.0913
  					],
  					[
  						22.9026,
  						52.1103
  					],
  					[
  						22.9501,
  						52.1022
  					],
  					[
  						22.9682,
  						52.1154
  					],
  					[
  						22.9331,
  						52.1365
  					],
  					[
  						22.9859,
  						52.1589
  					],
  					[
  						22.977,
  						52.1722
  					],
  					[
  						23.0288,
  						52.1741
  					],
  					[
  						23.0397,
  						52.1839
  					],
  					[
  						23.033,
  						52.2186
  					],
  					[
  						23.0948,
  						52.2565
  					],
  					[
  						23.1284,
  						52.2878
  					]
  				],
  				[
  					[
  						23.1778,
  						52.0076
  					],
  					[
  						23.2115,
  						52.033
  					],
  					[
  						23.2099,
  						52.0568
  					],
  					[
  						23.1524,
  						52.0522
  					],
  					[
  						23.1471,
  						52.0598
  					],
  					[
  						23.0944,
  						52.0543
  					],
  					[
  						23.0711,
  						52.035
  					],
  					[
  						23.074,
  						52.0028
  					],
  					[
  						23.1223,
  						51.9964
  					],
  					[
  						23.1778,
  						52.0076
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 290,
  			name: "powiat krasnostawski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.0056,
  						51.0929
  					],
  					[
  						23.0363,
  						51.0876
  					],
  					[
  						23.0647,
  						51.0973
  					],
  					[
  						23.0756,
  						51.0851
  					],
  					[
  						23.17,
  						51.0988
  					],
  					[
  						23.1918,
  						51.0777
  					],
  					[
  						23.2296,
  						51.0719
  					],
  					[
  						23.2739,
  						51.0572
  					],
  					[
  						23.3418,
  						51.0452
  					],
  					[
  						23.3588,
  						51.0502
  					],
  					[
  						23.4295,
  						51.0384
  					],
  					[
  						23.4486,
  						51.0416
  					],
  					[
  						23.455,
  						51.0151
  					],
  					[
  						23.3857,
  						50.9786
  					],
  					[
  						23.4273,
  						50.9518
  					],
  					[
  						23.4319,
  						50.9328
  					],
  					[
  						23.4789,
  						50.8985
  					],
  					[
  						23.4795,
  						50.8983
  					],
  					[
  						23.4789,
  						50.8985
  					],
  					[
  						23.45,
  						50.8776
  					],
  					[
  						23.4234,
  						50.8935
  					],
  					[
  						23.375,
  						50.8905
  					],
  					[
  						23.3185,
  						50.8986
  					],
  					[
  						23.2979,
  						50.9092
  					],
  					[
  						23.2652,
  						50.8876
  					],
  					[
  						23.2477,
  						50.8551
  					],
  					[
  						23.2018,
  						50.8502
  					],
  					[
  						23.1965,
  						50.868
  					],
  					[
  						23.1516,
  						50.8762
  					],
  					[
  						23.1534,
  						50.8506
  					],
  					[
  						23.1377,
  						50.8416
  					],
  					[
  						23.0959,
  						50.8437
  					],
  					[
  						23.0336,
  						50.8691
  					],
  					[
  						23.0044,
  						50.845
  					],
  					[
  						22.989,
  						50.8226
  					],
  					[
  						22.9482,
  						50.8242
  					],
  					[
  						22.9344,
  						50.804
  					],
  					[
  						22.8881,
  						50.8078
  					],
  					[
  						22.8861,
  						50.8211
  					],
  					[
  						22.8541,
  						50.815
  					],
  					[
  						22.8092,
  						50.8352
  					],
  					[
  						22.8013,
  						50.8779
  					],
  					[
  						22.7712,
  						50.8844
  					],
  					[
  						22.7616,
  						50.9071
  					],
  					[
  						22.7871,
  						50.9372
  					],
  					[
  						22.7886,
  						50.9654
  					],
  					[
  						22.8135,
  						50.9734
  					],
  					[
  						22.8447,
  						50.9743
  					],
  					[
  						22.879,
  						50.9652
  					],
  					[
  						22.9177,
  						50.9765
  					],
  					[
  						22.9264,
  						50.9972
  					],
  					[
  						22.9469,
  						51.0012
  					],
  					[
  						22.9519,
  						51.0211
  					],
  					[
  						22.9015,
  						51.0243
  					],
  					[
  						22.8934,
  						51.0491
  					],
  					[
  						22.8774,
  						51.0593
  					],
  					[
  						22.9241,
  						51.1185
  					],
  					[
  						22.9594,
  						51.1197
  					],
  					[
  						23.0056,
  						51.0929
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 291,
  			name: "powiat zamojski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.4789,
  						50.8985
  					],
  					[
  						23.4795,
  						50.8983
  					],
  					[
  						23.4775,
  						50.8891
  					],
  					[
  						23.5483,
  						50.8836
  					],
  					[
  						23.5804,
  						50.8735
  					],
  					[
  						23.6494,
  						50.8537
  					],
  					[
  						23.6426,
  						50.8365
  					],
  					[
  						23.6362,
  						50.8132
  					],
  					[
  						23.6611,
  						50.7908
  					],
  					[
  						23.6592,
  						50.7533
  					],
  					[
  						23.6455,
  						50.7393
  					],
  					[
  						23.6696,
  						50.7135
  					],
  					[
  						23.6254,
  						50.7087
  					],
  					[
  						23.6229,
  						50.684
  					],
  					[
  						23.5962,
  						50.6788
  					],
  					[
  						23.6031,
  						50.639
  					],
  					[
  						23.5982,
  						50.614
  					],
  					[
  						23.5573,
  						50.6006
  					],
  					[
  						23.4888,
  						50.593
  					],
  					[
  						23.4292,
  						50.5917
  					],
  					[
  						23.3958,
  						50.6089
  					],
  					[
  						23.3126,
  						50.6091
  					],
  					[
  						23.3097,
  						50.5751
  					],
  					[
  						23.2949,
  						50.5475
  					],
  					[
  						23.3257,
  						50.5401
  					],
  					[
  						23.3145,
  						50.5032
  					],
  					[
  						23.289,
  						50.4908
  					],
  					[
  						23.238,
  						50.4869
  					],
  					[
  						23.2153,
  						50.5058
  					],
  					[
  						23.1796,
  						50.4963
  					],
  					[
  						23.1492,
  						50.5201
  					],
  					[
  						23.1124,
  						50.5341
  					],
  					[
  						23.004,
  						50.5222
  					],
  					[
  						22.986,
  						50.566
  					],
  					[
  						22.9434,
  						50.573
  					],
  					[
  						22.9303,
  						50.601
  					],
  					[
  						22.9021,
  						50.5953
  					],
  					[
  						22.8732,
  						50.6361
  					],
  					[
  						22.8818,
  						50.6416
  					],
  					[
  						22.835,
  						50.6313
  					],
  					[
  						22.8346,
  						50.6092
  					],
  					[
  						22.786,
  						50.6428
  					],
  					[
  						22.8005,
  						50.6571
  					],
  					[
  						22.7939,
  						50.6885
  					],
  					[
  						22.8228,
  						50.7148
  					],
  					[
  						22.7834,
  						50.7238
  					],
  					[
  						22.7665,
  						50.7709
  					],
  					[
  						22.797,
  						50.7691
  					],
  					[
  						22.8286,
  						50.7839
  					],
  					[
  						22.8677,
  						50.7838
  					],
  					[
  						22.8881,
  						50.8078
  					],
  					[
  						22.9344,
  						50.804
  					],
  					[
  						22.9482,
  						50.8242
  					],
  					[
  						22.989,
  						50.8226
  					],
  					[
  						23.0044,
  						50.845
  					],
  					[
  						23.0336,
  						50.8691
  					],
  					[
  						23.0959,
  						50.8437
  					],
  					[
  						23.1377,
  						50.8416
  					],
  					[
  						23.1534,
  						50.8506
  					],
  					[
  						23.1516,
  						50.8762
  					],
  					[
  						23.1965,
  						50.868
  					],
  					[
  						23.2018,
  						50.8502
  					],
  					[
  						23.2477,
  						50.8551
  					],
  					[
  						23.2652,
  						50.8876
  					],
  					[
  						23.2979,
  						50.9092
  					],
  					[
  						23.3185,
  						50.8986
  					],
  					[
  						23.375,
  						50.8905
  					],
  					[
  						23.4234,
  						50.8935
  					],
  					[
  						23.45,
  						50.8776
  					],
  					[
  						23.4789,
  						50.8985
  					]
  				],
  				[
  					[
  						23.3064,
  						50.7445
  					],
  					[
  						23.2715,
  						50.7485
  					],
  					[
  						23.2128,
  						50.724
  					],
  					[
  						23.2205,
  						50.7027
  					],
  					[
  						23.2584,
  						50.6924
  					],
  					[
  						23.2778,
  						50.6959
  					],
  					[
  						23.301,
  						50.7156
  					],
  					[
  						23.3064,
  						50.7445
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 292,
  			name: "powiat tarnowski",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.728,
  						50.2428
  					],
  					[
  						20.7589,
  						50.2084
  					],
  					[
  						20.8311,
  						50.2232
  					],
  					[
  						20.8506,
  						50.2147
  					],
  					[
  						20.8507,
  						50.2147
  					],
  					[
  						20.8506,
  						50.2147
  					],
  					[
  						20.8507,
  						50.2147
  					],
  					[
  						20.8696,
  						50.1974
  					],
  					[
  						20.8645,
  						50.1683
  					],
  					[
  						20.8811,
  						50.161
  					],
  					[
  						20.9186,
  						50.1658
  					],
  					[
  						20.9487,
  						50.1481
  					],
  					[
  						20.9566,
  						50.1122
  					],
  					[
  						21,
  						50.1168
  					],
  					[
  						21.0604,
  						50.1068
  					],
  					[
  						21.0799,
  						50.1148
  					],
  					[
  						21.1402,
  						50.115
  					],
  					[
  						21.1318,
  						50.1358
  					],
  					[
  						21.1524,
  						50.1476
  					],
  					[
  						21.1485,
  						50.1264
  					],
  					[
  						21.1846,
  						50.1003
  					],
  					[
  						21.1798,
  						50.0787
  					],
  					[
  						21.1515,
  						50.0453
  					],
  					[
  						21.1929,
  						50.0293
  					],
  					[
  						21.1788,
  						50.0118
  					],
  					[
  						21.1544,
  						50.0034
  					],
  					[
  						21.1507,
  						49.9761
  					],
  					[
  						21.1791,
  						49.9287
  					],
  					[
  						21.248,
  						49.9304
  					],
  					[
  						21.2847,
  						49.9241
  					],
  					[
  						21.2796,
  						49.892
  					],
  					[
  						21.2254,
  						49.8841
  					],
  					[
  						21.2343,
  						49.8501
  					],
  					[
  						21.2573,
  						49.8413
  					],
  					[
  						21.2971,
  						49.8429
  					],
  					[
  						21.3358,
  						49.8273
  					],
  					[
  						21.3322,
  						49.8108
  					],
  					[
  						21.3084,
  						49.7961
  					],
  					[
  						21.2761,
  						49.8039
  					],
  					[
  						21.2418,
  						49.7761
  					],
  					[
  						21.1576,
  						49.7816
  					],
  					[
  						21.1359,
  						49.7697
  					],
  					[
  						21.1018,
  						49.7711
  					],
  					[
  						21.0646,
  						49.7476
  					],
  					[
  						21.0415,
  						49.7633
  					],
  					[
  						21.0007,
  						49.7602
  					],
  					[
  						21.0012,
  						49.7451
  					],
  					[
  						20.9597,
  						49.7474
  					],
  					[
  						20.9396,
  						49.7285
  					],
  					[
  						20.8826,
  						49.7317
  					],
  					[
  						20.8824,
  						49.7318
  					],
  					[
  						20.8453,
  						49.7639
  					],
  					[
  						20.8078,
  						49.7699
  					],
  					[
  						20.7742,
  						49.7857
  					],
  					[
  						20.7407,
  						49.7868
  					],
  					[
  						20.7132,
  						49.8066
  					],
  					[
  						20.7148,
  						49.8511
  					],
  					[
  						20.733,
  						49.8558
  					],
  					[
  						20.7209,
  						49.8803
  					],
  					[
  						20.757,
  						49.8986
  					],
  					[
  						20.7667,
  						49.9014
  					],
  					[
  						20.7583,
  						49.9252
  					],
  					[
  						20.7579,
  						49.9261
  					],
  					[
  						20.7575,
  						49.9271
  					],
  					[
  						20.7576,
  						49.9271
  					],
  					[
  						20.7575,
  						49.9271
  					],
  					[
  						20.7576,
  						49.9271
  					],
  					[
  						20.7582,
  						49.9293
  					],
  					[
  						20.7556,
  						49.933
  					],
  					[
  						20.7546,
  						49.9339
  					],
  					[
  						20.7537,
  						49.9357
  					],
  					[
  						20.7538,
  						49.9365
  					],
  					[
  						20.7534,
  						49.9368
  					],
  					[
  						20.7534,
  						49.9394
  					],
  					[
  						20.7541,
  						49.94
  					],
  					[
  						20.754,
  						49.94
  					],
  					[
  						20.7541,
  						49.94
  					],
  					[
  						20.7558,
  						49.9414
  					],
  					[
  						20.757,
  						49.9421
  					],
  					[
  						20.7591,
  						49.9769
  					],
  					[
  						20.7554,
  						49.9999
  					],
  					[
  						20.769,
  						50.0202
  					],
  					[
  						20.755,
  						50.0329
  					],
  					[
  						20.7576,
  						50.0527
  					],
  					[
  						20.7813,
  						50.0702
  					],
  					[
  						20.7593,
  						50.1333
  					],
  					[
  						20.7446,
  						50.1477
  					],
  					[
  						20.6967,
  						50.1637
  					],
  					[
  						20.702,
  						50.1863
  					],
  					[
  						20.6815,
  						50.2008
  					],
  					[
  						20.6815,
  						50.2059
  					],
  					[
  						20.6866,
  						50.2179
  					],
  					[
  						20.7313,
  						50.2333
  					],
  					[
  						20.728,
  						50.2428
  					]
  				],
  				[
  					[
  						20.8937,
  						50.0121
  					],
  					[
  						20.9135,
  						49.9884
  					],
  					[
  						20.9707,
  						49.9878
  					],
  					[
  						20.9721,
  						49.9882
  					],
  					[
  						20.9757,
  						49.9884
  					],
  					[
  						21.0241,
  						49.9894
  					],
  					[
  						21.0224,
  						50.003
  					],
  					[
  						21.0606,
  						50.0168
  					],
  					[
  						21.033,
  						50.0327
  					],
  					[
  						21.0347,
  						50.0505
  					],
  					[
  						20.9967,
  						50.0649
  					],
  					[
  						20.9385,
  						50.0666
  					],
  					[
  						20.9278,
  						50.036
  					],
  					[
  						20.8936,
  						50.0272
  					],
  					[
  						20.8937,
  						50.0121
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 293,
  			name: "powiat bełchatowski",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.2622,
  						51.5328
  					],
  					[
  						19.2734,
  						51.5552
  					],
  					[
  						19.2828,
  						51.5448
  					],
  					[
  						19.289,
  						51.5321
  					],
  					[
  						19.329,
  						51.5223
  					],
  					[
  						19.383,
  						51.5295
  					],
  					[
  						19.4143,
  						51.5254
  					],
  					[
  						19.4545,
  						51.5045
  					],
  					[
  						19.4338,
  						51.4697
  					],
  					[
  						19.4633,
  						51.4677
  					],
  					[
  						19.474,
  						51.443
  					],
  					[
  						19.4775,
  						51.4173
  					],
  					[
  						19.4677,
  						51.4008
  					],
  					[
  						19.4993,
  						51.3619
  					],
  					[
  						19.4738,
  						51.3405
  					],
  					[
  						19.4876,
  						51.3076
  					],
  					[
  						19.4599,
  						51.2861
  					],
  					[
  						19.4166,
  						51.2585
  					],
  					[
  						19.3905,
  						51.2277
  					],
  					[
  						19.3983,
  						51.2092
  					],
  					[
  						19.3916,
  						51.195
  					],
  					[
  						19.3551,
  						51.1819
  					],
  					[
  						19.3125,
  						51.1842
  					],
  					[
  						19.221,
  						51.2245
  					],
  					[
  						19.1969,
  						51.2282
  					],
  					[
  						19.1876,
  						51.2488
  					],
  					[
  						19.1627,
  						51.2604
  					],
  					[
  						19.1419,
  						51.2382
  					],
  					[
  						19.1095,
  						51.2534
  					],
  					[
  						19.0892,
  						51.2968
  					],
  					[
  						19.0491,
  						51.2889
  					],
  					[
  						19.032,
  						51.2761
  					],
  					[
  						19.0002,
  						51.2874
  					],
  					[
  						18.9024,
  						51.2892
  					],
  					[
  						18.8663,
  						51.2806
  					],
  					[
  						18.8562,
  						51.2908
  					],
  					[
  						18.8885,
  						51.3049
  					],
  					[
  						18.8613,
  						51.3233
  					],
  					[
  						18.8974,
  						51.3643
  					],
  					[
  						18.9346,
  						51.3477
  					],
  					[
  						18.9652,
  						51.362
  					],
  					[
  						19.0167,
  						51.3454
  					],
  					[
  						19.0472,
  						51.3537
  					],
  					[
  						19.0576,
  						51.4149
  					],
  					[
  						19.0786,
  						51.4264
  					],
  					[
  						19.0762,
  						51.4593
  					],
  					[
  						19.1082,
  						51.4755
  					],
  					[
  						19.1591,
  						51.4823
  					],
  					[
  						19.196,
  						51.4764
  					],
  					[
  						19.2331,
  						51.4943
  					],
  					[
  						19.2581,
  						51.5141
  					],
  					[
  						19.2622,
  						51.5328
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 294,
  			name: "powiat łaski",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.047,
  						51.7669
  					],
  					[
  						19.056,
  						51.7781
  					],
  					[
  						19.099,
  						51.7636
  					],
  					[
  						19.1421,
  						51.76
  					],
  					[
  						19.1804,
  						51.7277
  					],
  					[
  						19.1866,
  						51.7021
  					],
  					[
  						19.208,
  						51.6694
  					],
  					[
  						19.1514,
  						51.6348
  					],
  					[
  						19.213,
  						51.6155
  					],
  					[
  						19.2046,
  						51.5843
  					],
  					[
  						19.2501,
  						51.5744
  					],
  					[
  						19.2734,
  						51.5552
  					],
  					[
  						19.2622,
  						51.5328
  					],
  					[
  						19.2581,
  						51.5141
  					],
  					[
  						19.2331,
  						51.4943
  					],
  					[
  						19.196,
  						51.4764
  					],
  					[
  						19.1591,
  						51.4823
  					],
  					[
  						19.1082,
  						51.4755
  					],
  					[
  						19.0762,
  						51.4593
  					],
  					[
  						19.0786,
  						51.4264
  					],
  					[
  						19.0576,
  						51.4149
  					],
  					[
  						19.0472,
  						51.3537
  					],
  					[
  						19.0167,
  						51.3454
  					],
  					[
  						18.9652,
  						51.362
  					],
  					[
  						18.9346,
  						51.3477
  					],
  					[
  						18.8974,
  						51.3643
  					],
  					[
  						18.857,
  						51.4019
  					],
  					[
  						18.8286,
  						51.3993
  					],
  					[
  						18.803,
  						51.4105
  					],
  					[
  						18.8249,
  						51.4424
  					],
  					[
  						18.8408,
  						51.4454
  					],
  					[
  						18.8785,
  						51.4661
  					],
  					[
  						18.8693,
  						51.4822
  					],
  					[
  						18.8631,
  						51.4891
  					],
  					[
  						18.9018,
  						51.483
  					],
  					[
  						18.9224,
  						51.4674
  					],
  					[
  						18.9432,
  						51.4985
  					],
  					[
  						18.9482,
  						51.5202
  					],
  					[
  						19.0416,
  						51.5837
  					],
  					[
  						19.0205,
  						51.604
  					],
  					[
  						19.032,
  						51.6176
  					],
  					[
  						19.008,
  						51.6502
  					],
  					[
  						19.0272,
  						51.6662
  					],
  					[
  						19.0672,
  						51.6623
  					],
  					[
  						19.0445,
  						51.6794
  					],
  					[
  						19.1078,
  						51.689
  					],
  					[
  						19.0961,
  						51.7117
  					],
  					[
  						19.0726,
  						51.7193
  					],
  					[
  						19.047,
  						51.7669
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 295,
  			name: "powiat łęczycki",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.468,
  						52.1294
  					],
  					[
  						19.5293,
  						52.1322
  					],
  					[
  						19.5314,
  						52.1249
  					],
  					[
  						19.524,
  						52.101
  					],
  					[
  						19.5454,
  						52.0851
  					],
  					[
  						19.5421,
  						52.0473
  					],
  					[
  						19.5622,
  						52.0347
  					],
  					[
  						19.558,
  						52.0217
  					],
  					[
  						19.4658,
  						51.997
  					],
  					[
  						19.3704,
  						52.0101
  					],
  					[
  						19.3622,
  						52.0228
  					],
  					[
  						19.2937,
  						52.0231
  					],
  					[
  						19.2766,
  						52.0356
  					],
  					[
  						19.22,
  						52.014
  					],
  					[
  						19.1716,
  						52.0092
  					],
  					[
  						19.1295,
  						52.0125
  					],
  					[
  						19.1286,
  						52.0005
  					],
  					[
  						19.0967,
  						52.0133
  					],
  					[
  						19.0778,
  						52.0062
  					],
  					[
  						19.0242,
  						52.0163
  					],
  					[
  						18.9979,
  						52.0092
  					],
  					[
  						18.9624,
  						52.0253
  					],
  					[
  						18.9164,
  						52.0015
  					],
  					[
  						18.87,
  						52.0035
  					],
  					[
  						18.8858,
  						52.021
  					],
  					[
  						18.8278,
  						52.0642
  					],
  					[
  						18.8421,
  						52.0802
  					],
  					[
  						18.9251,
  						52.0793
  					],
  					[
  						18.9308,
  						52.1043
  					],
  					[
  						18.9498,
  						52.1193
  					],
  					[
  						18.9111,
  						52.1327
  					],
  					[
  						18.9182,
  						52.186
  					],
  					[
  						18.9306,
  						52.1992
  					],
  					[
  						19.0202,
  						52.2154
  					],
  					[
  						19.0524,
  						52.2126
  					],
  					[
  						19.0776,
  						52.2001
  					],
  					[
  						19.1359,
  						52.1954
  					],
  					[
  						19.1786,
  						52.2054
  					],
  					[
  						19.2137,
  						52.1819
  					],
  					[
  						19.2508,
  						52.1823
  					],
  					[
  						19.2669,
  						52.163
  					],
  					[
  						19.2934,
  						52.1765
  					],
  					[
  						19.3201,
  						52.1716
  					],
  					[
  						19.3494,
  						52.1446
  					],
  					[
  						19.356,
  						52.113
  					],
  					[
  						19.3909,
  						52.1098
  					],
  					[
  						19.4505,
  						52.12
  					],
  					[
  						19.468,
  						52.1294
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 296,
  			name: "powiat pajęczański",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.1419,
  						51.2382
  					],
  					[
  						19.1627,
  						51.2604
  					],
  					[
  						19.1876,
  						51.2488
  					],
  					[
  						19.1969,
  						51.2282
  					],
  					[
  						19.221,
  						51.2245
  					],
  					[
  						19.3125,
  						51.1842
  					],
  					[
  						19.3016,
  						51.1674
  					],
  					[
  						19.2393,
  						51.1745
  					],
  					[
  						19.2335,
  						51.1503
  					],
  					[
  						19.2789,
  						51.131
  					],
  					[
  						19.2438,
  						51.0987
  					],
  					[
  						19.2049,
  						51.0516
  					],
  					[
  						19.2417,
  						51.0386
  					],
  					[
  						19.2422,
  						51.0383
  					],
  					[
  						19.2431,
  						51.0368
  					],
  					[
  						19.2562,
  						51.0063
  					],
  					[
  						19.2407,
  						50.9904
  					],
  					[
  						19.2065,
  						50.9855
  					],
  					[
  						19.165,
  						50.9946
  					],
  					[
  						19.1497,
  						51.0096
  					],
  					[
  						19.1236,
  						50.9996
  					],
  					[
  						19.1044,
  						51.0263
  					],
  					[
  						19.0157,
  						51.0527
  					],
  					[
  						19.0116,
  						51.0664
  					],
  					[
  						18.9554,
  						51.0902
  					],
  					[
  						18.9189,
  						51.098
  					],
  					[
  						18.8835,
  						51.059
  					],
  					[
  						18.863,
  						51.0727
  					],
  					[
  						18.8029,
  						51.0634
  					],
  					[
  						18.7679,
  						51.0648
  					],
  					[
  						18.7844,
  						51.0856
  					],
  					[
  						18.7611,
  						51.0934
  					],
  					[
  						18.7541,
  						51.12
  					],
  					[
  						18.7759,
  						51.1353
  					],
  					[
  						18.7794,
  						51.1654
  					],
  					[
  						18.8184,
  						51.1642
  					],
  					[
  						18.8115,
  						51.1831
  					],
  					[
  						18.8272,
  						51.1983
  					],
  					[
  						18.7876,
  						51.2146
  					],
  					[
  						18.7975,
  						51.2509
  					],
  					[
  						18.8663,
  						51.2806
  					],
  					[
  						18.9024,
  						51.2892
  					],
  					[
  						19.0002,
  						51.2874
  					],
  					[
  						19.032,
  						51.2761
  					],
  					[
  						19.0491,
  						51.2889
  					],
  					[
  						19.0892,
  						51.2968
  					],
  					[
  						19.1095,
  						51.2534
  					],
  					[
  						19.1419,
  						51.2382
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 297,
  			name: "powiat radomszczański",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.3983,
  						51.2092
  					],
  					[
  						19.3905,
  						51.2277
  					],
  					[
  						19.4166,
  						51.2585
  					],
  					[
  						19.4599,
  						51.2861
  					],
  					[
  						19.4819,
  						51.2752
  					],
  					[
  						19.5257,
  						51.2688
  					],
  					[
  						19.5379,
  						51.2376
  					],
  					[
  						19.5377,
  						51.2227
  					],
  					[
  						19.5713,
  						51.2004
  					],
  					[
  						19.566,
  						51.1809
  					],
  					[
  						19.5752,
  						51.1763
  					],
  					[
  						19.5752,
  						51.1762
  					],
  					[
  						19.5752,
  						51.1763
  					],
  					[
  						19.5752,
  						51.1762
  					],
  					[
  						19.5793,
  						51.1483
  					],
  					[
  						19.6211,
  						51.1492
  					],
  					[
  						19.6382,
  						51.1578
  					],
  					[
  						19.6801,
  						51.1552
  					],
  					[
  						19.6976,
  						51.1631
  					],
  					[
  						19.6983,
  						51.1895
  					],
  					[
  						19.729,
  						51.1818
  					],
  					[
  						19.7316,
  						51.1525
  					],
  					[
  						19.7552,
  						51.1413
  					],
  					[
  						19.8272,
  						51.1392
  					],
  					[
  						19.8418,
  						51.1212
  					],
  					[
  						19.9016,
  						51.107
  					],
  					[
  						19.9121,
  						51.1472
  					],
  					[
  						19.9032,
  						51.1599
  					],
  					[
  						19.9284,
  						51.183
  					],
  					[
  						19.965,
  						51.2018
  					],
  					[
  						19.9932,
  						51.1844
  					],
  					[
  						19.9938,
  						51.184
  					],
  					[
  						20.0258,
  						51.1647
  					],
  					[
  						19.9927,
  						51.1341
  					],
  					[
  						19.9929,
  						51.1004
  					],
  					[
  						19.9818,
  						51.0731
  					],
  					[
  						20.0454,
  						51.0686
  					],
  					[
  						20.0509,
  						51.0264
  					],
  					[
  						20.0395,
  						50.9902
  					],
  					[
  						20.0175,
  						50.9624
  					],
  					[
  						19.9559,
  						50.9921
  					],
  					[
  						19.9369,
  						51.0246
  					],
  					[
  						19.8989,
  						51.028
  					],
  					[
  						19.8972,
  						51.0286
  					],
  					[
  						19.864,
  						51.0302
  					],
  					[
  						19.8635,
  						51.0047
  					],
  					[
  						19.8297,
  						50.9678
  					],
  					[
  						19.8488,
  						50.9357
  					],
  					[
  						19.8325,
  						50.916
  					],
  					[
  						19.7968,
  						50.9084
  					],
  					[
  						19.7739,
  						50.8777
  					],
  					[
  						19.7471,
  						50.866
  					],
  					[
  						19.7279,
  						50.8433
  					],
  					[
  						19.6701,
  						50.8487
  					],
  					[
  						19.6616,
  						50.8744
  					],
  					[
  						19.6139,
  						50.8773
  					],
  					[
  						19.5867,
  						50.9053
  					],
  					[
  						19.5697,
  						50.9083
  					],
  					[
  						19.5251,
  						50.8941
  					],
  					[
  						19.5092,
  						50.8811
  					],
  					[
  						19.4711,
  						50.8859
  					],
  					[
  						19.4698,
  						50.9154
  					],
  					[
  						19.438,
  						50.9439
  					],
  					[
  						19.4322,
  						50.9649
  					],
  					[
  						19.4021,
  						50.994
  					],
  					[
  						19.3746,
  						50.9944
  					],
  					[
  						19.3185,
  						51.0282
  					],
  					[
  						19.3227,
  						51.0462
  					],
  					[
  						19.2918,
  						51.0455
  					],
  					[
  						19.2605,
  						51.0311
  					],
  					[
  						19.2431,
  						51.0368
  					],
  					[
  						19.2422,
  						51.0383
  					],
  					[
  						19.2417,
  						51.0386
  					],
  					[
  						19.2049,
  						51.0516
  					],
  					[
  						19.2438,
  						51.0987
  					],
  					[
  						19.2789,
  						51.131
  					],
  					[
  						19.2335,
  						51.1503
  					],
  					[
  						19.2393,
  						51.1745
  					],
  					[
  						19.3016,
  						51.1674
  					],
  					[
  						19.3125,
  						51.1842
  					],
  					[
  						19.3551,
  						51.1819
  					],
  					[
  						19.3916,
  						51.195
  					],
  					[
  						19.3983,
  						51.2092
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 298,
  			name: "powiat zduńskowolski",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.8631,
  						51.4891
  					],
  					[
  						18.8714,
  						51.5185
  					],
  					[
  						18.817,
  						51.5619
  					],
  					[
  						18.8475,
  						51.5886
  					],
  					[
  						18.8798,
  						51.6009
  					],
  					[
  						18.8734,
  						51.6165
  					],
  					[
  						18.8198,
  						51.6582
  					],
  					[
  						18.821,
  						51.685
  					],
  					[
  						18.8415,
  						51.6968
  					],
  					[
  						18.8395,
  						51.7269
  					],
  					[
  						18.8536,
  						51.7202
  					],
  					[
  						18.8802,
  						51.7487
  					],
  					[
  						18.9015,
  						51.7545
  					],
  					[
  						18.9689,
  						51.7442
  					],
  					[
  						18.9857,
  						51.7637
  					],
  					[
  						19.0092,
  						51.7734
  					],
  					[
  						19.047,
  						51.7669
  					],
  					[
  						19.0726,
  						51.7193
  					],
  					[
  						19.0961,
  						51.7117
  					],
  					[
  						19.1078,
  						51.689
  					],
  					[
  						19.0445,
  						51.6794
  					],
  					[
  						19.0672,
  						51.6623
  					],
  					[
  						19.0272,
  						51.6662
  					],
  					[
  						19.008,
  						51.6502
  					],
  					[
  						19.032,
  						51.6176
  					],
  					[
  						19.0205,
  						51.604
  					],
  					[
  						19.0416,
  						51.5837
  					],
  					[
  						18.9482,
  						51.5202
  					],
  					[
  						18.9432,
  						51.4985
  					],
  					[
  						18.9224,
  						51.4674
  					],
  					[
  						18.9018,
  						51.483
  					],
  					[
  						18.8631,
  						51.4891
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 299,
  			name: "powiat nowosolski",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.5984,
  						51.8519
  					],
  					[
  						15.6295,
  						51.8504
  					],
  					[
  						15.6518,
  						51.8751
  					],
  					[
  						15.638,
  						51.9051
  					],
  					[
  						15.7072,
  						51.892
  					],
  					[
  						15.7616,
  						51.9044
  					],
  					[
  						15.7877,
  						51.8858
  					],
  					[
  						15.8679,
  						51.9218
  					],
  					[
  						15.846,
  						51.9391
  					],
  					[
  						15.904,
  						51.9596
  					],
  					[
  						15.9306,
  						51.9797
  					],
  					[
  						15.9101,
  						52.0239
  					],
  					[
  						15.9127,
  						52.036
  					],
  					[
  						15.966,
  						52.0267
  					],
  					[
  						15.9692,
  						52.0026
  					],
  					[
  						16.0031,
  						51.9956
  					],
  					[
  						16.0106,
  						51.9814
  					],
  					[
  						15.997,
  						51.9481
  					],
  					[
  						15.9714,
  						51.9259
  					],
  					[
  						15.9918,
  						51.9036
  					],
  					[
  						15.9803,
  						51.8748
  					],
  					[
  						15.9428,
  						51.8757
  					],
  					[
  						15.9087,
  						51.867
  					],
  					[
  						15.8965,
  						51.8524
  					],
  					[
  						15.8352,
  						51.8519
  					],
  					[
  						15.841,
  						51.8292
  					],
  					[
  						15.8805,
  						51.8236
  					],
  					[
  						15.8839,
  						51.7989
  					],
  					[
  						15.9507,
  						51.8007
  					],
  					[
  						15.9681,
  						51.7879
  					],
  					[
  						15.9766,
  						51.7481
  					],
  					[
  						15.9521,
  						51.7339
  					],
  					[
  						15.9298,
  						51.7376
  					],
  					[
  						15.8925,
  						51.7295
  					],
  					[
  						15.8682,
  						51.716
  					],
  					[
  						15.8656,
  						51.6926
  					],
  					[
  						15.8343,
  						51.6722
  					],
  					[
  						15.7854,
  						51.659
  					],
  					[
  						15.7563,
  						51.6597
  					],
  					[
  						15.729,
  						51.645
  					],
  					[
  						15.6981,
  						51.6596
  					],
  					[
  						15.696,
  						51.6599
  					],
  					[
  						15.6621,
  						51.6693
  					],
  					[
  						15.6004,
  						51.67
  					],
  					[
  						15.579,
  						51.6943
  					],
  					[
  						15.5194,
  						51.6834
  					],
  					[
  						15.5194,
  						51.7213
  					],
  					[
  						15.4635,
  						51.7746
  					],
  					[
  						15.4422,
  						51.7817
  					],
  					[
  						15.4686,
  						51.8182
  					],
  					[
  						15.4659,
  						51.8274
  					],
  					[
  						15.5084,
  						51.8201
  					],
  					[
  						15.5984,
  						51.8519
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 300,
  			name: "powiat jarosławski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.7978,
  						50.2094
  					],
  					[
  						22.8689,
  						50.1896
  					],
  					[
  						22.8857,
  						50.165
  					],
  					[
  						22.9258,
  						50.173
  					],
  					[
  						22.9302,
  						50.1586
  					],
  					[
  						22.9124,
  						50.1241
  					],
  					[
  						22.9154,
  						50.0988
  					],
  					[
  						22.9479,
  						50.0927
  					],
  					[
  						22.9537,
  						50.0738
  					],
  					[
  						22.9964,
  						50.0686
  					],
  					[
  						23.0307,
  						50.056
  					],
  					[
  						23.0471,
  						50.0402
  					],
  					[
  						23.037,
  						50.0202
  					],
  					[
  						23.0069,
  						49.9973
  					],
  					[
  						23.0865,
  						49.9841
  					],
  					[
  						23.1538,
  						49.9808
  					],
  					[
  						23.1149,
  						49.9565
  					],
  					[
  						23.0929,
  						49.9288
  					],
  					[
  						23.057,
  						49.9273
  					],
  					[
  						23.0342,
  						49.9402
  					],
  					[
  						22.9601,
  						49.9494
  					],
  					[
  						22.9557,
  						49.9236
  					],
  					[
  						22.9146,
  						49.9327
  					],
  					[
  						22.9148,
  						49.9057
  					],
  					[
  						22.8935,
  						49.8877
  					],
  					[
  						22.8573,
  						49.8874
  					],
  					[
  						22.8362,
  						49.9063
  					],
  					[
  						22.7821,
  						49.8954
  					],
  					[
  						22.7564,
  						49.9195
  					],
  					[
  						22.6718,
  						49.8978
  					],
  					[
  						22.6774,
  						49.8819
  					],
  					[
  						22.6635,
  						49.8655
  					],
  					[
  						22.5916,
  						49.8374
  					],
  					[
  						22.5439,
  						49.8386
  					],
  					[
  						22.4795,
  						49.8491
  					],
  					[
  						22.4184,
  						49.8883
  					],
  					[
  						22.4259,
  						49.9108
  					],
  					[
  						22.4359,
  						49.9138
  					],
  					[
  						22.4701,
  						49.9449
  					],
  					[
  						22.5648,
  						49.9628
  					],
  					[
  						22.5682,
  						49.9905
  					],
  					[
  						22.5513,
  						50.0115
  					],
  					[
  						22.5598,
  						50.0268
  					],
  					[
  						22.6004,
  						50.0418
  					],
  					[
  						22.6025,
  						50.095
  					],
  					[
  						22.5839,
  						50.132
  					],
  					[
  						22.608,
  						50.138
  					],
  					[
  						22.6698,
  						50.1288
  					],
  					[
  						22.7199,
  						50.1439
  					],
  					[
  						22.7635,
  						50.1434
  					],
  					[
  						22.7564,
  						50.167
  					],
  					[
  						22.7778,
  						50.1745
  					],
  					[
  						22.7259,
  						50.1928
  					],
  					[
  						22.7852,
  						50.2129
  					],
  					[
  						22.7978,
  						50.2094
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 301,
  			name: "powiat mielecki",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.4821,
  						50.4964
  					],
  					[
  						21.499,
  						50.4747
  					],
  					[
  						21.5345,
  						50.4489
  					],
  					[
  						21.5656,
  						50.4353
  					],
  					[
  						21.5507,
  						50.4009
  					],
  					[
  						21.5985,
  						50.3869
  					],
  					[
  						21.6376,
  						50.3432
  					],
  					[
  						21.6011,
  						50.3425
  					],
  					[
  						21.5668,
  						50.3323
  					],
  					[
  						21.5739,
  						50.2961
  					],
  					[
  						21.5304,
  						50.2948
  					],
  					[
  						21.5561,
  						50.2762
  					],
  					[
  						21.6102,
  						50.2497
  					],
  					[
  						21.5767,
  						50.2227
  					],
  					[
  						21.6027,
  						50.2091
  					],
  					[
  						21.609,
  						50.1777
  					],
  					[
  						21.5112,
  						50.1615
  					],
  					[
  						21.4805,
  						50.1686
  					],
  					[
  						21.3687,
  						50.1675
  					],
  					[
  						21.3652,
  						50.1536
  					],
  					[
  						21.3093,
  						50.1476
  					],
  					[
  						21.3022,
  						50.1313
  					],
  					[
  						21.2213,
  						50.1339
  					],
  					[
  						21.1533,
  						50.1492
  					],
  					[
  						21.1708,
  						50.1769
  					],
  					[
  						21.1708,
  						50.207
  					],
  					[
  						21.1422,
  						50.2377
  					],
  					[
  						21.1821,
  						50.2393
  					],
  					[
  						21.1481,
  						50.2553
  					],
  					[
  						21.1832,
  						50.2865
  					],
  					[
  						21.194,
  						50.3042
  					],
  					[
  						21.2225,
  						50.3109
  					],
  					[
  						21.2088,
  						50.3549
  					],
  					[
  						21.281,
  						50.4084
  					],
  					[
  						21.3671,
  						50.441
  					],
  					[
  						21.4013,
  						50.4392
  					],
  					[
  						21.4437,
  						50.4565
  					],
  					[
  						21.4427,
  						50.4847
  					],
  					[
  						21.4821,
  						50.4964
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 302,
  			name: "powiat Warszawa",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.9151,
  						52.354
  					],
  					[
  						20.9436,
  						52.3663
  					],
  					[
  						20.9713,
  						52.359
  					],
  					[
  						21.0057,
  						52.3641
  					],
  					[
  						21.0607,
  						52.3627
  					],
  					[
  						21.0852,
  						52.3374
  					],
  					[
  						21.0868,
  						52.3303
  					],
  					[
  						21.0778,
  						52.322
  					],
  					[
  						21.105,
  						52.274
  					],
  					[
  						21.1712,
  						52.2773
  					],
  					[
  						21.1904,
  						52.2562
  					],
  					[
  						21.2505,
  						52.2627
  					],
  					[
  						21.2505,
  						52.2226
  					],
  					[
  						21.2617,
  						52.2101
  					],
  					[
  						21.2402,
  						52.1959
  					],
  					[
  						21.2654,
  						52.186
  					],
  					[
  						21.2677,
  						52.1674
  					],
  					[
  						21.2488,
  						52.153
  					],
  					[
  						21.165,
  						52.1447
  					],
  					[
  						21.1325,
  						52.1232
  					],
  					[
  						21.0801,
  						52.0979
  					],
  					[
  						21.0437,
  						52.113
  					],
  					[
  						21.0187,
  						52.1037
  					],
  					[
  						20.9864,
  						52.1176
  					],
  					[
  						20.985,
  						52.1391
  					],
  					[
  						20.9374,
  						52.1602
  					],
  					[
  						20.9191,
  						52.1768
  					],
  					[
  						20.8672,
  						52.1825
  					],
  					[
  						20.8531,
  						52.1972
  					],
  					[
  						20.8709,
  						52.2089
  					],
  					[
  						20.8731,
  						52.2291
  					],
  					[
  						20.891,
  						52.247
  					],
  					[
  						20.8787,
  						52.2651
  					],
  					[
  						20.8758,
  						52.2987
  					],
  					[
  						20.895,
  						52.3213
  					],
  					[
  						20.9221,
  						52.3237
  					],
  					[
  						20.9151,
  						52.354
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 303,
  			name: "powiat krapkowicki",
  			province: "Opolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.1535,
  						50.3866
  					],
  					[
  						18.1255,
  						50.3705
  					],
  					[
  						18.0898,
  						50.4105
  					],
  					[
  						18.0679,
  						50.4169
  					],
  					[
  						18.0346,
  						50.3859
  					],
  					[
  						18.06,
  						50.3615
  					],
  					[
  						18.0323,
  						50.346
  					],
  					[
  						18.0266,
  						50.355
  					],
  					[
  						17.9656,
  						50.3592
  					],
  					[
  						17.9435,
  						50.3554
  					],
  					[
  						17.9244,
  						50.3729
  					],
  					[
  						17.8867,
  						50.3813
  					],
  					[
  						17.8574,
  						50.4123
  					],
  					[
  						17.8291,
  						50.4263
  					],
  					[
  						17.8165,
  						50.4099
  					],
  					[
  						17.775,
  						50.423
  					],
  					[
  						17.7535,
  						50.4212
  					],
  					[
  						17.7642,
  						50.4623
  					],
  					[
  						17.7575,
  						50.4858
  					],
  					[
  						17.8138,
  						50.5302
  					],
  					[
  						17.873,
  						50.5017
  					],
  					[
  						17.8971,
  						50.5462
  					],
  					[
  						18.0134,
  						50.5494
  					],
  					[
  						18.0424,
  						50.5623
  					],
  					[
  						18.0715,
  						50.5554
  					],
  					[
  						18.118,
  						50.5543
  					],
  					[
  						18.0908,
  						50.5118
  					],
  					[
  						18.1051,
  						50.4859
  					],
  					[
  						18.129,
  						50.4804
  					],
  					[
  						18.1466,
  						50.4563
  					],
  					[
  						18.1479,
  						50.4297
  					],
  					[
  						18.1604,
  						50.3999
  					],
  					[
  						18.1535,
  						50.3866
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 304,
  			name: "powiat moniecki",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.7113,
  						53.6265
  					],
  					[
  						22.7452,
  						53.632
  					],
  					[
  						22.7812,
  						53.653
  					],
  					[
  						22.7766,
  						53.6673
  					],
  					[
  						22.8442,
  						53.6866
  					],
  					[
  						22.8775,
  						53.6748
  					],
  					[
  						22.8874,
  						53.603
  					],
  					[
  						22.8739,
  						53.5829
  					],
  					[
  						22.8993,
  						53.5701
  					],
  					[
  						22.9298,
  						53.5849
  					],
  					[
  						22.9325,
  						53.5809
  					],
  					[
  						22.9578,
  						53.5914
  					],
  					[
  						22.9972,
  						53.5781
  					],
  					[
  						23.003,
  						53.5562
  					],
  					[
  						23.0225,
  						53.5344
  					],
  					[
  						23.0536,
  						53.526
  					],
  					[
  						23.074,
  						53.4961
  					],
  					[
  						23.0642,
  						53.4506
  					],
  					[
  						23.0584,
  						53.4019
  					],
  					[
  						23.1093,
  						53.3976
  					],
  					[
  						23.0942,
  						53.3463
  					],
  					[
  						23.1178,
  						53.3392
  					],
  					[
  						23.1097,
  						53.3196
  					],
  					[
  						23.0813,
  						53.3276
  					],
  					[
  						23.0775,
  						53.3061
  					],
  					[
  						23.028,
  						53.2997
  					],
  					[
  						23.0246,
  						53.2805
  					],
  					[
  						22.9781,
  						53.2874
  					],
  					[
  						22.9213,
  						53.2601
  					],
  					[
  						22.885,
  						53.227
  					],
  					[
  						22.8119,
  						53.2236
  					],
  					[
  						22.78,
  						53.2143
  					],
  					[
  						22.7707,
  						53.2374
  					],
  					[
  						22.7419,
  						53.2499
  					],
  					[
  						22.7396,
  						53.2678
  					],
  					[
  						22.7097,
  						53.2772
  					],
  					[
  						22.6656,
  						53.2448
  					],
  					[
  						22.6418,
  						53.2491
  					],
  					[
  						22.6175,
  						53.2361
  					],
  					[
  						22.6059,
  						53.2108
  					],
  					[
  						22.5644,
  						53.2091
  					],
  					[
  						22.5446,
  						53.2206
  					],
  					[
  						22.4797,
  						53.2134
  					],
  					[
  						22.4303,
  						53.2177
  					],
  					[
  						22.448,
  						53.2417
  					],
  					[
  						22.4666,
  						53.2888
  					],
  					[
  						22.4705,
  						53.3339
  					],
  					[
  						22.4976,
  						53.3486
  					],
  					[
  						22.5085,
  						53.366
  					],
  					[
  						22.5233,
  						53.3805
  					],
  					[
  						22.5437,
  						53.4044
  					],
  					[
  						22.5372,
  						53.4308
  					],
  					[
  						22.5685,
  						53.4412
  					],
  					[
  						22.5752,
  						53.454
  					],
  					[
  						22.6116,
  						53.4649
  					],
  					[
  						22.6079,
  						53.4875
  					],
  					[
  						22.6446,
  						53.5207
  					],
  					[
  						22.6347,
  						53.5293
  					],
  					[
  						22.6988,
  						53.5685
  					],
  					[
  						22.7273,
  						53.5786
  					],
  					[
  						22.6737,
  						53.5952
  					],
  					[
  						22.6701,
  						53.6045
  					],
  					[
  						22.7113,
  						53.6265
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 305,
  			name: "powiat kielecki",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.6047,
  						51.0514
  					],
  					[
  						20.65,
  						51.0626
  					],
  					[
  						20.6721,
  						51.0495
  					],
  					[
  						20.6406,
  						51.0284
  					],
  					[
  						20.6864,
  						51.0109
  					],
  					[
  						20.7103,
  						51.0266
  					],
  					[
  						20.7396,
  						51.0092
  					],
  					[
  						20.7375,
  						50.9776
  					],
  					[
  						20.761,
  						50.9756
  					],
  					[
  						20.7641,
  						50.9498
  					],
  					[
  						20.7944,
  						50.9501
  					],
  					[
  						20.8331,
  						50.9346
  					],
  					[
  						20.8549,
  						50.9567
  					],
  					[
  						20.8283,
  						50.9629
  					],
  					[
  						20.8388,
  						50.9961
  					],
  					[
  						20.8568,
  						50.9994
  					],
  					[
  						20.8792,
  						51.0221
  					],
  					[
  						20.9016,
  						51.0247
  					],
  					[
  						20.9018,
  						51.025
  					],
  					[
  						20.9132,
  						51.0318
  					],
  					[
  						20.9604,
  						51.013
  					],
  					[
  						20.9701,
  						50.9921
  					],
  					[
  						21.0002,
  						50.9726
  					],
  					[
  						21.0084,
  						50.9521
  					],
  					[
  						21.0044,
  						50.9527
  					],
  					[
  						21.0044,
  						50.9526
  					],
  					[
  						21.0043,
  						50.9526
  					],
  					[
  						21.0044,
  						50.9526
  					],
  					[
  						21.0043,
  						50.9526
  					],
  					[
  						21.004,
  						50.9525
  					],
  					[
  						20.9944,
  						50.9204
  					],
  					[
  						21.027,
  						50.8999
  					],
  					[
  						21.0396,
  						50.9005
  					],
  					[
  						21.1236,
  						50.9096
  					],
  					[
  						21.1346,
  						50.9119
  					],
  					[
  						21.1581,
  						50.9079
  					],
  					[
  						21.1611,
  						50.8919
  					],
  					[
  						21.1378,
  						50.8888
  					],
  					[
  						21.1415,
  						50.8457
  					],
  					[
  						21.1329,
  						50.8222
  					],
  					[
  						21.1462,
  						50.8115
  					],
  					[
  						21.1357,
  						50.7643
  					],
  					[
  						21.1697,
  						50.7497
  					],
  					[
  						21.1373,
  						50.7205
  					],
  					[
  						21.1458,
  						50.6988
  					],
  					[
  						21.1622,
  						50.6921
  					],
  					[
  						21.1622,
  						50.6922
  					],
  					[
  						21.1622,
  						50.6921
  					],
  					[
  						21.1575,
  						50.6474
  					],
  					[
  						21.141,
  						50.6379
  					],
  					[
  						21.0671,
  						50.6301
  					],
  					[
  						21.0354,
  						50.6457
  					],
  					[
  						20.9959,
  						50.633
  					],
  					[
  						20.9969,
  						50.6689
  					],
  					[
  						20.9553,
  						50.6727
  					],
  					[
  						20.9445,
  						50.6583
  					],
  					[
  						20.9052,
  						50.6547
  					],
  					[
  						20.8781,
  						50.6614
  					],
  					[
  						20.8741,
  						50.6357
  					],
  					[
  						20.8272,
  						50.6342
  					],
  					[
  						20.8165,
  						50.5918
  					],
  					[
  						20.7971,
  						50.578
  					],
  					[
  						20.8021,
  						50.558
  					],
  					[
  						20.7746,
  						50.5366
  					],
  					[
  						20.7494,
  						50.5437
  					],
  					[
  						20.7523,
  						50.5631
  					],
  					[
  						20.7065,
  						50.5615
  					],
  					[
  						20.6844,
  						50.5463
  					],
  					[
  						20.6411,
  						50.5571
  					],
  					[
  						20.6257,
  						50.5706
  					],
  					[
  						20.6309,
  						50.587
  					],
  					[
  						20.6585,
  						50.5917
  					],
  					[
  						20.6588,
  						50.6152
  					],
  					[
  						20.6421,
  						50.64
  					],
  					[
  						20.6479,
  						50.661
  					],
  					[
  						20.6266,
  						50.6703
  					],
  					[
  						20.5843,
  						50.6679
  					],
  					[
  						20.5568,
  						50.6892
  					],
  					[
  						20.5605,
  						50.6988
  					],
  					[
  						20.5175,
  						50.7081
  					],
  					[
  						20.5145,
  						50.718
  					],
  					[
  						20.4744,
  						50.7307
  					],
  					[
  						20.4632,
  						50.7417
  					],
  					[
  						20.419,
  						50.747
  					],
  					[
  						20.3816,
  						50.7827
  					],
  					[
  						20.3234,
  						50.7994
  					],
  					[
  						20.3077,
  						50.8483
  					],
  					[
  						20.2727,
  						50.8643
  					],
  					[
  						20.2496,
  						50.8653
  					],
  					[
  						20.2018,
  						50.8717
  					],
  					[
  						20.2261,
  						50.9009
  					],
  					[
  						20.2042,
  						50.9207
  					],
  					[
  						20.1636,
  						50.9363
  					],
  					[
  						20.1289,
  						50.9419
  					],
  					[
  						20.1063,
  						50.9615
  					],
  					[
  						20.118,
  						50.9846
  					],
  					[
  						20.1925,
  						50.9748
  					],
  					[
  						20.2413,
  						51.0104
  					],
  					[
  						20.2744,
  						51.0056
  					],
  					[
  						20.278,
  						50.9921
  					],
  					[
  						20.3477,
  						51.0086
  					],
  					[
  						20.3848,
  						51.034
  					],
  					[
  						20.4301,
  						51.0355
  					],
  					[
  						20.4518,
  						51.0526
  					],
  					[
  						20.508,
  						51.0617
  					],
  					[
  						20.5161,
  						51.051
  					],
  					[
  						20.6047,
  						51.0514
  					]
  				],
  				[
  					[
  						20.7205,
  						50.8623
  					],
  					[
  						20.6774,
  						50.8629
  					],
  					[
  						20.6601,
  						50.9034
  					],
  					[
  						20.6165,
  						50.9123
  					],
  					[
  						20.5499,
  						50.9024
  					],
  					[
  						20.528,
  						50.8734
  					],
  					[
  						20.516,
  						50.8409
  					],
  					[
  						20.5353,
  						50.8389
  					],
  					[
  						20.5532,
  						50.8128
  					],
  					[
  						20.5887,
  						50.8169
  					],
  					[
  						20.6151,
  						50.8055
  					],
  					[
  						20.6453,
  						50.8073
  					],
  					[
  						20.6729,
  						50.8441
  					],
  					[
  						20.7205,
  						50.8623
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 306,
  			name: "powiat wrzesiński",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.3687,
  						52.3453
  					],
  					[
  						17.3751,
  						52.379
  					],
  					[
  						17.3468,
  						52.4033
  					],
  					[
  						17.3818,
  						52.4188
  					],
  					[
  						17.4409,
  						52.4011
  					],
  					[
  						17.4533,
  						52.3824
  					],
  					[
  						17.4793,
  						52.3791
  					],
  					[
  						17.4773,
  						52.4108
  					],
  					[
  						17.5496,
  						52.4097
  					],
  					[
  						17.5969,
  						52.3925
  					],
  					[
  						17.644,
  						52.3905
  					],
  					[
  						17.7006,
  						52.3755
  					],
  					[
  						17.6965,
  						52.3487
  					],
  					[
  						17.7257,
  						52.3062
  					],
  					[
  						17.6924,
  						52.2958
  					],
  					[
  						17.7161,
  						52.2706
  					],
  					[
  						17.7657,
  						52.258
  					],
  					[
  						17.7818,
  						52.2472
  					],
  					[
  						17.7407,
  						52.2249
  					],
  					[
  						17.7657,
  						52.2
  					],
  					[
  						17.8001,
  						52.191
  					],
  					[
  						17.8301,
  						52.1925
  					],
  					[
  						17.8227,
  						52.1637
  					],
  					[
  						17.779,
  						52.1393
  					],
  					[
  						17.7707,
  						52.1093
  					],
  					[
  						17.8235,
  						52.0881
  					],
  					[
  						17.7731,
  						52.0764
  					],
  					[
  						17.7064,
  						52.0719
  					],
  					[
  						17.6969,
  						52.0631
  					],
  					[
  						17.657,
  						52.1112
  					],
  					[
  						17.6662,
  						52.1398
  					],
  					[
  						17.6246,
  						52.1449
  					],
  					[
  						17.5692,
  						52.1402
  					],
  					[
  						17.5478,
  						52.1445
  					],
  					[
  						17.5144,
  						52.1241
  					],
  					[
  						17.4656,
  						52.112
  					],
  					[
  						17.4704,
  						52.1395
  					],
  					[
  						17.4485,
  						52.1452
  					],
  					[
  						17.4256,
  						52.1765
  					],
  					[
  						17.4306,
  						52.1944
  					],
  					[
  						17.4653,
  						52.1981
  					],
  					[
  						17.4527,
  						52.2443
  					],
  					[
  						17.4792,
  						52.2543
  					],
  					[
  						17.4071,
  						52.2851
  					],
  					[
  						17.3999,
  						52.3139
  					],
  					[
  						17.4191,
  						52.324
  					],
  					[
  						17.4035,
  						52.3388
  					],
  					[
  						17.3687,
  						52.3453
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 307,
  			name: "powiat gnieźnieński",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.4585,
  						52.7389
  					],
  					[
  						17.488,
  						52.7293
  					],
  					[
  						17.4672,
  						52.6804
  					],
  					[
  						17.5008,
  						52.6846
  					],
  					[
  						17.5168,
  						52.6742
  					],
  					[
  						17.544,
  						52.6896
  					],
  					[
  						17.6146,
  						52.703
  					],
  					[
  						17.6404,
  						52.6924
  					],
  					[
  						17.6314,
  						52.6791
  					],
  					[
  						17.6465,
  						52.6448
  					],
  					[
  						17.6776,
  						52.6486
  					],
  					[
  						17.6824,
  						52.6238
  					],
  					[
  						17.7092,
  						52.612
  					],
  					[
  						17.7491,
  						52.6325
  					],
  					[
  						17.739,
  						52.6509
  					],
  					[
  						17.7867,
  						52.6515
  					],
  					[
  						17.8446,
  						52.6282
  					],
  					[
  						17.8765,
  						52.6286
  					],
  					[
  						17.909,
  						52.608
  					],
  					[
  						17.9015,
  						52.5856
  					],
  					[
  						17.9463,
  						52.5783
  					],
  					[
  						17.9872,
  						52.5533
  					],
  					[
  						17.9417,
  						52.5234
  					],
  					[
  						17.9107,
  						52.5167
  					],
  					[
  						17.9118,
  						52.4773
  					],
  					[
  						17.9225,
  						52.4711
  					],
  					[
  						17.9088,
  						52.4444
  					],
  					[
  						17.8635,
  						52.4273
  					],
  					[
  						17.8513,
  						52.4055
  					],
  					[
  						17.853,
  						52.3879
  					],
  					[
  						17.7751,
  						52.3683
  					],
  					[
  						17.7397,
  						52.3767
  					],
  					[
  						17.7006,
  						52.3755
  					],
  					[
  						17.644,
  						52.3905
  					],
  					[
  						17.5969,
  						52.3925
  					],
  					[
  						17.5496,
  						52.4097
  					],
  					[
  						17.4773,
  						52.4108
  					],
  					[
  						17.4793,
  						52.3791
  					],
  					[
  						17.4533,
  						52.3824
  					],
  					[
  						17.4409,
  						52.4011
  					],
  					[
  						17.3818,
  						52.4188
  					],
  					[
  						17.3977,
  						52.4402
  					],
  					[
  						17.3735,
  						52.4497
  					],
  					[
  						17.3703,
  						52.4665
  					],
  					[
  						17.3384,
  						52.4787
  					],
  					[
  						17.3604,
  						52.4934
  					],
  					[
  						17.3255,
  						52.5092
  					],
  					[
  						17.3563,
  						52.5255
  					],
  					[
  						17.3159,
  						52.5451
  					],
  					[
  						17.2786,
  						52.5393
  					],
  					[
  						17.2623,
  						52.5501
  					],
  					[
  						17.2189,
  						52.5416
  					],
  					[
  						17.1863,
  						52.553
  					],
  					[
  						17.1514,
  						52.574
  					],
  					[
  						17.1853,
  						52.5764
  					],
  					[
  						17.2278,
  						52.5913
  					],
  					[
  						17.2362,
  						52.6095
  					],
  					[
  						17.2739,
  						52.6313
  					],
  					[
  						17.3332,
  						52.6497
  					],
  					[
  						17.3355,
  						52.6739
  					],
  					[
  						17.3681,
  						52.6828
  					],
  					[
  						17.4363,
  						52.6892
  					],
  					[
  						17.4357,
  						52.7246
  					],
  					[
  						17.4585,
  						52.7389
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 308,
  			name: "powiat malborski",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.2177,
  						54.1161
  					],
  					[
  						19.2555,
  						54.0857
  					],
  					[
  						19.2254,
  						54.0771
  					],
  					[
  						19.2663,
  						54.051
  					],
  					[
  						19.268,
  						54.0251
  					],
  					[
  						19.2143,
  						54.0101
  					],
  					[
  						19.1261,
  						54.0238
  					],
  					[
  						19.0901,
  						54.0091
  					],
  					[
  						19.071,
  						53.992
  					],
  					[
  						19.044,
  						54.0057
  					],
  					[
  						19.0291,
  						53.9887
  					],
  					[
  						18.9821,
  						54.001
  					],
  					[
  						18.9493,
  						53.9886
  					],
  					[
  						18.9275,
  						53.9677
  					],
  					[
  						18.9102,
  						53.9697
  					],
  					[
  						18.8892,
  						53.9465
  					],
  					[
  						18.8613,
  						53.9468
  					],
  					[
  						18.8645,
  						53.9746
  					],
  					[
  						18.8373,
  						53.9946
  					],
  					[
  						18.8369,
  						54.0185
  					],
  					[
  						18.8169,
  						54.044
  					],
  					[
  						18.8074,
  						54.0975
  					],
  					[
  						18.8282,
  						54.1416
  					],
  					[
  						18.8366,
  						54.1555
  					],
  					[
  						18.863,
  						54.1525
  					],
  					[
  						18.9507,
  						54.1773
  					],
  					[
  						18.977,
  						54.1673
  					],
  					[
  						19.0013,
  						54.1829
  					],
  					[
  						19.0439,
  						54.1663
  					],
  					[
  						19.0675,
  						54.1449
  					],
  					[
  						19.1452,
  						54.1466
  					],
  					[
  						19.1553,
  						54.137
  					],
  					[
  						19.2114,
  						54.1451
  					],
  					[
  						19.2177,
  						54.1161
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 309,
  			name: "powiat lidzbarski",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.3936,
  						54.2219
  					],
  					[
  						20.4084,
  						54.2086
  					],
  					[
  						20.4682,
  						54.1958
  					],
  					[
  						20.4701,
  						54.1946
  					],
  					[
  						20.4925,
  						54.1854
  					],
  					[
  						20.4979,
  						54.186
  					],
  					[
  						20.4998,
  						54.1866
  					],
  					[
  						20.5072,
  						54.1895
  					],
  					[
  						20.5095,
  						54.1902
  					],
  					[
  						20.5181,
  						54.1904
  					],
  					[
  						20.5794,
  						54.2
  					],
  					[
  						20.5916,
  						54.192
  					],
  					[
  						20.6763,
  						54.2107
  					],
  					[
  						20.6927,
  						54.1987
  					],
  					[
  						20.7332,
  						54.2134
  					],
  					[
  						20.7512,
  						54.1886
  					],
  					[
  						20.7949,
  						54.1458
  					],
  					[
  						20.7926,
  						54.1253
  					],
  					[
  						20.8168,
  						54.1188
  					],
  					[
  						20.804,
  						54.0831
  					],
  					[
  						20.7806,
  						54.074
  					],
  					[
  						20.7511,
  						54.0725
  					],
  					[
  						20.7254,
  						54.0469
  					],
  					[
  						20.7223,
  						54.0274
  					],
  					[
  						20.6415,
  						53.9994
  					],
  					[
  						20.5813,
  						54.0028
  					],
  					[
  						20.5492,
  						54.0109
  					],
  					[
  						20.5013,
  						54.0089
  					],
  					[
  						20.5011,
  						54.0269
  					],
  					[
  						20.4659,
  						54.0309
  					],
  					[
  						20.4695,
  						54.0646
  					],
  					[
  						20.3714,
  						54.1037
  					],
  					[
  						20.3557,
  						54.0705
  					],
  					[
  						20.3757,
  						54.0504
  					],
  					[
  						20.3172,
  						54.043
  					],
  					[
  						20.2755,
  						54.0135
  					],
  					[
  						20.2732,
  						53.9886
  					],
  					[
  						20.2291,
  						53.9829
  					],
  					[
  						20.2158,
  						54.0003
  					],
  					[
  						20.161,
  						53.9848
  					],
  					[
  						20.143,
  						54.0107
  					],
  					[
  						20.138,
  						54.0437
  					],
  					[
  						20.1105,
  						54.0537
  					],
  					[
  						20.0928,
  						54.0762
  					],
  					[
  						20.0582,
  						54.0769
  					],
  					[
  						20.0371,
  						54.1076
  					],
  					[
  						19.996,
  						54.112
  					],
  					[
  						19.9791,
  						54.1338
  					],
  					[
  						19.9535,
  						54.1401
  					],
  					[
  						19.9436,
  						54.1631
  					],
  					[
  						19.9545,
  						54.1766
  					],
  					[
  						19.9911,
  						54.1774
  					],
  					[
  						19.9993,
  						54.1927
  					],
  					[
  						20.0364,
  						54.1759
  					],
  					[
  						20.0867,
  						54.1781
  					],
  					[
  						20.1279,
  						54.17
  					],
  					[
  						20.1249,
  						54.1927
  					],
  					[
  						20.1859,
  						54.2023
  					],
  					[
  						20.2683,
  						54.1824
  					],
  					[
  						20.3327,
  						54.1873
  					],
  					[
  						20.3398,
  						54.2159
  					],
  					[
  						20.3936,
  						54.2219
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 310,
  			name: "powiat olsztyński",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.161,
  						53.9848
  					],
  					[
  						20.2158,
  						54.0003
  					],
  					[
  						20.2291,
  						53.9829
  					],
  					[
  						20.2732,
  						53.9886
  					],
  					[
  						20.2755,
  						54.0135
  					],
  					[
  						20.3172,
  						54.043
  					],
  					[
  						20.3757,
  						54.0504
  					],
  					[
  						20.3557,
  						54.0705
  					],
  					[
  						20.3714,
  						54.1037
  					],
  					[
  						20.4695,
  						54.0646
  					],
  					[
  						20.4659,
  						54.0309
  					],
  					[
  						20.5011,
  						54.0269
  					],
  					[
  						20.5013,
  						54.0089
  					],
  					[
  						20.5492,
  						54.0109
  					],
  					[
  						20.5813,
  						54.0028
  					],
  					[
  						20.6415,
  						53.9994
  					],
  					[
  						20.7223,
  						54.0274
  					],
  					[
  						20.7254,
  						54.0469
  					],
  					[
  						20.7511,
  						54.0725
  					],
  					[
  						20.7806,
  						54.074
  					],
  					[
  						20.7926,
  						54.0348
  					],
  					[
  						20.8441,
  						54.0229
  					],
  					[
  						20.8561,
  						54.039
  					],
  					[
  						20.8808,
  						54.0414
  					],
  					[
  						20.9209,
  						54.0296
  					],
  					[
  						20.9463,
  						54.0503
  					],
  					[
  						20.9937,
  						54.0288
  					],
  					[
  						21.0359,
  						54.0569
  					],
  					[
  						21.0595,
  						54.0358
  					],
  					[
  						21.0821,
  						54.0371
  					],
  					[
  						21.0864,
  						53.9978
  					],
  					[
  						21.1229,
  						53.9866
  					],
  					[
  						21.1063,
  						53.9603
  					],
  					[
  						21.1277,
  						53.9385
  					],
  					[
  						21.0759,
  						53.8802
  					],
  					[
  						21.0514,
  						53.8667
  					],
  					[
  						21.083,
  						53.8251
  					],
  					[
  						21.1042,
  						53.8247
  					],
  					[
  						21.1048,
  						53.7705
  					],
  					[
  						21.067,
  						53.7636
  					],
  					[
  						21.0528,
  						53.791
  					],
  					[
  						20.9705,
  						53.7645
  					],
  					[
  						20.9585,
  						53.7835
  					],
  					[
  						20.9088,
  						53.7794
  					],
  					[
  						20.8356,
  						53.7378
  					],
  					[
  						20.7708,
  						53.6928
  					],
  					[
  						20.7592,
  						53.6951
  					],
  					[
  						20.7012,
  						53.6608
  					],
  					[
  						20.6882,
  						53.6293
  					],
  					[
  						20.7179,
  						53.6046
  					],
  					[
  						20.6536,
  						53.618
  					],
  					[
  						20.6478,
  						53.5955
  					],
  					[
  						20.6184,
  						53.5663
  					],
  					[
  						20.5975,
  						53.5565
  					],
  					[
  						20.5987,
  						53.5307
  					],
  					[
  						20.5575,
  						53.5216
  					],
  					[
  						20.511,
  						53.5307
  					],
  					[
  						20.4724,
  						53.5192
  					],
  					[
  						20.4667,
  						53.4876
  					],
  					[
  						20.4415,
  						53.4957
  					],
  					[
  						20.3679,
  						53.4963
  					],
  					[
  						20.368,
  						53.4963
  					],
  					[
  						20.3679,
  						53.4963
  					],
  					[
  						20.3728,
  						53.4697
  					],
  					[
  						20.3501,
  						53.4622
  					],
  					[
  						20.2601,
  						53.4648
  					],
  					[
  						20.2333,
  						53.4723
  					],
  					[
  						20.268,
  						53.49
  					],
  					[
  						20.2286,
  						53.5227
  					],
  					[
  						20.1701,
  						53.5467
  					],
  					[
  						20.1656,
  						53.5636
  					],
  					[
  						20.1156,
  						53.6154
  					],
  					[
  						20.1436,
  						53.6391
  					],
  					[
  						20.1332,
  						53.6667
  					],
  					[
  						20.1435,
  						53.7026
  					],
  					[
  						20.1129,
  						53.7127
  					],
  					[
  						20.1452,
  						53.7328
  					],
  					[
  						20.1177,
  						53.7508
  					],
  					[
  						20.1119,
  						53.7664
  					],
  					[
  						20.1594,
  						53.768
  					],
  					[
  						20.1551,
  						53.7906
  					],
  					[
  						20.1225,
  						53.8362
  					],
  					[
  						20.1291,
  						53.8504
  					],
  					[
  						20.1731,
  						53.8631
  					],
  					[
  						20.1778,
  						53.8822
  					],
  					[
  						20.1381,
  						53.8865
  					],
  					[
  						20.1107,
  						53.9024
  					],
  					[
  						20.1158,
  						53.9277
  					],
  					[
  						20.151,
  						53.9643
  					],
  					[
  						20.161,
  						53.9848
  					]
  				],
  				[
  					[
  						20.3881,
  						53.8091
  					],
  					[
  						20.4079,
  						53.7606
  					],
  					[
  						20.4801,
  						53.7338
  					],
  					[
  						20.5261,
  						53.7344
  					],
  					[
  						20.5666,
  						53.7854
  					],
  					[
  						20.553,
  						53.8065
  					],
  					[
  						20.481,
  						53.8285
  					],
  					[
  						20.457,
  						53.8133
  					],
  					[
  						20.4358,
  						53.8282
  					],
  					[
  						20.3881,
  						53.8091
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 311,
  			name: "powiat sławieński",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.6991,
  						54.5692
  					],
  					[
  						16.7481,
  						54.5276
  					],
  					[
  						16.7392,
  						54.5177
  					],
  					[
  						16.7566,
  						54.4946
  					],
  					[
  						16.7933,
  						54.4874
  					],
  					[
  						16.8275,
  						54.4648
  					],
  					[
  						16.8411,
  						54.4384
  					],
  					[
  						16.8244,
  						54.4157
  					],
  					[
  						16.8586,
  						54.3826
  					],
  					[
  						16.8215,
  						54.3683
  					],
  					[
  						16.8231,
  						54.3379
  					],
  					[
  						16.8229,
  						54.3379
  					],
  					[
  						16.8231,
  						54.3379
  					],
  					[
  						16.8139,
  						54.3186
  					],
  					[
  						16.8543,
  						54.3076
  					],
  					[
  						16.8651,
  						54.261
  					],
  					[
  						16.8313,
  						54.2458
  					],
  					[
  						16.7317,
  						54.2319
  					],
  					[
  						16.7105,
  						54.242
  					],
  					[
  						16.6796,
  						54.2134
  					],
  					[
  						16.6163,
  						54.223
  					],
  					[
  						16.6056,
  						54.1931
  					],
  					[
  						16.5466,
  						54.1909
  					],
  					[
  						16.57,
  						54.2201
  					],
  					[
  						16.529,
  						54.2378
  					],
  					[
  						16.4956,
  						54.2391
  					],
  					[
  						16.4733,
  						54.2228
  					],
  					[
  						16.438,
  						54.2126
  					],
  					[
  						16.4136,
  						54.2176
  					],
  					[
  						16.4438,
  						54.2501
  					],
  					[
  						16.3966,
  						54.2549
  					],
  					[
  						16.4121,
  						54.2809
  					],
  					[
  						16.3947,
  						54.2923
  					],
  					[
  						16.3356,
  						54.2873
  					],
  					[
  						16.319,
  						54.3211
  					],
  					[
  						16.2762,
  						54.3337
  					],
  					[
  						16.2516,
  						54.3148
  					],
  					[
  						16.2142,
  						54.3207
  					],
  					[
  						16.3138,
  						54.3834
  					],
  					[
  						16.3575,
  						54.4206
  					],
  					[
  						16.3716,
  						54.4414
  					],
  					[
  						16.3946,
  						54.4477
  					],
  					[
  						16.4315,
  						54.487
  					],
  					[
  						16.4797,
  						54.5164
  					],
  					[
  						16.5299,
  						54.5407
  					],
  					[
  						16.6145,
  						54.5598
  					],
  					[
  						16.6991,
  						54.5692
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 312,
  			name: "powiat działdowski",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.2011,
  						53.3952
  					],
  					[
  						20.1801,
  						53.3304
  					],
  					[
  						20.2301,
  						53.3061
  					],
  					[
  						20.2571,
  						53.2774
  					],
  					[
  						20.2429,
  						53.2544
  					],
  					[
  						20.2476,
  						53.2383
  					],
  					[
  						20.338,
  						53.2229
  					],
  					[
  						20.388,
  						53.2379
  					],
  					[
  						20.4111,
  						53.2142
  					],
  					[
  						20.3701,
  						53.1773
  					],
  					[
  						20.3261,
  						53.1606
  					],
  					[
  						20.3538,
  						53.1471
  					],
  					[
  						20.2902,
  						53.1391
  					],
  					[
  						20.1653,
  						53.1558
  					],
  					[
  						20.1351,
  						53.1425
  					],
  					[
  						20.1042,
  						53.1681
  					],
  					[
  						20.0762,
  						53.1573
  					],
  					[
  						20.0387,
  						53.1592
  					],
  					[
  						19.9782,
  						53.1439
  					],
  					[
  						19.9548,
  						53.1602
  					],
  					[
  						19.9074,
  						53.177
  					],
  					[
  						19.9134,
  						53.2115
  					],
  					[
  						19.8707,
  						53.2009
  					],
  					[
  						19.8254,
  						53.1733
  					],
  					[
  						19.8388,
  						53.1414
  					],
  					[
  						19.7776,
  						53.155
  					],
  					[
  						19.7616,
  						53.1518
  					],
  					[
  						19.7417,
  						53.1888
  					],
  					[
  						19.7436,
  						53.2282
  					],
  					[
  						19.6891,
  						53.2361
  					],
  					[
  						19.6833,
  						53.2584
  					],
  					[
  						19.7188,
  						53.2793
  					],
  					[
  						19.7181,
  						53.3021
  					],
  					[
  						19.7386,
  						53.3029
  					],
  					[
  						19.7569,
  						53.3212
  					],
  					[
  						19.7968,
  						53.3349
  					],
  					[
  						19.7945,
  						53.3524
  					],
  					[
  						19.849,
  						53.3535
  					],
  					[
  						19.8307,
  						53.3955
  					],
  					[
  						19.8606,
  						53.4292
  					],
  					[
  						19.904,
  						53.436
  					],
  					[
  						19.948,
  						53.4384
  					],
  					[
  						19.9773,
  						53.4345
  					],
  					[
  						19.9786,
  						53.4146
  					],
  					[
  						20.0265,
  						53.3943
  					],
  					[
  						20.0619,
  						53.3925
  					],
  					[
  						20.092,
  						53.3785
  					],
  					[
  						20.1117,
  						53.4149
  					],
  					[
  						20.1346,
  						53.4241
  					],
  					[
  						20.2011,
  						53.3952
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 313,
  			name: "powiat górowski",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.8284,
  						51.5722
  					],
  					[
  						16.7917,
  						51.5287
  					],
  					[
  						16.8208,
  						51.513
  					],
  					[
  						16.7862,
  						51.5049
  					],
  					[
  						16.7642,
  						51.4854
  					],
  					[
  						16.6945,
  						51.4966
  					],
  					[
  						16.6421,
  						51.4923
  					],
  					[
  						16.6499,
  						51.515
  					],
  					[
  						16.6012,
  						51.5156
  					],
  					[
  						16.5906,
  						51.5048
  					],
  					[
  						16.5406,
  						51.5112
  					],
  					[
  						16.4673,
  						51.5015
  					],
  					[
  						16.4822,
  						51.5161
  					],
  					[
  						16.4594,
  						51.5253
  					],
  					[
  						16.4516,
  						51.542
  					],
  					[
  						16.4633,
  						51.5595
  					],
  					[
  						16.4322,
  						51.5757
  					],
  					[
  						16.3892,
  						51.5877
  					],
  					[
  						16.3916,
  						51.6106
  					],
  					[
  						16.3554,
  						51.6092
  					],
  					[
  						16.3344,
  						51.617
  					],
  					[
  						16.3321,
  						51.6438
  					],
  					[
  						16.3052,
  						51.6602
  					],
  					[
  						16.2701,
  						51.6635
  					],
  					[
  						16.2694,
  						51.6847
  					],
  					[
  						16.3476,
  						51.7091
  					],
  					[
  						16.3765,
  						51.7626
  					],
  					[
  						16.4162,
  						51.7849
  					],
  					[
  						16.4492,
  						51.788
  					],
  					[
  						16.5452,
  						51.7801
  					],
  					[
  						16.5767,
  						51.7686
  					],
  					[
  						16.5806,
  						51.7521
  					],
  					[
  						16.6399,
  						51.735
  					],
  					[
  						16.6449,
  						51.722
  					],
  					[
  						16.6824,
  						51.7049
  					],
  					[
  						16.6422,
  						51.6835
  					],
  					[
  						16.6392,
  						51.666
  					],
  					[
  						16.6814,
  						51.6469
  					],
  					[
  						16.7259,
  						51.6478
  					],
  					[
  						16.7833,
  						51.641
  					],
  					[
  						16.772,
  						51.6136
  					],
  					[
  						16.7996,
  						51.6035
  					],
  					[
  						16.8284,
  						51.5722
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 314,
  			name: "powiat sztumski",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.576,
  						53.9483
  					],
  					[
  						19.5813,
  						53.9271
  					],
  					[
  						19.5603,
  						53.9167
  					],
  					[
  						19.5528,
  						53.8942
  					],
  					[
  						19.5335,
  						53.8801
  					],
  					[
  						19.513,
  						53.8421
  					],
  					[
  						19.4796,
  						53.8168
  					],
  					[
  						19.5004,
  						53.8066
  					],
  					[
  						19.4719,
  						53.7849
  					],
  					[
  						19.4542,
  						53.7976
  					],
  					[
  						19.3707,
  						53.8142
  					],
  					[
  						19.323,
  						53.8139
  					],
  					[
  						19.2628,
  						53.823
  					],
  					[
  						19.2111,
  						53.8391
  					],
  					[
  						19.1724,
  						53.8415
  					],
  					[
  						19.1256,
  						53.8151
  					],
  					[
  						19.0997,
  						53.8136
  					],
  					[
  						19.0798,
  						53.8262
  					],
  					[
  						19.0551,
  						53.86
  					],
  					[
  						19.0319,
  						53.8669
  					],
  					[
  						19.0058,
  						53.8537
  					],
  					[
  						18.9929,
  						53.8802
  					],
  					[
  						18.9613,
  						53.8964
  					],
  					[
  						18.8787,
  						53.91
  					],
  					[
  						18.8617,
  						53.9279
  					],
  					[
  						18.8613,
  						53.9468
  					],
  					[
  						18.8892,
  						53.9465
  					],
  					[
  						18.9102,
  						53.9697
  					],
  					[
  						18.9275,
  						53.9677
  					],
  					[
  						18.9493,
  						53.9886
  					],
  					[
  						18.9821,
  						54.001
  					],
  					[
  						19.0291,
  						53.9887
  					],
  					[
  						19.044,
  						54.0057
  					],
  					[
  						19.071,
  						53.992
  					],
  					[
  						19.0901,
  						54.0091
  					],
  					[
  						19.1261,
  						54.0238
  					],
  					[
  						19.2143,
  						54.0101
  					],
  					[
  						19.268,
  						54.0251
  					],
  					[
  						19.3201,
  						54.0271
  					],
  					[
  						19.3602,
  						54.0045
  					],
  					[
  						19.3777,
  						53.985
  					],
  					[
  						19.3658,
  						53.9608
  					],
  					[
  						19.3738,
  						53.9354
  					],
  					[
  						19.4168,
  						53.9263
  					],
  					[
  						19.4587,
  						53.9421
  					],
  					[
  						19.576,
  						53.9483
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 315,
  			name: "powiat kwidzyński",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.8787,
  						53.91
  					],
  					[
  						18.9613,
  						53.8964
  					],
  					[
  						18.9929,
  						53.8802
  					],
  					[
  						19.0058,
  						53.8537
  					],
  					[
  						19.0319,
  						53.8669
  					],
  					[
  						19.0551,
  						53.86
  					],
  					[
  						19.0798,
  						53.8262
  					],
  					[
  						19.0997,
  						53.8136
  					],
  					[
  						19.1256,
  						53.8151
  					],
  					[
  						19.1724,
  						53.8415
  					],
  					[
  						19.2111,
  						53.8391
  					],
  					[
  						19.2628,
  						53.823
  					],
  					[
  						19.323,
  						53.8139
  					],
  					[
  						19.2997,
  						53.782
  					],
  					[
  						19.3009,
  						53.7522
  					],
  					[
  						19.2129,
  						53.6914
  					],
  					[
  						19.2151,
  						53.6492
  					],
  					[
  						19.1791,
  						53.6404
  					],
  					[
  						19.1304,
  						53.6083
  					],
  					[
  						19.1293,
  						53.5883
  					],
  					[
  						19.0966,
  						53.5967
  					],
  					[
  						18.9436,
  						53.5882
  					],
  					[
  						18.89,
  						53.5995
  					],
  					[
  						18.7735,
  						53.607
  					],
  					[
  						18.7616,
  						53.6049
  					],
  					[
  						18.7393,
  						53.6446
  					],
  					[
  						18.789,
  						53.7021
  					],
  					[
  						18.8449,
  						53.7274
  					],
  					[
  						18.8565,
  						53.7489
  					],
  					[
  						18.8389,
  						53.7847
  					],
  					[
  						18.8498,
  						53.8056
  					],
  					[
  						18.8405,
  						53.8352
  					],
  					[
  						18.8833,
  						53.882
  					],
  					[
  						18.8787,
  						53.91
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 316,
  			name: "powiat Dąbrowa Górnicza",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.2851,
  						50.2917
  					],
  					[
  						19.2531,
  						50.3041
  					],
  					[
  						19.1961,
  						50.3169
  					],
  					[
  						19.1656,
  						50.3133
  					],
  					[
  						19.155,
  						50.3321
  					],
  					[
  						19.1896,
  						50.3546
  					],
  					[
  						19.1828,
  						50.3864
  					],
  					[
  						19.1976,
  						50.3943
  					],
  					[
  						19.2002,
  						50.3843
  					],
  					[
  						19.2265,
  						50.4194
  					],
  					[
  						19.2498,
  						50.4369
  					],
  					[
  						19.2926,
  						50.4232
  					],
  					[
  						19.2914,
  						50.4096
  					],
  					[
  						19.3223,
  						50.3917
  					],
  					[
  						19.346,
  						50.3963
  					],
  					[
  						19.4053,
  						50.3625
  					],
  					[
  						19.4594,
  						50.3633
  					],
  					[
  						19.4822,
  						50.3569
  					],
  					[
  						19.4839,
  						50.3236
  					],
  					[
  						19.451,
  						50.3189
  					],
  					[
  						19.4153,
  						50.3317
  					],
  					[
  						19.4066,
  						50.3174
  					],
  					[
  						19.3541,
  						50.3259
  					],
  					[
  						19.3394,
  						50.3062
  					],
  					[
  						19.2851,
  						50.2917
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 317,
  			name: "powiat Mysłowice",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.11,
  						50.1609
  					],
  					[
  						19.0916,
  						50.2098
  					],
  					[
  						19.1026,
  						50.2391
  					],
  					[
  						19.1224,
  						50.2668
  					],
  					[
  						19.1244,
  						50.266
  					],
  					[
  						19.1429,
  						50.2436
  					],
  					[
  						19.1438,
  						50.2421
  					],
  					[
  						19.1607,
  						50.2263
  					],
  					[
  						19.1629,
  						50.2164
  					],
  					[
  						19.207,
  						50.191
  					],
  					[
  						19.2418,
  						50.1613
  					],
  					[
  						19.1855,
  						50.1694
  					],
  					[
  						19.169,
  						50.1544
  					],
  					[
  						19.13,
  						50.153
  					],
  					[
  						19.11,
  						50.1609
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 318,
  			name: "powiat myśliborski",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						14.7326,
  						53.037
  					],
  					[
  						14.787,
  						53.0234
  					],
  					[
  						14.8491,
  						53.0626
  					],
  					[
  						14.8721,
  						53.0506
  					],
  					[
  						14.9162,
  						53.043
  					],
  					[
  						14.9172,
  						53.0245
  					],
  					[
  						14.8948,
  						53.0208
  					],
  					[
  						14.897,
  						52.9913
  					],
  					[
  						14.9537,
  						52.982
  					],
  					[
  						14.9763,
  						52.9703
  					],
  					[
  						14.9911,
  						52.9948
  					],
  					[
  						15.0334,
  						52.9894
  					],
  					[
  						15.0496,
  						53.0025
  					],
  					[
  						15.0392,
  						53.0338
  					],
  					[
  						15.0203,
  						53.0454
  					],
  					[
  						15.06,
  						53.0596
  					],
  					[
  						15.0821,
  						53.04
  					],
  					[
  						15.1398,
  						53.0284
  					],
  					[
  						15.1588,
  						53.061
  					],
  					[
  						15.1986,
  						53.0851
  					],
  					[
  						15.2058,
  						53.0819
  					],
  					[
  						15.2191,
  						53.0758
  					],
  					[
  						15.2076,
  						53.0431
  					],
  					[
  						15.258,
  						53.0264
  					],
  					[
  						15.2829,
  						53.0091
  					],
  					[
  						15.2972,
  						52.9675
  					],
  					[
  						15.2868,
  						52.9572
  					],
  					[
  						15.2836,
  						52.9448
  					],
  					[
  						15.3317,
  						52.9044
  					],
  					[
  						15.2856,
  						52.886
  					],
  					[
  						15.0718,
  						52.8306
  					],
  					[
  						15.0388,
  						52.8612
  					],
  					[
  						14.9908,
  						52.8425
  					],
  					[
  						14.9783,
  						52.8661
  					],
  					[
  						14.9178,
  						52.8893
  					],
  					[
  						14.8904,
  						52.8607
  					],
  					[
  						14.9198,
  						52.8468
  					],
  					[
  						14.8545,
  						52.8245
  					],
  					[
  						14.8644,
  						52.7912
  					],
  					[
  						14.8489,
  						52.7775
  					],
  					[
  						14.8135,
  						52.773
  					],
  					[
  						14.7894,
  						52.752
  					],
  					[
  						14.7997,
  						52.7375
  					],
  					[
  						14.7916,
  						52.6971
  					],
  					[
  						14.7501,
  						52.6653
  					],
  					[
  						14.7476,
  						52.6471
  					],
  					[
  						14.7214,
  						52.631
  					],
  					[
  						14.6583,
  						52.6423
  					],
  					[
  						14.6383,
  						52.6593
  					],
  					[
  						14.564,
  						52.6247
  					],
  					[
  						14.5053,
  						52.6434
  					],
  					[
  						14.4364,
  						52.6799
  					],
  					[
  						14.472,
  						52.7038
  					],
  					[
  						14.5228,
  						52.7252
  					],
  					[
  						14.5844,
  						52.761
  					],
  					[
  						14.6085,
  						52.7845
  					],
  					[
  						14.6143,
  						52.8142
  					],
  					[
  						14.6552,
  						52.83
  					],
  					[
  						14.6488,
  						52.8557
  					],
  					[
  						14.6857,
  						52.8738
  					],
  					[
  						14.6953,
  						52.9241
  					],
  					[
  						14.7556,
  						52.9429
  					],
  					[
  						14.7222,
  						52.9503
  					],
  					[
  						14.7031,
  						52.9722
  					],
  					[
  						14.6968,
  						53.0065
  					],
  					[
  						14.7326,
  						53.037
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 319,
  			name: "powiat golubsko-dobrzyński",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.0942,
  						52.969
  					],
  					[
  						19.0748,
  						52.9931
  					],
  					[
  						18.9826,
  						52.9871
  					],
  					[
  						18.9374,
  						52.9922
  					],
  					[
  						18.9514,
  						53.015
  					],
  					[
  						18.9087,
  						53.0244
  					],
  					[
  						18.8649,
  						53.0448
  					],
  					[
  						18.8646,
  						53.067
  					],
  					[
  						18.8276,
  						53.077
  					],
  					[
  						18.7952,
  						53.1332
  					],
  					[
  						18.7523,
  						53.1554
  					],
  					[
  						18.7442,
  						53.18
  					],
  					[
  						18.7618,
  						53.2011
  					],
  					[
  						18.8111,
  						53.1838
  					],
  					[
  						18.8988,
  						53.1837
  					],
  					[
  						18.9665,
  						53.1882
  					],
  					[
  						18.9882,
  						53.2107
  					],
  					[
  						19.0128,
  						53.2028
  					],
  					[
  						18.9993,
  						53.1852
  					],
  					[
  						19.0404,
  						53.1734
  					],
  					[
  						19.0862,
  						53.1848
  					],
  					[
  						19.1181,
  						53.215
  					],
  					[
  						19.1421,
  						53.2275
  					],
  					[
  						19.1693,
  						53.2377
  					],
  					[
  						19.2092,
  						53.2306
  					],
  					[
  						19.2535,
  						53.1998
  					],
  					[
  						19.2086,
  						53.1621
  					],
  					[
  						19.1863,
  						53.1526
  					],
  					[
  						19.2059,
  						53.1293
  					],
  					[
  						19.2538,
  						53.1084
  					],
  					[
  						19.2282,
  						53.0921
  					],
  					[
  						19.223,
  						53.0617
  					],
  					[
  						19.1824,
  						53.0493
  					],
  					[
  						19.18,
  						53.0329
  					],
  					[
  						19.2051,
  						53.0095
  					],
  					[
  						19.239,
  						53.0015
  					],
  					[
  						19.1836,
  						52.9891
  					],
  					[
  						19.1562,
  						52.9768
  					],
  					[
  						19.1487,
  						52.9621
  					],
  					[
  						19.0942,
  						52.969
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 320,
  			name: "powiat aleksandrowski",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.9073,
  						52.8358
  					],
  					[
  						18.9092,
  						52.8226
  					],
  					[
  						18.9385,
  						52.7826
  					],
  					[
  						18.8986,
  						52.7723
  					],
  					[
  						18.8358,
  						52.7687
  					],
  					[
  						18.8275,
  						52.7511
  					],
  					[
  						18.843,
  						52.7403
  					],
  					[
  						18.8494,
  						52.7076
  					],
  					[
  						18.8609,
  						52.704
  					],
  					[
  						18.8569,
  						52.67
  					],
  					[
  						18.8286,
  						52.6484
  					],
  					[
  						18.7754,
  						52.6817
  					],
  					[
  						18.722,
  						52.7093
  					],
  					[
  						18.6508,
  						52.7258
  					],
  					[
  						18.5965,
  						52.724
  					],
  					[
  						18.5074,
  						52.7109
  					],
  					[
  						18.5006,
  						52.748
  					],
  					[
  						18.5413,
  						52.7437
  					],
  					[
  						18.5543,
  						52.7562
  					],
  					[
  						18.6042,
  						52.7537
  					],
  					[
  						18.6251,
  						52.7873
  					],
  					[
  						18.5878,
  						52.7979
  					],
  					[
  						18.5713,
  						52.8143
  					],
  					[
  						18.5422,
  						52.8199
  					],
  					[
  						18.5382,
  						52.8434
  					],
  					[
  						18.5647,
  						52.879
  					],
  					[
  						18.6034,
  						52.8673
  					],
  					[
  						18.6244,
  						52.8876
  					],
  					[
  						18.6896,
  						52.8975
  					],
  					[
  						18.695,
  						52.9225
  					],
  					[
  						18.7226,
  						52.9334
  					],
  					[
  						18.7692,
  						52.9102
  					],
  					[
  						18.8132,
  						52.9063
  					],
  					[
  						18.8546,
  						52.8682
  					],
  					[
  						18.8891,
  						52.8595
  					],
  					[
  						18.9073,
  						52.8358
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 321,
  			name: "powiat świecki",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.0343,
  						53.3936
  					],
  					[
  						18.0534,
  						53.3973
  					],
  					[
  						18.0608,
  						53.4194
  					],
  					[
  						18.0834,
  						53.4364
  					],
  					[
  						18.053,
  						53.4432
  					],
  					[
  						18.0764,
  						53.467
  					],
  					[
  						18.1158,
  						53.4716
  					],
  					[
  						18.1123,
  						53.5046
  					],
  					[
  						18.1301,
  						53.5259
  					],
  					[
  						18.1603,
  						53.5248
  					],
  					[
  						18.2035,
  						53.5362
  					],
  					[
  						18.1955,
  						53.561
  					],
  					[
  						18.1723,
  						53.5849
  					],
  					[
  						18.1828,
  						53.5983
  					],
  					[
  						18.1718,
  						53.6277
  					],
  					[
  						18.2044,
  						53.6421
  					],
  					[
  						18.2175,
  						53.6596
  					],
  					[
  						18.2243,
  						53.6673
  					],
  					[
  						18.207,
  						53.6986
  					],
  					[
  						18.2365,
  						53.7095
  					],
  					[
  						18.2638,
  						53.701
  					],
  					[
  						18.3462,
  						53.6923
  					],
  					[
  						18.3542,
  						53.6874
  					],
  					[
  						18.4681,
  						53.6959
  					],
  					[
  						18.5145,
  						53.7038
  					],
  					[
  						18.5506,
  						53.6559
  					],
  					[
  						18.5802,
  						53.6579
  					],
  					[
  						18.5856,
  						53.6736
  					],
  					[
  						18.6306,
  						53.6746
  					],
  					[
  						18.6552,
  						53.6936
  					],
  					[
  						18.6768,
  						53.6907
  					],
  					[
  						18.6966,
  						53.7
  					],
  					[
  						18.7084,
  						53.6865
  					],
  					[
  						18.789,
  						53.7021
  					],
  					[
  						18.7393,
  						53.6446
  					],
  					[
  						18.7616,
  						53.6049
  					],
  					[
  						18.7641,
  						53.5479
  					],
  					[
  						18.7563,
  						53.5239
  					],
  					[
  						18.7337,
  						53.4747
  					],
  					[
  						18.704,
  						53.4517
  					],
  					[
  						18.6802,
  						53.4391
  					],
  					[
  						18.6264,
  						53.4274
  					],
  					[
  						18.5679,
  						53.4267
  					],
  					[
  						18.5453,
  						53.4165
  					],
  					[
  						18.4966,
  						53.4165
  					],
  					[
  						18.45,
  						53.3788
  					],
  					[
  						18.4192,
  						53.3767
  					],
  					[
  						18.4061,
  						53.3616
  					],
  					[
  						18.3684,
  						53.3481
  					],
  					[
  						18.3294,
  						53.3171
  					],
  					[
  						18.3071,
  						53.2684
  					],
  					[
  						18.2797,
  						53.2531
  					],
  					[
  						18.2379,
  						53.2703
  					],
  					[
  						18.1852,
  						53.2787
  					],
  					[
  						18.1786,
  						53.2982
  					],
  					[
  						18.1165,
  						53.3301
  					],
  					[
  						18.1064,
  						53.3447
  					],
  					[
  						18.0577,
  						53.3407
  					],
  					[
  						18.0655,
  						53.3703
  					],
  					[
  						18.0343,
  						53.3936
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 322,
  			name: "powiat pleszewski",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.6042,
  						51.8202
  					],
  					[
  						17.5712,
  						51.8387
  					],
  					[
  						17.5304,
  						51.8386
  					],
  					[
  						17.514,
  						51.9008
  					],
  					[
  						17.6105,
  						51.8933
  					],
  					[
  						17.6302,
  						51.9037
  					],
  					[
  						17.6769,
  						51.902
  					],
  					[
  						17.6857,
  						51.9184
  					],
  					[
  						17.7173,
  						51.9399
  					],
  					[
  						17.7042,
  						51.9494
  					],
  					[
  						17.6956,
  						52.0128
  					],
  					[
  						17.7228,
  						52.045
  					],
  					[
  						17.6969,
  						52.0631
  					],
  					[
  						17.7064,
  						52.0719
  					],
  					[
  						17.7731,
  						52.0764
  					],
  					[
  						17.8235,
  						52.0881
  					],
  					[
  						17.8527,
  						52.0734
  					],
  					[
  						17.9346,
  						52.0909
  					],
  					[
  						17.9674,
  						52.0757
  					],
  					[
  						17.9797,
  						52.0479
  					],
  					[
  						17.96,
  						52.0285
  					],
  					[
  						17.9472,
  						52.0001
  					],
  					[
  						17.98,
  						51.9589
  					],
  					[
  						17.9485,
  						51.9529
  					],
  					[
  						17.934,
  						51.9363
  					],
  					[
  						17.986,
  						51.8539
  					],
  					[
  						18.012,
  						51.846
  					],
  					[
  						18.0213,
  						51.8147
  					],
  					[
  						18.0153,
  						51.8005
  					],
  					[
  						18.0414,
  						51.7828
  					],
  					[
  						18.0425,
  						51.7795
  					],
  					[
  						18.0096,
  						51.7597
  					],
  					[
  						17.9903,
  						51.7783
  					],
  					[
  						17.9496,
  						51.7861
  					],
  					[
  						17.9315,
  						51.7785
  					],
  					[
  						17.8738,
  						51.7857
  					],
  					[
  						17.8171,
  						51.7988
  					],
  					[
  						17.7497,
  						51.7898
  					],
  					[
  						17.731,
  						51.8161
  					],
  					[
  						17.6464,
  						51.8045
  					],
  					[
  						17.6467,
  						51.7956
  					],
  					[
  						17.6152,
  						51.7938
  					],
  					[
  						17.6042,
  						51.8202
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 323,
  			name: "powiat Krosno",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.7791,
  						49.647
  					],
  					[
  						21.7467,
  						49.6704
  					],
  					[
  						21.7023,
  						49.6841
  					],
  					[
  						21.6947,
  						49.7085
  					],
  					[
  						21.7277,
  						49.7207
  					],
  					[
  						21.7585,
  						49.7221
  					],
  					[
  						21.8101,
  						49.6975
  					],
  					[
  						21.8034,
  						49.6617
  					],
  					[
  						21.7791,
  						49.647
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 324,
  			name: "powiat sejneński",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.1543,
  						54.297
  					],
  					[
  						23.2024,
  						54.2886
  					],
  					[
  						23.2339,
  						54.2609
  					],
  					[
  						23.3375,
  						54.2517
  					],
  					[
  						23.3817,
  						54.2282
  					],
  					[
  						23.3826,
  						54.2275
  					],
  					[
  						23.3832,
  						54.2268
  					],
  					[
  						23.4245,
  						54.1775
  					],
  					[
  						23.459,
  						54.1755
  					],
  					[
  						23.4858,
  						54.1532
  					],
  					[
  						23.4926,
  						54.117
  					],
  					[
  						23.5183,
  						54.0898
  					],
  					[
  						23.5286,
  						54.0658
  					],
  					[
  						23.5249,
  						54.0311
  					],
  					[
  						23.5009,
  						54.0077
  					],
  					[
  						23.4812,
  						53.9988
  					],
  					[
  						23.4904,
  						53.9739
  					],
  					[
  						23.5149,
  						53.9566
  					],
  					[
  						23.5116,
  						53.9159
  					],
  					[
  						23.4635,
  						53.8949
  					],
  					[
  						23.3943,
  						53.9083
  					],
  					[
  						23.389,
  						53.9251
  					],
  					[
  						23.3295,
  						53.951
  					],
  					[
  						23.266,
  						53.9455
  					],
  					[
  						23.2262,
  						53.9595
  					],
  					[
  						23.1638,
  						53.9515
  					],
  					[
  						23.1363,
  						53.961
  					],
  					[
  						23.08,
  						53.962
  					],
  					[
  						23.0901,
  						53.989
  					],
  					[
  						23.1294,
  						54.0042
  					],
  					[
  						23.1278,
  						54.0205
  					],
  					[
  						23.1358,
  						54.0181
  					],
  					[
  						23.1403,
  						54.0271
  					],
  					[
  						23.1344,
  						54.0354
  					],
  					[
  						23.1178,
  						54.0689
  					],
  					[
  						23.1203,
  						54.0932
  					],
  					[
  						23.0833,
  						54.1074
  					],
  					[
  						23.08,
  						54.1358
  					],
  					[
  						23.1143,
  						54.1742
  					],
  					[
  						23.143,
  						54.1707
  					],
  					[
  						23.1534,
  						54.1976
  					],
  					[
  						23.1087,
  						54.2454
  					],
  					[
  						23.1411,
  						54.2593
  					],
  					[
  						23.1287,
  						54.2771
  					],
  					[
  						23.1543,
  						54.297
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 325,
  			name: "powiat sanocki",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.327,
  						49.6857
  					],
  					[
  						22.3236,
  						49.6723
  					],
  					[
  						22.349,
  						49.6553
  					],
  					[
  						22.3889,
  						49.63
  					],
  					[
  						22.3904,
  						49.6127
  					],
  					[
  						22.4279,
  						49.5932
  					],
  					[
  						22.395,
  						49.5715
  					],
  					[
  						22.423,
  						49.5535
  					],
  					[
  						22.3956,
  						49.5276
  					],
  					[
  						22.3502,
  						49.5503
  					],
  					[
  						22.3309,
  						49.5297
  					],
  					[
  						22.2996,
  						49.5121
  					],
  					[
  						22.2831,
  						49.4845
  					],
  					[
  						22.2856,
  						49.4552
  					],
  					[
  						22.275,
  						49.4294
  					],
  					[
  						22.2388,
  						49.3803
  					],
  					[
  						22.2142,
  						49.338
  					],
  					[
  						22.219,
  						49.3265
  					],
  					[
  						22.188,
  						49.2985
  					],
  					[
  						22.1952,
  						49.2674
  					],
  					[
  						22.2266,
  						49.2593
  					],
  					[
  						22.2501,
  						49.2383
  					],
  					[
  						22.2375,
  						49.2019
  					],
  					[
  						22.2219,
  						49.1844
  					],
  					[
  						22.193,
  						49.1744
  					],
  					[
  						22.1276,
  						49.2005
  					],
  					[
  						22.078,
  						49.2088
  					],
  					[
  						22.0302,
  						49.2255
  					],
  					[
  						22.0408,
  						49.2584
  					],
  					[
  						22.0336,
  						49.2791
  					],
  					[
  						21.9832,
  						49.3104
  					],
  					[
  						21.9522,
  						49.35
  					],
  					[
  						21.9404,
  						49.3666
  					],
  					[
  						21.926,
  						49.4345
  					],
  					[
  						21.9715,
  						49.4513
  					],
  					[
  						21.9503,
  						49.4757
  					],
  					[
  						21.9693,
  						49.4885
  					],
  					[
  						21.9395,
  						49.5046
  					],
  					[
  						21.9266,
  						49.5264
  					],
  					[
  						21.9359,
  						49.5527
  					],
  					[
  						21.9157,
  						49.5943
  					],
  					[
  						21.9335,
  						49.6205
  					],
  					[
  						21.9639,
  						49.6179
  					],
  					[
  						22.0125,
  						49.6366
  					],
  					[
  						22.0445,
  						49.6282
  					],
  					[
  						22.0742,
  						49.6398
  					],
  					[
  						22.0772,
  						49.6397
  					],
  					[
  						22.078,
  						49.6389
  					],
  					[
  						22.1135,
  						49.6549
  					],
  					[
  						22.1508,
  						49.6425
  					],
  					[
  						22.1908,
  						49.6508
  					],
  					[
  						22.2183,
  						49.6267
  					],
  					[
  						22.2521,
  						49.6416
  					],
  					[
  						22.251,
  						49.6455
  					],
  					[
  						22.2557,
  						49.6523
  					],
  					[
  						22.2621,
  						49.6539
  					],
  					[
  						22.2631,
  						49.6543
  					],
  					[
  						22.3131,
  						49.6682
  					],
  					[
  						22.327,
  						49.6857
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 326,
  			name: "powiat suski",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.7521,
  						49.8306
  					],
  					[
  						19.7576,
  						49.8301
  					],
  					[
  						19.751,
  						49.7862
  					],
  					[
  						19.7992,
  						49.7907
  					],
  					[
  						19.8043,
  						49.7656
  					],
  					[
  						19.7811,
  						49.7566
  					],
  					[
  						19.7959,
  						49.7055
  					],
  					[
  						19.8684,
  						49.715
  					],
  					[
  						19.9117,
  						49.7131
  					],
  					[
  						19.897,
  						49.6909
  					],
  					[
  						19.8858,
  						49.6833
  					],
  					[
  						19.9052,
  						49.6592
  					],
  					[
  						19.8937,
  						49.6376
  					],
  					[
  						19.8719,
  						49.6334
  					],
  					[
  						19.8627,
  						49.5993
  					],
  					[
  						19.8254,
  						49.5922
  					],
  					[
  						19.767,
  						49.5904
  					],
  					[
  						19.7618,
  						49.5889
  					],
  					[
  						19.7528,
  						49.5718
  					],
  					[
  						19.6953,
  						49.5788
  					],
  					[
  						19.6765,
  						49.5756
  					],
  					[
  						19.6193,
  						49.6237
  					],
  					[
  						19.5903,
  						49.6225
  					],
  					[
  						19.592,
  						49.5929
  					],
  					[
  						19.5293,
  						49.573
  					],
  					[
  						19.4784,
  						49.588
  					],
  					[
  						19.4674,
  						49.6138
  					],
  					[
  						19.4808,
  						49.6244
  					],
  					[
  						19.4689,
  						49.648
  					],
  					[
  						19.4778,
  						49.6608
  					],
  					[
  						19.4411,
  						49.6805
  					],
  					[
  						19.4138,
  						49.6728
  					],
  					[
  						19.3738,
  						49.6926
  					],
  					[
  						19.4004,
  						49.7108
  					],
  					[
  						19.4293,
  						49.7195
  					],
  					[
  						19.4446,
  						49.7349
  					],
  					[
  						19.4364,
  						49.7571
  					],
  					[
  						19.415,
  						49.7753
  					],
  					[
  						19.4497,
  						49.7957
  					],
  					[
  						19.5089,
  						49.787
  					],
  					[
  						19.5395,
  						49.8018
  					],
  					[
  						19.606,
  						49.7927
  					],
  					[
  						19.6441,
  						49.8078
  					],
  					[
  						19.7259,
  						49.8074
  					],
  					[
  						19.7521,
  						49.8306
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 327,
  			name: "powiat zielonogórski",
  			province: "Lubuskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.8495,
  						52.2133
  					],
  					[
  						15.861,
  						52.1828
  					],
  					[
  						15.8831,
  						52.1628
  					],
  					[
  						15.875,
  						52.1305
  					],
  					[
  						15.8333,
  						52.1111
  					],
  					[
  						15.8603,
  						52.0865
  					],
  					[
  						15.8771,
  						52.088
  					],
  					[
  						15.9208,
  						52.0693
  					],
  					[
  						15.9414,
  						52.0885
  					],
  					[
  						15.9698,
  						52.0754
  					],
  					[
  						15.9884,
  						52.0672
  					],
  					[
  						15.9944,
  						52.0352
  					],
  					[
  						15.966,
  						52.0267
  					],
  					[
  						15.9127,
  						52.036
  					],
  					[
  						15.9101,
  						52.0239
  					],
  					[
  						15.9306,
  						51.9797
  					],
  					[
  						15.904,
  						51.9596
  					],
  					[
  						15.846,
  						51.9391
  					],
  					[
  						15.8679,
  						51.9218
  					],
  					[
  						15.7877,
  						51.8858
  					],
  					[
  						15.7616,
  						51.9044
  					],
  					[
  						15.7072,
  						51.892
  					],
  					[
  						15.638,
  						51.9051
  					],
  					[
  						15.6328,
  						51.9252
  					],
  					[
  						15.6449,
  						51.9474
  					],
  					[
  						15.6066,
  						51.9478
  					],
  					[
  						15.6365,
  						52.006
  					],
  					[
  						15.6102,
  						52.0064
  					],
  					[
  						15.5786,
  						52.0338
  					],
  					[
  						15.5412,
  						52.0338
  					],
  					[
  						15.5128,
  						52.0154
  					],
  					[
  						15.4389,
  						52.0152
  					],
  					[
  						15.4314,
  						51.9849
  					],
  					[
  						15.406,
  						51.9495
  					],
  					[
  						15.4494,
  						51.941
  					],
  					[
  						15.4581,
  						51.9062
  					],
  					[
  						15.4214,
  						51.884
  					],
  					[
  						15.4239,
  						51.855
  					],
  					[
  						15.4467,
  						51.8293
  					],
  					[
  						15.4659,
  						51.8274
  					],
  					[
  						15.4686,
  						51.8182
  					],
  					[
  						15.4422,
  						51.7817
  					],
  					[
  						15.3966,
  						51.7694
  					],
  					[
  						15.3821,
  						51.7464
  					],
  					[
  						15.3457,
  						51.7365
  					],
  					[
  						15.3106,
  						51.742
  					],
  					[
  						15.2981,
  						51.7544
  					],
  					[
  						15.233,
  						51.7406
  					],
  					[
  						15.2157,
  						51.7818
  					],
  					[
  						15.1974,
  						51.7842
  					],
  					[
  						15.1789,
  						51.7572
  					],
  					[
  						15.1359,
  						51.7581
  					],
  					[
  						15.1235,
  						51.7788
  					],
  					[
  						15.1521,
  						51.7841
  					],
  					[
  						15.1433,
  						51.8043
  					],
  					[
  						15.1703,
  						51.8071
  					],
  					[
  						15.1532,
  						51.8465
  					],
  					[
  						15.0774,
  						51.839
  					],
  					[
  						15.1064,
  						51.8628
  					],
  					[
  						15.2111,
  						51.9006
  					],
  					[
  						15.2324,
  						51.8991
  					],
  					[
  						15.2502,
  						51.9334
  					],
  					[
  						15.2692,
  						51.9315
  					],
  					[
  						15.2933,
  						51.9621
  					],
  					[
  						15.2648,
  						52.016
  					],
  					[
  						15.2781,
  						52.0216
  					],
  					[
  						15.2566,
  						52.0848
  					],
  					[
  						15.289,
  						52.089
  					],
  					[
  						15.286,
  						52.1053
  					],
  					[
  						15.306,
  						52.1313
  					],
  					[
  						15.3657,
  						52.1145
  					],
  					[
  						15.3955,
  						52.1148
  					],
  					[
  						15.4148,
  						52.0973
  					],
  					[
  						15.4378,
  						52.1105
  					],
  					[
  						15.4805,
  						52.1009
  					],
  					[
  						15.5263,
  						52.1246
  					],
  					[
  						15.5555,
  						52.1249
  					],
  					[
  						15.5909,
  						52.1375
  					],
  					[
  						15.6069,
  						52.1641
  					],
  					[
  						15.657,
  						52.1827
  					],
  					[
  						15.6713,
  						52.161
  					],
  					[
  						15.7222,
  						52.1691
  					],
  					[
  						15.7367,
  						52.1918
  					],
  					[
  						15.7732,
  						52.1942
  					],
  					[
  						15.8031,
  						52.21
  					],
  					[
  						15.8495,
  						52.2133
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 328,
  			name: "powiat wołomiński",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.1428,
  						52.519
  					],
  					[
  						21.2253,
  						52.5337
  					],
  					[
  						21.3059,
  						52.533
  					],
  					[
  						21.313,
  						52.5026
  					],
  					[
  						21.3521,
  						52.503
  					],
  					[
  						21.3567,
  						52.4866
  					],
  					[
  						21.3796,
  						52.4713
  					],
  					[
  						21.4268,
  						52.4629
  					],
  					[
  						21.4443,
  						52.4736
  					],
  					[
  						21.4821,
  						52.4717
  					],
  					[
  						21.5265,
  						52.482
  					],
  					[
  						21.5406,
  						52.5125
  					],
  					[
  						21.5565,
  						52.5203
  					],
  					[
  						21.5578,
  						52.5535
  					],
  					[
  						21.5968,
  						52.5532
  					],
  					[
  						21.6269,
  						52.5172
  					],
  					[
  						21.6707,
  						52.5073
  					],
  					[
  						21.7091,
  						52.5063
  					],
  					[
  						21.733,
  						52.4841
  					],
  					[
  						21.7338,
  						52.4615
  					],
  					[
  						21.683,
  						52.4557
  					],
  					[
  						21.6918,
  						52.4481
  					],
  					[
  						21.7004,
  						52.4376
  					],
  					[
  						21.7085,
  						52.43
  					],
  					[
  						21.7169,
  						52.3978
  					],
  					[
  						21.7042,
  						52.39
  					],
  					[
  						21.6425,
  						52.3788
  					],
  					[
  						21.6303,
  						52.3616
  					],
  					[
  						21.5697,
  						52.3585
  					],
  					[
  						21.5725,
  						52.3569
  					],
  					[
  						21.5733,
  						52.3566
  					],
  					[
  						21.5737,
  						52.3563
  					],
  					[
  						21.578,
  						52.3546
  					],
  					[
  						21.5791,
  						52.3542
  					],
  					[
  						21.582,
  						52.3535
  					],
  					[
  						21.5677,
  						52.3408
  					],
  					[
  						21.5191,
  						52.3376
  					],
  					[
  						21.4973,
  						52.3293
  					],
  					[
  						21.4871,
  						52.3058
  					],
  					[
  						21.4475,
  						52.3037
  					],
  					[
  						21.4011,
  						52.3049
  					],
  					[
  						21.4133,
  						52.2871
  					],
  					[
  						21.4593,
  						52.2705
  					],
  					[
  						21.4402,
  						52.2625
  					],
  					[
  						21.2976,
  						52.2789
  					],
  					[
  						21.2955,
  						52.2675
  					],
  					[
  						21.2505,
  						52.2627
  					],
  					[
  						21.1904,
  						52.2562
  					],
  					[
  						21.1712,
  						52.2773
  					],
  					[
  						21.105,
  						52.274
  					],
  					[
  						21.0778,
  						52.322
  					],
  					[
  						21.0868,
  						52.3303
  					],
  					[
  						21.0852,
  						52.3374
  					],
  					[
  						21.1167,
  						52.3684
  					],
  					[
  						21.0978,
  						52.3832
  					],
  					[
  						21.0961,
  						52.4018
  					],
  					[
  						21.1208,
  						52.4112
  					],
  					[
  						21.1,
  						52.4342
  					],
  					[
  						21.1088,
  						52.4562
  					],
  					[
  						21.0646,
  						52.4777
  					],
  					[
  						21.0802,
  						52.5078
  					],
  					[
  						21.1428,
  						52.519
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 329,
  			name: "powiat mikołowski",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.7536,
  						50.0544
  					],
  					[
  						18.7261,
  						50.0658
  					],
  					[
  						18.7399,
  						50.1112
  					],
  					[
  						18.7309,
  						50.1312
  					],
  					[
  						18.7307,
  						50.1549
  					],
  					[
  						18.7459,
  						50.1743
  					],
  					[
  						18.7197,
  						50.2001
  					],
  					[
  						18.7528,
  						50.2031
  					],
  					[
  						18.7757,
  						50.1934
  					],
  					[
  						18.7974,
  						50.2107
  					],
  					[
  						18.7945,
  						50.2386
  					],
  					[
  						18.7945,
  						50.2387
  					],
  					[
  						18.7945,
  						50.2386
  					],
  					[
  						18.7945,
  						50.2387
  					],
  					[
  						18.7973,
  						50.2446
  					],
  					[
  						18.7969,
  						50.2463
  					],
  					[
  						18.7979,
  						50.2466
  					],
  					[
  						18.8529,
  						50.2281
  					],
  					[
  						18.8688,
  						50.2084
  					],
  					[
  						18.8969,
  						50.2194
  					],
  					[
  						18.9136,
  						50.2221
  					],
  					[
  						18.9481,
  						50.1669
  					],
  					[
  						18.9312,
  						50.1593
  					],
  					[
  						18.9342,
  						50.1586
  					],
  					[
  						18.9253,
  						50.1323
  					],
  					[
  						18.954,
  						50.1115
  					],
  					[
  						18.9331,
  						50.0819
  					],
  					[
  						18.9001,
  						50.0965
  					],
  					[
  						18.8575,
  						50.0973
  					],
  					[
  						18.8478,
  						50.0704
  					],
  					[
  						18.7536,
  						50.0544
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 330,
  			name: "powiat goleniowski",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						14.6781,
  						53.524
  					],
  					[
  						14.6388,
  						53.5258
  					],
  					[
  						14.6368,
  						53.5272
  					],
  					[
  						14.6365,
  						53.5284
  					],
  					[
  						14.6353,
  						53.5339
  					],
  					[
  						14.6093,
  						53.5541
  					],
  					[
  						14.5606,
  						53.6502
  					],
  					[
  						14.523,
  						53.6743
  					],
  					[
  						14.498,
  						53.7035
  					],
  					[
  						14.3814,
  						53.7686
  					],
  					[
  						14.4409,
  						53.7726
  					],
  					[
  						14.5185,
  						53.7779
  					],
  					[
  						14.5787,
  						53.7872
  					],
  					[
  						14.6151,
  						53.774
  					],
  					[
  						14.658,
  						53.7676
  					],
  					[
  						14.7236,
  						53.786
  					],
  					[
  						14.7291,
  						53.8092
  					],
  					[
  						14.7736,
  						53.8064
  					],
  					[
  						14.8108,
  						53.8091
  					],
  					[
  						14.8224,
  						53.7938
  					],
  					[
  						14.8953,
  						53.8139
  					],
  					[
  						14.914,
  						53.8092
  					],
  					[
  						14.9513,
  						53.7755
  					],
  					[
  						14.9816,
  						53.7721
  					],
  					[
  						15.0109,
  						53.7865
  					],
  					[
  						15.043,
  						53.7833
  					],
  					[
  						15.0832,
  						53.7939
  					],
  					[
  						15.1467,
  						53.7863
  					],
  					[
  						15.1697,
  						53.7576
  					],
  					[
  						15.1915,
  						53.7516
  					],
  					[
  						15.2225,
  						53.7268
  					],
  					[
  						15.248,
  						53.7093
  					],
  					[
  						15.2607,
  						53.683
  					],
  					[
  						15.3018,
  						53.6606
  					],
  					[
  						15.3112,
  						53.6221
  					],
  					[
  						15.2731,
  						53.6277
  					],
  					[
  						15.2092,
  						53.6229
  					],
  					[
  						15.2128,
  						53.5966
  					],
  					[
  						15.1672,
  						53.5848
  					],
  					[
  						15.154,
  						53.5535
  					],
  					[
  						15.2196,
  						53.5449
  					],
  					[
  						15.2365,
  						53.5314
  					],
  					[
  						15.2122,
  						53.5098
  					],
  					[
  						15.2098,
  						53.4894
  					],
  					[
  						15.1754,
  						53.4903
  					],
  					[
  						15.1576,
  						53.4742
  					],
  					[
  						15.1516,
  						53.4719
  					],
  					[
  						15.0694,
  						53.4595
  					],
  					[
  						15.0603,
  						53.4702
  					],
  					[
  						15.0144,
  						53.4549
  					],
  					[
  						14.9613,
  						53.4585
  					],
  					[
  						14.916,
  						53.4438
  					],
  					[
  						14.8798,
  						53.4431
  					],
  					[
  						14.8262,
  						53.4287
  					],
  					[
  						14.7776,
  						53.4257
  					],
  					[
  						14.778,
  						53.403
  					],
  					[
  						14.7268,
  						53.4047
  					],
  					[
  						14.7526,
  						53.4258
  					],
  					[
  						14.712,
  						53.4496
  					],
  					[
  						14.6934,
  						53.4772
  					],
  					[
  						14.702,
  						53.5044
  					],
  					[
  						14.6781,
  						53.524
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 331,
  			name: "powiat Rzeszów",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.9733,
  						49.9351
  					],
  					[
  						21.9583,
  						49.9574
  					],
  					[
  						21.9555,
  						49.9843
  					],
  					[
  						21.9363,
  						49.9977
  					],
  					[
  						21.9387,
  						50.019
  					],
  					[
  						21.8681,
  						50.0481
  					],
  					[
  						21.9208,
  						50.0563
  					],
  					[
  						21.9345,
  						50.0721
  					],
  					[
  						21.9901,
  						50.0778
  					],
  					[
  						22.0365,
  						50.0683
  					],
  					[
  						22.0923,
  						50.0182
  					],
  					[
  						22.0835,
  						49.9959
  					],
  					[
  						22.0434,
  						49.99
  					],
  					[
  						22.0336,
  						49.9704
  					],
  					[
  						21.9952,
  						49.963
  					],
  					[
  						21.9899,
  						49.9398
  					],
  					[
  						21.9733,
  						49.9351
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 332,
  			name: "powiat łomżyński",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.2794,
  						53.4378
  					],
  					[
  						22.2964,
  						53.4008
  					],
  					[
  						22.3257,
  						53.4085
  					],
  					[
  						22.3634,
  						53.3918
  					],
  					[
  						22.3611,
  						53.3714
  					],
  					[
  						22.4054,
  						53.3652
  					],
  					[
  						22.4056,
  						53.3514
  					],
  					[
  						22.4976,
  						53.3486
  					],
  					[
  						22.4705,
  						53.3339
  					],
  					[
  						22.4666,
  						53.2888
  					],
  					[
  						22.448,
  						53.2417
  					],
  					[
  						22.4303,
  						53.2177
  					],
  					[
  						22.4797,
  						53.2134
  					],
  					[
  						22.4691,
  						53.2034
  					],
  					[
  						22.4441,
  						53.1881
  					],
  					[
  						22.4123,
  						53.1839
  					],
  					[
  						22.3668,
  						53.1518
  					],
  					[
  						22.3626,
  						53.1374
  					],
  					[
  						22.3173,
  						53.1283
  					],
  					[
  						22.3037,
  						53.1132
  					],
  					[
  						22.3139,
  						53.0876
  					],
  					[
  						22.2648,
  						53.0731
  					],
  					[
  						22.2191,
  						53.0402
  					],
  					[
  						22.173,
  						53.0485
  					],
  					[
  						22.1563,
  						53.0614
  					],
  					[
  						22.1114,
  						53.0511
  					],
  					[
  						22.0953,
  						53.0597
  					],
  					[
  						22.1022,
  						53.0896
  					],
  					[
  						22.0927,
  						53.1172
  					],
  					[
  						22.0572,
  						53.1066
  					],
  					[
  						22.0682,
  						53.0501
  					],
  					[
  						22.0284,
  						52.993
  					],
  					[
  						21.9761,
  						52.9788
  					],
  					[
  						21.9604,
  						52.9798
  					],
  					[
  						21.8932,
  						53.0004
  					],
  					[
  						21.8769,
  						53.0217
  					],
  					[
  						21.9226,
  						53.0462
  					],
  					[
  						21.926,
  						53.0781
  					],
  					[
  						21.9141,
  						53.0697
  					],
  					[
  						21.9128,
  						53.0685
  					],
  					[
  						21.8726,
  						53.0588
  					],
  					[
  						21.8433,
  						53.078
  					],
  					[
  						21.8099,
  						53.1138
  					],
  					[
  						21.7362,
  						53.1092
  					],
  					[
  						21.6946,
  						53.138
  					],
  					[
  						21.7068,
  						53.1659
  					],
  					[
  						21.6802,
  						53.1879
  					],
  					[
  						21.6774,
  						53.2165
  					],
  					[
  						21.6622,
  						53.2385
  					],
  					[
  						21.6451,
  						53.2835
  					],
  					[
  						21.6662,
  						53.3111
  					],
  					[
  						21.7354,
  						53.3127
  					],
  					[
  						21.8042,
  						53.3352
  					],
  					[
  						21.8252,
  						53.3224
  					],
  					[
  						21.8768,
  						53.3189
  					],
  					[
  						21.8838,
  						53.2911
  					],
  					[
  						21.9047,
  						53.2741
  					],
  					[
  						21.9567,
  						53.281
  					],
  					[
  						21.9484,
  						53.248
  					],
  					[
  						21.9856,
  						53.2391
  					],
  					[
  						22.0216,
  						53.273
  					],
  					[
  						22.1152,
  						53.2636
  					],
  					[
  						22.1332,
  						53.297
  					],
  					[
  						22.1532,
  						53.3074
  					],
  					[
  						22.2053,
  						53.2992
  					],
  					[
  						22.2449,
  						53.3069
  					],
  					[
  						22.2375,
  						53.3258
  					],
  					[
  						22.236,
  						53.3691
  					],
  					[
  						22.267,
  						53.3918
  					],
  					[
  						22.2399,
  						53.4257
  					],
  					[
  						22.2794,
  						53.4378
  					]
  				],
  				[
  					[
  						22.0555,
  						53.1429
  					],
  					[
  						22.0882,
  						53.1465
  					],
  					[
  						22.1057,
  						53.1633
  					],
  					[
  						22.0956,
  						53.1919
  					],
  					[
  						22.0605,
  						53.215
  					],
  					[
  						22.0378,
  						53.2012
  					],
  					[
  						22.0112,
  						53.1703
  					],
  					[
  						22.0151,
  						53.1521
  					],
  					[
  						22.0555,
  						53.1429
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 333,
  			name: "powiat opolski",
  			province: "Opolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.2302,
  						50.7968
  					],
  					[
  						18.2541,
  						50.7811
  					],
  					[
  						18.2639,
  						50.7606
  					],
  					[
  						18.2349,
  						50.7438
  					],
  					[
  						18.274,
  						50.7229
  					],
  					[
  						18.2974,
  						50.7294
  					],
  					[
  						18.3427,
  						50.6958
  					],
  					[
  						18.3048,
  						50.6714
  					],
  					[
  						18.2775,
  						50.6711
  					],
  					[
  						18.2788,
  						50.6429
  					],
  					[
  						18.2431,
  						50.6372
  					],
  					[
  						18.2071,
  						50.6495
  					],
  					[
  						18.1579,
  						50.5983
  					],
  					[
  						18.1289,
  						50.5785
  					],
  					[
  						18.118,
  						50.5543
  					],
  					[
  						18.0715,
  						50.5554
  					],
  					[
  						18.0424,
  						50.5623
  					],
  					[
  						18.0134,
  						50.5494
  					],
  					[
  						17.8971,
  						50.5462
  					],
  					[
  						17.873,
  						50.5017
  					],
  					[
  						17.8138,
  						50.5302
  					],
  					[
  						17.763,
  						50.5546
  					],
  					[
  						17.7214,
  						50.5757
  					],
  					[
  						17.6925,
  						50.5575
  					],
  					[
  						17.6543,
  						50.5615
  					],
  					[
  						17.6128,
  						50.5562
  					],
  					[
  						17.6076,
  						50.5719
  					],
  					[
  						17.5706,
  						50.5938
  					],
  					[
  						17.5583,
  						50.5859
  					],
  					[
  						17.4959,
  						50.5911
  					],
  					[
  						17.4668,
  						50.6151
  					],
  					[
  						17.5156,
  						50.7288
  					],
  					[
  						17.5399,
  						50.7206
  					],
  					[
  						17.6066,
  						50.7108
  					],
  					[
  						17.6448,
  						50.6816
  					],
  					[
  						17.6766,
  						50.7286
  					],
  					[
  						17.7059,
  						50.7145
  					],
  					[
  						17.7318,
  						50.7325
  					],
  					[
  						17.7382,
  						50.7531
  					],
  					[
  						17.7506,
  						50.78
  					],
  					[
  						17.6955,
  						50.7954
  					],
  					[
  						17.6708,
  						50.8099
  					],
  					[
  						17.6036,
  						50.8305
  					],
  					[
  						17.6048,
  						50.8628
  					],
  					[
  						17.6215,
  						50.8657
  					],
  					[
  						17.6597,
  						50.8993
  					],
  					[
  						17.6868,
  						50.8976
  					],
  					[
  						17.692,
  						50.919
  					],
  					[
  						17.7327,
  						50.907
  					],
  					[
  						17.8032,
  						50.8956
  					],
  					[
  						17.8099,
  						50.8693
  					],
  					[
  						17.8501,
  						50.8618
  					],
  					[
  						17.8722,
  						50.8405
  					],
  					[
  						17.9044,
  						50.8394
  					],
  					[
  						17.89,
  						50.8612
  					],
  					[
  						17.9051,
  						50.9101
  					],
  					[
  						17.9494,
  						50.9053
  					],
  					[
  						17.9713,
  						50.9682
  					],
  					[
  						18.0117,
  						50.9636
  					],
  					[
  						18.0605,
  						50.9399
  					],
  					[
  						18.0686,
  						50.9233
  					],
  					[
  						18.106,
  						50.8945
  					],
  					[
  						18.0924,
  						50.8478
  					],
  					[
  						18.1055,
  						50.8144
  					],
  					[
  						18.1302,
  						50.8295
  					],
  					[
  						18.1939,
  						50.8337
  					],
  					[
  						18.2021,
  						50.8046
  					],
  					[
  						18.2302,
  						50.7968
  					]
  				],
  				[
  					[
  						17.9338,
  						50.7373
  					],
  					[
  						17.927,
  						50.7674
  					],
  					[
  						17.8585,
  						50.7647
  					],
  					[
  						17.8583,
  						50.7645
  					],
  					[
  						17.8735,
  						50.7506
  					],
  					[
  						17.8596,
  						50.7315
  					],
  					[
  						17.8806,
  						50.7167
  					],
  					[
  						17.8094,
  						50.7132
  					],
  					[
  						17.7836,
  						50.6838
  					],
  					[
  						17.8275,
  						50.6778
  					],
  					[
  						17.853,
  						50.6648
  					],
  					[
  						17.8512,
  						50.6437
  					],
  					[
  						17.9605,
  						50.6205
  					],
  					[
  						17.9538,
  						50.6023
  					],
  					[
  						18.0147,
  						50.622
  					],
  					[
  						18.0327,
  						50.6221
  					],
  					[
  						18.0324,
  						50.6496
  					],
  					[
  						18.0016,
  						50.6577
  					],
  					[
  						17.9583,
  						50.7006
  					],
  					[
  						17.9271,
  						50.7133
  					],
  					[
  						17.9338,
  						50.7373
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 334,
  			name: "powiat wałecki",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.0617,
  						53.4073
  					],
  					[
  						16.076,
  						53.4018
  					],
  					[
  						16.1038,
  						53.3976
  					],
  					[
  						16.111,
  						53.3802
  					],
  					[
  						16.1506,
  						53.3761
  					],
  					[
  						16.2176,
  						53.3959
  					],
  					[
  						16.2669,
  						53.3982
  					],
  					[
  						16.2915,
  						53.4086
  					],
  					[
  						16.3192,
  						53.4072
  					],
  					[
  						16.3573,
  						53.4319
  					],
  					[
  						16.3888,
  						53.425
  					],
  					[
  						16.4398,
  						53.4593
  					],
  					[
  						16.4751,
  						53.3881
  					],
  					[
  						16.4994,
  						53.385
  					],
  					[
  						16.5257,
  						53.3672
  					],
  					[
  						16.594,
  						53.345
  					],
  					[
  						16.6235,
  						53.3462
  					],
  					[
  						16.6566,
  						53.3209
  					],
  					[
  						16.7145,
  						53.2991
  					],
  					[
  						16.6745,
  						53.2901
  					],
  					[
  						16.6342,
  						53.2603
  					],
  					[
  						16.6207,
  						53.2336
  					],
  					[
  						16.6346,
  						53.2199
  					],
  					[
  						16.6096,
  						53.2087
  					],
  					[
  						16.5957,
  						53.2277
  					],
  					[
  						16.5586,
  						53.229
  					],
  					[
  						16.5011,
  						53.1727
  					],
  					[
  						16.4552,
  						53.1644
  					],
  					[
  						16.4248,
  						53.1486
  					],
  					[
  						16.3992,
  						53.1637
  					],
  					[
  						16.3905,
  						53.131
  					],
  					[
  						16.346,
  						53.1124
  					],
  					[
  						16.3642,
  						53.0822
  					],
  					[
  						16.3169,
  						53.0367
  					],
  					[
  						16.2709,
  						53.0492
  					],
  					[
  						16.1861,
  						53.0336
  					],
  					[
  						16.1378,
  						53.0137
  					],
  					[
  						16.0835,
  						53.0145
  					],
  					[
  						16.0231,
  						53.0356
  					],
  					[
  						15.9625,
  						53.0414
  					],
  					[
  						15.9943,
  						53.0731
  					],
  					[
  						15.982,
  						53.1155
  					],
  					[
  						15.9628,
  						53.129
  					],
  					[
  						15.98,
  						53.1721
  					],
  					[
  						16.0106,
  						53.2013
  					],
  					[
  						16.0232,
  						53.2269
  					],
  					[
  						16.0036,
  						53.2401
  					],
  					[
  						16.0292,
  						53.2686
  					],
  					[
  						16.076,
  						53.289
  					],
  					[
  						16.0509,
  						53.3104
  					],
  					[
  						16.0463,
  						53.3107
  					],
  					[
  						16.0082,
  						53.3112
  					],
  					[
  						15.9892,
  						53.3219
  					],
  					[
  						15.9982,
  						53.3371
  					],
  					[
  						15.9766,
  						53.3559
  					],
  					[
  						15.9761,
  						53.3764
  					],
  					[
  						16.0092,
  						53.4038
  					],
  					[
  						16.0689,
  						53.3977
  					],
  					[
  						16.0617,
  						53.4073
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 335,
  			name: "powiat drawski",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.0617,
  						53.4073
  					],
  					[
  						16.0689,
  						53.3977
  					],
  					[
  						16.0092,
  						53.4038
  					],
  					[
  						15.9761,
  						53.3764
  					],
  					[
  						15.9766,
  						53.3559
  					],
  					[
  						15.9982,
  						53.3371
  					],
  					[
  						15.9892,
  						53.3219
  					],
  					[
  						16.0082,
  						53.3112
  					],
  					[
  						16.0463,
  						53.3107
  					],
  					[
  						16.0509,
  						53.3104
  					],
  					[
  						16.076,
  						53.289
  					],
  					[
  						16.0292,
  						53.2686
  					],
  					[
  						16.0036,
  						53.2401
  					],
  					[
  						15.9927,
  						53.2202
  					],
  					[
  						15.9177,
  						53.2148
  					],
  					[
  						15.8746,
  						53.2256
  					],
  					[
  						15.8468,
  						53.214
  					],
  					[
  						15.8149,
  						53.2293
  					],
  					[
  						15.8152,
  						53.2405
  					],
  					[
  						15.7716,
  						53.2861
  					],
  					[
  						15.7784,
  						53.3069
  					],
  					[
  						15.7397,
  						53.3152
  					],
  					[
  						15.7092,
  						53.3061
  					],
  					[
  						15.6846,
  						53.2885
  					],
  					[
  						15.6147,
  						53.2926
  					],
  					[
  						15.5848,
  						53.3433
  					],
  					[
  						15.5974,
  						53.3799
  					],
  					[
  						15.6031,
  						53.4299
  					],
  					[
  						15.6442,
  						53.4359
  					],
  					[
  						15.6521,
  						53.4542
  					],
  					[
  						15.7018,
  						53.4771
  					],
  					[
  						15.7049,
  						53.4975
  					],
  					[
  						15.7146,
  						53.5721
  					],
  					[
  						15.7322,
  						53.571
  					],
  					[
  						15.7561,
  						53.5972
  					],
  					[
  						15.7747,
  						53.5928
  					],
  					[
  						15.7733,
  						53.6359
  					],
  					[
  						15.8001,
  						53.6397
  					],
  					[
  						15.7907,
  						53.66
  					],
  					[
  						15.8203,
  						53.6788
  					],
  					[
  						15.8445,
  						53.6705
  					],
  					[
  						15.857,
  						53.652
  					],
  					[
  						15.9002,
  						53.6477
  					],
  					[
  						15.9364,
  						53.6676
  					],
  					[
  						15.9956,
  						53.6717
  					],
  					[
  						16.0303,
  						53.6595
  					],
  					[
  						16.0589,
  						53.6841
  					],
  					[
  						16.0618,
  						53.6869
  					],
  					[
  						16.0627,
  						53.6875
  					],
  					[
  						16.0626,
  						53.6875
  					],
  					[
  						16.0627,
  						53.6875
  					],
  					[
  						16.0626,
  						53.6875
  					],
  					[
  						16.0748,
  						53.6899
  					],
  					[
  						16.1189,
  						53.6689
  					],
  					[
  						16.1538,
  						53.6711
  					],
  					[
  						16.2033,
  						53.6936
  					],
  					[
  						16.2336,
  						53.6939
  					],
  					[
  						16.2337,
  						53.6939
  					],
  					[
  						16.2543,
  						53.6726
  					],
  					[
  						16.281,
  						53.6615
  					],
  					[
  						16.3006,
  						53.6289
  					],
  					[
  						16.2892,
  						53.6111
  					],
  					[
  						16.3045,
  						53.5897
  					],
  					[
  						16.3588,
  						53.5562
  					],
  					[
  						16.4039,
  						53.5615
  					],
  					[
  						16.4093,
  						53.531
  					],
  					[
  						16.4383,
  						53.5258
  					],
  					[
  						16.4572,
  						53.5084
  					],
  					[
  						16.4542,
  						53.4885
  					],
  					[
  						16.4398,
  						53.4593
  					],
  					[
  						16.3888,
  						53.425
  					],
  					[
  						16.3573,
  						53.4319
  					],
  					[
  						16.3192,
  						53.4072
  					],
  					[
  						16.2915,
  						53.4086
  					],
  					[
  						16.2669,
  						53.3982
  					],
  					[
  						16.2176,
  						53.3959
  					],
  					[
  						16.1506,
  						53.3761
  					],
  					[
  						16.111,
  						53.3802
  					],
  					[
  						16.1038,
  						53.3976
  					],
  					[
  						16.076,
  						53.4018
  					],
  					[
  						16.0617,
  						53.4073
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 336,
  			name: "powiat chojnicki",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.072,
  						53.7811
  					],
  					[
  						18.0468,
  						53.7362
  					],
  					[
  						18.0344,
  						53.7262
  					],
  					[
  						17.9912,
  						53.7245
  					],
  					[
  						17.9318,
  						53.7493
  					],
  					[
  						17.9009,
  						53.7479
  					],
  					[
  						17.8686,
  						53.7596
  					],
  					[
  						17.8967,
  						53.7099
  					],
  					[
  						17.8522,
  						53.6879
  					],
  					[
  						17.8335,
  						53.6924
  					],
  					[
  						17.7981,
  						53.6788
  					],
  					[
  						17.7665,
  						53.6882
  					],
  					[
  						17.7342,
  						53.6633
  					],
  					[
  						17.7119,
  						53.6362
  					],
  					[
  						17.7304,
  						53.5929
  					],
  					[
  						17.6872,
  						53.5927
  					],
  					[
  						17.6567,
  						53.5712
  					],
  					[
  						17.6508,
  						53.5816
  					],
  					[
  						17.6044,
  						53.5969
  					],
  					[
  						17.5793,
  						53.5785
  					],
  					[
  						17.5433,
  						53.5809
  					],
  					[
  						17.523,
  						53.6063
  					],
  					[
  						17.4664,
  						53.6015
  					],
  					[
  						17.4664,
  						53.6016
  					],
  					[
  						17.4666,
  						53.6035
  					],
  					[
  						17.4762,
  						53.6501
  					],
  					[
  						17.4917,
  						53.6497
  					],
  					[
  						17.5211,
  						53.7159
  					],
  					[
  						17.4567,
  						53.7269
  					],
  					[
  						17.4751,
  						53.7398
  					],
  					[
  						17.4619,
  						53.7652
  					],
  					[
  						17.4375,
  						53.788
  					],
  					[
  						17.4195,
  						53.7862
  					],
  					[
  						17.3772,
  						53.7919
  					],
  					[
  						17.3554,
  						53.8101
  					],
  					[
  						17.3423,
  						53.8614
  					],
  					[
  						17.3209,
  						53.8779
  					],
  					[
  						17.2979,
  						53.8728
  					],
  					[
  						17.3232,
  						53.9107
  					],
  					[
  						17.3667,
  						53.94
  					],
  					[
  						17.4012,
  						53.9188
  					],
  					[
  						17.4434,
  						53.932
  					],
  					[
  						17.4893,
  						53.9226
  					],
  					[
  						17.5185,
  						53.9771
  					],
  					[
  						17.5747,
  						53.9893
  					],
  					[
  						17.582,
  						54.0313
  					],
  					[
  						17.6468,
  						54.0259
  					],
  					[
  						17.6818,
  						53.9959
  					],
  					[
  						17.7244,
  						54.0016
  					],
  					[
  						17.7507,
  						53.9603
  					],
  					[
  						17.8133,
  						53.9558
  					],
  					[
  						17.8032,
  						53.9232
  					],
  					[
  						17.8373,
  						53.8968
  					],
  					[
  						17.8695,
  						53.8862
  					],
  					[
  						17.8599,
  						53.8704
  					],
  					[
  						17.8779,
  						53.8548
  					],
  					[
  						17.8652,
  						53.8362
  					],
  					[
  						17.9143,
  						53.8354
  					],
  					[
  						17.9333,
  						53.8422
  					],
  					[
  						17.9323,
  						53.8678
  					],
  					[
  						17.9705,
  						53.8792
  					],
  					[
  						17.9776,
  						53.8951
  					],
  					[
  						18.0142,
  						53.9149
  					],
  					[
  						18.0304,
  						53.9017
  					],
  					[
  						18.0992,
  						53.9312
  					],
  					[
  						18.1064,
  						53.9255
  					],
  					[
  						18.1402,
  						53.8934
  					],
  					[
  						18.108,
  						53.8937
  					],
  					[
  						18.0708,
  						53.8739
  					],
  					[
  						18.0874,
  						53.8346
  					],
  					[
  						18.1226,
  						53.824
  					],
  					[
  						18.0752,
  						53.7975
  					],
  					[
  						18.072,
  						53.7811
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 337,
  			name: "powiat przeworski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.3814,
  						50.0839
  					],
  					[
  						22.4125,
  						50.0905
  					],
  					[
  						22.4219,
  						50.1094
  					],
  					[
  						22.4479,
  						50.1231
  					],
  					[
  						22.524,
  						50.1307
  					],
  					[
  						22.5205,
  						50.1525
  					],
  					[
  						22.5351,
  						50.1941
  					],
  					[
  						22.562,
  						50.2089
  					],
  					[
  						22.6063,
  						50.2216
  					],
  					[
  						22.5736,
  						50.2512
  					],
  					[
  						22.5925,
  						50.2757
  					],
  					[
  						22.6195,
  						50.2668
  					],
  					[
  						22.6382,
  						50.3031
  					],
  					[
  						22.7009,
  						50.2947
  					],
  					[
  						22.7076,
  						50.2914
  					],
  					[
  						22.7193,
  						50.2955
  					],
  					[
  						22.752,
  						50.3029
  					],
  					[
  						22.8214,
  						50.302
  					],
  					[
  						22.8413,
  						50.2976
  					],
  					[
  						22.836,
  						50.2698
  					],
  					[
  						22.7978,
  						50.2094
  					],
  					[
  						22.7852,
  						50.2129
  					],
  					[
  						22.7259,
  						50.1928
  					],
  					[
  						22.7778,
  						50.1745
  					],
  					[
  						22.7564,
  						50.167
  					],
  					[
  						22.7635,
  						50.1434
  					],
  					[
  						22.7199,
  						50.1439
  					],
  					[
  						22.6698,
  						50.1288
  					],
  					[
  						22.608,
  						50.138
  					],
  					[
  						22.5839,
  						50.132
  					],
  					[
  						22.6025,
  						50.095
  					],
  					[
  						22.6004,
  						50.0418
  					],
  					[
  						22.5598,
  						50.0268
  					],
  					[
  						22.5513,
  						50.0115
  					],
  					[
  						22.5682,
  						49.9905
  					],
  					[
  						22.5648,
  						49.9628
  					],
  					[
  						22.4701,
  						49.9449
  					],
  					[
  						22.4359,
  						49.9138
  					],
  					[
  						22.4259,
  						49.9108
  					],
  					[
  						22.4184,
  						49.8883
  					],
  					[
  						22.3431,
  						49.8858
  					],
  					[
  						22.3066,
  						49.8729
  					],
  					[
  						22.3056,
  						49.8729
  					],
  					[
  						22.3054,
  						49.8727
  					],
  					[
  						22.3038,
  						49.8729
  					],
  					[
  						22.3035,
  						49.8729
  					],
  					[
  						22.2991,
  						49.8728
  					],
  					[
  						22.265,
  						49.8752
  					],
  					[
  						22.2649,
  						49.8752
  					],
  					[
  						22.265,
  						49.8752
  					],
  					[
  						22.2649,
  						49.8752
  					],
  					[
  						22.2645,
  						49.876
  					],
  					[
  						22.2634,
  						49.878
  					],
  					[
  						22.2641,
  						49.8788
  					],
  					[
  						22.2654,
  						49.8801
  					],
  					[
  						22.2511,
  						49.8896
  					],
  					[
  						22.2459,
  						49.8946
  					],
  					[
  						22.2456,
  						49.8954
  					],
  					[
  						22.2342,
  						49.9315
  					],
  					[
  						22.2761,
  						49.9265
  					],
  					[
  						22.3049,
  						49.9449
  					],
  					[
  						22.3168,
  						49.972
  					],
  					[
  						22.3044,
  						49.9856
  					],
  					[
  						22.3421,
  						50.0047
  					],
  					[
  						22.3424,
  						50.0058
  					],
  					[
  						22.3414,
  						50.0518
  					],
  					[
  						22.3742,
  						50.054
  					],
  					[
  						22.3814,
  						50.0839
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 338,
  			name: "powiat otwocki",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.2505,
  						52.2226
  					],
  					[
  						21.2833,
  						52.2215
  					],
  					[
  						21.3236,
  						52.2127
  					],
  					[
  						21.3967,
  						52.1883
  					],
  					[
  						21.3722,
  						52.1664
  					],
  					[
  						21.43,
  						52.1676
  					],
  					[
  						21.4512,
  						52.1461
  					],
  					[
  						21.4826,
  						52.1383
  					],
  					[
  						21.5174,
  						52.1119
  					],
  					[
  						21.5147,
  						52.0953
  					],
  					[
  						21.5489,
  						52.0872
  					],
  					[
  						21.5752,
  						52.0521
  					],
  					[
  						21.5777,
  						52.0332
  					],
  					[
  						21.5313,
  						52.0216
  					],
  					[
  						21.5137,
  						51.9836
  					],
  					[
  						21.469,
  						51.9788
  					],
  					[
  						21.465,
  						51.9257
  					],
  					[
  						21.4491,
  						51.9122
  					],
  					[
  						21.4003,
  						51.9007
  					],
  					[
  						21.3376,
  						51.8951
  					],
  					[
  						21.3204,
  						51.9032
  					],
  					[
  						21.2758,
  						51.8768
  					],
  					[
  						21.2391,
  						51.9016
  					],
  					[
  						21.2446,
  						51.9223
  					],
  					[
  						21.2673,
  						51.9372
  					],
  					[
  						21.2794,
  						51.9635
  					],
  					[
  						21.2217,
  						52.0042
  					],
  					[
  						21.2262,
  						52.035
  					],
  					[
  						21.2063,
  						52.0591
  					],
  					[
  						21.2167,
  						52.0831
  					],
  					[
  						21.2075,
  						52.1037
  					],
  					[
  						21.165,
  						52.1447
  					],
  					[
  						21.2488,
  						52.153
  					],
  					[
  						21.2677,
  						52.1674
  					],
  					[
  						21.2654,
  						52.186
  					],
  					[
  						21.2402,
  						52.1959
  					],
  					[
  						21.2617,
  						52.2101
  					],
  					[
  						21.2505,
  						52.2226
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 339,
  			name: "powiat kozienicki",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.2864,
  						51.8617
  					],
  					[
  						21.3105,
  						51.8427
  					],
  					[
  						21.3823,
  						51.8221
  					],
  					[
  						21.4351,
  						51.7838
  					],
  					[
  						21.4103,
  						51.745
  					],
  					[
  						21.4454,
  						51.7208
  					],
  					[
  						21.4451,
  						51.7043
  					],
  					[
  						21.4728,
  						51.6648
  					],
  					[
  						21.5432,
  						51.6642
  					],
  					[
  						21.5861,
  						51.6246
  					],
  					[
  						21.6155,
  						51.6176
  					],
  					[
  						21.6484,
  						51.603
  					],
  					[
  						21.6556,
  						51.5824
  					],
  					[
  						21.6961,
  						51.5701
  					],
  					[
  						21.7558,
  						51.5604
  					],
  					[
  						21.7824,
  						51.5686
  					],
  					[
  						21.8174,
  						51.5642
  					],
  					[
  						21.8331,
  						51.5484
  					],
  					[
  						21.8553,
  						51.5104
  					],
  					[
  						21.847,
  						51.488
  					],
  					[
  						21.874,
  						51.4716
  					],
  					[
  						21.8402,
  						51.4203
  					],
  					[
  						21.8014,
  						51.4276
  					],
  					[
  						21.7877,
  						51.4202
  					],
  					[
  						21.7524,
  						51.4272
  					],
  					[
  						21.7356,
  						51.4541
  					],
  					[
  						21.7423,
  						51.4782
  					],
  					[
  						21.7022,
  						51.4894
  					],
  					[
  						21.693,
  						51.4721
  					],
  					[
  						21.6067,
  						51.4725
  					],
  					[
  						21.6068,
  						51.4515
  					],
  					[
  						21.5568,
  						51.4517
  					],
  					[
  						21.55,
  						51.4446
  					],
  					[
  						21.537,
  						51.455
  					],
  					[
  						21.5666,
  						51.5242
  					],
  					[
  						21.5584,
  						51.5395
  					],
  					[
  						21.518,
  						51.5577
  					],
  					[
  						21.4874,
  						51.5457
  					],
  					[
  						21.4386,
  						51.5144
  					],
  					[
  						21.4182,
  						51.5356
  					],
  					[
  						21.3577,
  						51.5396
  					],
  					[
  						21.3037,
  						51.5585
  					],
  					[
  						21.2978,
  						51.5582
  					],
  					[
  						21.2575,
  						51.5663
  					],
  					[
  						21.2309,
  						51.5849
  					],
  					[
  						21.2055,
  						51.5887
  					],
  					[
  						21.2063,
  						51.607
  					],
  					[
  						21.2429,
  						51.6367
  					],
  					[
  						21.2145,
  						51.6521
  					],
  					[
  						21.214,
  						51.6664
  					],
  					[
  						21.1734,
  						51.6735
  					],
  					[
  						21.1761,
  						51.7321
  					],
  					[
  						21.1248,
  						51.7279
  					],
  					[
  						21.1186,
  						51.7439
  					],
  					[
  						21.1659,
  						51.7703
  					],
  					[
  						21.2036,
  						51.7832
  					],
  					[
  						21.2361,
  						51.7859
  					],
  					[
  						21.2428,
  						51.7984
  					],
  					[
  						21.2864,
  						51.8172
  					],
  					[
  						21.2621,
  						51.8532
  					],
  					[
  						21.2864,
  						51.8617
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 340,
  			name: "powiat janowski",
  			province: "Lubelskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						22.5781,
  						50.8384
  					],
  					[
  						22.6142,
  						50.8325
  					],
  					[
  						22.6247,
  						50.8044
  					],
  					[
  						22.642,
  						50.795
  					],
  					[
  						22.6738,
  						50.7678
  					],
  					[
  						22.6433,
  						50.7392
  					],
  					[
  						22.6503,
  						50.7258
  					],
  					[
  						22.6141,
  						50.7131
  					],
  					[
  						22.646,
  						50.6903
  					],
  					[
  						22.6549,
  						50.664
  					],
  					[
  						22.6783,
  						50.6524
  					],
  					[
  						22.6453,
  						50.625
  					],
  					[
  						22.5938,
  						50.5917
  					],
  					[
  						22.5197,
  						50.5832
  					],
  					[
  						22.4832,
  						50.5812
  					],
  					[
  						22.4653,
  						50.5919
  					],
  					[
  						22.4073,
  						50.5855
  					],
  					[
  						22.3493,
  						50.6141
  					],
  					[
  						22.2463,
  						50.6249
  					],
  					[
  						22.2232,
  						50.6598
  					],
  					[
  						22.1469,
  						50.673
  					],
  					[
  						22.1691,
  						50.6889
  					],
  					[
  						22.1704,
  						50.7062
  					],
  					[
  						22.2007,
  						50.7523
  					],
  					[
  						22.1975,
  						50.7609
  					],
  					[
  						22.1523,
  						50.7718
  					],
  					[
  						22.163,
  						50.7973
  					],
  					[
  						22.2481,
  						50.8422
  					],
  					[
  						22.2798,
  						50.8244
  					],
  					[
  						22.2752,
  						50.8143
  					],
  					[
  						22.3305,
  						50.7979
  					],
  					[
  						22.3598,
  						50.8093
  					],
  					[
  						22.3991,
  						50.8344
  					],
  					[
  						22.4181,
  						50.8874
  					],
  					[
  						22.4681,
  						50.8873
  					],
  					[
  						22.4748,
  						50.9129
  					],
  					[
  						22.4863,
  						50.9063
  					],
  					[
  						22.5373,
  						50.9089
  					],
  					[
  						22.5402,
  						50.8707
  					],
  					[
  						22.5327,
  						50.8476
  					],
  					[
  						22.5781,
  						50.8384
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 341,
  			name: "powiat limanowski",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.1753,
  						49.8045
  					],
  					[
  						20.1757,
  						49.8047
  					],
  					[
  						20.1768,
  						49.8048
  					],
  					[
  						20.1807,
  						49.806
  					],
  					[
  						20.2065,
  						49.8075
  					],
  					[
  						20.2067,
  						49.8074
  					],
  					[
  						20.2144,
  						49.8077
  					],
  					[
  						20.2109,
  						49.8108
  					],
  					[
  						20.2103,
  						49.8115
  					],
  					[
  						20.2107,
  						49.8118
  					],
  					[
  						20.2107,
  						49.8132
  					],
  					[
  						20.2433,
  						49.8277
  					],
  					[
  						20.2433,
  						49.8281
  					],
  					[
  						20.2443,
  						49.8295
  					],
  					[
  						20.2583,
  						49.8309
  					],
  					[
  						20.2667,
  						49.8212
  					],
  					[
  						20.2726,
  						49.8182
  					],
  					[
  						20.2902,
  						49.8057
  					],
  					[
  						20.3148,
  						49.8227
  					],
  					[
  						20.3436,
  						49.8157
  					],
  					[
  						20.3641,
  						49.7789
  					],
  					[
  						20.4127,
  						49.7847
  					],
  					[
  						20.4709,
  						49.7803
  					],
  					[
  						20.4826,
  						49.7982
  					],
  					[
  						20.5181,
  						49.7982
  					],
  					[
  						20.5851,
  						49.7619
  					],
  					[
  						20.566,
  						49.7359
  					],
  					[
  						20.5458,
  						49.7336
  					],
  					[
  						20.5523,
  						49.7163
  					],
  					[
  						20.5859,
  						49.6954
  					],
  					[
  						20.5796,
  						49.6755
  					],
  					[
  						20.5547,
  						49.6585
  					],
  					[
  						20.5486,
  						49.636
  					],
  					[
  						20.5225,
  						49.6288
  					],
  					[
  						20.5473,
  						49.6111
  					],
  					[
  						20.5395,
  						49.5827
  					],
  					[
  						20.5054,
  						49.5777
  					],
  					[
  						20.4696,
  						49.5945
  					],
  					[
  						20.4432,
  						49.5926
  					],
  					[
  						20.4328,
  						49.6084
  					],
  					[
  						20.3704,
  						49.6209
  					],
  					[
  						20.3695,
  						49.5891
  					],
  					[
  						20.3856,
  						49.5611
  					],
  					[
  						20.362,
  						49.5341
  					],
  					[
  						20.3393,
  						49.5389
  					],
  					[
  						20.3123,
  						49.5664
  					],
  					[
  						20.2618,
  						49.5682
  					],
  					[
  						20.2136,
  						49.5509
  					],
  					[
  						20.1503,
  						49.5439
  					],
  					[
  						20.1143,
  						49.5451
  					],
  					[
  						20.0673,
  						49.5601
  					],
  					[
  						20.046,
  						49.5593
  					],
  					[
  						20.0252,
  						49.5775
  					],
  					[
  						19.9994,
  						49.6133
  					],
  					[
  						20.0041,
  						49.6346
  					],
  					[
  						19.9919,
  						49.6535
  					],
  					[
  						20.0117,
  						49.6721
  					],
  					[
  						20.008,
  						49.7102
  					],
  					[
  						20.0393,
  						49.7464
  					],
  					[
  						20.0833,
  						49.7306
  					],
  					[
  						20.1432,
  						49.7528
  					],
  					[
  						20.1557,
  						49.8031
  					],
  					[
  						20.1753,
  						49.8045
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 342,
  			name: "powiat miechowski",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.95,
  						50.5048
  					],
  					[
  						19.9771,
  						50.5192
  					],
  					[
  						20.0076,
  						50.5155
  					],
  					[
  						20.0389,
  						50.5002
  					],
  					[
  						20.0763,
  						50.5096
  					],
  					[
  						20.0937,
  						50.4896
  					],
  					[
  						20.1666,
  						50.4844
  					],
  					[
  						20.204,
  						50.4957
  					],
  					[
  						20.2258,
  						50.4781
  					],
  					[
  						20.2729,
  						50.4699
  					],
  					[
  						20.2606,
  						50.4415
  					],
  					[
  						20.2899,
  						50.4191
  					],
  					[
  						20.3058,
  						50.389
  					],
  					[
  						20.3209,
  						50.3845
  					],
  					[
  						20.3269,
  						50.3515
  					],
  					[
  						20.3053,
  						50.3359
  					],
  					[
  						20.2926,
  						50.3222
  					],
  					[
  						20.24,
  						50.3003
  					],
  					[
  						20.1936,
  						50.2994
  					],
  					[
  						20.1769,
  						50.2902
  					],
  					[
  						20.1216,
  						50.3056
  					],
  					[
  						20.0742,
  						50.2942
  					],
  					[
  						20.0469,
  						50.2983
  					],
  					[
  						19.9957,
  						50.2827
  					],
  					[
  						19.9513,
  						50.2828
  					],
  					[
  						19.9014,
  						50.2761
  					],
  					[
  						19.9209,
  						50.2985
  					],
  					[
  						19.8925,
  						50.3098
  					],
  					[
  						19.8513,
  						50.3154
  					],
  					[
  						19.8254,
  						50.3274
  					],
  					[
  						19.8329,
  						50.3526
  					],
  					[
  						19.8474,
  						50.3609
  					],
  					[
  						19.8525,
  						50.407
  					],
  					[
  						19.8446,
  						50.4342
  					],
  					[
  						19.8445,
  						50.4342
  					],
  					[
  						19.8446,
  						50.4342
  					],
  					[
  						19.853,
  						50.4474
  					],
  					[
  						19.8969,
  						50.4524
  					],
  					[
  						19.9005,
  						50.4735
  					],
  					[
  						19.964,
  						50.4887
  					],
  					[
  						19.95,
  						50.5048
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 343,
  			name: "powiat myślenicki",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.8103,
  						49.8852
  					],
  					[
  						19.8482,
  						49.9225
  					],
  					[
  						19.883,
  						49.9241
  					],
  					[
  						19.8992,
  						49.9053
  					],
  					[
  						19.8996,
  						49.9039
  					],
  					[
  						19.9015,
  						49.9021
  					],
  					[
  						19.9016,
  						49.9021
  					],
  					[
  						19.9015,
  						49.9021
  					],
  					[
  						19.9016,
  						49.9021
  					],
  					[
  						19.9037,
  						49.9013
  					],
  					[
  						19.9038,
  						49.9013
  					],
  					[
  						19.9037,
  						49.9013
  					],
  					[
  						19.9038,
  						49.9013
  					],
  					[
  						19.9299,
  						49.9046
  					],
  					[
  						19.9298,
  						49.9046
  					],
  					[
  						19.9299,
  						49.9046
  					],
  					[
  						19.9335,
  						49.9088
  					],
  					[
  						19.9336,
  						49.9089
  					],
  					[
  						19.9337,
  						49.909
  					],
  					[
  						19.9336,
  						49.9101
  					],
  					[
  						19.9331,
  						49.9119
  					],
  					[
  						19.9334,
  						49.9122
  					],
  					[
  						19.9626,
  						49.9245
  					],
  					[
  						20.0013,
  						49.9311
  					],
  					[
  						20.006,
  						49.9177
  					],
  					[
  						20.0199,
  						49.9099
  					],
  					[
  						20.0618,
  						49.9155
  					],
  					[
  						20.0849,
  						49.9274
  					],
  					[
  						20.0903,
  						49.9233
  					],
  					[
  						20.0906,
  						49.9229
  					],
  					[
  						20.0909,
  						49.9224
  					],
  					[
  						20.1193,
  						49.9122
  					],
  					[
  						20.1267,
  						49.8885
  					],
  					[
  						20.1683,
  						49.8939
  					],
  					[
  						20.1825,
  						49.8783
  					],
  					[
  						20.2219,
  						49.8662
  					],
  					[
  						20.2325,
  						49.8636
  					],
  					[
  						20.2442,
  						49.8297
  					],
  					[
  						20.2443,
  						49.8295
  					],
  					[
  						20.2433,
  						49.8281
  					],
  					[
  						20.2433,
  						49.8277
  					],
  					[
  						20.2107,
  						49.8132
  					],
  					[
  						20.2107,
  						49.8118
  					],
  					[
  						20.2103,
  						49.8115
  					],
  					[
  						20.2109,
  						49.8108
  					],
  					[
  						20.2144,
  						49.8077
  					],
  					[
  						20.2067,
  						49.8074
  					],
  					[
  						20.2065,
  						49.8075
  					],
  					[
  						20.1807,
  						49.806
  					],
  					[
  						20.1768,
  						49.8048
  					],
  					[
  						20.1757,
  						49.8047
  					],
  					[
  						20.1753,
  						49.8045
  					],
  					[
  						20.1557,
  						49.8031
  					],
  					[
  						20.1432,
  						49.7528
  					],
  					[
  						20.0833,
  						49.7306
  					],
  					[
  						20.0393,
  						49.7464
  					],
  					[
  						20.008,
  						49.7102
  					],
  					[
  						20.0117,
  						49.6721
  					],
  					[
  						19.9919,
  						49.6535
  					],
  					[
  						19.9468,
  						49.6585
  					],
  					[
  						19.956,
  						49.6406
  					],
  					[
  						19.9389,
  						49.62
  					],
  					[
  						19.8937,
  						49.6376
  					],
  					[
  						19.9052,
  						49.6592
  					],
  					[
  						19.8858,
  						49.6833
  					],
  					[
  						19.897,
  						49.6909
  					],
  					[
  						19.9117,
  						49.7131
  					],
  					[
  						19.8684,
  						49.715
  					],
  					[
  						19.7959,
  						49.7055
  					],
  					[
  						19.7811,
  						49.7566
  					],
  					[
  						19.8043,
  						49.7656
  					],
  					[
  						19.7992,
  						49.7907
  					],
  					[
  						19.751,
  						49.7862
  					],
  					[
  						19.7576,
  						49.8301
  					],
  					[
  						19.7644,
  						49.8382
  					],
  					[
  						19.7655,
  						49.8426
  					],
  					[
  						19.7761,
  						49.8485
  					],
  					[
  						19.7891,
  						49.8767
  					],
  					[
  						19.8103,
  						49.8852
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 344,
  			name: "powiat olkuski",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.8445,
  						50.4342
  					],
  					[
  						19.8446,
  						50.4342
  					],
  					[
  						19.8525,
  						50.407
  					],
  					[
  						19.8474,
  						50.3609
  					],
  					[
  						19.8329,
  						50.3526
  					],
  					[
  						19.8254,
  						50.3274
  					],
  					[
  						19.8513,
  						50.3154
  					],
  					[
  						19.8925,
  						50.3098
  					],
  					[
  						19.9209,
  						50.2985
  					],
  					[
  						19.9014,
  						50.2761
  					],
  					[
  						19.8342,
  						50.2635
  					],
  					[
  						19.7746,
  						50.2714
  					],
  					[
  						19.7455,
  						50.2885
  					],
  					[
  						19.7041,
  						50.2996
  					],
  					[
  						19.6729,
  						50.2967
  					],
  					[
  						19.6845,
  						50.2551
  					],
  					[
  						19.6481,
  						50.2
  					],
  					[
  						19.5954,
  						50.1895
  					],
  					[
  						19.5887,
  						50.1981
  					],
  					[
  						19.5631,
  						50.2108
  					],
  					[
  						19.4841,
  						50.2291
  					],
  					[
  						19.442,
  						50.2266
  					],
  					[
  						19.3931,
  						50.2334
  					],
  					[
  						19.3234,
  						50.2591
  					],
  					[
  						19.3816,
  						50.273
  					],
  					[
  						19.4106,
  						50.3026
  					],
  					[
  						19.4066,
  						50.3174
  					],
  					[
  						19.4153,
  						50.3317
  					],
  					[
  						19.451,
  						50.3189
  					],
  					[
  						19.4839,
  						50.3236
  					],
  					[
  						19.4822,
  						50.3569
  					],
  					[
  						19.4594,
  						50.3633
  					],
  					[
  						19.4917,
  						50.366
  					],
  					[
  						19.4876,
  						50.397
  					],
  					[
  						19.5185,
  						50.4167
  					],
  					[
  						19.5501,
  						50.4128
  					],
  					[
  						19.6167,
  						50.4062
  					],
  					[
  						19.6717,
  						50.4158
  					],
  					[
  						19.6776,
  						50.4339
  					],
  					[
  						19.7019,
  						50.4482
  					],
  					[
  						19.7248,
  						50.4409
  					],
  					[
  						19.8,
  						50.4439
  					],
  					[
  						19.8445,
  						50.4342
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 345,
  			name: "powiat oświęcimski",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.1445,
  						50.0394
  					],
  					[
  						19.2133,
  						50.0741
  					],
  					[
  						19.2538,
  						50.1342
  					],
  					[
  						19.2592,
  						50.1169
  					],
  					[
  						19.2863,
  						50.0956
  					],
  					[
  						19.2967,
  						50.0574
  					],
  					[
  						19.3105,
  						50.0466
  					],
  					[
  						19.3688,
  						50.0464
  					],
  					[
  						19.3794,
  						50.0357
  					],
  					[
  						19.4315,
  						50.0245
  					],
  					[
  						19.4631,
  						50.0394
  					],
  					[
  						19.4795,
  						50.0274
  					],
  					[
  						19.5103,
  						50.0257
  					],
  					[
  						19.4831,
  						50.0201
  					],
  					[
  						19.473,
  						49.9944
  					],
  					[
  						19.4622,
  						49.9384
  					],
  					[
  						19.4221,
  						49.9555
  					],
  					[
  						19.3796,
  						49.958
  					],
  					[
  						19.3576,
  						49.9382
  					],
  					[
  						19.3089,
  						49.9125
  					],
  					[
  						19.2984,
  						49.8938
  					],
  					[
  						19.3157,
  						49.8692
  					],
  					[
  						19.29,
  						49.8506
  					],
  					[
  						19.2709,
  						49.8607
  					],
  					[
  						19.2026,
  						49.8716
  					],
  					[
  						19.1709,
  						49.853
  					],
  					[
  						19.1571,
  						49.8651
  					],
  					[
  						19.1945,
  						49.886
  					],
  					[
  						19.1849,
  						49.9501
  					],
  					[
  						19.1617,
  						49.9395
  					],
  					[
  						19.1186,
  						49.9389
  					],
  					[
  						19.0932,
  						49.9567
  					],
  					[
  						19.12,
  						49.9607
  					],
  					[
  						19.119,
  						50.0092
  					],
  					[
  						19.1445,
  						50.0394
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 346,
  			name: "powiat Piotrków Trybunalski",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.7007,
  						51.3757
  					],
  					[
  						19.6783,
  						51.3732
  					],
  					[
  						19.6344,
  						51.3859
  					],
  					[
  						19.6265,
  						51.4104
  					],
  					[
  						19.659,
  						51.4424
  					],
  					[
  						19.7407,
  						51.4443
  					],
  					[
  						19.7833,
  						51.4529
  					],
  					[
  						19.7814,
  						51.4347
  					],
  					[
  						19.7496,
  						51.4123
  					],
  					[
  						19.7444,
  						51.3785
  					],
  					[
  						19.7007,
  						51.3757
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 347,
  			name: "powiat poddębicki",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.7179,
  						52.0657
  					],
  					[
  						18.7528,
  						52.0765
  					],
  					[
  						18.7865,
  						52.061
  					],
  					[
  						18.8278,
  						52.0642
  					],
  					[
  						18.8858,
  						52.021
  					],
  					[
  						18.87,
  						52.0035
  					],
  					[
  						18.9164,
  						52.0015
  					],
  					[
  						18.9624,
  						52.0253
  					],
  					[
  						18.9979,
  						52.0092
  					],
  					[
  						19.0242,
  						52.0163
  					],
  					[
  						19.0778,
  						52.0062
  					],
  					[
  						19.0967,
  						52.0133
  					],
  					[
  						19.1286,
  						52.0005
  					],
  					[
  						19.1517,
  						51.9647
  					],
  					[
  						19.1363,
  						51.928
  					],
  					[
  						19.1449,
  						51.9057
  					],
  					[
  						19.1795,
  						51.9154
  					],
  					[
  						19.1905,
  						51.8993
  					],
  					[
  						19.1786,
  						51.875
  					],
  					[
  						19.1572,
  						51.8718
  					],
  					[
  						19.1386,
  						51.8251
  					],
  					[
  						19.1042,
  						51.8191
  					],
  					[
  						19.0847,
  						51.8302
  					],
  					[
  						19.0352,
  						51.8289
  					],
  					[
  						18.9989,
  						51.8199
  					],
  					[
  						19.027,
  						51.7908
  					],
  					[
  						19.056,
  						51.7781
  					],
  					[
  						19.047,
  						51.7669
  					],
  					[
  						19.0092,
  						51.7734
  					],
  					[
  						18.9857,
  						51.7637
  					],
  					[
  						18.9689,
  						51.7442
  					],
  					[
  						18.9015,
  						51.7545
  					],
  					[
  						18.8802,
  						51.7487
  					],
  					[
  						18.8536,
  						51.7202
  					],
  					[
  						18.8395,
  						51.7269
  					],
  					[
  						18.7642,
  						51.7496
  					],
  					[
  						18.7344,
  						51.7347
  					],
  					[
  						18.6551,
  						51.7472
  					],
  					[
  						18.6683,
  						51.8018
  					],
  					[
  						18.6857,
  						51.821
  					],
  					[
  						18.6968,
  						51.8657
  					],
  					[
  						18.721,
  						51.8735
  					],
  					[
  						18.7679,
  						51.9278
  					],
  					[
  						18.7425,
  						51.9371
  					],
  					[
  						18.7346,
  						52.0027
  					],
  					[
  						18.7165,
  						52.0323
  					],
  					[
  						18.7179,
  						52.0657
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 348,
  			name: "powiat wieluński",
  			province: "Łódzkie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.5612,
  						51.3836
  					],
  					[
  						18.6626,
  						51.3585
  					],
  					[
  						18.7668,
  						51.3652
  					],
  					[
  						18.7682,
  						51.3799
  					],
  					[
  						18.803,
  						51.4105
  					],
  					[
  						18.8286,
  						51.3993
  					],
  					[
  						18.857,
  						51.4019
  					],
  					[
  						18.8974,
  						51.3643
  					],
  					[
  						18.8613,
  						51.3233
  					],
  					[
  						18.8885,
  						51.3049
  					],
  					[
  						18.8562,
  						51.2908
  					],
  					[
  						18.8663,
  						51.2806
  					],
  					[
  						18.7975,
  						51.2509
  					],
  					[
  						18.7876,
  						51.2146
  					],
  					[
  						18.8272,
  						51.1983
  					],
  					[
  						18.8115,
  						51.1831
  					],
  					[
  						18.8184,
  						51.1642
  					],
  					[
  						18.7794,
  						51.1654
  					],
  					[
  						18.7759,
  						51.1353
  					],
  					[
  						18.7541,
  						51.12
  					],
  					[
  						18.7611,
  						51.0934
  					],
  					[
  						18.7844,
  						51.0856
  					],
  					[
  						18.7679,
  						51.0648
  					],
  					[
  						18.7029,
  						51.0644
  					],
  					[
  						18.673,
  						51.0569
  					],
  					[
  						18.6375,
  						51.0634
  					],
  					[
  						18.6232,
  						51.0755
  					],
  					[
  						18.6232,
  						51.0756
  					],
  					[
  						18.6232,
  						51.076
  					],
  					[
  						18.6232,
  						51.0766
  					],
  					[
  						18.6235,
  						51.0769
  					],
  					[
  						18.5808,
  						51.0903
  					],
  					[
  						18.5623,
  						51.1065
  					],
  					[
  						18.5537,
  						51.1388
  					],
  					[
  						18.5208,
  						51.1403
  					],
  					[
  						18.5177,
  						51.113
  					],
  					[
  						18.4987,
  						51.0996
  					],
  					[
  						18.4543,
  						51.1151
  					],
  					[
  						18.4219,
  						51.1171
  					],
  					[
  						18.3497,
  						51.1372
  					],
  					[
  						18.3475,
  						51.1864
  					],
  					[
  						18.3658,
  						51.2173
  					],
  					[
  						18.3698,
  						51.2641
  					],
  					[
  						18.4015,
  						51.2773
  					],
  					[
  						18.4053,
  						51.3162
  					],
  					[
  						18.4605,
  						51.3251
  					],
  					[
  						18.4755,
  						51.3035
  					],
  					[
  						18.5028,
  						51.2997
  					],
  					[
  						18.4982,
  						51.3278
  					],
  					[
  						18.5478,
  						51.3404
  					],
  					[
  						18.5376,
  						51.3732
  					],
  					[
  						18.5612,
  						51.3836
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 349,
  			name: "powiat brzozowski",
  			province: "Podkarpackie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.8948,
  						49.7811
  					],
  					[
  						21.9276,
  						49.7865
  					],
  					[
  						21.9421,
  						49.8047
  					],
  					[
  						21.9423,
  						49.8052
  					],
  					[
  						21.942,
  						49.8059
  					],
  					[
  						21.9419,
  						49.8059
  					],
  					[
  						21.942,
  						49.8059
  					],
  					[
  						21.9448,
  						49.809
  					],
  					[
  						21.9451,
  						49.8097
  					],
  					[
  						21.9454,
  						49.8104
  					],
  					[
  						21.9454,
  						49.8107
  					],
  					[
  						21.9448,
  						49.8114
  					],
  					[
  						21.9487,
  						49.8145
  					],
  					[
  						21.9668,
  						49.8225
  					],
  					[
  						22.0106,
  						49.8191
  					],
  					[
  						22.0202,
  						49.8376
  					],
  					[
  						22.0497,
  						49.8249
  					],
  					[
  						22.102,
  						49.8316
  					],
  					[
  						22.1018,
  						49.8301
  					],
  					[
  						22.1077,
  						49.8245
  					],
  					[
  						22.1373,
  						49.7956
  					],
  					[
  						22.1449,
  						49.7897
  					],
  					[
  						22.152,
  						49.7844
  					],
  					[
  						22.1521,
  						49.7843
  					],
  					[
  						22.1534,
  						49.7838
  					],
  					[
  						22.1541,
  						49.7839
  					],
  					[
  						22.1557,
  						49.7827
  					],
  					[
  						22.1565,
  						49.7827
  					],
  					[
  						22.1568,
  						49.7826
  					],
  					[
  						22.2062,
  						49.7956
  					],
  					[
  						22.2196,
  						49.7733
  					],
  					[
  						22.2623,
  						49.7632
  					],
  					[
  						22.2945,
  						49.7446
  					],
  					[
  						22.2596,
  						49.7117
  					],
  					[
  						22.3049,
  						49.7004
  					],
  					[
  						22.327,
  						49.6857
  					],
  					[
  						22.3131,
  						49.6682
  					],
  					[
  						22.2631,
  						49.6543
  					],
  					[
  						22.2621,
  						49.6539
  					],
  					[
  						22.2557,
  						49.6523
  					],
  					[
  						22.251,
  						49.6455
  					],
  					[
  						22.2521,
  						49.6416
  					],
  					[
  						22.2183,
  						49.6267
  					],
  					[
  						22.1908,
  						49.6508
  					],
  					[
  						22.1508,
  						49.6425
  					],
  					[
  						22.1135,
  						49.6549
  					],
  					[
  						22.078,
  						49.6389
  					],
  					[
  						22.0772,
  						49.6397
  					],
  					[
  						22.0742,
  						49.6398
  					],
  					[
  						22.0445,
  						49.6282
  					],
  					[
  						22.0125,
  						49.6366
  					],
  					[
  						21.9639,
  						49.6179
  					],
  					[
  						21.9223,
  						49.6311
  					],
  					[
  						21.8619,
  						49.6427
  					],
  					[
  						21.8527,
  						49.6585
  					],
  					[
  						21.8764,
  						49.6906
  					],
  					[
  						21.8765,
  						49.6908
  					],
  					[
  						21.9121,
  						49.7248
  					],
  					[
  						21.8985,
  						49.7442
  					],
  					[
  						21.854,
  						49.7547
  					],
  					[
  						21.8948,
  						49.7811
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 350,
  			name: "powiat kędzierzyńsko-kozielski",
  			province: "Opolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.4259,
  						50.249
  					],
  					[
  						18.3766,
  						50.2539
  					],
  					[
  						18.313,
  						50.2407
  					],
  					[
  						18.3084,
  						50.2313
  					],
  					[
  						18.2512,
  						50.2226
  					],
  					[
  						18.2359,
  						50.2135
  					],
  					[
  						18.2492,
  						50.1926
  					],
  					[
  						18.1335,
  						50.1844
  					],
  					[
  						18.0598,
  						50.1747
  					],
  					[
  						18.0325,
  						50.1732
  					],
  					[
  						17.9811,
  						50.1835
  					],
  					[
  						17.9786,
  						50.2049
  					],
  					[
  						17.9598,
  						50.2187
  					],
  					[
  						17.927,
  						50.2113
  					],
  					[
  						17.9191,
  						50.2651
  					],
  					[
  						17.9354,
  						50.2888
  					],
  					[
  						17.9113,
  						50.3037
  					],
  					[
  						17.9373,
  						50.3151
  					],
  					[
  						18.0283,
  						50.3254
  					],
  					[
  						18.0323,
  						50.346
  					],
  					[
  						18.06,
  						50.3615
  					],
  					[
  						18.0346,
  						50.3859
  					],
  					[
  						18.0679,
  						50.4169
  					],
  					[
  						18.0898,
  						50.4105
  					],
  					[
  						18.1255,
  						50.3705
  					],
  					[
  						18.1535,
  						50.3866
  					],
  					[
  						18.1889,
  						50.3766
  					],
  					[
  						18.2756,
  						50.3871
  					],
  					[
  						18.2902,
  						50.4012
  					],
  					[
  						18.3301,
  						50.3817
  					],
  					[
  						18.3577,
  						50.3566
  					],
  					[
  						18.3947,
  						50.3378
  					],
  					[
  						18.3921,
  						50.3134
  					],
  					[
  						18.427,
  						50.2687
  					],
  					[
  						18.4259,
  						50.249
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 351,
  			name: "powiat krotoszyński",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.3368,
  						51.8856
  					],
  					[
  						17.3974,
  						51.8734
  					],
  					[
  						17.4417,
  						51.8964
  					],
  					[
  						17.4706,
  						51.893
  					],
  					[
  						17.514,
  						51.9008
  					],
  					[
  						17.5304,
  						51.8386
  					],
  					[
  						17.5712,
  						51.8387
  					],
  					[
  						17.6042,
  						51.8202
  					],
  					[
  						17.6152,
  						51.7938
  					],
  					[
  						17.6467,
  						51.7956
  					],
  					[
  						17.7072,
  						51.7446
  					],
  					[
  						17.6608,
  						51.7363
  					],
  					[
  						17.6614,
  						51.715
  					],
  					[
  						17.6193,
  						51.6981
  					],
  					[
  						17.6044,
  						51.6747
  					],
  					[
  						17.5633,
  						51.6717
  					],
  					[
  						17.5484,
  						51.6273
  					],
  					[
  						17.578,
  						51.6137
  					],
  					[
  						17.5714,
  						51.59
  					],
  					[
  						17.5562,
  						51.5843
  					],
  					[
  						17.5219,
  						51.59
  					],
  					[
  						17.5192,
  						51.604
  					],
  					[
  						17.4713,
  						51.6261
  					],
  					[
  						17.3862,
  						51.6351
  					],
  					[
  						17.3301,
  						51.6479
  					],
  					[
  						17.2574,
  						51.6428
  					],
  					[
  						17.2399,
  						51.6418
  					],
  					[
  						17.2326,
  						51.6714
  					],
  					[
  						17.1908,
  						51.6769
  					],
  					[
  						17.1281,
  						51.702
  					],
  					[
  						17.1271,
  						51.7119
  					],
  					[
  						17.1758,
  						51.7147
  					],
  					[
  						17.1836,
  						51.7379
  					],
  					[
  						17.1528,
  						51.746
  					],
  					[
  						17.1805,
  						51.7912
  					],
  					[
  						17.2761,
  						51.7654
  					],
  					[
  						17.3225,
  						51.7613
  					],
  					[
  						17.3172,
  						51.813
  					],
  					[
  						17.3381,
  						51.8346
  					],
  					[
  						17.3171,
  						51.8486
  					],
  					[
  						17.3366,
  						51.8635
  					],
  					[
  						17.3368,
  						51.8856
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 352,
  			name: "powiat Białystok",
  			province: "Podlaskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						23.0802,
  						53.1785
  					],
  					[
  						23.1091,
  						53.1718
  					],
  					[
  						23.2001,
  						53.1801
  					],
  					[
  						23.2405,
  						53.1666
  					],
  					[
  						23.2326,
  						53.1308
  					],
  					[
  						23.2202,
  						53.1125
  					],
  					[
  						23.2472,
  						53.0998
  					],
  					[
  						23.2266,
  						53.0786
  					],
  					[
  						23.1602,
  						53.0927
  					],
  					[
  						23.1311,
  						53.0847
  					],
  					[
  						23.119,
  						53.105
  					],
  					[
  						23.0804,
  						53.1113
  					],
  					[
  						23.0672,
  						53.1349
  					],
  					[
  						23.0802,
  						53.1785
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 353,
  			name: "powiat wolsztyński",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.4467,
  						52.0336
  					],
  					[
  						16.4525,
  						52.0081
  					],
  					[
  						16.4264,
  						51.9737
  					],
  					[
  						16.3314,
  						51.9866
  					],
  					[
  						16.2881,
  						51.9458
  					],
  					[
  						16.2791,
  						51.9292
  					],
  					[
  						16.2012,
  						51.9424
  					],
  					[
  						16.1262,
  						51.9339
  					],
  					[
  						16.1373,
  						51.9544
  					],
  					[
  						16.1212,
  						51.9919
  					],
  					[
  						16.106,
  						51.9968
  					],
  					[
  						16.0606,
  						51.9772
  					],
  					[
  						16.0106,
  						51.9814
  					],
  					[
  						16.0031,
  						51.9956
  					],
  					[
  						15.9692,
  						52.0026
  					],
  					[
  						15.966,
  						52.0267
  					],
  					[
  						15.9944,
  						52.0352
  					],
  					[
  						15.9884,
  						52.0672
  					],
  					[
  						15.9698,
  						52.0754
  					],
  					[
  						15.9414,
  						52.0885
  					],
  					[
  						15.9208,
  						52.0693
  					],
  					[
  						15.8771,
  						52.088
  					],
  					[
  						15.8603,
  						52.0865
  					],
  					[
  						15.8333,
  						52.1111
  					],
  					[
  						15.875,
  						52.1305
  					],
  					[
  						15.8831,
  						52.1628
  					],
  					[
  						15.861,
  						52.1828
  					],
  					[
  						15.8883,
  						52.186
  					],
  					[
  						15.908,
  						52.1999
  					],
  					[
  						15.9382,
  						52.1967
  					],
  					[
  						15.9497,
  						52.215
  					],
  					[
  						15.987,
  						52.2127
  					],
  					[
  						15.9963,
  						52.232
  					],
  					[
  						16.0426,
  						52.2306
  					],
  					[
  						16.0725,
  						52.2437
  					],
  					[
  						16.0756,
  						52.2081
  					],
  					[
  						16.0874,
  						52.1758
  					],
  					[
  						16.1067,
  						52.1626
  					],
  					[
  						16.1592,
  						52.1759
  					],
  					[
  						16.1499,
  						52.1476
  					],
  					[
  						16.1705,
  						52.1394
  					],
  					[
  						16.2146,
  						52.0943
  					],
  					[
  						16.2521,
  						52.0943
  					],
  					[
  						16.2832,
  						52.0579
  					],
  					[
  						16.3405,
  						52.0841
  					],
  					[
  						16.3714,
  						52.0744
  					],
  					[
  						16.3767,
  						52.0546
  					],
  					[
  						16.4467,
  						52.0336
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 354,
  			name: "powiat sandomierski",
  			province: "Świętokrzyskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.8358,
  						50.8783
  					],
  					[
  						21.8474,
  						50.8617
  					],
  					[
  						21.8416,
  						50.8443
  					],
  					[
  						21.8665,
  						50.8221
  					],
  					[
  						21.8643,
  						50.8027
  					],
  					[
  						21.8406,
  						50.7601
  					],
  					[
  						21.8434,
  						50.7392
  					],
  					[
  						21.8189,
  						50.69
  					],
  					[
  						21.7938,
  						50.6757
  					],
  					[
  						21.7792,
  						50.645
  					],
  					[
  						21.7483,
  						50.6552
  					],
  					[
  						21.7226,
  						50.6454
  					],
  					[
  						21.7074,
  						50.6276
  					],
  					[
  						21.6674,
  						50.6011
  					],
  					[
  						21.6575,
  						50.573
  					],
  					[
  						21.6012,
  						50.5197
  					],
  					[
  						21.5538,
  						50.5205
  					],
  					[
  						21.5178,
  						50.5093
  					],
  					[
  						21.4828,
  						50.531
  					],
  					[
  						21.478,
  						50.5517
  					],
  					[
  						21.4502,
  						50.5733
  					],
  					[
  						21.4032,
  						50.5911
  					],
  					[
  						21.3909,
  						50.6308
  					],
  					[
  						21.3969,
  						50.6502
  					],
  					[
  						21.3551,
  						50.6559
  					],
  					[
  						21.3502,
  						50.6835
  					],
  					[
  						21.4164,
  						50.7042
  					],
  					[
  						21.4898,
  						50.7054
  					],
  					[
  						21.517,
  						50.6799
  					],
  					[
  						21.5419,
  						50.6998
  					],
  					[
  						21.5337,
  						50.7128
  					],
  					[
  						21.5573,
  						50.7314
  					],
  					[
  						21.5555,
  						50.7641
  					],
  					[
  						21.6227,
  						50.7951
  					],
  					[
  						21.6429,
  						50.7927
  					],
  					[
  						21.6892,
  						50.7731
  					],
  					[
  						21.7194,
  						50.7809
  					],
  					[
  						21.721,
  						50.8208
  					],
  					[
  						21.713,
  						50.8419
  					],
  					[
  						21.748,
  						50.8454
  					],
  					[
  						21.7535,
  						50.876
  					],
  					[
  						21.7989,
  						50.8703
  					],
  					[
  						21.8358,
  						50.8783
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 355,
  			name: "powiat szczecinecki",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.7928,
  						53.9856
  					],
  					[
  						16.8423,
  						53.9979
  					],
  					[
  						16.8746,
  						53.977
  					],
  					[
  						16.8755,
  						53.9446
  					],
  					[
  						16.9087,
  						53.9253
  					],
  					[
  						16.9647,
  						53.9046
  					],
  					[
  						16.9821,
  						53.9049
  					],
  					[
  						16.9765,
  						53.8796
  					],
  					[
  						16.9063,
  						53.8758
  					],
  					[
  						16.8724,
  						53.8687
  					],
  					[
  						16.8653,
  						53.8518
  					],
  					[
  						16.8762,
  						53.8318
  					],
  					[
  						16.9086,
  						53.8214
  					],
  					[
  						16.9095,
  						53.8018
  					],
  					[
  						16.9445,
  						53.8009
  					],
  					[
  						16.9307,
  						53.7772
  					],
  					[
  						16.8577,
  						53.7471
  					],
  					[
  						16.8773,
  						53.7191
  					],
  					[
  						16.8922,
  						53.6559
  					],
  					[
  						16.8665,
  						53.6503
  					],
  					[
  						16.8487,
  						53.6287
  					],
  					[
  						16.8138,
  						53.6308
  					],
  					[
  						16.7603,
  						53.6175
  					],
  					[
  						16.7278,
  						53.5673
  					],
  					[
  						16.7206,
  						53.5262
  					],
  					[
  						16.6954,
  						53.5181
  					],
  					[
  						16.6417,
  						53.4842
  					],
  					[
  						16.5844,
  						53.4837
  					],
  					[
  						16.4901,
  						53.4703
  					],
  					[
  						16.4542,
  						53.4885
  					],
  					[
  						16.4572,
  						53.5084
  					],
  					[
  						16.4383,
  						53.5258
  					],
  					[
  						16.4093,
  						53.531
  					],
  					[
  						16.4039,
  						53.5615
  					],
  					[
  						16.3588,
  						53.5562
  					],
  					[
  						16.3045,
  						53.5897
  					],
  					[
  						16.2892,
  						53.6111
  					],
  					[
  						16.3006,
  						53.6289
  					],
  					[
  						16.281,
  						53.6615
  					],
  					[
  						16.2543,
  						53.6726
  					],
  					[
  						16.2337,
  						53.6939
  					],
  					[
  						16.2336,
  						53.6939
  					],
  					[
  						16.2337,
  						53.6939
  					],
  					[
  						16.2668,
  						53.7212
  					],
  					[
  						16.268,
  						53.7232
  					],
  					[
  						16.2387,
  						53.7514
  					],
  					[
  						16.226,
  						53.7655
  					],
  					[
  						16.2269,
  						53.7895
  					],
  					[
  						16.2025,
  						53.8028
  					],
  					[
  						16.2005,
  						53.8254
  					],
  					[
  						16.216,
  						53.8399
  					],
  					[
  						16.2551,
  						53.8429
  					],
  					[
  						16.2647,
  						53.8709
  					],
  					[
  						16.3264,
  						53.877
  					],
  					[
  						16.3397,
  						53.8987
  					],
  					[
  						16.3661,
  						53.9168
  					],
  					[
  						16.4405,
  						53.9042
  					],
  					[
  						16.4647,
  						53.9079
  					],
  					[
  						16.4758,
  						53.9084
  					],
  					[
  						16.4871,
  						53.9082
  					],
  					[
  						16.5255,
  						53.9023
  					],
  					[
  						16.5411,
  						53.8886
  					],
  					[
  						16.5798,
  						53.8867
  					],
  					[
  						16.594,
  						53.9039
  					],
  					[
  						16.6341,
  						53.8995
  					],
  					[
  						16.6635,
  						53.9092
  					],
  					[
  						16.6817,
  						53.8897
  					],
  					[
  						16.7348,
  						53.8911
  					],
  					[
  						16.7101,
  						53.9188
  					],
  					[
  						16.7189,
  						53.9534
  					],
  					[
  						16.7623,
  						53.9662
  					],
  					[
  						16.7583,
  						53.9887
  					],
  					[
  						16.7928,
  						53.9856
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 356,
  			name: "powiat świdwiński",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.5604,
  						53.8069
  					],
  					[
  						15.5621,
  						53.8299
  					],
  					[
  						15.5569,
  						53.845
  					],
  					[
  						15.5564,
  						53.8465
  					],
  					[
  						15.5544,
  						53.8484
  					],
  					[
  						15.5388,
  						53.8642
  					],
  					[
  						15.5313,
  						53.8736
  					],
  					[
  						15.5634,
  						53.8906
  					],
  					[
  						15.5627,
  						53.9124
  					],
  					[
  						15.5875,
  						53.9334
  					],
  					[
  						15.6299,
  						53.946
  					],
  					[
  						15.6451,
  						53.9643
  					],
  					[
  						15.6997,
  						53.9567
  					],
  					[
  						15.7257,
  						53.964
  					],
  					[
  						15.7559,
  						53.9434
  					],
  					[
  						15.8083,
  						53.9281
  					],
  					[
  						15.7822,
  						53.9154
  					],
  					[
  						15.7869,
  						53.8906
  					],
  					[
  						15.8387,
  						53.9014
  					],
  					[
  						15.8753,
  						53.9168
  					],
  					[
  						15.9128,
  						53.9215
  					],
  					[
  						15.9329,
  						53.9117
  					],
  					[
  						15.9615,
  						53.9156
  					],
  					[
  						16.013,
  						53.9019
  					],
  					[
  						16.0463,
  						53.8806
  					],
  					[
  						16.0687,
  						53.8984
  					],
  					[
  						16.0978,
  						53.8861
  					],
  					[
  						16.1406,
  						53.8786
  					],
  					[
  						16.154,
  						53.8424
  					],
  					[
  						16.1479,
  						53.8225
  					],
  					[
  						16.1663,
  						53.8093
  					],
  					[
  						16.2005,
  						53.8254
  					],
  					[
  						16.2025,
  						53.8028
  					],
  					[
  						16.2269,
  						53.7895
  					],
  					[
  						16.226,
  						53.7655
  					],
  					[
  						16.2387,
  						53.7514
  					],
  					[
  						16.268,
  						53.7232
  					],
  					[
  						16.2668,
  						53.7212
  					],
  					[
  						16.2337,
  						53.6939
  					],
  					[
  						16.2336,
  						53.6939
  					],
  					[
  						16.2033,
  						53.6936
  					],
  					[
  						16.1538,
  						53.6711
  					],
  					[
  						16.1189,
  						53.6689
  					],
  					[
  						16.0748,
  						53.6899
  					],
  					[
  						16.0626,
  						53.6875
  					],
  					[
  						16.0627,
  						53.6875
  					],
  					[
  						16.0626,
  						53.6875
  					],
  					[
  						16.0627,
  						53.6875
  					],
  					[
  						16.0618,
  						53.6869
  					],
  					[
  						16.0589,
  						53.6841
  					],
  					[
  						16.0303,
  						53.6595
  					],
  					[
  						15.9956,
  						53.6717
  					],
  					[
  						15.9364,
  						53.6676
  					],
  					[
  						15.9002,
  						53.6477
  					],
  					[
  						15.857,
  						53.652
  					],
  					[
  						15.8445,
  						53.6705
  					],
  					[
  						15.8203,
  						53.6788
  					],
  					[
  						15.7907,
  						53.66
  					],
  					[
  						15.76,
  						53.6658
  					],
  					[
  						15.6837,
  						53.6943
  					],
  					[
  						15.6215,
  						53.7524
  					],
  					[
  						15.6031,
  						53.7547
  					],
  					[
  						15.5604,
  						53.8069
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 357,
  			name: "powiat piski",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.613,
  						53.4808
  					],
  					[
  						21.5517,
  						53.4781
  					],
  					[
  						21.55,
  						53.486
  					],
  					[
  						21.4817,
  						53.4952
  					],
  					[
  						21.456,
  						53.5093
  					],
  					[
  						21.4229,
  						53.6032
  					],
  					[
  						21.41,
  						53.6078
  					],
  					[
  						21.4216,
  						53.6382
  					],
  					[
  						21.476,
  						53.632
  					],
  					[
  						21.4678,
  						53.6783
  					],
  					[
  						21.4578,
  						53.6934
  					],
  					[
  						21.4622,
  						53.7219
  					],
  					[
  						21.5195,
  						53.7236
  					],
  					[
  						21.5163,
  						53.7468
  					],
  					[
  						21.5744,
  						53.7423
  					],
  					[
  						21.615,
  						53.7653
  					],
  					[
  						21.6483,
  						53.732
  					],
  					[
  						21.6802,
  						53.7223
  					],
  					[
  						21.7196,
  						53.7959
  					],
  					[
  						21.6941,
  						53.8025
  					],
  					[
  						21.6985,
  						53.8211
  					],
  					[
  						21.733,
  						53.825
  					],
  					[
  						21.734,
  						53.8449
  					],
  					[
  						21.7117,
  						53.8629
  					],
  					[
  						21.7438,
  						53.8919
  					],
  					[
  						21.7784,
  						53.8839
  					],
  					[
  						21.8009,
  						53.8908
  					],
  					[
  						21.8506,
  						53.8801
  					],
  					[
  						21.8984,
  						53.8928
  					],
  					[
  						21.9495,
  						53.8588
  					],
  					[
  						22.0085,
  						53.8789
  					],
  					[
  						22.0596,
  						53.8599
  					],
  					[
  						22.0445,
  						53.8383
  					],
  					[
  						22.1024,
  						53.8351
  					],
  					[
  						22.1274,
  						53.8159
  					],
  					[
  						22.1176,
  						53.7982
  					],
  					[
  						22.156,
  						53.7756
  					],
  					[
  						22.1912,
  						53.7635
  					],
  					[
  						22.215,
  						53.7401
  					],
  					[
  						22.2229,
  						53.7113
  					],
  					[
  						22.1898,
  						53.7004
  					],
  					[
  						22.1787,
  						53.6703
  					],
  					[
  						22.2044,
  						53.6572
  					],
  					[
  						22.2473,
  						53.6487
  					],
  					[
  						22.3056,
  						53.6268
  					],
  					[
  						22.2391,
  						53.5961
  					],
  					[
  						22.1943,
  						53.5662
  					],
  					[
  						22.1357,
  						53.5445
  					],
  					[
  						22.0505,
  						53.5249
  					],
  					[
  						22.0307,
  						53.4971
  					],
  					[
  						21.9899,
  						53.5221
  					],
  					[
  						21.9526,
  						53.5094
  					],
  					[
  						21.9235,
  						53.5085
  					],
  					[
  						21.902,
  						53.4932
  					],
  					[
  						21.891,
  						53.4665
  					],
  					[
  						21.8583,
  						53.4589
  					],
  					[
  						21.7906,
  						53.4793
  					],
  					[
  						21.6867,
  						53.4928
  					],
  					[
  						21.6479,
  						53.4812
  					],
  					[
  						21.613,
  						53.4808
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 358,
  			name: "powiat Świętochłowice",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.9298,
  						50.2709
  					],
  					[
  						18.9144,
  						50.2739
  					],
  					[
  						18.9046,
  						50.2781
  					],
  					[
  						18.8835,
  						50.2949
  					],
  					[
  						18.896,
  						50.3249
  					],
  					[
  						18.896,
  						50.325
  					],
  					[
  						18.896,
  						50.3249
  					],
  					[
  						18.927,
  						50.3181
  					],
  					[
  						18.919,
  						50.3025
  					],
  					[
  						18.935,
  						50.2851
  					],
  					[
  						18.9312,
  						50.271
  					],
  					[
  						18.9298,
  						50.2709
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 359,
  			name: "powiat Zabrze",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.7505,
  						50.264
  					],
  					[
  						18.7387,
  						50.2677
  					],
  					[
  						18.7358,
  						50.2708
  					],
  					[
  						18.7372,
  						50.2717
  					],
  					[
  						18.7406,
  						50.2737
  					],
  					[
  						18.7479,
  						50.2894
  					],
  					[
  						18.7328,
  						50.3002
  					],
  					[
  						18.732,
  						50.3052
  					],
  					[
  						18.7319,
  						50.3315
  					],
  					[
  						18.7541,
  						50.3416
  					],
  					[
  						18.7466,
  						50.3679
  					],
  					[
  						18.8002,
  						50.3739
  					],
  					[
  						18.8159,
  						50.3534
  					],
  					[
  						18.8515,
  						50.3394
  					],
  					[
  						18.8623,
  						50.3281
  					],
  					[
  						18.831,
  						50.3202
  					],
  					[
  						18.8218,
  						50.2739
  					],
  					[
  						18.7994,
  						50.2739
  					],
  					[
  						18.7923,
  						50.2468
  					],
  					[
  						18.7912,
  						50.2468
  					],
  					[
  						18.7911,
  						50.2468
  					],
  					[
  						18.7912,
  						50.2468
  					],
  					[
  						18.7911,
  						50.2468
  					],
  					[
  						18.7505,
  						50.264
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 360,
  			name: "powiat Olsztyn",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						20.3881,
  						53.8091
  					],
  					[
  						20.4358,
  						53.8282
  					],
  					[
  						20.457,
  						53.8133
  					],
  					[
  						20.481,
  						53.8285
  					],
  					[
  						20.553,
  						53.8065
  					],
  					[
  						20.5666,
  						53.7854
  					],
  					[
  						20.5261,
  						53.7344
  					],
  					[
  						20.4801,
  						53.7338
  					],
  					[
  						20.4079,
  						53.7606
  					],
  					[
  						20.3881,
  						53.8091
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 361,
  			name: "powiat braniewski",
  			province: "Warmińsko-Mazurskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.6357,
  						54.3922
  					],
  					[
  						19.6487,
  						54.4533
  					],
  					[
  						19.8103,
  						54.4419
  					],
  					[
  						20.0074,
  						54.4247
  					],
  					[
  						20.0513,
  						54.4232
  					],
  					[
  						20.3135,
  						54.4022
  					],
  					[
  						20.3354,
  						54.3716
  					],
  					[
  						20.3041,
  						54.3474
  					],
  					[
  						20.2773,
  						54.3411
  					],
  					[
  						20.2679,
  						54.3129
  					],
  					[
  						20.2786,
  						54.305
  					],
  					[
  						20.261,
  						54.275
  					],
  					[
  						20.3091,
  						54.2713
  					],
  					[
  						20.3475,
  						54.2582
  					],
  					[
  						20.3883,
  						54.2356
  					],
  					[
  						20.3936,
  						54.2219
  					],
  					[
  						20.3398,
  						54.2159
  					],
  					[
  						20.3327,
  						54.1873
  					],
  					[
  						20.2683,
  						54.1824
  					],
  					[
  						20.1859,
  						54.2023
  					],
  					[
  						20.1249,
  						54.1927
  					],
  					[
  						20.1279,
  						54.17
  					],
  					[
  						20.0867,
  						54.1781
  					],
  					[
  						20.0364,
  						54.1759
  					],
  					[
  						19.9993,
  						54.1927
  					],
  					[
  						19.9911,
  						54.1774
  					],
  					[
  						19.9545,
  						54.1766
  					],
  					[
  						19.9436,
  						54.1631
  					],
  					[
  						19.9535,
  						54.1401
  					],
  					[
  						19.9791,
  						54.1338
  					],
  					[
  						19.9142,
  						54.1229
  					],
  					[
  						19.8557,
  						54.1235
  					],
  					[
  						19.8319,
  						54.1069
  					],
  					[
  						19.7871,
  						54.1041
  					],
  					[
  						19.7346,
  						54.1227
  					],
  					[
  						19.7535,
  						54.1499
  					],
  					[
  						19.807,
  						54.158
  					],
  					[
  						19.784,
  						54.174
  					],
  					[
  						19.7768,
  						54.21
  					],
  					[
  						19.7814,
  						54.2457
  					],
  					[
  						19.7414,
  						54.2649
  					],
  					[
  						19.68,
  						54.2648
  					],
  					[
  						19.6488,
  						54.2768
  					],
  					[
  						19.642,
  						54.2941
  					],
  					[
  						19.6191,
  						54.302
  					],
  					[
  						19.6369,
  						54.3276
  					],
  					[
  						19.6246,
  						54.3403
  					],
  					[
  						19.6357,
  						54.3922
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 362,
  			name: "powiat kamieński",
  			province: "Zachodniopomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						14.8958,
  						54.0546
  					],
  					[
  						14.9011,
  						54.0447
  					],
  					[
  						14.954,
  						54.0403
  					],
  					[
  						14.9928,
  						54.0055
  					],
  					[
  						15.0578,
  						53.9648
  					],
  					[
  						15.0602,
  						53.9315
  					],
  					[
  						15.0245,
  						53.9121
  					],
  					[
  						15.0552,
  						53.9027
  					],
  					[
  						15.0419,
  						53.8795
  					],
  					[
  						15.0528,
  						53.8561
  					],
  					[
  						15.0388,
  						53.8373
  					],
  					[
  						15.0599,
  						53.8149
  					],
  					[
  						15.0967,
  						53.8127
  					],
  					[
  						15.0832,
  						53.7939
  					],
  					[
  						15.043,
  						53.7833
  					],
  					[
  						15.0109,
  						53.7865
  					],
  					[
  						14.9816,
  						53.7721
  					],
  					[
  						14.9513,
  						53.7755
  					],
  					[
  						14.914,
  						53.8092
  					],
  					[
  						14.8953,
  						53.8139
  					],
  					[
  						14.8224,
  						53.7938
  					],
  					[
  						14.8108,
  						53.8091
  					],
  					[
  						14.7736,
  						53.8064
  					],
  					[
  						14.7291,
  						53.8092
  					],
  					[
  						14.7236,
  						53.786
  					],
  					[
  						14.658,
  						53.7676
  					],
  					[
  						14.6151,
  						53.774
  					],
  					[
  						14.5787,
  						53.7872
  					],
  					[
  						14.5185,
  						53.7779
  					],
  					[
  						14.4409,
  						53.7726
  					],
  					[
  						14.4204,
  						53.864
  					],
  					[
  						14.3917,
  						53.916
  					],
  					[
  						14.4548,
  						53.9364
  					],
  					[
  						14.4992,
  						53.9634
  					],
  					[
  						14.6683,
  						54.003
  					],
  					[
  						14.7277,
  						54.0229
  					],
  					[
  						14.8958,
  						54.0546
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 363,
  			name: "powiat Częstochowa",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.0667,
  						50.7427
  					],
  					[
  						19.0337,
  						50.7484
  					],
  					[
  						19.0117,
  						50.7886
  					],
  					[
  						19.0293,
  						50.8233
  					],
  					[
  						19.0382,
  						50.8256
  					],
  					[
  						19.0402,
  						50.8414
  					],
  					[
  						19.0648,
  						50.861
  					],
  					[
  						19.0871,
  						50.8608
  					],
  					[
  						19.0889,
  						50.8655
  					],
  					[
  						19.1295,
  						50.8546
  					],
  					[
  						19.15,
  						50.879
  					],
  					[
  						19.1821,
  						50.877
  					],
  					[
  						19.1931,
  						50.8335
  					],
  					[
  						19.2319,
  						50.8225
  					],
  					[
  						19.2185,
  						50.8012
  					],
  					[
  						19.2253,
  						50.7883
  					],
  					[
  						19.1939,
  						50.7522
  					],
  					[
  						19.1449,
  						50.7582
  					],
  					[
  						19.0667,
  						50.7427
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 364,
  			name: "powiat trzebnicki",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.9051,
  						51.2095
  					],
  					[
  						16.8694,
  						51.237
  					],
  					[
  						16.84,
  						51.2515
  					],
  					[
  						16.8006,
  						51.2587
  					],
  					[
  						16.8101,
  						51.2739
  					],
  					[
  						16.8081,
  						51.3347
  					],
  					[
  						16.7752,
  						51.362
  					],
  					[
  						16.7976,
  						51.3828
  					],
  					[
  						16.7813,
  						51.4023
  					],
  					[
  						16.7984,
  						51.4208
  					],
  					[
  						16.7967,
  						51.4561
  					],
  					[
  						16.7642,
  						51.4854
  					],
  					[
  						16.7862,
  						51.5049
  					],
  					[
  						16.8208,
  						51.513
  					],
  					[
  						16.7917,
  						51.5287
  					],
  					[
  						16.8284,
  						51.5722
  					],
  					[
  						16.8508,
  						51.5799
  					],
  					[
  						16.8957,
  						51.5784
  					],
  					[
  						16.9279,
  						51.5524
  					],
  					[
  						16.9817,
  						51.5509
  					],
  					[
  						16.9906,
  						51.55
  					],
  					[
  						17.0029,
  						51.53
  					],
  					[
  						17.057,
  						51.5303
  					],
  					[
  						17.1,
  						51.4959
  					],
  					[
  						17.1124,
  						51.4481
  					],
  					[
  						17.1341,
  						51.4302
  					],
  					[
  						17.171,
  						51.4156
  					],
  					[
  						17.2019,
  						51.414
  					],
  					[
  						17.2356,
  						51.3918
  					],
  					[
  						17.2626,
  						51.3983
  					],
  					[
  						17.3401,
  						51.3729
  					],
  					[
  						17.3118,
  						51.3489
  					],
  					[
  						17.2879,
  						51.3423
  					],
  					[
  						17.2686,
  						51.3524
  					],
  					[
  						17.2555,
  						51.3102
  					],
  					[
  						17.265,
  						51.2855
  					],
  					[
  						17.2421,
  						51.267
  					],
  					[
  						17.1992,
  						51.2687
  					],
  					[
  						17.1576,
  						51.2396
  					],
  					[
  						17.1322,
  						51.2541
  					],
  					[
  						17.0923,
  						51.2491
  					],
  					[
  						17.0728,
  						51.2329
  					],
  					[
  						17.0875,
  						51.2143
  					],
  					[
  						17.1003,
  						51.1759
  					],
  					[
  						17.0654,
  						51.1649
  					],
  					[
  						17.0149,
  						51.1826
  					],
  					[
  						17.0009,
  						51.1975
  					],
  					[
  						16.958,
  						51.2094
  					],
  					[
  						16.9213,
  						51.1969
  					],
  					[
  						16.9051,
  						51.2095
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 365,
  			name: "powiat bydgoski",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.3669,
  						52.9869
  					],
  					[
  						18.3069,
  						52.991
  					],
  					[
  						18.244,
  						52.9741
  					],
  					[
  						18.2534,
  						52.9548
  					],
  					[
  						18.1891,
  						52.9444
  					],
  					[
  						18.1586,
  						52.9498
  					],
  					[
  						18.1121,
  						52.9403
  					],
  					[
  						18.0825,
  						52.949
  					],
  					[
  						18.0473,
  						52.9711
  					],
  					[
  						18.0088,
  						52.9628
  					],
  					[
  						17.9633,
  						53.0316
  					],
  					[
  						17.9391,
  						53.0386
  					],
  					[
  						17.8942,
  						53.033
  					],
  					[
  						17.8784,
  						53.043
  					],
  					[
  						17.8463,
  						53.0671
  					],
  					[
  						17.8402,
  						53.0917
  					],
  					[
  						17.7786,
  						53.0999
  					],
  					[
  						17.7904,
  						53.1279
  					],
  					[
  						17.784,
  						53.1395
  					],
  					[
  						17.744,
  						53.1423
  					],
  					[
  						17.755,
  						53.1655
  					],
  					[
  						17.7468,
  						53.1813
  					],
  					[
  						17.7146,
  						53.1876
  					],
  					[
  						17.7099,
  						53.2116
  					],
  					[
  						17.6857,
  						53.2116
  					],
  					[
  						17.7024,
  						53.2859
  					],
  					[
  						17.7324,
  						53.3214
  					],
  					[
  						17.7308,
  						53.3352
  					],
  					[
  						17.6873,
  						53.3416
  					],
  					[
  						17.7061,
  						53.3716
  					],
  					[
  						17.7707,
  						53.4023
  					],
  					[
  						17.7695,
  						53.4332
  					],
  					[
  						17.8133,
  						53.4327
  					],
  					[
  						17.8489,
  						53.4159
  					],
  					[
  						17.8971,
  						53.439
  					],
  					[
  						17.9323,
  						53.4301
  					],
  					[
  						17.9699,
  						53.3842
  					],
  					[
  						18.0343,
  						53.3936
  					],
  					[
  						18.0655,
  						53.3703
  					],
  					[
  						18.0577,
  						53.3407
  					],
  					[
  						18.1064,
  						53.3447
  					],
  					[
  						18.1165,
  						53.3301
  					],
  					[
  						18.1786,
  						53.2982
  					],
  					[
  						18.1852,
  						53.2787
  					],
  					[
  						18.2379,
  						53.2703
  					],
  					[
  						18.2797,
  						53.2531
  					],
  					[
  						18.3134,
  						53.2403
  					],
  					[
  						18.3189,
  						53.2234
  					],
  					[
  						18.3489,
  						53.2103
  					],
  					[
  						18.3495,
  						53.1698
  					],
  					[
  						18.3034,
  						53.1542
  					],
  					[
  						18.304,
  						53.1281
  					],
  					[
  						18.2732,
  						53.1335
  					],
  					[
  						18.2409,
  						53.1288
  					],
  					[
  						18.1868,
  						53.1063
  					],
  					[
  						18.1449,
  						53.1036
  					],
  					[
  						18.144,
  						53.1323
  					],
  					[
  						18.1865,
  						53.1498
  					],
  					[
  						18.2023,
  						53.1754
  					],
  					[
  						18.1784,
  						53.1836
  					],
  					[
  						18.1345,
  						53.178
  					],
  					[
  						18.118,
  						53.1671
  					],
  					[
  						18.0136,
  						53.1764
  					],
  					[
  						17.975,
  						53.1677
  					],
  					[
  						17.9788,
  						53.2085
  					],
  					[
  						17.9404,
  						53.2005
  					],
  					[
  						17.9584,
  						53.1503
  					],
  					[
  						17.8812,
  						53.1511
  					],
  					[
  						17.8874,
  						53.1344
  					],
  					[
  						17.9514,
  						53.1188
  					],
  					[
  						17.948,
  						53.1025
  					],
  					[
  						18.0279,
  						53.0951
  					],
  					[
  						18.0464,
  						53.0773
  					],
  					[
  						18.0398,
  						53.0501
  					],
  					[
  						18.1112,
  						53.0651
  					],
  					[
  						18.1364,
  						53.052
  					],
  					[
  						18.1402,
  						53.0855
  					],
  					[
  						18.154,
  						53.0988
  					],
  					[
  						18.2451,
  						53.0834
  					],
  					[
  						18.3004,
  						53.0796
  					],
  					[
  						18.4074,
  						53.0395
  					],
  					[
  						18.38,
  						53.0175
  					],
  					[
  						18.3669,
  						52.9869
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 366,
  			name: "powiat oławski",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.376,
  						51.1037
  					],
  					[
  						17.417,
  						51.0999
  					],
  					[
  						17.4331,
  						51.0877
  					],
  					[
  						17.427,
  						51.07
  					],
  					[
  						17.5184,
  						51.0515
  					],
  					[
  						17.5335,
  						51.043
  					],
  					[
  						17.5143,
  						51.0116
  					],
  					[
  						17.5437,
  						50.9998
  					],
  					[
  						17.5047,
  						50.985
  					],
  					[
  						17.5016,
  						50.9756
  					],
  					[
  						17.4314,
  						50.9671
  					],
  					[
  						17.438,
  						50.9399
  					],
  					[
  						17.4325,
  						50.9162
  					],
  					[
  						17.4075,
  						50.9107
  					],
  					[
  						17.3816,
  						50.9247
  					],
  					[
  						17.3525,
  						50.9007
  					],
  					[
  						17.3939,
  						50.8878
  					],
  					[
  						17.3842,
  						50.862
  					],
  					[
  						17.3282,
  						50.8506
  					],
  					[
  						17.3427,
  						50.8275
  					],
  					[
  						17.3183,
  						50.8211
  					],
  					[
  						17.2947,
  						50.8195
  					],
  					[
  						17.2451,
  						50.8478
  					],
  					[
  						17.2401,
  						50.8641
  					],
  					[
  						17.2056,
  						50.8694
  					],
  					[
  						17.1905,
  						50.8599
  					],
  					[
  						17.1554,
  						50.8634
  					],
  					[
  						17.1253,
  						50.8405
  					],
  					[
  						17.0874,
  						50.8845
  					],
  					[
  						17.073,
  						50.8897
  					],
  					[
  						17.0692,
  						50.9031
  					],
  					[
  						17.0801,
  						50.9258
  					],
  					[
  						17.1126,
  						50.9217
  					],
  					[
  						17.1041,
  						50.9498
  					],
  					[
  						17.1151,
  						50.9615
  					],
  					[
  						17.1601,
  						50.9675
  					],
  					[
  						17.1677,
  						50.9889
  					],
  					[
  						17.1974,
  						51.0094
  					],
  					[
  						17.2163,
  						51.0053
  					],
  					[
  						17.2514,
  						51.0171
  					],
  					[
  						17.2735,
  						51.0482
  					],
  					[
  						17.2961,
  						51.0663
  					],
  					[
  						17.3212,
  						51.064
  					],
  					[
  						17.3389,
  						51.0915
  					],
  					[
  						17.376,
  						51.1037
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 367,
  			name: "powiat średzki",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.8006,
  						51.2587
  					],
  					[
  						16.84,
  						51.2515
  					],
  					[
  						16.8694,
  						51.237
  					],
  					[
  						16.9051,
  						51.2095
  					],
  					[
  						16.8928,
  						51.1886
  					],
  					[
  						16.8527,
  						51.1779
  					],
  					[
  						16.8276,
  						51.1836
  					],
  					[
  						16.8276,
  						51.1588
  					],
  					[
  						16.8131,
  						51.1503
  					],
  					[
  						16.8332,
  						51.1243
  					],
  					[
  						16.8307,
  						51.1118
  					],
  					[
  						16.811,
  						51.0934
  					],
  					[
  						16.7832,
  						51.1014
  					],
  					[
  						16.7536,
  						51.0842
  					],
  					[
  						16.768,
  						51.0756
  					],
  					[
  						16.7579,
  						51.0545
  					],
  					[
  						16.721,
  						51.0614
  					],
  					[
  						16.7102,
  						51.0329
  					],
  					[
  						16.6213,
  						51.0129
  					],
  					[
  						16.6027,
  						51.0018
  					],
  					[
  						16.5608,
  						50.9996
  					],
  					[
  						16.5265,
  						50.991
  					],
  					[
  						16.4698,
  						51.0073
  					],
  					[
  						16.4173,
  						51.0043
  					],
  					[
  						16.3807,
  						51.0128
  					],
  					[
  						16.369,
  						51.0252
  					],
  					[
  						16.3372,
  						51.029
  					],
  					[
  						16.3322,
  						51.0463
  					],
  					[
  						16.3445,
  						51.0654
  					],
  					[
  						16.3735,
  						51.0733
  					],
  					[
  						16.392,
  						51.0584
  					],
  					[
  						16.4188,
  						51.0709
  					],
  					[
  						16.4799,
  						51.0876
  					],
  					[
  						16.475,
  						51.1059
  					],
  					[
  						16.4418,
  						51.1261
  					],
  					[
  						16.4637,
  						51.158
  					],
  					[
  						16.4456,
  						51.1789
  					],
  					[
  						16.467,
  						51.203
  					],
  					[
  						16.4488,
  						51.2121
  					],
  					[
  						16.4714,
  						51.2312
  					],
  					[
  						16.4969,
  						51.2261
  					],
  					[
  						16.5347,
  						51.2436
  					],
  					[
  						16.5792,
  						51.2488
  					],
  					[
  						16.5976,
  						51.2399
  					],
  					[
  						16.6294,
  						51.2512
  					],
  					[
  						16.6761,
  						51.2497
  					],
  					[
  						16.6916,
  						51.2413
  					],
  					[
  						16.7249,
  						51.2597
  					],
  					[
  						16.8006,
  						51.2587
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 368,
  			name: "powiat legnicki",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.4157,
  						51.2937
  					],
  					[
  						16.4363,
  						51.275
  					],
  					[
  						16.4583,
  						51.2715
  					],
  					[
  						16.4714,
  						51.2312
  					],
  					[
  						16.4488,
  						51.2121
  					],
  					[
  						16.467,
  						51.203
  					],
  					[
  						16.4456,
  						51.1789
  					],
  					[
  						16.4637,
  						51.158
  					],
  					[
  						16.4418,
  						51.1261
  					],
  					[
  						16.3871,
  						51.1289
  					],
  					[
  						16.3493,
  						51.1495
  					],
  					[
  						16.3265,
  						51.1439
  					],
  					[
  						16.3036,
  						51.1153
  					],
  					[
  						16.195,
  						51.1053
  					],
  					[
  						16.1952,
  						51.1223
  					],
  					[
  						16.1515,
  						51.1317
  					],
  					[
  						16.1341,
  						51.1119
  					],
  					[
  						16.0963,
  						51.1008
  					],
  					[
  						16.0473,
  						51.1153
  					],
  					[
  						16.0386,
  						51.1287
  					],
  					[
  						16.0297,
  						51.1462
  					],
  					[
  						16.0318,
  						51.1768
  					],
  					[
  						16.062,
  						51.197
  					],
  					[
  						16.0376,
  						51.2271
  					],
  					[
  						15.983,
  						51.2201
  					],
  					[
  						15.9527,
  						51.2048
  					],
  					[
  						15.9281,
  						51.2319
  					],
  					[
  						15.9047,
  						51.2462
  					],
  					[
  						15.8721,
  						51.2475
  					],
  					[
  						15.8079,
  						51.2621
  					],
  					[
  						15.8049,
  						51.2473
  					],
  					[
  						15.753,
  						51.2186
  					],
  					[
  						15.7435,
  						51.2531
  					],
  					[
  						15.7836,
  						51.2896
  					],
  					[
  						15.7718,
  						51.3194
  					],
  					[
  						15.8251,
  						51.3526
  					],
  					[
  						15.8403,
  						51.3836
  					],
  					[
  						15.9537,
  						51.3435
  					],
  					[
  						16.0138,
  						51.3275
  					],
  					[
  						16.0167,
  						51.307
  					],
  					[
  						16.0888,
  						51.2985
  					],
  					[
  						16.0932,
  						51.2872
  					],
  					[
  						16.1573,
  						51.2931
  					],
  					[
  						16.1903,
  						51.279
  					],
  					[
  						16.2122,
  						51.2954
  					],
  					[
  						16.2603,
  						51.2837
  					],
  					[
  						16.2869,
  						51.2964
  					],
  					[
  						16.3084,
  						51.2913
  					],
  					[
  						16.341,
  						51.3324
  					],
  					[
  						16.3878,
  						51.3186
  					],
  					[
  						16.4157,
  						51.2937
  					]
  				],
  				[
  					[
  						16.1632,
  						51.2416
  					],
  					[
  						16.1282,
  						51.2002
  					],
  					[
  						16.0928,
  						51.184
  					],
  					[
  						16.1057,
  						51.1668
  					],
  					[
  						16.1837,
  						51.1607
  					],
  					[
  						16.1953,
  						51.1933
  					],
  					[
  						16.2302,
  						51.1987
  					],
  					[
  						16.2205,
  						51.2402
  					],
  					[
  						16.1632,
  						51.2416
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 369,
  			name: "powiat Bydgoszcz",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						17.8812,
  						53.1511
  					],
  					[
  						17.9584,
  						53.1503
  					],
  					[
  						17.9404,
  						53.2005
  					],
  					[
  						17.9788,
  						53.2085
  					],
  					[
  						17.975,
  						53.1677
  					],
  					[
  						18.0136,
  						53.1764
  					],
  					[
  						18.118,
  						53.1671
  					],
  					[
  						18.1345,
  						53.178
  					],
  					[
  						18.1784,
  						53.1836
  					],
  					[
  						18.2023,
  						53.1754
  					],
  					[
  						18.1865,
  						53.1498
  					],
  					[
  						18.144,
  						53.1323
  					],
  					[
  						18.1449,
  						53.1036
  					],
  					[
  						18.154,
  						53.0988
  					],
  					[
  						18.1402,
  						53.0855
  					],
  					[
  						18.1364,
  						53.052
  					],
  					[
  						18.1112,
  						53.0651
  					],
  					[
  						18.0398,
  						53.0501
  					],
  					[
  						18.0464,
  						53.0773
  					],
  					[
  						18.0279,
  						53.0951
  					],
  					[
  						17.948,
  						53.1025
  					],
  					[
  						17.9514,
  						53.1188
  					],
  					[
  						17.8874,
  						53.1344
  					],
  					[
  						17.8812,
  						53.1511
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 370,
  			name: "powiat Grudziądz",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.704,
  						53.4517
  					],
  					[
  						18.7337,
  						53.4747
  					],
  					[
  						18.7563,
  						53.5239
  					],
  					[
  						18.7797,
  						53.5044
  					],
  					[
  						18.8099,
  						53.5075
  					],
  					[
  						18.8293,
  						53.524
  					],
  					[
  						18.8668,
  						53.4981
  					],
  					[
  						18.8133,
  						53.4866
  					],
  					[
  						18.7793,
  						53.4582
  					],
  					[
  						18.8135,
  						53.4461
  					],
  					[
  						18.8067,
  						53.4316
  					],
  					[
  						18.7621,
  						53.4348
  					],
  					[
  						18.7571,
  						53.4247
  					],
  					[
  						18.7125,
  						53.4296
  					],
  					[
  						18.704,
  						53.4517
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 371,
  			name: "powiat rypiński",
  			province: "Kujawsko-Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.2535,
  						53.1998
  					],
  					[
  						19.3187,
  						53.2174
  					],
  					[
  						19.3338,
  						53.2086
  					],
  					[
  						19.3197,
  						53.1891
  					],
  					[
  						19.3576,
  						53.1211
  					],
  					[
  						19.3734,
  						53.1062
  					],
  					[
  						19.4714,
  						53.1164
  					],
  					[
  						19.4868,
  						53.1002
  					],
  					[
  						19.5126,
  						53.1074
  					],
  					[
  						19.5529,
  						53.0888
  					],
  					[
  						19.5896,
  						53.0803
  					],
  					[
  						19.5927,
  						53.1058
  					],
  					[
  						19.6107,
  						53.1142
  					],
  					[
  						19.6465,
  						53.1122
  					],
  					[
  						19.6388,
  						53.0931
  					],
  					[
  						19.6522,
  						53.0378
  					],
  					[
  						19.6835,
  						53.0186
  					],
  					[
  						19.6702,
  						52.9935
  					],
  					[
  						19.6848,
  						52.963
  					],
  					[
  						19.6716,
  						52.9556
  					],
  					[
  						19.6121,
  						52.9769
  					],
  					[
  						19.5683,
  						52.9857
  					],
  					[
  						19.5825,
  						52.9569
  					],
  					[
  						19.5408,
  						52.9484
  					],
  					[
  						19.5289,
  						52.9364
  					],
  					[
  						19.4447,
  						52.939
  					],
  					[
  						19.3999,
  						52.9293
  					],
  					[
  						19.3078,
  						52.9447
  					],
  					[
  						19.2962,
  						52.9704
  					],
  					[
  						19.2594,
  						52.9853
  					],
  					[
  						19.239,
  						53.0015
  					],
  					[
  						19.2051,
  						53.0095
  					],
  					[
  						19.18,
  						53.0329
  					],
  					[
  						19.1824,
  						53.0493
  					],
  					[
  						19.223,
  						53.0617
  					],
  					[
  						19.2282,
  						53.0921
  					],
  					[
  						19.2538,
  						53.1084
  					],
  					[
  						19.2059,
  						53.1293
  					],
  					[
  						19.1863,
  						53.1526
  					],
  					[
  						19.2086,
  						53.1621
  					],
  					[
  						19.2535,
  						53.1998
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 372,
  			name: "powiat gorlicki",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.2418,
  						49.7761
  					],
  					[
  						21.2578,
  						49.7521
  					],
  					[
  						21.3102,
  						49.7488
  					],
  					[
  						21.3408,
  						49.6972
  					],
  					[
  						21.3417,
  						49.6593
  					],
  					[
  						21.3627,
  						49.6336
  					],
  					[
  						21.3267,
  						49.5937
  					],
  					[
  						21.3638,
  						49.577
  					],
  					[
  						21.3753,
  						49.5629
  					],
  					[
  						21.3929,
  						49.5115
  					],
  					[
  						21.3907,
  						49.489
  					],
  					[
  						21.4114,
  						49.4678
  					],
  					[
  						21.3922,
  						49.4558
  					],
  					[
  						21.3987,
  						49.4338
  					],
  					[
  						21.3371,
  						49.4514
  					],
  					[
  						21.3068,
  						49.4484
  					],
  					[
  						21.2775,
  						49.4609
  					],
  					[
  						21.2241,
  						49.4267
  					],
  					[
  						21.2273,
  						49.417
  					],
  					[
  						21.1921,
  						49.401
  					],
  					[
  						21.1522,
  						49.427
  					],
  					[
  						21.124,
  						49.4366
  					],
  					[
  						21.0547,
  						49.4212
  					],
  					[
  						21.0201,
  						49.46
  					],
  					[
  						21.0378,
  						49.4705
  					],
  					[
  						21.0363,
  						49.4905
  					],
  					[
  						21.018,
  						49.496
  					],
  					[
  						20.9994,
  						49.5334
  					],
  					[
  						21.0304,
  						49.5669
  					],
  					[
  						20.9994,
  						49.5968
  					],
  					[
  						21.0172,
  						49.6153
  					],
  					[
  						21.0471,
  						49.6201
  					],
  					[
  						21.0585,
  						49.6435
  					],
  					[
  						21.0041,
  						49.6766
  					],
  					[
  						20.9618,
  						49.6824
  					],
  					[
  						20.9565,
  						49.6723
  					],
  					[
  						20.9078,
  						49.6836
  					],
  					[
  						20.8886,
  						49.7017
  					],
  					[
  						20.8826,
  						49.7317
  					],
  					[
  						20.8824,
  						49.7318
  					],
  					[
  						20.8826,
  						49.7317
  					],
  					[
  						20.9396,
  						49.7285
  					],
  					[
  						20.9597,
  						49.7474
  					],
  					[
  						21.0012,
  						49.7451
  					],
  					[
  						21.0007,
  						49.7602
  					],
  					[
  						21.0415,
  						49.7633
  					],
  					[
  						21.0646,
  						49.7476
  					],
  					[
  						21.1018,
  						49.7711
  					],
  					[
  						21.1359,
  						49.7697
  					],
  					[
  						21.1576,
  						49.7816
  					],
  					[
  						21.2418,
  						49.7761
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 373,
  			name: "powiat lubański",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						15.4283,
  						51.1202
  					],
  					[
  						15.4075,
  						51.1003
  					],
  					[
  						15.4155,
  						51.0748
  					],
  					[
  						15.3959,
  						51.0519
  					],
  					[
  						15.4078,
  						51.0423
  					],
  					[
  						15.3777,
  						51.0239
  					],
  					[
  						15.3869,
  						51.0005
  					],
  					[
  						15.3058,
  						50.9864
  					],
  					[
  						15.3316,
  						50.9602
  					],
  					[
  						15.3529,
  						50.9219
  					],
  					[
  						15.3378,
  						50.9015
  					],
  					[
  						15.3033,
  						50.912
  					],
  					[
  						15.277,
  						50.8946
  					],
  					[
  						15.2705,
  						50.9121
  					],
  					[
  						15.268,
  						50.9177
  					],
  					[
  						15.2678,
  						50.9325
  					],
  					[
  						15.292,
  						50.9535
  					],
  					[
  						15.2485,
  						50.9797
  					],
  					[
  						15.2372,
  						50.9945
  					],
  					[
  						15.2091,
  						50.9918
  					],
  					[
  						15.2087,
  						50.9919
  					],
  					[
  						15.2029,
  						50.9915
  					],
  					[
  						15.1783,
  						50.9847
  					],
  					[
  						15.1682,
  						51.0185
  					],
  					[
  						15.149,
  						51.0337
  					],
  					[
  						15.1412,
  						51.0583
  					],
  					[
  						15.1211,
  						51.0802
  					],
  					[
  						15.1315,
  						51.0998
  					],
  					[
  						15.1305,
  						51.1263
  					],
  					[
  						15.1699,
  						51.1662
  					],
  					[
  						15.1973,
  						51.1619
  					],
  					[
  						15.217,
  						51.1931
  					],
  					[
  						15.2796,
  						51.192
  					],
  					[
  						15.3072,
  						51.1846
  					],
  					[
  						15.3402,
  						51.1995
  					],
  					[
  						15.3943,
  						51.1751
  					],
  					[
  						15.3907,
  						51.1564
  					],
  					[
  						15.4305,
  						51.1418
  					],
  					[
  						15.4283,
  						51.1202
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 374,
  			name: "powiat wadowicki",
  			province: "Małopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.5603,
  						50.0121
  					],
  					[
  						19.5809,
  						49.9889
  					],
  					[
  						19.6106,
  						49.9814
  					],
  					[
  						19.6394,
  						49.9896
  					],
  					[
  						19.6609,
  						49.976
  					],
  					[
  						19.6576,
  						49.9569
  					],
  					[
  						19.6975,
  						49.9506
  					],
  					[
  						19.7209,
  						49.9446
  					],
  					[
  						19.7236,
  						49.9403
  					],
  					[
  						19.7324,
  						49.9177
  					],
  					[
  						19.765,
  						49.9035
  					],
  					[
  						19.7727,
  						49.893
  					],
  					[
  						19.8103,
  						49.8852
  					],
  					[
  						19.7891,
  						49.8767
  					],
  					[
  						19.7761,
  						49.8485
  					],
  					[
  						19.7655,
  						49.8426
  					],
  					[
  						19.7644,
  						49.8382
  					],
  					[
  						19.7576,
  						49.8301
  					],
  					[
  						19.7521,
  						49.8306
  					],
  					[
  						19.7259,
  						49.8074
  					],
  					[
  						19.6441,
  						49.8078
  					],
  					[
  						19.606,
  						49.7927
  					],
  					[
  						19.5395,
  						49.8018
  					],
  					[
  						19.5089,
  						49.787
  					],
  					[
  						19.4497,
  						49.7957
  					],
  					[
  						19.415,
  						49.7753
  					],
  					[
  						19.3995,
  						49.7617
  					],
  					[
  						19.366,
  						49.7778
  					],
  					[
  						19.3499,
  						49.7714
  					],
  					[
  						19.3168,
  						49.7779
  					],
  					[
  						19.2866,
  						49.8164
  					],
  					[
  						19.29,
  						49.8506
  					],
  					[
  						19.3157,
  						49.8692
  					],
  					[
  						19.2984,
  						49.8938
  					],
  					[
  						19.3089,
  						49.9125
  					],
  					[
  						19.3576,
  						49.9382
  					],
  					[
  						19.3796,
  						49.958
  					],
  					[
  						19.4221,
  						49.9555
  					],
  					[
  						19.4622,
  						49.9384
  					],
  					[
  						19.473,
  						49.9944
  					],
  					[
  						19.4831,
  						50.0201
  					],
  					[
  						19.5103,
  						50.0257
  					],
  					[
  						19.5603,
  						50.0121
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 375,
  			name: "powiat ostrołęcki",
  			province: "Mazowieckie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						21.4263,
  						53.4489
  					],
  					[
  						21.4347,
  						53.4632
  					],
  					[
  						21.5179,
  						53.477
  					],
  					[
  						21.5517,
  						53.4781
  					],
  					[
  						21.613,
  						53.4808
  					],
  					[
  						21.6073,
  						53.4357
  					],
  					[
  						21.625,
  						53.4285
  					],
  					[
  						21.6267,
  						53.4073
  					],
  					[
  						21.6524,
  						53.3972
  					],
  					[
  						21.6617,
  						53.378
  					],
  					[
  						21.684,
  						53.3681
  					],
  					[
  						21.6542,
  						53.3495
  					],
  					[
  						21.6928,
  						53.3358
  					],
  					[
  						21.7354,
  						53.3127
  					],
  					[
  						21.6662,
  						53.3111
  					],
  					[
  						21.6451,
  						53.2835
  					],
  					[
  						21.6622,
  						53.2385
  					],
  					[
  						21.6774,
  						53.2165
  					],
  					[
  						21.6802,
  						53.1879
  					],
  					[
  						21.7068,
  						53.1659
  					],
  					[
  						21.6946,
  						53.138
  					],
  					[
  						21.7362,
  						53.1092
  					],
  					[
  						21.8099,
  						53.1138
  					],
  					[
  						21.8433,
  						53.078
  					],
  					[
  						21.8726,
  						53.0588
  					],
  					[
  						21.9128,
  						53.0685
  					],
  					[
  						21.9141,
  						53.0697
  					],
  					[
  						21.926,
  						53.0781
  					],
  					[
  						21.9226,
  						53.0462
  					],
  					[
  						21.8769,
  						53.0217
  					],
  					[
  						21.8932,
  						53.0004
  					],
  					[
  						21.9604,
  						52.9798
  					],
  					[
  						21.9256,
  						52.949
  					],
  					[
  						21.8837,
  						52.9609
  					],
  					[
  						21.8313,
  						52.9395
  					],
  					[
  						21.8437,
  						52.9157
  					],
  					[
  						21.8026,
  						52.9111
  					],
  					[
  						21.7907,
  						52.8972
  					],
  					[
  						21.6956,
  						52.9087
  					],
  					[
  						21.6586,
  						52.9064
  					],
  					[
  						21.6135,
  						52.8928
  					],
  					[
  						21.6243,
  						52.8525
  					],
  					[
  						21.6019,
  						52.8342
  					],
  					[
  						21.5976,
  						52.8084
  					],
  					[
  						21.4792,
  						52.8014
  					],
  					[
  						21.4752,
  						52.8153
  					],
  					[
  						21.4374,
  						52.8471
  					],
  					[
  						21.4273,
  						52.8789
  					],
  					[
  						21.4566,
  						52.9024
  					],
  					[
  						21.4648,
  						52.9193
  					],
  					[
  						21.4427,
  						52.9373
  					],
  					[
  						21.4711,
  						52.9486
  					],
  					[
  						21.4689,
  						52.9627
  					],
  					[
  						21.4914,
  						52.9805
  					],
  					[
  						21.4632,
  						52.9998
  					],
  					[
  						21.3368,
  						53.0428
  					],
  					[
  						21.2979,
  						53.0798
  					],
  					[
  						21.2479,
  						53.0862
  					],
  					[
  						21.1817,
  						53.1146
  					],
  					[
  						21.2143,
  						53.1332
  					],
  					[
  						21.1932,
  						53.1509
  					],
  					[
  						21.1549,
  						53.159
  					],
  					[
  						21.147,
  						53.1746
  					],
  					[
  						21.1768,
  						53.1952
  					],
  					[
  						21.1557,
  						53.2379
  					],
  					[
  						21.1554,
  						53.2576
  					],
  					[
  						21.1877,
  						53.2635
  					],
  					[
  						21.2021,
  						53.2781
  					],
  					[
  						21.1412,
  						53.3068
  					],
  					[
  						21.1126,
  						53.3072
  					],
  					[
  						21.0713,
  						53.3273
  					],
  					[
  						21.0539,
  						53.3343
  					],
  					[
  						21.1361,
  						53.3656
  					],
  					[
  						21.1413,
  						53.3773
  					],
  					[
  						21.2497,
  						53.4196
  					],
  					[
  						21.2815,
  						53.4268
  					],
  					[
  						21.3393,
  						53.4195
  					],
  					[
  						21.4109,
  						53.4277
  					],
  					[
  						21.4263,
  						53.4489
  					]
  				],
  				[
  					[
  						21.5389,
  						53.0881
  					],
  					[
  						21.5369,
  						53.0699
  					],
  					[
  						21.6068,
  						53.0434
  					],
  					[
  						21.6233,
  						53.0565
  					],
  					[
  						21.6054,
  						53.071
  					],
  					[
  						21.6276,
  						53.084
  					],
  					[
  						21.666,
  						53.0927
  					],
  					[
  						21.6472,
  						53.11
  					],
  					[
  						21.5777,
  						53.0994
  					],
  					[
  						21.5505,
  						53.1063
  					],
  					[
  						21.5389,
  						53.0881
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 376,
  			name: "powiat żory",
  			province: "Śląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.6568,
  						50.0813
  					],
  					[
  						18.6898,
  						50.0718
  					],
  					[
  						18.6919,
  						50.0718
  					],
  					[
  						18.6935,
  						50.0724
  					],
  					[
  						18.7261,
  						50.0658
  					],
  					[
  						18.7536,
  						50.0544
  					],
  					[
  						18.7511,
  						50.0373
  					],
  					[
  						18.7736,
  						50.0203
  					],
  					[
  						18.7736,
  						50.0009
  					],
  					[
  						18.7384,
  						49.9995
  					],
  					[
  						18.7028,
  						50.0143
  					],
  					[
  						18.6797,
  						50.0048
  					],
  					[
  						18.6515,
  						50.0208
  					],
  					[
  						18.611,
  						50.0184
  					],
  					[
  						18.6099,
  						50.0413
  					],
  					[
  						18.6366,
  						50.0497
  					],
  					[
  						18.642,
  						50.0507
  					],
  					[
  						18.6568,
  						50.0813
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 377,
  			name: "powiat nowodworski",
  			province: "Pomorskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						19.6487,
  						54.4533
  					],
  					[
  						19.6357,
  						54.3922
  					],
  					[
  						19.415,
  						54.3201
  					],
  					[
  						19.2908,
  						54.2992
  					],
  					[
  						19.2534,
  						54.2703
  					],
  					[
  						19.2878,
  						54.2552
  					],
  					[
  						19.3175,
  						54.2257
  					],
  					[
  						19.3202,
  						54.1914
  					],
  					[
  						19.2853,
  						54.1865
  					],
  					[
  						19.247,
  						54.1672
  					],
  					[
  						19.2576,
  						54.1508
  					],
  					[
  						19.2177,
  						54.1161
  					],
  					[
  						19.2114,
  						54.1451
  					],
  					[
  						19.1553,
  						54.137
  					],
  					[
  						19.1452,
  						54.1466
  					],
  					[
  						19.0675,
  						54.1449
  					],
  					[
  						19.0439,
  						54.1663
  					],
  					[
  						19.0013,
  						54.1829
  					],
  					[
  						18.977,
  						54.1673
  					],
  					[
  						18.9507,
  						54.1773
  					],
  					[
  						18.863,
  						54.1525
  					],
  					[
  						18.8366,
  						54.1555
  					],
  					[
  						18.8649,
  						54.1876
  					],
  					[
  						18.9128,
  						54.2057
  					],
  					[
  						18.9441,
  						54.2395
  					],
  					[
  						18.9407,
  						54.2802
  					],
  					[
  						18.9336,
  						54.3097
  					],
  					[
  						18.95,
  						54.3583
  					],
  					[
  						18.9895,
  						54.3451
  					],
  					[
  						19.0367,
  						54.3445
  					],
  					[
  						19.1665,
  						54.3501
  					],
  					[
  						19.3074,
  						54.3633
  					],
  					[
  						19.4072,
  						54.3809
  					],
  					[
  						19.4781,
  						54.3978
  					],
  					[
  						19.5461,
  						54.4185
  					],
  					[
  						19.6377,
  						54.4592
  					],
  					[
  						19.6487,
  						54.4533
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 378,
  			name: "powiat jaworski",
  			province: "Dolnośląskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.2039,
  						50.8857
  					],
  					[
  						16.179,
  						50.8639
  					],
  					[
  						16.148,
  						50.8635
  					],
  					[
  						16.12,
  						50.853
  					],
  					[
  						16.103,
  						50.8589
  					],
  					[
  						16.0704,
  						50.8705
  					],
  					[
  						16.0741,
  						50.8842
  					],
  					[
  						16.0338,
  						50.8963
  					],
  					[
  						15.9803,
  						50.8953
  					],
  					[
  						15.962,
  						50.8946
  					],
  					[
  						15.931,
  						50.9007
  					],
  					[
  						15.9329,
  						50.9236
  					],
  					[
  						15.976,
  						50.9483
  					],
  					[
  						16.0014,
  						50.9909
  					],
  					[
  						15.9848,
  						50.9966
  					],
  					[
  						15.9767,
  						51.0211
  					],
  					[
  						15.9426,
  						51.0351
  					],
  					[
  						15.9329,
  						51.0612
  					],
  					[
  						15.9698,
  						51.0739
  					],
  					[
  						16.0107,
  						51.0794
  					],
  					[
  						16.0279,
  						51.1055
  					],
  					[
  						16.0473,
  						51.1153
  					],
  					[
  						16.0963,
  						51.1008
  					],
  					[
  						16.1341,
  						51.1119
  					],
  					[
  						16.1515,
  						51.1317
  					],
  					[
  						16.1952,
  						51.1223
  					],
  					[
  						16.195,
  						51.1053
  					],
  					[
  						16.3036,
  						51.1153
  					],
  					[
  						16.3265,
  						51.1439
  					],
  					[
  						16.3493,
  						51.1495
  					],
  					[
  						16.3871,
  						51.1289
  					],
  					[
  						16.4418,
  						51.1261
  					],
  					[
  						16.475,
  						51.1059
  					],
  					[
  						16.4799,
  						51.0876
  					],
  					[
  						16.4188,
  						51.0709
  					],
  					[
  						16.392,
  						51.0584
  					],
  					[
  						16.3735,
  						51.0733
  					],
  					[
  						16.3445,
  						51.0654
  					],
  					[
  						16.3322,
  						51.0463
  					],
  					[
  						16.3372,
  						51.029
  					],
  					[
  						16.2691,
  						51.0121
  					],
  					[
  						16.2651,
  						51.0022
  					],
  					[
  						16.2155,
  						51.0186
  					],
  					[
  						16.2009,
  						50.9739
  					],
  					[
  						16.1595,
  						50.9507
  					],
  					[
  						16.2009,
  						50.9058
  					],
  					[
  						16.2039,
  						50.8857
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 379,
  			name: "powiat poznański",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						16.7298,
  						52.5661
  					],
  					[
  						16.7801,
  						52.567
  					],
  					[
  						16.8973,
  						52.5842
  					],
  					[
  						16.9262,
  						52.5998
  					],
  					[
  						16.9181,
  						52.6346
  					],
  					[
  						16.9284,
  						52.6546
  					],
  					[
  						16.9718,
  						52.6573
  					],
  					[
  						16.9946,
  						52.6696
  					],
  					[
  						17.0329,
  						52.6762
  					],
  					[
  						17.0611,
  						52.6613
  					],
  					[
  						17.058,
  						52.6417
  					],
  					[
  						17.1008,
  						52.6234
  					],
  					[
  						17.122,
  						52.6277
  					],
  					[
  						17.1185,
  						52.5915
  					],
  					[
  						17.1303,
  						52.5668
  					],
  					[
  						17.1514,
  						52.574
  					],
  					[
  						17.1863,
  						52.553
  					],
  					[
  						17.2189,
  						52.5416
  					],
  					[
  						17.2623,
  						52.5501
  					],
  					[
  						17.2786,
  						52.5393
  					],
  					[
  						17.3159,
  						52.5451
  					],
  					[
  						17.3563,
  						52.5255
  					],
  					[
  						17.3255,
  						52.5092
  					],
  					[
  						17.3604,
  						52.4934
  					],
  					[
  						17.3384,
  						52.4787
  					],
  					[
  						17.3703,
  						52.4665
  					],
  					[
  						17.3735,
  						52.4497
  					],
  					[
  						17.3977,
  						52.4402
  					],
  					[
  						17.3818,
  						52.4188
  					],
  					[
  						17.3468,
  						52.4033
  					],
  					[
  						17.3751,
  						52.379
  					],
  					[
  						17.3687,
  						52.3453
  					],
  					[
  						17.3316,
  						52.3491
  					],
  					[
  						17.3127,
  						52.3299
  					],
  					[
  						17.2391,
  						52.3049
  					],
  					[
  						17.1829,
  						52.2572
  					],
  					[
  						17.1451,
  						52.2457
  					],
  					[
  						17.1776,
  						52.2277
  					],
  					[
  						17.1301,
  						52.2164
  					],
  					[
  						17.1537,
  						52.2049
  					],
  					[
  						17.1277,
  						52.1879
  					],
  					[
  						17.0984,
  						52.1838
  					],
  					[
  						17.0353,
  						52.1631
  					],
  					[
  						16.9777,
  						52.1854
  					],
  					[
  						16.9416,
  						52.1771
  					],
  					[
  						16.9053,
  						52.198
  					],
  					[
  						16.8722,
  						52.1824
  					],
  					[
  						16.8499,
  						52.1866
  					],
  					[
  						16.7993,
  						52.1768
  					],
  					[
  						16.7746,
  						52.1851
  					],
  					[
  						16.7813,
  						52.2029
  					],
  					[
  						16.7413,
  						52.2155
  					],
  					[
  						16.7102,
  						52.1936
  					],
  					[
  						16.6844,
  						52.2092
  					],
  					[
  						16.626,
  						52.1894
  					],
  					[
  						16.603,
  						52.1711
  					],
  					[
  						16.5891,
  						52.2363
  					],
  					[
  						16.6074,
  						52.2565
  					],
  					[
  						16.604,
  						52.2707
  					],
  					[
  						16.572,
  						52.284
  					],
  					[
  						16.5127,
  						52.2699
  					],
  					[
  						16.5005,
  						52.2783
  					],
  					[
  						16.4995,
  						52.315
  					],
  					[
  						16.5104,
  						52.3386
  					],
  					[
  						16.468,
  						52.3513
  					],
  					[
  						16.4607,
  						52.3766
  					],
  					[
  						16.584,
  						52.3976
  					],
  					[
  						16.5992,
  						52.4198
  					],
  					[
  						16.5849,
  						52.4422
  					],
  					[
  						16.6039,
  						52.454
  					],
  					[
  						16.6289,
  						52.4943
  					],
  					[
  						16.6495,
  						52.5143
  					],
  					[
  						16.6498,
  						52.5296
  					],
  					[
  						16.7048,
  						52.5317
  					],
  					[
  						16.7336,
  						52.5442
  					],
  					[
  						16.7298,
  						52.5661
  					]
  				],
  				[
  					[
  						17.0248,
  						52.4377
  					],
  					[
  						16.9757,
  						52.4415
  					],
  					[
  						16.9717,
  						52.5011
  					],
  					[
  						16.8882,
  						52.4947
  					],
  					[
  						16.8962,
  						52.4653
  					],
  					[
  						16.8305,
  						52.4694
  					],
  					[
  						16.7831,
  						52.4825
  					],
  					[
  						16.7392,
  						52.4654
  					],
  					[
  						16.7794,
  						52.4592
  					],
  					[
  						16.8008,
  						52.4373
  					],
  					[
  						16.7951,
  						52.4108
  					],
  					[
  						16.8341,
  						52.3704
  					],
  					[
  						16.8662,
  						52.359
  					],
  					[
  						16.9017,
  						52.3559
  					],
  					[
  						16.899,
  						52.3385
  					],
  					[
  						16.9476,
  						52.3107
  					],
  					[
  						16.9959,
  						52.2919
  					],
  					[
  						16.9835,
  						52.324
  					],
  					[
  						17.0121,
  						52.3369
  					],
  					[
  						17.0377,
  						52.329
  					],
  					[
  						17.0586,
  						52.3575
  					],
  					[
  						17.0447,
  						52.404
  					],
  					[
  						17.0655,
  						52.4163
  					],
  					[
  						17.0248,
  						52.4377
  					]
  				]
  			]
  		}
  	},
  	{
  		type: "Feature",
  		properties: {
  			id: 380,
  			name: "powiat koniński",
  			province: "Wielkopolskie"
  		},
  		geometry: {
  			type: "Polygon",
  			coordinates: [
  				[
  					[
  						18.1329,
  						52.5058
  					],
  					[
  						18.1546,
  						52.5095
  					],
  					[
  						18.2026,
  						52.5006
  					],
  					[
  						18.2002,
  						52.4863
  					],
  					[
  						18.2602,
  						52.4812
  					],
  					[
  						18.2942,
  						52.4997
  					],
  					[
  						18.2943,
  						52.4997
  					],
  					[
  						18.2942,
  						52.4997
  					],
  					[
  						18.2943,
  						52.4997
  					],
  					[
  						18.3452,
  						52.5217
  					],
  					[
  						18.3525,
  						52.5434
  					],
  					[
  						18.3772,
  						52.5375
  					],
  					[
  						18.3759,
  						52.5039
  					],
  					[
  						18.384,
  						52.4772
  					],
  					[
  						18.4635,
  						52.4766
  					],
  					[
  						18.4622,
  						52.4904
  					],
  					[
  						18.4925,
  						52.5032
  					],
  					[
  						18.5266,
  						52.4988
  					],
  					[
  						18.5267,
  						52.4988
  					],
  					[
  						18.5266,
  						52.4988
  					],
  					[
  						18.5267,
  						52.4988
  					],
  					[
  						18.5597,
  						52.4841
  					],
  					[
  						18.5717,
  						52.465
  					],
  					[
  						18.6501,
  						52.4503
  					],
  					[
  						18.6577,
  						52.4236
  					],
  					[
  						18.6002,
  						52.4172
  					],
  					[
  						18.6159,
  						52.3666
  					],
  					[
  						18.5902,
  						52.3146
  					],
  					[
  						18.531,
  						52.3059
  					],
  					[
  						18.5271,
  						52.295
  					],
  					[
  						18.4853,
  						52.2968
  					],
  					[
  						18.4906,
  						52.266
  					],
  					[
  						18.5365,
  						52.2529
  					],
  					[
  						18.5276,
  						52.2392
  					],
  					[
  						18.4597,
  						52.2043
  					],
  					[
  						18.4648,
  						52.1708
  					],
  					[
  						18.4209,
  						52.1553
  					],
  					[
  						18.3869,
  						52.1515
  					],
  					[
  						18.3761,
  						52.139
  					],
  					[
  						18.3293,
  						52.1228
  					],
  					[
  						18.2868,
  						52.1255
  					],
  					[
  						18.2727,
  						52.1083
  					],
  					[
  						18.2379,
  						52.0998
  					],
  					[
  						18.2378,
  						52.0998
  					],
  					[
  						18.2379,
  						52.0998
  					],
  					[
  						18.2378,
  						52.0998
  					],
  					[
  						18.2182,
  						52.0767
  					],
  					[
  						18.2285,
  						52.039
  					],
  					[
  						18.2134,
  						52.0146
  					],
  					[
  						18.1675,
  						52.0084
  					],
  					[
  						18.1683,
  						51.9861
  					],
  					[
  						18.0611,
  						51.9796
  					],
  					[
  						17.9905,
  						51.9976
  					],
  					[
  						17.9472,
  						52.0001
  					],
  					[
  						17.96,
  						52.0285
  					],
  					[
  						17.9797,
  						52.0479
  					],
  					[
  						17.9674,
  						52.0757
  					],
  					[
  						17.9346,
  						52.0909
  					],
  					[
  						17.9582,
  						52.0909
  					],
  					[
  						17.9711,
  						52.1064
  					],
  					[
  						18.0287,
  						52.1157
  					],
  					[
  						18.0281,
  						52.1268
  					],
  					[
  						17.9843,
  						52.1464
  					],
  					[
  						18.0254,
  						52.1732
  					],
  					[
  						18.0161,
  						52.228
  					],
  					[
  						18.0362,
  						52.2855
  					],
  					[
  						18.0667,
  						52.2947
  					],
  					[
  						18.0239,
  						52.322
  					],
  					[
  						18.0521,
  						52.3313
  					],
  					[
  						18.0854,
  						52.3664
  					],
  					[
  						18.0898,
  						52.3836
  					],
  					[
  						18.073,
  						52.4192
  					],
  					[
  						18.0261,
  						52.4502
  					],
  					[
  						18.0839,
  						52.4765
  					],
  					[
  						18.1329,
  						52.5058
  					]
  				],
  				[
  					[
  						18.2188,
  						52.1897
  					],
  					[
  						18.2316,
  						52.1896
  					],
  					[
  						18.2662,
  						52.1879
  					],
  					[
  						18.2929,
  						52.2232
  					],
  					[
  						18.3158,
  						52.2199
  					],
  					[
  						18.3238,
  						52.2454
  					],
  					[
  						18.2941,
  						52.2507
  					],
  					[
  						18.2924,
  						52.2655
  					],
  					[
  						18.3124,
  						52.2799
  					],
  					[
  						18.3086,
  						52.294
  					],
  					[
  						18.3071,
  						52.317
  					],
  					[
  						18.2271,
  						52.3286
  					],
  					[
  						18.2332,
  						52.2993
  					],
  					[
  						18.2085,
  						52.2894
  					],
  					[
  						18.2464,
  						52.2724
  					],
  					[
  						18.2525,
  						52.257
  					],
  					[
  						18.2032,
  						52.2441
  					],
  					[
  						18.1926,
  						52.2338
  					],
  					[
  						18.2243,
  						52.2152
  					],
  					[
  						18.2188,
  						52.1897
  					]
  				]
  			]
  		}
  	}
  ];
  var areas = {
  	type: type,
  	name: name,
  	crs: crs,
  	features: features
  };

  /**
   * @module helpers
   */

  /**
   * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.
   *
   * @memberof helpers
   * @type {number}
   */
  var earthRadius = 6371008.8;
  /**
   * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.
   *
   * @memberof helpers
   * @type {Object}
   */

  var factors = {
    centimeters: earthRadius * 100,
    centimetres: earthRadius * 100,
    degrees: earthRadius / 111325,
    feet: earthRadius * 3.28084,
    inches: earthRadius * 39.37,
    kilometers: earthRadius / 1000,
    kilometres: earthRadius / 1000,
    meters: earthRadius,
    metres: earthRadius,
    miles: earthRadius / 1609.344,
    millimeters: earthRadius * 1000,
    millimetres: earthRadius * 1000,
    nauticalmiles: earthRadius / 1852,
    radians: 1,
    yards: earthRadius * 1.0936
  };
  /**
   * Units of measurement factors based on 1 meter.
   *
   * @memberof helpers
   * @type {Object}
   */

  var unitsFactors = {
    centimeters: 100,
    centimetres: 100,
    degrees: 1 / 111325,
    feet: 3.28084,
    inches: 39.37,
    kilometers: 1 / 1000,
    kilometres: 1 / 1000,
    meters: 1,
    metres: 1,
    miles: 1 / 1609.344,
    millimeters: 1000,
    millimetres: 1000,
    nauticalmiles: 1 / 1852,
    radians: 1 / earthRadius,
    yards: 1.0936133
  };
  /**
   * Area of measurement factors based on 1 square meter.
   *
   * @memberof helpers
   * @type {Object}
   */

  var areaFactors = {
    acres: 0.000247105,
    centimeters: 10000,
    centimetres: 10000,
    feet: 10.763910417,
    hectares: 0.0001,
    inches: 1550.003100006,
    kilometers: 0.000001,
    kilometres: 0.000001,
    meters: 1,
    metres: 1,
    miles: 3.86e-7,
    millimeters: 1000000,
    millimetres: 1000000,
    yards: 1.195990046
  };
  /**
   * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.
   *
   * @name feature
   * @param {Geometry} geometry input geometry
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature} a GeoJSON Feature
   * @example
   * var geometry = {
   *   "type": "Point",
   *   "coordinates": [110, 50]
   * };
   *
   * var feature = turf.feature(geometry);
   *
   * //=feature
   */

  function feature(geom, properties, options) {
    if (options === void 0) {
      options = {};
    }

    var feat = {
      type: "Feature"
    };

    if (options.id === 0 || options.id) {
      feat.id = options.id;
    }

    if (options.bbox) {
      feat.bbox = options.bbox;
    }

    feat.properties = properties || {};
    feat.geometry = geom;
    return feat;
  }
  /**
   * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.
   * For GeometryCollection type use `helpers.geometryCollection`
   *
   * @name geometry
   * @param {string} type Geometry Type
   * @param {Array<any>} coordinates Coordinates
   * @param {Object} [options={}] Optional Parameters
   * @returns {Geometry} a GeoJSON Geometry
   * @example
   * var type = "Point";
   * var coordinates = [110, 50];
   * var geometry = turf.geometry(type, coordinates);
   * // => geometry
   */

  function geometry$1(type, coordinates, _options) {

    switch (type) {
      case "Point":
        return point(coordinates).geometry;

      case "LineString":
        return lineString(coordinates).geometry;

      case "Polygon":
        return polygon(coordinates).geometry;

      case "MultiPoint":
        return multiPoint(coordinates).geometry;

      case "MultiLineString":
        return multiLineString(coordinates).geometry;

      case "MultiPolygon":
        return multiPolygon(coordinates).geometry;

      default:
        throw new Error(type + " is invalid");
    }
  }
  /**
   * Creates a {@link Point} {@link Feature} from a Position.
   *
   * @name point
   * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<Point>} a Point feature
   * @example
   * var point = turf.point([-75.343, 39.984]);
   *
   * //=point
   */

  function point(coordinates, properties, options) {
    if (options === void 0) {
      options = {};
    }

    if (!coordinates) {
      throw new Error("coordinates is required");
    }

    if (!Array.isArray(coordinates)) {
      throw new Error("coordinates must be an Array");
    }

    if (coordinates.length < 2) {
      throw new Error("coordinates must be at least 2 numbers long");
    }

    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {
      throw new Error("coordinates must contain numbers");
    }

    var geom = {
      type: "Point",
      coordinates: coordinates
    };
    return feature(geom, properties, options);
  }
  /**
   * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.
   *
   * @name points
   * @param {Array<Array<number>>} coordinates an array of Points
   * @param {Object} [properties={}] Translate these properties to each Feature
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]
   * associated with the FeatureCollection
   * @param {string|number} [options.id] Identifier associated with the FeatureCollection
   * @returns {FeatureCollection<Point>} Point Feature
   * @example
   * var points = turf.points([
   *   [-75, 39],
   *   [-80, 45],
   *   [-78, 50]
   * ]);
   *
   * //=points
   */

  function points(coordinates, properties, options) {
    if (options === void 0) {
      options = {};
    }

    return featureCollection$1(coordinates.map(function (coords) {
      return point(coords, properties);
    }), options);
  }
  /**
   * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.
   *
   * @name polygon
   * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<Polygon>} Polygon Feature
   * @example
   * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });
   *
   * //=polygon
   */

  function polygon(coordinates, properties, options) {
    if (options === void 0) {
      options = {};
    }

    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {
      var ring = coordinates_1[_i];

      if (ring.length < 4) {
        throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");
      }

      for (var j = 0; j < ring[ring.length - 1].length; j++) {
        // Check if first point of Polygon contains two numbers
        if (ring[ring.length - 1][j] !== ring[0][j]) {
          throw new Error("First and last Position are not equivalent.");
        }
      }
    }

    var geom = {
      type: "Polygon",
      coordinates: coordinates
    };
    return feature(geom, properties, options);
  }
  /**
   * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.
   *
   * @name polygons
   * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the FeatureCollection
   * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection
   * @example
   * var polygons = turf.polygons([
   *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],
   *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],
   * ]);
   *
   * //=polygons
   */

  function polygons(coordinates, properties, options) {
    if (options === void 0) {
      options = {};
    }

    return featureCollection$1(coordinates.map(function (coords) {
      return polygon(coords, properties);
    }), options);
  }
  /**
   * Creates a {@link LineString} {@link Feature} from an Array of Positions.
   *
   * @name lineString
   * @param {Array<Array<number>>} coordinates an array of Positions
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<LineString>} LineString Feature
   * @example
   * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});
   * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});
   *
   * //=linestring1
   * //=linestring2
   */

  function lineString(coordinates, properties, options) {
    if (options === void 0) {
      options = {};
    }

    if (coordinates.length < 2) {
      throw new Error("coordinates must be an array of two or more positions");
    }

    var geom = {
      type: "LineString",
      coordinates: coordinates
    };
    return feature(geom, properties, options);
  }
  /**
   * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.
   *
   * @name lineStrings
   * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]
   * associated with the FeatureCollection
   * @param {string|number} [options.id] Identifier associated with the FeatureCollection
   * @returns {FeatureCollection<LineString>} LineString FeatureCollection
   * @example
   * var linestrings = turf.lineStrings([
   *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],
   *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]
   * ]);
   *
   * //=linestrings
   */

  function lineStrings(coordinates, properties, options) {
    if (options === void 0) {
      options = {};
    }

    return featureCollection$1(coordinates.map(function (coords) {
      return lineString(coords, properties);
    }), options);
  }
  /**
   * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.
   *
   * @name featureCollection
   * @param {Feature[]} features input features
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {FeatureCollection} FeatureCollection of Features
   * @example
   * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});
   * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});
   * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});
   *
   * var collection = turf.featureCollection([
   *   locationA,
   *   locationB,
   *   locationC
   * ]);
   *
   * //=collection
   */

  function featureCollection$1(features, options) {
    if (options === void 0) {
      options = {};
    }

    var fc = {
      type: "FeatureCollection"
    };

    if (options.id) {
      fc.id = options.id;
    }

    if (options.bbox) {
      fc.bbox = options.bbox;
    }

    fc.features = features;
    return fc;
  }
  /**
   * Creates a {@link Feature<MultiLineString>} based on a
   * coordinate array. Properties can be added optionally.
   *
   * @name multiLineString
   * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<MultiLineString>} a MultiLineString feature
   * @throws {Error} if no coordinates are passed
   * @example
   * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);
   *
   * //=multiLine
   */

  function multiLineString(coordinates, properties, options) {
    if (options === void 0) {
      options = {};
    }

    var geom = {
      type: "MultiLineString",
      coordinates: coordinates
    };
    return feature(geom, properties, options);
  }
  /**
   * Creates a {@link Feature<MultiPoint>} based on a
   * coordinate array. Properties can be added optionally.
   *
   * @name multiPoint
   * @param {Array<Array<number>>} coordinates an array of Positions
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<MultiPoint>} a MultiPoint feature
   * @throws {Error} if no coordinates are passed
   * @example
   * var multiPt = turf.multiPoint([[0,0],[10,10]]);
   *
   * //=multiPt
   */

  function multiPoint(coordinates, properties, options) {
    if (options === void 0) {
      options = {};
    }

    var geom = {
      type: "MultiPoint",
      coordinates: coordinates
    };
    return feature(geom, properties, options);
  }
  /**
   * Creates a {@link Feature<MultiPolygon>} based on a
   * coordinate array. Properties can be added optionally.
   *
   * @name multiPolygon
   * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<MultiPolygon>} a multipolygon feature
   * @throws {Error} if no coordinates are passed
   * @example
   * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);
   *
   * //=multiPoly
   *
   */

  function multiPolygon(coordinates, properties, options) {
    if (options === void 0) {
      options = {};
    }

    var geom = {
      type: "MultiPolygon",
      coordinates: coordinates
    };
    return feature(geom, properties, options);
  }
  /**
   * Creates a {@link Feature<GeometryCollection>} based on a
   * coordinate array. Properties can be added optionally.
   *
   * @name geometryCollection
   * @param {Array<Geometry>} geometries an array of GeoJSON Geometries
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature
   * @example
   * var pt = turf.geometry("Point", [100, 0]);
   * var line = turf.geometry("LineString", [[101, 0], [102, 1]]);
   * var collection = turf.geometryCollection([pt, line]);
   *
   * // => collection
   */

  function geometryCollection(geometries, properties, options) {
    if (options === void 0) {
      options = {};
    }

    var geom = {
      type: "GeometryCollection",
      geometries: geometries
    };
    return feature(geom, properties, options);
  }
  /**
   * Round number to precision
   *
   * @param {number} num Number
   * @param {number} [precision=0] Precision
   * @returns {number} rounded number
   * @example
   * turf.round(120.4321)
   * //=120
   *
   * turf.round(120.4321, 2)
   * //=120.43
   */

  function round(num, precision) {
    if (precision === void 0) {
      precision = 0;
    }

    if (precision && !(precision >= 0)) {
      throw new Error("precision must be a positive number");
    }

    var multiplier = Math.pow(10, precision || 0);
    return Math.round(num * multiplier) / multiplier;
  }
  /**
   * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.
   * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
   *
   * @name radiansToLength
   * @param {number} radians in radians across the sphere
   * @param {string} [units="kilometers"] can be degrees, radians, miles, inches, yards, metres,
   * meters, kilometres, kilometers.
   * @returns {number} distance
   */

  function radiansToLength(radians, units) {
    if (units === void 0) {
      units = "kilometers";
    }

    var factor = factors[units];

    if (!factor) {
      throw new Error(units + " units is invalid");
    }

    return radians * factor;
  }
  /**
   * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians
   * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
   *
   * @name lengthToRadians
   * @param {number} distance in real units
   * @param {string} [units="kilometers"] can be degrees, radians, miles, inches, yards, metres,
   * meters, kilometres, kilometers.
   * @returns {number} radians
   */

  function lengthToRadians(distance, units) {
    if (units === void 0) {
      units = "kilometers";
    }

    var factor = factors[units];

    if (!factor) {
      throw new Error(units + " units is invalid");
    }

    return distance / factor;
  }
  /**
   * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees
   * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet
   *
   * @name lengthToDegrees
   * @param {number} distance in real units
   * @param {string} [units="kilometers"] can be degrees, radians, miles, inches, yards, metres,
   * meters, kilometres, kilometers.
   * @returns {number} degrees
   */

  function lengthToDegrees(distance, units) {
    return radiansToDegrees(lengthToRadians(distance, units));
  }
  /**
   * Converts any bearing angle from the north line direction (positive clockwise)
   * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line
   *
   * @name bearingToAzimuth
   * @param {number} bearing angle, between -180 and +180 degrees
   * @returns {number} angle between 0 and 360 degrees
   */

  function bearingToAzimuth(bearing) {
    var angle = bearing % 360;

    if (angle < 0) {
      angle += 360;
    }

    return angle;
  }
  /**
   * Converts an angle in radians to degrees
   *
   * @name radiansToDegrees
   * @param {number} radians angle in radians
   * @returns {number} degrees between 0 and 360 degrees
   */

  function radiansToDegrees(radians) {
    var degrees = radians % (2 * Math.PI);
    return degrees * 180 / Math.PI;
  }
  /**
   * Converts an angle in degrees to radians
   *
   * @name degreesToRadians
   * @param {number} degrees angle between 0 and 360 degrees
   * @returns {number} angle in radians
   */

  function degreesToRadians(degrees) {
    var radians = degrees % 360;
    return radians * Math.PI / 180;
  }
  /**
   * Converts a length to the requested unit.
   * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
   *
   * @param {number} length to be converted
   * @param {Units} [originalUnit="kilometers"] of the length
   * @param {Units} [finalUnit="kilometers"] returned unit
   * @returns {number} the converted length
   */

  function convertLength(length, originalUnit, finalUnit) {
    if (originalUnit === void 0) {
      originalUnit = "kilometers";
    }

    if (finalUnit === void 0) {
      finalUnit = "kilometers";
    }

    if (!(length >= 0)) {
      throw new Error("length must be a positive number");
    }

    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);
  }
  /**
   * Converts a area to the requested unit.
   * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares
   * @param {number} area to be converted
   * @param {Units} [originalUnit="meters"] of the distance
   * @param {Units} [finalUnit="kilometers"] returned unit
   * @returns {number} the converted area
   */

  function convertArea(area, originalUnit, finalUnit) {
    if (originalUnit === void 0) {
      originalUnit = "meters";
    }

    if (finalUnit === void 0) {
      finalUnit = "kilometers";
    }

    if (!(area >= 0)) {
      throw new Error("area must be a positive number");
    }

    var startFactor = areaFactors[originalUnit];

    if (!startFactor) {
      throw new Error("invalid original units");
    }

    var finalFactor = areaFactors[finalUnit];

    if (!finalFactor) {
      throw new Error("invalid final units");
    }

    return area / startFactor * finalFactor;
  }
  /**
   * isNumber
   *
   * @param {*} num Number to validate
   * @returns {boolean} true/false
   * @example
   * turf.isNumber(123)
   * //=true
   * turf.isNumber('foo')
   * //=false
   */

  function isNumber(num) {
    return !isNaN(num) && num !== null && !Array.isArray(num);
  }
  /**
   * isObject
   *
   * @param {*} input variable to validate
   * @returns {boolean} true/false
   * @example
   * turf.isObject({elevation: 10})
   * //=true
   * turf.isObject('foo')
   * //=false
   */

  function isObject(input) {
    return !!input && input.constructor === Object;
  }
  /**
   * Validate BBox
   *
   * @private
   * @param {Array<number>} bbox BBox to validate
   * @returns {void}
   * @throws Error if BBox is not valid
   * @example
   * validateBBox([-180, -40, 110, 50])
   * //=OK
   * validateBBox([-180, -40])
   * //=Error
   * validateBBox('Foo')
   * //=Error
   * validateBBox(5)
   * //=Error
   * validateBBox(null)
   * //=Error
   * validateBBox(undefined)
   * //=Error
   */

  function validateBBox(bbox) {
    if (!bbox) {
      throw new Error("bbox is required");
    }

    if (!Array.isArray(bbox)) {
      throw new Error("bbox must be an Array");
    }

    if (bbox.length !== 4 && bbox.length !== 6) {
      throw new Error("bbox must be an Array of 4 or 6 numbers");
    }

    bbox.forEach(function (num) {
      if (!isNumber(num)) {
        throw new Error("bbox must only contain numbers");
      }
    });
  }
  /**
   * Validate Id
   *
   * @private
   * @param {string|number} id Id to validate
   * @returns {void}
   * @throws Error if Id is not valid
   * @example
   * validateId([-180, -40, 110, 50])
   * //=Error
   * validateId([-180, -40])
   * //=Error
   * validateId('Foo')
   * //=OK
   * validateId(5)
   * //=OK
   * validateId(null)
   * //=Error
   * validateId(undefined)
   * //=Error
   */

  function validateId(id) {
    if (!id) {
      throw new Error("id is required");
    }

    if (["string", "number"].indexOf(_typeof(id)) === -1) {
      throw new Error("id must be a number or a string");
    }
  }

  var index$7 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    earthRadius: earthRadius,
    factors: factors,
    unitsFactors: unitsFactors,
    areaFactors: areaFactors,
    feature: feature,
    geometry: geometry$1,
    point: point,
    points: points,
    polygon: polygon,
    polygons: polygons,
    lineString: lineString,
    lineStrings: lineStrings,
    featureCollection: featureCollection$1,
    multiLineString: multiLineString,
    multiPoint: multiPoint,
    multiPolygon: multiPolygon,
    geometryCollection: geometryCollection,
    round: round,
    radiansToLength: radiansToLength,
    lengthToRadians: lengthToRadians,
    lengthToDegrees: lengthToDegrees,
    bearingToAzimuth: bearingToAzimuth,
    radiansToDegrees: radiansToDegrees,
    degreesToRadians: degreesToRadians,
    convertLength: convertLength,
    convertArea: convertArea,
    isNumber: isNumber,
    isObject: isObject,
    validateBBox: validateBBox,
    validateId: validateId
  });

  /**
   * Callback for coordEach
   *
   * @callback coordEachCallback
   * @param {Array<number>} currentCoord The current coordinate being processed.
   * @param {number} coordIndex The current index of the coordinate being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   * @param {number} geometryIndex The current index of the Geometry being processed.
   */

  /**
   * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
   *
   * @name coordEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)
   * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {"foo": "bar"}),
   *   turf.point([36, 53], {"hello": "world"})
   * ]);
   *
   * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
   *   //=currentCoord
   *   //=coordIndex
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   * });
   */

  function coordEach$1(geojson, callback, excludeWrapCoord) {
    // Handles null Geometry -- Skips this GeoJSON
    if (geojson === null) return;
    var j,
        k,
        l,
        geometry,
        stopG,
        coords,
        geometryMaybeCollection,
        wrapShrink = 0,
        coordIndex = 0,
        isGeometryCollection,
        type = geojson.type,
        isFeatureCollection = type === "FeatureCollection",
        isFeature = type === "Feature",
        stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way
    // is because it's trying to be fast. GeoJSON supports multiple kinds
    // of objects at its root: FeatureCollection, Features, Geometries.
    // This function has the responsibility of handling all of them, and that
    // means that some of the `for` loops you see below actually just don't apply
    // to certain inputs. For instance, if you give this just a
    // Point geometry, then both loops are short-circuited and all we do
    // is gradually rename the input until it's called 'geometry'.
    //
    // This also aims to allocate as few resources as possible: just a
    // few numbers and booleans, rather than any temporary arrays as would
    // be required with the normalization approach.

    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {
      geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;
      isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === "GeometryCollection" : false;
      stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

      for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {
        var multiFeatureIndex = 0;
        var geometryIndex = 0;
        geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection; // Handles null Geometry -- Skips this geometry

        if (geometry === null) continue;
        coords = geometry.coordinates;
        var geomType = geometry.type;
        wrapShrink = excludeWrapCoord && (geomType === "Polygon" || geomType === "MultiPolygon") ? 1 : 0;

        switch (geomType) {
          case null:
            break;

          case "Point":
            if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
            coordIndex++;
            multiFeatureIndex++;
            break;

          case "LineString":
          case "MultiPoint":
            for (j = 0; j < coords.length; j++) {
              if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
              coordIndex++;
              if (geomType === "MultiPoint") multiFeatureIndex++;
            }

            if (geomType === "LineString") multiFeatureIndex++;
            break;

          case "Polygon":
          case "MultiLineString":
            for (j = 0; j < coords.length; j++) {
              for (k = 0; k < coords[j].length - wrapShrink; k++) {
                if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                coordIndex++;
              }

              if (geomType === "MultiLineString") multiFeatureIndex++;
              if (geomType === "Polygon") geometryIndex++;
            }

            if (geomType === "Polygon") multiFeatureIndex++;
            break;

          case "MultiPolygon":
            for (j = 0; j < coords.length; j++) {
              geometryIndex = 0;

              for (k = 0; k < coords[j].length; k++) {
                for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                  if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                  coordIndex++;
                }

                geometryIndex++;
              }

              multiFeatureIndex++;
            }

            break;

          case "GeometryCollection":
            for (j = 0; j < geometry.geometries.length; j++) {
              if (coordEach$1(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;
            }

            break;

          default:
            throw new Error("Unknown Geometry Type");
        }
      }
    }
  }
  /**
   * Callback for coordReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback coordReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Array<number>} currentCoord The current coordinate being processed.
   * @param {number} coordIndex The current index of the coordinate being processed.
   * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   * @param {number} geometryIndex The current index of the Geometry being processed.
   */

  /**
   * Reduce coordinates in any GeoJSON object, similar to Array.reduce()
   *
   * @name coordReduce
   * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {"foo": "bar"}),
   *   turf.point([36, 53], {"hello": "world"})
   * ]);
   *
   * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
   *   //=previousValue
   *   //=currentCoord
   *   //=coordIndex
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   *   return currentCoord;
   * });
   */


  function coordReduce$1(geojson, callback, initialValue, excludeWrapCoord) {
    var previousValue = initialValue;
    coordEach$1(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
      if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);
    }, excludeWrapCoord);
    return previousValue;
  }
  /**
   * Callback for propEach
   *
   * @callback propEachCallback
   * @param {Object} currentProperties The current Properties being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   */

  /**
   * Iterate over properties in any GeoJSON object, similar to Array.forEach()
   *
   * @name propEach
   * @param {FeatureCollection|Feature} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentProperties, featureIndex)
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.propEach(features, function (currentProperties, featureIndex) {
   *   //=currentProperties
   *   //=featureIndex
   * });
   */


  function propEach$1(geojson, callback) {
    var i;

    switch (geojson.type) {
      case "FeatureCollection":
        for (i = 0; i < geojson.features.length; i++) {
          if (callback(geojson.features[i].properties, i) === false) break;
        }

        break;

      case "Feature":
        callback(geojson.properties, 0);
        break;
    }
  }
  /**
   * Callback for propReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback propReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {*} currentProperties The current Properties being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   */

  /**
   * Reduce properties in any GeoJSON object into a single value,
   * similar to how Array.reduce works. However, in this case we lazily run
   * the reduction, so an array of all properties is unnecessary.
   *
   * @name propReduce
   * @param {FeatureCollection|Feature} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {
   *   //=previousValue
   *   //=currentProperties
   *   //=featureIndex
   *   return currentProperties
   * });
   */


  function propReduce$1(geojson, callback, initialValue) {
    var previousValue = initialValue;
    propEach$1(geojson, function (currentProperties, featureIndex) {
      if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;else previousValue = callback(previousValue, currentProperties, featureIndex);
    });
    return previousValue;
  }
  /**
   * Callback for featureEach
   *
   * @callback featureEachCallback
   * @param {Feature<any>} currentFeature The current Feature being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   */

  /**
   * Iterate over features in any GeoJSON object, similar to
   * Array.forEach.
   *
   * @name featureEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentFeature, featureIndex)
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {foo: 'bar'}),
   *   turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.featureEach(features, function (currentFeature, featureIndex) {
   *   //=currentFeature
   *   //=featureIndex
   * });
   */


  function featureEach$2(geojson, callback) {
    if (geojson.type === "Feature") {
      callback(geojson, 0);
    } else if (geojson.type === "FeatureCollection") {
      for (var i = 0; i < geojson.features.length; i++) {
        if (callback(geojson.features[i], i) === false) break;
      }
    }
  }
  /**
   * Callback for featureReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback featureReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Feature} currentFeature The current Feature being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   */

  /**
   * Reduce features in any GeoJSON object, similar to Array.reduce().
   *
   * @name featureReduce
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {"foo": "bar"}),
   *   turf.point([36, 53], {"hello": "world"})
   * ]);
   *
   * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {
   *   //=previousValue
   *   //=currentFeature
   *   //=featureIndex
   *   return currentFeature
   * });
   */


  function featureReduce$1(geojson, callback, initialValue) {
    var previousValue = initialValue;
    featureEach$2(geojson, function (currentFeature, featureIndex) {
      if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex);
    });
    return previousValue;
  }
  /**
   * Get all coordinates from any GeoJSON object.
   *
   * @name coordAll
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @returns {Array<Array<number>>} coordinate position array
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {foo: 'bar'}),
   *   turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * var coords = turf.coordAll(features);
   * //= [[26, 37], [36, 53]]
   */


  function coordAll$1(geojson) {
    var coords = [];
    coordEach$1(geojson, function (coord) {
      coords.push(coord);
    });
    return coords;
  }
  /**
   * Callback for geomEach
   *
   * @callback geomEachCallback
   * @param {Geometry} currentGeometry The current Geometry being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {Object} featureProperties The current Feature Properties being processed.
   * @param {Array<number>} featureBBox The current Feature BBox being processed.
   * @param {number|string} featureId The current Feature Id being processed.
   */

  /**
   * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
   *
   * @name geomEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
   *   //=currentGeometry
   *   //=featureIndex
   *   //=featureProperties
   *   //=featureBBox
   *   //=featureId
   * });
   */


  function geomEach$1(geojson, callback) {
    var i,
        j,
        g,
        geometry,
        stopG,
        geometryMaybeCollection,
        isGeometryCollection,
        featureProperties,
        featureBBox,
        featureId,
        featureIndex = 0,
        isFeatureCollection = geojson.type === "FeatureCollection",
        isFeature = geojson.type === "Feature",
        stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way
    // is because it's trying to be fast. GeoJSON supports multiple kinds
    // of objects at its root: FeatureCollection, Features, Geometries.
    // This function has the responsibility of handling all of them, and that
    // means that some of the `for` loops you see below actually just don't apply
    // to certain inputs. For instance, if you give this just a
    // Point geometry, then both loops are short-circuited and all we do
    // is gradually rename the input until it's called 'geometry'.
    //
    // This also aims to allocate as few resources as possible: just a
    // few numbers and booleans, rather than any temporary arrays as would
    // be required with the normalization approach.

    for (i = 0; i < stop; i++) {
      geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;
      featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};
      featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : undefined;
      featureId = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : undefined;
      isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === "GeometryCollection" : false;
      stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

      for (g = 0; g < stopG; g++) {
        geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection; // Handle null Geometry

        if (geometry === null) {
          if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
          continue;
        }

        switch (geometry.type) {
          case "Point":
          case "LineString":
          case "MultiPoint":
          case "Polygon":
          case "MultiLineString":
          case "MultiPolygon":
            {
              if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
              break;
            }

          case "GeometryCollection":
            {
              for (j = 0; j < geometry.geometries.length; j++) {
                if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;
              }

              break;
            }

          default:
            throw new Error("Unknown Geometry Type");
        }
      } // Only increase `featureIndex` per each feature


      featureIndex++;
    }
  }
  /**
   * Callback for geomReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback geomReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Geometry} currentGeometry The current Geometry being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {Object} featureProperties The current Feature Properties being processed.
   * @param {Array<number>} featureBBox The current Feature BBox being processed.
   * @param {number|string} featureId The current Feature Id being processed.
   */

  /**
   * Reduce geometry in any GeoJSON object, similar to Array.reduce().
   *
   * @name geomReduce
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
   *   //=previousValue
   *   //=currentGeometry
   *   //=featureIndex
   *   //=featureProperties
   *   //=featureBBox
   *   //=featureId
   *   return currentGeometry
   * });
   */


  function geomReduce$1(geojson, callback, initialValue) {
    var previousValue = initialValue;
    geomEach$1(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
      if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);
    });
    return previousValue;
  }
  /**
   * Callback for flattenEach
   *
   * @callback flattenEachCallback
   * @param {Feature} currentFeature The current flattened feature being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   */

  /**
   * Iterate over flattened features in any GeoJSON object, similar to
   * Array.forEach.
   *
   * @name flattenEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
   * ]);
   *
   * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {
   *   //=currentFeature
   *   //=featureIndex
   *   //=multiFeatureIndex
   * });
   */


  function flattenEach$1(geojson, callback) {
    geomEach$1(geojson, function (geometry, featureIndex, properties, bbox, id) {
      // Callback for single geometry
      var type = geometry === null ? null : geometry.type;

      switch (type) {
        case null:
        case "Point":
        case "LineString":
        case "Polygon":
          if (callback(feature(geometry, properties, {
            bbox: bbox,
            id: id
          }), featureIndex, 0) === false) return false;
          return;
      }

      var geomType; // Callback for multi-geometry

      switch (type) {
        case "MultiPoint":
          geomType = "Point";
          break;

        case "MultiLineString":
          geomType = "LineString";
          break;

        case "MultiPolygon":
          geomType = "Polygon";
          break;
      }

      for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {
        var coordinate = geometry.coordinates[multiFeatureIndex];
        var geom = {
          type: geomType,
          coordinates: coordinate
        };
        if (callback(feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;
      }
    });
  }
  /**
   * Callback for flattenReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback flattenReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Feature} currentFeature The current Feature being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   */

  /**
   * Reduce flattened features in any GeoJSON object, similar to Array.reduce().
   *
   * @name flattenReduce
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
   * ]);
   *
   * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {
   *   //=previousValue
   *   //=currentFeature
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   return currentFeature
   * });
   */


  function flattenReduce$1(geojson, callback, initialValue) {
    var previousValue = initialValue;
    flattenEach$1(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {
      if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);
    });
    return previousValue;
  }
  /**
   * Callback for segmentEach
   *
   * @callback segmentEachCallback
   * @param {Feature<LineString>} currentSegment The current Segment being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   * @param {number} geometryIndex The current index of the Geometry being processed.
   * @param {number} segmentIndex The current index of the Segment being processed.
   * @returns {void}
   */

  /**
   * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()
   * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
   *
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
   * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)
   * @returns {void}
   * @example
   * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
   *
   * // Iterate over GeoJSON by 2-vertex segments
   * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
   *   //=currentSegment
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   *   //=segmentIndex
   * });
   *
   * // Calculate the total number of segments
   * var total = 0;
   * turf.segmentEach(polygon, function () {
   *     total++;
   * });
   */


  function segmentEach$1(geojson, callback) {
    flattenEach$1(geojson, function (feature, featureIndex, multiFeatureIndex) {
      var segmentIndex = 0; // Exclude null Geometries

      if (!feature.geometry) return; // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.

      var type = feature.geometry.type;
      if (type === "Point" || type === "MultiPoint") return; // Generate 2-vertex line segments

      var previousCoords;
      var previousFeatureIndex = 0;
      var previousMultiIndex = 0;
      var prevGeomIndex = 0;
      if (coordEach$1(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {
        // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`
        if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {
          previousCoords = currentCoord;
          previousFeatureIndex = featureIndex;
          previousMultiIndex = multiPartIndexCoord;
          prevGeomIndex = geometryIndex;
          segmentIndex = 0;
          return;
        }

        var currentSegment = lineString([previousCoords, currentCoord], feature.properties);
        if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;
        segmentIndex++;
        previousCoords = currentCoord;
      }) === false) return false;
    });
  }
  /**
   * Callback for segmentReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback segmentReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Feature<LineString>} currentSegment The current Segment being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   * @param {number} geometryIndex The current index of the Geometry being processed.
   * @param {number} segmentIndex The current index of the Segment being processed.
   */

  /**
   * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()
   * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
   *
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
   * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {void}
   * @example
   * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
   *
   * // Iterate over GeoJSON by 2-vertex segments
   * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
   *   //= previousSegment
   *   //= currentSegment
   *   //= featureIndex
   *   //= multiFeatureIndex
   *   //= geometryIndex
   *   //= segmentIndex
   *   return currentSegment
   * });
   *
   * // Calculate the total number of segments
   * var initialValue = 0
   * var total = turf.segmentReduce(polygon, function (previousValue) {
   *     previousValue++;
   *     return previousValue;
   * }, initialValue);
   */


  function segmentReduce$1(geojson, callback, initialValue) {
    var previousValue = initialValue;
    var started = false;
    segmentEach$1(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
      if (started === false && initialValue === undefined) previousValue = currentSegment;else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);
      started = true;
    });
    return previousValue;
  }
  /**
   * Callback for lineEach
   *
   * @callback lineEachCallback
   * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed
   * @param {number} featureIndex The current index of the Feature being processed
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
   * @param {number} geometryIndex The current index of the Geometry being processed
   */

  /**
   * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,
   * similar to Array.forEach.
   *
   * @name lineEach
   * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
   * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)
   * @example
   * var multiLine = turf.multiLineString([
   *   [[26, 37], [35, 45]],
   *   [[36, 53], [38, 50], [41, 55]]
   * ]);
   *
   * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
   *   //=currentLine
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   * });
   */


  function lineEach$1(geojson, callback) {
    // validation
    if (!geojson) throw new Error("geojson is required");
    flattenEach$1(geojson, function (feature, featureIndex, multiFeatureIndex) {
      if (feature.geometry === null) return;
      var type = feature.geometry.type;
      var coords = feature.geometry.coordinates;

      switch (type) {
        case "LineString":
          if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;
          break;

        case "Polygon":
          for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {
            if (callback(lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
          }

          break;
      }
    });
  }
  /**
   * Callback for lineReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback lineReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.
   * @param {number} featureIndex The current index of the Feature being processed
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
   * @param {number} geometryIndex The current index of the Geometry being processed
   */

  /**
   * Reduce features in any GeoJSON object, similar to Array.reduce().
   *
   * @name lineReduce
   * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
   * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var multiPoly = turf.multiPolygon([
   *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),
   *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])
   * ]);
   *
   * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
   *   //=previousValue
   *   //=currentLine
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   *   return currentLine
   * });
   */


  function lineReduce$1(geojson, callback, initialValue) {
    var previousValue = initialValue;
    lineEach$1(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
      if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);
    });
    return previousValue;
  }
  /**
   * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.
   *
   * Negative indexes are permitted.
   * Point & MultiPoint will always return null.
   *
   * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.featureIndex=0] Feature Index
   * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
   * @param {number} [options.geometryIndex=0] Geometry Index
   * @param {number} [options.segmentIndex=0] Segment Index
   * @param {Object} [options.properties={}] Translate Properties to output LineString
   * @param {BBox} [options.bbox={}] Translate BBox to output LineString
   * @param {number|string} [options.id={}] Translate Id to output LineString
   * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString
   * @example
   * var multiLine = turf.multiLineString([
   *     [[10, 10], [50, 30], [30, 40]],
   *     [[-10, -10], [-50, -30], [-30, -40]]
   * ]);
   *
   * // First Segment (defaults are 0)
   * turf.findSegment(multiLine);
   * // => Feature<LineString<[[10, 10], [50, 30]]>>
   *
   * // First Segment of 2nd Multi Feature
   * turf.findSegment(multiLine, {multiFeatureIndex: 1});
   * // => Feature<LineString<[[-10, -10], [-50, -30]]>>
   *
   * // Last Segment of Last Multi Feature
   * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});
   * // => Feature<LineString<[[-50, -30], [-30, -40]]>>
   */


  function findSegment$1(geojson, options) {
    // Optional Parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var featureIndex = options.featureIndex || 0;
    var multiFeatureIndex = options.multiFeatureIndex || 0;
    var geometryIndex = options.geometryIndex || 0;
    var segmentIndex = options.segmentIndex || 0; // Find FeatureIndex

    var properties = options.properties;
    var geometry;

    switch (geojson.type) {
      case "FeatureCollection":
        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
        properties = properties || geojson.features[featureIndex].properties;
        geometry = geojson.features[featureIndex].geometry;
        break;

      case "Feature":
        properties = properties || geojson.properties;
        geometry = geojson.geometry;
        break;

      case "Point":
      case "MultiPoint":
        return null;

      case "LineString":
      case "Polygon":
      case "MultiLineString":
      case "MultiPolygon":
        geometry = geojson;
        break;

      default:
        throw new Error("geojson is invalid");
    } // Find SegmentIndex


    if (geometry === null) return null;
    var coords = geometry.coordinates;

    switch (geometry.type) {
      case "Point":
      case "MultiPoint":
        return null;

      case "LineString":
        if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;
        return lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);

      case "Polygon":
        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
        if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;
        return lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);

      case "MultiLineString":
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;
        return lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);

      case "MultiPolygon":
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;
        return lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);
    }

    throw new Error("geojson is invalid");
  }
  /**
   * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.
   *
   * Negative indexes are permitted.
   *
   * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.featureIndex=0] Feature Index
   * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
   * @param {number} [options.geometryIndex=0] Geometry Index
   * @param {number} [options.coordIndex=0] Coord Index
   * @param {Object} [options.properties={}] Translate Properties to output Point
   * @param {BBox} [options.bbox={}] Translate BBox to output Point
   * @param {number|string} [options.id={}] Translate Id to output Point
   * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point
   * @example
   * var multiLine = turf.multiLineString([
   *     [[10, 10], [50, 30], [30, 40]],
   *     [[-10, -10], [-50, -30], [-30, -40]]
   * ]);
   *
   * // First Segment (defaults are 0)
   * turf.findPoint(multiLine);
   * // => Feature<Point<[10, 10]>>
   *
   * // First Segment of the 2nd Multi-Feature
   * turf.findPoint(multiLine, {multiFeatureIndex: 1});
   * // => Feature<Point<[-10, -10]>>
   *
   * // Last Segment of last Multi-Feature
   * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});
   * // => Feature<Point<[-30, -40]>>
   */


  function findPoint$1(geojson, options) {
    // Optional Parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var featureIndex = options.featureIndex || 0;
    var multiFeatureIndex = options.multiFeatureIndex || 0;
    var geometryIndex = options.geometryIndex || 0;
    var coordIndex = options.coordIndex || 0; // Find FeatureIndex

    var properties = options.properties;
    var geometry;

    switch (geojson.type) {
      case "FeatureCollection":
        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
        properties = properties || geojson.features[featureIndex].properties;
        geometry = geojson.features[featureIndex].geometry;
        break;

      case "Feature":
        properties = properties || geojson.properties;
        geometry = geojson.geometry;
        break;

      case "Point":
      case "MultiPoint":
        return null;

      case "LineString":
      case "Polygon":
      case "MultiLineString":
      case "MultiPolygon":
        geometry = geojson;
        break;

      default:
        throw new Error("geojson is invalid");
    } // Find Coord Index


    if (geometry === null) return null;
    var coords = geometry.coordinates;

    switch (geometry.type) {
      case "Point":
        return point(coords, properties, options);

      case "MultiPoint":
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        return point(coords[multiFeatureIndex], properties, options);

      case "LineString":
        if (coordIndex < 0) coordIndex = coords.length + coordIndex;
        return point(coords[coordIndex], properties, options);

      case "Polygon":
        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
        if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;
        return point(coords[geometryIndex][coordIndex], properties, options);

      case "MultiLineString":
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;
        return point(coords[multiFeatureIndex][coordIndex], properties, options);

      case "MultiPolygon":
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;
        return point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);
    }

    throw new Error("geojson is invalid");
  }

  var index$6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    coordAll: coordAll$1,
    coordEach: coordEach$1,
    coordReduce: coordReduce$1,
    featureEach: featureEach$2,
    featureReduce: featureReduce$1,
    findPoint: findPoint$1,
    findSegment: findSegment$1,
    flattenEach: flattenEach$1,
    flattenReduce: flattenReduce$1,
    geomEach: geomEach$1,
    geomReduce: geomReduce$1,
    lineEach: lineEach$1,
    lineReduce: lineReduce$1,
    propEach: propEach$1,
    propReduce: propReduce$1,
    segmentEach: segmentEach$1,
    segmentReduce: segmentReduce$1
  });

  /**
   * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.
   *
   * @name bbox
   * @param {GeoJSON} geojson any GeoJSON object
   * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order
   * @example
   * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);
   * var bbox = turf.bbox(line);
   * var bboxPolygon = turf.bboxPolygon(bbox);
   *
   * //addToMap
   * var addToMap = [line, bboxPolygon]
   */

  function bbox$2(geojson) {
    var result = [Infinity, Infinity, -Infinity, -Infinity];
    coordEach$1(geojson, function (coord) {
      if (result[0] > coord[0]) {
        result[0] = coord[0];
      }

      if (result[1] > coord[1]) {
        result[1] = coord[1];
      }

      if (result[2] < coord[0]) {
        result[2] = coord[0];
      }

      if (result[3] < coord[1]) {
        result[3] = coord[1];
      }
    });
    return result;
  }

  bbox$2["default"] = bbox$2;

  /**
   * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.
   *
   * @name getCoord
   * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers
   * @returns {Array<number>} coordinates
   * @example
   * var pt = turf.point([10, 10]);
   *
   * var coord = turf.getCoord(pt);
   * //= [10, 10]
   */

  function getCoord(coord) {
    if (!coord) {
      throw new Error("coord is required");
    }

    if (!Array.isArray(coord)) {
      if (coord.type === "Feature" && coord.geometry !== null && coord.geometry.type === "Point") {
        return coord.geometry.coordinates;
      }

      if (coord.type === "Point") {
        return coord.coordinates;
      }
    }

    if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {
      return coord;
    }

    throw new Error("coord must be GeoJSON Point or an Array of numbers");
  }
  /**
   * Unwrap coordinates from a Feature, Geometry Object or an Array
   *
   * @name getCoords
   * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array
   * @returns {Array<any>} coordinates
   * @example
   * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);
   *
   * var coords = turf.getCoords(poly);
   * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]
   */

  function getCoords(coords) {
    if (Array.isArray(coords)) {
      return coords;
    } // Feature


    if (coords.type === "Feature") {
      if (coords.geometry !== null) {
        return coords.geometry.coordinates;
      }
    } else {
      // Geometry
      if (coords.coordinates) {
        return coords.coordinates;
      }
    }

    throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array");
  }
  /**
   * Checks if coordinates contains a number
   *
   * @name containsNumber
   * @param {Array<any>} coordinates GeoJSON Coordinates
   * @returns {boolean} true if Array contains a number
   */

  function containsNumber(coordinates) {
    if (coordinates.length > 1 && isNumber(coordinates[0]) && isNumber(coordinates[1])) {
      return true;
    }

    if (Array.isArray(coordinates[0]) && coordinates[0].length) {
      return containsNumber(coordinates[0]);
    }

    throw new Error("coordinates must only contain numbers");
  }
  /**
   * Enforce expectations about types of GeoJSON objects for Turf.
   *
   * @name geojsonType
   * @param {GeoJSON} value any GeoJSON object
   * @param {string} type expected GeoJSON type
   * @param {string} name name of calling function
   * @throws {Error} if value is not the expected type.
   */

  function geojsonType(value, type, name) {
    if (!type || !name) {
      throw new Error("type and name required");
    }

    if (!value || value.type !== type) {
      throw new Error("Invalid input to " + name + ": must be a " + type + ", given " + value.type);
    }
  }
  /**
   * Enforce expectations about types of {@link Feature} inputs for Turf.
   * Internally this uses {@link geojsonType} to judge geometry types.
   *
   * @name featureOf
   * @param {Feature} feature a feature with an expected geometry type
   * @param {string} type expected GeoJSON type
   * @param {string} name name of calling function
   * @throws {Error} error if value is not the expected type.
   */

  function featureOf(feature, type, name) {
    if (!feature) {
      throw new Error("No feature passed");
    }

    if (!name) {
      throw new Error(".featureOf() requires a name");
    }

    if (!feature || feature.type !== "Feature" || !feature.geometry) {
      throw new Error("Invalid input to " + name + ", Feature with geometry required");
    }

    if (!feature.geometry || feature.geometry.type !== type) {
      throw new Error("Invalid input to " + name + ": must be a " + type + ", given " + feature.geometry.type);
    }
  }
  /**
   * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.
   * Internally this uses {@link geojsonType} to judge geometry types.
   *
   * @name collectionOf
   * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged
   * @param {string} type expected GeoJSON type
   * @param {string} name name of calling function
   * @throws {Error} if value is not the expected type.
   */

  function collectionOf(featureCollection, type, name) {
    if (!featureCollection) {
      throw new Error("No featureCollection passed");
    }

    if (!name) {
      throw new Error(".collectionOf() requires a name");
    }

    if (!featureCollection || featureCollection.type !== "FeatureCollection") {
      throw new Error("Invalid input to " + name + ", FeatureCollection required");
    }

    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {
      var feature = _a[_i];

      if (!feature || feature.type !== "Feature" || !feature.geometry) {
        throw new Error("Invalid input to " + name + ", Feature with geometry required");
      }

      if (!feature.geometry || feature.geometry.type !== type) {
        throw new Error("Invalid input to " + name + ": must be a " + type + ", given " + feature.geometry.type);
      }
    }
  }
  /**
   * Get Geometry from Feature or Geometry Object
   *
   * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object
   * @returns {Geometry|null} GeoJSON Geometry Object
   * @throws {Error} if geojson is not a Feature or Geometry Object
   * @example
   * var point = {
   *   "type": "Feature",
   *   "properties": {},
   *   "geometry": {
   *     "type": "Point",
   *     "coordinates": [110, 40]
   *   }
   * }
   * var geom = turf.getGeom(point)
   * //={"type": "Point", "coordinates": [110, 40]}
   */

  function getGeom(geojson) {
    if (geojson.type === "Feature") {
      return geojson.geometry;
    }

    return geojson;
  }
  /**
   * Get GeoJSON object's type, Geometry type is prioritize.
   *
   * @param {GeoJSON} geojson GeoJSON object
   * @param {string} [name="geojson"] name of the variable to display in error message (unused)
   * @returns {string} GeoJSON type
   * @example
   * var point = {
   *   "type": "Feature",
   *   "properties": {},
   *   "geometry": {
   *     "type": "Point",
   *     "coordinates": [110, 40]
   *   }
   * }
   * var geom = turf.getType(point)
   * //="Point"
   */

  function getType$1(geojson, _name) {
    if (geojson.type === "FeatureCollection") {
      return "FeatureCollection";
    }

    if (geojson.type === "GeometryCollection") {
      return "GeometryCollection";
    }

    if (geojson.type === "Feature" && geojson.geometry !== null) {
      return geojson.geometry.type;
    }

    return geojson.type;
  }

  var index$5 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    getCoord: getCoord,
    getCoords: getCoords,
    containsNumber: containsNumber,
    geojsonType: geojsonType,
    featureOf: featureOf,
    collectionOf: collectionOf,
    getGeom: getGeom,
    getType: getType$1
  });

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */

  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }

    return Object(val);
  }

  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      } // Detect buggy property enumeration order in older V8 versions.
      // https://bugs.chromium.org/p/v8/issues/detail?id=4118


      var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

      test1[5] = 'de';

      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


      var test2 = {};

      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i;
      }

      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n];
      });

      if (order2.join('') !== '0123456789') {
        return false;
      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


      var test3 = {};
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter;
      });

      if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
        return false;
      }

      return true;
    } catch (err) {
      // We don't expect any of the above to throw, but better to be safe.
      return false;
    }
  }

  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;

    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);

      for (var key in from) {
        if (hasOwnProperty$1.call(from, key)) {
          to[key] = from[key];
        }
      }

      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);

        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }

    return to;
  };

  /**
   * @license GNU Affero General Public License.
   * Copyright (c) 2015, 2015 Ronny Lorenz <ronny@tbi.univie.ac.at>
   * v. 1.2.0
   * https://github.com/RaumZeit/MarchingSquares.js
   *
   * MarchingSquaresJS is free software: you can redistribute it and/or modify
   * it under the terms of the GNU Affero General Public License as published by
   * the Free Software Foundation, either version 3 of the License, or
   * (at your option) any later version.
   *
   * MarchingSquaresJS is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU Affero General Public License for more details.
   *
   * As additional permission under GNU Affero General Public License version 3
   * section 7, third-party projects (personal or commercial) may distribute,
   * include, or link against UNMODIFIED VERSIONS of MarchingSquaresJS without the
   * requirement that said third-party project for that reason alone becomes
   * subject to any requirement of the GNU Affero General Public License version 3.
   * Any modifications to MarchingSquaresJS, however, must be shared with the public
   * and made available.
   *
   * In summary this:
   * - allows you to use MarchingSquaresJS at no cost
   * - allows you to use MarchingSquaresJS for both personal and commercial purposes
   * - allows you to distribute UNMODIFIED VERSIONS of MarchingSquaresJS under any
   *   license as long as this license notice is included
   * - enables you to keep the source code of your program that uses MarchingSquaresJS
   *   undisclosed
   * - forces you to share any modifications you have made to MarchingSquaresJS,
   *   e.g. bug-fixes
   *
   * You should have received a copy of the GNU Affero General Public License
   * along with MarchingSquaresJS.  If not, see <http://www.gnu.org/licenses/>.
   */

  /**
   * Compute the isocontour(s) of a scalar 2D field given
   * a certain threshold by applying the Marching Squares
   * Algorithm. The function returns a list of path coordinates
   */

  var defaultSettings$1 = {
    successCallback: null,
    verbose: false
  };
  var settings$1 = {};

  function isoContours(data, threshold, options) {
    /* process options */
    options = options ? options : {};
    var optionKeys = Object.keys(defaultSettings$1);

    for (var i = 0; i < optionKeys.length; i++) {
      var key = optionKeys[i];
      var val = options[key];
      val = typeof val !== "undefined" && val !== null ? val : defaultSettings$1[key];
      settings$1[key] = val;
    }

    if (settings$1.verbose) console.log("MarchingSquaresJS-isoContours: computing isocontour for " + threshold);
    var ret = contourGrid2Paths(computeContourGrid(data, threshold));
    if (typeof settings$1.successCallback === "function") settings$1.successCallback(ret);
    return ret;
  }
  /*
    Thats all for the public interface, below follows the actual
    implementation
  */

  /*
  ################################
  Isocontour implementation below
  ################################
  */

  /* assume that x1 == 1 &&  x0 == 0 */


  function interpolateX$1(y, y0, y1) {
    return (y - y0) / (y1 - y0);
  }
  /* compute the isocontour 4-bit grid */


  function computeContourGrid(data, threshold) {
    var rows = data.length - 1;
    var cols = data[0].length - 1;
    var ContourGrid = {
      rows: rows,
      cols: cols,
      cells: []
    };

    for (var j = 0; j < rows; ++j) {
      ContourGrid.cells[j] = [];

      for (var i = 0; i < cols; ++i) {
        /* compose the 4-bit corner representation */
        var cval = 0;
        var tl = data[j + 1][i];
        var tr = data[j + 1][i + 1];
        var br = data[j][i + 1];
        var bl = data[j][i];

        if (isNaN(tl) || isNaN(tr) || isNaN(br) || isNaN(bl)) {
          continue;
        }

        cval |= tl >= threshold ? 8 : 0;
        cval |= tr >= threshold ? 4 : 0;
        cval |= br >= threshold ? 2 : 0;
        cval |= bl >= threshold ? 1 : 0;
        /* resolve ambiguity for cval == 5 || 10 via averaging */

        var flipped = false;

        if (cval === 5 || cval === 10) {
          var average = (tl + tr + br + bl) / 4;

          if (cval === 5 && average < threshold) {
            cval = 10;
            flipped = true;
          } else if (cval === 10 && average < threshold) {
            cval = 5;
            flipped = true;
          }
        }
        /* add cell to ContourGrid if it contains edges */


        if (cval !== 0 && cval !== 15) {
          var top, bottom, left, right;
          top = bottom = left = right = 0.5;
          /* interpolate edges of cell */

          if (cval === 1) {
            left = 1 - interpolateX$1(threshold, tl, bl);
            bottom = 1 - interpolateX$1(threshold, br, bl);
          } else if (cval === 2) {
            bottom = interpolateX$1(threshold, bl, br);
            right = 1 - interpolateX$1(threshold, tr, br);
          } else if (cval === 3) {
            left = 1 - interpolateX$1(threshold, tl, bl);
            right = 1 - interpolateX$1(threshold, tr, br);
          } else if (cval === 4) {
            top = interpolateX$1(threshold, tl, tr);
            right = interpolateX$1(threshold, br, tr);
          } else if (cval === 5) {
            top = interpolateX$1(threshold, tl, tr);
            right = interpolateX$1(threshold, br, tr);
            bottom = 1 - interpolateX$1(threshold, br, bl);
            left = 1 - interpolateX$1(threshold, tl, bl);
          } else if (cval === 6) {
            bottom = interpolateX$1(threshold, bl, br);
            top = interpolateX$1(threshold, tl, tr);
          } else if (cval === 7) {
            left = 1 - interpolateX$1(threshold, tl, bl);
            top = interpolateX$1(threshold, tl, tr);
          } else if (cval === 8) {
            left = interpolateX$1(threshold, bl, tl);
            top = 1 - interpolateX$1(threshold, tr, tl);
          } else if (cval === 9) {
            bottom = 1 - interpolateX$1(threshold, br, bl);
            top = 1 - interpolateX$1(threshold, tr, tl);
          } else if (cval === 10) {
            top = 1 - interpolateX$1(threshold, tr, tl);
            right = 1 - interpolateX$1(threshold, tr, br);
            bottom = interpolateX$1(threshold, bl, br);
            left = interpolateX$1(threshold, bl, tl);
          } else if (cval === 11) {
            top = 1 - interpolateX$1(threshold, tr, tl);
            right = 1 - interpolateX$1(threshold, tr, br);
          } else if (cval === 12) {
            left = interpolateX$1(threshold, bl, tl);
            right = interpolateX$1(threshold, br, tr);
          } else if (cval === 13) {
            bottom = 1 - interpolateX$1(threshold, br, bl);
            right = interpolateX$1(threshold, br, tr);
          } else if (cval === 14) {
            left = interpolateX$1(threshold, bl, tl);
            bottom = interpolateX$1(threshold, bl, br);
          } else {
            console.log("MarchingSquaresJS-isoContours: Illegal cval detected: " + cval);
          }

          ContourGrid.cells[j][i] = {
            cval: cval,
            flipped: flipped,
            top: top,
            right: right,
            bottom: bottom,
            left: left
          };
        }
      }
    }

    return ContourGrid;
  }

  function isSaddle(cell) {
    return cell.cval === 5 || cell.cval === 10;
  }

  function isTrivial(cell) {
    return cell.cval === 0 || cell.cval === 15;
  }

  function clearCell(cell) {
    if (!isTrivial(cell) && cell.cval !== 5 && cell.cval !== 10) {
      cell.cval = 15;
    }
  }

  function getXY(cell, edge) {
    if (edge === "top") {
      return [cell.top, 1.0];
    } else if (edge === "bottom") {
      return [cell.bottom, 0.0];
    } else if (edge === "right") {
      return [1.0, cell.right];
    } else if (edge === "left") {
      return [0.0, cell.left];
    }
  }

  function contourGrid2Paths(grid) {
    var paths = [];
    var path_idx = 0;
    var epsilon = 1e-7;
    grid.cells.forEach(function (g, j) {
      g.forEach(function (gg, i) {
        if (typeof gg !== "undefined" && !isSaddle(gg) && !isTrivial(gg)) {
          var p = tracePath(grid.cells, j, i);
          var merged = false;
          /* we may try to merge paths at this point */

          if (p.info === "mergeable") {
            /*
              search backwards through the path array to find an entry
              that starts with where the current path ends...
            */
            var x = p.path[p.path.length - 1][0],
                y = p.path[p.path.length - 1][1];

            for (var k = path_idx - 1; k >= 0; k--) {
              if (Math.abs(paths[k][0][0] - x) <= epsilon && Math.abs(paths[k][0][1] - y) <= epsilon) {
                for (var l = p.path.length - 2; l >= 0; --l) {
                  paths[k].unshift(p.path[l]);
                }

                merged = true;
                break;
              }
            }
          }

          if (!merged) paths[path_idx++] = p.path;
        }
      });
    });
    return paths;
  }
  /*
    construct consecutive line segments from starting cell by
    walking arround the enclosed area clock-wise
    */


  function tracePath(grid, j, i) {
    var maxj = grid.length;
    var p = [];
    var dxContour = [0, 0, 1, 1, 0, 0, 0, 0, -1, 0, 1, 1, -1, 0, -1, 0];
    var dyContour = [0, -1, 0, 0, 1, 1, 1, 1, 0, -1, 0, 0, 0, -1, 0, 0];
    var dx, dy;
    var startEdge = ["none", "left", "bottom", "left", "right", "none", "bottom", "left", "top", "top", "none", "top", "right", "right", "bottom", "none"];
    var nextEdge = ["none", "bottom", "right", "right", "top", "top", "top", "top", "left", "bottom", "right", "right", "left", "bottom", "left", "none"];
    var edge;
    var currentCell = grid[j][i];
    var cval = currentCell.cval;
    var edge = startEdge[cval];
    var pt = getXY(currentCell, edge);
    /* push initial segment */

    p.push([i + pt[0], j + pt[1]]);
    edge = nextEdge[cval];
    pt = getXY(currentCell, edge);
    p.push([i + pt[0], j + pt[1]]);
    clearCell(currentCell);
    /* now walk arround the enclosed area in clockwise-direction */

    var k = i + dxContour[cval];
    var l = j + dyContour[cval];
    var prev_cval = cval;

    while (k >= 0 && l >= 0 && l < maxj && (k != i || l != j)) {
      currentCell = grid[l][k];

      if (typeof currentCell === "undefined") {
        /* path ends here */
        //console.log(k + " " + l + " is undefined, stopping path!");
        break;
      }

      cval = currentCell.cval;

      if (cval === 0 || cval === 15) {
        return {
          path: p,
          info: "mergeable"
        };
      }

      edge = nextEdge[cval];
      dx = dxContour[cval];
      dy = dyContour[cval];

      if (cval === 5 || cval === 10) {
        /* select upper or lower band, depending on previous cells cval */
        if (cval === 5) {
          if (currentCell.flipped) {
            /* this is actually a flipped case 10 */
            if (dyContour[prev_cval] === -1) {
              edge = "left";
              dx = -1;
              dy = 0;
            } else {
              edge = "right";
              dx = 1;
              dy = 0;
            }
          } else {
            /* real case 5 */
            if (dxContour[prev_cval] === -1) {
              edge = "bottom";
              dx = 0;
              dy = -1;
            }
          }
        } else if (cval === 10) {
          if (currentCell.flipped) {
            /* this is actually a flipped case 5 */
            if (dxContour[prev_cval] === -1) {
              edge = "top";
              dx = 0;
              dy = 1;
            } else {
              edge = "bottom";
              dx = 0;
              dy = -1;
            }
          } else {
            /* real case 10 */
            if (dyContour[prev_cval] === 1) {
              edge = "left";
              dx = -1;
              dy = 0;
            }
          }
        }
      }

      pt = getXY(currentCell, edge);
      p.push([k + pt[0], l + pt[1]]);
      clearCell(currentCell);
      k += dx;
      l += dy;
      prev_cval = cval;
    }

    return {
      path: p,
      info: "closed"
    };
  }
  /**
   * Takes a {@link Point} grid and returns a correspondent matrix {Array<Array<number>>}
   * of the 'property' values
   *
   * @name gridToMatrix
   * @param {FeatureCollection<Point>} grid of points
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.zProperty='elevation'] the property name in `points` from which z-values will be pulled
   * @param {boolean} [options.flip=false] returns the matrix upside-down
   * @param {boolean} [options.flags=false] flags, adding a `matrixPosition` array field ([row, column]) to its properties,
   * the grid points with coordinates on the matrix
   * @returns {Array<Array<number>>} matrix of property values
   * @example
   *   var extent = [-70.823364, -33.553984, -70.473175, -33.302986];
   *   var cellSize = 3;
   *   var grid = turf.pointGrid(extent, cellSize);
   *   // add a random property to each point between 0 and 60
   *   for (var i = 0; i < grid.features.length; i++) {
   *     grid.features[i].properties.elevation = (Math.random() * 60);
   *   }
   *   gridToMatrix(grid);
   *   //= [
   *     [ 1, 13, 10,  9, 10, 13, 18],
   *     [34,  8,  5,  4,  5,  8, 13],
   *     [10,  5,  2,  1,  2,  5,  4],
   *     [ 0,  4, 56, 19,  1,  4,  9],
   *     [10,  5,  2,  1,  2,  5, 10],
   *     [57,  8,  5,  4,  5,  0, 57],
   *     [ 3, 13, 10,  9,  5, 13, 18],
   *     [18, 13, 10,  9, 78, 13, 18]
   *   ]
   */


  function gridToMatrix$1(grid, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var zProperty = options.zProperty || "elevation";
    var flip = options.flip;
    var flags = options.flags; // validation

    collectionOf(grid, "Point", "input must contain Points");
    var pointsMatrix = sortPointsByLatLng$1(grid, flip);
    var matrix = []; // create property matrix from sorted points
    // looping order matters here

    for (var r = 0; r < pointsMatrix.length; r++) {
      var pointRow = pointsMatrix[r];
      var row = [];

      for (var c = 0; c < pointRow.length; c++) {
        var point = pointRow[c]; // Check if zProperty exist

        if (point.properties[zProperty]) row.push(point.properties[zProperty]);else row.push(0); // add flags

        if (flags === true) point.properties.matrixPosition = [r, c];
      }

      matrix.push(row);
    }

    return matrix;
  }
  /**
   * Sorts points by latitude and longitude, creating a 2-dimensional array of points
   *
   * @private
   * @param {FeatureCollection<Point>} points GeoJSON Point features
   * @param {boolean} [flip=false] returns the matrix upside-down
   * @returns {Array<Array<Point>>} points ordered by latitude and longitude
   */


  function sortPointsByLatLng$1(points, flip) {
    var pointsByLatitude = {}; // divide points by rows with the same latitude

    featureEach$2(points, function (point) {
      var lat = getCoords(point)[1];
      if (!pointsByLatitude[lat]) pointsByLatitude[lat] = [];
      pointsByLatitude[lat].push(point);
    }); // sort points (with the same latitude) by longitude

    var orderedRowsByLatitude = Object.keys(pointsByLatitude).map(function (lat) {
      var row = pointsByLatitude[lat];
      var rowOrderedByLongitude = row.sort(function (a, b) {
        return getCoords(a)[0] - getCoords(b)[0];
      });
      return rowOrderedByLongitude;
    }); // sort rows (of points with the same latitude) by latitude

    var pointMatrix = orderedRowsByLatitude.sort(function (a, b) {
      if (flip) return getCoords(a[0])[1] - getCoords(b[0])[1];else return getCoords(b[0])[1] - getCoords(a[0])[1];
    });
    return pointMatrix;
  }
  /**
   * Takes a grid {@link FeatureCollection} of {@link Point} features with z-values and an array of
   * value breaks and generates [isolines](https://en.wikipedia.org/wiki/Contour_line).
   *
   * @name isolines
   * @param {FeatureCollection<Point>} pointGrid input points
   * @param {Array<number>} breaks values of `zProperty` where to draw isolines
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.zProperty='elevation'] the property name in `points` from which z-values will be pulled
   * @param {Object} [options.commonProperties={}] GeoJSON properties passed to ALL isolines
   * @param {Array<Object>} [options.breaksProperties=[]] GeoJSON properties passed, in order, to the correspondent isoline;
   * the breaks array will define the order in which the isolines are created
   * @returns {FeatureCollection<MultiLineString>} a FeatureCollection of {@link MultiLineString} features representing isolines
   * @example
   * // create a grid of points with random z-values in their properties
   * var extent = [0, 30, 20, 50];
   * var cellWidth = 100;
   * var pointGrid = turf.pointGrid(extent, cellWidth, {units: 'miles'});
   *
   * for (var i = 0; i < pointGrid.features.length; i++) {
   *     pointGrid.features[i].properties.temperature = Math.random() * 10;
   * }
   * var breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
   *
   * var lines = turf.isolines(pointGrid, breaks, {zProperty: 'temperature'});
   *
   * //addToMap
   * var addToMap = [lines];
   */


  function isolines(pointGrid, breaks, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var zProperty = options.zProperty || "elevation";
    var commonProperties = options.commonProperties || {};
    var breaksProperties = options.breaksProperties || []; // Input validation

    collectionOf(pointGrid, "Point", "Input must contain Points");
    if (!breaks) throw new Error("breaks is required");
    if (!Array.isArray(breaks)) throw new Error("breaks must be an Array");
    if (!isObject(commonProperties)) throw new Error("commonProperties must be an Object");
    if (!Array.isArray(breaksProperties)) throw new Error("breaksProperties must be an Array"); // Isoline methods

    var matrix = gridToMatrix$1(pointGrid, {
      zProperty: zProperty,
      flip: true
    });
    var createdIsoLines = createIsoLines(matrix, breaks, zProperty, commonProperties, breaksProperties);
    var scaledIsolines = rescaleIsolines(createdIsoLines, matrix, pointGrid);
    return featureCollection$1(scaledIsolines);
  }
  /**
   * Creates the isolines lines (featuresCollection of MultiLineString features) from the 2D data grid
   *
   * Marchingsquares process the grid data as a 3D representation of a function on a 2D plane, therefore it
   * assumes the points (x-y coordinates) are one 'unit' distance. The result of the isolines function needs to be
   * rescaled, with turfjs, to the original area and proportions on the map
   *
   * @private
   * @param {Array<Array<number>>} matrix Grid Data
   * @param {Array<number>} breaks Breaks
   * @param {string} zProperty name of the z-values property
   * @param {Object} [commonProperties={}] GeoJSON properties passed to ALL isolines
   * @param {Object} [breaksProperties=[]] GeoJSON properties passed to the correspondent isoline
   * @returns {Array<MultiLineString>} isolines
   */


  function createIsoLines(matrix, breaks, zProperty, commonProperties, breaksProperties) {
    var results = [];

    for (var i = 1; i < breaks.length; i++) {
      var threshold = +breaks[i]; // make sure it's a number

      var properties = objectAssign({}, commonProperties, breaksProperties[i]);
      properties[zProperty] = threshold;
      var isoline = multiLineString(isoContours(matrix, threshold), properties);
      results.push(isoline);
    }

    return results;
  }
  /**
   * Translates and scales isolines
   *
   * @private
   * @param {Array<MultiLineString>} createdIsoLines to be rescaled
   * @param {Array<Array<number>>} matrix Grid Data
   * @param {Object} points Points by Latitude
   * @returns {Array<MultiLineString>} isolines
   */


  function rescaleIsolines(createdIsoLines, matrix, points) {
    // get dimensions (on the map) of the original grid
    var gridBbox = bbox$2(points); // [ minX, minY, maxX, maxY ]

    var originalWidth = gridBbox[2] - gridBbox[0];
    var originalHeigth = gridBbox[3] - gridBbox[1]; // get origin, which is the first point of the last row on the rectangular data on the map

    var x0 = gridBbox[0];
    var y0 = gridBbox[1]; // get number of cells per side

    var matrixWidth = matrix[0].length - 1;
    var matrixHeight = matrix.length - 1; // calculate the scaling factor between matrix and rectangular grid on the map

    var scaleX = originalWidth / matrixWidth;
    var scaleY = originalHeigth / matrixHeight;

    var resize = function resize(point) {
      point[0] = point[0] * scaleX + x0;
      point[1] = point[1] * scaleY + y0;
    }; // resize and shift each point/line of the createdIsoLines


    createdIsoLines.forEach(function (isoline) {
      coordEach$1(isoline, resize);
    });
    return createdIsoLines;
  }

  function quickselect$1(arr, k, left, right, compare) {
    quickselectStep(arr, k, left || 0, right || arr.length - 1, compare || defaultCompare$1);
  }

  function quickselectStep(arr, k, left, right, compare) {
    while (right > left) {
      if (right - left > 600) {
        var n = right - left + 1;
        var m = k - left + 1;
        var z = Math.log(n);
        var s = 0.5 * Math.exp(2 * z / 3);
        var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
        var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
        var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
        quickselectStep(arr, k, newLeft, newRight, compare);
      }

      var t = arr[k];
      var i = left;
      var j = right;
      swap(arr, left, k);
      if (compare(arr[right], t) > 0) swap(arr, left, right);

      while (i < j) {
        swap(arr, i, j);
        i++;
        j--;

        while (compare(arr[i], t) < 0) {
          i++;
        }

        while (compare(arr[j], t) > 0) {
          j--;
        }
      }

      if (compare(arr[left], t) === 0) swap(arr, left, j);else {
        j++;
        swap(arr, j, right);
      }
      if (j <= k) left = j + 1;
      if (k <= j) right = j - 1;
    }
  }

  function swap(arr, i, j) {
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }

  function defaultCompare$1(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }

  var RBush$1 = /*#__PURE__*/function () {
    function RBush() {
      var maxEntries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 9;

      _classCallCheck$1(this, RBush);

      // max entries in a node is 9 by default; min node fill is 40% for best performance
      this._maxEntries = Math.max(4, maxEntries);
      this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));
      this.clear();
    }

    _createClass$1(RBush, [{
      key: "all",
      value: function all() {
        return this._all(this.data, []);
      }
    }, {
      key: "search",
      value: function search(bbox) {
        var node = this.data;
        var result = [];
        if (!intersects$4(bbox, node)) return result;
        var toBBox = this.toBBox;
        var nodesToSearch = [];

        while (node) {
          for (var i = 0; i < node.children.length; i++) {
            var child = node.children[i];
            var childBBox = node.leaf ? toBBox(child) : child;

            if (intersects$4(bbox, childBBox)) {
              if (node.leaf) result.push(child);else if (contains$1(bbox, childBBox)) this._all(child, result);else nodesToSearch.push(child);
            }
          }

          node = nodesToSearch.pop();
        }

        return result;
      }
    }, {
      key: "collides",
      value: function collides(bbox) {
        var node = this.data;
        if (!intersects$4(bbox, node)) return false;
        var nodesToSearch = [];

        while (node) {
          for (var i = 0; i < node.children.length; i++) {
            var child = node.children[i];
            var childBBox = node.leaf ? this.toBBox(child) : child;

            if (intersects$4(bbox, childBBox)) {
              if (node.leaf || contains$1(bbox, childBBox)) return true;
              nodesToSearch.push(child);
            }
          }

          node = nodesToSearch.pop();
        }

        return false;
      }
    }, {
      key: "load",
      value: function load(data) {
        if (!(data && data.length)) return this;

        if (data.length < this._minEntries) {
          for (var i = 0; i < data.length; i++) {
            this.insert(data[i]);
          }

          return this;
        } // recursively build the tree with the given data from scratch using OMT algorithm


        var node = this._build(data.slice(), 0, data.length - 1, 0);

        if (!this.data.children.length) {
          // save as is if tree is empty
          this.data = node;
        } else if (this.data.height === node.height) {
          // split root if trees have the same height
          this._splitRoot(this.data, node);
        } else {
          if (this.data.height < node.height) {
            // swap trees if inserted one is bigger
            var tmpNode = this.data;
            this.data = node;
            node = tmpNode;
          } // insert the small tree into the large tree at appropriate level


          this._insert(node, this.data.height - node.height - 1, true);
        }

        return this;
      }
    }, {
      key: "insert",
      value: function insert(item) {
        if (item) this._insert(item, this.data.height - 1);
        return this;
      }
    }, {
      key: "clear",
      value: function clear() {
        this.data = createNode$1([]);
        return this;
      }
    }, {
      key: "remove",
      value: function remove(item, equalsFn) {
        if (!item) return this;
        var node = this.data;
        var bbox = this.toBBox(item);
        var path = [];
        var indexes = [];
        var i, parent, goingUp; // depth-first iterative tree traversal

        while (node || path.length) {
          if (!node) {
            // go up
            node = path.pop();
            parent = path[path.length - 1];
            i = indexes.pop();
            goingUp = true;
          }

          if (node.leaf) {
            // check current node
            var index = findItem$1(item, node.children, equalsFn);

            if (index !== -1) {
              // item found, remove the item and condense tree upwards
              node.children.splice(index, 1);
              path.push(node);

              this._condense(path);

              return this;
            }
          }

          if (!goingUp && !node.leaf && contains$1(node, bbox)) {
            // go down
            path.push(node);
            indexes.push(i);
            i = 0;
            parent = node;
            node = node.children[0];
          } else if (parent) {
            // go right
            i++;
            node = parent.children[i];
            goingUp = false;
          } else node = null; // nothing found

        }

        return this;
      }
    }, {
      key: "toBBox",
      value: function toBBox(item) {
        return item;
      }
    }, {
      key: "compareMinX",
      value: function compareMinX(a, b) {
        return a.minX - b.minX;
      }
    }, {
      key: "compareMinY",
      value: function compareMinY(a, b) {
        return a.minY - b.minY;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.data;
      }
    }, {
      key: "fromJSON",
      value: function fromJSON(data) {
        this.data = data;
        return this;
      }
    }, {
      key: "_all",
      value: function _all(node, result) {
        var nodesToSearch = [];

        while (node) {
          if (node.leaf) result.push.apply(result, _toConsumableArray(node.children));else nodesToSearch.push.apply(nodesToSearch, _toConsumableArray(node.children));
          node = nodesToSearch.pop();
        }

        return result;
      }
    }, {
      key: "_build",
      value: function _build(items, left, right, height) {
        var N = right - left + 1;
        var M = this._maxEntries;
        var node;

        if (N <= M) {
          // reached leaf level; return leaf
          node = createNode$1(items.slice(left, right + 1));
          calcBBox$1(node, this.toBBox);
          return node;
        }

        if (!height) {
          // target height of the bulk-loaded tree
          height = Math.ceil(Math.log(N) / Math.log(M)); // target number of root entries to maximize storage utilization

          M = Math.ceil(N / Math.pow(M, height - 1));
        }

        node = createNode$1([]);
        node.leaf = false;
        node.height = height; // split the items into M mostly square tiles

        var N2 = Math.ceil(N / M);
        var N1 = N2 * Math.ceil(Math.sqrt(M));
        multiSelect$1(items, left, right, N1, this.compareMinX);

        for (var i = left; i <= right; i += N1) {
          var right2 = Math.min(i + N1 - 1, right);
          multiSelect$1(items, i, right2, N2, this.compareMinY);

          for (var j = i; j <= right2; j += N2) {
            var right3 = Math.min(j + N2 - 1, right2); // pack each entry recursively

            node.children.push(this._build(items, j, right3, height - 1));
          }
        }

        calcBBox$1(node, this.toBBox);
        return node;
      }
    }, {
      key: "_chooseSubtree",
      value: function _chooseSubtree(bbox, node, level, path) {
        while (true) {
          path.push(node);
          if (node.leaf || path.length - 1 === level) break;
          var minArea = Infinity;
          var minEnlargement = Infinity;
          var targetNode = void 0;

          for (var i = 0; i < node.children.length; i++) {
            var child = node.children[i];
            var area = bboxArea$1(child);
            var enlargement = enlargedArea$1(bbox, child) - area; // choose entry with the least area enlargement

            if (enlargement < minEnlargement) {
              minEnlargement = enlargement;
              minArea = area < minArea ? area : minArea;
              targetNode = child;
            } else if (enlargement === minEnlargement) {
              // otherwise choose one with the smallest area
              if (area < minArea) {
                minArea = area;
                targetNode = child;
              }
            }
          }

          node = targetNode || node.children[0];
        }

        return node;
      }
    }, {
      key: "_insert",
      value: function _insert(item, level, isNode) {
        var bbox = isNode ? item : this.toBBox(item);
        var insertPath = []; // find the best node for accommodating the item, saving all nodes along the path too

        var node = this._chooseSubtree(bbox, this.data, level, insertPath); // put the item into the node


        node.children.push(item);
        extend$1(node, bbox); // split on node overflow; propagate upwards if necessary

        while (level >= 0) {
          if (insertPath[level].children.length > this._maxEntries) {
            this._split(insertPath, level);

            level--;
          } else break;
        } // adjust bboxes along the insertion path


        this._adjustParentBBoxes(bbox, insertPath, level);
      } // split overflowed node into two

    }, {
      key: "_split",
      value: function _split(insertPath, level) {
        var node = insertPath[level];
        var M = node.children.length;
        var m = this._minEntries;

        this._chooseSplitAxis(node, m, M);

        var splitIndex = this._chooseSplitIndex(node, m, M);

        var newNode = createNode$1(node.children.splice(splitIndex, node.children.length - splitIndex));
        newNode.height = node.height;
        newNode.leaf = node.leaf;
        calcBBox$1(node, this.toBBox);
        calcBBox$1(newNode, this.toBBox);
        if (level) insertPath[level - 1].children.push(newNode);else this._splitRoot(node, newNode);
      }
    }, {
      key: "_splitRoot",
      value: function _splitRoot(node, newNode) {
        // split root node
        this.data = createNode$1([node, newNode]);
        this.data.height = node.height + 1;
        this.data.leaf = false;
        calcBBox$1(this.data, this.toBBox);
      }
    }, {
      key: "_chooseSplitIndex",
      value: function _chooseSplitIndex(node, m, M) {
        var index;
        var minOverlap = Infinity;
        var minArea = Infinity;

        for (var i = m; i <= M - m; i++) {
          var bbox1 = distBBox$1(node, 0, i, this.toBBox);
          var bbox2 = distBBox$1(node, i, M, this.toBBox);
          var overlap = intersectionArea$1(bbox1, bbox2);
          var area = bboxArea$1(bbox1) + bboxArea$1(bbox2); // choose distribution with minimum overlap

          if (overlap < minOverlap) {
            minOverlap = overlap;
            index = i;
            minArea = area < minArea ? area : minArea;
          } else if (overlap === minOverlap) {
            // otherwise choose distribution with minimum area
            if (area < minArea) {
              minArea = area;
              index = i;
            }
          }
        }

        return index || M - m;
      } // sorts node children by the best axis for split

    }, {
      key: "_chooseSplitAxis",
      value: function _chooseSplitAxis(node, m, M) {
        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX$1;
        var compareMinY = node.leaf ? this.compareMinY : compareNodeMinY$1;

        var xMargin = this._allDistMargin(node, m, M, compareMinX);

        var yMargin = this._allDistMargin(node, m, M, compareMinY); // if total distributions margin value is minimal for x, sort by minX,
        // otherwise it's already sorted by minY


        if (xMargin < yMargin) node.children.sort(compareMinX);
      } // total margin of all possible split distributions where each node is at least m full

    }, {
      key: "_allDistMargin",
      value: function _allDistMargin(node, m, M, compare) {
        node.children.sort(compare);
        var toBBox = this.toBBox;
        var leftBBox = distBBox$1(node, 0, m, toBBox);
        var rightBBox = distBBox$1(node, M - m, M, toBBox);
        var margin = bboxMargin$1(leftBBox) + bboxMargin$1(rightBBox);

        for (var i = m; i < M - m; i++) {
          var child = node.children[i];
          extend$1(leftBBox, node.leaf ? toBBox(child) : child);
          margin += bboxMargin$1(leftBBox);
        }

        for (var _i = M - m - 1; _i >= m; _i--) {
          var _child = node.children[_i];
          extend$1(rightBBox, node.leaf ? toBBox(_child) : _child);
          margin += bboxMargin$1(rightBBox);
        }

        return margin;
      }
    }, {
      key: "_adjustParentBBoxes",
      value: function _adjustParentBBoxes(bbox, path, level) {
        // adjust bboxes along the given tree path
        for (var i = level; i >= 0; i--) {
          extend$1(path[i], bbox);
        }
      }
    }, {
      key: "_condense",
      value: function _condense(path) {
        // go through the path, removing empty nodes and updating bboxes
        for (var i = path.length - 1, siblings; i >= 0; i--) {
          if (path[i].children.length === 0) {
            if (i > 0) {
              siblings = path[i - 1].children;
              siblings.splice(siblings.indexOf(path[i]), 1);
            } else this.clear();
          } else calcBBox$1(path[i], this.toBBox);
        }
      }
    }]);

    return RBush;
  }();

  function findItem$1(item, items, equalsFn) {
    if (!equalsFn) return items.indexOf(item);

    for (var i = 0; i < items.length; i++) {
      if (equalsFn(item, items[i])) return i;
    }

    return -1;
  } // calculate node's bbox from bboxes of its children


  function calcBBox$1(node, toBBox) {
    distBBox$1(node, 0, node.children.length, toBBox, node);
  } // min bounding rectangle of node children from k to p-1


  function distBBox$1(node, k, p, toBBox, destNode) {
    if (!destNode) destNode = createNode$1(null);
    destNode.minX = Infinity;
    destNode.minY = Infinity;
    destNode.maxX = -Infinity;
    destNode.maxY = -Infinity;

    for (var i = k; i < p; i++) {
      var child = node.children[i];
      extend$1(destNode, node.leaf ? toBBox(child) : child);
    }

    return destNode;
  }

  function extend$1(a, b) {
    a.minX = Math.min(a.minX, b.minX);
    a.minY = Math.min(a.minY, b.minY);
    a.maxX = Math.max(a.maxX, b.maxX);
    a.maxY = Math.max(a.maxY, b.maxY);
    return a;
  }

  function compareNodeMinX$1(a, b) {
    return a.minX - b.minX;
  }

  function compareNodeMinY$1(a, b) {
    return a.minY - b.minY;
  }

  function bboxArea$1(a) {
    return (a.maxX - a.minX) * (a.maxY - a.minY);
  }

  function bboxMargin$1(a) {
    return a.maxX - a.minX + (a.maxY - a.minY);
  }

  function enlargedArea$1(a, b) {
    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) * (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
  }

  function intersectionArea$1(a, b) {
    var minX = Math.max(a.minX, b.minX);
    var minY = Math.max(a.minY, b.minY);
    var maxX = Math.min(a.maxX, b.maxX);
    var maxY = Math.min(a.maxY, b.maxY);
    return Math.max(0, maxX - minX) * Math.max(0, maxY - minY);
  }

  function contains$1(a, b) {
    return a.minX <= b.minX && a.minY <= b.minY && b.maxX <= a.maxX && b.maxY <= a.maxY;
  }

  function intersects$4(a, b) {
    return b.minX <= a.maxX && b.minY <= a.maxY && b.maxX >= a.minX && b.maxY >= a.minY;
  }

  function createNode$1(children) {
    return {
      children: children,
      height: 1,
      leaf: true,
      minX: Infinity,
      minY: Infinity,
      maxX: -Infinity,
      maxY: -Infinity
    };
  } // sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
  // combines selection algorithm with binary divide & conquer approach


  function multiSelect$1(arr, left, right, n, compare) {
    var stack = [left, right];

    while (stack.length) {
      right = stack.pop();
      left = stack.pop();
      if (right - left <= n) continue;
      var mid = left + Math.ceil((right - left) / n / 2) * n;
      quickselect$1(arr, mid, left, right, compare);
      stack.push(left, mid, mid, right);
    }
  }

  var rbush$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': RBush$1
  });

  var TinyQueue = /*#__PURE__*/function () {
    function TinyQueue() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var compare = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultCompare;

      _classCallCheck$1(this, TinyQueue);

      this.data = data;
      this.length = this.data.length;
      this.compare = compare;

      if (this.length > 0) {
        for (var i = (this.length >> 1) - 1; i >= 0; i--) {
          this._down(i);
        }
      }
    }

    _createClass$1(TinyQueue, [{
      key: "push",
      value: function push(item) {
        this.data.push(item);
        this.length++;

        this._up(this.length - 1);
      }
    }, {
      key: "pop",
      value: function pop() {
        if (this.length === 0) return undefined;
        var top = this.data[0];
        var bottom = this.data.pop();
        this.length--;

        if (this.length > 0) {
          this.data[0] = bottom;

          this._down(0);
        }

        return top;
      }
    }, {
      key: "peek",
      value: function peek() {
        return this.data[0];
      }
    }, {
      key: "_up",
      value: function _up(pos) {
        var data = this.data,
            compare = this.compare;
        var item = data[pos];

        while (pos > 0) {
          var parent = pos - 1 >> 1;
          var current = data[parent];
          if (compare(item, current) >= 0) break;
          data[pos] = current;
          pos = parent;
        }

        data[pos] = item;
      }
    }, {
      key: "_down",
      value: function _down(pos) {
        var data = this.data,
            compare = this.compare;
        var halfLength = this.length >> 1;
        var item = data[pos];

        while (pos < halfLength) {
          var left = (pos << 1) + 1;
          var best = data[left];
          var right = left + 1;

          if (right < this.length && compare(data[right], best) < 0) {
            left = right;
            best = data[right];
          }

          if (compare(best, item) >= 0) break;
          data[pos] = best;
          pos = left;
        }

        data[pos] = item;
      }
    }]);

    return TinyQueue;
  }();

  function defaultCompare(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }

  var tinyqueue = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': TinyQueue
  });

  var flat$1 = function pointInPolygonFlat(point, vs, start, end) {
    var x = point[0],
        y = point[1];
    var inside = false;
    if (start === undefined) start = 0;
    if (end === undefined) end = vs.length;
    var len = (end - start) / 2;

    for (var i = 0, j = len - 1; i < len; j = i++) {
      var xi = vs[start + i * 2 + 0],
          yi = vs[start + i * 2 + 1];
      var xj = vs[start + j * 2 + 0],
          yj = vs[start + j * 2 + 1];
      var intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
      if (intersect) inside = !inside;
    }

    return inside;
  };

  // ray-casting algorithm based on
  // https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html
  var nested$1 = function pointInPolygonNested(point, vs, start, end) {
    var x = point[0],
        y = point[1];
    var inside = false;
    if (start === undefined) start = 0;
    if (end === undefined) end = vs.length;
    var len = end - start;

    for (var i = 0, j = len - 1; i < len; j = i++) {
      var xi = vs[i + start][0],
          yi = vs[i + start][1];
      var xj = vs[j + start][0],
          yj = vs[j + start][1];
      var intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
      if (intersect) inside = !inside;
    }

    return inside;
  };

  var pointInPolygon = function pointInPolygon(point, vs, start, end) {
    if (vs.length > 0 && Array.isArray(vs[0])) {
      return nested$1(point, vs, start, end);
    } else {
      return flat$1(point, vs, start, end);
    }
  };

  var nested = nested$1;
  var flat = flat$1;
  pointInPolygon.nested = nested;
  pointInPolygon.flat = flat;

  var orient2d_min = createCommonjsModule(function (module, exports) {
    !function (t, e) {
      e(exports) ;
    }(commonjsGlobal, function (t) {

      var e = 134217729,
          n = 33306690738754706e-32;

      function r(t, e, n, r, o) {
        var f,
            i,
            u,
            c,
            s = e[0],
            a = r[0],
            d = 0,
            l = 0;
        a > s == a > -s ? (f = s, s = e[++d]) : (f = a, a = r[++l]);
        var p = 0;
        if (d < t && l < n) for (a > s == a > -s ? (u = f - ((i = s + f) - s), s = e[++d]) : (u = f - ((i = a + f) - a), a = r[++l]), f = i, 0 !== u && (o[p++] = u); d < t && l < n;) {
          a > s == a > -s ? (u = f - ((i = f + s) - (c = i - f)) + (s - c), s = e[++d]) : (u = f - ((i = f + a) - (c = i - f)) + (a - c), a = r[++l]), f = i, 0 !== u && (o[p++] = u);
        }

        for (; d < t;) {
          u = f - ((i = f + s) - (c = i - f)) + (s - c), s = e[++d], f = i, 0 !== u && (o[p++] = u);
        }

        for (; l < n;) {
          u = f - ((i = f + a) - (c = i - f)) + (a - c), a = r[++l], f = i, 0 !== u && (o[p++] = u);
        }

        return 0 === f && 0 !== p || (o[p++] = f), p;
      }

      function o(t) {
        return new Float64Array(t);
      }

      var f = 33306690738754716e-32,
          i = 22204460492503146e-32,
          u = 11093356479670487e-47,
          c = o(4),
          s = o(8),
          a = o(12),
          d = o(16),
          l = o(4);
      t.orient2d = function (t, o, p, b, y, h) {
        var M = (o - h) * (p - y),
            x = (t - y) * (b - h),
            j = M - x;
        if (0 === M || 0 === x || M > 0 != x > 0) return j;
        var m = Math.abs(M + x);
        return Math.abs(j) >= f * m ? j : -function (t, o, f, p, b, y, h) {
          var M, x, j, m, _, v, w, A, F, O, P, g, k, q, z, B, C, D;

          var E = t - b,
              G = f - b,
              H = o - y,
              I = p - y;
          _ = (z = (A = E - (w = (v = e * E) - (v - E))) * (O = I - (F = (v = e * I) - (v - I))) - ((q = E * I) - w * F - A * F - w * O)) - (P = z - (C = (A = H - (w = (v = e * H) - (v - H))) * (O = G - (F = (v = e * G) - (v - G))) - ((B = H * G) - w * F - A * F - w * O))), c[0] = z - (P + _) + (_ - C), _ = (k = q - ((g = q + P) - (_ = g - q)) + (P - _)) - (P = k - B), c[1] = k - (P + _) + (_ - B), _ = (D = g + P) - g, c[2] = g - (D - _) + (P - _), c[3] = D;

          var J = function (t, e) {
            var n = e[0];

            for (var _r = 1; _r < t; _r++) {
              n += e[_r];
            }

            return n;
          }(4, c),
              K = i * h;

          if (J >= K || -J >= K) return J;
          if (M = t - (E + (_ = t - E)) + (_ - b), j = f - (G + (_ = f - G)) + (_ - b), x = o - (H + (_ = o - H)) + (_ - y), m = p - (I + (_ = p - I)) + (_ - y), 0 === M && 0 === x && 0 === j && 0 === m) return J;
          if (K = u * h + n * Math.abs(J), (J += E * m + I * M - (H * j + G * x)) >= K || -J >= K) return J;
          _ = (z = (A = M - (w = (v = e * M) - (v - M))) * (O = I - (F = (v = e * I) - (v - I))) - ((q = M * I) - w * F - A * F - w * O)) - (P = z - (C = (A = x - (w = (v = e * x) - (v - x))) * (O = G - (F = (v = e * G) - (v - G))) - ((B = x * G) - w * F - A * F - w * O))), l[0] = z - (P + _) + (_ - C), _ = (k = q - ((g = q + P) - (_ = g - q)) + (P - _)) - (P = k - B), l[1] = k - (P + _) + (_ - B), _ = (D = g + P) - g, l[2] = g - (D - _) + (P - _), l[3] = D;
          var L = r(4, c, 4, l, s);
          _ = (z = (A = E - (w = (v = e * E) - (v - E))) * (O = m - (F = (v = e * m) - (v - m))) - ((q = E * m) - w * F - A * F - w * O)) - (P = z - (C = (A = H - (w = (v = e * H) - (v - H))) * (O = j - (F = (v = e * j) - (v - j))) - ((B = H * j) - w * F - A * F - w * O))), l[0] = z - (P + _) + (_ - C), _ = (k = q - ((g = q + P) - (_ = g - q)) + (P - _)) - (P = k - B), l[1] = k - (P + _) + (_ - B), _ = (D = g + P) - g, l[2] = g - (D - _) + (P - _), l[3] = D;
          var N = r(L, s, 4, l, a);
          _ = (z = (A = M - (w = (v = e * M) - (v - M))) * (O = m - (F = (v = e * m) - (v - m))) - ((q = M * m) - w * F - A * F - w * O)) - (P = z - (C = (A = x - (w = (v = e * x) - (v - x))) * (O = j - (F = (v = e * j) - (v - j))) - ((B = x * j) - w * F - A * F - w * O))), l[0] = z - (P + _) + (_ - C), _ = (k = q - ((g = q + P) - (_ = g - q)) + (P - _)) - (P = k - B), l[1] = k - (P + _) + (_ - B), _ = (D = g + P) - g, l[2] = g - (D - _) + (P - _), l[3] = D;
          var Q = r(N, a, 4, l, d);
          return d[Q - 1];
        }(t, o, p, b, y, h, m);
      }, t.orient2dfast = function (t, e, n, r, o, f) {
        return (e - f) * (n - o) - (t - o) * (r - f);
      }, Object.defineProperty(t, "__esModule", {
        value: !0
      });
    });
  });

  var RBush = /*@__PURE__*/getAugmentedNamespace(rbush$1);

  var Queue = /*@__PURE__*/getAugmentedNamespace(tinyqueue);

  var orient = orient2d_min.orient2d;
  var concaveman_1 = concaveman;
  var _default$4 = concaveman;

  function concaveman(points, concavity, lengthThreshold) {
    // a relative measure of concavity; higher value means simpler hull
    concavity = Math.max(0, concavity === undefined ? 2 : concavity); // when a segment goes below this length threshold, it won't be drilled down further

    lengthThreshold = lengthThreshold || 0; // start with a convex hull of the points

    var hull = fastConvexHull(points); // index the points with an R-tree

    var tree = new RBush(16);

    tree.toBBox = function (a) {
      return {
        minX: a[0],
        minY: a[1],
        maxX: a[0],
        maxY: a[1]
      };
    };

    tree.compareMinX = function (a, b) {
      return a[0] - b[0];
    };

    tree.compareMinY = function (a, b) {
      return a[1] - b[1];
    };

    tree.load(points); // turn the convex hull into a linked list and populate the initial edge queue with the nodes

    var queue = [];

    for (var i = 0, last; i < hull.length; i++) {
      var p = hull[i];
      tree.remove(p);
      last = insertNode$1(p, last);
      queue.push(last);
    } // index the segments with an R-tree (for intersection checks)


    var segTree = new RBush(16);

    for (i = 0; i < queue.length; i++) {
      segTree.insert(updateBBox(queue[i]));
    }

    var sqConcavity = concavity * concavity;
    var sqLenThreshold = lengthThreshold * lengthThreshold; // process edges one by one

    while (queue.length) {
      var node = queue.shift();
      var a = node.p;
      var b = node.next.p; // skip the edge if it's already short enough

      var sqLen = getSqDist$1(a, b);
      if (sqLen < sqLenThreshold) continue;
      var maxSqLen = sqLen / sqConcavity; // find the best connection point for the current edge to flex inward to

      p = findCandidate(tree, node.prev.p, a, b, node.next.next.p, maxSqLen, segTree); // if we found a connection and it satisfies our concavity measure

      if (p && Math.min(getSqDist$1(p, a), getSqDist$1(p, b)) <= maxSqLen) {
        // connect the edge endpoints through this point and add 2 new edges to the queue
        queue.push(node);
        queue.push(insertNode$1(p, node)); // update point and segment indexes

        tree.remove(p);
        segTree.remove(node);
        segTree.insert(updateBBox(node));
        segTree.insert(updateBBox(node.next));
      }
    } // convert the resulting hull linked list to an array of points


    node = last;
    var concave = [];

    do {
      concave.push(node.p);
      node = node.next;
    } while (node !== last);

    concave.push(node.p);
    return concave;
  }

  function findCandidate(tree, a, b, c, d, maxDist, segTree) {
    var queue = new Queue([], compareDist);
    var node = tree.data; // search through the point R-tree with a depth-first search using a priority queue
    // in the order of distance to the edge (b, c)

    while (node) {
      for (var i = 0; i < node.children.length; i++) {
        var child = node.children[i];
        var dist = node.leaf ? sqSegDist(child, b, c) : sqSegBoxDist(b, c, child);
        if (dist > maxDist) continue; // skip the node if it's farther than we ever need

        queue.push({
          node: child,
          dist: dist
        });
      }

      while (queue.length && !queue.peek().node.children) {
        var item = queue.pop();
        var p = item.node; // skip all points that are as close to adjacent edges (a,b) and (c,d),
        // and points that would introduce self-intersections when connected

        var d0 = sqSegDist(p, a, b);
        var d1 = sqSegDist(p, c, d);
        if (item.dist < d0 && item.dist < d1 && noIntersections(b, p, segTree) && noIntersections(c, p, segTree)) return p;
      }

      node = queue.pop();
      if (node) node = node.node;
    }

    return null;
  }

  function compareDist(a, b) {
    return a.dist - b.dist;
  } // square distance from a segment bounding box to the given one


  function sqSegBoxDist(a, b, bbox) {
    if (inside(a, bbox) || inside(b, bbox)) return 0;
    var d1 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.maxX, bbox.minY);
    if (d1 === 0) return 0;
    var d2 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.minX, bbox.maxY);
    if (d2 === 0) return 0;
    var d3 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.maxX, bbox.minY, bbox.maxX, bbox.maxY);
    if (d3 === 0) return 0;
    var d4 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.maxY, bbox.maxX, bbox.maxY);
    if (d4 === 0) return 0;
    return Math.min(d1, d2, d3, d4);
  }

  function inside(a, bbox) {
    return a[0] >= bbox.minX && a[0] <= bbox.maxX && a[1] >= bbox.minY && a[1] <= bbox.maxY;
  } // check if the edge (a,b) doesn't intersect any other edges


  function noIntersections(a, b, segTree) {
    var minX = Math.min(a[0], b[0]);
    var minY = Math.min(a[1], b[1]);
    var maxX = Math.max(a[0], b[0]);
    var maxY = Math.max(a[1], b[1]);
    var edges = segTree.search({
      minX: minX,
      minY: minY,
      maxX: maxX,
      maxY: maxY
    });

    for (var i = 0; i < edges.length; i++) {
      if (intersects$3(edges[i].p, edges[i].next.p, a, b)) return false;
    }

    return true;
  }

  function cross(p1, p2, p3) {
    return orient(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
  } // check if the edges (p1,q1) and (p2,q2) intersect


  function intersects$3(p1, q1, p2, q2) {
    return p1 !== q2 && q1 !== p2 && cross(p1, q1, p2) > 0 !== cross(p1, q1, q2) > 0 && cross(p2, q2, p1) > 0 !== cross(p2, q2, q1) > 0;
  } // update the bounding box of a node's edge


  function updateBBox(node) {
    var p1 = node.p;
    var p2 = node.next.p;
    node.minX = Math.min(p1[0], p2[0]);
    node.minY = Math.min(p1[1], p2[1]);
    node.maxX = Math.max(p1[0], p2[0]);
    node.maxY = Math.max(p1[1], p2[1]);
    return node;
  } // speed up convex hull by filtering out points inside quadrilateral formed by 4 extreme points


  function fastConvexHull(points) {
    var left = points[0];
    var top = points[0];
    var right = points[0];
    var bottom = points[0]; // find the leftmost, rightmost, topmost and bottommost points

    for (var i = 0; i < points.length; i++) {
      var p = points[i];
      if (p[0] < left[0]) left = p;
      if (p[0] > right[0]) right = p;
      if (p[1] < top[1]) top = p;
      if (p[1] > bottom[1]) bottom = p;
    } // filter out points that are inside the resulting quadrilateral


    var cull = [left, top, right, bottom];
    var filtered = cull.slice();

    for (i = 0; i < points.length; i++) {
      if (!pointInPolygon(points[i], cull)) filtered.push(points[i]);
    } // get convex hull around the filtered points


    return convexHull(filtered);
  } // create a new node in a doubly linked list


  function insertNode$1(p, prev) {
    var node = {
      p: p,
      prev: null,
      next: null,
      minX: 0,
      minY: 0,
      maxX: 0,
      maxY: 0
    };

    if (!prev) {
      node.prev = node;
      node.next = node;
    } else {
      node.next = prev.next;
      node.prev = prev;
      prev.next.prev = node;
      prev.next = node;
    }

    return node;
  } // square distance between 2 points


  function getSqDist$1(p1, p2) {
    var dx = p1[0] - p2[0],
        dy = p1[1] - p2[1];
    return dx * dx + dy * dy;
  } // square distance from a point to a segment


  function sqSegDist(p, p1, p2) {
    var x = p1[0],
        y = p1[1],
        dx = p2[0] - x,
        dy = p2[1] - y;

    if (dx !== 0 || dy !== 0) {
      var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);

      if (t > 1) {
        x = p2[0];
        y = p2[1];
      } else if (t > 0) {
        x += dx * t;
        y += dy * t;
      }
    }

    dx = p[0] - x;
    dy = p[1] - y;
    return dx * dx + dy * dy;
  } // segment to segment distance, ported from http://geomalgorithms.com/a07-_distance.html by Dan Sunday


  function sqSegSegDist(x0, y0, x1, y1, x2, y2, x3, y3) {
    var ux = x1 - x0;
    var uy = y1 - y0;
    var vx = x3 - x2;
    var vy = y3 - y2;
    var wx = x0 - x2;
    var wy = y0 - y2;
    var a = ux * ux + uy * uy;
    var b = ux * vx + uy * vy;
    var c = vx * vx + vy * vy;
    var d = ux * wx + uy * wy;
    var e = vx * wx + vy * wy;
    var D = a * c - b * b;
    var sc, sN, tc, tN;
    var sD = D;
    var tD = D;

    if (D === 0) {
      sN = 0;
      sD = 1;
      tN = e;
      tD = c;
    } else {
      sN = b * e - c * d;
      tN = a * e - b * d;

      if (sN < 0) {
        sN = 0;
        tN = e;
        tD = c;
      } else if (sN > sD) {
        sN = sD;
        tN = e + b;
        tD = c;
      }
    }

    if (tN < 0.0) {
      tN = 0.0;
      if (-d < 0.0) sN = 0.0;else if (-d > a) sN = sD;else {
        sN = -d;
        sD = a;
      }
    } else if (tN > tD) {
      tN = tD;
      if (-d + b < 0.0) sN = 0;else if (-d + b > a) sN = sD;else {
        sN = -d + b;
        sD = a;
      }
    }

    sc = sN === 0 ? 0 : sN / sD;
    tc = tN === 0 ? 0 : tN / tD;
    var cx = (1 - sc) * x0 + sc * x1;
    var cy = (1 - sc) * y0 + sc * y1;
    var cx2 = (1 - tc) * x2 + tc * x3;
    var cy2 = (1 - tc) * y2 + tc * y3;
    var dx = cx2 - cx;
    var dy = cy2 - cy;
    return dx * dx + dy * dy;
  }

  function compareByX(a, b) {
    return a[0] === b[0] ? a[1] - b[1] : a[0] - b[0];
  }

  function convexHull(points) {
    points.sort(compareByX);
    var lower = [];

    for (var i = 0; i < points.length; i++) {
      while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], points[i]) <= 0) {
        lower.pop();
      }

      lower.push(points[i]);
    }

    var upper = [];

    for (var ii = points.length - 1; ii >= 0; ii--) {
      while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], points[ii]) <= 0) {
        upper.pop();
      }

      upper.push(points[ii]);
    }

    upper.pop();
    lower.pop();
    return lower.concat(upper);
  }
  concaveman_1.default = _default$4;

  /**
   * Takes a {@link Feature} or a {@link FeatureCollection} and returns a convex hull {@link Polygon}.
   *
   * Internally this uses
   * the [convex-hull](https://github.com/mikolalysenko/convex-hull) module that implements a
   * [monotone chain hull](http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain).
   *
   * @name convex
   * @param {GeoJSON} geojson input Feature or FeatureCollection
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.concavity=Infinity] 1 - thin shape. Infinity - convex hull.
   * @param {Object} [options.properties={}] Translate Properties to Feature
   * @returns {Feature<Polygon>} a convex hull
   * @example
   * var points = turf.featureCollection([
   *   turf.point([10.195312, 43.755225]),
   *   turf.point([10.404052, 43.8424511]),
   *   turf.point([10.579833, 43.659924]),
   *   turf.point([10.360107, 43.516688]),
   *   turf.point([10.14038, 43.588348]),
   *   turf.point([10.195312, 43.755225])
   * ]);
   *
   * var hull = turf.convex(points);
   *
   * //addToMap
   * var addToMap = [points, hull]
   */

  function convex(geojson, options) {
    if (options === void 0) {
      options = {};
    } // Default parameters


    options.concavity = options.concavity || Infinity; // Container

    var points = []; // Convert all points to flat 2D coordinate Array

    coordEach$1(geojson, function (coord) {
      points.push([coord[0], coord[1]]);
    });

    if (!points.length) {
      return null;
    }

    var convexHull = concaveman_1(points, options.concavity); // Convex hull should have at least 3 different vertices in order to create a valid polygon

    if (convexHull.length > 3) {
      return polygon([convexHull]);
    }

    return null;
  }

  // modified from: https://github.com/substack/point-in-polygon/blob/master/index.js
  // which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html

  /**
   * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point
   * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.
   *
   * @name booleanPointInPolygon
   * @param {Coord} point input point
   * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon
   * @param {Object} [options={}] Optional parameters
   * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if
   * the point is inside the polygon otherwise false.
   * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon
   * @example
   * var pt = turf.point([-77, 44]);
   * var poly = turf.polygon([[
   *   [-81, 41],
   *   [-81, 47],
   *   [-72, 47],
   *   [-72, 41],
   *   [-81, 41]
   * ]]);
   *
   * turf.booleanPointInPolygon(pt, poly);
   * //= true
   */

  function booleanPointInPolygon(point, polygon, options) {
    if (options === void 0) {
      options = {};
    } // validation


    if (!point) {
      throw new Error("point is required");
    }

    if (!polygon) {
      throw new Error("polygon is required");
    }

    var pt = getCoord(point);
    var geom = getGeom(polygon);
    var type = geom.type;
    var bbox = polygon.bbox;
    var polys = geom.coordinates; // Quick elimination if point is not inside bbox

    if (bbox && inBBox(pt, bbox) === false) {
      return false;
    } // normalize to multipolygon


    if (type === "Polygon") {
      polys = [polys];
    }

    var insidePoly = false;

    for (var i = 0; i < polys.length && !insidePoly; i++) {
      // check if it is in the outer ring first
      if (inRing(pt, polys[i][0], options.ignoreBoundary)) {
        var inHole = false;
        var k = 1; // check for the point in any of the holes

        while (k < polys[i].length && !inHole) {
          if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {
            inHole = true;
          }

          k++;
        }

        if (!inHole) {
          insidePoly = true;
        }
      }
    }

    return insidePoly;
  }
  /**
   * inRing
   *
   * @private
   * @param {Array<number>} pt [x,y]
   * @param {Array<Array<number>>} ring [[x,y], [x,y],..]
   * @param {boolean} ignoreBoundary ignoreBoundary
   * @returns {boolean} inRing
   */

  function inRing(pt, ring, ignoreBoundary) {
    var isInside = false;

    if (ring[0][0] === ring[ring.length - 1][0] && ring[0][1] === ring[ring.length - 1][1]) {
      ring = ring.slice(0, ring.length - 1);
    }

    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {
      var xi = ring[i][0];
      var yi = ring[i][1];
      var xj = ring[j][0];
      var yj = ring[j][1];
      var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 && (xi - pt[0]) * (xj - pt[0]) <= 0 && (yi - pt[1]) * (yj - pt[1]) <= 0;

      if (onBoundary) {
        return !ignoreBoundary;
      }

      var intersect = yi > pt[1] !== yj > pt[1] && pt[0] < (xj - xi) * (pt[1] - yi) / (yj - yi) + xi;

      if (intersect) {
        isInside = !isInside;
      }
    }

    return isInside;
  }
  /**
   * inBBox
   *
   * @private
   * @param {Position} pt point [x,y]
   * @param {BBox} bbox BBox [west, south, east, north]
   * @returns {boolean} true/false if point is inside BBox
   */


  function inBBox(pt, bbox) {
    return bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1];
  }

  /**
   * Finds {@link Points} or {@link MultiPoint} coordinate positions that fall within {@link (Multi)Polygon(s)}.
   *
   * @name pointsWithinPolygon
   * @param {Feature|FeatureCollection<Point|MultiPoint>} points Point(s) or MultiPoint(s) as input search
   * @param {FeatureCollection|Geometry|Feature<Polygon|MultiPolygon>} polygons (Multi)Polygon(s) to check if points are within
   * @returns {FeatureCollection<Point|MultiPoint>} Point(s) or MultiPoint(s) with positions that land within at least one polygon.  The geometry type will match what was passsed in
   * @example
   * var points = turf.points([
   *     [-46.6318, -23.5523],
   *     [-46.6246, -23.5325],
   *     [-46.6062, -23.5513],
   *     [-46.663, -23.554],
   *     [-46.643, -23.557]
   * ]);
   *
   * var searchWithin = turf.polygon([[
   *     [-46.653,-23.543],
   *     [-46.634,-23.5346],
   *     [-46.613,-23.543],
   *     [-46.614,-23.559],
   *     [-46.631,-23.567],
   *     [-46.653,-23.560],
   *     [-46.653,-23.543]
   * ]]);
   *
   * var ptsWithin = turf.pointsWithinPolygon(points, searchWithin);
   *
   * //addToMap
   * var addToMap = [points, searchWithin, ptsWithin]
   * turf.featureEach(ptsWithin, function (currentFeature) {
   *   currentFeature.properties['marker-size'] = 'large';
   *   currentFeature.properties['marker-color'] = '#000';
   * });
   */

  function pointsWithinPolygon(points, polygons) {
    var results = [];
    featureEach$2(points, function (point) {
      var contained = false;

      if (point.geometry.type === "Point") {
        geomEach$1(polygons, function (polygon) {
          if (booleanPointInPolygon(point, polygon)) contained = true;
        });

        if (contained) {
          results.push(point);
        }
      } else if (point.geometry.type === "MultiPoint") {
        var pointsWithin = [];
        geomEach$1(polygons, function (polygon) {
          coordEach$1(point, function (pointCoord) {
            if (booleanPointInPolygon(pointCoord, polygon)) {
              contained = true;
              pointsWithin.push(pointCoord);
            }
          });
        });

        if (contained) {
          results.push(multiPoint(pointsWithin));
        }
      } else {
        throw new Error("Input geometry must be a Point or MultiPoint");
      }
    });
    return featureCollection$1(results);
  }

  //http://www.movable-type.co.uk/scripts/latlong.html

  /**
   * Calculates the distance between two {@link Point|points} in degrees, radians, miles, or kilometers.
   * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.
   *
   * @name distance
   * @param {Coord | Point} from origin point or coordinate
   * @param {Coord | Point} to destination point or coordinate
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers
   * @returns {number} distance between the two points
   * @example
   * var from = turf.point([-75.343, 39.984]);
   * var to = turf.point([-75.534, 39.123]);
   * var options = {units: 'miles'};
   *
   * var distance = turf.distance(from, to, options);
   *
   * //addToMap
   * var addToMap = [from, to];
   * from.properties.distance = distance;
   * to.properties.distance = distance;
   */

  function distance$1(from, to, options) {
    if (options === void 0) {
      options = {};
    }

    var coordinates1 = getCoord(from);
    var coordinates2 = getCoord(to);
    var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);
    var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);
    var lat1 = degreesToRadians(coordinates1[1]);
    var lat2 = degreesToRadians(coordinates2[1]);
    var a = Math.pow(Math.sin(dLat / 2), 2) + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);
    return radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);
  }

  // http://en.wikipedia.org/wiki/Delaunay_triangulation
  /**
   * Takes a set of {@link Point|points} and creates a
   * [Triangulated Irregular Network](http://en.wikipedia.org/wiki/Triangulated_irregular_network),
   * or a TIN for short, returned as a collection of Polygons. These are often used
   * for developing elevation contour maps or stepped heat visualizations.
   *
   * If an optional z-value property is provided then it is added as properties called `a`, `b`,
   * and `c` representing its value at each of the points that represent the corners of the
   * triangle.
   *
   * @name tin
   * @param {FeatureCollection<Point>} points input points
   * @param {String} [z] name of the property from which to pull z values
   * This is optional: if not given, then there will be no extra data added to the derived triangles.
   * @returns {FeatureCollection<Polygon>} TIN output
   * @example
   * // generate some random point data
   * var points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});
   *
   * // add a random property to each point between 0 and 9
   * for (var i = 0; i < points.features.length; i++) {
   *   points.features[i].properties.z = ~~(Math.random() * 9);
   * }
   * var tin = turf.tin(points, 'z');
   *
   * //addToMap
   * var addToMap = [tin, points]
   * for (var i = 0; i < tin.features.length; i++) {
   *   var properties  = tin.features[i].properties;
   *   properties.fill = '#' + properties.a + properties.b + properties.c;
   * }
   */

  function tin(points, z) {
    // break down points
    var isPointZ = false;
    return featureCollection$1(triangulate(points.features.map(function (p) {
      var point = {
        x: p.geometry.coordinates[0],
        y: p.geometry.coordinates[1]
      };

      if (z) {
        point.z = p.properties[z];
      } else if (p.geometry.coordinates.length === 3) {
        isPointZ = true;
        point.z = p.geometry.coordinates[2];
      }

      return point;
    })).map(function (triangle) {
      var a = [triangle.a.x, triangle.a.y];
      var b = [triangle.b.x, triangle.b.y];
      var c = [triangle.c.x, triangle.c.y];
      var properties = {}; // Add z coordinates to triangle points if user passed
      // them in that way otherwise add it as a property.

      if (isPointZ) {
        a.push(triangle.a.z);
        b.push(triangle.b.z);
        c.push(triangle.c.z);
      } else {
        properties = {
          a: triangle.a.z,
          b: triangle.b.z,
          c: triangle.c.z
        };
      }

      return polygon([[a, b, c, a]], properties);
    }));
  }

  var Triangle$1 =
  /** @class */
  function () {
    function Triangle(a, b, c) {
      this.a = a;
      this.b = b;
      this.c = c;
      var A = b.x - a.x;
      var B = b.y - a.y;
      var C = c.x - a.x;
      var D = c.y - a.y;
      var E = A * (a.x + b.x) + B * (a.y + b.y);
      var F = C * (a.x + c.x) + D * (a.y + c.y);
      var G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));
      var dx;
      var dy; // If the points of the triangle are collinear, then just find the
      // extremes and use the midpoint as the center of the circumcircle.

      this.x = (D * E - B * F) / G;
      this.y = (A * F - C * E) / G;
      dx = this.x - a.x;
      dy = this.y - a.y;
      this.r = dx * dx + dy * dy;
    }

    return Triangle;
  }();

  function byX(a, b) {
    return b.x - a.x;
  }

  function dedup$1(edges) {
    var j = edges.length;
    var a;
    var b;
    var i;
    var m;
    var n;

    outer: while (j) {
      b = edges[--j];
      a = edges[--j];
      i = j;

      while (i) {
        n = edges[--i];
        m = edges[--i];

        if (a === m && b === n || a === n && b === m) {
          edges.splice(j, 2);
          edges.splice(i, 2);
          j -= 2;
          continue outer;
        }
      }
    }
  }

  function triangulate(vertices) {
    // Bail if there aren't enough vertices to form any triangles.
    if (vertices.length < 3) {
      return [];
    } // Ensure the vertex array is in order of descending X coordinate
    // (which is needed to ensure a subquadratic runtime), and then find
    // the bounding box around the points.


    vertices.sort(byX);
    var i = vertices.length - 1;
    var xmin = vertices[i].x;
    var xmax = vertices[0].x;
    var ymin = vertices[i].y;
    var ymax = ymin;
    var epsilon = 1e-12;
    var a;
    var b;
    var c;
    var A;
    var B;
    var G;

    while (i--) {
      if (vertices[i].y < ymin) {
        ymin = vertices[i].y;
      }

      if (vertices[i].y > ymax) {
        ymax = vertices[i].y;
      }
    } // Find a supertriangle, which is a triangle that surrounds all the
    // vertices. This is used like something of a sentinel value to remove
    // cases in the main algorithm, and is removed before we return any
    // results.
    // Once found, put it in the "open" list. (The "open" list is for
    // triangles who may still need to be considered; the "closed" list is
    // for triangles which do not.)


    var dx = xmax - xmin;
    var dy = ymax - ymin;
    var dmax = dx > dy ? dx : dy;
    var xmid = (xmax + xmin) * 0.5;
    var ymid = (ymax + ymin) * 0.5;
    var open = [new Triangle$1({
      __sentinel: true,
      x: xmid - 20 * dmax,
      y: ymid - dmax
    }, {
      __sentinel: true,
      x: xmid,
      y: ymid + 20 * dmax
    }, {
      __sentinel: true,
      x: xmid + 20 * dmax,
      y: ymid - dmax
    })];
    var closed = [];
    var edges = [];
    var j; // Incrementally add each vertex to the mesh.

    i = vertices.length;

    while (i--) {
      // For each open triangle, check to see if the current point is
      // inside it's circumcircle. If it is, remove the triangle and add
      // it's edges to an edge list.
      edges.length = 0;
      j = open.length;

      while (j--) {
        // If this point is to the right of this triangle's circumcircle,
        // then this triangle should never get checked again. Remove it
        // from the open list, add it to the closed list, and skip.
        dx = vertices[i].x - open[j].x;

        if (dx > 0 && dx * dx > open[j].r) {
          closed.push(open[j]);
          open.splice(j, 1);
          continue;
        } // If not, skip this triangle.


        dy = vertices[i].y - open[j].y;

        if (dx * dx + dy * dy > open[j].r) {
          continue;
        } // Remove the triangle and add it's edges to the edge list.


        edges.push(open[j].a, open[j].b, open[j].b, open[j].c, open[j].c, open[j].a);
        open.splice(j, 1);
      } // Remove any doubled edges.


      dedup$1(edges); // Add a new triangle for each edge.

      j = edges.length;

      while (j) {
        b = edges[--j];
        a = edges[--j];
        c = vertices[i]; // Avoid adding colinear triangles (which have error-prone
        // circumcircles)

        A = b.x - a.x;
        B = b.y - a.y;
        G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));

        if (Math.abs(G) > epsilon) {
          open.push(new Triangle$1(a, b, c));
        }
      }
    } // Copy any remaining open triangles to the closed list, and then
    // remove any triangles that share a vertex with the supertriangle.


    Array.prototype.push.apply(closed, open);
    i = closed.length;

    while (i--) {
      if (closed[i].a.__sentinel || closed[i].b.__sentinel || closed[i].c.__sentinel) {
        closed.splice(i, 1);
      }
    }

    return closed;
  }

  /**
   * Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.
   * ~3-5x faster than the common JSON.parse + JSON.stringify combo method.
   *
   * @name clone
   * @param {GeoJSON} geojson GeoJSON Object
   * @returns {GeoJSON} cloned GeoJSON Object
   * @example
   * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});
   *
   * var lineCloned = turf.clone(line);
   */
  function clone(geojson) {
    if (!geojson) {
      throw new Error("geojson is required");
    }

    switch (geojson.type) {
      case "Feature":
        return cloneFeature(geojson);

      case "FeatureCollection":
        return cloneFeatureCollection(geojson);

      case "Point":
      case "LineString":
      case "Polygon":
      case "MultiPoint":
      case "MultiLineString":
      case "MultiPolygon":
      case "GeometryCollection":
        return cloneGeometry(geojson);

      default:
        throw new Error("unknown GeoJSON type");
    }
  }
  /**
   * Clone Feature
   *
   * @private
   * @param {Feature<any>} geojson GeoJSON Feature
   * @returns {Feature<any>} cloned Feature
   */


  function cloneFeature(geojson) {
    var cloned = {
      type: "Feature"
    }; // Preserve Foreign Members

    Object.keys(geojson).forEach(function (key) {
      switch (key) {
        case "type":
        case "properties":
        case "geometry":
          return;

        default:
          cloned[key] = geojson[key];
      }
    }); // Add properties & geometry last

    cloned.properties = cloneProperties(geojson.properties);
    cloned.geometry = cloneGeometry(geojson.geometry);
    return cloned;
  }
  /**
   * Clone Properties
   *
   * @private
   * @param {Object} properties GeoJSON Properties
   * @returns {Object} cloned Properties
   */


  function cloneProperties(properties) {
    var cloned = {};

    if (!properties) {
      return cloned;
    }

    Object.keys(properties).forEach(function (key) {
      var value = properties[key];

      if (_typeof(value) === "object") {
        if (value === null) {
          // handle null
          cloned[key] = null;
        } else if (Array.isArray(value)) {
          // handle Array
          cloned[key] = value.map(function (item) {
            return item;
          });
        } else {
          // handle generic Object
          cloned[key] = cloneProperties(value);
        }
      } else {
        cloned[key] = value;
      }
    });
    return cloned;
  }
  /**
   * Clone Feature Collection
   *
   * @private
   * @param {FeatureCollection<any>} geojson GeoJSON Feature Collection
   * @returns {FeatureCollection<any>} cloned Feature Collection
   */


  function cloneFeatureCollection(geojson) {
    var cloned = {
      type: "FeatureCollection"
    }; // Preserve Foreign Members

    Object.keys(geojson).forEach(function (key) {
      switch (key) {
        case "type":
        case "features":
          return;

        default:
          cloned[key] = geojson[key];
      }
    }); // Add features

    cloned.features = geojson.features.map(function (feature) {
      return cloneFeature(feature);
    });
    return cloned;
  }
  /**
   * Clone Geometry
   *
   * @private
   * @param {Geometry<any>} geometry GeoJSON Geometry
   * @returns {Geometry<any>} cloned Geometry
   */


  function cloneGeometry(geometry) {
    var geom = {
      type: geometry.type
    };

    if (geometry.bbox) {
      geom.bbox = geometry.bbox;
    }

    if (geometry.type === "GeometryCollection") {
      geom.geometries = geometry.geometries.map(function (g) {
        return cloneGeometry(g);
      });
      return geom;
    }

    geom.coordinates = deepSlice(geometry.coordinates);
    return geom;
  }
  /**
   * Deep Slice coordinates
   *
   * @private
   * @param {Coordinates} coords Coordinates
   * @returns {Coordinates} all coordinates sliced
   */


  function deepSlice(coords) {
    var cloned = coords;

    if (_typeof(cloned[0]) !== "object") {
      return cloned.slice();
    }

    return cloned.map(function (coord) {
      return deepSlice(coord);
    });
  }

  /**
   * Merges all connected (non-forking, non-junctioning) line strings into single lineStrings.
   * [LineString] -> LineString|MultiLineString
   *
   * @param {FeatureCollection<LineString|MultiLineString>} geojson Lines to dissolve
   * @param {Object} [options={}] Optional parameters
   * @param {boolean} [options.mutate=false] Prevent input mutation
   * @returns {Feature<LineString|MultiLineString>} Dissolved lines
   */

  function lineDissolve(geojson, options) {
    if (options === void 0) {
      options = {};
    } // Optional parameters


    options = options || {};

    if (!isObject(options)) {
      throw new Error("options is invalid");
    }

    var mutate = options.mutate; // Validation

    if (getType$1(geojson) !== "FeatureCollection") {
      throw new Error("geojson must be a FeatureCollection");
    }

    if (!geojson.features.length) {
      throw new Error("geojson is empty");
    } // Clone geojson to avoid side effects


    if (mutate === false || mutate === undefined) {
      geojson = clone(geojson);
    }

    var result = [];
    var lastLine = lineReduce$1(geojson, function (previousLine, currentLine) {
      // Attempt to merge this LineString with the other LineStrings, updating
      // the reference as it is merged with others and grows.
      var merged = mergeLineStrings(previousLine, currentLine); // Accumulate the merged LineString

      if (merged) {
        return merged; // Put the unmerged LineString back into the list
      } else {
        result.push(previousLine);
        return currentLine;
      }
    }); // Append the last line

    if (lastLine) {
      result.push(lastLine);
    } // Return null if no lines were dissolved


    if (!result.length) {
      return null; // Return LineString if only 1 line was dissolved
    } else if (result.length === 1) {
      return result[0]; // Return MultiLineString if multiple lines were dissolved with gaps
    } else {
      return multiLineString(result.map(function (line) {
        return line.coordinates;
      }));
    }
  } // [Number, Number] -> String


  function coordId(coord) {
    return coord[0].toString() + "," + coord[1].toString();
  }
  /**
   * LineString, LineString -> LineString
   *
   * @private
   * @param {Feature<LineString>} a line1
   * @param {Feature<LineString>} b line2
   * @returns {Feature<LineString>|null} Merged LineString
   */


  function mergeLineStrings(a, b) {
    var coords1 = a.geometry.coordinates;
    var coords2 = b.geometry.coordinates;
    var s1 = coordId(coords1[0]);
    var e1 = coordId(coords1[coords1.length - 1]);
    var s2 = coordId(coords2[0]);
    var e2 = coordId(coords2[coords2.length - 1]); // TODO: handle case where more than one of these is true!

    var coords;

    if (s1 === e2) {
      coords = coords2.concat(coords1.slice(1));
    } else if (s2 === e1) {
      coords = coords1.concat(coords2.slice(1));
    } else if (s1 === s2) {
      coords = coords1.slice(1).reverse().concat(coords2);
    } else if (e1 === e2) {
      coords = coords1.concat(coords2.reverse().slice(1));
    } else {
      return null;
    }

    return lineString(coords);
  }

  function identity$1 (x) {
    return x;
  }

  function transform (transform) {
    if (transform == null) return identity$1;
    var x0,
        y0,
        kx = transform.scale[0],
        ky = transform.scale[1],
        dx = transform.translate[0],
        dy = transform.translate[1];
    return function (input, i) {
      if (!i) x0 = y0 = 0;
      var j = 2,
          n = input.length,
          output = new Array(n);
      output[0] = (x0 += input[0]) * kx + dx;
      output[1] = (y0 += input[1]) * ky + dy;

      while (j < n) {
        output[j] = input[j], ++j;
      }

      return output;
    };
  }

  function reverse$1 (array, n) {
    var t,
        j = array.length,
        i = j - n;

    while (i < --j) {
      t = array[i], array[i++] = array[j], array[j] = t;
    }
  }

  function object(topology, o) {
    var transformPoint = transform(topology.transform),
        arcs = topology.arcs;

    function arc(i, points) {
      if (points.length) points.pop();

      for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
        points.push(transformPoint(a[k], k));
      }

      if (i < 0) reverse$1(points, n);
    }

    function point(p) {
      return transformPoint(p);
    }

    function line(arcs) {
      var points = [];

      for (var i = 0, n = arcs.length; i < n; ++i) {
        arc(arcs[i], points);
      }

      if (points.length < 2) points.push(points[0]); // This should never happen per the specification.

      return points;
    }

    function ring(arcs) {
      var points = line(arcs);

      while (points.length < 4) {
        points.push(points[0]);
      } // This may happen if an arc has only two points.


      return points;
    }

    function polygon(arcs) {
      return arcs.map(ring);
    }

    function geometry(o) {
      var type = o.type,
          coordinates;

      switch (type) {
        case "GeometryCollection":
          return {
            type: type,
            geometries: o.geometries.map(geometry)
          };

        case "Point":
          coordinates = point(o.coordinates);
          break;

        case "MultiPoint":
          coordinates = o.coordinates.map(point);
          break;

        case "LineString":
          coordinates = line(o.arcs);
          break;

        case "MultiLineString":
          coordinates = o.arcs.map(line);
          break;

        case "Polygon":
          coordinates = polygon(o.arcs);
          break;

        case "MultiPolygon":
          coordinates = o.arcs.map(polygon);
          break;

        default:
          return null;
      }

      return {
        type: type,
        coordinates: coordinates
      };
    }

    return geometry(o);
  }

  function stitch (topology, arcs) {
    var stitchedArcs = {},
        fragmentByStart = {},
        fragmentByEnd = {},
        fragments = [],
        emptyIndex = -1; // Stitch empty arcs first, since they may be subsumed by other arcs.

    arcs.forEach(function (i, j) {
      var arc = topology.arcs[i < 0 ? ~i : i],
          t;

      if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
        t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
      }
    });
    arcs.forEach(function (i) {
      var e = ends(i),
          start = e[0],
          end = e[1],
          f,
          g;

      if (f = fragmentByEnd[start]) {
        delete fragmentByEnd[f.end];
        f.push(i);
        f.end = end;

        if (g = fragmentByStart[end]) {
          delete fragmentByStart[g.start];
          var fg = g === f ? f : f.concat(g);
          fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
        } else {
          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        }
      } else if (f = fragmentByStart[end]) {
        delete fragmentByStart[f.start];
        f.unshift(i);
        f.start = start;

        if (g = fragmentByEnd[start]) {
          delete fragmentByEnd[g.end];
          var gf = g === f ? f : g.concat(f);
          fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
        } else {
          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        }
      } else {
        f = [i];
        fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
      }
    });

    function ends(i) {
      var arc = topology.arcs[i < 0 ? ~i : i],
          p0 = arc[0],
          p1;
      if (topology.transform) p1 = [0, 0], arc.forEach(function (dp) {
        p1[0] += dp[0], p1[1] += dp[1];
      });else p1 = arc[arc.length - 1];
      return i < 0 ? [p1, p0] : [p0, p1];
    }

    function flush(fragmentByEnd, fragmentByStart) {
      for (var k in fragmentByEnd) {
        var f = fragmentByEnd[k];
        delete fragmentByStart[f.start];
        delete f.start;
        delete f.end;
        f.forEach(function (i) {
          stitchedArcs[i < 0 ? ~i : i] = 1;
        });
        fragments.push(f);
      }
    }

    flush(fragmentByEnd, fragmentByStart);
    flush(fragmentByStart, fragmentByEnd);
    arcs.forEach(function (i) {
      if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
    });
    return fragments;
  }

  function planarRingArea(ring) {
    var i = -1,
        n = ring.length,
        a,
        b = ring[n - 1],
        area = 0;

    while (++i < n) {
      a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];
    }

    return Math.abs(area); // Note: doubled area!
  }

  function merge$2 (topology) {
    return object(topology, mergeArcs.apply(this, arguments));
  }
  function mergeArcs(topology, objects) {
    var polygonsByArc = {},
        polygons = [],
        groups = [];
    objects.forEach(geometry);

    function geometry(o) {
      switch (o.type) {
        case "GeometryCollection":
          o.geometries.forEach(geometry);
          break;

        case "Polygon":
          extract(o.arcs);
          break;

        case "MultiPolygon":
          o.arcs.forEach(extract);
          break;
      }
    }

    function extract(polygon) {
      polygon.forEach(function (ring) {
        ring.forEach(function (arc) {
          (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
        });
      });
      polygons.push(polygon);
    }

    function area(ring) {
      return planarRingArea(object(topology, {
        type: "Polygon",
        arcs: [ring]
      }).coordinates[0]);
    }

    polygons.forEach(function (polygon) {
      if (!polygon._) {
        var group = [],
            neighbors = [polygon];
        polygon._ = 1;
        groups.push(group);

        while (polygon = neighbors.pop()) {
          group.push(polygon);
          polygon.forEach(function (ring) {
            ring.forEach(function (arc) {
              polygonsByArc[arc < 0 ? ~arc : arc].forEach(function (polygon) {
                if (!polygon._) {
                  polygon._ = 1;
                  neighbors.push(polygon);
                }
              });
            });
          });
        }
      }
    });
    polygons.forEach(function (polygon) {
      delete polygon._;
    });
    return {
      type: "MultiPolygon",
      arcs: groups.map(function (polygons) {
        var arcs = [],
            n; // Extract the exterior (unique) arcs.

        polygons.forEach(function (polygon) {
          polygon.forEach(function (ring) {
            ring.forEach(function (arc) {
              if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
                arcs.push(arc);
              }
            });
          });
        }); // Stitch the arcs into one or more rings.

        arcs = stitch(topology, arcs); // If more than one ring is returned,
        // at most one of these rings can be the exterior;
        // choose the one with the greatest absolute area.

        if ((n = arcs.length) > 1) {
          for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
            if ((ki = area(arcs[i])) > k) {
              t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
            }
          }
        }

        return arcs;
      }).filter(function (arcs) {
        return arcs.length > 0;
      })
    };
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function bounds (objects) {
    var x0 = Infinity,
        y0 = Infinity,
        x1 = -Infinity,
        y1 = -Infinity;

    function boundGeometry(geometry) {
      if (geometry != null && hasOwnProperty.call(boundGeometryType, geometry.type)) boundGeometryType[geometry.type](geometry);
    }

    var boundGeometryType = {
      GeometryCollection: function GeometryCollection(o) {
        o.geometries.forEach(boundGeometry);
      },
      Point: function Point(o) {
        boundPoint(o.coordinates);
      },
      MultiPoint: function MultiPoint(o) {
        o.coordinates.forEach(boundPoint);
      },
      LineString: function LineString(o) {
        boundLine(o.arcs);
      },
      MultiLineString: function MultiLineString(o) {
        o.arcs.forEach(boundLine);
      },
      Polygon: function Polygon(o) {
        o.arcs.forEach(boundLine);
      },
      MultiPolygon: function MultiPolygon(o) {
        o.arcs.forEach(boundMultiLine);
      }
    };

    function boundPoint(coordinates) {
      var x = coordinates[0],
          y = coordinates[1];
      if (x < x0) x0 = x;
      if (x > x1) x1 = x;
      if (y < y0) y0 = y;
      if (y > y1) y1 = y;
    }

    function boundLine(coordinates) {
      coordinates.forEach(boundPoint);
    }

    function boundMultiLine(coordinates) {
      coordinates.forEach(boundLine);
    }

    for (var key in objects) {
      boundGeometry(objects[key]);
    }

    return x1 >= x0 && y1 >= y0 ? [x0, y0, x1, y1] : undefined;
  }

  function hashset (size, hash, equal, type, empty) {
    if (arguments.length === 3) {
      type = Array;
      empty = null;
    }

    var store = new type(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),
        mask = size - 1;

    for (var i = 0; i < size; ++i) {
      store[i] = empty;
    }

    function add(value) {
      var index = hash(value) & mask,
          match = store[index],
          collisions = 0;

      while (match != empty) {
        if (equal(match, value)) return true;
        if (++collisions >= size) throw new Error("full hashset");
        match = store[index = index + 1 & mask];
      }

      store[index] = value;
      return true;
    }

    function has(value) {
      var index = hash(value) & mask,
          match = store[index],
          collisions = 0;

      while (match != empty) {
        if (equal(match, value)) return true;
        if (++collisions >= size) break;
        match = store[index = index + 1 & mask];
      }

      return false;
    }

    function values() {
      var values = [];

      for (var i = 0, n = store.length; i < n; ++i) {
        var match = store[i];
        if (match != empty) values.push(match);
      }

      return values;
    }

    return {
      add: add,
      has: has,
      values: values
    };
  }

  function hashmap (size, hash, equal, keyType, keyEmpty, valueType) {
    if (arguments.length === 3) {
      keyType = valueType = Array;
      keyEmpty = null;
    }

    var keystore = new keyType(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),
        valstore = new valueType(size),
        mask = size - 1;

    for (var i = 0; i < size; ++i) {
      keystore[i] = keyEmpty;
    }

    function set(key, value) {
      var index = hash(key) & mask,
          matchKey = keystore[index],
          collisions = 0;

      while (matchKey != keyEmpty) {
        if (equal(matchKey, key)) return valstore[index] = value;
        if (++collisions >= size) throw new Error("full hashmap");
        matchKey = keystore[index = index + 1 & mask];
      }

      keystore[index] = key;
      valstore[index] = value;
      return value;
    }

    function maybeSet(key, value) {
      var index = hash(key) & mask,
          matchKey = keystore[index],
          collisions = 0;

      while (matchKey != keyEmpty) {
        if (equal(matchKey, key)) return valstore[index];
        if (++collisions >= size) throw new Error("full hashmap");
        matchKey = keystore[index = index + 1 & mask];
      }

      keystore[index] = key;
      valstore[index] = value;
      return value;
    }

    function get(key, missingValue) {
      var index = hash(key) & mask,
          matchKey = keystore[index],
          collisions = 0;

      while (matchKey != keyEmpty) {
        if (equal(matchKey, key)) return valstore[index];
        if (++collisions >= size) break;
        matchKey = keystore[index = index + 1 & mask];
      }

      return missingValue;
    }

    function keys() {
      var keys = [];

      for (var i = 0, n = keystore.length; i < n; ++i) {
        var matchKey = keystore[i];
        if (matchKey != keyEmpty) keys.push(matchKey);
      }

      return keys;
    }

    return {
      set: set,
      maybeSet: maybeSet,
      // set if unset
      get: get,
      keys: keys
    };
  }

  function equalPoint (pointA, pointB) {
    return pointA[0] === pointB[0] && pointA[1] === pointB[1];
  }

  // TODO if quantized, use simpler Int32 hashing?
  var buffer$1 = new ArrayBuffer(16),
      floats = new Float64Array(buffer$1),
      uints = new Uint32Array(buffer$1);
  function hashPoint (point) {
    floats[0] = point[0];
    floats[1] = point[1];
    var hash = uints[0] ^ uints[1];
    hash = hash << 5 ^ hash >> 7 ^ uints[2] ^ uints[3];
    return hash & 0x7fffffff;
  }

  // the points at which arcs (lines or rings) will need to be cut so that each
  // arc is represented uniquely.
  //
  // A junction is a point where at least one arc deviates from another arc going
  // through the same point. For example, consider the point B. If there is a arc
  // through ABC and another arc through CBA, then B is not a junction because in
  // both cases the adjacent point pairs are {A,C}. However, if there is an
  // additional arc ABD, then {A,D} != {A,C}, and thus B becomes a junction.
  //
  // For a closed ring ABCA, the first point A’s adjacent points are the second
  // and last point {B,C}. For a line, the first and last point are always
  // considered junctions, even if the line is closed; this ensures that a closed
  // line is never rotated.

  function join (topology) {
    var coordinates = topology.coordinates,
        lines = topology.lines,
        rings = topology.rings,
        indexes = index(),
        visitedByIndex = new Int32Array(coordinates.length),
        leftByIndex = new Int32Array(coordinates.length),
        rightByIndex = new Int32Array(coordinates.length),
        junctionByIndex = new Int8Array(coordinates.length),
        junctionCount = 0,
        // upper bound on number of junctions
    i,
        n,
        previousIndex,
        currentIndex,
        nextIndex;

    for (i = 0, n = coordinates.length; i < n; ++i) {
      visitedByIndex[i] = leftByIndex[i] = rightByIndex[i] = -1;
    }

    for (i = 0, n = lines.length; i < n; ++i) {
      var line = lines[i],
          lineStart = line[0],
          lineEnd = line[1];
      currentIndex = indexes[lineStart];
      nextIndex = indexes[++lineStart];
      ++junctionCount, junctionByIndex[currentIndex] = 1; // start

      while (++lineStart <= lineEnd) {
        sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[lineStart]);
      }

      ++junctionCount, junctionByIndex[nextIndex] = 1; // end
    }

    for (i = 0, n = coordinates.length; i < n; ++i) {
      visitedByIndex[i] = -1;
    }

    for (i = 0, n = rings.length; i < n; ++i) {
      var ring = rings[i],
          ringStart = ring[0] + 1,
          ringEnd = ring[1];
      previousIndex = indexes[ringEnd - 1];
      currentIndex = indexes[ringStart - 1];
      nextIndex = indexes[ringStart];
      sequence(i, previousIndex, currentIndex, nextIndex);

      while (++ringStart <= ringEnd) {
        sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[ringStart]);
      }
    }

    function sequence(i, previousIndex, currentIndex, nextIndex) {
      if (visitedByIndex[currentIndex] === i) return; // ignore self-intersection

      visitedByIndex[currentIndex] = i;
      var leftIndex = leftByIndex[currentIndex];

      if (leftIndex >= 0) {
        var rightIndex = rightByIndex[currentIndex];

        if ((leftIndex !== previousIndex || rightIndex !== nextIndex) && (leftIndex !== nextIndex || rightIndex !== previousIndex)) {
          ++junctionCount, junctionByIndex[currentIndex] = 1;
        }
      } else {
        leftByIndex[currentIndex] = previousIndex;
        rightByIndex[currentIndex] = nextIndex;
      }
    }

    function index() {
      var indexByPoint = hashmap(coordinates.length * 1.4, hashIndex, equalIndex, Int32Array, -1, Int32Array),
          indexes = new Int32Array(coordinates.length);

      for (var i = 0, n = coordinates.length; i < n; ++i) {
        indexes[i] = indexByPoint.maybeSet(i, i);
      }

      return indexes;
    }

    function hashIndex(i) {
      return hashPoint(coordinates[i]);
    }

    function equalIndex(i, j) {
      return equalPoint(coordinates[i], coordinates[j]);
    }

    visitedByIndex = leftByIndex = rightByIndex = null;
    var junctionByPoint = hashset(junctionCount * 1.4, hashPoint, equalPoint),
        j; // Convert back to a standard hashset by point for caller convenience.

    for (i = 0, n = coordinates.length; i < n; ++i) {
      if (junctionByIndex[j = indexes[i]]) {
        junctionByPoint.add(coordinates[j]);
      }
    }

    return junctionByPoint;
  }

  // point sequences are identified. The topology can then be subsequently deduped
  // to remove exact duplicate arcs.

  function cut (topology) {
    var junctions = join(topology),
        coordinates = topology.coordinates,
        lines = topology.lines,
        rings = topology.rings,
        next,
        i,
        n;

    for (i = 0, n = lines.length; i < n; ++i) {
      var line = lines[i],
          lineMid = line[0],
          lineEnd = line[1];

      while (++lineMid < lineEnd) {
        if (junctions.has(coordinates[lineMid])) {
          next = {
            0: lineMid,
            1: line[1]
          };
          line[1] = lineMid;
          line = line.next = next;
        }
      }
    }

    for (i = 0, n = rings.length; i < n; ++i) {
      var ring = rings[i],
          ringStart = ring[0],
          ringMid = ringStart,
          ringEnd = ring[1],
          ringFixed = junctions.has(coordinates[ringStart]);

      while (++ringMid < ringEnd) {
        if (junctions.has(coordinates[ringMid])) {
          if (ringFixed) {
            next = {
              0: ringMid,
              1: ring[1]
            };
            ring[1] = ringMid;
            ring = ring.next = next;
          } else {
            // For the first junction, we can rotate rather than cut.
            rotateArray(coordinates, ringStart, ringEnd, ringEnd - ringMid);
            coordinates[ringEnd] = coordinates[ringStart];
            ringFixed = true;
            ringMid = ringStart; // restart; we may have skipped junctions
          }
        }
      }
    }

    return topology;
  }

  function rotateArray(array, start, end, offset) {
    reverse(array, start, end);
    reverse(array, start, start + offset);
    reverse(array, start + offset, end);
  }

  function reverse(array, start, end) {
    for (var mid = start + (end-- - start >> 1), t; start < mid; ++start, --end) {
      t = array[start], array[start] = array[end], array[end] = t;
    }
  }

  function dedup (topology) {
    var coordinates = topology.coordinates,
        lines = topology.lines,
        line,
        rings = topology.rings,
        ring,
        arcCount = lines.length + rings.length,
        i,
        n;
    delete topology.lines;
    delete topology.rings; // Count the number of (non-unique) arcs to initialize the hashmap safely.

    for (i = 0, n = lines.length; i < n; ++i) {
      line = lines[i];

      while (line = line.next) {
        ++arcCount;
      }
    }

    for (i = 0, n = rings.length; i < n; ++i) {
      ring = rings[i];

      while (ring = ring.next) {
        ++arcCount;
      }
    }

    var arcsByEnd = hashmap(arcCount * 2 * 1.4, hashPoint, equalPoint),
        arcs = topology.arcs = [];

    for (i = 0, n = lines.length; i < n; ++i) {
      line = lines[i];

      do {
        dedupLine(line);
      } while (line = line.next);
    }

    for (i = 0, n = rings.length; i < n; ++i) {
      ring = rings[i];

      if (ring.next) {
        // arc is no longer closed
        do {
          dedupLine(ring);
        } while (ring = ring.next);
      } else {
        dedupRing(ring);
      }
    }

    function dedupLine(arc) {
      var startPoint, endPoint, startArcs, startArc, endArcs, endArc, i, n; // Does this arc match an existing arc in order?

      if (startArcs = arcsByEnd.get(startPoint = coordinates[arc[0]])) {
        for (i = 0, n = startArcs.length; i < n; ++i) {
          startArc = startArcs[i];

          if (equalLine(startArc, arc)) {
            arc[0] = startArc[0];
            arc[1] = startArc[1];
            return;
          }
        }
      } // Does this arc match an existing arc in reverse order?


      if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[1]])) {
        for (i = 0, n = endArcs.length; i < n; ++i) {
          endArc = endArcs[i];

          if (reverseEqualLine(endArc, arc)) {
            arc[1] = endArc[0];
            arc[0] = endArc[1];
            return;
          }
        }
      }

      if (startArcs) startArcs.push(arc);else arcsByEnd.set(startPoint, [arc]);
      if (endArcs) endArcs.push(arc);else arcsByEnd.set(endPoint, [arc]);
      arcs.push(arc);
    }

    function dedupRing(arc) {
      var endPoint, endArcs, endArc, i, n; // Does this arc match an existing line in order, or reverse order?
      // Rings are closed, so their start point and end point is the same.

      if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0]])) {
        for (i = 0, n = endArcs.length; i < n; ++i) {
          endArc = endArcs[i];

          if (equalRing(endArc, arc)) {
            arc[0] = endArc[0];
            arc[1] = endArc[1];
            return;
          }

          if (reverseEqualRing(endArc, arc)) {
            arc[0] = endArc[1];
            arc[1] = endArc[0];
            return;
          }
        }
      } // Otherwise, does this arc match an existing ring in order, or reverse order?


      if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0] + findMinimumOffset(arc)])) {
        for (i = 0, n = endArcs.length; i < n; ++i) {
          endArc = endArcs[i];

          if (equalRing(endArc, arc)) {
            arc[0] = endArc[0];
            arc[1] = endArc[1];
            return;
          }

          if (reverseEqualRing(endArc, arc)) {
            arc[0] = endArc[1];
            arc[1] = endArc[0];
            return;
          }
        }
      }

      if (endArcs) endArcs.push(arc);else arcsByEnd.set(endPoint, [arc]);
      arcs.push(arc);
    }

    function equalLine(arcA, arcB) {
      var ia = arcA[0],
          ib = arcB[0],
          ja = arcA[1],
          jb = arcB[1];
      if (ia - ja !== ib - jb) return false;

      for (; ia <= ja; ++ia, ++ib) {
        if (!equalPoint(coordinates[ia], coordinates[ib])) return false;
      }

      return true;
    }

    function reverseEqualLine(arcA, arcB) {
      var ia = arcA[0],
          ib = arcB[0],
          ja = arcA[1],
          jb = arcB[1];
      if (ia - ja !== ib - jb) return false;

      for (; ia <= ja; ++ia, --jb) {
        if (!equalPoint(coordinates[ia], coordinates[jb])) return false;
      }

      return true;
    }

    function equalRing(arcA, arcB) {
      var ia = arcA[0],
          ib = arcB[0],
          ja = arcA[1],
          jb = arcB[1],
          n = ja - ia;
      if (n !== jb - ib) return false;
      var ka = findMinimumOffset(arcA),
          kb = findMinimumOffset(arcB);

      for (var i = 0; i < n; ++i) {
        if (!equalPoint(coordinates[ia + (i + ka) % n], coordinates[ib + (i + kb) % n])) return false;
      }

      return true;
    }

    function reverseEqualRing(arcA, arcB) {
      var ia = arcA[0],
          ib = arcB[0],
          ja = arcA[1],
          jb = arcB[1],
          n = ja - ia;
      if (n !== jb - ib) return false;
      var ka = findMinimumOffset(arcA),
          kb = n - findMinimumOffset(arcB);

      for (var i = 0; i < n; ++i) {
        if (!equalPoint(coordinates[ia + (i + ka) % n], coordinates[jb - (i + kb) % n])) return false;
      }

      return true;
    } // Rings are rotated to a consistent, but arbitrary, start point.
    // This is necessary to detect when a ring and a rotated copy are dupes.


    function findMinimumOffset(arc) {
      var start = arc[0],
          end = arc[1],
          mid = start,
          minimum = mid,
          minimumPoint = coordinates[mid];

      while (++mid < end) {
        var point = coordinates[mid];

        if (point[0] < minimumPoint[0] || point[0] === minimumPoint[0] && point[1] < minimumPoint[1]) {
          minimum = mid;
          minimumPoint = point;
        }
      }

      return minimum - start;
    }

    return topology;
  }

  // Given an array of arcs in absolute (but already quantized!) coordinates,
  // converts to fixed-point delta encoding.
  // This is a destructive operation that modifies the given arcs!
  function delta (arcs) {
    var i = -1,
        n = arcs.length;

    while (++i < n) {
      var arc = arcs[i],
          j = 0,
          k = 1,
          m = arc.length,
          point = arc[0],
          x0 = point[0],
          y0 = point[1],
          x1,
          y1;

      while (++j < m) {
        point = arc[j], x1 = point[0], y1 = point[1];
        if (x1 !== x0 || y1 !== y0) arc[k++] = [x1 - x0, y1 - y0], x0 = x1, y0 = y1;
      }

      if (k === 1) arc[k++] = [0, 0]; // Each arc must be an array of two or more positions.

      arc.length = k;
    }

    return arcs;
  }

  //
  // Returns an object with three properties:
  //
  // * coordinates - shared buffer of [x, y] coordinates
  // * lines - lines extracted from the hash, of the form [start, end]
  // * rings - rings extracted from the hash, of the form [start, end]
  //
  // For each ring or line, start and end represent inclusive indexes into the
  // coordinates buffer. For rings (and closed lines), coordinates[start] equals
  // coordinates[end].
  //
  // For each line or polygon geometry in the input hash, including nested
  // geometries as in geometry collections, the `coordinates` array is replaced
  // with an equivalent `arcs` array that, for each line (for line string
  // geometries) or ring (for polygon geometries), points to one of the above
  // lines or rings.

  function extract$2 (objects) {
    var index = -1,
        lines = [],
        rings = [],
        coordinates = [];

    function extractGeometry(geometry) {
      if (geometry && hasOwnProperty.call(extractGeometryType, geometry.type)) extractGeometryType[geometry.type](geometry);
    }

    var extractGeometryType = {
      GeometryCollection: function GeometryCollection(o) {
        o.geometries.forEach(extractGeometry);
      },
      LineString: function LineString(o) {
        o.arcs = extractLine(o.arcs);
      },
      MultiLineString: function MultiLineString(o) {
        o.arcs = o.arcs.map(extractLine);
      },
      Polygon: function Polygon(o) {
        o.arcs = o.arcs.map(extractRing);
      },
      MultiPolygon: function MultiPolygon(o) {
        o.arcs = o.arcs.map(extractMultiRing);
      }
    };

    function extractLine(line) {
      for (var i = 0, n = line.length; i < n; ++i) {
        coordinates[++index] = line[i];
      }

      var arc = {
        0: index - n + 1,
        1: index
      };
      lines.push(arc);
      return arc;
    }

    function extractRing(ring) {
      for (var i = 0, n = ring.length; i < n; ++i) {
        coordinates[++index] = ring[i];
      }

      var arc = {
        0: index - n + 1,
        1: index
      };
      rings.push(arc);
      return arc;
    }

    function extractMultiRing(rings) {
      return rings.map(extractRing);
    }

    for (var key in objects) {
      extractGeometry(objects[key]);
    }

    return {
      type: "Topology",
      coordinates: coordinates,
      lines: lines,
      rings: rings,
      objects: objects
    };
  }

  // Given a hash of GeoJSON objects, returns a hash of GeoJSON geometry objects.
  // Any null input geometry objects are represented as {type: null} in the output.
  // Any feature.{id,properties,bbox} are transferred to the output geometry object.
  // Each output geometry object is a shallow copy of the input (e.g., properties, coordinates)!
  function geometry (inputs) {
    var outputs = {},
        key;

    for (key in inputs) {
      outputs[key] = geomifyObject(inputs[key]);
    }

    return outputs;
  }

  function geomifyObject(input) {
    return input == null ? {
      type: null
    } : (input.type === "FeatureCollection" ? geomifyFeatureCollection : input.type === "Feature" ? geomifyFeature : geomifyGeometry)(input);
  }

  function geomifyFeatureCollection(input) {
    var output = {
      type: "GeometryCollection",
      geometries: input.features.map(geomifyFeature)
    };
    if (input.bbox != null) output.bbox = input.bbox;
    return output;
  }

  function geomifyFeature(input) {
    var output = geomifyGeometry(input.geometry),
        key; // eslint-disable-line no-unused-vars

    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;

    for (key in input.properties) {
      output.properties = input.properties;
      break;
    }

    return output;
  }

  function geomifyGeometry(input) {
    if (input == null) return {
      type: null
    };
    var output = input.type === "GeometryCollection" ? {
      type: "GeometryCollection",
      geometries: input.geometries.map(geomifyGeometry)
    } : input.type === "Point" || input.type === "MultiPoint" ? {
      type: input.type,
      coordinates: input.coordinates
    } : {
      type: input.type,
      arcs: input.coordinates
    }; // TODO Check for unknown types?

    if (input.bbox != null) output.bbox = input.bbox;
    return output;
  }

  function prequantize (objects, bbox, n) {
    var x0 = bbox[0],
        y0 = bbox[1],
        x1 = bbox[2],
        y1 = bbox[3],
        kx = x1 - x0 ? (n - 1) / (x1 - x0) : 1,
        ky = y1 - y0 ? (n - 1) / (y1 - y0) : 1;

    function quantizePoint(input) {
      return [Math.round((input[0] - x0) * kx), Math.round((input[1] - y0) * ky)];
    }

    function quantizePoints(input, m) {
      var i = -1,
          j = 0,
          n = input.length,
          output = new Array(n),
          // pessimistic
      pi,
          px,
          py,
          x,
          y;

      while (++i < n) {
        pi = input[i];
        x = Math.round((pi[0] - x0) * kx);
        y = Math.round((pi[1] - y0) * ky);
        if (x !== px || y !== py) output[j++] = [px = x, py = y]; // non-coincident points
      }

      output.length = j;

      while (j < m) {
        j = output.push([output[0][0], output[0][1]]);
      }

      return output;
    }

    function quantizeLine(input) {
      return quantizePoints(input, 2);
    }

    function quantizeRing(input) {
      return quantizePoints(input, 4);
    }

    function quantizePolygon(input) {
      return input.map(quantizeRing);
    }

    function quantizeGeometry(o) {
      if (o != null && hasOwnProperty.call(quantizeGeometryType, o.type)) quantizeGeometryType[o.type](o);
    }

    var quantizeGeometryType = {
      GeometryCollection: function GeometryCollection(o) {
        o.geometries.forEach(quantizeGeometry);
      },
      Point: function Point(o) {
        o.coordinates = quantizePoint(o.coordinates);
      },
      MultiPoint: function MultiPoint(o) {
        o.coordinates = o.coordinates.map(quantizePoint);
      },
      LineString: function LineString(o) {
        o.arcs = quantizeLine(o.arcs);
      },
      MultiLineString: function MultiLineString(o) {
        o.arcs = o.arcs.map(quantizeLine);
      },
      Polygon: function Polygon(o) {
        o.arcs = quantizePolygon(o.arcs);
      },
      MultiPolygon: function MultiPolygon(o) {
        o.arcs = o.arcs.map(quantizePolygon);
      }
    };

    for (var key in objects) {
      quantizeGeometry(objects[key]);
    }

    return {
      scale: [1 / kx, 1 / ky],
      translate: [x0, y0]
    };
  }

  // Each object in the specified hash must be a GeoJSON object,
  // meaning FeatureCollection, a Feature or a geometry object.

  function topology (objects, quantization) {
    var bbox = bounds(objects = geometry(objects)),
        transform = quantization > 0 && bbox && prequantize(objects, bbox, quantization),
        topology = dedup(cut(extract$2(objects))),
        coordinates = topology.coordinates,
        indexByArc = hashmap(topology.arcs.length * 1.4, hashArc, equalArc);
    objects = topology.objects; // for garbage collection

    topology.bbox = bbox;
    topology.arcs = topology.arcs.map(function (arc, i) {
      indexByArc.set(arc, i);
      return coordinates.slice(arc[0], arc[1] + 1);
    });
    delete topology.coordinates;
    coordinates = null;

    function indexGeometry(geometry) {
      if (geometry && hasOwnProperty.call(indexGeometryType, geometry.type)) indexGeometryType[geometry.type](geometry);
    }

    var indexGeometryType = {
      GeometryCollection: function GeometryCollection(o) {
        o.geometries.forEach(indexGeometry);
      },
      LineString: function LineString(o) {
        o.arcs = indexArcs(o.arcs);
      },
      MultiLineString: function MultiLineString(o) {
        o.arcs = o.arcs.map(indexArcs);
      },
      Polygon: function Polygon(o) {
        o.arcs = o.arcs.map(indexArcs);
      },
      MultiPolygon: function MultiPolygon(o) {
        o.arcs = o.arcs.map(indexMultiArcs);
      }
    };

    function indexArcs(arc) {
      var indexes = [];

      do {
        var index = indexByArc.get(arc);
        indexes.push(arc[0] < arc[1] ? index : ~index);
      } while (arc = arc.next);

      return indexes;
    }

    function indexMultiArcs(arcs) {
      return arcs.map(indexArcs);
    }

    for (var key in objects) {
      indexGeometry(objects[key]);
    }

    if (transform) {
      topology.transform = transform;
      topology.arcs = delta(topology.arcs);
    }

    return topology;
  }

  function hashArc(arc) {
    var i = arc[0],
        j = arc[1],
        t;
    if (j < i) t = i, i = j, j = t;
    return i + 31 * j;
  }

  function equalArc(arcA, arcB) {
    var ia = arcA[0],
        ja = arcA[1],
        ib = arcB[0],
        jb = arcB[1],
        t;
    if (ja < ia) t = ia, ia = ja, ja = t;
    if (jb < ib) t = ib, ib = jb, jb = t;
    return ia === ib && ja === jb;
  }

  /**
   * Dissolves all overlapping (Multi)Polygon
   *
   * @param {FeatureCollection<Polygon|MultiPolygon>} geojson Polygons to dissolve
   * @param {Object} [options={}] Optional parameters
   * @param {boolean} [options.mutate=false] Prevent input mutation
   * @returns {Feature<Polygon|MultiPolygon>} Dissolved Polygons
   */

  function polygonDissolve(geojson, options) {
    if (options === void 0) {
      options = {};
    } // Validation


    if (getType$1(geojson) !== "FeatureCollection") {
      throw new Error("geojson must be a FeatureCollection");
    }

    if (!geojson.features.length) {
      throw new Error("geojson is empty");
    } // Clone geojson to avoid side effects
    // Topojson modifies in place, so we need to deep clone first


    if (options.mutate === false || options.mutate === undefined) {
      geojson = clone(geojson);
    }

    var geoms = [];
    flattenEach$1(geojson, function (feature) {
      geoms.push(feature.geometry);
    });
    var topo = topology({
      geoms: geometryCollection(geoms).geometry
    });
    var merged = merge$2(topo, topo.objects.geoms.geometries);
    return merged;
  }

  /**
   * Transform function: attempts to dissolve geojson objects where possible
   * [GeoJSON] -> GeoJSON geometry
   *
   * @private
   * @param {FeatureCollection<LineString|MultiLineString|Polygon|MultiPolygon>} geojson Features to dissolved
   * @param {Object} [options={}] Optional parameters
   * @param {boolean} [options.mutate=false] Prevent input mutation
   * @returns {Feature<MultiLineString|MultiPolygon>} Dissolved Features
   */

  function dissolve$1(geojson, options) {
    if (options === void 0) {
      options = {};
    } // Optional parameters


    options = options || {};

    if (!isObject(options)) {
      throw new Error("options is invalid");
    }

    var mutate = options.mutate; // Validation

    if (getType$1(geojson) !== "FeatureCollection") {
      throw new Error("geojson must be a FeatureCollection");
    }

    if (!geojson.features.length) {
      throw new Error("geojson is empty");
    } // Clone geojson to avoid side effects
    // Topojson modifies in place, so we need to deep clone first


    if (mutate === false || mutate === undefined) {
      geojson = clone(geojson);
    } // Assert homogenity


    var type = getHomogenousType(geojson);

    if (!type) {
      throw new Error("geojson must be homogenous");
    } // Data => Typescript hack


    var data = geojson;

    switch (type) {
      case "LineString":
        return lineDissolve(data, options);

      case "Polygon":
        return polygonDissolve(data, options);

      default:
        throw new Error(type + " is not supported");
    }
  }
  /**
   * Checks if GeoJSON is Homogenous
   *
   * @private
   * @param {GeoJSON} geojson GeoJSON
   * @returns {string|null} Homogenous type or null if multiple types
   */


  function getHomogenousType(geojson) {
    var types = {};
    flattenEach$1(geojson, function (feature) {
      types[feature.geometry.type] = true;
    });
    var keys = Object.keys(types);

    if (keys.length === 1) {
      return keys[0];
    }

    return null;
  }

  /**
   * Takes a set of {@link Point|points} and returns a concave hull Polygon or MultiPolygon.
   * Internally, this uses [turf-tin](https://github.com/Turfjs/turf-tin) to generate geometries.
   *
   * @name concave
   * @param {FeatureCollection<Point>} points input points
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.maxEdge=Infinity] the length (in 'units') of an edge necessary for part of the
   * hull to become concave.
   * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers
   * @returns {Feature<(Polygon|MultiPolygon)>|null} a concave hull (null value is returned if unable to compute hull)
   * @example
   * var points = turf.featureCollection([
   *   turf.point([-63.601226, 44.642643]),
   *   turf.point([-63.591442, 44.651436]),
   *   turf.point([-63.580799, 44.648749]),
   *   turf.point([-63.573589, 44.641788]),
   *   turf.point([-63.587665, 44.64533]),
   *   turf.point([-63.595218, 44.64765])
   * ]);
   * var options = {units: 'miles', maxEdge: 1};
   *
   * var hull = turf.concave(points, options);
   *
   * //addToMap
   * var addToMap = [points, hull]
   */

  function concave(points, options) {
    if (options === void 0) {
      options = {};
    }

    var maxEdge = options.maxEdge || Infinity;
    var cleaned = removeDuplicates(points);
    var tinPolys = tin(cleaned); // calculate length of all edges and area of all triangles
    // and remove triangles that fail the max length test

    tinPolys.features = tinPolys.features.filter(function (triangle) {
      var pt1 = triangle.geometry.coordinates[0][0];
      var pt2 = triangle.geometry.coordinates[0][1];
      var pt3 = triangle.geometry.coordinates[0][2];
      var dist1 = distance$1(pt1, pt2, options);
      var dist2 = distance$1(pt2, pt3, options);
      var dist3 = distance$1(pt1, pt3, options);
      return dist1 <= maxEdge && dist2 <= maxEdge && dist3 <= maxEdge;
    });

    if (tinPolys.features.length < 1) {
      return null;
    } // merge the adjacent triangles


    var dissolved = dissolve$1(tinPolys); // geojson-dissolve always returns a MultiPolygon

    if (dissolved.coordinates.length === 1) {
      dissolved.coordinates = dissolved.coordinates[0];
      dissolved.type = "Polygon";
    }

    return feature(dissolved);
  }
  /**
   * Removes duplicated points in a collection returning a new collection
   *
   * @private
   * @param {FeatureCollection<Point>} points to be cleaned
   * @returns {FeatureCollection<Point>} cleaned set of points
   */


  function removeDuplicates(points) {
    var cleaned = [];
    var existing = {};
    featureEach$2(points, function (pt) {
      if (!pt.geometry) {
        return;
      }

      var key = pt.geometry.coordinates.join("-");

      if (!Object.prototype.hasOwnProperty.call(existing, key)) {
        cleaned.push(pt);
        existing[key] = true;
      }
    });
    return featureCollection$1(cleaned);
  }

  var quickselect = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
      module.exports = factory() ;
    })(commonjsGlobal, function () {

      function quickselect(arr, k, left, right, compare) {
        quickselectStep(arr, k, left || 0, right || arr.length - 1, compare || defaultCompare);
      }

      function quickselectStep(arr, k, left, right, compare) {
        while (right > left) {
          if (right - left > 600) {
            var n = right - left + 1;
            var m = k - left + 1;
            var z = Math.log(n);
            var s = 0.5 * Math.exp(2 * z / 3);
            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
            quickselectStep(arr, k, newLeft, newRight, compare);
          }

          var t = arr[k];
          var i = left;
          var j = right;
          swap(arr, left, k);
          if (compare(arr[right], t) > 0) swap(arr, left, right);

          while (i < j) {
            swap(arr, i, j);
            i++;
            j--;

            while (compare(arr[i], t) < 0) {
              i++;
            }

            while (compare(arr[j], t) > 0) {
              j--;
            }
          }

          if (compare(arr[left], t) === 0) swap(arr, left, j);else {
            j++;
            swap(arr, j, right);
          }
          if (j <= k) left = j + 1;
          if (k <= j) right = j - 1;
        }
      }

      function swap(arr, i, j) {
        var tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
      }

      function defaultCompare(a, b) {
        return a < b ? -1 : a > b ? 1 : 0;
      }

      return quickselect;
    });
  });

  var rbush_1 = rbush;
  var _default$3 = rbush;

  function rbush(maxEntries, format) {
    if (!(this instanceof rbush)) return new rbush(maxEntries, format); // max entries in a node is 9 by default; min node fill is 40% for best performance

    this._maxEntries = Math.max(4, maxEntries || 9);
    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));

    if (format) {
      this._initFormat(format);
    }

    this.clear();
  }

  rbush.prototype = {
    all: function all() {
      return this._all(this.data, []);
    },
    search: function search(bbox) {
      var node = this.data,
          result = [],
          toBBox = this.toBBox;
      if (!intersects$2(bbox, node)) return result;
      var nodesToSearch = [],
          i,
          len,
          child,
          childBBox;

      while (node) {
        for (i = 0, len = node.children.length; i < len; i++) {
          child = node.children[i];
          childBBox = node.leaf ? toBBox(child) : child;

          if (intersects$2(bbox, childBBox)) {
            if (node.leaf) result.push(child);else if (contains(bbox, childBBox)) this._all(child, result);else nodesToSearch.push(child);
          }
        }

        node = nodesToSearch.pop();
      }

      return result;
    },
    collides: function collides(bbox) {
      var node = this.data,
          toBBox = this.toBBox;
      if (!intersects$2(bbox, node)) return false;
      var nodesToSearch = [],
          i,
          len,
          child,
          childBBox;

      while (node) {
        for (i = 0, len = node.children.length; i < len; i++) {
          child = node.children[i];
          childBBox = node.leaf ? toBBox(child) : child;

          if (intersects$2(bbox, childBBox)) {
            if (node.leaf || contains(bbox, childBBox)) return true;
            nodesToSearch.push(child);
          }
        }

        node = nodesToSearch.pop();
      }

      return false;
    },
    load: function load(data) {
      if (!(data && data.length)) return this;

      if (data.length < this._minEntries) {
        for (var i = 0, len = data.length; i < len; i++) {
          this.insert(data[i]);
        }

        return this;
      } // recursively build the tree with the given data from scratch using OMT algorithm


      var node = this._build(data.slice(), 0, data.length - 1, 0);

      if (!this.data.children.length) {
        // save as is if tree is empty
        this.data = node;
      } else if (this.data.height === node.height) {
        // split root if trees have the same height
        this._splitRoot(this.data, node);
      } else {
        if (this.data.height < node.height) {
          // swap trees if inserted one is bigger
          var tmpNode = this.data;
          this.data = node;
          node = tmpNode;
        } // insert the small tree into the large tree at appropriate level


        this._insert(node, this.data.height - node.height - 1, true);
      }

      return this;
    },
    insert: function insert(item) {
      if (item) this._insert(item, this.data.height - 1);
      return this;
    },
    clear: function clear() {
      this.data = createNode([]);
      return this;
    },
    remove: function remove(item, equalsFn) {
      if (!item) return this;
      var node = this.data,
          bbox = this.toBBox(item),
          path = [],
          indexes = [],
          i,
          parent,
          index,
          goingUp; // depth-first iterative tree traversal

      while (node || path.length) {
        if (!node) {
          // go up
          node = path.pop();
          parent = path[path.length - 1];
          i = indexes.pop();
          goingUp = true;
        }

        if (node.leaf) {
          // check current node
          index = findItem(item, node.children, equalsFn);

          if (index !== -1) {
            // item found, remove the item and condense tree upwards
            node.children.splice(index, 1);
            path.push(node);

            this._condense(path);

            return this;
          }
        }

        if (!goingUp && !node.leaf && contains(node, bbox)) {
          // go down
          path.push(node);
          indexes.push(i);
          i = 0;
          parent = node;
          node = node.children[0];
        } else if (parent) {
          // go right
          i++;
          node = parent.children[i];
          goingUp = false;
        } else node = null; // nothing found

      }

      return this;
    },
    toBBox: function toBBox(item) {
      return item;
    },
    compareMinX: compareNodeMinX,
    compareMinY: compareNodeMinY,
    toJSON: function toJSON() {
      return this.data;
    },
    fromJSON: function fromJSON(data) {
      this.data = data;
      return this;
    },
    _all: function _all(node, result) {
      var nodesToSearch = [];

      while (node) {
        if (node.leaf) result.push.apply(result, node.children);else nodesToSearch.push.apply(nodesToSearch, node.children);
        node = nodesToSearch.pop();
      }

      return result;
    },
    _build: function _build(items, left, right, height) {
      var N = right - left + 1,
          M = this._maxEntries,
          node;

      if (N <= M) {
        // reached leaf level; return leaf
        node = createNode(items.slice(left, right + 1));
        calcBBox(node, this.toBBox);
        return node;
      }

      if (!height) {
        // target height of the bulk-loaded tree
        height = Math.ceil(Math.log(N) / Math.log(M)); // target number of root entries to maximize storage utilization

        M = Math.ceil(N / Math.pow(M, height - 1));
      }

      node = createNode([]);
      node.leaf = false;
      node.height = height; // split the items into M mostly square tiles

      var N2 = Math.ceil(N / M),
          N1 = N2 * Math.ceil(Math.sqrt(M)),
          i,
          j,
          right2,
          right3;
      multiSelect(items, left, right, N1, this.compareMinX);

      for (i = left; i <= right; i += N1) {
        right2 = Math.min(i + N1 - 1, right);
        multiSelect(items, i, right2, N2, this.compareMinY);

        for (j = i; j <= right2; j += N2) {
          right3 = Math.min(j + N2 - 1, right2); // pack each entry recursively

          node.children.push(this._build(items, j, right3, height - 1));
        }
      }

      calcBBox(node, this.toBBox);
      return node;
    },
    _chooseSubtree: function _chooseSubtree(bbox, node, level, path) {
      var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;

      while (true) {
        path.push(node);
        if (node.leaf || path.length - 1 === level) break;
        minArea = minEnlargement = Infinity;

        for (i = 0, len = node.children.length; i < len; i++) {
          child = node.children[i];
          area = bboxArea(child);
          enlargement = enlargedArea(bbox, child) - area; // choose entry with the least area enlargement

          if (enlargement < minEnlargement) {
            minEnlargement = enlargement;
            minArea = area < minArea ? area : minArea;
            targetNode = child;
          } else if (enlargement === minEnlargement) {
            // otherwise choose one with the smallest area
            if (area < minArea) {
              minArea = area;
              targetNode = child;
            }
          }
        }

        node = targetNode || node.children[0];
      }

      return node;
    },
    _insert: function _insert(item, level, isNode) {
      var toBBox = this.toBBox,
          bbox = isNode ? item : toBBox(item),
          insertPath = []; // find the best node for accommodating the item, saving all nodes along the path too

      var node = this._chooseSubtree(bbox, this.data, level, insertPath); // put the item into the node


      node.children.push(item);
      extend(node, bbox); // split on node overflow; propagate upwards if necessary

      while (level >= 0) {
        if (insertPath[level].children.length > this._maxEntries) {
          this._split(insertPath, level);

          level--;
        } else break;
      } // adjust bboxes along the insertion path


      this._adjustParentBBoxes(bbox, insertPath, level);
    },
    // split overflowed node into two
    _split: function _split(insertPath, level) {
      var node = insertPath[level],
          M = node.children.length,
          m = this._minEntries;

      this._chooseSplitAxis(node, m, M);

      var splitIndex = this._chooseSplitIndex(node, m, M);

      var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
      newNode.height = node.height;
      newNode.leaf = node.leaf;
      calcBBox(node, this.toBBox);
      calcBBox(newNode, this.toBBox);
      if (level) insertPath[level - 1].children.push(newNode);else this._splitRoot(node, newNode);
    },
    _splitRoot: function _splitRoot(node, newNode) {
      // split root node
      this.data = createNode([node, newNode]);
      this.data.height = node.height + 1;
      this.data.leaf = false;
      calcBBox(this.data, this.toBBox);
    },
    _chooseSplitIndex: function _chooseSplitIndex(node, m, M) {
      var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;
      minOverlap = minArea = Infinity;

      for (i = m; i <= M - m; i++) {
        bbox1 = distBBox(node, 0, i, this.toBBox);
        bbox2 = distBBox(node, i, M, this.toBBox);
        overlap = intersectionArea(bbox1, bbox2);
        area = bboxArea(bbox1) + bboxArea(bbox2); // choose distribution with minimum overlap

        if (overlap < minOverlap) {
          minOverlap = overlap;
          index = i;
          minArea = area < minArea ? area : minArea;
        } else if (overlap === minOverlap) {
          // otherwise choose distribution with minimum area
          if (area < minArea) {
            minArea = area;
            index = i;
          }
        }
      }

      return index;
    },
    // sorts node children by the best axis for split
    _chooseSplitAxis: function _chooseSplitAxis(node, m, M) {
      var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,
          compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,
          xMargin = this._allDistMargin(node, m, M, compareMinX),
          yMargin = this._allDistMargin(node, m, M, compareMinY); // if total distributions margin value is minimal for x, sort by minX,
      // otherwise it's already sorted by minY


      if (xMargin < yMargin) node.children.sort(compareMinX);
    },
    // total margin of all possible split distributions where each node is at least m full
    _allDistMargin: function _allDistMargin(node, m, M, compare) {
      node.children.sort(compare);
      var toBBox = this.toBBox,
          leftBBox = distBBox(node, 0, m, toBBox),
          rightBBox = distBBox(node, M - m, M, toBBox),
          margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),
          i,
          child;

      for (i = m; i < M - m; i++) {
        child = node.children[i];
        extend(leftBBox, node.leaf ? toBBox(child) : child);
        margin += bboxMargin(leftBBox);
      }

      for (i = M - m - 1; i >= m; i--) {
        child = node.children[i];
        extend(rightBBox, node.leaf ? toBBox(child) : child);
        margin += bboxMargin(rightBBox);
      }

      return margin;
    },
    _adjustParentBBoxes: function _adjustParentBBoxes(bbox, path, level) {
      // adjust bboxes along the given tree path
      for (var i = level; i >= 0; i--) {
        extend(path[i], bbox);
      }
    },
    _condense: function _condense(path) {
      // go through the path, removing empty nodes and updating bboxes
      for (var i = path.length - 1, siblings; i >= 0; i--) {
        if (path[i].children.length === 0) {
          if (i > 0) {
            siblings = path[i - 1].children;
            siblings.splice(siblings.indexOf(path[i]), 1);
          } else this.clear();
        } else calcBBox(path[i], this.toBBox);
      }
    },
    _initFormat: function _initFormat(format) {
      // data format (minX, minY, maxX, maxY accessors)
      // uses eval-type function compilation instead of just accepting a toBBox function
      // because the algorithms are very sensitive to sorting functions performance,
      // so they should be dead simple and without inner calls
      var compareArr = ['return a', ' - b', ';'];
      this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));
      this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));
      this.toBBox = new Function('a', 'return {minX: a' + format[0] + ', minY: a' + format[1] + ', maxX: a' + format[2] + ', maxY: a' + format[3] + '};');
    }
  };

  function findItem(item, items, equalsFn) {
    if (!equalsFn) return items.indexOf(item);

    for (var i = 0; i < items.length; i++) {
      if (equalsFn(item, items[i])) return i;
    }

    return -1;
  } // calculate node's bbox from bboxes of its children


  function calcBBox(node, toBBox) {
    distBBox(node, 0, node.children.length, toBBox, node);
  } // min bounding rectangle of node children from k to p-1


  function distBBox(node, k, p, toBBox, destNode) {
    if (!destNode) destNode = createNode(null);
    destNode.minX = Infinity;
    destNode.minY = Infinity;
    destNode.maxX = -Infinity;
    destNode.maxY = -Infinity;

    for (var i = k, child; i < p; i++) {
      child = node.children[i];
      extend(destNode, node.leaf ? toBBox(child) : child);
    }

    return destNode;
  }

  function extend(a, b) {
    a.minX = Math.min(a.minX, b.minX);
    a.minY = Math.min(a.minY, b.minY);
    a.maxX = Math.max(a.maxX, b.maxX);
    a.maxY = Math.max(a.maxY, b.maxY);
    return a;
  }

  function compareNodeMinX(a, b) {
    return a.minX - b.minX;
  }

  function compareNodeMinY(a, b) {
    return a.minY - b.minY;
  }

  function bboxArea(a) {
    return (a.maxX - a.minX) * (a.maxY - a.minY);
  }

  function bboxMargin(a) {
    return a.maxX - a.minX + (a.maxY - a.minY);
  }

  function enlargedArea(a, b) {
    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) * (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
  }

  function intersectionArea(a, b) {
    var minX = Math.max(a.minX, b.minX),
        minY = Math.max(a.minY, b.minY),
        maxX = Math.min(a.maxX, b.maxX),
        maxY = Math.min(a.maxY, b.maxY);
    return Math.max(0, maxX - minX) * Math.max(0, maxY - minY);
  }

  function contains(a, b) {
    return a.minX <= b.minX && a.minY <= b.minY && b.maxX <= a.maxX && b.maxY <= a.maxY;
  }

  function intersects$2(a, b) {
    return b.minX <= a.maxX && b.minY <= a.maxY && b.maxX >= a.minX && b.maxY >= a.minY;
  }

  function createNode(children) {
    return {
      children: children,
      height: 1,
      leaf: true,
      minX: Infinity,
      minY: Infinity,
      maxX: -Infinity,
      maxY: -Infinity
    };
  } // sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
  // combines selection algorithm with binary divide & conquer approach


  function multiSelect(arr, left, right, n, compare) {
    var stack = [left, right],
        mid;

    while (stack.length) {
      right = stack.pop();
      left = stack.pop();
      if (right - left <= n) continue;
      mid = left + Math.ceil((right - left) / n / 2) * n;
      quickselect(arr, mid, left, right, compare);
      stack.push(left, mid, mid, right);
    }
  }
  rbush_1.default = _default$3;

  /**
   * Merges a specified property from a FeatureCollection of points into a
   * FeatureCollection of polygons. Given an `inProperty` on points and an `outProperty`
   * for polygons, this finds every point that lies within each polygon, collects the
   * `inProperty` values from those points, and adds them as an array to `outProperty`
   * on the polygon.
   *
   * @name collect
   * @param {FeatureCollection<Polygon>} polygons polygons with values on which to aggregate
   * @param {FeatureCollection<Point>} points points to be aggregated
   * @param {string} inProperty property to be nested from
   * @param {string} outProperty property to be nested into
   * @returns {FeatureCollection<Polygon>} polygons with properties listed based on `outField`
   * @example
   * var poly1 = turf.polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);
   * var poly2 = turf.polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);
   * var polyFC = turf.featureCollection([poly1, poly2]);
   * var pt1 = turf.point([5,5], {population: 200});
   * var pt2 = turf.point([1,3], {population: 600});
   * var pt3 = turf.point([14,2], {population: 100});
   * var pt4 = turf.point([13,1], {population: 200});
   * var pt5 = turf.point([19,7], {population: 300});
   * var pointFC = turf.featureCollection([pt1, pt2, pt3, pt4, pt5]);
   * var collected = turf.collect(polyFC, pointFC, 'population', 'values');
   * var values = collected.features[0].properties.values
   * //=values => [200, 600]
   *
   * //addToMap
   * var addToMap = [pointFC, collected]
   */

  function collect(polygons, points, inProperty, outProperty) {
    var rtree = rbush_1(6);
    var treeItems = points.features.map(function (item) {
      var _a;

      return {
        minX: item.geometry.coordinates[0],
        minY: item.geometry.coordinates[1],
        maxX: item.geometry.coordinates[0],
        maxY: item.geometry.coordinates[1],
        property: (_a = item.properties) === null || _a === void 0 ? void 0 : _a[inProperty]
      };
    });
    rtree.load(treeItems);
    polygons.features.forEach(function (poly) {
      if (!poly.properties) {
        poly.properties = {};
      }

      var bbox = bbox$2(poly);
      var potentialPoints = rtree.search({
        minX: bbox[0],
        minY: bbox[1],
        maxX: bbox[2],
        maxY: bbox[3]
      });
      var values = [];
      potentialPoints.forEach(function (pt) {
        if (booleanPointInPolygon([pt.minX, pt.minY], poly)) {
          values.push(pt.property);
        }
      });
      poly.properties[outProperty] = values;
    });
    return polygons;
  }

  /**
   * Takes input features and flips all of their coordinates from `[x, y]` to `[y, x]`.
   *
   * @name flip
   * @param {GeoJSON} geojson input features
   * @param {Object} [options={}] Optional parameters
   * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
   * @returns {GeoJSON} a feature or set of features of the same type as `input` with flipped coordinates
   * @example
   * var serbia = turf.point([20.566406, 43.421008]);
   *
   * var saudiArabia = turf.flip(serbia);
   *
   * //addToMap
   * var addToMap = [serbia, saudiArabia];
   */

  function flip(geojson, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var mutate = options.mutate;
    if (!geojson) throw new Error("geojson is required"); // ensure that we don't modify features in-place and changes to the
    // output do not change the previous feature, including changes to nested
    // properties.

    if (mutate === false || mutate === undefined) geojson = clone(geojson);
    coordEach$1(geojson, function (coord) {
      var x = coord[0];
      var y = coord[1];
      coord[0] = y;
      coord[1] = x;
    });
    return geojson;
  }

  /**
   * Removes redundant coordinates from any GeoJSON Geometry.
   *
   * @name cleanCoords
   * @param {Geometry|Feature} geojson Feature or Geometry
   * @param {Object} [options={}] Optional parameters
   * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated
   * @returns {Geometry|Feature} the cleaned input Feature/Geometry
   * @example
   * var line = turf.lineString([[0, 0], [0, 2], [0, 5], [0, 8], [0, 8], [0, 10]]);
   * var multiPoint = turf.multiPoint([[0, 0], [0, 0], [2, 2]]);
   *
   * turf.cleanCoords(line).geometry.coordinates;
   * //= [[0, 0], [0, 10]]
   *
   * turf.cleanCoords(multiPoint).geometry.coordinates;
   * //= [[0, 0], [2, 2]]
   */

  function cleanCoords(geojson, options) {
    if (options === void 0) {
      options = {};
    } // Backwards compatible with v4.0


    var mutate = _typeof(options) === "object" ? options.mutate : options;
    if (!geojson) throw new Error("geojson is required");
    var type = getType$1(geojson); // Store new "clean" points in this Array

    var newCoords = [];

    switch (type) {
      case "LineString":
        newCoords = cleanLine(geojson);
        break;

      case "MultiLineString":
      case "Polygon":
        getCoords(geojson).forEach(function (line) {
          newCoords.push(cleanLine(line));
        });
        break;

      case "MultiPolygon":
        getCoords(geojson).forEach(function (polygons) {
          var polyPoints = [];
          polygons.forEach(function (ring) {
            polyPoints.push(cleanLine(ring));
          });
          newCoords.push(polyPoints);
        });
        break;

      case "Point":
        return geojson;

      case "MultiPoint":
        var existing = {};
        getCoords(geojson).forEach(function (coord) {
          var key = coord.join("-");

          if (!Object.prototype.hasOwnProperty.call(existing, key)) {
            newCoords.push(coord);
            existing[key] = true;
          }
        });
        break;

      default:
        throw new Error(type + " geometry not supported");
    } // Support input mutation


    if (geojson.coordinates) {
      if (mutate === true) {
        geojson.coordinates = newCoords;
        return geojson;
      }

      return {
        type: type,
        coordinates: newCoords
      };
    } else {
      if (mutate === true) {
        geojson.geometry.coordinates = newCoords;
        return geojson;
      }

      return feature({
        type: type,
        coordinates: newCoords
      }, geojson.properties, {
        bbox: geojson.bbox,
        id: geojson.id
      });
    }
  }
  /**
   * Clean Coords
   *
   * @private
   * @param {Array<number>|LineString} line Line
   * @returns {Array<number>} Cleaned coordinates
   */


  function cleanLine(line) {
    var points = getCoords(line); // handle "clean" segment

    if (points.length === 2 && !equals$1(points[0], points[1])) return points;
    var newPoints = [];
    var secondToLast = points.length - 1;
    var newPointsLength = newPoints.length;
    newPoints.push(points[0]);

    for (var i = 1; i < secondToLast; i++) {
      var prevAddedPoint = newPoints[newPoints.length - 1];
      if (points[i][0] === prevAddedPoint[0] && points[i][1] === prevAddedPoint[1]) continue;else {
        newPoints.push(points[i]);
        newPointsLength = newPoints.length;

        if (newPointsLength > 2) {
          if (isPointOnLineSegment$3(newPoints[newPointsLength - 3], newPoints[newPointsLength - 1], newPoints[newPointsLength - 2])) newPoints.splice(newPoints.length - 2, 1);
        }
      }
    }

    newPoints.push(points[points.length - 1]);
    newPointsLength = newPoints.length;
    if (equals$1(points[0], points[points.length - 1]) && newPointsLength < 4) throw new Error("invalid polygon");
    if (isPointOnLineSegment$3(newPoints[newPointsLength - 3], newPoints[newPointsLength - 1], newPoints[newPointsLength - 2])) newPoints.splice(newPoints.length - 2, 1);
    return newPoints;
  }
  /**
   * Compares two points and returns if they are equals
   *
   * @private
   * @param {Position} pt1 point
   * @param {Position} pt2 point
   * @returns {boolean} true if they are equals
   */


  function equals$1(pt1, pt2) {
    return pt1[0] === pt2[0] && pt1[1] === pt2[1];
  }
  /**
   * Returns if `point` is on the segment between `start` and `end`.
   * Borrowed from `@turf/boolean-point-on-line` to speed up the evaluation (instead of using the module as dependency)
   *
   * @private
   * @param {Position} start coord pair of start of line
   * @param {Position} end coord pair of end of line
   * @param {Position} point coord pair of point to check
   * @returns {boolean} true/false
   */


  function isPointOnLineSegment$3(start, end, point) {
    var x = point[0],
        y = point[1];
    var startX = start[0],
        startY = start[1];
    var endX = end[0],
        endY = end[1];
    var dxc = x - startX;
    var dyc = y - startY;
    var dxl = endX - startX;
    var dyl = endY - startY;
    var cross = dxc * dyl - dyc * dxl;
    if (cross !== 0) return false;else if (Math.abs(dxl) >= Math.abs(dyl)) return dxl > 0 ? startX <= x && x <= endX : endX <= x && x <= startX;else return dyl > 0 ? startY <= y && y <= endY : endY <= y && y <= startY;
  }

  /*
   (c) 2013, Vladimir Agafonkin
   Simplify.js, a high-performance JS polyline simplification library
   mourner.github.io/simplify-js
  */
  // to suit your point format, run search/replace for '.x' and '.y';
  // for 3D version, see 3d branch (configurability would draw significant performance overhead)
  // square distance between 2 points

  function getSqDist(p1, p2) {
    var dx = p1.x - p2.x,
        dy = p1.y - p2.y;
    return dx * dx + dy * dy;
  } // square distance from a point to a segment


  function getSqSegDist(p, p1, p2) {
    var x = p1.x,
        y = p1.y,
        dx = p2.x - x,
        dy = p2.y - y;

    if (dx !== 0 || dy !== 0) {
      var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);

      if (t > 1) {
        x = p2.x;
        y = p2.y;
      } else if (t > 0) {
        x += dx * t;
        y += dy * t;
      }
    }

    dx = p.x - x;
    dy = p.y - y;
    return dx * dx + dy * dy;
  } // rest of the code doesn't care about point format
  // basic distance-based simplification


  function simplifyRadialDist(points, sqTolerance) {
    var prevPoint = points[0],
        newPoints = [prevPoint],
        point;

    for (var i = 1, len = points.length; i < len; i++) {
      point = points[i];

      if (getSqDist(point, prevPoint) > sqTolerance) {
        newPoints.push(point);
        prevPoint = point;
      }
    }

    if (prevPoint !== point) newPoints.push(point);
    return newPoints;
  }

  function simplifyDPStep(points, first, last, sqTolerance, simplified) {
    var maxSqDist = sqTolerance,
        index;

    for (var i = first + 1; i < last; i++) {
      var sqDist = getSqSegDist(points[i], points[first], points[last]);

      if (sqDist > maxSqDist) {
        index = i;
        maxSqDist = sqDist;
      }
    }

    if (maxSqDist > sqTolerance) {
      if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);
      simplified.push(points[index]);
      if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);
    }
  } // simplification using Ramer-Douglas-Peucker algorithm


  function simplifyDouglasPeucker(points, sqTolerance) {
    var last = points.length - 1;
    var simplified = [points[0]];
    simplifyDPStep(points, 0, last, sqTolerance, simplified);
    simplified.push(points[last]);
    return simplified;
  } // both algorithms combined for awesome performance


  function simplify(points, tolerance, highestQuality) {
    if (points.length <= 2) return points;
    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;
    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);
    points = simplifyDouglasPeucker(points, sqTolerance);
    return points;
  }
  /**
   * Takes a {@link GeoJSON} object and returns a simplified version. Internally uses
   * [simplify-js](http://mourner.github.io/simplify-js/) to perform simplification using the Ramer-Douglas-Peucker algorithm.
   *
   * @name simplify
   * @param {GeoJSON} geojson object to be simplified
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.tolerance=1] simplification tolerance
   * @param {boolean} [options.highQuality=false] whether or not to spend more time to create a higher-quality simplification with a different algorithm
   * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
   * @returns {GeoJSON} a simplified GeoJSON
   * @example
   * var geojson = turf.polygon([[
   *   [-70.603637, -33.399918],
   *   [-70.614624, -33.395332],
   *   [-70.639343, -33.392466],
   *   [-70.659942, -33.394759],
   *   [-70.683975, -33.404504],
   *   [-70.697021, -33.419406],
   *   [-70.701141, -33.434306],
   *   [-70.700454, -33.446339],
   *   [-70.694274, -33.458369],
   *   [-70.682601, -33.465816],
   *   [-70.668869, -33.472117],
   *   [-70.646209, -33.473835],
   *   [-70.624923, -33.472117],
   *   [-70.609817, -33.468107],
   *   [-70.595397, -33.458369],
   *   [-70.587158, -33.442901],
   *   [-70.587158, -33.426283],
   *   [-70.590591, -33.414248],
   *   [-70.594711, -33.406224],
   *   [-70.603637, -33.399918]
   * ]]);
   * var options = {tolerance: 0.01, highQuality: false};
   * var simplified = turf.simplify(geojson, options);
   *
   * //addToMap
   * var addToMap = [geojson, simplified]
   */


  function simplify$1(geojson, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var tolerance = options.tolerance !== undefined ? options.tolerance : 1;
    var highQuality = options.highQuality || false;
    var mutate = options.mutate || false;
    if (!geojson) throw new Error("geojson is required");
    if (tolerance && tolerance < 0) throw new Error("invalid tolerance"); // Clone geojson to avoid side effects

    if (mutate !== true) geojson = clone(geojson);
    geomEach$1(geojson, function (geom) {
      simplifyGeom(geom, tolerance, highQuality);
    });
    return geojson;
  }
  /**
   * Simplifies a feature's coordinates
   *
   * @private
   * @param {Geometry} geometry to be simplified
   * @param {number} [tolerance=1] simplification tolerance
   * @param {boolean} [highQuality=false] whether or not to spend more time to create a higher-quality simplification with a different algorithm
   * @returns {Geometry} output
   */


  function simplifyGeom(geometry, tolerance, highQuality) {
    var type = geometry.type; // "unsimplyfiable" geometry types

    if (type === "Point" || type === "MultiPoint") return geometry; // Remove any extra coordinates

    cleanCoords(geometry, true);
    var coordinates = geometry.coordinates;

    switch (type) {
      case "LineString":
        geometry["coordinates"] = simplifyLine(coordinates, tolerance, highQuality);
        break;

      case "MultiLineString":
        geometry["coordinates"] = coordinates.map(function (lines) {
          return simplifyLine(lines, tolerance, highQuality);
        });
        break;

      case "Polygon":
        geometry["coordinates"] = simplifyPolygon(coordinates, tolerance, highQuality);
        break;

      case "MultiPolygon":
        geometry["coordinates"] = coordinates.map(function (rings) {
          return simplifyPolygon(rings, tolerance, highQuality);
        });
    }

    return geometry;
  }
  /**
   * Simplifies the coordinates of a LineString with simplify-js
   *
   * @private
   * @param {Array<number>} coordinates to be processed
   * @param {number} tolerance simplification tolerance
   * @param {boolean} highQuality whether or not to spend more time to create a higher-quality
   * @returns {Array<Array<number>>} simplified coords
   */


  function simplifyLine(coordinates, tolerance, highQuality) {
    return simplify(coordinates.map(function (coord) {
      return {
        x: coord[0],
        y: coord[1],
        z: coord[2]
      };
    }), tolerance, highQuality).map(function (coords) {
      return coords.z ? [coords.x, coords.y, coords.z] : [coords.x, coords.y];
    });
  }
  /**
   * Simplifies the coordinates of a Polygon with simplify-js
   *
   * @private
   * @param {Array<number>} coordinates to be processed
   * @param {number} tolerance simplification tolerance
   * @param {boolean} highQuality whether or not to spend more time to create a higher-quality
   * @returns {Array<Array<Array<number>>>} simplified coords
   */


  function simplifyPolygon(coordinates, tolerance, highQuality) {
    return coordinates.map(function (ring) {
      var pts = ring.map(function (coord) {
        return {
          x: coord[0],
          y: coord[1]
        };
      });

      if (pts.length < 4) {
        throw new Error("invalid polygon");
      }

      var simpleRing = simplify(pts, tolerance, highQuality).map(function (coords) {
        return [coords.x, coords.y];
      }); //remove 1 percent of tolerance until enough points to make a triangle

      while (!checkValidity(simpleRing)) {
        tolerance -= tolerance * 0.01;
        simpleRing = simplify(pts, tolerance, highQuality).map(function (coords) {
          return [coords.x, coords.y];
        });
      }

      if (simpleRing[simpleRing.length - 1][0] !== simpleRing[0][0] || simpleRing[simpleRing.length - 1][1] !== simpleRing[0][1]) {
        simpleRing.push(simpleRing[0]);
      }

      return simpleRing;
    });
  }
  /**
   * Returns true if ring has at least 3 coordinates and its first coordinate is the same as its last
   *
   * @private
   * @param {Array<number>} ring coordinates to be checked
   * @returns {boolean} true if valid
   */


  function checkValidity(ring) {
    if (ring.length < 3) return false; //if the last point is the same as the first, it's not a triangle

    return !(ring.length === 3 && ring[2][0] === ring[0][0] && ring[2][1] === ring[0][1]);
  }

  /**
   * BezierSpline
   * https://github.com/leszekr/bezier-spline-js
   *
   * @private
   * @copyright
   * Copyright (c) 2013 Leszek Rybicki
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in all
   * copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   */
  var Spline =
  /** @class */
  function () {
    function Spline(options) {
      this.points = options.points || [];
      this.duration = options.duration || 10000;
      this.sharpness = options.sharpness || 0.85;
      this.centers = [];
      this.controls = [];
      this.stepLength = options.stepLength || 60;
      this.length = this.points.length;
      this.delay = 0; // this is to ensure compatibility with the 2d version

      for (var i = 0; i < this.length; i++) {
        this.points[i].z = this.points[i].z || 0;
      }

      for (var i = 0; i < this.length - 1; i++) {
        var p1 = this.points[i];
        var p2 = this.points[i + 1];
        this.centers.push({
          x: (p1.x + p2.x) / 2,
          y: (p1.y + p2.y) / 2,
          z: (p1.z + p2.z) / 2
        });
      }

      this.controls.push([this.points[0], this.points[0]]);

      for (var i = 0; i < this.centers.length - 1; i++) {
        var dx = this.points[i + 1].x - (this.centers[i].x + this.centers[i + 1].x) / 2;
        var dy = this.points[i + 1].y - (this.centers[i].y + this.centers[i + 1].y) / 2;
        var dz = this.points[i + 1].z - (this.centers[i].y + this.centers[i + 1].z) / 2;
        this.controls.push([{
          x: (1.0 - this.sharpness) * this.points[i + 1].x + this.sharpness * (this.centers[i].x + dx),
          y: (1.0 - this.sharpness) * this.points[i + 1].y + this.sharpness * (this.centers[i].y + dy),
          z: (1.0 - this.sharpness) * this.points[i + 1].z + this.sharpness * (this.centers[i].z + dz)
        }, {
          x: (1.0 - this.sharpness) * this.points[i + 1].x + this.sharpness * (this.centers[i + 1].x + dx),
          y: (1.0 - this.sharpness) * this.points[i + 1].y + this.sharpness * (this.centers[i + 1].y + dy),
          z: (1.0 - this.sharpness) * this.points[i + 1].z + this.sharpness * (this.centers[i + 1].z + dz)
        }]);
      }

      this.controls.push([this.points[this.length - 1], this.points[this.length - 1]]);
      this.steps = this.cacheSteps(this.stepLength);
      return this;
    }
    /**
     * Caches an array of equidistant (more or less) points on the curve.
     */


    Spline.prototype.cacheSteps = function (mindist) {
      var steps = [];
      var laststep = this.pos(0);
      steps.push(0);

      for (var t = 0; t < this.duration; t += 10) {
        var step = this.pos(t);
        var dist = Math.sqrt((step.x - laststep.x) * (step.x - laststep.x) + (step.y - laststep.y) * (step.y - laststep.y) + (step.z - laststep.z) * (step.z - laststep.z));

        if (dist > mindist) {
          steps.push(t);
          laststep = step;
        }
      }

      return steps;
    };
    /**
     * returns angle and speed in the given point in the curve
     */


    Spline.prototype.vector = function (t) {
      var p1 = this.pos(t + 10);
      var p2 = this.pos(t - 10);
      return {
        angle: 180 * Math.atan2(p1.y - p2.y, p1.x - p2.x) / 3.14,
        speed: Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y) + (p2.z - p1.z) * (p2.z - p1.z))
      };
    };
    /**
     * Gets the position of the point, given time.
     *
     * WARNING: The speed is not constant. The time it takes between control points is constant.
     *
     * For constant speed, use Spline.steps[i];
     */


    Spline.prototype.pos = function (time) {
      var t = time - this.delay;

      if (t < 0) {
        t = 0;
      }

      if (t > this.duration) {
        t = this.duration - 1;
      } // t = t-this.delay;


      var t2 = t / this.duration;

      if (t2 >= 1) {
        return this.points[this.length - 1];
      }

      var n = Math.floor((this.points.length - 1) * t2);
      var t1 = (this.length - 1) * t2 - n;
      return bezier$1(t1, this.points[n], this.controls[n][1], this.controls[n + 1][0], this.points[n + 1]);
    };

    return Spline;
  }();

  function bezier$1(t, p1, c1, c2, p2) {
    var b = B(t);
    var pos = {
      x: p2.x * b[0] + c2.x * b[1] + c1.x * b[2] + p1.x * b[3],
      y: p2.y * b[0] + c2.y * b[1] + c1.y * b[2] + p1.y * b[3],
      z: p2.z * b[0] + c2.z * b[1] + c1.z * b[2] + p1.z * b[3]
    };
    return pos;
  }

  function B(t) {
    var t2 = t * t;
    var t3 = t2 * t;
    return [t3, 3 * t2 * (1 - t), 3 * t * (1 - t) * (1 - t), (1 - t) * (1 - t) * (1 - t)];
  }

  /**
   * Takes a {@link LineString|line} and returns a curved version
   * by applying a [Bezier spline](http://en.wikipedia.org/wiki/B%C3%A9zier_spline)
   * algorithm.
   *
   * The bezier spline implementation is by [Leszek Rybicki](http://leszek.rybicki.cc/).
   *
   * @name bezierSpline
   * @param {Feature<LineString>} line input LineString
   * @param {Object} [options={}] Optional parameters
   * @param {Object} [options.properties={}] Translate properties to output
   * @param {number} [options.resolution=10000] time in milliseconds between points
   * @param {number} [options.sharpness=0.85] a measure of how curvy the path should be between splines
   * @returns {Feature<LineString>} curved line
   * @example
   * var line = turf.lineString([
   *   [-76.091308, 18.427501],
   *   [-76.695556, 18.729501],
   *   [-76.552734, 19.40443],
   *   [-74.61914, 19.134789],
   *   [-73.652343, 20.07657],
   *   [-73.157958, 20.210656]
   * ]);
   *
   * var curved = turf.bezierSpline(line);
   *
   * //addToMap
   * var addToMap = [line, curved]
   * curved.properties = { stroke: '#0F0' };
   */

  function bezier(line, options) {
    if (options === void 0) {
      options = {};
    } // Optional params


    var resolution = options.resolution || 10000;
    var sharpness = options.sharpness || 0.85;
    var coords = [];
    var points = getGeom(line).coordinates.map(function (pt) {
      return {
        x: pt[0],
        y: pt[1]
      };
    });
    var spline = new Spline({
      duration: resolution,
      points: points,
      sharpness: sharpness
    });

    var pushCoord = function pushCoord(time) {
      var pos = spline.pos(time);

      if (Math.floor(time / 100) % 2 === 0) {
        coords.push([pos.x, pos.y]);
      }
    };

    for (var i = 0; i < spline.duration; i += 10) {
      pushCoord(i);
    }

    pushCoord(spline.duration);
    return lineString(coords, options.properties);
  }

  /**
   * Takes a set of {@link Point|points} and a set of {@link Polygon|polygons} and/or {@link MultiPolygon|multipolygons} and performs a spatial join.
   *
   * @name tag
   * @param {FeatureCollection<Point>} points input points
   * @param {FeatureCollection<Polygon|MultiPolygon>} polygons input (multi)polygons
   * @param {string} field property in `polygons` to add to joined {<Point>} features
   * @param {string} outField property in `points` in which to store joined property from `polygons`
   * @returns {FeatureCollection<Point>} points with `containingPolyId` property containing values from `polyId`
   * @example
   * var pt1 = turf.point([-77, 44]);
   * var pt2 = turf.point([-77, 38]);
   * var poly1 = turf.polygon([[
   *   [-81, 41],
   *   [-81, 47],
   *   [-72, 47],
   *   [-72, 41],
   *   [-81, 41]
   * ]], {pop: 3000});
   * var poly2 = turf.polygon([[
   *   [-81, 35],
   *   [-81, 41],
   *   [-72, 41],
   *   [-72, 35],
   *   [-81, 35]
   * ]], {pop: 1000});
   *
   * var points = turf.featureCollection([pt1, pt2]);
   * var polygons = turf.featureCollection([poly1, poly2]);
   *
   * var tagged = turf.tag(points, polygons, 'pop', 'population');
   *
   * //addToMap
   * var addToMap = [tagged, polygons]
   */

  function tag(points, polygons, field, outField) {
    // prevent mutations
    points = clone(points);
    polygons = clone(polygons);
    featureEach$2(points, function (pt) {
      if (!pt.properties) pt.properties = {};
      featureEach$2(polygons, function (poly) {
        if (pt.properties[outField] === undefined) {
          if (booleanPointInPolygon(pt, poly)) pt.properties[outField] = poly.properties[field];
        }
      });
    });
    return points;
  }

  /**
   * Takes a {@link FeatureCollection} and returns a FeatureCollection with given number of {@link Feature|features} at random.
   *
   * @name sample
   * @param {FeatureCollection} featurecollection set of input features
   * @param {number} num number of features to select
   * @returns {FeatureCollection} a FeatureCollection with `n` features
   * @example
   * var points = turf.randomPoint(100, {bbox: [-80, 30, -60, 60]});
   *
   * var sample = turf.sample(points, 5);
   *
   * //addToMap
   * var addToMap = [points, sample]
   * turf.featureEach(sample, function (currentFeature) {
   *   currentFeature.properties['marker-size'] = 'large';
   *   currentFeature.properties['marker-color'] = '#000';
   * });
   */

  function sample(featurecollection, num) {
    if (!featurecollection) throw new Error("featurecollection is required");
    if (num === null || num === undefined) throw new Error("num is required");
    if (typeof num !== "number") throw new Error("num must be a number");
    var outFC = featureCollection$1(getRandomSubarray(featurecollection.features, num));
    return outFC;
  }

  function getRandomSubarray(arr, size) {
    var shuffled = arr.slice(0),
        i = arr.length,
        min = i - size,
        temp,
        index;

    while (i-- > min) {
      index = Math.floor((i + 1) * Math.random());
      temp = shuffled[index];
      shuffled[index] = shuffled[i];
      shuffled[i] = temp;
    }

    return shuffled.slice(min);
  }

  /**
   * Takes a bbox and returns an equivalent {@link Polygon|polygon}.
   *
   * @name bboxPolygon
   * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order
   * @param {Object} [options={}] Optional parameters
   * @param {Properties} [options.properties={}] Translate properties to Polygon
   * @param {string|number} [options.id={}] Translate Id to Polygon
   * @returns {Feature<Polygon>} a Polygon representation of the bounding box
   * @example
   * var bbox = [0, 0, 10, 10];
   *
   * var poly = turf.bboxPolygon(bbox);
   *
   * //addToMap
   * var addToMap = [poly]
   */

  function bboxPolygon(bbox, options) {
    if (options === void 0) {
      options = {};
    } // Convert BBox positions to Numbers
    // No performance loss for including Number()
    // https://github.com/Turfjs/turf/issues/1119


    var west = Number(bbox[0]);
    var south = Number(bbox[1]);
    var east = Number(bbox[2]);
    var north = Number(bbox[3]);

    if (bbox.length === 6) {
      throw new Error("@turf/bbox-polygon does not support BBox with 6 positions");
    }

    var lowLeft = [west, south];
    var topLeft = [west, north];
    var topRight = [east, north];
    var lowRight = [east, south];
    return polygon([[lowLeft, lowRight, topRight, topLeft, lowLeft]], options.properties, {
      bbox: bbox,
      id: options.id
    });
  }

  /**
   * Takes any number of features and returns a rectangular {@link Polygon} that encompasses all vertices.
   *
   * @name envelope
   * @param {GeoJSON} geojson input features
   * @returns {Feature<Polygon>} a rectangular Polygon feature that encompasses all vertices
   * @example
   * var features = turf.featureCollection([
   *   turf.point([-75.343, 39.984], {"name": "Location A"}),
   *   turf.point([-75.833, 39.284], {"name": "Location B"}),
   *   turf.point([-75.534, 39.123], {"name": "Location C"})
   * ]);
   *
   * var enveloped = turf.envelope(features);
   *
   * //addToMap
   * var addToMap = [features, enveloped];
   */

  function envelope(geojson) {
    return bboxPolygon(bbox$2(geojson));
  }

  /**
   * Takes a bounding box and calculates the minimum square bounding box that
   * would contain the input.
   *
   * @name square
   * @param {BBox} bbox extent in [west, south, east, north] order
   * @returns {BBox} a square surrounding `bbox`
   * @example
   * var bbox = [-20, -20, -15, 0];
   * var squared = turf.square(bbox);
   *
   * //addToMap
   * var addToMap = [turf.bboxPolygon(bbox), turf.bboxPolygon(squared)]
   */

  function square(bbox) {
    var west = bbox[0];
    var south = bbox[1];
    var east = bbox[2];
    var north = bbox[3];
    var horizontalDistance = distance$1(bbox.slice(0, 2), [east, south]);
    var verticalDistance = distance$1(bbox.slice(0, 2), [west, north]);

    if (horizontalDistance >= verticalDistance) {
      var verticalMidpoint = (south + north) / 2;
      return [west, verticalMidpoint - (east - west) / 2, east, verticalMidpoint + (east - west) / 2];
    } else {
      var horizontalMidpoint = (west + east) / 2;
      return [horizontalMidpoint - (north - south) / 2, south, horizontalMidpoint + (north - south) / 2, north];
    }
  }

  // http://en.wikipedia.org/wiki/Haversine_formula
  /**
   * Takes a {@link Point} and calculates the location of a destination point given a distance in
   * degrees, radians, miles, or kilometers; and bearing in degrees.
   * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.
   *
   * @name destination
   * @param {Coord} origin starting point
   * @param {number} distance distance from the origin point
   * @param {number} bearing ranging from -180 to 180
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians
   * @param {Object} [options.properties={}] Translate properties to Point
   * @returns {Feature<Point>} destination point
   * @example
   * var point = turf.point([-75.343, 39.984]);
   * var distance = 50;
   * var bearing = 90;
   * var options = {units: 'miles'};
   *
   * var destination = turf.destination(point, distance, bearing, options);
   *
   * //addToMap
   * var addToMap = [point, destination]
   * destination.properties['marker-color'] = '#f00';
   * point.properties['marker-color'] = '#0f0';
   */

  function destination(origin, distance, bearing, options) {
    if (options === void 0) {
      options = {};
    } // Handle input


    var coordinates1 = getCoord(origin);
    var longitude1 = degreesToRadians(coordinates1[0]);
    var latitude1 = degreesToRadians(coordinates1[1]);
    var bearingRad = degreesToRadians(bearing);
    var radians = lengthToRadians(distance, options.units); // Main

    var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) + Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearingRad));
    var longitude2 = longitude1 + Math.atan2(Math.sin(bearingRad) * Math.sin(radians) * Math.cos(latitude1), Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));
    var lng = radiansToDegrees(longitude2);
    var lat = radiansToDegrees(latitude2);
    return point([lng, lat], options.properties);
  }

  /**
   * Takes a {@link Point} and calculates the circle polygon given a radius in degrees, radians, miles, or kilometers; and steps for precision.
   *
   * @name circle
   * @param {Feature<Point>|number[]} center center point
   * @param {number} radius radius of the circle
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.steps=64] number of steps
   * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians
   * @param {Object} [options.properties={}] properties
   * @returns {Feature<Polygon>} circle polygon
   * @example
   * var center = [-75.343, 39.984];
   * var radius = 5;
   * var options = {steps: 10, units: 'kilometers', properties: {foo: 'bar'}};
   * var circle = turf.circle(center, radius, options);
   *
   * //addToMap
   * var addToMap = [turf.point(center), circle]
   */

  function circle(center, radius, options) {
    if (options === void 0) {
      options = {};
    } // default params


    var steps = options.steps || 64;
    var properties = options.properties ? options.properties : !Array.isArray(center) && center.type === "Feature" && center.properties ? center.properties : {}; // main

    var coordinates = [];

    for (var i = 0; i < steps; i++) {
      coordinates.push(destination(center, radius, i * -360 / steps, options).geometry.coordinates);
    }

    coordinates.push(coordinates[0]);
    return polygon([coordinates], properties);
  }

  // http://www.movable-type.co.uk/scripts/latlong.html

  /**
   * Takes two {@link Point|points} and finds the geographic bearing between them,
   * i.e. the angle measured in degrees from the north line (0 degrees)
   *
   * @name bearing
   * @param {Coord} start starting Point
   * @param {Coord} end ending Point
   * @param {Object} [options={}] Optional parameters
   * @param {boolean} [options.final=false] calculates the final bearing if true
   * @returns {number} bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)
   * @example
   * var point1 = turf.point([-75.343, 39.984]);
   * var point2 = turf.point([-75.534, 39.123]);
   *
   * var bearing = turf.bearing(point1, point2);
   *
   * //addToMap
   * var addToMap = [point1, point2]
   * point1.properties['marker-color'] = '#f00'
   * point2.properties['marker-color'] = '#0f0'
   * point1.properties.bearing = bearing
   */

  function bearing(start, end, options) {
    if (options === void 0) {
      options = {};
    } // Reverse calculation


    if (options.final === true) {
      return calculateFinalBearing(start, end);
    }

    var coordinates1 = getCoord(start);
    var coordinates2 = getCoord(end);
    var lon1 = degreesToRadians(coordinates1[0]);
    var lon2 = degreesToRadians(coordinates2[0]);
    var lat1 = degreesToRadians(coordinates1[1]);
    var lat2 = degreesToRadians(coordinates2[1]);
    var a = Math.sin(lon2 - lon1) * Math.cos(lat2);
    var b = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);
    return radiansToDegrees(Math.atan2(a, b));
  }
  /**
   * Calculates Final Bearing
   *
   * @private
   * @param {Coord} start starting Point
   * @param {Coord} end ending Point
   * @returns {number} bearing
   */

  function calculateFinalBearing(start, end) {
    // Swap start & end
    var bear = bearing(end, start);
    bear = (bear + 180) % 360;
    return bear;
  }

  /**
   * Takes two {@link Point|points} and returns a point midway between them.
   * The midpoint is calculated geodesically, meaning the curvature of the earth is taken into account.
   *
   * @name midpoint
   * @param {Coord} point1 first point
   * @param {Coord} point2 second point
   * @returns {Feature<Point>} a point midway between `pt1` and `pt2`
   * @example
   * var point1 = turf.point([144.834823, -37.771257]);
   * var point2 = turf.point([145.14244, -37.830937]);
   *
   * var midpoint = turf.midpoint(point1, point2);
   *
   * //addToMap
   * var addToMap = [point1, point2, midpoint];
   * midpoint.properties['marker-color'] = '#f00';
   */

  function midpoint(point1, point2) {
    var dist = distance$1(point1, point2);
    var heading = bearing(point1, point2);
    var midpoint = destination(point1, dist / 2, heading);
    return midpoint;
  }

  /**
   * Takes a {@link Feature} or {@link FeatureCollection} and returns the absolute center point of all features.
   *
   * @name center
   * @param {GeoJSON} geojson GeoJSON to be centered
   * @param {Object} [options={}] Optional parameters
   * @param {Object} [options.properties={}] Translate GeoJSON Properties to Point
   * @param {Object} [options.bbox={}] Translate GeoJSON BBox to Point
   * @param {Object} [options.id={}] Translate GeoJSON Id to Point
   * @returns {Feature<Point>} a Point feature at the absolute center point of all input features
   * @example
   * var features = turf.points([
   *   [-97.522259, 35.4691],
   *   [-97.502754, 35.463455],
   *   [-97.508269, 35.463245]
   * ]);
   *
   * var center = turf.center(features);
   *
   * //addToMap
   * var addToMap = [features, center]
   * center.properties['marker-size'] = 'large';
   * center.properties['marker-color'] = '#000';
   */

  function center(geojson, options) {
    if (options === void 0) {
      options = {};
    }

    var ext = bbox$2(geojson);
    var x = (ext[0] + ext[2]) / 2;
    var y = (ext[1] + ext[3]) / 2;
    return point([x, y], options.properties, options);
  }

  /**
   * Takes one or more features and calculates the centroid using the mean of all vertices.
   * This lessens the effect of small islands and artifacts when calculating the centroid of a set of polygons.
   *
   * @name centroid
   * @param {GeoJSON} geojson GeoJSON to be centered
   * @param {Object} [options={}] Optional Parameters
   * @param {Object} [options.properties={}] an Object that is used as the {@link Feature}'s properties
   * @returns {Feature<Point>} the centroid of the input features
   * @example
   * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);
   *
   * var centroid = turf.centroid(polygon);
   *
   * //addToMap
   * var addToMap = [polygon, centroid]
   */

  function centroid(geojson, options) {
    if (options === void 0) {
      options = {};
    }

    var xSum = 0;
    var ySum = 0;
    var len = 0;
    coordEach$1(geojson, function (coord) {
      xSum += coord[0];
      ySum += coord[1];
      len++;
    }, true);
    return point([xSum / len, ySum / len], options.properties);
  }

  /**
   * Takes any {@link Feature} or a {@link FeatureCollection} and returns its [center of mass](https://en.wikipedia.org/wiki/Center_of_mass) using this formula: [Centroid of Polygon](https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon).
   *
   * @name centerOfMass
   * @param {GeoJSON} geojson GeoJSON to be centered
   * @param {Object} [options={}] Optional Parameters
   * @param {Object} [options.properties={}] Translate Properties to Feature
   * @returns {Feature<Point>} the center of mass
   * @example
   * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);
   *
   * var center = turf.centerOfMass(polygon);
   *
   * //addToMap
   * var addToMap = [polygon, center]
   */

  function centerOfMass(geojson, options) {
    if (options === void 0) {
      options = {};
    }

    switch (getType$1(geojson)) {
      case "Point":
        return point(getCoord(geojson), options.properties);

      case "Polygon":
        var coords = [];
        coordEach$1(geojson, function (coord) {
          coords.push(coord);
        }); // First, we neutralize the feature (set it around coordinates [0,0]) to prevent rounding errors
        // We take any point to translate all the points around 0

        var centre = centroid(geojson, {
          properties: options.properties
        });
        var translation = centre.geometry.coordinates;
        var sx = 0;
        var sy = 0;
        var sArea = 0;
        var i, pi, pj, xi, xj, yi, yj, a;
        var neutralizedPoints = coords.map(function (point) {
          return [point[0] - translation[0], point[1] - translation[1]];
        });

        for (i = 0; i < coords.length - 1; i++) {
          // pi is the current point
          pi = neutralizedPoints[i];
          xi = pi[0];
          yi = pi[1]; // pj is the next point (pi+1)

          pj = neutralizedPoints[i + 1];
          xj = pj[0];
          yj = pj[1]; // a is the common factor to compute the signed area and the final coordinates

          a = xi * yj - xj * yi; // sArea is the sum used to compute the signed area

          sArea += a; // sx and sy are the sums used to compute the final coordinates

          sx += (xi + xj) * a;
          sy += (yi + yj) * a;
        } // Shape has no area: fallback on turf.centroid


        if (sArea === 0) {
          return centre;
        } else {
          // Compute the signed area, and factorize 1/6A
          var area = sArea * 0.5;
          var areaFactor = 1 / (6 * area); // Compute the final coordinates, adding back the values that have been neutralized

          return point([translation[0] + areaFactor * sx, translation[1] + areaFactor * sy], options.properties);
        }

      default:
        // Not a polygon: Compute the convex hull and work with that
        var hull = convex(geojson);
        if (hull) return centerOfMass(hull, {
          properties: options.properties
        }); // Hull is empty: fallback on the centroid
        else return centroid(geojson, {
            properties: options.properties
          });
    }
  }

  /**
   * Combines a {@link FeatureCollection} of {@link Point}, {@link LineString}, or {@link Polygon} features
   * into {@link MultiPoint}, {@link MultiLineString}, or {@link MultiPolygon} features.
   *
   * @name combine
   * @param {FeatureCollection<Point|LineString|Polygon>} fc a FeatureCollection of any type
   * @returns {FeatureCollection<MultiPoint|MultiLineString|MultiPolygon>} a FeatureCollection of corresponding type to input
   * @example
   * var fc = turf.featureCollection([
   *   turf.point([19.026432, 47.49134]),
   *   turf.point([19.074497, 47.509548])
   * ]);
   *
   * var combined = turf.combine(fc);
   *
   * //addToMap
   * var addToMap = [combined]
   */

  function combine(fc) {
    var groups = {
      MultiPoint: {
        coordinates: [],
        properties: []
      },
      MultiLineString: {
        coordinates: [],
        properties: []
      },
      MultiPolygon: {
        coordinates: [],
        properties: []
      }
    };
    featureEach$2(fc, function (feature) {
      var _a, _b, _c;

      var _d;

      switch ((_d = feature.geometry) === null || _d === void 0 ? void 0 : _d.type) {
        case "Point":
          groups.MultiPoint.coordinates.push(feature.geometry.coordinates);
          groups.MultiPoint.properties.push(feature.properties);
          break;

        case "MultiPoint":
          (_a = groups.MultiPoint.coordinates).push.apply(_a, feature.geometry.coordinates);

          groups.MultiPoint.properties.push(feature.properties);
          break;

        case "LineString":
          groups.MultiLineString.coordinates.push(feature.geometry.coordinates);
          groups.MultiLineString.properties.push(feature.properties);
          break;

        case "MultiLineString":
          (_b = groups.MultiLineString.coordinates).push.apply(_b, feature.geometry.coordinates);

          groups.MultiLineString.properties.push(feature.properties);
          break;

        case "Polygon":
          groups.MultiPolygon.coordinates.push(feature.geometry.coordinates);
          groups.MultiPolygon.properties.push(feature.properties);
          break;

        case "MultiPolygon":
          (_c = groups.MultiPolygon.coordinates).push.apply(_c, feature.geometry.coordinates);

          groups.MultiPolygon.properties.push(feature.properties);
          break;
      }
    });
    return featureCollection$1(Object.keys(groups).filter(function (key) {
      return groups[key].coordinates.length;
    }).sort().map(function (key) {
      var geometry = {
        type: key,
        coordinates: groups[key].coordinates
      };
      var properties = {
        collectedProperties: groups[key].properties
      };
      return feature(geometry, properties);
    }));
  }

  /**
   * Takes a feature or set of features and returns all positions as {@link Point|points}.
   *
   * @name explode
   * @param {GeoJSON} geojson input features
   * @returns {FeatureCollection<point>} points representing the exploded input features
   * @throws {Error} if it encounters an unknown geometry type
   * @example
   * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);
   *
   * var explode = turf.explode(polygon);
   *
   * //addToMap
   * var addToMap = [polygon, explode]
   */

  function explode$1(geojson) {
    var points = [];

    if (geojson.type === "FeatureCollection") {
      featureEach$2(geojson, function (feature) {
        coordEach$1(feature, function (coord) {
          points.push(point(coord, feature.properties));
        });
      });
    } else {
      coordEach$1(geojson, function (coord) {
        points.push(point(coord, geojson.properties));
      });
    }

    return featureCollection$1(points);
  }

  var earcut_1 = earcut;
  var _default$2 = earcut;

  function earcut(data, holeIndices, dim) {
    dim = dim || 2;
    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = linkedList(data, 0, outerLen, dim, true),
        triangles = [];
    if (!outerNode || outerNode.next === outerNode.prev) return triangles;
    var minX, minY, maxX, maxY, x, y, invSize;
    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox

    if (data.length > 80 * dim) {
      minX = maxX = data[0];
      minY = maxY = data[1];

      for (var i = dim; i < outerLen; i += dim) {
        x = data[i];
        y = data[i + 1];
        if (x < minX) minX = x;
        if (y < minY) minY = y;
        if (x > maxX) maxX = x;
        if (y > maxY) maxY = y;
      } // minX, minY and invSize are later used to transform coords into integers for z-order calculation


      invSize = Math.max(maxX - minX, maxY - minY);
      invSize = invSize !== 0 ? 1 / invSize : 0;
    }

    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
    return triangles;
  } // create a circular doubly linked list from polygon points in the specified winding order


  function linkedList(data, start, end, dim, clockwise) {
    var i, last;

    if (clockwise === signedArea(data, start, end, dim) > 0) {
      for (i = start; i < end; i += dim) {
        last = insertNode(i, data[i], data[i + 1], last);
      }
    } else {
      for (i = end - dim; i >= start; i -= dim) {
        last = insertNode(i, data[i], data[i + 1], last);
      }
    }

    if (last && equals(last, last.next)) {
      removeNode(last);
      last = last.next;
    }

    return last;
  } // eliminate colinear or duplicate points


  function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;
    var p = start,
        again;

    do {
      again = false;

      if (!p.steiner && (equals(p, p.next) || area$1(p.prev, p, p.next) === 0)) {
        removeNode(p);
        p = end = p.prev;
        if (p === p.next) break;
        again = true;
      } else {
        p = p.next;
      }
    } while (again || p !== end);

    return end;
  } // main ear slicing loop which triangulates a polygon (given as a linked list)


  function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return; // interlink polygon nodes in z-order

    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
    var stop = ear,
        prev,
        next; // iterate through ears, slicing them one by one

    while (ear.prev !== ear.next) {
      prev = ear.prev;
      next = ear.next;

      if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
        // cut off the triangle
        triangles.push(prev.i / dim);
        triangles.push(ear.i / dim);
        triangles.push(next.i / dim);
        removeNode(ear); // skipping the next vertex leads to less sliver triangles

        ear = next.next;
        stop = next.next;
        continue;
      }

      ear = next; // if we looped through the whole remaining polygon and can't find any more ears

      if (ear === stop) {
        // try filtering points and slicing again
        if (!pass) {
          earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally
        } else if (pass === 1) {
          ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
          earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two
        } else if (pass === 2) {
          splitEarcut(ear, triangles, dim, minX, minY, invSize);
        }

        break;
      }
    }
  } // check whether a polygon node forms a valid ear with adjacent nodes


  function isEar(ear) {
    var a = ear.prev,
        b = ear,
        c = ear.next;
    if (area$1(a, b, c) >= 0) return false; // reflex, can't be an ear
    // now make sure we don't have other points inside the potential ear

    var p = ear.next.next;

    while (p !== ear.prev) {
      if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area$1(p.prev, p, p.next) >= 0) return false;
      p = p.next;
    }

    return true;
  }

  function isEarHashed(ear, minX, minY, invSize) {
    var a = ear.prev,
        b = ear,
        c = ear.next;
    if (area$1(a, b, c) >= 0) return false; // reflex, can't be an ear
    // triangle bbox; min & max are calculated like this for speed

    var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,
        minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,
        maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,
        maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;

    var minZ = zOrder(minTX, minTY, minX, minY, invSize),
        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
    var p = ear.prevZ,
        n = ear.nextZ; // look for points inside the triangle in both directions

    while (p && p.z >= minZ && n && n.z <= maxZ) {
      if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area$1(p.prev, p, p.next) >= 0) return false;
      p = p.prevZ;
      if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area$1(n.prev, n, n.next) >= 0) return false;
      n = n.nextZ;
    } // look for remaining points in decreasing z-order


    while (p && p.z >= minZ) {
      if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area$1(p.prev, p, p.next) >= 0) return false;
      p = p.prevZ;
    } // look for remaining points in increasing z-order


    while (n && n.z <= maxZ) {
      if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area$1(n.prev, n, n.next) >= 0) return false;
      n = n.nextZ;
    }

    return true;
  } // go through all polygon nodes and cure small local self-intersections


  function cureLocalIntersections(start, triangles, dim) {
    var p = start;

    do {
      var a = p.prev,
          b = p.next.next;

      if (!equals(a, b) && intersects$1(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
        triangles.push(a.i / dim);
        triangles.push(p.i / dim);
        triangles.push(b.i / dim); // remove two nodes involved

        removeNode(p);
        removeNode(p.next);
        p = start = b;
      }

      p = p.next;
    } while (p !== start);

    return filterPoints(p);
  } // try splitting polygon into two and triangulate them independently


  function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;

    do {
      var b = a.next.next;

      while (b !== a.prev) {
        if (a.i !== b.i && isValidDiagonal(a, b)) {
          // split the polygon in two by the diagonal
          var c = splitPolygon(a, b); // filter colinear points around the cuts

          a = filterPoints(a, a.next);
          c = filterPoints(c, c.next); // run earcut on each half

          earcutLinked(a, triangles, dim, minX, minY, invSize);
          earcutLinked(c, triangles, dim, minX, minY, invSize);
          return;
        }

        b = b.next;
      }

      a = a.next;
    } while (a !== start);
  } // link every hole into the outer loop, producing a single-ring polygon without holes


  function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i,
        len,
        start,
        end,
        list;

    for (i = 0, len = holeIndices.length; i < len; i++) {
      start = holeIndices[i] * dim;
      end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
      list = linkedList(data, start, end, dim, false);
      if (list === list.next) list.steiner = true;
      queue.push(getLeftmost(list));
    }

    queue.sort(compareX); // process holes from left to right

    for (i = 0; i < queue.length; i++) {
      outerNode = eliminateHole(queue[i], outerNode);
      outerNode = filterPoints(outerNode, outerNode.next);
    }

    return outerNode;
  }

  function compareX(a, b) {
    return a.x - b.x;
  } // find a bridge between vertices that connects hole with an outer ring and and link it


  function eliminateHole(hole, outerNode) {
    var bridge = findHoleBridge(hole, outerNode);

    if (!bridge) {
      return outerNode;
    }

    var bridgeReverse = splitPolygon(bridge, hole); // filter collinear points around the cuts

    var filteredBridge = filterPoints(bridge, bridge.next);
    filterPoints(bridgeReverse, bridgeReverse.next); // Check if input node was removed by the filtering

    return outerNode === bridge ? filteredBridge : outerNode;
  } // David Eberly's algorithm for finding a bridge between hole and outer polygon


  function findHoleBridge(hole, outerNode) {
    var p = outerNode,
        hx = hole.x,
        hy = hole.y,
        qx = -Infinity,
        m; // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point

    do {
      if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
        var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);

        if (x <= hx && x > qx) {
          qx = x;

          if (x === hx) {
            if (hy === p.y) return p;
            if (hy === p.next.y) return p.next;
          }

          m = p.x < p.next.x ? p : p.next;
        }
      }

      p = p.next;
    } while (p !== outerNode);

    if (!m) return null;
    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint
    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point

    var stop = m,
        mx = m.x,
        my = m.y,
        tanMin = Infinity,
        tan;
    p = m;

    do {
      if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
        tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

        if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
          m = p;
          tanMin = tan;
        }
      }

      p = p.next;
    } while (p !== stop);

    return m;
  } // whether sector in vertex m contains sector in vertex p in the same coordinates


  function sectorContainsSector(m, p) {
    return area$1(m.prev, m, p.prev) < 0 && area$1(p.next, m, m.next) < 0;
  } // interlink polygon nodes in z-order


  function indexCurve(start, minX, minY, invSize) {
    var p = start;

    do {
      if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
      p.prevZ = p.prev;
      p.nextZ = p.next;
      p = p.next;
    } while (p !== start);

    p.prevZ.nextZ = null;
    p.prevZ = null;
    sortLinked(p);
  } // Simon Tatham's linked list merge sort algorithm
  // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html


  function sortLinked(list) {
    var i,
        p,
        q,
        e,
        tail,
        numMerges,
        pSize,
        qSize,
        inSize = 1;

    do {
      p = list;
      list = null;
      tail = null;
      numMerges = 0;

      while (p) {
        numMerges++;
        q = p;
        pSize = 0;

        for (i = 0; i < inSize; i++) {
          pSize++;
          q = q.nextZ;
          if (!q) break;
        }

        qSize = inSize;

        while (pSize > 0 || qSize > 0 && q) {
          if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
            e = p;
            p = p.nextZ;
            pSize--;
          } else {
            e = q;
            q = q.nextZ;
            qSize--;
          }

          if (tail) tail.nextZ = e;else list = e;
          e.prevZ = tail;
          tail = e;
        }

        p = q;
      }

      tail.nextZ = null;
      inSize *= 2;
    } while (numMerges > 1);

    return list;
  } // z-order of a point given coords and inverse of the longer side of data bbox


  function zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = 32767 * (x - minX) * invSize;
    y = 32767 * (y - minY) * invSize;
    x = (x | x << 8) & 0x00FF00FF;
    x = (x | x << 4) & 0x0F0F0F0F;
    x = (x | x << 2) & 0x33333333;
    x = (x | x << 1) & 0x55555555;
    y = (y | y << 8) & 0x00FF00FF;
    y = (y | y << 4) & 0x0F0F0F0F;
    y = (y | y << 2) & 0x33333333;
    y = (y | y << 1) & 0x55555555;
    return x | y << 1;
  } // find the leftmost node of a polygon ring


  function getLeftmost(start) {
    var p = start,
        leftmost = start;

    do {
      if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
      p = p.next;
    } while (p !== start);

    return leftmost;
  } // check if a point lies within a convex triangle


  function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
  } // check if a diagonal between two polygon nodes is valid (lies in polygon interior)


  function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges
    locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible
    area$1(a.prev, a, b.prev) || area$1(a, b.prev, b)) || // does not create opposite-facing sectors
    equals(a, b) && area$1(a.prev, a, a.next) > 0 && area$1(b.prev, b, b.next) > 0); // special zero-length case
  } // signed area of a triangle


  function area$1(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
  } // check if two points are equal


  function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
  } // check if two segments intersect


  function intersects$1(p1, q1, p2, q2) {
    var o1 = sign$1(area$1(p1, q1, p2));
    var o2 = sign$1(area$1(p1, q1, q2));
    var o3 = sign$1(area$1(p2, q2, p1));
    var o4 = sign$1(area$1(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4) return true; // general case

    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1

    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1

    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2

    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

    return false;
  } // for collinear points p, q, r, check if point q lies on segment pr


  function onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
  }

  function sign$1(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
  } // check if a polygon diagonal intersects any polygon segments


  function intersectsPolygon(a, b) {
    var p = a;

    do {
      if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects$1(p, p.next, a, b)) return true;
      p = p.next;
    } while (p !== a);

    return false;
  } // check if a polygon diagonal is locally inside the polygon


  function locallyInside(a, b) {
    return area$1(a.prev, a, a.next) < 0 ? area$1(a, b, a.next) >= 0 && area$1(a, a.prev, b) >= 0 : area$1(a, b, a.prev) < 0 || area$1(a, a.next, b) < 0;
  } // check if the middle point of a polygon diagonal is inside the polygon


  function middleInside(a, b) {
    var p = a,
        inside = false,
        px = (a.x + b.x) / 2,
        py = (a.y + b.y) / 2;

    do {
      if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
      p = p.next;
    } while (p !== a);

    return inside;
  } // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
  // if one belongs to the outer ring and another to a hole, it merges it into a single ring


  function splitPolygon(a, b) {
    var a2 = new Node$4(a.i, a.x, a.y),
        b2 = new Node$4(b.i, b.x, b.y),
        an = a.next,
        bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
  } // create a node and optionally link it with previous one (in a circular doubly linked list)


  function insertNode(i, x, y, last) {
    var p = new Node$4(i, x, y);

    if (!last) {
      p.prev = p;
      p.next = p;
    } else {
      p.next = last.next;
      p.prev = last;
      last.next.prev = p;
      last.next = p;
    }

    return p;
  }

  function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
  }

  function Node$4(i, x, y) {
    // vertex index in coordinates array
    this.i = i; // vertex coordinates

    this.x = x;
    this.y = y; // previous and next vertex nodes in a polygon ring

    this.prev = null;
    this.next = null; // z-order curve value

    this.z = null; // previous and next nodes in z-order

    this.prevZ = null;
    this.nextZ = null; // indicates whether this is a steiner point

    this.steiner = false;
  } // return a percentage difference between the polygon area and its triangulation area;
  // used to verify correctness of triangulation


  earcut.deviation = function (data, holeIndices, dim, triangles) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));

    if (hasHoles) {
      for (var i = 0, len = holeIndices.length; i < len; i++) {
        var start = holeIndices[i] * dim;
        var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        polygonArea -= Math.abs(signedArea(data, start, end, dim));
      }
    }

    var trianglesArea = 0;

    for (i = 0; i < triangles.length; i += 3) {
      var a = triangles[i] * dim;
      var b = triangles[i + 1] * dim;
      var c = triangles[i + 2] * dim;
      trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
    }

    return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);
  };

  function signedArea(data, start, end, dim) {
    var sum = 0;

    for (var i = start, j = end - dim; i < end; i += dim) {
      sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
      j = i;
    }

    return sum;
  } // turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts


  earcut.flatten = function (data) {
    var dim = data[0][0].length,
        result = {
      vertices: [],
      holes: [],
      dimensions: dim
    },
        holeIndex = 0;

    for (var i = 0; i < data.length; i++) {
      for (var j = 0; j < data[i].length; j++) {
        for (var d = 0; d < dim; d++) {
          result.vertices.push(data[i][j][d]);
        }
      }

      if (i > 0) {
        holeIndex += data[i - 1].length;
        result.holes.push(holeIndex);
      }
    }

    return result;
  };
  earcut_1.default = _default$2;

  /**
   * Tesselates a {@link Feature<Polygon>} into a {@link FeatureCollection<Polygon>} of triangles
   * using [earcut](https://github.com/mapbox/earcut).
   *
   * @name tesselate
   * @param {Feature<Polygon>} poly the polygon to tesselate
   * @returns {FeatureCollection<Polygon>} a geometrycollection feature
   * @example
   * var poly = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);
   * var triangles = turf.tesselate(poly);
   *
   * //addToMap
   * var addToMap = [poly, triangles]
   */

  function tesselate(poly) {
    if (!poly.geometry || poly.geometry.type !== "Polygon" && poly.geometry.type !== "MultiPolygon") {
      throw new Error("input must be a Polygon or MultiPolygon");
    }

    var fc = {
      type: "FeatureCollection",
      features: []
    };

    if (poly.geometry.type === "Polygon") {
      fc.features = processPolygon$2(poly.geometry.coordinates);
    } else {
      poly.geometry.coordinates.forEach(function (coordinates) {
        fc.features = fc.features.concat(processPolygon$2(coordinates));
      });
    }

    return fc;
  }

  function processPolygon$2(coordinates) {
    var data = flattenCoords(coordinates);
    var dim = 2;
    var result = earcut_1(data.vertices, data.holes, dim);
    var features = [];
    var vertices = [];
    result.forEach(function (vert, i) {
      var index = result[i];
      vertices.push([data.vertices[index * dim], data.vertices[index * dim + 1]]);
    });

    for (var i = 0; i < vertices.length; i += 3) {
      var coords = vertices.slice(i, i + 3);
      coords.push(vertices[i]);
      features.push(polygon([coords]));
    }

    return features;
  }

  function flattenCoords(data) {
    var dim = data[0][0].length,
        result = {
      vertices: [],
      holes: [],
      dimensions: dim
    },
        holeIndex = 0;

    for (var i = 0; i < data.length; i++) {
      for (var j = 0; j < data[i].length; j++) {
        for (var d = 0; d < dim; d++) {
          result.vertices.push(data[i][j][d]);
        }
      }

      if (i > 0) {
        holeIndex += data[i - 1].length;
        result.holes.push(holeIndex);
      }
    }

    return result;
  }

  /**
   * Takes a reference {@link Point|point} and a FeatureCollection of Features
   * with Point geometries and returns the
   * point from the FeatureCollection closest to the reference. This calculation
   * is geodesic.
   *
   * @name nearestPoint
   * @param {Coord} targetPoint the reference point
   * @param {FeatureCollection<Point>} points against input point set
   * @returns {Feature<Point>} the closest point in the set to the reference point
   * @example
   * var targetPoint = turf.point([28.965797, 41.010086], {"marker-color": "#0F0"});
   * var points = turf.featureCollection([
   *     turf.point([28.973865, 41.011122]),
   *     turf.point([28.948459, 41.024204]),
   *     turf.point([28.938674, 41.013324])
   * ]);
   *
   * var nearest = turf.nearestPoint(targetPoint, points);
   *
   * //addToMap
   * var addToMap = [targetPoint, points, nearest];
   * nearest.properties['marker-color'] = '#F00';
   */

  function nearestPoint(targetPoint, points) {
    // Input validation
    if (!targetPoint) throw new Error("targetPoint is required");
    if (!points) throw new Error("points is required");
    var nearest;
    var minDist = Infinity;
    var bestFeatureIndex = 0;
    featureEach$2(points, function (pt, featureIndex) {
      var distanceToPoint = distance$1(targetPoint, pt);

      if (distanceToPoint < minDist) {
        bestFeatureIndex = featureIndex;
        minDist = distanceToPoint;
      }
    });
    nearest = clone(points.features[bestFeatureIndex]);
    nearest.properties.featureIndex = bestFeatureIndex;
    nearest.properties.distanceToPoint = minDist;
    return nearest;
  }

  /**
   * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a
   * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.
   *
   * @name lineSegment
   * @param {GeoJSON} geojson GeoJSON Polygon or LineString
   * @returns {FeatureCollection<LineString>} 2-vertex line segments
   * @example
   * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
   * var segments = turf.lineSegment(polygon);
   *
   * //addToMap
   * var addToMap = [polygon, segments]
   */

  function lineSegment(geojson) {
    if (!geojson) {
      throw new Error("geojson is required");
    }

    var results = [];
    flattenEach$1(geojson, function (feature) {
      lineSegmentFeature(feature, results);
    });
    return featureCollection$1(results);
  }
  /**
   * Line Segment
   *
   * @private
   * @param {Feature<LineString|Polygon>} geojson Line or polygon feature
   * @param {Array} results push to results
   * @returns {void}
   */


  function lineSegmentFeature(geojson, results) {
    var coords = [];
    var geometry = geojson.geometry;

    if (geometry !== null) {
      switch (geometry.type) {
        case "Polygon":
          coords = getCoords(geometry);
          break;

        case "LineString":
          coords = [getCoords(geometry)];
      }

      coords.forEach(function (coord) {
        var segments = createSegments(coord, geojson.properties);
        segments.forEach(function (segment) {
          segment.id = results.length;
          results.push(segment);
        });
      });
    }
  }
  /**
   * Create Segments from LineString coordinates
   *
   * @private
   * @param {Array<Array<number>>} coords LineString coordinates
   * @param {*} properties GeoJSON properties
   * @returns {Array<Feature<LineString>>} line segments
   */


  function createSegments(coords, properties) {
    var segments = [];
    coords.reduce(function (previousCoords, currentCoords) {
      var segment = lineString([previousCoords, currentCoords], properties);
      segment.bbox = bbox$1(previousCoords, currentCoords);
      segments.push(segment);
      return currentCoords;
    });
    return segments;
  }
  /**
   * Create BBox between two coordinates (faster than @turf/bbox)
   *
   * @private
   * @param {Array<number>} coords1 Point coordinate
   * @param {Array<number>} coords2 Point coordinate
   * @returns {BBox} [west, south, east, north]
   */


  function bbox$1(coords1, coords2) {
    var x1 = coords1[0];
    var y1 = coords1[1];
    var x2 = coords2[0];
    var y2 = coords2[1];
    var west = x1 < x2 ? x1 : x2;
    var south = y1 < y2 ? y1 : y2;
    var east = x1 > x2 ? x1 : x2;
    var north = y1 > y2 ? y1 : y2;
    return [west, south, east, north];
  }

  var js$2 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    /**
     * @module helpers
     */

    /**
     * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.
     *
     * @memberof helpers
     * @type {number}
     */

    exports.earthRadius = 6371008.8;
    /**
     * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.
     *
     * @memberof helpers
     * @type {Object}
     */

    exports.factors = {
      centimeters: exports.earthRadius * 100,
      centimetres: exports.earthRadius * 100,
      degrees: exports.earthRadius / 111325,
      feet: exports.earthRadius * 3.28084,
      inches: exports.earthRadius * 39.37,
      kilometers: exports.earthRadius / 1000,
      kilometres: exports.earthRadius / 1000,
      meters: exports.earthRadius,
      metres: exports.earthRadius,
      miles: exports.earthRadius / 1609.344,
      millimeters: exports.earthRadius * 1000,
      millimetres: exports.earthRadius * 1000,
      nauticalmiles: exports.earthRadius / 1852,
      radians: 1,
      yards: exports.earthRadius * 1.0936
    };
    /**
     * Units of measurement factors based on 1 meter.
     *
     * @memberof helpers
     * @type {Object}
     */

    exports.unitsFactors = {
      centimeters: 100,
      centimetres: 100,
      degrees: 1 / 111325,
      feet: 3.28084,
      inches: 39.37,
      kilometers: 1 / 1000,
      kilometres: 1 / 1000,
      meters: 1,
      metres: 1,
      miles: 1 / 1609.344,
      millimeters: 1000,
      millimetres: 1000,
      nauticalmiles: 1 / 1852,
      radians: 1 / exports.earthRadius,
      yards: 1.0936133
    };
    /**
     * Area of measurement factors based on 1 square meter.
     *
     * @memberof helpers
     * @type {Object}
     */

    exports.areaFactors = {
      acres: 0.000247105,
      centimeters: 10000,
      centimetres: 10000,
      feet: 10.763910417,
      hectares: 0.0001,
      inches: 1550.003100006,
      kilometers: 0.000001,
      kilometres: 0.000001,
      meters: 1,
      metres: 1,
      miles: 3.86e-7,
      millimeters: 1000000,
      millimetres: 1000000,
      yards: 1.195990046
    };
    /**
     * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.
     *
     * @name feature
     * @param {Geometry} geometry input geometry
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {Feature} a GeoJSON Feature
     * @example
     * var geometry = {
     *   "type": "Point",
     *   "coordinates": [110, 50]
     * };
     *
     * var feature = turf.feature(geometry);
     *
     * //=feature
     */

    function feature(geom, properties, options) {
      if (options === void 0) {
        options = {};
      }

      var feat = {
        type: "Feature"
      };

      if (options.id === 0 || options.id) {
        feat.id = options.id;
      }

      if (options.bbox) {
        feat.bbox = options.bbox;
      }

      feat.properties = properties || {};
      feat.geometry = geom;
      return feat;
    }

    exports.feature = feature;
    /**
     * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.
     * For GeometryCollection type use `helpers.geometryCollection`
     *
     * @name geometry
     * @param {string} type Geometry Type
     * @param {Array<any>} coordinates Coordinates
     * @param {Object} [options={}] Optional Parameters
     * @returns {Geometry} a GeoJSON Geometry
     * @example
     * var type = "Point";
     * var coordinates = [110, 50];
     * var geometry = turf.geometry(type, coordinates);
     * // => geometry
     */

    function geometry(type, coordinates, _options) {

      switch (type) {
        case "Point":
          return point(coordinates).geometry;

        case "LineString":
          return lineString(coordinates).geometry;

        case "Polygon":
          return polygon(coordinates).geometry;

        case "MultiPoint":
          return multiPoint(coordinates).geometry;

        case "MultiLineString":
          return multiLineString(coordinates).geometry;

        case "MultiPolygon":
          return multiPolygon(coordinates).geometry;

        default:
          throw new Error(type + " is invalid");
      }
    }

    exports.geometry = geometry;
    /**
     * Creates a {@link Point} {@link Feature} from a Position.
     *
     * @name point
     * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {Feature<Point>} a Point feature
     * @example
     * var point = turf.point([-75.343, 39.984]);
     *
     * //=point
     */

    function point(coordinates, properties, options) {
      if (options === void 0) {
        options = {};
      }

      if (!coordinates) {
        throw new Error("coordinates is required");
      }

      if (!Array.isArray(coordinates)) {
        throw new Error("coordinates must be an Array");
      }

      if (coordinates.length < 2) {
        throw new Error("coordinates must be at least 2 numbers long");
      }

      if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {
        throw new Error("coordinates must contain numbers");
      }

      var geom = {
        type: "Point",
        coordinates: coordinates
      };
      return feature(geom, properties, options);
    }

    exports.point = point;
    /**
     * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.
     *
     * @name points
     * @param {Array<Array<number>>} coordinates an array of Points
     * @param {Object} [properties={}] Translate these properties to each Feature
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]
     * associated with the FeatureCollection
     * @param {string|number} [options.id] Identifier associated with the FeatureCollection
     * @returns {FeatureCollection<Point>} Point Feature
     * @example
     * var points = turf.points([
     *   [-75, 39],
     *   [-80, 45],
     *   [-78, 50]
     * ]);
     *
     * //=points
     */

    function points(coordinates, properties, options) {
      if (options === void 0) {
        options = {};
      }

      return featureCollection(coordinates.map(function (coords) {
        return point(coords, properties);
      }), options);
    }

    exports.points = points;
    /**
     * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.
     *
     * @name polygon
     * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {Feature<Polygon>} Polygon Feature
     * @example
     * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });
     *
     * //=polygon
     */

    function polygon(coordinates, properties, options) {
      if (options === void 0) {
        options = {};
      }

      for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {
        var ring = coordinates_1[_i];

        if (ring.length < 4) {
          throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");
        }

        for (var j = 0; j < ring[ring.length - 1].length; j++) {
          // Check if first point of Polygon contains two numbers
          if (ring[ring.length - 1][j] !== ring[0][j]) {
            throw new Error("First and last Position are not equivalent.");
          }
        }
      }

      var geom = {
        type: "Polygon",
        coordinates: coordinates
      };
      return feature(geom, properties, options);
    }

    exports.polygon = polygon;
    /**
     * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.
     *
     * @name polygons
     * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the FeatureCollection
     * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection
     * @example
     * var polygons = turf.polygons([
     *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],
     *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],
     * ]);
     *
     * //=polygons
     */

    function polygons(coordinates, properties, options) {
      if (options === void 0) {
        options = {};
      }

      return featureCollection(coordinates.map(function (coords) {
        return polygon(coords, properties);
      }), options);
    }

    exports.polygons = polygons;
    /**
     * Creates a {@link LineString} {@link Feature} from an Array of Positions.
     *
     * @name lineString
     * @param {Array<Array<number>>} coordinates an array of Positions
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {Feature<LineString>} LineString Feature
     * @example
     * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});
     * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});
     *
     * //=linestring1
     * //=linestring2
     */

    function lineString(coordinates, properties, options) {
      if (options === void 0) {
        options = {};
      }

      if (coordinates.length < 2) {
        throw new Error("coordinates must be an array of two or more positions");
      }

      var geom = {
        type: "LineString",
        coordinates: coordinates
      };
      return feature(geom, properties, options);
    }

    exports.lineString = lineString;
    /**
     * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.
     *
     * @name lineStrings
     * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]
     * associated with the FeatureCollection
     * @param {string|number} [options.id] Identifier associated with the FeatureCollection
     * @returns {FeatureCollection<LineString>} LineString FeatureCollection
     * @example
     * var linestrings = turf.lineStrings([
     *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],
     *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]
     * ]);
     *
     * //=linestrings
     */

    function lineStrings(coordinates, properties, options) {
      if (options === void 0) {
        options = {};
      }

      return featureCollection(coordinates.map(function (coords) {
        return lineString(coords, properties);
      }), options);
    }

    exports.lineStrings = lineStrings;
    /**
     * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.
     *
     * @name featureCollection
     * @param {Feature[]} features input features
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {FeatureCollection} FeatureCollection of Features
     * @example
     * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});
     * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});
     * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});
     *
     * var collection = turf.featureCollection([
     *   locationA,
     *   locationB,
     *   locationC
     * ]);
     *
     * //=collection
     */

    function featureCollection(features, options) {
      if (options === void 0) {
        options = {};
      }

      var fc = {
        type: "FeatureCollection"
      };

      if (options.id) {
        fc.id = options.id;
      }

      if (options.bbox) {
        fc.bbox = options.bbox;
      }

      fc.features = features;
      return fc;
    }

    exports.featureCollection = featureCollection;
    /**
     * Creates a {@link Feature<MultiLineString>} based on a
     * coordinate array. Properties can be added optionally.
     *
     * @name multiLineString
     * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {Feature<MultiLineString>} a MultiLineString feature
     * @throws {Error} if no coordinates are passed
     * @example
     * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);
     *
     * //=multiLine
     */

    function multiLineString(coordinates, properties, options) {
      if (options === void 0) {
        options = {};
      }

      var geom = {
        type: "MultiLineString",
        coordinates: coordinates
      };
      return feature(geom, properties, options);
    }

    exports.multiLineString = multiLineString;
    /**
     * Creates a {@link Feature<MultiPoint>} based on a
     * coordinate array. Properties can be added optionally.
     *
     * @name multiPoint
     * @param {Array<Array<number>>} coordinates an array of Positions
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {Feature<MultiPoint>} a MultiPoint feature
     * @throws {Error} if no coordinates are passed
     * @example
     * var multiPt = turf.multiPoint([[0,0],[10,10]]);
     *
     * //=multiPt
     */

    function multiPoint(coordinates, properties, options) {
      if (options === void 0) {
        options = {};
      }

      var geom = {
        type: "MultiPoint",
        coordinates: coordinates
      };
      return feature(geom, properties, options);
    }

    exports.multiPoint = multiPoint;
    /**
     * Creates a {@link Feature<MultiPolygon>} based on a
     * coordinate array. Properties can be added optionally.
     *
     * @name multiPolygon
     * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {Feature<MultiPolygon>} a multipolygon feature
     * @throws {Error} if no coordinates are passed
     * @example
     * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);
     *
     * //=multiPoly
     *
     */

    function multiPolygon(coordinates, properties, options) {
      if (options === void 0) {
        options = {};
      }

      var geom = {
        type: "MultiPolygon",
        coordinates: coordinates
      };
      return feature(geom, properties, options);
    }

    exports.multiPolygon = multiPolygon;
    /**
     * Creates a {@link Feature<GeometryCollection>} based on a
     * coordinate array. Properties can be added optionally.
     *
     * @name geometryCollection
     * @param {Array<Geometry>} geometries an array of GeoJSON Geometries
     * @param {Object} [properties={}] an Object of key-value pairs to add as properties
     * @param {Object} [options={}] Optional Parameters
     * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
     * @param {string|number} [options.id] Identifier associated with the Feature
     * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature
     * @example
     * var pt = turf.geometry("Point", [100, 0]);
     * var line = turf.geometry("LineString", [[101, 0], [102, 1]]);
     * var collection = turf.geometryCollection([pt, line]);
     *
     * // => collection
     */

    function geometryCollection(geometries, properties, options) {
      if (options === void 0) {
        options = {};
      }

      var geom = {
        type: "GeometryCollection",
        geometries: geometries
      };
      return feature(geom, properties, options);
    }

    exports.geometryCollection = geometryCollection;
    /**
     * Round number to precision
     *
     * @param {number} num Number
     * @param {number} [precision=0] Precision
     * @returns {number} rounded number
     * @example
     * turf.round(120.4321)
     * //=120
     *
     * turf.round(120.4321, 2)
     * //=120.43
     */

    function round(num, precision) {
      if (precision === void 0) {
        precision = 0;
      }

      if (precision && !(precision >= 0)) {
        throw new Error("precision must be a positive number");
      }

      var multiplier = Math.pow(10, precision || 0);
      return Math.round(num * multiplier) / multiplier;
    }

    exports.round = round;
    /**
     * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.
     * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
     *
     * @name radiansToLength
     * @param {number} radians in radians across the sphere
     * @param {string} [units="kilometers"] can be degrees, radians, miles, inches, yards, metres,
     * meters, kilometres, kilometers.
     * @returns {number} distance
     */

    function radiansToLength(radians, units) {
      if (units === void 0) {
        units = "kilometers";
      }

      var factor = exports.factors[units];

      if (!factor) {
        throw new Error(units + " units is invalid");
      }

      return radians * factor;
    }

    exports.radiansToLength = radiansToLength;
    /**
     * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians
     * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
     *
     * @name lengthToRadians
     * @param {number} distance in real units
     * @param {string} [units="kilometers"] can be degrees, radians, miles, inches, yards, metres,
     * meters, kilometres, kilometers.
     * @returns {number} radians
     */

    function lengthToRadians(distance, units) {
      if (units === void 0) {
        units = "kilometers";
      }

      var factor = exports.factors[units];

      if (!factor) {
        throw new Error(units + " units is invalid");
      }

      return distance / factor;
    }

    exports.lengthToRadians = lengthToRadians;
    /**
     * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees
     * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet
     *
     * @name lengthToDegrees
     * @param {number} distance in real units
     * @param {string} [units="kilometers"] can be degrees, radians, miles, inches, yards, metres,
     * meters, kilometres, kilometers.
     * @returns {number} degrees
     */

    function lengthToDegrees(distance, units) {
      return radiansToDegrees(lengthToRadians(distance, units));
    }

    exports.lengthToDegrees = lengthToDegrees;
    /**
     * Converts any bearing angle from the north line direction (positive clockwise)
     * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line
     *
     * @name bearingToAzimuth
     * @param {number} bearing angle, between -180 and +180 degrees
     * @returns {number} angle between 0 and 360 degrees
     */

    function bearingToAzimuth(bearing) {
      var angle = bearing % 360;

      if (angle < 0) {
        angle += 360;
      }

      return angle;
    }

    exports.bearingToAzimuth = bearingToAzimuth;
    /**
     * Converts an angle in radians to degrees
     *
     * @name radiansToDegrees
     * @param {number} radians angle in radians
     * @returns {number} degrees between 0 and 360 degrees
     */

    function radiansToDegrees(radians) {
      var degrees = radians % (2 * Math.PI);
      return degrees * 180 / Math.PI;
    }

    exports.radiansToDegrees = radiansToDegrees;
    /**
     * Converts an angle in degrees to radians
     *
     * @name degreesToRadians
     * @param {number} degrees angle between 0 and 360 degrees
     * @returns {number} angle in radians
     */

    function degreesToRadians(degrees) {
      var radians = degrees % 360;
      return radians * Math.PI / 180;
    }

    exports.degreesToRadians = degreesToRadians;
    /**
     * Converts a length to the requested unit.
     * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
     *
     * @param {number} length to be converted
     * @param {Units} [originalUnit="kilometers"] of the length
     * @param {Units} [finalUnit="kilometers"] returned unit
     * @returns {number} the converted length
     */

    function convertLength(length, originalUnit, finalUnit) {
      if (originalUnit === void 0) {
        originalUnit = "kilometers";
      }

      if (finalUnit === void 0) {
        finalUnit = "kilometers";
      }

      if (!(length >= 0)) {
        throw new Error("length must be a positive number");
      }

      return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);
    }

    exports.convertLength = convertLength;
    /**
     * Converts a area to the requested unit.
     * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares
     * @param {number} area to be converted
     * @param {Units} [originalUnit="meters"] of the distance
     * @param {Units} [finalUnit="kilometers"] returned unit
     * @returns {number} the converted area
     */

    function convertArea(area, originalUnit, finalUnit) {
      if (originalUnit === void 0) {
        originalUnit = "meters";
      }

      if (finalUnit === void 0) {
        finalUnit = "kilometers";
      }

      if (!(area >= 0)) {
        throw new Error("area must be a positive number");
      }

      var startFactor = exports.areaFactors[originalUnit];

      if (!startFactor) {
        throw new Error("invalid original units");
      }

      var finalFactor = exports.areaFactors[finalUnit];

      if (!finalFactor) {
        throw new Error("invalid final units");
      }

      return area / startFactor * finalFactor;
    }

    exports.convertArea = convertArea;
    /**
     * isNumber
     *
     * @param {*} num Number to validate
     * @returns {boolean} true/false
     * @example
     * turf.isNumber(123)
     * //=true
     * turf.isNumber('foo')
     * //=false
     */

    function isNumber(num) {
      return !isNaN(num) && num !== null && !Array.isArray(num);
    }

    exports.isNumber = isNumber;
    /**
     * isObject
     *
     * @param {*} input variable to validate
     * @returns {boolean} true/false
     * @example
     * turf.isObject({elevation: 10})
     * //=true
     * turf.isObject('foo')
     * //=false
     */

    function isObject(input) {
      return !!input && input.constructor === Object;
    }

    exports.isObject = isObject;
    /**
     * Validate BBox
     *
     * @private
     * @param {Array<number>} bbox BBox to validate
     * @returns {void}
     * @throws Error if BBox is not valid
     * @example
     * validateBBox([-180, -40, 110, 50])
     * //=OK
     * validateBBox([-180, -40])
     * //=Error
     * validateBBox('Foo')
     * //=Error
     * validateBBox(5)
     * //=Error
     * validateBBox(null)
     * //=Error
     * validateBBox(undefined)
     * //=Error
     */

    function validateBBox(bbox) {
      if (!bbox) {
        throw new Error("bbox is required");
      }

      if (!Array.isArray(bbox)) {
        throw new Error("bbox must be an Array");
      }

      if (bbox.length !== 4 && bbox.length !== 6) {
        throw new Error("bbox must be an Array of 4 or 6 numbers");
      }

      bbox.forEach(function (num) {
        if (!isNumber(num)) {
          throw new Error("bbox must only contain numbers");
        }
      });
    }

    exports.validateBBox = validateBBox;
    /**
     * Validate Id
     *
     * @private
     * @param {string|number} id Id to validate
     * @returns {void}
     * @throws Error if Id is not valid
     * @example
     * validateId([-180, -40, 110, 50])
     * //=Error
     * validateId([-180, -40])
     * //=Error
     * validateId('Foo')
     * //=OK
     * validateId(5)
     * //=OK
     * validateId(null)
     * //=Error
     * validateId(undefined)
     * //=Error
     */

    function validateId(id) {
      if (!id) {
        throw new Error("id is required");
      }

      if (["string", "number"].indexOf(_typeof(id)) === -1) {
        throw new Error("id must be a number or a string");
      }
    }

    exports.validateId = validateId;
  });

  /**
   * Callback for coordEach
   *
   * @callback coordEachCallback
   * @param {Array<number>} currentCoord The current coordinate being processed.
   * @param {number} coordIndex The current index of the coordinate being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   * @param {number} geometryIndex The current index of the Geometry being processed.
   */

  /**
   * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
   *
   * @name coordEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)
   * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {"foo": "bar"}),
   *   turf.point([36, 53], {"hello": "world"})
   * ]);
   *
   * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
   *   //=currentCoord
   *   //=coordIndex
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   * });
   */


  function coordEach(geojson, callback, excludeWrapCoord) {
    // Handles null Geometry -- Skips this GeoJSON
    if (geojson === null) return;
    var j,
        k,
        l,
        geometry,
        stopG,
        coords,
        geometryMaybeCollection,
        wrapShrink = 0,
        coordIndex = 0,
        isGeometryCollection,
        type = geojson.type,
        isFeatureCollection = type === "FeatureCollection",
        isFeature = type === "Feature",
        stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way
    // is because it's trying to be fast. GeoJSON supports multiple kinds
    // of objects at its root: FeatureCollection, Features, Geometries.
    // This function has the responsibility of handling all of them, and that
    // means that some of the `for` loops you see below actually just don't apply
    // to certain inputs. For instance, if you give this just a
    // Point geometry, then both loops are short-circuited and all we do
    // is gradually rename the input until it's called 'geometry'.
    //
    // This also aims to allocate as few resources as possible: just a
    // few numbers and booleans, rather than any temporary arrays as would
    // be required with the normalization approach.

    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {
      geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;
      isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === "GeometryCollection" : false;
      stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

      for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {
        var multiFeatureIndex = 0;
        var geometryIndex = 0;
        geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection; // Handles null Geometry -- Skips this geometry

        if (geometry === null) continue;
        coords = geometry.coordinates;
        var geomType = geometry.type;
        wrapShrink = excludeWrapCoord && (geomType === "Polygon" || geomType === "MultiPolygon") ? 1 : 0;

        switch (geomType) {
          case null:
            break;

          case "Point":
            if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
            coordIndex++;
            multiFeatureIndex++;
            break;

          case "LineString":
          case "MultiPoint":
            for (j = 0; j < coords.length; j++) {
              if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
              coordIndex++;
              if (geomType === "MultiPoint") multiFeatureIndex++;
            }

            if (geomType === "LineString") multiFeatureIndex++;
            break;

          case "Polygon":
          case "MultiLineString":
            for (j = 0; j < coords.length; j++) {
              for (k = 0; k < coords[j].length - wrapShrink; k++) {
                if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                coordIndex++;
              }

              if (geomType === "MultiLineString") multiFeatureIndex++;
              if (geomType === "Polygon") geometryIndex++;
            }

            if (geomType === "Polygon") multiFeatureIndex++;
            break;

          case "MultiPolygon":
            for (j = 0; j < coords.length; j++) {
              geometryIndex = 0;

              for (k = 0; k < coords[j].length; k++) {
                for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                  if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
                  coordIndex++;
                }

                geometryIndex++;
              }

              multiFeatureIndex++;
            }

            break;

          case "GeometryCollection":
            for (j = 0; j < geometry.geometries.length; j++) {
              if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;
            }

            break;

          default:
            throw new Error("Unknown Geometry Type");
        }
      }
    }
  }
  /**
   * Callback for coordReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback coordReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Array<number>} currentCoord The current coordinate being processed.
   * @param {number} coordIndex The current index of the coordinate being processed.
   * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   * @param {number} geometryIndex The current index of the Geometry being processed.
   */

  /**
   * Reduce coordinates in any GeoJSON object, similar to Array.reduce()
   *
   * @name coordReduce
   * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {"foo": "bar"}),
   *   turf.point([36, 53], {"hello": "world"})
   * ]);
   *
   * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
   *   //=previousValue
   *   //=currentCoord
   *   //=coordIndex
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   *   return currentCoord;
   * });
   */


  function coordReduce(geojson, callback, initialValue, excludeWrapCoord) {
    var previousValue = initialValue;
    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
      if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);
    }, excludeWrapCoord);
    return previousValue;
  }
  /**
   * Callback for propEach
   *
   * @callback propEachCallback
   * @param {Object} currentProperties The current Properties being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   */

  /**
   * Iterate over properties in any GeoJSON object, similar to Array.forEach()
   *
   * @name propEach
   * @param {FeatureCollection|Feature} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentProperties, featureIndex)
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.propEach(features, function (currentProperties, featureIndex) {
   *   //=currentProperties
   *   //=featureIndex
   * });
   */


  function propEach(geojson, callback) {
    var i;

    switch (geojson.type) {
      case "FeatureCollection":
        for (i = 0; i < geojson.features.length; i++) {
          if (callback(geojson.features[i].properties, i) === false) break;
        }

        break;

      case "Feature":
        callback(geojson.properties, 0);
        break;
    }
  }
  /**
   * Callback for propReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback propReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {*} currentProperties The current Properties being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   */

  /**
   * Reduce properties in any GeoJSON object into a single value,
   * similar to how Array.reduce works. However, in this case we lazily run
   * the reduction, so an array of all properties is unnecessary.
   *
   * @name propReduce
   * @param {FeatureCollection|Feature} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {
   *   //=previousValue
   *   //=currentProperties
   *   //=featureIndex
   *   return currentProperties
   * });
   */


  function propReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    propEach(geojson, function (currentProperties, featureIndex) {
      if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;else previousValue = callback(previousValue, currentProperties, featureIndex);
    });
    return previousValue;
  }
  /**
   * Callback for featureEach
   *
   * @callback featureEachCallback
   * @param {Feature<any>} currentFeature The current Feature being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   */

  /**
   * Iterate over features in any GeoJSON object, similar to
   * Array.forEach.
   *
   * @name featureEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentFeature, featureIndex)
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {foo: 'bar'}),
   *   turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.featureEach(features, function (currentFeature, featureIndex) {
   *   //=currentFeature
   *   //=featureIndex
   * });
   */


  function featureEach$1(geojson, callback) {
    if (geojson.type === "Feature") {
      callback(geojson, 0);
    } else if (geojson.type === "FeatureCollection") {
      for (var i = 0; i < geojson.features.length; i++) {
        if (callback(geojson.features[i], i) === false) break;
      }
    }
  }
  /**
   * Callback for featureReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback featureReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Feature} currentFeature The current Feature being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   */

  /**
   * Reduce features in any GeoJSON object, similar to Array.reduce().
   *
   * @name featureReduce
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {"foo": "bar"}),
   *   turf.point([36, 53], {"hello": "world"})
   * ]);
   *
   * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {
   *   //=previousValue
   *   //=currentFeature
   *   //=featureIndex
   *   return currentFeature
   * });
   */


  function featureReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    featureEach$1(geojson, function (currentFeature, featureIndex) {
      if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex);
    });
    return previousValue;
  }
  /**
   * Get all coordinates from any GeoJSON object.
   *
   * @name coordAll
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @returns {Array<Array<number>>} coordinate position array
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {foo: 'bar'}),
   *   turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * var coords = turf.coordAll(features);
   * //= [[26, 37], [36, 53]]
   */


  function coordAll(geojson) {
    var coords = [];
    coordEach(geojson, function (coord) {
      coords.push(coord);
    });
    return coords;
  }
  /**
   * Callback for geomEach
   *
   * @callback geomEachCallback
   * @param {Geometry} currentGeometry The current Geometry being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {Object} featureProperties The current Feature Properties being processed.
   * @param {Array<number>} featureBBox The current Feature BBox being processed.
   * @param {number|string} featureId The current Feature Id being processed.
   */

  /**
   * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
   *
   * @name geomEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
   *   //=currentGeometry
   *   //=featureIndex
   *   //=featureProperties
   *   //=featureBBox
   *   //=featureId
   * });
   */


  function geomEach(geojson, callback) {
    var i,
        j,
        g,
        geometry,
        stopG,
        geometryMaybeCollection,
        isGeometryCollection,
        featureProperties,
        featureBBox,
        featureId,
        featureIndex = 0,
        isFeatureCollection = geojson.type === "FeatureCollection",
        isFeature = geojson.type === "Feature",
        stop = isFeatureCollection ? geojson.features.length : 1; // This logic may look a little weird. The reason why it is that way
    // is because it's trying to be fast. GeoJSON supports multiple kinds
    // of objects at its root: FeatureCollection, Features, Geometries.
    // This function has the responsibility of handling all of them, and that
    // means that some of the `for` loops you see below actually just don't apply
    // to certain inputs. For instance, if you give this just a
    // Point geometry, then both loops are short-circuited and all we do
    // is gradually rename the input until it's called 'geometry'.
    //
    // This also aims to allocate as few resources as possible: just a
    // few numbers and booleans, rather than any temporary arrays as would
    // be required with the normalization approach.

    for (i = 0; i < stop; i++) {
      geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;
      featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};
      featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : undefined;
      featureId = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : undefined;
      isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === "GeometryCollection" : false;
      stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;

      for (g = 0; g < stopG; g++) {
        geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection; // Handle null Geometry

        if (geometry === null) {
          if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
          continue;
        }

        switch (geometry.type) {
          case "Point":
          case "LineString":
          case "MultiPoint":
          case "Polygon":
          case "MultiLineString":
          case "MultiPolygon":
            {
              if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;
              break;
            }

          case "GeometryCollection":
            {
              for (j = 0; j < geometry.geometries.length; j++) {
                if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;
              }

              break;
            }

          default:
            throw new Error("Unknown Geometry Type");
        }
      } // Only increase `featureIndex` per each feature


      featureIndex++;
    }
  }
  /**
   * Callback for geomReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback geomReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Geometry} currentGeometry The current Geometry being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {Object} featureProperties The current Feature Properties being processed.
   * @param {Array<number>} featureBBox The current Feature BBox being processed.
   * @param {number|string} featureId The current Feature Id being processed.
   */

  /**
   * Reduce geometry in any GeoJSON object, similar to Array.reduce().
   *
   * @name geomReduce
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
   *   //=previousValue
   *   //=currentGeometry
   *   //=featureIndex
   *   //=featureProperties
   *   //=featureBBox
   *   //=featureId
   *   return currentGeometry
   * });
   */


  function geomReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
      if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);
    });
    return previousValue;
  }
  /**
   * Callback for flattenEach
   *
   * @callback flattenEachCallback
   * @param {Feature} currentFeature The current flattened feature being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   */

  /**
   * Iterate over flattened features in any GeoJSON object, similar to
   * Array.forEach.
   *
   * @name flattenEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
   * ]);
   *
   * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {
   *   //=currentFeature
   *   //=featureIndex
   *   //=multiFeatureIndex
   * });
   */


  function flattenEach(geojson, callback) {
    geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {
      // Callback for single geometry
      var type = geometry === null ? null : geometry.type;

      switch (type) {
        case null:
        case "Point":
        case "LineString":
        case "Polygon":
          if (callback(js$2.feature(geometry, properties, {
            bbox: bbox,
            id: id
          }), featureIndex, 0) === false) return false;
          return;
      }

      var geomType; // Callback for multi-geometry

      switch (type) {
        case "MultiPoint":
          geomType = "Point";
          break;

        case "MultiLineString":
          geomType = "LineString";
          break;

        case "MultiPolygon":
          geomType = "Polygon";
          break;
      }

      for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {
        var coordinate = geometry.coordinates[multiFeatureIndex];
        var geom = {
          type: geomType,
          coordinates: coordinate
        };
        if (callback(js$2.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;
      }
    });
  }
  /**
   * Callback for flattenReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback flattenReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Feature} currentFeature The current Feature being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   */

  /**
   * Reduce flattened features in any GeoJSON object, similar to Array.reduce().
   *
   * @name flattenReduce
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
   * ]);
   *
   * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {
   *   //=previousValue
   *   //=currentFeature
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   return currentFeature
   * });
   */


  function flattenReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {
      if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);
    });
    return previousValue;
  }
  /**
   * Callback for segmentEach
   *
   * @callback segmentEachCallback
   * @param {Feature<LineString>} currentSegment The current Segment being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   * @param {number} geometryIndex The current index of the Geometry being processed.
   * @param {number} segmentIndex The current index of the Segment being processed.
   * @returns {void}
   */

  /**
   * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()
   * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
   *
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
   * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)
   * @returns {void}
   * @example
   * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
   *
   * // Iterate over GeoJSON by 2-vertex segments
   * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
   *   //=currentSegment
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   *   //=segmentIndex
   * });
   *
   * // Calculate the total number of segments
   * var total = 0;
   * turf.segmentEach(polygon, function () {
   *     total++;
   * });
   */


  function segmentEach(geojson, callback) {
    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
      var segmentIndex = 0; // Exclude null Geometries

      if (!feature.geometry) return; // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.

      var type = feature.geometry.type;
      if (type === "Point" || type === "MultiPoint") return; // Generate 2-vertex line segments

      var previousCoords;
      var previousFeatureIndex = 0;
      var previousMultiIndex = 0;
      var prevGeomIndex = 0;
      if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {
        // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`
        if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {
          previousCoords = currentCoord;
          previousFeatureIndex = featureIndex;
          previousMultiIndex = multiPartIndexCoord;
          prevGeomIndex = geometryIndex;
          segmentIndex = 0;
          return;
        }

        var currentSegment = js$2.lineString([previousCoords, currentCoord], feature.properties);
        if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;
        segmentIndex++;
        previousCoords = currentCoord;
      }) === false) return false;
    });
  }
  /**
   * Callback for segmentReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback segmentReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Feature<LineString>} currentSegment The current Segment being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   * @param {number} geometryIndex The current index of the Geometry being processed.
   * @param {number} segmentIndex The current index of the Segment being processed.
   */

  /**
   * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()
   * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
   *
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
   * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {void}
   * @example
   * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
   *
   * // Iterate over GeoJSON by 2-vertex segments
   * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
   *   //= previousSegment
   *   //= currentSegment
   *   //= featureIndex
   *   //= multiFeatureIndex
   *   //= geometryIndex
   *   //= segmentIndex
   *   return currentSegment
   * });
   *
   * // Calculate the total number of segments
   * var initialValue = 0
   * var total = turf.segmentReduce(polygon, function (previousValue) {
   *     previousValue++;
   *     return previousValue;
   * }, initialValue);
   */


  function segmentReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    var started = false;
    segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
      if (started === false && initialValue === undefined) previousValue = currentSegment;else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);
      started = true;
    });
    return previousValue;
  }
  /**
   * Callback for lineEach
   *
   * @callback lineEachCallback
   * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed
   * @param {number} featureIndex The current index of the Feature being processed
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
   * @param {number} geometryIndex The current index of the Geometry being processed
   */

  /**
   * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,
   * similar to Array.forEach.
   *
   * @name lineEach
   * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
   * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)
   * @example
   * var multiLine = turf.multiLineString([
   *   [[26, 37], [35, 45]],
   *   [[36, 53], [38, 50], [41, 55]]
   * ]);
   *
   * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
   *   //=currentLine
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   * });
   */


  function lineEach(geojson, callback) {
    // validation
    if (!geojson) throw new Error("geojson is required");
    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
      if (feature.geometry === null) return;
      var type = feature.geometry.type;
      var coords = feature.geometry.coordinates;

      switch (type) {
        case "LineString":
          if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;
          break;

        case "Polygon":
          for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {
            if (callback(js$2.lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;
          }

          break;
      }
    });
  }
  /**
   * Callback for lineReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback lineReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.
   * @param {number} featureIndex The current index of the Feature being processed
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
   * @param {number} geometryIndex The current index of the Geometry being processed
   */

  /**
   * Reduce features in any GeoJSON object, similar to Array.reduce().
   *
   * @name lineReduce
   * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
   * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var multiPoly = turf.multiPolygon([
   *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),
   *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])
   * ]);
   *
   * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
   *   //=previousValue
   *   //=currentLine
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   *   return currentLine
   * });
   */


  function lineReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
      if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);
    });
    return previousValue;
  }
  /**
   * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.
   *
   * Negative indexes are permitted.
   * Point & MultiPoint will always return null.
   *
   * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.featureIndex=0] Feature Index
   * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
   * @param {number} [options.geometryIndex=0] Geometry Index
   * @param {number} [options.segmentIndex=0] Segment Index
   * @param {Object} [options.properties={}] Translate Properties to output LineString
   * @param {BBox} [options.bbox={}] Translate BBox to output LineString
   * @param {number|string} [options.id={}] Translate Id to output LineString
   * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString
   * @example
   * var multiLine = turf.multiLineString([
   *     [[10, 10], [50, 30], [30, 40]],
   *     [[-10, -10], [-50, -30], [-30, -40]]
   * ]);
   *
   * // First Segment (defaults are 0)
   * turf.findSegment(multiLine);
   * // => Feature<LineString<[[10, 10], [50, 30]]>>
   *
   * // First Segment of 2nd Multi Feature
   * turf.findSegment(multiLine, {multiFeatureIndex: 1});
   * // => Feature<LineString<[[-10, -10], [-50, -30]]>>
   *
   * // Last Segment of Last Multi Feature
   * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});
   * // => Feature<LineString<[[-50, -30], [-30, -40]]>>
   */


  function findSegment(geojson, options) {
    // Optional Parameters
    options = options || {};
    if (!js$2.isObject(options)) throw new Error("options is invalid");
    var featureIndex = options.featureIndex || 0;
    var multiFeatureIndex = options.multiFeatureIndex || 0;
    var geometryIndex = options.geometryIndex || 0;
    var segmentIndex = options.segmentIndex || 0; // Find FeatureIndex

    var properties = options.properties;
    var geometry;

    switch (geojson.type) {
      case "FeatureCollection":
        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
        properties = properties || geojson.features[featureIndex].properties;
        geometry = geojson.features[featureIndex].geometry;
        break;

      case "Feature":
        properties = properties || geojson.properties;
        geometry = geojson.geometry;
        break;

      case "Point":
      case "MultiPoint":
        return null;

      case "LineString":
      case "Polygon":
      case "MultiLineString":
      case "MultiPolygon":
        geometry = geojson;
        break;

      default:
        throw new Error("geojson is invalid");
    } // Find SegmentIndex


    if (geometry === null) return null;
    var coords = geometry.coordinates;

    switch (geometry.type) {
      case "Point":
      case "MultiPoint":
        return null;

      case "LineString":
        if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;
        return js$2.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);

      case "Polygon":
        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
        if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;
        return js$2.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);

      case "MultiLineString":
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;
        return js$2.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);

      case "MultiPolygon":
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;
        return js$2.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);
    }

    throw new Error("geojson is invalid");
  }
  /**
   * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.
   *
   * Negative indexes are permitted.
   *
   * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.featureIndex=0] Feature Index
   * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
   * @param {number} [options.geometryIndex=0] Geometry Index
   * @param {number} [options.coordIndex=0] Coord Index
   * @param {Object} [options.properties={}] Translate Properties to output Point
   * @param {BBox} [options.bbox={}] Translate BBox to output Point
   * @param {number|string} [options.id={}] Translate Id to output Point
   * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point
   * @example
   * var multiLine = turf.multiLineString([
   *     [[10, 10], [50, 30], [30, 40]],
   *     [[-10, -10], [-50, -30], [-30, -40]]
   * ]);
   *
   * // First Segment (defaults are 0)
   * turf.findPoint(multiLine);
   * // => Feature<Point<[10, 10]>>
   *
   * // First Segment of the 2nd Multi-Feature
   * turf.findPoint(multiLine, {multiFeatureIndex: 1});
   * // => Feature<Point<[-10, -10]>>
   *
   * // Last Segment of last Multi-Feature
   * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});
   * // => Feature<Point<[-30, -40]>>
   */


  function findPoint(geojson, options) {
    // Optional Parameters
    options = options || {};
    if (!js$2.isObject(options)) throw new Error("options is invalid");
    var featureIndex = options.featureIndex || 0;
    var multiFeatureIndex = options.multiFeatureIndex || 0;
    var geometryIndex = options.geometryIndex || 0;
    var coordIndex = options.coordIndex || 0; // Find FeatureIndex

    var properties = options.properties;
    var geometry;

    switch (geojson.type) {
      case "FeatureCollection":
        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;
        properties = properties || geojson.features[featureIndex].properties;
        geometry = geojson.features[featureIndex].geometry;
        break;

      case "Feature":
        properties = properties || geojson.properties;
        geometry = geojson.geometry;
        break;

      case "Point":
      case "MultiPoint":
        return null;

      case "LineString":
      case "Polygon":
      case "MultiLineString":
      case "MultiPolygon":
        geometry = geojson;
        break;

      default:
        throw new Error("geojson is invalid");
    } // Find Coord Index


    if (geometry === null) return null;
    var coords = geometry.coordinates;

    switch (geometry.type) {
      case "Point":
        return js$2.point(coords, properties, options);

      case "MultiPoint":
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        return js$2.point(coords[multiFeatureIndex], properties, options);

      case "LineString":
        if (coordIndex < 0) coordIndex = coords.length + coordIndex;
        return js$2.point(coords[coordIndex], properties, options);

      case "Polygon":
        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
        if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;
        return js$2.point(coords[geometryIndex][coordIndex], properties, options);

      case "MultiLineString":
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;
        return js$2.point(coords[multiFeatureIndex][coordIndex], properties, options);

      case "MultiPolygon":
        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;
        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;
        return js$2.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);
    }

    throw new Error("geojson is invalid");
  }

  var coordAll_1 = coordAll;
  var coordEach_1 = coordEach;
  var coordReduce_1 = coordReduce;
  var featureEach_1 = featureEach$1;
  var featureReduce_1 = featureReduce;
  var findPoint_1 = findPoint;
  var findSegment_1 = findSegment;
  var flattenEach_1 = flattenEach;
  var flattenReduce_1 = flattenReduce;
  var geomEach_1 = geomEach;
  var geomReduce_1 = geomReduce;
  var lineEach_1 = lineEach;
  var lineReduce_1 = lineReduce;
  var propEach_1 = propEach;
  var propReduce_1 = propReduce;
  var segmentEach_1 = segmentEach;
  var segmentReduce_1 = segmentReduce;
  var js$1 = /*#__PURE__*/Object.defineProperty({
    coordAll: coordAll_1,
    coordEach: coordEach_1,
    coordReduce: coordReduce_1,
    featureEach: featureEach_1,
    featureReduce: featureReduce_1,
    findPoint: findPoint_1,
    findSegment: findSegment_1,
    flattenEach: flattenEach_1,
    flattenReduce: flattenReduce_1,
    geomEach: geomEach_1,
    geomReduce: geomReduce_1,
    lineEach: lineEach_1,
    lineReduce: lineReduce_1,
    propEach: propEach_1,
    propReduce: propReduce_1,
    segmentEach: segmentEach_1,
    segmentReduce: segmentReduce_1
  }, '__esModule', {
    value: true
  });

  /**
   * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.
   *
   * @name bbox
   * @param {GeoJSON} geojson any GeoJSON object
   * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order
   * @example
   * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);
   * var bbox = turf.bbox(line);
   * var bboxPolygon = turf.bboxPolygon(bbox);
   *
   * //addToMap
   * var addToMap = [line, bboxPolygon]
   */


  function bbox(geojson) {
    var result = [Infinity, Infinity, -Infinity, -Infinity];
    js$1.coordEach(geojson, function (coord) {
      if (result[0] > coord[0]) {
        result[0] = coord[0];
      }

      if (result[1] > coord[1]) {
        result[1] = coord[1];
      }

      if (result[2] < coord[0]) {
        result[2] = coord[0];
      }

      if (result[3] < coord[1]) {
        result[3] = coord[1];
      }
    });
    return result;
  }

  bbox["default"] = bbox;
  var _default$1 = bbox;
  var js = /*#__PURE__*/Object.defineProperty({
    default: _default$1
  }, '__esModule', {
    value: true
  });

  var turfBBox = js.default;
  var featureEach = js$1.featureEach;
  js$1.coordEach;
  js$2.polygon;
  var featureCollection = js$2.featureCollection;
  /**
   * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.
   *
   * @name rbush
   * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a
   * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.
   * @returns {RBush} GeoJSON RBush
   * @example
   * var geojsonRbush = require('geojson-rbush').default;
   * var tree = geojsonRbush();
   */

  function geojsonRbush(maxEntries) {
    var tree = rbush_1(maxEntries);
    /**
     * [insert](https://github.com/mourner/rbush#data-format)
     *
     * @param {Feature} feature insert single GeoJSON Feature
     * @returns {RBush} GeoJSON RBush
     * @example
     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);
     * tree.insert(poly)
     */

    tree.insert = function (feature) {
      if (feature.type !== 'Feature') throw new Error('invalid feature');
      feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
      return rbush_1.prototype.insert.call(this, feature);
    };
    /**
     * [load](https://github.com/mourner/rbush#bulk-inserting-data)
     *
     * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection
     * @returns {RBush} GeoJSON RBush
     * @example
     * var polys = turf.polygons([
     *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],
     *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]
     * ]);
     * tree.load(polys);
     */


    tree.load = function (features) {
      var load = []; // Load an Array of Features

      if (Array.isArray(features)) {
        features.forEach(function (feature) {
          if (feature.type !== 'Feature') throw new Error('invalid features');
          feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
          load.push(feature);
        });
      } else {
        // Load a FeatureCollection
        featureEach(features, function (feature) {
          if (feature.type !== 'Feature') throw new Error('invalid features');
          feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
          load.push(feature);
        });
      }

      return rbush_1.prototype.load.call(this, load);
    };
    /**
     * [remove](https://github.com/mourner/rbush#removing-data)
     *
     * @param {Feature} feature remove single GeoJSON Feature
     * @param {Function} equals Pass a custom equals function to compare by value for removal.
     * @returns {RBush} GeoJSON RBush
     * @example
     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);
     *
     * tree.remove(poly);
     */


    tree.remove = function (feature, equals) {
      if (feature.type !== 'Feature') throw new Error('invalid feature');
      feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
      return rbush_1.prototype.remove.call(this, feature, equals);
    };
    /**
     * [clear](https://github.com/mourner/rbush#removing-data)
     *
     * @returns {RBush} GeoJSON Rbush
     * @example
     * tree.clear()
     */


    tree.clear = function () {
      return rbush_1.prototype.clear.call(this);
    };
    /**
     * [search](https://github.com/mourner/rbush#search)
     *
     * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON
     * @returns {FeatureCollection} all features that intersects with the given GeoJSON.
     * @example
     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);
     *
     * tree.search(poly);
     */


    tree.search = function (geojson) {
      var features = rbush_1.prototype.search.call(this, this.toBBox(geojson));
      return featureCollection(features);
    };
    /**
     * [collides](https://github.com/mourner/rbush#collisions)
     *
     * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON
     * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.
     * @example
     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);
     *
     * tree.collides(poly);
     */


    tree.collides = function (geojson) {
      return rbush_1.prototype.collides.call(this, this.toBBox(geojson));
    };
    /**
     * [all](https://github.com/mourner/rbush#search)
     *
     * @returns {FeatureCollection} all the features in RBush
     * @example
     * tree.all()
     */


    tree.all = function () {
      var features = rbush_1.prototype.all.call(this);
      return featureCollection(features);
    };
    /**
     * [toJSON](https://github.com/mourner/rbush#export-and-import)
     *
     * @returns {any} export data as JSON object
     * @example
     * var exported = tree.toJSON()
     */


    tree.toJSON = function () {
      return rbush_1.prototype.toJSON.call(this);
    };
    /**
     * [fromJSON](https://github.com/mourner/rbush#export-and-import)
     *
     * @param {any} json import previously exported data
     * @returns {RBush} GeoJSON RBush
     * @example
     * var exported = {
     *   "children": [
     *     {
     *       "type": "Feature",
     *       "geometry": {
     *         "type": "Point",
     *         "coordinates": [110, 50]
     *       },
     *       "properties": {},
     *       "bbox": [110, 50, 110, 50]
     *     }
     *   ],
     *   "height": 1,
     *   "leaf": true,
     *   "minX": 110,
     *   "minY": 50,
     *   "maxX": 110,
     *   "maxY": 50
     * }
     * tree.fromJSON(exported)
     */


    tree.fromJSON = function (json) {
      return rbush_1.prototype.fromJSON.call(this, json);
    };
    /**
     * Converts GeoJSON to {minX, minY, maxX, maxY} schema
     *
     * @private
     * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from
     * @returns {Object} converted to {minX, minY, maxX, maxY}
     */


    tree.toBBox = function (geojson) {
      var bbox;
      if (geojson.bbox) bbox = geojson.bbox;else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];else if (geojson.type === 'Feature') bbox = turfBBox(geojson);else if (geojson.type === 'FeatureCollection') bbox = turfBBox(geojson);else throw new Error('invalid geojson');
      return {
        minX: bbox[0],
        minY: bbox[1],
        maxX: bbox[2],
        maxY: bbox[3]
      };
    };

    return tree;
  }

  var geojsonRbush_1 = geojsonRbush;
  var _default = geojsonRbush;
  geojsonRbush_1.default = _default;

  /**
   * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).
   *
   * @name lineIntersect
   * @param {GeoJSON} line1 any LineString or Polygon
   * @param {GeoJSON} line2 any LineString or Polygon
   * @returns {FeatureCollection<Point>} point(s) that intersect both
   * @example
   * var line1 = turf.lineString([[126, -11], [129, -21]]);
   * var line2 = turf.lineString([[123, -18], [131, -14]]);
   * var intersects = turf.lineIntersect(line1, line2);
   *
   * //addToMap
   * var addToMap = [line1, line2, intersects]
   */

  function lineIntersect(line1, line2) {
    var unique = {};
    var results = []; // First, normalize geometries to features
    // Then, handle simple 2-vertex segments

    if (line1.type === "LineString") {
      line1 = feature(line1);
    }

    if (line2.type === "LineString") {
      line2 = feature(line2);
    }

    if (line1.type === "Feature" && line2.type === "Feature" && line1.geometry !== null && line2.geometry !== null && line1.geometry.type === "LineString" && line2.geometry.type === "LineString" && line1.geometry.coordinates.length === 2 && line2.geometry.coordinates.length === 2) {
      var intersect = intersects(line1, line2);

      if (intersect) {
        results.push(intersect);
      }

      return featureCollection$1(results);
    } // Handles complex GeoJSON Geometries


    var tree = geojsonRbush_1();
    tree.load(lineSegment(line2));
    featureEach$2(lineSegment(line1), function (segment) {
      featureEach$2(tree.search(segment), function (match) {
        var intersect = intersects(segment, match);

        if (intersect) {
          // prevent duplicate points https://github.com/Turfjs/turf/issues/688
          var key = getCoords(intersect).join(",");

          if (!unique[key]) {
            unique[key] = true;
            results.push(intersect);
          }
        }
      });
    });
    return featureCollection$1(results);
  }
  /**
   * Find a point that intersects LineStrings with two coordinates each
   *
   * @private
   * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)
   * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)
   * @returns {Feature<Point>} intersecting GeoJSON Point
   */


  function intersects(line1, line2) {
    var coords1 = getCoords(line1);
    var coords2 = getCoords(line2);

    if (coords1.length !== 2) {
      throw new Error("<intersects> line1 must only contain 2 coordinates");
    }

    if (coords2.length !== 2) {
      throw new Error("<intersects> line2 must only contain 2 coordinates");
    }

    var x1 = coords1[0][0];
    var y1 = coords1[0][1];
    var x2 = coords1[1][0];
    var y2 = coords1[1][1];
    var x3 = coords2[0][0];
    var y3 = coords2[0][1];
    var x4 = coords2[1][0];
    var y4 = coords2[1][1];
    var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
    var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
    var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);

    if (denom === 0) {
      if (numeA === 0 && numeB === 0) {
        return null;
      }

      return null;
    }

    var uA = numeA / denom;
    var uB = numeB / denom;

    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {
      var x = x1 + uA * (x2 - x1);
      var y = y1 + uA * (y2 - y1);
      return point([x, y]);
    }

    return null;
  }

  /**
   * Takes a {@link Point} and a {@link LineString} and calculates the closest Point on the (Multi)LineString.
   *
   * @name nearestPointOnLine
   * @param {Geometry|Feature<LineString|MultiLineString>} lines lines to snap to
   * @param {Geometry|Feature<Point>|number[]} pt point to snap from
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers
   * @returns {Feature<Point>} closest point on the `line` to `point`. The properties object will contain three values: `index`: closest point was found on nth line part, `dist`: distance between pt and the closest point, `location`: distance along the line between start and the closest point.
   * @example
   * var line = turf.lineString([
   *     [-77.031669, 38.878605],
   *     [-77.029609, 38.881946],
   *     [-77.020339, 38.884084],
   *     [-77.025661, 38.885821],
   *     [-77.021884, 38.889563],
   *     [-77.019824, 38.892368]
   * ]);
   * var pt = turf.point([-77.037076, 38.884017]);
   *
   * var snapped = turf.nearestPointOnLine(line, pt, {units: 'miles'});
   *
   * //addToMap
   * var addToMap = [line, pt, snapped];
   * snapped.properties['marker-color'] = '#00f';
   */

  function nearestPointOnLine(lines, pt, options) {
    if (options === void 0) {
      options = {};
    }

    var closestPt = point([Infinity, Infinity], {
      dist: Infinity
    });
    var length = 0.0;
    flattenEach$1(lines, function (line) {
      var coords = getCoords(line);

      for (var i = 0; i < coords.length - 1; i++) {
        //start
        var start = point(coords[i]);
        start.properties.dist = distance$1(pt, start, options); //stop

        var stop_1 = point(coords[i + 1]);
        stop_1.properties.dist = distance$1(pt, stop_1, options); // sectionLength

        var sectionLength = distance$1(start, stop_1, options); //perpendicular

        var heightDistance = Math.max(start.properties.dist, stop_1.properties.dist);
        var direction = bearing(start, stop_1);
        var perpendicularPt1 = destination(pt, heightDistance, direction + 90, options);
        var perpendicularPt2 = destination(pt, heightDistance, direction - 90, options);
        var intersect = lineIntersect(lineString([perpendicularPt1.geometry.coordinates, perpendicularPt2.geometry.coordinates]), lineString([start.geometry.coordinates, stop_1.geometry.coordinates]));
        var intersectPt = null;

        if (intersect.features.length > 0) {
          intersectPt = intersect.features[0];
          intersectPt.properties.dist = distance$1(pt, intersectPt, options);
          intersectPt.properties.location = length + distance$1(start, intersectPt, options);
        }

        if (start.properties.dist < closestPt.properties.dist) {
          closestPt = start;
          closestPt.properties.index = i;
          closestPt.properties.location = length;
        }

        if (stop_1.properties.dist < closestPt.properties.dist) {
          closestPt = stop_1;
          closestPt.properties.index = i + 1;
          closestPt.properties.location = length + sectionLength;
        }

        if (intersectPt && intersectPt.properties.dist < closestPt.properties.dist) {
          closestPt = intersectPt;
          closestPt.properties.index = i;
        } // update length


        length += sectionLength;
      }
    });
    return closestPt;
  }

  // https://en.wikipedia.org/wiki/Rhumb_line
  /**
   * Calculates the distance along a rhumb line between two {@link Point|points} in degrees, radians,
   * miles, or kilometers.
   *
   * @name rhumbDistance
   * @param {Coord} from origin point
   * @param {Coord} to destination point
   * @param {Object} [options] Optional parameters
   * @param {string} [options.units="kilometers"] can be degrees, radians, miles, or kilometers
   * @returns {number} distance between the two points
   * @example
   * var from = turf.point([-75.343, 39.984]);
   * var to = turf.point([-75.534, 39.123]);
   * var options = {units: 'miles'};
   *
   * var distance = turf.rhumbDistance(from, to, options);
   *
   * //addToMap
   * var addToMap = [from, to];
   * from.properties.distance = distance;
   * to.properties.distance = distance;
   */

  function rhumbDistance(from, to, options) {
    if (options === void 0) {
      options = {};
    }

    var origin = getCoord(from);
    var destination = getCoord(to); // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)
    // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678

    destination[0] += destination[0] - origin[0] > 180 ? -360 : origin[0] - destination[0] > 180 ? 360 : 0;
    var distanceInMeters = calculateRhumbDistance(origin, destination);
    var distance = convertLength(distanceInMeters, "meters", options.units);
    return distance;
  }
  /**
   * Returns the distance travelling from ‘this’ point to destination point along a rhumb line.
   * Adapted from Geodesy: https://github.com/chrisveness/geodesy/blob/master/latlon-spherical.js
   *
   * @private
   * @param   {Array<number>} origin point.
   * @param   {Array<number>} destination point.
   * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).
   * @returns {number} Distance in km between this point and destination point (same units as radius).
   *
   * @example
   *     var p1 = new LatLon(51.127, 1.338);
   *     var p2 = new LatLon(50.964, 1.853);
   *     var d = p1.distanceTo(p2); // 40.31 km
   */


  function calculateRhumbDistance(origin, destination, radius) {
    // φ => phi
    // λ => lambda
    // ψ => psi
    // Δ => Delta
    // δ => delta
    // θ => theta
    radius = radius === undefined ? earthRadius : Number(radius); // see www.edwilliams.org/avform.htm#Rhumb

    var R = radius;
    var phi1 = origin[1] * Math.PI / 180;
    var phi2 = destination[1] * Math.PI / 180;
    var DeltaPhi = phi2 - phi1;
    var DeltaLambda = Math.abs(destination[0] - origin[0]) * Math.PI / 180; // if dLon over 180° take shorter rhumb line across the anti-meridian:

    if (DeltaLambda > Math.PI) {
      DeltaLambda -= 2 * Math.PI;
    } // on Mercator projection, longitude distances shrink by latitude; q is the 'stretch factor'
    // q becomes ill-conditioned along E-W line (0/0); use empirical tolerance to avoid it


    var DeltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4));
    var q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1); // distance is pythagoras on 'stretched' Mercator projection

    var delta = Math.sqrt(DeltaPhi * DeltaPhi + q * q * DeltaLambda * DeltaLambda); // angular distance in radians

    var dist = delta * R;
    return dist;
  }

  // Taken from http://geomalgorithms.com/a02-_lines.html
  /**
   * Returns the minimum distance between a {@link Point} and a {@link LineString}, being the distance from a line the
   * minimum distance between the point and any segment of the `LineString`.
   *
   * @name pointToLineDistance
   * @param {Feature<Point>|Array<number>} pt Feature or Geometry
   * @param {Feature<LineString>} line GeoJSON Feature or Geometry
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units="kilometers"] can be anything supported by turf/convertLength
   * (ex: degrees, radians, miles, or kilometers)
   * @param {string} [options.method="geodesic"] wether to calculate the distance based on geodesic (spheroid) or
   * planar (flat) method. Valid options are 'geodesic' or 'planar'.
   * @returns {number} distance between point and line
   * @example
   * var pt = turf.point([0, 0]);
   * var line = turf.lineString([[1, 1],[-1, 1]]);
   *
   * var distance = turf.pointToLineDistance(pt, line, {units: 'miles'});
   * //=69.11854715938406
   */

  function pointToLineDistance(pt, line, options) {
    if (options === void 0) {
      options = {};
    } // Optional parameters


    if (!options.method) {
      options.method = "geodesic";
    }

    if (!options.units) {
      options.units = "kilometers";
    } // validation


    if (!pt) {
      throw new Error("pt is required");
    }

    if (Array.isArray(pt)) {
      pt = point(pt);
    } else if (pt.type === "Point") {
      pt = feature(pt);
    } else {
      featureOf(pt, "Point", "point");
    }

    if (!line) {
      throw new Error("line is required");
    }

    if (Array.isArray(line)) {
      line = lineString(line);
    } else if (line.type === "LineString") {
      line = feature(line);
    } else {
      featureOf(line, "LineString", "line");
    }

    var distance = Infinity;
    var p = pt.geometry.coordinates;
    segmentEach$1(line, function (segment) {
      var a = segment.geometry.coordinates[0];
      var b = segment.geometry.coordinates[1];
      var d = distanceToSegment(p, a, b, options);

      if (d < distance) {
        distance = d;
      }
    });
    return convertLength(distance, "degrees", options.units);
  }
  /**
   * Returns the distance between a point P on a segment AB.
   *
   * @private
   * @param {Array<number>} p external point
   * @param {Array<number>} a first segment point
   * @param {Array<number>} b second segment point
   * @param {Object} [options={}] Optional parameters
   * @returns {number} distance
   */


  function distanceToSegment(p, a, b, options) {
    var v = [b[0] - a[0], b[1] - a[1]];
    var w = [p[0] - a[0], p[1] - a[1]];
    var c1 = dot(w, v);

    if (c1 <= 0) {
      return calcDistance(p, a, {
        method: options.method,
        units: "degrees"
      });
    }

    var c2 = dot(v, v);

    if (c2 <= c1) {
      return calcDistance(p, b, {
        method: options.method,
        units: "degrees"
      });
    }

    var b2 = c1 / c2;
    var Pb = [a[0] + b2 * v[0], a[1] + b2 * v[1]];
    return calcDistance(p, Pb, {
      method: options.method,
      units: "degrees"
    });
  }

  function dot(u, v) {
    return u[0] * v[0] + u[1] * v[1];
  }

  function calcDistance(a, b, options) {
    return options.method === "planar" ? rhumbDistance(a, b, options) : distance$1(a, b, options);
  }

  /**
   * Returns the closest {@link Point|point}, of a {@link FeatureCollection|collection} of points,
   * to a {@link LineString|line}. The returned point has a `dist` property indicating its distance to the line.
   *
   * @name nearestPointToLine
   * @param {FeatureCollection|GeometryCollection<Point>} points Point Collection
   * @param {Feature|Geometry<LineString>} line Line Feature
   * @param {Object} [options] Optional parameters
   * @param {string} [options.units='kilometers'] unit of the output distance property
   * (eg: degrees, radians, miles, or kilometers)
   * @param {Object} [options.properties={}] Translate Properties to Point
   * @returns {Feature<Point>} the closest point
   * @example
   * var pt1 = turf.point([0, 0]);
   * var pt2 = turf.point([0.5, 0.5]);
   * var points = turf.featureCollection([pt1, pt2]);
   * var line = turf.lineString([[1,1], [-1,1]]);
   *
   * var nearest = turf.nearestPointToLine(points, line);
   *
   * //addToMap
   * var addToMap = [nearest, line];
   */

  function nearestPointToLine(points, line, options) {
    if (options === void 0) {
      options = {};
    }

    var units = options.units;
    var properties = options.properties || {}; // validation

    var pts = normalize$1(points);

    if (!pts.features.length) {
      throw new Error("points must contain features");
    }

    if (!line) {
      throw new Error("line is required");
    }

    if (getType$1(line) !== "LineString") {
      throw new Error("line must be a LineString");
    }

    var dist = Infinity;
    var pt = null;
    featureEach$2(pts, function (point) {
      var d = pointToLineDistance(point, line, {
        units: units
      });

      if (d < dist) {
        dist = d;
        pt = point;
      }
    });
    /**
     * Translate Properties to final Point, priorities:
     * 1. options.properties
     * 2. inherent Point properties
     * 3. dist custom properties created by NearestPointToLine
     */

    if (pt) {
      pt.properties = objectAssign({
        dist: dist
      }, pt.properties, properties);
    } // if (pt) { pt.properties = objectAssign({dist}, pt.properties, properties); }


    return pt;
  }
  /**
   * Convert Collection to FeatureCollection
   *
   * @private
   * @param {FeatureCollection|GeometryCollection} points Points
   * @returns {FeatureCollection<Point>} points
   */


  function normalize$1(points) {
    var features = [];
    var type = points.geometry ? points.geometry.type : points.type;

    switch (type) {
      case "GeometryCollection":
        geomEach$1(points, function (geom) {
          if (geom.type === "Point") {
            features.push({
              type: "Feature",
              properties: {},
              geometry: geom
            });
          }
        });
        return {
          type: "FeatureCollection",
          features: features
        };

      case "FeatureCollection":
        points.features = points.features.filter(function (feature) {
          return feature.geometry.type === "Point";
        });
        return points;

      default:
        throw new Error("points must be a Point Collection");
    }
  }

  /**
   * Takes a triangular plane as a {@link Polygon}
   * and a {@link Point} within that triangle and returns the z-value
   * at that point. The Polygon should have properties `a`, `b`, and `c`
   * that define the values at its three corners. Alternatively, the z-values
   * of each triangle point can be provided by their respective 3rd coordinate
   * if their values are not provided as properties.
   *
   * @name planepoint
   * @param {Coord} point the Point for which a z-value will be calculated
   * @param {Feature<Polygon>} triangle a Polygon feature with three vertices
   * @returns {number} the z-value for `interpolatedPoint`
   * @example
   * var point = turf.point([-75.3221, 39.529]);
   * // "a", "b", and "c" values represent the values of the coordinates in order.
   * var triangle = turf.polygon([[
   *   [-75.1221, 39.57],
   *   [-75.58, 39.18],
   *   [-75.97, 39.86],
   *   [-75.1221, 39.57]
   * ]], {
   *   "a": 11,
   *   "b": 122,
   *   "c": 44
   * });
   *
   * var zValue = turf.planepoint(point, triangle);
   * point.properties.zValue = zValue;
   *
   * //addToMap
   * var addToMap = [triangle, point];
   */

  function planepoint(point, triangle) {
    // Normalize input
    var coord = getCoord(point);
    var geom = getGeom(triangle);
    var coords = geom.coordinates;
    var outer = coords[0];
    if (outer.length < 4) throw new Error("OuterRing of a Polygon must have 4 or more Positions.");
    var properties = triangle.properties || {};
    var a = properties.a;
    var b = properties.b;
    var c = properties.c; // Planepoint

    var x = coord[0];
    var y = coord[1];
    var x1 = outer[0][0];
    var y1 = outer[0][1];
    var z1 = a !== undefined ? a : outer[0][2];
    var x2 = outer[1][0];
    var y2 = outer[1][1];
    var z2 = b !== undefined ? b : outer[1][2];
    var x3 = outer[2][0];
    var y3 = outer[2][1];
    var z3 = c !== undefined ? c : outer[2][2];
    var z = (z3 * (x - x1) * (y - y2) + z1 * (x - x2) * (y - y3) + z2 * (x - x3) * (y - y1) - z2 * (x - x1) * (y - y3) - z3 * (x - x2) * (y - y1) - z1 * (x - x3) * (y - y2)) / ((x - x1) * (y - y2) + (x - x2) * (y - y3) + (x - x3) * (y - y1) - (x - x1) * (y - y3) - (x - x2) * (y - y1) - (x - x3) * (y - y2));
    return z;
  }

  /**
   * Takes a {@link LineString|linestring}, {@link MultiLineString|multi-linestring},
   * {@link MultiPolygon|multi-polygon} or {@link Polygon|polygon} and
   * returns {@link Point|points} at all self-intersections.
   *
   * @name kinks
   * @param {Feature<LineString|MultiLineString|MultiPolygon|Polygon>} featureIn input feature
   * @returns {FeatureCollection<Point>} self-intersections
   * @example
   * var poly = turf.polygon([[
   *   [-12.034835, 8.901183],
   *   [-12.060413, 8.899826],
   *   [-12.03638, 8.873199],
   *   [-12.059383, 8.871418],
   *   [-12.034835, 8.901183]
   * ]]);
   *
   * var kinks = turf.kinks(poly);
   *
   * //addToMap
   * var addToMap = [poly, kinks]
   */

  function kinks(featureIn) {
    var coordinates;
    var feature;
    var results = {
      type: "FeatureCollection",
      features: []
    };

    if (featureIn.type === "Feature") {
      feature = featureIn.geometry;
    } else {
      feature = featureIn;
    }

    if (feature.type === "LineString") {
      coordinates = [feature.coordinates];
    } else if (feature.type === "MultiLineString") {
      coordinates = feature.coordinates;
    } else if (feature.type === "MultiPolygon") {
      coordinates = [].concat.apply([], feature.coordinates);
    } else if (feature.type === "Polygon") {
      coordinates = feature.coordinates;
    } else {
      throw new Error("Input must be a LineString, MultiLineString, " + "Polygon, or MultiPolygon Feature or Geometry");
    }

    coordinates.forEach(function (line1) {
      coordinates.forEach(function (line2) {
        for (var i = 0; i < line1.length - 1; i++) {
          // start iteration at i, intersections for k < i have already
          // been checked in previous outer loop iterations
          for (var k = i; k < line2.length - 1; k++) {
            if (line1 === line2) {
              // segments are adjacent and always share a vertex, not a kink
              if (Math.abs(i - k) === 1) {
                continue;
              } // first and last segment in a closed lineString or ring always share a vertex, not a kink


              if ( // segments are first and last segment of lineString
              i === 0 && k === line1.length - 2 && // lineString is closed
              line1[i][0] === line1[line1.length - 1][0] && line1[i][1] === line1[line1.length - 1][1]) {
                continue;
              }
            }

            var intersection = lineIntersects(line1[i][0], line1[i][1], line1[i + 1][0], line1[i + 1][1], line2[k][0], line2[k][1], line2[k + 1][0], line2[k + 1][1]);

            if (intersection) {
              results.features.push(point([intersection[0], intersection[1]]));
            }
          }
        }
      });
    });
    return results;
  } // modified from http://jsfiddle.net/justin_c_rounds/Gd2S2/light/

  function lineIntersects(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {
    // if the lines intersect, the result contains the x and y of the
    // intersection (treating the lines as infinite) and booleans for whether
    // line segment 1 or line segment 2 contain the point
    var denominator;
    var a;
    var b;
    var numerator1;
    var numerator2;
    var result = {
      x: null,
      y: null,
      onLine1: false,
      onLine2: false
    };
    denominator = (line2EndY - line2StartY) * (line1EndX - line1StartX) - (line2EndX - line2StartX) * (line1EndY - line1StartY);

    if (denominator === 0) {
      if (result.x !== null && result.y !== null) {
        return result;
      } else {
        return false;
      }
    }

    a = line1StartY - line2StartY;
    b = line1StartX - line2StartX;
    numerator1 = (line2EndX - line2StartX) * a - (line2EndY - line2StartY) * b;
    numerator2 = (line1EndX - line1StartX) * a - (line1EndY - line1StartY) * b;
    a = numerator1 / denominator;
    b = numerator2 / denominator; // if we cast these lines infinitely in both directions, they intersect here:

    result.x = line1StartX + a * (line1EndX - line1StartX);
    result.y = line1StartY + a * (line1EndY - line1StartY); // if line1 is a segment and line2 is infinite, they intersect if:

    if (a >= 0 && a <= 1) {
      result.onLine1 = true;
    } // if line2 is a segment and line1 is infinite, they intersect if:


    if (b >= 0 && b <= 1) {
      result.onLine2 = true;
    } // if line1 and line2 are segments, they intersect if both of the above are true


    if (result.onLine1 && result.onLine2) {
      return [result.x, result.y];
    } else {
      return false;
    }
  }

  /**
   * Takes a Feature or FeatureCollection and returns a {@link Point} guaranteed to be on the surface of the feature.
   *
   * * Given a {@link Polygon}, the point will be in the area of the polygon
   * * Given a {@link LineString}, the point will be along the string
   * * Given a {@link Point}, the point will the same as the input
   *
   * @name pointOnFeature
   * @param {GeoJSON} geojson any Feature or FeatureCollection
   * @returns {Feature<Point>} a point on the surface of `input`
   * @example
   * var polygon = turf.polygon([[
   *   [116, -36],
   *   [131, -32],
   *   [146, -43],
   *   [155, -25],
   *   [133, -9],
   *   [111, -22],
   *   [116, -36]
   * ]]);
   *
   * var pointOnPolygon = turf.pointOnFeature(polygon);
   *
   * //addToMap
   * var addToMap = [polygon, pointOnPolygon];
   */

  function pointOnFeature(geojson) {
    // normalize
    var fc = normalize(geojson); // get centroid

    var cent = center(fc); // check to see if centroid is on surface

    var onSurface = false;
    var i = 0;

    while (!onSurface && i < fc.features.length) {
      var geom = fc.features[i].geometry;
      var x, y, x1, y1, x2, y2, k;
      var onLine = false;

      if (geom.type === "Point") {
        if (cent.geometry.coordinates[0] === geom.coordinates[0] && cent.geometry.coordinates[1] === geom.coordinates[1]) {
          onSurface = true;
        }
      } else if (geom.type === "MultiPoint") {
        var onMultiPoint = false;
        k = 0;

        while (!onMultiPoint && k < geom.coordinates.length) {
          if (cent.geometry.coordinates[0] === geom.coordinates[k][0] && cent.geometry.coordinates[1] === geom.coordinates[k][1]) {
            onSurface = true;
            onMultiPoint = true;
          }

          k++;
        }
      } else if (geom.type === "LineString") {
        k = 0;

        while (!onLine && k < geom.coordinates.length - 1) {
          x = cent.geometry.coordinates[0];
          y = cent.geometry.coordinates[1];
          x1 = geom.coordinates[k][0];
          y1 = geom.coordinates[k][1];
          x2 = geom.coordinates[k + 1][0];
          y2 = geom.coordinates[k + 1][1];

          if (pointOnSegment(x, y, x1, y1, x2, y2)) {
            onLine = true;
            onSurface = true;
          }

          k++;
        }
      } else if (geom.type === "MultiLineString") {
        var j = 0;

        while (j < geom.coordinates.length) {
          onLine = false;
          k = 0;
          var line = geom.coordinates[j];

          while (!onLine && k < line.length - 1) {
            x = cent.geometry.coordinates[0];
            y = cent.geometry.coordinates[1];
            x1 = line[k][0];
            y1 = line[k][1];
            x2 = line[k + 1][0];
            y2 = line[k + 1][1];

            if (pointOnSegment(x, y, x1, y1, x2, y2)) {
              onLine = true;
              onSurface = true;
            }

            k++;
          }

          j++;
        }
      } else if (geom.type === "Polygon" || geom.type === "MultiPolygon") {
        if (booleanPointInPolygon(cent, geom)) {
          onSurface = true;
        }
      }

      i++;
    }

    if (onSurface) {
      return cent;
    } else {
      var vertices = featureCollection$1([]);

      for (i = 0; i < fc.features.length; i++) {
        vertices.features = vertices.features.concat(explode$1(fc.features[i]).features);
      } // Remove distanceToPoint properties from nearestPoint()


      return point(nearestPoint(cent, vertices).geometry.coordinates);
    }
  }
  /**
   * Normalizes any GeoJSON to a FeatureCollection
   *
   * @private
   * @name normalize
   * @param {GeoJSON} geojson Any GeoJSON
   * @returns {FeatureCollection} FeatureCollection
   */


  function normalize(geojson) {
    if (geojson.type !== "FeatureCollection") {
      if (geojson.type !== "Feature") {
        return featureCollection$1([feature(geojson)]);
      }

      return featureCollection$1([geojson]);
    }

    return geojson;
  }

  function pointOnSegment(x, y, x1, y1, x2, y2) {
    var ab = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    var ap = Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));
    var pb = Math.sqrt((x2 - x) * (x2 - x) + (y2 - y) * (y2 - y));
    return ab === ap + pb;
  }

  var RADIUS = 6378137;
  /**
   * Takes one or more features and returns their area in square meters.
   *
   * @name area
   * @param {GeoJSON} geojson input GeoJSON feature(s)
   * @returns {number} area in square meters
   * @example
   * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);
   *
   * var area = turf.area(polygon);
   *
   * //addToMap
   * var addToMap = [polygon]
   * polygon.properties.area = area
   */

  function area(geojson) {
    return geomReduce$1(geojson, function (value, geom) {
      return value + calculateArea$1(geom);
    }, 0);
  }
  /**
   * Calculate Area
   *
   * @private
   * @param {Geometry} geom GeoJSON Geometries
   * @returns {number} area
   */

  function calculateArea$1(geom) {
    var total = 0;
    var i;

    switch (geom.type) {
      case "Polygon":
        return polygonArea(geom.coordinates);

      case "MultiPolygon":
        for (i = 0; i < geom.coordinates.length; i++) {
          total += polygonArea(geom.coordinates[i]);
        }

        return total;

      case "Point":
      case "MultiPoint":
      case "LineString":
      case "MultiLineString":
        return 0;
    }

    return 0;
  }

  function polygonArea(coords) {
    var total = 0;

    if (coords && coords.length > 0) {
      total += Math.abs(ringArea(coords[0]));

      for (var i = 1; i < coords.length; i++) {
        total -= Math.abs(ringArea(coords[i]));
      }
    }

    return total;
  }
  /**
   * @private
   * Calculate the approximate area of the polygon were it projected onto the earth.
   * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.
   *
   * Reference:
   * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for Polygons on a Sphere",
   * JPL Publication 07-03, Jet Propulsion
   * Laboratory, Pasadena, CA, June 2007 https://trs.jpl.nasa.gov/handle/2014/40409
   *
   * @param {Array<Array<number>>} coords Ring Coordinates
   * @returns {number} The approximate signed geodesic area of the polygon in square meters.
   */


  function ringArea(coords) {
    var p1;
    var p2;
    var p3;
    var lowerIndex;
    var middleIndex;
    var upperIndex;
    var i;
    var total = 0;
    var coordsLength = coords.length;

    if (coordsLength > 2) {
      for (i = 0; i < coordsLength; i++) {
        if (i === coordsLength - 2) {
          // i = N-2
          lowerIndex = coordsLength - 2;
          middleIndex = coordsLength - 1;
          upperIndex = 0;
        } else if (i === coordsLength - 1) {
          // i = N-1
          lowerIndex = coordsLength - 1;
          middleIndex = 0;
          upperIndex = 1;
        } else {
          // i = 0 to N-3
          lowerIndex = i;
          middleIndex = i + 1;
          upperIndex = i + 2;
        }

        p1 = coords[lowerIndex];
        p2 = coords[middleIndex];
        p3 = coords[upperIndex];
        total += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));
      }

      total = total * RADIUS * RADIUS / 2;
    }

    return total;
  }

  function rad(num) {
    return num * Math.PI / 180;
  }

  /**
   * Takes a {@link LineString} and returns a {@link Point} at a specified distance along the line.
   *
   * @name along
   * @param {Feature<LineString>} line input line
   * @param {number} distance distance along the line
   * @param {Object} [options] Optional parameters
   * @param {string} [options.units="kilometers"] can be degrees, radians, miles, or kilometers
   * @returns {Feature<Point>} Point `distance` `units` along the line
   * @example
   * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);
   * var options = {units: 'miles'};
   *
   * var along = turf.along(line, 200, options);
   *
   * //addToMap
   * var addToMap = [along, line]
   */

  function along(line, distance, options) {
    if (options === void 0) {
      options = {};
    } // Get Coords


    var geom = getGeom(line);
    var coords = geom.coordinates;
    var travelled = 0;

    for (var i = 0; i < coords.length; i++) {
      if (distance >= travelled && i === coords.length - 1) {
        break;
      } else if (travelled >= distance) {
        var overshot = distance - travelled;

        if (!overshot) {
          return point(coords[i]);
        } else {
          var direction = bearing(coords[i], coords[i - 1]) - 180;
          var interpolated = destination(coords[i], overshot, direction, options);
          return interpolated;
        }
      } else {
        travelled += distance$1(coords[i], coords[i + 1], options);
      }
    }

    return point(coords[coords.length - 1]);
  }

  /**
   * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point}'s distance are ignored.
   *
   * @name length
   * @param {Feature<LineString|MultiLineString>} geojson GeoJSON to measure
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units=kilometers] can be degrees, radians, miles, or kilometers
   * @returns {number} length of GeoJSON
   * @example
   * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);
   * var length = turf.length(line, {units: 'miles'});
   *
   * //addToMap
   * var addToMap = [line];
   * line.properties.distance = length;
   */

  function length$1(geojson, options) {
    if (options === void 0) {
      options = {};
    } // Calculate distance from 2-vertex line segments


    return segmentReduce$1(geojson, function (previousValue, segment) {
      var coords = segment.geometry.coordinates;
      return previousValue + distance$1(coords[0], coords[1], options);
    }, 0);
  }

  /**
   * Takes a {@link LineString|line}, a start {@link Point}, and a stop point
   * and returns a subsection of the line in-between those points.
   * The start & stop points don't need to fall exactly on the line.
   *
   * This can be useful for extracting only the part of a route between waypoints.
   *
   * @name lineSlice
   * @param {Coord} startPt starting point
   * @param {Coord} stopPt stopping point
   * @param {Feature<LineString>|LineString} line line to slice
   * @returns {Feature<LineString>} sliced line
   * @example
   * var line = turf.lineString([
   *     [-77.031669, 38.878605],
   *     [-77.029609, 38.881946],
   *     [-77.020339, 38.884084],
   *     [-77.025661, 38.885821],
   *     [-77.021884, 38.889563],
   *     [-77.019824, 38.892368]
   * ]);
   * var start = turf.point([-77.029609, 38.881946]);
   * var stop = turf.point([-77.021884, 38.889563]);
   *
   * var sliced = turf.lineSlice(start, stop, line);
   *
   * //addToMap
   * var addToMap = [start, stop, line]
   */

  function lineSlice(startPt, stopPt, line) {
    // Validation
    var coords = getCoords(line);
    if (getType$1(line) !== "LineString") throw new Error("line must be a LineString");
    var startVertex = nearestPointOnLine(line, startPt);
    var stopVertex = nearestPointOnLine(line, stopPt);
    var ends;

    if (startVertex.properties.index <= stopVertex.properties.index) {
      ends = [startVertex, stopVertex];
    } else {
      ends = [stopVertex, startVertex];
    }

    var clipCoords = [ends[0].geometry.coordinates];

    for (var i = ends[0].properties.index + 1; i < ends[1].properties.index + 1; i++) {
      clipCoords.push(coords[i]);
    }

    clipCoords.push(ends[1].geometry.coordinates);
    return lineString(clipCoords, line.properties);
  }

  /**
   * Takes a {@link LineString|line}, a specified distance along the line to a start {@link Point},
   * and a specified  distance along the line to a stop point
   * and returns a subsection of the line in-between those points.
   *
   * This can be useful for extracting only the part of a route between two distances.
   *
   * @name lineSliceAlong
   * @param {Feature<LineString>|LineString} line input line
   * @param {number} startDist distance along the line to starting point
   * @param {number} stopDist distance along the line to ending point
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers
   * @returns {Feature<LineString>} sliced line
   * @example
   * var line = turf.lineString([[7, 45], [9, 45], [14, 40], [14, 41]]);
   * var start = 12.5;
   * var stop = 25;
   * var sliced = turf.lineSliceAlong(line, start, stop, {units: 'miles'});
   *
   * //addToMap
   * var addToMap = [line, start, stop, sliced]
   */

  function lineSliceAlong(line, startDist, stopDist, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var coords;
    var slice = []; // Validation

    if (line.type === "Feature") coords = line.geometry.coordinates;else if (line.type === "LineString") coords = line.coordinates;else throw new Error("input must be a LineString Feature or Geometry");
    var origCoordsLength = coords.length;
    var travelled = 0;
    var overshot, direction, interpolated;

    for (var i = 0; i < coords.length; i++) {
      if (startDist >= travelled && i === coords.length - 1) break;else if (travelled > startDist && slice.length === 0) {
        overshot = startDist - travelled;

        if (!overshot) {
          slice.push(coords[i]);
          return lineString(slice);
        }

        direction = bearing(coords[i], coords[i - 1]) - 180;
        interpolated = destination(coords[i], overshot, direction, options);
        slice.push(interpolated.geometry.coordinates);
      }

      if (travelled >= stopDist) {
        overshot = stopDist - travelled;

        if (!overshot) {
          slice.push(coords[i]);
          return lineString(slice);
        }

        direction = bearing(coords[i], coords[i - 1]) - 180;
        interpolated = destination(coords[i], overshot, direction, options);
        slice.push(interpolated.geometry.coordinates);
        return lineString(slice);
      }

      if (travelled >= startDist) {
        slice.push(coords[i]);
      }

      if (i === coords.length - 1) {
        return lineString(slice);
      }

      travelled += distance$1(coords[i], coords[i + 1], options);
    }

    if (travelled < startDist && coords.length === origCoordsLength) throw new Error("Start position is beyond line");
    var last = coords[coords.length - 1];
    return lineString([last, last]);
  }

  /**
   * Returns true if a point is on a line. Accepts a optional parameter to ignore the
   * start and end vertices of the linestring.
   *
   * @name booleanPointOnLine
   * @param {Coord} pt GeoJSON Point
   * @param {Feature<LineString>} line GeoJSON LineString
   * @param {Object} [options={}] Optional parameters
   * @param {boolean} [options.ignoreEndVertices=false] whether to ignore the start and end vertices.
   * @param {number} [options.epsilon] Fractional number to compare with the cross product result. Useful for dealing with floating points such as lng/lat points
   * @returns {boolean} true/false
   * @example
   * var pt = turf.point([0, 0]);
   * var line = turf.lineString([[-1, -1],[1, 1],[1.5, 2.2]]);
   * var isPointOnLine = turf.booleanPointOnLine(pt, line);
   * //=true
   */

  function booleanPointOnLine(pt, line, options) {
    if (options === void 0) {
      options = {};
    } // Normalize inputs


    var ptCoords = getCoord(pt);
    var lineCoords = getCoords(line); // Main

    for (var i = 0; i < lineCoords.length - 1; i++) {
      var ignoreBoundary = false;

      if (options.ignoreEndVertices) {
        if (i === 0) {
          ignoreBoundary = "start";
        }

        if (i === lineCoords.length - 2) {
          ignoreBoundary = "end";
        }

        if (i === 0 && i + 1 === lineCoords.length - 1) {
          ignoreBoundary = "both";
        }
      }

      if (isPointOnLineSegment$2(lineCoords[i], lineCoords[i + 1], ptCoords, ignoreBoundary, typeof options.epsilon === "undefined" ? null : options.epsilon)) {
        return true;
      }
    }

    return false;
  } // See http://stackoverflow.com/a/4833823/1979085
  // See https://stackoverflow.com/a/328122/1048847

  /**
   * @private
   * @param {Position} lineSegmentStart coord pair of start of line
   * @param {Position} lineSegmentEnd coord pair of end of line
   * @param {Position} pt coord pair of point to check
   * @param {boolean|string} excludeBoundary whether the point is allowed to fall on the line ends.
   * @param {number} epsilon Fractional number to compare with the cross product result. Useful for dealing with floating points such as lng/lat points
   * If true which end to ignore.
   * @returns {boolean} true/false
   */


  function isPointOnLineSegment$2(lineSegmentStart, lineSegmentEnd, pt, excludeBoundary, epsilon) {
    var x = pt[0];
    var y = pt[1];
    var x1 = lineSegmentStart[0];
    var y1 = lineSegmentStart[1];
    var x2 = lineSegmentEnd[0];
    var y2 = lineSegmentEnd[1];
    var dxc = pt[0] - x1;
    var dyc = pt[1] - y1;
    var dxl = x2 - x1;
    var dyl = y2 - y1;
    var cross = dxc * dyl - dyc * dxl;

    if (epsilon !== null) {
      if (Math.abs(cross) > epsilon) {
        return false;
      }
    } else if (cross !== 0) {
      return false;
    }

    if (!excludeBoundary) {
      if (Math.abs(dxl) >= Math.abs(dyl)) {
        return dxl > 0 ? x1 <= x && x <= x2 : x2 <= x && x <= x1;
      }

      return dyl > 0 ? y1 <= y && y <= y2 : y2 <= y && y <= y1;
    } else if (excludeBoundary === "start") {
      if (Math.abs(dxl) >= Math.abs(dyl)) {
        return dxl > 0 ? x1 < x && x <= x2 : x2 <= x && x < x1;
      }

      return dyl > 0 ? y1 < y && y <= y2 : y2 <= y && y < y1;
    } else if (excludeBoundary === "end") {
      if (Math.abs(dxl) >= Math.abs(dyl)) {
        return dxl > 0 ? x1 <= x && x < x2 : x2 < x && x <= x1;
      }

      return dyl > 0 ? y1 <= y && y < y2 : y2 < y && y <= y1;
    } else if (excludeBoundary === "both") {
      if (Math.abs(dxl) >= Math.abs(dyl)) {
        return dxl > 0 ? x1 < x && x < x2 : x2 < x && x < x1;
      }

      return dyl > 0 ? y1 < y && y < y2 : y2 < y && y < y1;
    }

    return false;
  }

  /**
   * Boolean-within returns true if the first geometry is completely within the second geometry.
   * The interiors of both geometries must intersect and, the interior and boundary of the primary (geometry a)
   * must not intersect the exterior of the secondary (geometry b).
   * Boolean-within returns the exact opposite result of the `@turf/boolean-contains`.
   *
   * @name booleanWithin
   * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry
   * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry
   * @returns {boolean} true/false
   * @example
   * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);
   * var point = turf.point([1, 2]);
   *
   * turf.booleanWithin(point, line);
   * //=true
   */

  function booleanWithin(feature1, feature2) {
    var geom1 = getGeom(feature1);
    var geom2 = getGeom(feature2);
    var type1 = geom1.type;
    var type2 = geom2.type;

    switch (type1) {
      case "Point":
        switch (type2) {
          case "MultiPoint":
            return isPointInMultiPoint$1(geom1, geom2);

          case "LineString":
            return booleanPointOnLine(geom1, geom2, {
              ignoreEndVertices: true
            });

          case "Polygon":
          case "MultiPolygon":
            return booleanPointInPolygon(geom1, geom2, {
              ignoreBoundary: true
            });

          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }

      case "MultiPoint":
        switch (type2) {
          case "MultiPoint":
            return isMultiPointInMultiPoint$1(geom1, geom2);

          case "LineString":
            return isMultiPointOnLine$1(geom1, geom2);

          case "Polygon":
          case "MultiPolygon":
            return isMultiPointInPoly$1(geom1, geom2);

          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }

      case "LineString":
        switch (type2) {
          case "LineString":
            return isLineOnLine$2(geom1, geom2);

          case "Polygon":
          case "MultiPolygon":
            return isLineInPoly$2(geom1, geom2);

          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }

      case "Polygon":
        switch (type2) {
          case "Polygon":
          case "MultiPolygon":
            return isPolyInPoly$2(geom1, geom2);

          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }

      default:
        throw new Error("feature1 " + type1 + " geometry not supported");
    }
  }

  function isPointInMultiPoint$1(point, multiPoint) {
    var i;
    var output = false;

    for (i = 0; i < multiPoint.coordinates.length; i++) {
      if (compareCoords$2(multiPoint.coordinates[i], point.coordinates)) {
        output = true;
        break;
      }
    }

    return output;
  }

  function isMultiPointInMultiPoint$1(multiPoint1, multiPoint2) {
    for (var i = 0; i < multiPoint1.coordinates.length; i++) {
      var anyMatch = false;

      for (var i2 = 0; i2 < multiPoint2.coordinates.length; i2++) {
        if (compareCoords$2(multiPoint1.coordinates[i], multiPoint2.coordinates[i2])) {
          anyMatch = true;
        }
      }

      if (!anyMatch) {
        return false;
      }
    }

    return true;
  }

  function isMultiPointOnLine$1(multiPoint, lineString) {
    var foundInsidePoint = false;

    for (var i = 0; i < multiPoint.coordinates.length; i++) {
      if (!booleanPointOnLine(multiPoint.coordinates[i], lineString)) {
        return false;
      }

      if (!foundInsidePoint) {
        foundInsidePoint = booleanPointOnLine(multiPoint.coordinates[i], lineString, {
          ignoreEndVertices: true
        });
      }
    }

    return foundInsidePoint;
  }

  function isMultiPointInPoly$1(multiPoint, polygon) {
    var output = true;
    var isInside = false;

    for (var i = 0; i < multiPoint.coordinates.length; i++) {
      isInside = booleanPointInPolygon(multiPoint.coordinates[1], polygon);

      if (!isInside) {
        output = false;
        break;
      }

      {
        isInside = booleanPointInPolygon(multiPoint.coordinates[1], polygon, {
          ignoreBoundary: true
        });
      }
    }

    return output && isInside;
  }

  function isLineOnLine$2(lineString1, lineString2) {
    for (var i = 0; i < lineString1.coordinates.length; i++) {
      if (!booleanPointOnLine(lineString1.coordinates[i], lineString2)) {
        return false;
      }
    }

    return true;
  }

  function isLineInPoly$2(linestring, polygon) {
    var polyBbox = bbox$2(polygon);
    var lineBbox = bbox$2(linestring);

    if (!doBBoxOverlap$1(polyBbox, lineBbox)) {
      return false;
    }

    var foundInsidePoint = false;

    for (var i = 0; i < linestring.coordinates.length - 1; i++) {
      if (!booleanPointInPolygon(linestring.coordinates[i], polygon)) {
        return false;
      }

      if (!foundInsidePoint) {
        foundInsidePoint = booleanPointInPolygon(linestring.coordinates[i], polygon, {
          ignoreBoundary: true
        });
      }

      if (!foundInsidePoint) {
        var midpoint = getMidpoint$1(linestring.coordinates[i], linestring.coordinates[i + 1]);
        foundInsidePoint = booleanPointInPolygon(midpoint, polygon, {
          ignoreBoundary: true
        });
      }
    }

    return foundInsidePoint;
  }
  /**
   * Is Polygon2 in Polygon1
   * Only takes into account outer rings
   *
   * @private
   * @param {Polygon} geometry1
   * @param {Polygon|MultiPolygon} geometry2
   * @returns {boolean} true/false
   */


  function isPolyInPoly$2(geometry1, geometry2) {
    var poly1Bbox = bbox$2(geometry1);
    var poly2Bbox = bbox$2(geometry2);

    if (!doBBoxOverlap$1(poly2Bbox, poly1Bbox)) {
      return false;
    }

    for (var i = 0; i < geometry1.coordinates[0].length; i++) {
      if (!booleanPointInPolygon(geometry1.coordinates[0][i], geometry2)) {
        return false;
      }
    }

    return true;
  }

  function doBBoxOverlap$1(bbox1, bbox2) {
    if (bbox1[0] > bbox2[0]) return false;
    if (bbox1[2] < bbox2[2]) return false;
    if (bbox1[1] > bbox2[1]) return false;
    if (bbox1[3] < bbox2[3]) return false;
    return true;
  }
  /**
   * compareCoords
   *
   * @private
   * @param {Position} pair1 point [x,y]
   * @param {Position} pair2 point [x,y]
   * @returns {boolean} true/false if coord pairs match
   */


  function compareCoords$2(pair1, pair2) {
    return pair1[0] === pair2[0] && pair1[1] === pair2[1];
  }
  /**
   * getMidpoint
   *
   * @private
   * @param {Position} pair1 point [x,y]
   * @param {Position} pair2 point [x,y]
   * @returns {Position} midpoint of pair1 and pair2
   */


  function getMidpoint$1(pair1, pair2) {
    return [(pair1[0] + pair2[0]) / 2, (pair1[1] + pair2[1]) / 2];
  }

  /**
   * Creates a {@link Point} grid from a bounding box, {@link FeatureCollection} or {@link Feature}.
   *
   * @name pointGrid
   * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
   * @param {number} cellSide the distance between points, in units
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] used in calculating cellSide, can be degrees, radians, miles, or kilometers
   * @param {Feature<Polygon|MultiPolygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it
   * @param {Object} [options.properties={}] passed to each point of the grid
   * @returns {FeatureCollection<Point>} grid of points
   * @example
   * var extent = [-70.823364, -33.553984, -70.473175, -33.302986];
   * var cellSide = 3;
   * var options = {units: 'miles'};
   *
   * var grid = turf.pointGrid(extent, cellSide, options);
   *
   * //addToMap
   * var addToMap = [grid];
   */

  function pointGrid(bbox, cellSide, options) {
    if (options === void 0) {
      options = {};
    } // Default parameters


    if (options.mask && !options.units) options.units = "kilometers"; // Containers

    var results = []; // Typescript handles the Type Validation
    // if (cellSide === null || cellSide === undefined) throw new Error('cellSide is required');
    // if (!isNumber(cellSide)) throw new Error('cellSide is invalid');
    // if (!bbox) throw new Error('bbox is required');
    // if (!Array.isArray(bbox)) throw new Error('bbox must be array');
    // if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');
    // if (mask && ['Polygon', 'MultiPolygon'].indexOf(getType(mask)) === -1) throw new Error('options.mask must be a (Multi)Polygon');

    var west = bbox[0];
    var south = bbox[1];
    var east = bbox[2];
    var north = bbox[3];
    var xFraction = cellSide / distance$1([west, south], [east, south], options);
    var cellWidth = xFraction * (east - west);
    var yFraction = cellSide / distance$1([west, south], [west, north], options);
    var cellHeight = yFraction * (north - south);
    var bboxWidth = east - west;
    var bboxHeight = north - south;
    var columns = Math.floor(bboxWidth / cellWidth);
    var rows = Math.floor(bboxHeight / cellHeight); // adjust origin of the grid

    var deltaX = (bboxWidth - columns * cellWidth) / 2;
    var deltaY = (bboxHeight - rows * cellHeight) / 2;
    var currentX = west + deltaX;

    while (currentX <= east) {
      var currentY = south + deltaY;

      while (currentY <= north) {
        var cellPt = point([currentX, currentY], options.properties);

        if (options.mask) {
          if (booleanWithin(cellPt, options.mask)) results.push(cellPt);
        } else {
          results.push(cellPt);
        }

        currentY += cellHeight;
      }

      currentX += cellWidth;
    }

    return featureCollection$1(results);
  }

  /**
   * Takes a GeoJSON Feature or FeatureCollection and truncates the precision of the geometry.
   *
   * @name truncate
   * @param {GeoJSON} geojson any GeoJSON Feature, FeatureCollection, Geometry or GeometryCollection.
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.precision=6] coordinate decimal precision
   * @param {number} [options.coordinates=3] maximum number of coordinates (primarly used to remove z coordinates)
   * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
   * @returns {GeoJSON} layer with truncated geometry
   * @example
   * var point = turf.point([
   *     70.46923055566859,
   *     58.11088890802906,
   *     1508
   * ]);
   * var options = {precision: 3, coordinates: 2};
   * var truncated = turf.truncate(point, options);
   * //=truncated.geometry.coordinates => [70.469, 58.111]
   *
   * //addToMap
   * var addToMap = [truncated];
   */

  function truncate(geojson, options) {
    if (options === void 0) {
      options = {};
    } // Optional parameters


    var precision = options.precision;
    var coordinates = options.coordinates;
    var mutate = options.mutate; // default params

    precision = precision === undefined || precision === null || isNaN(precision) ? 6 : precision;
    coordinates = coordinates === undefined || coordinates === null || isNaN(coordinates) ? 3 : coordinates; // validation

    if (!geojson) throw new Error("<geojson> is required");
    if (typeof precision !== "number") throw new Error("<precision> must be a number");
    if (typeof coordinates !== "number") throw new Error("<coordinates> must be a number"); // prevent input mutation

    if (mutate === false || mutate === undefined) geojson = JSON.parse(JSON.stringify(geojson));
    var factor = Math.pow(10, precision); // Truncate Coordinates

    coordEach$1(geojson, function (coords) {
      truncateCoords(coords, factor, coordinates);
    });
    return geojson;
  }
  /**
   * Truncate Coordinates - Mutates coordinates in place
   *
   * @private
   * @param {Array<any>} coords Geometry Coordinates
   * @param {number} factor rounding factor for coordinate decimal precision
   * @param {number} coordinates maximum number of coordinates (primarly used to remove z coordinates)
   * @returns {Array<any>} mutated coordinates
   */


  function truncateCoords(coords, factor, coordinates) {
    // Remove extra coordinates (usually elevation coordinates and more)
    if (coords.length > coordinates) coords.splice(coordinates, coords.length); // Truncate coordinate decimals

    for (var i = 0; i < coords.length; i++) {
      coords[i] = Math.round(coords[i] * factor) / factor;
    }

    return coords;
  }

  /**
   * Flattens any {@link GeoJSON} to a {@link FeatureCollection} inspired by [geojson-flatten](https://github.com/tmcw/geojson-flatten).
   *
   * @name flatten
   * @param {GeoJSON} geojson any valid GeoJSON Object
   * @returns {FeatureCollection<any>} all Multi-Geometries are flattened into single Features
   * @example
   * var multiGeometry = turf.multiPolygon([
   *   [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],
   *   [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],
   *   [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]
   * ]);
   *
   * var flatten = turf.flatten(multiGeometry);
   *
   * //addToMap
   * var addToMap = [flatten]
   */

  function flatten(geojson) {
    if (!geojson) throw new Error("geojson is required");
    var results = [];
    flattenEach$1(geojson, function (feature) {
      results.push(feature);
    });
    return featureCollection$1(results);
  }

  /**
   * Divides a {@link LineString} into chunks of a specified length.
   * If the line is shorter than the segment length then the original line is returned.
   *
   * @name lineChunk
   * @param {FeatureCollection|Geometry|Feature<LineString|MultiLineString>} geojson the lines to split
   * @param {number} segmentLength how long to make each segment
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] units can be degrees, radians, miles, or kilometers
   * @param {boolean} [options.reverse=false] reverses coordinates to start the first chunked segment at the end
   * @returns {FeatureCollection<LineString>} collection of line segments
   * @example
   * var line = turf.lineString([[-95, 40], [-93, 45], [-85, 50]]);
   *
   * var chunk = turf.lineChunk(line, 15, {units: 'miles'});
   *
   * //addToMap
   * var addToMap = [chunk];
   */

  function lineChunk(geojson, segmentLength, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var units = options.units;
    var reverse = options.reverse; // Validation

    if (!geojson) throw new Error("geojson is required");
    if (segmentLength <= 0) throw new Error("segmentLength must be greater than 0"); // Container

    var results = []; // Flatten each feature to simple LineString

    flattenEach$1(geojson, function (feature) {
      // reverses coordinates to start the first chunked segment at the end
      if (reverse) feature.geometry.coordinates = feature.geometry.coordinates.reverse();
      sliceLineSegments(feature, segmentLength, units, function (segment) {
        results.push(segment);
      });
    });
    return featureCollection$1(results);
  }
  /**
   * Slice Line Segments
   *
   * @private
   * @param {Feature<LineString>} line GeoJSON LineString
   * @param {number} segmentLength how long to make each segment
   * @param {string}[units='kilometers'] units can be degrees, radians, miles, or kilometers
   * @param {Function} callback iterate over sliced line segments
   * @returns {void}
   */


  function sliceLineSegments(line, segmentLength, units, callback) {
    var lineLength = length$1(line, {
      units: units
    }); // If the line is shorter than the segment length then the orginal line is returned.

    if (lineLength <= segmentLength) return callback(line);
    var numberOfSegments = lineLength / segmentLength; // If numberOfSegments is integer, no need to plus 1

    if (!Number.isInteger(numberOfSegments)) {
      numberOfSegments = Math.floor(numberOfSegments) + 1;
    }

    for (var i = 0; i < numberOfSegments; i++) {
      var outline = lineSliceAlong(line, segmentLength * i, segmentLength * (i + 1), {
        units: units
      });
      callback(outline, i);
    }
  }

  function isects(feature, filterFn, useSpatialIndex) {
    if (feature.geometry.type !== "Polygon") throw new Error("The input feature must be a Polygon");
    if (useSpatialIndex === undefined) useSpatialIndex = 1;
    var coord = feature.geometry.coordinates;
    var output = [];
    var seen = {};

    if (useSpatialIndex) {
      var allEdgesAsRbushTreeItems = [];

      for (var ring0 = 0; ring0 < coord.length; ring0++) {
        for (var edge0 = 0; edge0 < coord[ring0].length - 1; edge0++) {
          allEdgesAsRbushTreeItems.push(rbushTreeItem(ring0, edge0));
        }
      }

      var tree = rbush_1();
      tree.load(allEdgesAsRbushTreeItems);
    }

    for (var ringA = 0; ringA < coord.length; ringA++) {
      for (var edgeA = 0; edgeA < coord[ringA].length - 1; edgeA++) {
        if (useSpatialIndex) {
          var bboxOverlaps = tree.search(rbushTreeItem(ringA, edgeA));
          bboxOverlaps.forEach(function (bboxIsect) {
            var ring1 = bboxIsect.ring;
            var edge1 = bboxIsect.edge;
            ifIsectAddToOutput(ringA, edgeA, ring1, edge1);
          });
        } else {
          for (var ring1 = 0; ring1 < coord.length; ring1++) {
            for (var edge1 = 0; edge1 < coord[ring1].length - 1; edge1++) {
              // TODO: speedup possible if only interested in unique: start last two loops at ringA and edgeA+1
              ifIsectAddToOutput(ringA, edgeA, ring1, edge1);
            }
          }
        }
      }
    }

    if (!filterFn) output = {
      type: "Feature",
      geometry: {
        type: "MultiPoint",
        coordinates: output
      }
    };
    return output; // Function to check if two edges intersect and add the intersection to the output

    function ifIsectAddToOutput(ring0, edge0, ring1, edge1) {
      var start0 = coord[ring0][edge0];
      var end0 = coord[ring0][edge0 + 1];
      var start1 = coord[ring1][edge1];
      var end1 = coord[ring1][edge1 + 1];
      var isect = intersect$2(start0, end0, start1, end1);
      if (isect === null) return; // discard parallels and coincidence

      var frac0;
      var frac1;

      if (end0[0] !== start0[0]) {
        frac0 = (isect[0] - start0[0]) / (end0[0] - start0[0]);
      } else {
        frac0 = (isect[1] - start0[1]) / (end0[1] - start0[1]);
      }

      if (end1[0] !== start1[0]) {
        frac1 = (isect[0] - start1[0]) / (end1[0] - start1[0]);
      } else {
        frac1 = (isect[1] - start1[1]) / (end1[1] - start1[1]);
      }

      if (frac0 >= 1 || frac0 <= 0 || frac1 >= 1 || frac1 <= 0) return; // require segment intersection

      var key = isect;
      var unique = !seen[key];

      if (unique) {
        seen[key] = true;
      }

      if (filterFn) {
        output.push(filterFn(isect, ring0, edge0, start0, end0, frac0, ring1, edge1, start1, end1, frac1, unique));
      } else {
        output.push(isect);
      }
    } // Function to return a rbush tree item given an ring and edge number


    function rbushTreeItem(ring, edge) {
      var start = coord[ring][edge];
      var end = coord[ring][edge + 1];
      var minX;
      var maxX;
      var minY;
      var maxY;

      if (start[0] < end[0]) {
        minX = start[0];
        maxX = end[0];
      } else {
        minX = end[0];
        maxX = start[0];
      }

      if (start[1] < end[1]) {
        minY = start[1];
        maxY = end[1];
      } else {
        minY = end[1];
        maxY = start[1];
      }

      return {
        minX: minX,
        minY: minY,
        maxX: maxX,
        maxY: maxY,
        ring: ring,
        edge: edge
      };
    }
  } // Function to compute where two lines (not segments) intersect. From https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection


  function intersect$2(start0, end0, start1, end1) {
    if (equalArrays(start0, start1) || equalArrays(start0, end1) || equalArrays(end0, start1) || equalArrays(end1, start1)) return null;
    var x0 = start0[0],
        y0 = start0[1],
        x1 = end0[0],
        y1 = end0[1],
        x2 = start1[0],
        y2 = start1[1],
        x3 = end1[0],
        y3 = end1[1];
    var denom = (x0 - x1) * (y2 - y3) - (y0 - y1) * (x2 - x3);
    if (denom === 0) return null;
    var x4 = ((x0 * y1 - y0 * x1) * (x2 - x3) - (x0 - x1) * (x2 * y3 - y2 * x3)) / denom;
    var y4 = ((x0 * y1 - y0 * x1) * (y2 - y3) - (y0 - y1) * (x2 * y3 - y2 * x3)) / denom;
    return [x4, y4];
  } // Function to compare Arrays of numbers. From http://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript


  function equalArrays(array1, array2) {
    // if the other array is a falsy value, return
    if (!array1 || !array2) return false; // compare lengths - can save a lot of time

    if (array1.length !== array2.length) return false;

    for (var i = 0, l = array1.length; i < l; i++) {
      // Check if we have nested arrays
      if (array1[i] instanceof Array && array2[i] instanceof Array) {
        // recurse into the nested arrays
        if (!equalArrays(array1[i], array2[i])) return false;
      } else if (array1[i] !== array2[i]) {
        // Warning - two different object instances will never be equal: {x:20} !== {x:20}
        return false;
      }
    }

    return true;
  }
  /**
   * Takes a complex (i.e. self-intersecting) geojson polygon, and breaks it down into its composite simple, non-self-intersecting one-ring polygons.
   *
   * @module simplepolygon
   * @param {Feature} feature Input polygon. This polygon may be unconform the {@link https://en.wikipedia.org/wiki/Simple_Features|Simple Features standard} in the sense that it's inner and outer rings may cross-intersect or self-intersect, that the outer ring must not contain the optional inner rings and that the winding number must not be positive for the outer and negative for the inner rings.
   * @return {FeatureCollection} Feature collection containing the simple, non-self-intersecting one-ring polygon features that the complex polygon is composed of. These simple polygons have properties such as their parent polygon, winding number and net winding number.
   *
   * @example
   * var poly = {
   *   "type": "Feature",
   *   "geometry": {
   *     "type": "Polygon",
   *     "coordinates": [[[0,0],[2,0],[0,2],[2,2],[0,0]]]
   *   }
   * };
   *
   * var result = simplepolygon(poly);
   *
   * // =result
   * // which will be a featureCollection of two polygons, one with coordinates [[[0,0],[2,0],[1,1],[0,0]]], parent -1, winding 1 and net winding 1, and one with coordinates [[[1,1],[0,2],[2,2],[1,1]]], parent -1, winding -1 and net winding -1
   */


  function simplepolygon(feature) {
    // Check input
    if (feature.type != "Feature") throw new Error("The input must a geojson object of type Feature");
    if (feature.geometry === undefined || feature.geometry == null) throw new Error("The input must a geojson object with a non-empty geometry");
    if (feature.geometry.type != "Polygon") throw new Error("The input must be a geojson Polygon"); // Process input

    var numRings = feature.geometry.coordinates.length;
    var vertices = [];

    for (var i = 0; i < numRings; i++) {
      var ring = feature.geometry.coordinates[i];

      if (!equalArrays$1(ring[0], ring[ring.length - 1])) {
        ring.push(ring[0]); // Close input ring if it is not
      }

      vertices.push.apply(vertices, ring.slice(0, ring.length - 1));
    }

    if (!isUnique(vertices)) throw new Error("The input polygon may not have duplicate vertices (except for the first and last vertex of each ring)");
    var numvertices = vertices.length; // number of input ring vertices, with the last closing vertices not counted
    // Compute self-intersections

    var selfIsectsData = isects(feature, function filterFn(isect, ring0, edge0, start0, end0, frac0, ring1, edge1, start1, end1, frac1, unique) {
      return [isect, ring0, edge0, start0, end0, frac0, ring1, edge1, start1, end1, frac1, unique];
    });
    var numSelfIsect = selfIsectsData.length; // If no self-intersections are found, the input rings are the output rings. Hence, we must only compute their winding numbers, net winding numbers and (since ohers rings could lie outside the first ring) parents.

    if (numSelfIsect == 0) {
      var outputFeatureArray = [];

      for (var i = 0; i < numRings; i++) {
        outputFeatureArray.push(polygon([feature.geometry.coordinates[i]], {
          parent: -1,
          winding: windingOfRing(feature.geometry.coordinates[i])
        }));
      }

      var output = featureCollection$1(outputFeatureArray);
      determineParents();
      setNetWinding();
      return output;
    } // If self-intersections are found, we will compute the output rings with the help of two intermediate variables
    // First, we build the pseudo vertex list and intersection list
    // The Pseudo vertex list is an array with for each ring an array with for each edge an array containing the pseudo-vertices (as made by their constructor) that have this ring and edge as ringAndEdgeIn, sorted for each edge by their fractional distance on this edge. It's length hence equals numRings.


    var pseudoVtxListByRingAndEdge = []; // The intersection list is an array containing intersections (as made by their constructor). First all numvertices ring-vertex-intersections, then all self-intersections (intra- and inter-ring). The order of the latter is not important but is permanent once given.

    var isectList = []; // Adding ring-pseudo-vertices to pseudoVtxListByRingAndEdge and ring-vertex-intersections to isectList

    for (var i = 0; i < numRings; i++) {
      pseudoVtxListByRingAndEdge.push([]);

      for (var j = 0; j < feature.geometry.coordinates[i].length - 1; j++) {
        // Each edge will feature one ring-pseudo-vertex in its array, on the last position. i.e. edge j features the ring-pseudo-vertex of the ring vertex j+1, which has ringAndEdgeIn = [i,j], on the last position.
        pseudoVtxListByRingAndEdge[i].push([new PseudoVtx(feature.geometry.coordinates[i][modulo(j + 1, feature.geometry.coordinates[i].length - 1)], 1, [i, j], [i, modulo(j + 1, feature.geometry.coordinates[i].length - 1)], undefined)]); // The first numvertices elements in isectList correspond to the ring-vertex-intersections

        isectList.push(new Isect(feature.geometry.coordinates[i][j], [i, modulo(j - 1, feature.geometry.coordinates[i].length - 1)], [i, j], undefined, undefined, false, true));
      }
    } // Adding intersection-pseudo-vertices to pseudoVtxListByRingAndEdge and self-intersections to isectList


    for (var i = 0; i < numSelfIsect; i++) {
      // Adding intersection-pseudo-vertices made using selfIsectsData to pseudoVtxListByRingAndEdge's array corresponding to the incomming ring and edge
      pseudoVtxListByRingAndEdge[selfIsectsData[i][1]][selfIsectsData[i][2]].push(new PseudoVtx(selfIsectsData[i][0], selfIsectsData[i][5], [selfIsectsData[i][1], selfIsectsData[i][2]], [selfIsectsData[i][6], selfIsectsData[i][7]], undefined)); // selfIsectsData contains double mentions of each intersection, but we only want to add them once to isectList

      if (selfIsectsData[i][11]) isectList.push(new Isect(selfIsectsData[i][0], [selfIsectsData[i][1], selfIsectsData[i][2]], [selfIsectsData[i][6], selfIsectsData[i][7]], undefined, undefined, true, true));
    }

    var numIsect = isectList.length; // Sort edge arrays of pseudoVtxListByRingAndEdge by the fractional distance 'param'

    for (var i = 0; i < pseudoVtxListByRingAndEdge.length; i++) {
      for (var j = 0; j < pseudoVtxListByRingAndEdge[i].length; j++) {
        pseudoVtxListByRingAndEdge[i][j].sort(function (a, b) {
          return a.param < b.param ? -1 : 1;
        });
      }
    } // Make a spatial index of intersections, in preperation for the following two steps


    var allIsectsAsIsectRbushTreeItem = [];

    for (var i = 0; i < numIsect; i++) {
      allIsectsAsIsectRbushTreeItem.push({
        minX: isectList[i].coord[0],
        minY: isectList[i].coord[1],
        maxX: isectList[i].coord[0],
        maxY: isectList[i].coord[1],
        index: i
      }); // could pass isect: isectList[i], but not necessary
    }

    var isectRbushTree = rbush_1();
    isectRbushTree.load(allIsectsAsIsectRbushTreeItem); // Now we will teach each intersection in isectList which is the next intersection along both it's [ring, edge]'s, in two steps.
    // First, we find the next intersection for each pseudo-vertex in pseudoVtxListByRingAndEdge:
    // For each pseudovertex in pseudoVtxListByRingAndEdge (3 loops) look at the next pseudovertex on that edge and find the corresponding intersection by comparing coordinates

    for (var i = 0; i < pseudoVtxListByRingAndEdge.length; i++) {
      for (var j = 0; j < pseudoVtxListByRingAndEdge[i].length; j++) {
        for (var k = 0; k < pseudoVtxListByRingAndEdge[i][j].length; k++) {
          var coordToFind;

          if (k == pseudoVtxListByRingAndEdge[i][j].length - 1) {
            // If it's the last pseudoVertex on that edge, then the next pseudoVertex is the first one on the next edge of that ring.
            coordToFind = pseudoVtxListByRingAndEdge[i][modulo(j + 1, feature.geometry.coordinates[i].length - 1)][0].coord;
          } else {
            coordToFind = pseudoVtxListByRingAndEdge[i][j][k + 1].coord;
          }

          var IsectRbushTreeItemFound = isectRbushTree.search({
            minX: coordToFind[0],
            minY: coordToFind[1],
            maxX: coordToFind[0],
            maxY: coordToFind[1]
          })[0]; // We can take [0] of the result, because there is only one isect correponding to a pseudo-vertex

          pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn = IsectRbushTreeItemFound.index;
        }
      }
    } // Second, we port this knowledge of the next intersection over to the intersections in isectList, by finding the intersection corresponding to each pseudo-vertex and copying the pseudo-vertex' knownledge of the next-intersection over to the intersection


    for (var i = 0; i < pseudoVtxListByRingAndEdge.length; i++) {
      for (var j = 0; j < pseudoVtxListByRingAndEdge[i].length; j++) {
        for (var k = 0; k < pseudoVtxListByRingAndEdge[i][j].length; k++) {
          var coordToFind = pseudoVtxListByRingAndEdge[i][j][k].coord;
          var IsectRbushTreeItemFound = isectRbushTree.search({
            minX: coordToFind[0],
            minY: coordToFind[1],
            maxX: coordToFind[0],
            maxY: coordToFind[1]
          })[0]; // We can take [0] of the result, because there is only one isect correponding to a pseudo-vertex

          var l = IsectRbushTreeItemFound.index;

          if (l < numvertices) {
            // Special treatment at ring-vertices: we correct the misnaming that happened in the previous block, since ringAndEdgeOut = ringAndEdge2 for ring vertices.
            isectList[l].nxtIsectAlongRingAndEdge2 = pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn;
          } else {
            // Port the knowledge of the next intersection from the pseudo-vertices to the intersections, depending on how the edges are labeled in the pseudo-vertex and intersection.
            if (equalArrays$1(isectList[l].ringAndEdge1, pseudoVtxListByRingAndEdge[i][j][k].ringAndEdgeIn)) {
              isectList[l].nxtIsectAlongRingAndEdge1 = pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn;
            } else {
              isectList[l].nxtIsectAlongRingAndEdge2 = pseudoVtxListByRingAndEdge[i][j][k].nxtIsectAlongEdgeIn;
            }
          }
        }
      }
    } // This explains why, eventhough when we will walk away from an intersection, we will walk way from the corresponding pseudo-vertex along edgeOut, pseudo-vertices have the property 'nxtIsectAlongEdgeIn' in stead of some propery 'nxtPseudoVtxAlongEdgeOut'. This is because this property (which is easy to find out) is used in the above for nxtIsectAlongRingAndEdge1 and nxtIsectAlongRingAndEdge2!
    // Before we start walking over the intersections to build the output rings, we prepare a queue that stores information on intersections we still have to deal with, and put at least one intersection in it.
    // This queue will contain information on intersections where we can start walking from once the current walk is finished, and its parent output ring (the smallest output ring it lies within, -1 if no parent or parent unknown yet) and its winding number (which we can already determine).


    var queue = []; // For each output ring, add the ring-vertex-intersection with the smalles x-value (i.e. the left-most) as a start intersection. By choosing such an extremal intersections, we are sure to start at an intersection that is a convex vertex of its output ring. By adding them all to the queue, we are sure that no rings will be forgotten. If due to ring-intersections such an intersection will be encountered while walking, it will be removed from the queue.

    var i = 0;

    for (var j = 0; j < numRings; j++) {
      var leftIsect = i;

      for (var k = 0; k < feature.geometry.coordinates[j].length - 1; k++) {
        if (isectList[i].coord[0] < isectList[leftIsect].coord[0]) {
          leftIsect = i;
        }

        i++;
      } // Compute winding at this left-most ring-vertex-intersection. We thus this by using our knowledge that this extremal vertex must be a convex vertex.
      // We first find the intersection before and after it, and then use them to determine the winding number of the corresponding output ring, since we know that an extremal vertex of a simple, non-self-intersecting ring is always convex, so the only reason it would not be is because the winding number we use to compute it is wrong


      var isectAfterLeftIsect = isectList[leftIsect].nxtIsectAlongRingAndEdge2;

      for (var k = 0; k < isectList.length; k++) {
        if (isectList[k].nxtIsectAlongRingAndEdge1 == leftIsect || isectList[k].nxtIsectAlongRingAndEdge2 == leftIsect) {
          var isectBeforeLeftIsect = k;
          break;
        }
      }

      var windingAtIsect = isConvex([isectList[isectBeforeLeftIsect].coord, isectList[leftIsect].coord, isectList[isectAfterLeftIsect].coord], true) ? 1 : -1;
      queue.push({
        isect: leftIsect,
        parent: -1,
        winding: windingAtIsect
      });
    } // Sort the queue by the same criterion used to find the leftIsect: the left-most leftIsect must be last in the queue, such that it will be popped first, such that we will work from out to in regarding input rings. This assumtion is used when predicting the winding number and parent of a new queue member.


    queue.sort(function (a, b) {
      return isectList[a.isect].coord > isectList[b.isect].coord ? -1 : 1;
    }); // Initialise output

    var outputFeatureArray = []; // While the queue is not empty, take the last object (i.e. its intersection) out and start making an output ring by walking in the direction that has not been walked away over yet.

    while (queue.length > 0) {
      // Get the last object out of the queue
      var popped = queue.pop();
      var startIsect = popped.isect;
      var currentOutputRingParent = popped.parent;
      var currentOutputRingWinding = popped.winding; // Make new output ring and add vertex from starting intersection

      var currentOutputRing = outputFeatureArray.length;
      var currentOutputRingCoords = [isectList[startIsect].coord]; // Set up the variables used while walking over intersections: 'currentIsect', 'nxtIsect' and 'walkingRingAndEdge'

      var currentIsect = startIsect;

      if (isectList[startIsect].ringAndEdge1Walkable) {
        var walkingRingAndEdge = isectList[startIsect].ringAndEdge1;
        var nxtIsect = isectList[startIsect].nxtIsectAlongRingAndEdge1;
      } else {
        var walkingRingAndEdge = isectList[startIsect].ringAndEdge2;
        var nxtIsect = isectList[startIsect].nxtIsectAlongRingAndEdge2;
      } // While we have not arrived back at the same intersection, keep walking


      while (!equalArrays$1(isectList[startIsect].coord, isectList[nxtIsect].coord)) {
        currentOutputRingCoords.push(isectList[nxtIsect].coord); // If the next intersection is queued, we can remove it, because we will go there now.

        var nxtIsectInQueue = undefined;

        for (var i = 0; i < queue.length; i++) {
          if (queue[i].isect == nxtIsect) {
            nxtIsectInQueue = i;
            break;
          }
        }

        if (nxtIsectInQueue != undefined) {
          queue.splice(nxtIsectInQueue, 1);
        } // Arriving at this new intersection, we know which will be our next walking ring and edge (if we came from 1 we will walk away from 2 and vice versa),
        // So we can set it as our new walking ring and intersection and remember that we (will) have walked over it
        // If we have never walked away from this new intersection along the other ring and edge then we will soon do, add the intersection (and the parent wand winding number) to the queue
        // (We can predict the winding number and parent as follows: if the edge is convex, the other output ring started from there will have the alternate winding and lie outside of the current one, and thus have the same parent ring as the current ring. Otherwise, it will have the same winding number and lie inside of the current ring. We are, however, only sure of this of an output ring started from there does not enclose the current ring. This is why the initial queue's intersections must be sorted such that outer ones come out first.)
        // We then update the other two walking variables.


        if (equalArrays$1(walkingRingAndEdge, isectList[nxtIsect].ringAndEdge1)) {
          walkingRingAndEdge = isectList[nxtIsect].ringAndEdge2;
          isectList[nxtIsect].ringAndEdge2Walkable = false;

          if (isectList[nxtIsect].ringAndEdge1Walkable) {
            var pushing = {
              isect: nxtIsect
            };

            if (isConvex([isectList[currentIsect].coord, isectList[nxtIsect].coord, isectList[isectList[nxtIsect].nxtIsectAlongRingAndEdge2].coord], currentOutputRingWinding == 1)) {
              pushing.parent = currentOutputRingParent;
              pushing.winding = -currentOutputRingWinding;
            } else {
              pushing.parent = currentOutputRing;
              pushing.winding = currentOutputRingWinding;
            }

            queue.push(pushing);
          }

          currentIsect = nxtIsect;
          nxtIsect = isectList[nxtIsect].nxtIsectAlongRingAndEdge2;
        } else {
          walkingRingAndEdge = isectList[nxtIsect].ringAndEdge1;
          isectList[nxtIsect].ringAndEdge1Walkable = false;

          if (isectList[nxtIsect].ringAndEdge2Walkable) {
            var pushing = {
              isect: nxtIsect
            };

            if (isConvex([isectList[currentIsect].coord, isectList[nxtIsect].coord, isectList[isectList[nxtIsect].nxtIsectAlongRingAndEdge1].coord], currentOutputRingWinding == 1)) {
              pushing.parent = currentOutputRingParent;
              pushing.winding = -currentOutputRingWinding;
            } else {
              pushing.parent = currentOutputRing;
              pushing.winding = currentOutputRingWinding;
            }

            queue.push(pushing);
          }

          currentIsect = nxtIsect;
          nxtIsect = isectList[nxtIsect].nxtIsectAlongRingAndEdge1;
        }
      } // Close output ring


      currentOutputRingCoords.push(isectList[nxtIsect].coord); // Push output ring to output

      outputFeatureArray.push(polygon([currentOutputRingCoords], {
        index: currentOutputRing,
        parent: currentOutputRingParent,
        winding: currentOutputRingWinding,
        netWinding: undefined
      }));
    }

    var output = featureCollection$1(outputFeatureArray);
    determineParents();
    setNetWinding(); // These functions are also used if no intersections are found

    function determineParents() {
      var featuresWithoutParent = [];

      for (var i = 0; i < output.features.length; i++) {
        if (output.features[i].properties.parent == -1) featuresWithoutParent.push(i);
      }

      if (featuresWithoutParent.length > 1) {
        for (var i = 0; i < featuresWithoutParent.length; i++) {
          var parent = -1;
          var parentArea = Infinity;

          for (var j = 0; j < output.features.length; j++) {
            if (featuresWithoutParent[i] == j) continue;

            if (booleanPointInPolygon(output.features[featuresWithoutParent[i]].geometry.coordinates[0][0], output.features[j], {
              ignoreBoundary: true
            })) {
              if (area(output.features[j]) < parentArea) {
                parent = j;
              }
            }
          }

          output.features[featuresWithoutParent[i]].properties.parent = parent;
        }
      }
    }

    function setNetWinding() {
      for (var i = 0; i < output.features.length; i++) {
        if (output.features[i].properties.parent == -1) {
          var netWinding = output.features[i].properties.winding;
          output.features[i].properties.netWinding = netWinding;
          setNetWindingOfChildren(i, netWinding);
        }
      }
    }

    function setNetWindingOfChildren(parent, ParentNetWinding) {
      for (var i = 0; i < output.features.length; i++) {
        if (output.features[i].properties.parent == parent) {
          var netWinding = ParentNetWinding + output.features[i].properties.winding;
          output.features[i].properties.netWinding = netWinding;
          setNetWindingOfChildren(i, netWinding);
        }
      }
    }

    return output;
  } // Constructor for (ring- or intersection-) pseudo-vertices.


  var PseudoVtx = function PseudoVtx(coord, param, ringAndEdgeIn, ringAndEdgeOut, nxtIsectAlongEdgeIn) {
    this.coord = coord; // [x,y] of this pseudo-vertex

    this.param = param; // fractional distance of this intersection on incomming edge

    this.ringAndEdgeIn = ringAndEdgeIn; // [ring index, edge index] of incomming edge

    this.ringAndEdgeOut = ringAndEdgeOut; // [ring index, edge index] of outgoing edge

    this.nxtIsectAlongEdgeIn = nxtIsectAlongEdgeIn; // The next intersection when following the incomming edge (so not when following ringAndEdgeOut!)
  }; // Constructor for an intersection. There are two intersection-pseudo-vertices per self-intersection and one ring-pseudo-vertex per ring-vertex-intersection. Their labels 1 and 2 are not assigned a particular meaning but are permanent once given.


  var Isect = function Isect(coord, ringAndEdge1, ringAndEdge2, nxtIsectAlongRingAndEdge1, nxtIsectAlongRingAndEdge2, ringAndEdge1Walkable, ringAndEdge2Walkable) {
    this.coord = coord; // [x,y] of this intersection

    this.ringAndEdge1 = ringAndEdge1; // first edge of this intersection

    this.ringAndEdge2 = ringAndEdge2; // second edge of this intersection

    this.nxtIsectAlongRingAndEdge1 = nxtIsectAlongRingAndEdge1; // the next intersection when following ringAndEdge1

    this.nxtIsectAlongRingAndEdge2 = nxtIsectAlongRingAndEdge2; // the next intersection when following ringAndEdge2

    this.ringAndEdge1Walkable = ringAndEdge1Walkable; // May we (still) walk away from this intersection over ringAndEdge1?

    this.ringAndEdge2Walkable = ringAndEdge2Walkable; // May we (still) walk away from this intersection over ringAndEdge2?
  }; // Function to determine if three consecutive points of a simple, non-self-intersecting ring make up a convex vertex, assuming the ring is right- or lefthanded


  function isConvex(pts, righthanded) {
    // 'pts' is an [x,y] pair
    // 'righthanded' is a boolean
    if (typeof righthanded === "undefined") righthanded = true;
    if (pts.length != 3) throw new Error("This function requires an array of three points [x,y]");
    var d = (pts[1][0] - pts[0][0]) * (pts[2][1] - pts[0][1]) - (pts[1][1] - pts[0][1]) * (pts[2][0] - pts[0][0]);
    return d >= 0 == righthanded;
  } // Function to compute winding of simple, non-self-intersecting ring


  function windingOfRing(ring) {
    // 'ring' is an array of [x,y] pairs with the last equal to the first
    // Compute the winding number based on the vertex with the smallest x-value, it precessor and successor. An extremal vertex of a simple, non-self-intersecting ring is always convex, so the only reason it is not is because the winding number we use to compute it is wrong
    var leftVtx = 0;

    for (var i = 0; i < ring.length - 1; i++) {
      if (ring[i][0] < ring[leftVtx][0]) leftVtx = i;
    }

    if (isConvex([ring[modulo(leftVtx - 1, ring.length - 1)], ring[leftVtx], ring[modulo(leftVtx + 1, ring.length - 1)]], true)) {
      var winding = 1;
    } else {
      var winding = -1;
    }

    return winding;
  } // Function to compare Arrays of numbers. From http://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript


  function equalArrays$1(array1, array2) {
    // if the other array is a falsy value, return
    if (!array1 || !array2) return false; // compare lengths - can save a lot of time

    if (array1.length != array2.length) return false;

    for (var i = 0, l = array1.length; i < l; i++) {
      // Check if we have nested arrays
      if (array1[i] instanceof Array && array2[i] instanceof Array) {
        // recurse into the nested arrays
        if (!equalArrays$1(array1[i], array2[i])) return false;
      } else if (array1[i] != array2[i]) {
        // Warning - two different object instances will never be equal: {x:20} != {x:20}
        return false;
      }
    }

    return true;
  } // Fix Javascript modulo for negative number. From http://stackoverflow.com/questions/4467539/javascript-modulo-not-behaving


  function modulo(n, m) {
    return (n % m + m) % m;
  } // Function to check if array is unique (i.e. all unique elements, i.e. no duplicate elements)


  function isUnique(array) {
    var u = {};
    var isUnique = 1;

    for (var i = 0, l = array.length; i < l; ++i) {
      if (Object.prototype.hasOwnProperty.call(u, array[i])) {
        isUnique = 0;
        break;
      }

      u[array[i]] = 1;
    }

    return isUnique;
  }
  /**
   * Takes a kinked polygon and returns a feature collection of polygons that have no kinks.
   * Uses [simplepolygon](https://github.com/mclaeysb/simplepolygon) internally.
   *
   * @name unkinkPolygon
   * @param {FeatureCollection|Feature<Polygon|MultiPolygon>} geojson GeoJSON Polygon or MultiPolygon
   * @returns {FeatureCollection<Polygon>} Unkinked polygons
   * @example
   * var poly = turf.polygon([[[0, 0], [2, 0], [0, 2], [2, 2], [0, 0]]]);
   *
   * var result = turf.unkinkPolygon(poly);
   *
   * //addToMap
   * var addToMap = [poly, result]
   */


  function unkinkPolygon(geojson) {
    var features = [];
    flattenEach$1(geojson, function (feature) {
      if (feature.geometry.type !== "Polygon") return;
      featureEach$2(simplepolygon(feature), function (poly) {
        features.push(polygon(poly.geometry.coordinates, feature.properties));
      });
    });
    return featureCollection$1(features);
  }

  var D2R = Math.PI / 180;
  var R2D = 180 / Math.PI;

  var Coord = function Coord(lon, lat) {
    this.lon = lon;
    this.lat = lat;
    this.x = D2R * lon;
    this.y = D2R * lat;
  };

  Coord.prototype.view = function () {
    return String(this.lon).slice(0, 4) + "," + String(this.lat).slice(0, 4);
  };

  Coord.prototype.antipode = function () {
    var anti_lat = -1 * this.lat;
    var anti_lon = this.lon < 0 ? 180 + this.lon : (180 - this.lon) * -1;
    return new Coord(anti_lon, anti_lat);
  };

  var LineString$1 = function LineString() {
    this.coords = [];
    this.length = 0;
  };

  LineString$1.prototype.move_to = function (coord) {
    this.length++;
    this.coords.push(coord);
  };

  var Arc = function Arc(properties) {
    this.properties = properties || {};
    this.geometries = [];
  };

  Arc.prototype.json = function () {
    if (this.geometries.length <= 0) {
      return {
        geometry: {
          type: "LineString",
          coordinates: null
        },
        type: "Feature",
        properties: this.properties
      };
    } else if (this.geometries.length === 1) {
      return {
        geometry: {
          type: "LineString",
          coordinates: this.geometries[0].coords
        },
        type: "Feature",
        properties: this.properties
      };
    } else {
      var multiline = [];

      for (var i = 0; i < this.geometries.length; i++) {
        multiline.push(this.geometries[i].coords);
      }

      return {
        geometry: {
          type: "MultiLineString",
          coordinates: multiline
        },
        type: "Feature",
        properties: this.properties
      };
    }
  }; // TODO - output proper multilinestring


  Arc.prototype.wkt = function () {
    var wkt_string = "";
    var wkt = "LINESTRING(";

    var collect = function collect(c) {
      wkt += c[0] + " " + c[1] + ",";
    };

    for (var i = 0; i < this.geometries.length; i++) {
      if (this.geometries[i].coords.length === 0) {
        return "LINESTRING(empty)";
      } else {
        var coords = this.geometries[i].coords;
        coords.forEach(collect);
        wkt_string += wkt.substring(0, wkt.length - 1) + ")";
      }
    }

    return wkt_string;
  };
  /*
   * http://en.wikipedia.org/wiki/Great-circle_distance
   *
   */


  var GreatCircle = function GreatCircle(start, end, properties) {
    if (!start || start.x === undefined || start.y === undefined) {
      throw new Error("GreatCircle constructor expects two args: start and end objects with x and y properties");
    }

    if (!end || end.x === undefined || end.y === undefined) {
      throw new Error("GreatCircle constructor expects two args: start and end objects with x and y properties");
    }

    this.start = new Coord(start.x, start.y);
    this.end = new Coord(end.x, end.y);
    this.properties = properties || {};
    var w = this.start.x - this.end.x;
    var h = this.start.y - this.end.y;
    var z = Math.pow(Math.sin(h / 2.0), 2) + Math.cos(this.start.y) * Math.cos(this.end.y) * Math.pow(Math.sin(w / 2.0), 2);
    this.g = 2.0 * Math.asin(Math.sqrt(z));

    if (this.g === Math.PI) {
      throw new Error("it appears " + start.view() + " and " + end.view() + " are 'antipodal', e.g diametrically opposite, thus there is no single route but rather infinite");
    } else if (isNaN(this.g)) {
      throw new Error("could not calculate great circle between " + start + " and " + end);
    }
  };
  /*
   * http://williams.best.vwh.net/avform.htm#Intermediate
   */


  GreatCircle.prototype.interpolate = function (f) {
    var A = Math.sin((1 - f) * this.g) / Math.sin(this.g);
    var B = Math.sin(f * this.g) / Math.sin(this.g);
    var x = A * Math.cos(this.start.y) * Math.cos(this.start.x) + B * Math.cos(this.end.y) * Math.cos(this.end.x);
    var y = A * Math.cos(this.start.y) * Math.sin(this.start.x) + B * Math.cos(this.end.y) * Math.sin(this.end.x);
    var z = A * Math.sin(this.start.y) + B * Math.sin(this.end.y);
    var lat = R2D * Math.atan2(z, Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)));
    var lon = R2D * Math.atan2(y, x);
    return [lon, lat];
  };
  /*
   * Generate points along the great circle
   */


  GreatCircle.prototype.Arc = function (npoints, options) {
    var first_pass = [];

    if (!npoints || npoints <= 2) {
      first_pass.push([this.start.lon, this.start.lat]);
      first_pass.push([this.end.lon, this.end.lat]);
    } else {
      var delta = 1.0 / (npoints - 1);

      for (var i = 0; i < npoints; ++i) {
        var step = delta * i;
        var pair = this.interpolate(step);
        first_pass.push(pair);
      }
    }
    /* partial port of dateline handling from:
        gdal/ogr/ogrgeometryfactory.cpp
         TODO - does not handle all wrapping scenarios yet
      */


    var bHasBigDiff = false;
    var dfMaxSmallDiffLong = 0; // from http://www.gdal.org/ogr2ogr.html
    // -datelineoffset:
    // (starting with GDAL 1.10) offset from dateline in degrees (default long. = +/- 10deg, geometries within 170deg to -170deg will be splited)

    var dfDateLineOffset = options && options.offset ? options.offset : 10;
    var dfLeftBorderX = 180 - dfDateLineOffset;
    var dfRightBorderX = -180 + dfDateLineOffset;
    var dfDiffSpace = 360 - dfDateLineOffset; // https://github.com/OSGeo/gdal/blob/7bfb9c452a59aac958bff0c8386b891edf8154ca/gdal/ogr/ogrgeometryfactory.cpp#L2342

    for (var j = 1; j < first_pass.length; ++j) {
      var dfPrevX = first_pass[j - 1][0];
      var dfX = first_pass[j][0];
      var dfDiffLong = Math.abs(dfX - dfPrevX);

      if (dfDiffLong > dfDiffSpace && (dfX > dfLeftBorderX && dfPrevX < dfRightBorderX || dfPrevX > dfLeftBorderX && dfX < dfRightBorderX)) {
        bHasBigDiff = true;
      } else if (dfDiffLong > dfMaxSmallDiffLong) {
        dfMaxSmallDiffLong = dfDiffLong;
      }
    }

    var poMulti = [];

    if (bHasBigDiff && dfMaxSmallDiffLong < dfDateLineOffset) {
      var poNewLS = [];
      poMulti.push(poNewLS);

      for (var k = 0; k < first_pass.length; ++k) {
        var dfX0 = parseFloat(first_pass[k][0]);

        if (k > 0 && Math.abs(dfX0 - first_pass[k - 1][0]) > dfDiffSpace) {
          var dfX1 = parseFloat(first_pass[k - 1][0]);
          var dfY1 = parseFloat(first_pass[k - 1][1]);
          var dfX2 = parseFloat(first_pass[k][0]);
          var dfY2 = parseFloat(first_pass[k][1]);

          if (dfX1 > -180 && dfX1 < dfRightBorderX && dfX2 === 180 && k + 1 < first_pass.length && first_pass[k - 1][0] > -180 && first_pass[k - 1][0] < dfRightBorderX) {
            poNewLS.push([-180, first_pass[k][1]]);
            k++;
            poNewLS.push([first_pass[k][0], first_pass[k][1]]);
            continue;
          } else if (dfX1 > dfLeftBorderX && dfX1 < 180 && dfX2 === -180 && k + 1 < first_pass.length && first_pass[k - 1][0] > dfLeftBorderX && first_pass[k - 1][0] < 180) {
            poNewLS.push([180, first_pass[k][1]]);
            k++;
            poNewLS.push([first_pass[k][0], first_pass[k][1]]);
            continue;
          }

          if (dfX1 < dfRightBorderX && dfX2 > dfLeftBorderX) {
            // swap dfX1, dfX2
            var tmpX = dfX1;
            dfX1 = dfX2;
            dfX2 = tmpX; // swap dfY1, dfY2

            var tmpY = dfY1;
            dfY1 = dfY2;
            dfY2 = tmpY;
          }

          if (dfX1 > dfLeftBorderX && dfX2 < dfRightBorderX) {
            dfX2 += 360;
          }

          if (dfX1 <= 180 && dfX2 >= 180 && dfX1 < dfX2) {
            var dfRatio = (180 - dfX1) / (dfX2 - dfX1);
            var dfY = dfRatio * dfY2 + (1 - dfRatio) * dfY1;
            poNewLS.push([first_pass[k - 1][0] > dfLeftBorderX ? 180 : -180, dfY]);
            poNewLS = [];
            poNewLS.push([first_pass[k - 1][0] > dfLeftBorderX ? -180 : 180, dfY]);
            poMulti.push(poNewLS);
          } else {
            poNewLS = [];
            poMulti.push(poNewLS);
          }

          poNewLS.push([dfX0, first_pass[k][1]]);
        } else {
          poNewLS.push([first_pass[k][0], first_pass[k][1]]);
        }
      }
    } else {
      // add normally
      var poNewLS0 = [];
      poMulti.push(poNewLS0);

      for (var l = 0; l < first_pass.length; ++l) {
        poNewLS0.push([first_pass[l][0], first_pass[l][1]]);
      }
    }

    var arc = new Arc(this.properties);

    for (var m = 0; m < poMulti.length; ++m) {
      var line = new LineString$1();
      arc.geometries.push(line);
      var points = poMulti[m];

      for (var j0 = 0; j0 < points.length; ++j0) {
        line.move_to(points[j0]);
      }
    }

    return arc;
  };
  /**
   * Calculate great circles routes as {@link LineString} or {@link MultiLineString}.
   * If the `start` and `end` points span the antimeridian, the resulting feature will
   * be split into a `MultiLineString`.
   *
   * @name greatCircle
   * @param {Coord} start source point feature
   * @param {Coord} end destination point feature
   * @param {Object} [options={}] Optional parameters
   * @param {Object} [options.properties={}] line feature properties
   * @param {number} [options.npoints=100] number of points
   * @param {number} [options.offset=10] offset controls the likelyhood that lines will
   * be split which cross the dateline. The higher the number the more likely.
   * @returns {Feature<LineString | MultiLineString>} great circle line feature
   * @example
   * var start = turf.point([-122, 48]);
   * var end = turf.point([-77, 39]);
   *
   * var greatCircle = turf.greatCircle(start, end, {properties: {name: 'Seattle to DC'}});
   *
   * //addToMap
   * var addToMap = [start, end, greatCircle]
   */


  function greatCircle(start, end, options) {
    // Optional parameters
    options = options || {};
    if (_typeof(options) !== "object") throw new Error("options is invalid");
    var properties = options.properties;
    var npoints = options.npoints;
    var offset = options.offset;
    start = getCoord(start);
    end = getCoord(end);
    properties = properties || {};
    npoints = npoints || 100;
    offset = offset || 10;
    var generator = new GreatCircle({
      x: start[0],
      y: start[1]
    }, {
      x: end[0],
      y: end[1]
    }, properties);
    var line = generator.Arc(npoints, {
      offset: offset
    });
    return line.json();
  }

  /**
   * Split a LineString by another GeoJSON Feature.
   *
   * @name lineSplit
   * @param {Feature<LineString>} line LineString Feature to split
   * @param {Feature<any>} splitter Feature used to split line
   * @returns {FeatureCollection<LineString>} Split LineStrings
   * @example
   * var line = turf.lineString([[120, -25], [145, -25]]);
   * var splitter = turf.lineString([[130, -15], [130, -35]]);
   *
   * var split = turf.lineSplit(line, splitter);
   *
   * //addToMap
   * var addToMap = [line, splitter]
   */

  function lineSplit(line, splitter) {
    if (!line) throw new Error("line is required");
    if (!splitter) throw new Error("splitter is required");
    var lineType = getType$1(line);
    var splitterType = getType$1(splitter);
    if (lineType !== "LineString") throw new Error("line must be LineString");
    if (splitterType === "FeatureCollection") throw new Error("splitter cannot be a FeatureCollection");
    if (splitterType === "GeometryCollection") throw new Error("splitter cannot be a GeometryCollection"); // remove excessive decimals from splitter
    // to avoid possible approximation issues in rbush

    var truncatedSplitter = truncate(splitter, {
      precision: 7
    });

    switch (splitterType) {
      case "Point":
        return splitLineWithPoint(line, truncatedSplitter);

      case "MultiPoint":
        return splitLineWithPoints(line, truncatedSplitter);

      case "LineString":
      case "MultiLineString":
      case "Polygon":
      case "MultiPolygon":
        return splitLineWithPoints(line, lineIntersect(line, truncatedSplitter));
    }
  }
  /**
   * Split LineString with MultiPoint
   *
   * @private
   * @param {Feature<LineString>} line LineString
   * @param {FeatureCollection<Point>} splitter Point
   * @returns {FeatureCollection<LineString>} split LineStrings
   */


  function splitLineWithPoints(line, splitter) {
    var results = [];
    var tree = geojsonRbush_1();
    flattenEach$1(splitter, function (point) {
      // Add index/id to features (needed for filter)
      results.forEach(function (feature, index) {
        feature.id = index;
      }); // First Point - doesn't need to handle any previous line results

      if (!results.length) {
        results = splitLineWithPoint(line, point).features; // Add Square BBox to each feature for GeoJSON-RBush

        results.forEach(function (feature) {
          if (!feature.bbox) feature.bbox = square(bbox$2(feature));
        });
        tree.load(featureCollection$1(results)); // Split with remaining points - lines might needed to be split multiple times
      } else {
        // Find all lines that are within the splitter's bbox
        var search = tree.search(point);

        if (search.features.length) {
          // RBush might return multiple lines - only process the closest line to splitter
          var closestLine = findClosestFeature(point, search); // Remove closest line from results since this will be split into two lines
          // This removes any duplicates inside the results & index

          results = results.filter(function (feature) {
            return feature.id !== closestLine.id;
          });
          tree.remove(closestLine); // Append the two newly split lines into the results

          featureEach$2(splitLineWithPoint(closestLine, point), function (line) {
            results.push(line);
            tree.insert(line);
          });
        }
      }
    });
    return featureCollection$1(results);
  }
  /**
   * Split LineString with Point
   *
   * @private
   * @param {Feature<LineString>} line LineString
   * @param {Feature<Point>} splitter Point
   * @returns {FeatureCollection<LineString>} split LineStrings
   */


  function splitLineWithPoint(line, splitter) {
    var results = []; // handle endpoints

    var startPoint = getCoords(line)[0];
    var endPoint = getCoords(line)[line.geometry.coordinates.length - 1];
    if (pointsEquals(startPoint, getCoord(splitter)) || pointsEquals(endPoint, getCoord(splitter))) return featureCollection$1([line]); // Create spatial index

    var tree = geojsonRbush_1();
    var segments = lineSegment(line);
    tree.load(segments); // Find all segments that are within bbox of splitter

    var search = tree.search(splitter); // Return itself if point is not within spatial index

    if (!search.features.length) return featureCollection$1([line]); // RBush might return multiple lines - only process the closest line to splitter

    var closestSegment = findClosestFeature(splitter, search); // Initial value is the first point of the first segments (beginning of line)

    var initialValue = [startPoint];
    var lastCoords = featureReduce$1(segments, function (previous, current, index) {
      var currentCoords = getCoords(current)[1];
      var splitterCoords = getCoord(splitter); // Location where segment intersects with line

      if (index === closestSegment.id) {
        previous.push(splitterCoords);
        results.push(lineString(previous)); // Don't duplicate splitter coordinate (Issue #688)

        if (pointsEquals(splitterCoords, currentCoords)) return [splitterCoords];
        return [splitterCoords, currentCoords]; // Keep iterating over coords until finished or intersection is found
      } else {
        previous.push(currentCoords);
        return previous;
      }
    }, initialValue); // Append last line to final split results

    if (lastCoords.length > 1) {
      results.push(lineString(lastCoords));
    }

    return featureCollection$1(results);
  }
  /**
   * Find Closest Feature
   *
   * @private
   * @param {Feature<Point>} point Feature must be closest to this point
   * @param {FeatureCollection<LineString>} lines Collection of Features
   * @returns {Feature<LineString>} closest LineString
   */


  function findClosestFeature(point, lines) {
    if (!lines.features.length) throw new Error("lines must contain features"); // Filter to one segment that is the closest to the line

    if (lines.features.length === 1) return lines.features[0];
    var closestFeature;
    var closestDistance = Infinity;
    featureEach$2(lines, function (segment) {
      var pt = nearestPointOnLine(segment, point);
      var dist = pt.properties.dist;

      if (dist < closestDistance) {
        closestFeature = segment;
        closestDistance = dist;
      }
    });
    return closestFeature;
  }
  /**
   * Compares two points and returns if they are equals
   *
   * @private
   * @param {Array<number>} pt1 point
   * @param {Array<number>} pt2 point
   * @returns {boolean} true if they are equals
   */


  function pointsEquals(pt1, pt2) {
    return pt1[0] === pt2[0] && pt1[1] === pt2[1];
  }

  /**
   * Creates a circular arc, of a circle of the given radius and center point, between bearing1 and bearing2;
   * 0 bearing is North of center point, positive clockwise.
   *
   * @name lineArc
   * @param {Coord} center center point
   * @param {number} radius radius of the circle
   * @param {number} bearing1 angle, in decimal degrees, of the first radius of the arc
   * @param {number} bearing2 angle, in decimal degrees, of the second radius of the arc
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.steps=64] number of steps
   * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians
   * @returns {Feature<LineString>} line arc
   * @example
   * var center = turf.point([-75, 40]);
   * var radius = 5;
   * var bearing1 = 25;
   * var bearing2 = 47;
   *
   * var arc = turf.lineArc(center, radius, bearing1, bearing2);
   *
   * //addToMap
   * var addToMap = [center, arc]
   */

  function lineArc(center, radius, bearing1, bearing2, options) {
    if (options === void 0) {
      options = {};
    } // default params


    var steps = options.steps || 64;
    var angle1 = convertAngleTo360$1(bearing1);
    var angle2 = convertAngleTo360$1(bearing2);
    var properties = !Array.isArray(center) && center.type === "Feature" ? center.properties : {}; // handle angle parameters

    if (angle1 === angle2) {
      return lineString(circle(center, radius, options).geometry.coordinates[0], properties);
    }

    var arcStartDegree = angle1;
    var arcEndDegree = angle1 < angle2 ? angle2 : angle2 + 360;
    var alfa = arcStartDegree;
    var coordinates = [];
    var i = 0;

    while (alfa < arcEndDegree) {
      coordinates.push(destination(center, radius, alfa, options).geometry.coordinates);
      i++;
      alfa = arcStartDegree + i * 360 / steps;
    }

    if (alfa > arcEndDegree) {
      coordinates.push(destination(center, radius, arcEndDegree, options).geometry.coordinates);
    }

    return lineString(coordinates, properties);
  }
  /**
   * Takes any angle in  degrees
   * and returns a valid angle between 0-360 degrees
   *
   * @private
   * @param {number} alfa angle between -180-180 degrees
   * @returns {number} angle between 0-360 degrees
   */

  function convertAngleTo360$1(alfa) {
    var beta = alfa % 360;

    if (beta < 0) {
      beta += 360;
    }

    return beta;
  }

  /**
   * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a
   * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.
   *
   * @name polygonToLine
   * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert
   * @param {Object} [options={}] Optional parameters
   * @param {Object} [options.properties={}] translates GeoJSON properties to Feature
   * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString
   * @example
   * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);
   *
   * var line = turf.polygonToLine(poly);
   *
   * //addToMap
   * var addToMap = [line];
   */

  function polygonToLine (poly, options) {
    if (options === void 0) {
      options = {};
    }

    var geom = getGeom(poly);

    if (!options.properties && poly.type === "Feature") {
      options.properties = poly.properties;
    }

    switch (geom.type) {
      case "Polygon":
        return polygonToLine$1(geom, options);

      case "MultiPolygon":
        return multiPolygonToLine(geom, options);

      default:
        throw new Error("invalid poly");
    }
  }
  /**
   * @private
   */

  function polygonToLine$1(poly, options) {
    if (options === void 0) {
      options = {};
    }

    var geom = getGeom(poly);
    var coords = geom.coordinates;
    var properties = options.properties ? options.properties : poly.type === "Feature" ? poly.properties : {};
    return coordsToLine(coords, properties);
  }
  /**
   * @private
   */

  function multiPolygonToLine(multiPoly, options) {
    if (options === void 0) {
      options = {};
    }

    var geom = getGeom(multiPoly);
    var coords = geom.coordinates;
    var properties = options.properties ? options.properties : multiPoly.type === "Feature" ? multiPoly.properties : {};
    var lines = [];
    coords.forEach(function (coord) {
      lines.push(coordsToLine(coord, properties));
    });
    return featureCollection$1(lines);
  }
  /**
   * @private
   */

  function coordsToLine(coords, properties) {
    if (coords.length > 1) {
      return multiLineString(coords, properties);
    }

    return lineString(coords[0], properties);
  }

  /**
   * Converts (Multi)LineString(s) to Polygon(s).
   *
   * @name lineToPolygon
   * @param {FeatureCollection|Feature<LineString|MultiLineString>} lines Features to convert
   * @param {Object} [options={}] Optional parameters
   * @param {Object} [options.properties={}] translates GeoJSON properties to Feature
   * @param {boolean} [options.autoComplete=true] auto complete linestrings (matches first & last coordinates)
   * @param {boolean} [options.orderCoords=true] sorts linestrings to place outer ring at the first position of the coordinates
   * @param {boolean} [options.mutate=false] mutate the original linestring using autoComplete (matches first & last coordinates)
   * @returns {Feature<Polygon|MultiPolygon>} converted to Polygons
   * @example
   * var line = turf.lineString([[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]);
   *
   * var polygon = turf.lineToPolygon(line);
   *
   * //addToMap
   * var addToMap = [polygon];
   */

  function lineToPolygon(lines, options) {
    if (options === void 0) {
      options = {};
    }

    var _a, _b, _c; // Optional parameters


    var properties = options.properties;
    var autoComplete = (_a = options.autoComplete) !== null && _a !== void 0 ? _a : true;
    var orderCoords = (_b = options.orderCoords) !== null && _b !== void 0 ? _b : true;
    var mutate = (_c = options.mutate) !== null && _c !== void 0 ? _c : false;

    if (!mutate) {
      lines = clone(lines);
    }

    switch (lines.type) {
      case "FeatureCollection":
        var coords = [];
        lines.features.forEach(function (line) {
          coords.push(getCoords(lineStringToPolygon(line, {}, autoComplete, orderCoords)));
        });
        return multiPolygon(coords, properties);

      default:
        return lineStringToPolygon(lines, properties, autoComplete, orderCoords);
    }
  }
  /**
   * LineString to Polygon
   *
   * @private
   * @param {Feature<LineString|MultiLineString>} line line
   * @param {Object} [properties] translates GeoJSON properties to Feature
   * @param {boolean} [autoComplete=true] auto complete linestrings
   * @param {boolean} [orderCoords=true] sorts linestrings to place outer ring at the first position of the coordinates
   * @returns {Feature<Polygon>} line converted to Polygon
   */


  function lineStringToPolygon(line, properties, autoComplete, orderCoords) {
    properties = properties ? properties : line.type === "Feature" ? line.properties : {};
    var geom = getGeom(line);
    var coords = geom.coordinates;
    var type = geom.type;
    if (!coords.length) throw new Error("line must contain coordinates");

    switch (type) {
      case "LineString":
        if (autoComplete) coords = autoCompleteCoords(coords);
        return polygon([coords], properties);

      case "MultiLineString":
        var multiCoords = [];
        var largestArea = 0;
        coords.forEach(function (coord) {
          if (autoComplete) coord = autoCompleteCoords(coord); // Largest LineString to be placed in the first position of the coordinates array

          if (orderCoords) {
            var area = calculateArea(bbox$2(lineString(coord)));

            if (area > largestArea) {
              multiCoords.unshift(coord);
              largestArea = area;
            } else multiCoords.push(coord);
          } else {
            multiCoords.push(coord);
          }
        });
        return polygon(multiCoords, properties);

      default:
        throw new Error("geometry type " + type + " is not supported");
    }
  }
  /**
   * Auto Complete Coords - matches first & last coordinates
   *
   * @private
   * @param {Array<Array<number>>} coords Coordinates
   * @returns {Array<Array<number>>} auto completed coordinates
   */


  function autoCompleteCoords(coords) {
    var first = coords[0];
    var x1 = first[0];
    var y1 = first[1];
    var last = coords[coords.length - 1];
    var x2 = last[0];
    var y2 = last[1];

    if (x1 !== x2 || y1 !== y2) {
      coords.push(first);
    }

    return coords;
  }
  /**
   * area - quick approximate area calculation (used to sort)
   *
   * @private
   * @param {Array<number>} bbox BBox [west, south, east, north]
   * @returns {number} very quick area calculation
   */


  function calculateArea(bbox) {
    var west = bbox[0];
    var south = bbox[1];
    var east = bbox[2];
    var north = bbox[3];
    return Math.abs(west - east) * Math.abs(south - north);
  }

  // Cohen-Sutherland line clipping algorithm, adapted to efficiently
  // handle polylines rather than just segments
  function lineclip(points, bbox, result) {
    var len = points.length,
        codeA = bitCode(points[0], bbox),
        part = [],
        i,
        codeB,
        lastCode;
    var a;
    var b;
    if (!result) result = [];

    for (i = 1; i < len; i++) {
      a = points[i - 1];
      b = points[i];
      codeB = lastCode = bitCode(b, bbox);

      while (true) {
        if (!(codeA | codeB)) {
          // accept
          part.push(a);

          if (codeB !== lastCode) {
            // segment went outside
            part.push(b);

            if (i < len - 1) {
              // start a new line
              result.push(part);
              part = [];
            }
          } else if (i === len - 1) {
            part.push(b);
          }

          break;
        } else if (codeA & codeB) {
          // trivial reject
          break;
        } else if (codeA) {
          // a outside, intersect with clip edge
          a = intersect$1(a, b, codeA, bbox);
          codeA = bitCode(a, bbox);
        } else {
          // b outside
          b = intersect$1(a, b, codeB, bbox);
          codeB = bitCode(b, bbox);
        }
      }

      codeA = lastCode;
    }

    if (part.length) result.push(part);
    return result;
  } // Sutherland-Hodgeman polygon clipping algorithm

  function polygonclip(points, bbox) {
    var result, edge, prev, prevInside, i, p, inside; // clip against each side of the clip rectangle

    for (edge = 1; edge <= 8; edge *= 2) {
      result = [];
      prev = points[points.length - 1];
      prevInside = !(bitCode(prev, bbox) & edge);

      for (i = 0; i < points.length; i++) {
        p = points[i];
        inside = !(bitCode(p, bbox) & edge); // if segment goes through the clip window, add an intersection

        if (inside !== prevInside) result.push(intersect$1(prev, p, edge, bbox));
        if (inside) result.push(p); // add a point if it's inside

        prev = p;
        prevInside = inside;
      }

      points = result;
      if (!points.length) break;
    }

    return result;
  } // intersect a segment against one of the 4 lines that make up the bbox

  function intersect$1(a, b, edge, bbox) {
    return edge & 8 ? [a[0] + (b[0] - a[0]) * (bbox[3] - a[1]) / (b[1] - a[1]), bbox[3]] // top
    : edge & 4 ? [a[0] + (b[0] - a[0]) * (bbox[1] - a[1]) / (b[1] - a[1]), bbox[1]] // bottom
    : edge & 2 ? [bbox[2], a[1] + (b[1] - a[1]) * (bbox[2] - a[0]) / (b[0] - a[0])] // right
    : edge & 1 ? [bbox[0], a[1] + (b[1] - a[1]) * (bbox[0] - a[0]) / (b[0] - a[0])] // left
    : null;
  } // bit code reflects the point position relative to the bbox:
  //         left  mid  right
  //    top  1001  1000  1010
  //    mid  0001  0000  0010
  // bottom  0101  0100  0110


  function bitCode(p, bbox) {
    var code = 0;
    if (p[0] < bbox[0]) code |= 1; // left
    else if (p[0] > bbox[2]) code |= 2; // right

    if (p[1] < bbox[1]) code |= 4; // bottom
    else if (p[1] > bbox[3]) code |= 8; // top

    return code;
  }

  /**
   * Takes a {@link Feature} and a bbox and clips the feature to the bbox using
   * [lineclip](https://github.com/mapbox/lineclip).
   * May result in degenerate edges when clipping Polygons.
   *
   * @name bboxClip
   * @param {Feature<LineString|MultiLineString|Polygon|MultiPolygon>} feature feature to clip to the bbox
   * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order
   * @returns {Feature<LineString|MultiLineString|Polygon|MultiPolygon>} clipped Feature
   * @example
   * var bbox = [0, 0, 10, 10];
   * var poly = turf.polygon([[[2, 2], [8, 4], [12, 8], [3, 7], [2, 2]]]);
   *
   * var clipped = turf.bboxClip(poly, bbox);
   *
   * //addToMap
   * var addToMap = [bbox, poly, clipped]
   */

  function bboxClip(feature, bbox) {
    var geom = getGeom(feature);
    var type = geom.type;
    var properties = feature.type === "Feature" ? feature.properties : {};
    var coords = geom.coordinates;

    switch (type) {
      case "LineString":
      case "MultiLineString":
        {
          var lines_1 = [];

          if (type === "LineString") {
            coords = [coords];
          }

          coords.forEach(function (line) {
            lineclip(line, bbox, lines_1);
          });

          if (lines_1.length === 1) {
            return lineString(lines_1[0], properties);
          }

          return multiLineString(lines_1, properties);
        }

      case "Polygon":
        return polygon(clipPolygon$1(coords, bbox), properties);

      case "MultiPolygon":
        return multiPolygon(coords.map(function (poly) {
          return clipPolygon$1(poly, bbox);
        }), properties);

      default:
        throw new Error("geometry " + type + " not supported");
    }
  }

  function clipPolygon$1(rings, bbox) {
    var outRings = [];

    for (var _i = 0, rings_1 = rings; _i < rings_1.length; _i++) {
      var ring = rings_1[_i];
      var clipped = polygonclip(ring, bbox);

      if (clipped.length > 0) {
        if (clipped[0][0] !== clipped[clipped.length - 1][0] || clipped[0][1] !== clipped[clipped.length - 1][1]) {
          clipped.push(clipped[0]);
        }

        if (clipped.length >= 4) {
          outRings.push(clipped);
        }
      }
    }

    return outRings;
  }

  var toStr$4 = Object.prototype.toString;

  var isArguments$1 = function isArguments(value) {
    var str = toStr$4.call(value);
    var isArgs = str === '[object Arguments]';

    if (!isArgs) {
      isArgs = str !== '[object Array]' && value !== null && _typeof(value) === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr$4.call(value.callee) === '[object Function]';
    }

    return isArgs;
  };

  var keysShim$1;

  if (!Object.keys) {
    // modified from https://github.com/es-shims/es5-shim
    var has$1 = Object.prototype.hasOwnProperty;
    var toStr$3 = Object.prototype.toString;
    var isArgs = isArguments$1; // eslint-disable-line global-require

    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var hasDontEnumBug = !isEnumerable.call({
      toString: null
    }, 'toString');
    var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
    var dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];

    var equalsConstructorPrototype = function equalsConstructorPrototype(o) {
      var ctor = o.constructor;
      return ctor && ctor.prototype === o;
    };

    var excludedKeys = {
      $applicationCache: true,
      $console: true,
      $external: true,
      $frame: true,
      $frameElement: true,
      $frames: true,
      $innerHeight: true,
      $innerWidth: true,
      $onmozfullscreenchange: true,
      $onmozfullscreenerror: true,
      $outerHeight: true,
      $outerWidth: true,
      $pageXOffset: true,
      $pageYOffset: true,
      $parent: true,
      $scrollLeft: true,
      $scrollTop: true,
      $scrollX: true,
      $scrollY: true,
      $self: true,
      $webkitIndexedDB: true,
      $webkitStorageInfo: true,
      $window: true
    };

    var hasAutomationEqualityBug = function () {
      /* global window */
      if (typeof window === 'undefined') {
        return false;
      }

      for (var k in window) {
        try {
          if (!excludedKeys['$' + k] && has$1.call(window, k) && window[k] !== null && _typeof(window[k]) === 'object') {
            try {
              equalsConstructorPrototype(window[k]);
            } catch (e) {
              return true;
            }
          }
        } catch (e) {
          return true;
        }
      }

      return false;
    }();

    var equalsConstructorPrototypeIfNotBuggy = function equalsConstructorPrototypeIfNotBuggy(o) {
      /* global window */
      if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
        return equalsConstructorPrototype(o);
      }

      try {
        return equalsConstructorPrototype(o);
      } catch (e) {
        return false;
      }
    };

    keysShim$1 = function keys(object) {
      var isObject = object !== null && _typeof(object) === 'object';
      var isFunction = toStr$3.call(object) === '[object Function]';
      var isArguments = isArgs(object);
      var isString = isObject && toStr$3.call(object) === '[object String]';
      var theKeys = [];

      if (!isObject && !isFunction && !isArguments) {
        throw new TypeError('Object.keys called on a non-object');
      }

      var skipProto = hasProtoEnumBug && isFunction;

      if (isString && object.length > 0 && !has$1.call(object, 0)) {
        for (var i = 0; i < object.length; ++i) {
          theKeys.push(String(i));
        }
      }

      if (isArguments && object.length > 0) {
        for (var j = 0; j < object.length; ++j) {
          theKeys.push(String(j));
        }
      } else {
        for (var name in object) {
          if (!(skipProto && name === 'prototype') && has$1.call(object, name)) {
            theKeys.push(String(name));
          }
        }
      }

      if (hasDontEnumBug) {
        var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

        for (var k = 0; k < dontEnums.length; ++k) {
          if (!(skipConstructor && dontEnums[k] === 'constructor') && has$1.call(object, dontEnums[k])) {
            theKeys.push(dontEnums[k]);
          }
        }
      }

      return theKeys;
    };
  }

  var implementation$3 = keysShim$1;

  var slice$1 = Array.prototype.slice;
  var origKeys = Object.keys;
  var keysShim = origKeys ? function keys(o) {
    return origKeys(o);
  } : implementation$3;
  var originalKeys = Object.keys;

  keysShim.shim = function shimObjectKeys() {
    if (Object.keys) {
      var keysWorksWithArguments = function () {
        // Safari 5.0 bug
        var args = Object.keys(arguments);
        return args && args.length === arguments.length;
      }(1, 2);

      if (!keysWorksWithArguments) {
        Object.keys = function keys(object) {
          // eslint-disable-line func-name-matching
          if (isArguments$1(object)) {
            return originalKeys(slice$1.call(object));
          }

          return originalKeys(object);
        };
      }
    } else {
      Object.keys = keysShim;
    }

    return Object.keys || keysShim;
  };

  var objectKeys = keysShim;

  var shams = function hasSymbols() {
    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
      return false;
    }

    if (_typeof(Symbol.iterator) === 'symbol') {
      return true;
    }

    var obj = {};
    var sym = Symbol('test');
    var symObj = Object(sym);

    if (typeof sym === 'string') {
      return false;
    }

    if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
      return false;
    }

    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
      return false;
    } // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }


    var symVal = 42;
    obj[sym] = symVal;

    for (sym in obj) {
      return false;
    } // eslint-disable-line no-restricted-syntax, no-unreachable-loop


    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
      return false;
    }

    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }

    var syms = Object.getOwnPropertySymbols(obj);

    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }

    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }

    if (typeof Object.getOwnPropertyDescriptor === 'function') {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);

      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }

    return true;
  };

  var origSymbol = typeof Symbol !== 'undefined' && Symbol;

  var hasSymbols$3 = function hasNativeSymbols() {
    if (typeof origSymbol !== 'function') {
      return false;
    }

    if (typeof Symbol !== 'function') {
      return false;
    }

    if (_typeof(origSymbol('foo')) !== 'symbol') {
      return false;
    }

    if (_typeof(Symbol('bar')) !== 'symbol') {
      return false;
    }

    return shams();
  };

  /* eslint no-invalid-this: 1 */

  var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
  var slice = Array.prototype.slice;
  var toStr$2 = Object.prototype.toString;
  var funcType = '[object Function]';

  var implementation$2 = function bind(that) {
    var target = this;

    if (typeof target !== 'function' || toStr$2.call(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }

    var args = slice.call(arguments, 1);
    var bound;

    var binder = function binder() {
      if (this instanceof bound) {
        var result = target.apply(this, args.concat(slice.call(arguments)));

        if (Object(result) === result) {
          return result;
        }

        return this;
      } else {
        return target.apply(that, args.concat(slice.call(arguments)));
      }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];

    for (var i = 0; i < boundLength; i++) {
      boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
      var Empty = function Empty() {};

      Empty.prototype = target.prototype;
      bound.prototype = new Empty();
      Empty.prototype = null;
    }

    return bound;
  };

  var functionBind = Function.prototype.bind || implementation$2;

  var src = functionBind.call(Function.call, Object.prototype.hasOwnProperty);

  var undefined$1;
  var $SyntaxError = SyntaxError;
  var $Function = Function;
  var $TypeError$2 = TypeError; // eslint-disable-next-line consistent-return

  var getEvalledConstructor = function getEvalledConstructor(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
    } catch (e) {}
  };

  var $gOPD$1 = Object.getOwnPropertyDescriptor;

  if ($gOPD$1) {
    try {
      $gOPD$1({}, '');
    } catch (e) {
      $gOPD$1 = null; // this is IE 8, which has a broken gOPD
    }
  }

  var throwTypeError = function throwTypeError() {
    throw new $TypeError$2();
  };

  var ThrowTypeError = $gOPD$1 ? function () {
    try {
      // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
      arguments.callee; // IE 8 does not throw here

      return throwTypeError;
    } catch (calleeThrows) {
      try {
        // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
        return $gOPD$1(arguments, 'callee').get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols$2 = hasSymbols$3();

  var getProto$1 = Object.getPrototypeOf || function (x) {
    return x.__proto__;
  }; // eslint-disable-line no-proto


  var needsEval = {};
  var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto$1(Uint8Array);
  var INTRINSICS = {
    '%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
    '%Array%': Array,
    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
    '%ArrayIteratorPrototype%': hasSymbols$2 ? getProto$1([][Symbol.iterator]()) : undefined$1,
    '%AsyncFromSyncIteratorPrototype%': undefined$1,
    '%AsyncFunction%': needsEval,
    '%AsyncGenerator%': needsEval,
    '%AsyncGeneratorFunction%': needsEval,
    '%AsyncIteratorPrototype%': needsEval,
    '%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
    '%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
    '%Boolean%': Boolean,
    '%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
    '%Date%': Date,
    '%decodeURI%': decodeURI,
    '%decodeURIComponent%': decodeURIComponent,
    '%encodeURI%': encodeURI,
    '%encodeURIComponent%': encodeURIComponent,
    '%Error%': Error,
    '%eval%': eval,
    // eslint-disable-line no-eval
    '%EvalError%': EvalError,
    '%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
    '%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
    '%Function%': $Function,
    '%GeneratorFunction%': needsEval,
    '%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
    '%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
    '%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
    '%isFinite%': isFinite,
    '%isNaN%': isNaN,
    '%IteratorPrototype%': hasSymbols$2 ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$1,
    '%JSON%': (typeof JSON === "undefined" ? "undefined" : _typeof(JSON)) === 'object' ? JSON : undefined$1,
    '%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
    '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto$1(new Map()[Symbol.iterator]()),
    '%Math%': Math,
    '%Number%': Number,
    '%Object%': Object,
    '%parseFloat%': parseFloat,
    '%parseInt%': parseInt,
    '%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
    '%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
    '%RangeError%': RangeError,
    '%ReferenceError%': ReferenceError,
    '%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
    '%RegExp%': RegExp,
    '%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
    '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto$1(new Set()[Symbol.iterator]()),
    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
    '%String%': String,
    '%StringIteratorPrototype%': hasSymbols$2 ? getProto$1(''[Symbol.iterator]()) : undefined$1,
    '%Symbol%': hasSymbols$2 ? Symbol : undefined$1,
    '%SyntaxError%': $SyntaxError,
    '%ThrowTypeError%': ThrowTypeError,
    '%TypedArray%': TypedArray,
    '%TypeError%': $TypeError$2,
    '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
    '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
    '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
    '%URIError%': URIError,
    '%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
    '%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
    '%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
  };

  var doEval = function doEval(name) {
    var value;

    if (name === '%AsyncFunction%') {
      value = getEvalledConstructor('async function () {}');
    } else if (name === '%GeneratorFunction%') {
      value = getEvalledConstructor('function* () {}');
    } else if (name === '%AsyncGeneratorFunction%') {
      value = getEvalledConstructor('async function* () {}');
    } else if (name === '%AsyncGenerator%') {
      var fn = doEval('%AsyncGeneratorFunction%');

      if (fn) {
        value = fn.prototype;
      }
    } else if (name === '%AsyncIteratorPrototype%') {
      var gen = doEval('%AsyncGenerator%');

      if (gen) {
        value = getProto$1(gen.prototype);
      }
    }

    INTRINSICS[name] = value;
    return value;
  };

  var LEGACY_ALIASES = {
    '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
    '%ArrayPrototype%': ['Array', 'prototype'],
    '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
    '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
    '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
    '%ArrayProto_values%': ['Array', 'prototype', 'values'],
    '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
    '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
    '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
    '%BooleanPrototype%': ['Boolean', 'prototype'],
    '%DataViewPrototype%': ['DataView', 'prototype'],
    '%DatePrototype%': ['Date', 'prototype'],
    '%ErrorPrototype%': ['Error', 'prototype'],
    '%EvalErrorPrototype%': ['EvalError', 'prototype'],
    '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
    '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
    '%FunctionPrototype%': ['Function', 'prototype'],
    '%Generator%': ['GeneratorFunction', 'prototype'],
    '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
    '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
    '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
    '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
    '%JSONParse%': ['JSON', 'parse'],
    '%JSONStringify%': ['JSON', 'stringify'],
    '%MapPrototype%': ['Map', 'prototype'],
    '%NumberPrototype%': ['Number', 'prototype'],
    '%ObjectPrototype%': ['Object', 'prototype'],
    '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
    '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
    '%PromisePrototype%': ['Promise', 'prototype'],
    '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
    '%Promise_all%': ['Promise', 'all'],
    '%Promise_reject%': ['Promise', 'reject'],
    '%Promise_resolve%': ['Promise', 'resolve'],
    '%RangeErrorPrototype%': ['RangeError', 'prototype'],
    '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
    '%RegExpPrototype%': ['RegExp', 'prototype'],
    '%SetPrototype%': ['Set', 'prototype'],
    '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
    '%StringPrototype%': ['String', 'prototype'],
    '%SymbolPrototype%': ['Symbol', 'prototype'],
    '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
    '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
    '%TypeErrorPrototype%': ['TypeError', 'prototype'],
    '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
    '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
    '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
    '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
    '%URIErrorPrototype%': ['URIError', 'prototype'],
    '%WeakMapPrototype%': ['WeakMap', 'prototype'],
    '%WeakSetPrototype%': ['WeakSet', 'prototype']
  };
  var $concat = functionBind.call(Function.call, Array.prototype.concat);
  var $spliceApply = functionBind.call(Function.apply, Array.prototype.splice);
  var $replace = functionBind.call(Function.call, String.prototype.replace);
  var $strSlice = functionBind.call(Function.call, String.prototype.slice);
  /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */

  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  /** Used to match backslashes in property paths. */

  var stringToPath = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);

    if (first === '%' && last !== '%') {
      throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
    } else if (last === '%' && first !== '%') {
      throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
    }

    var result = [];
    $replace(string, rePropName, function (match, number, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
    });
    return result;
  };
  /* end adaptation */


  var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;

    if (src(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = '%' + alias[0] + '%';
    }

    if (src(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];

      if (value === needsEval) {
        value = doEval(intrinsicName);
      }

      if (typeof value === 'undefined' && !allowMissing) {
        throw new $TypeError$2('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
      }

      return {
        alias: alias,
        name: intrinsicName,
        value: value
      };
    }

    throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
  };

  var getIntrinsic = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== 'string' || name.length === 0) {
      throw new $TypeError$2('intrinsic name must be a non-empty string');
    }

    if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
      throw new $TypeError$2('"allowMissing" argument must be a boolean');
    }

    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
    var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;

    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }

    for (var i = 1, isOwn = true; i < parts.length; i += 1) {
      var part = parts[i];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);

      if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
        throw new $SyntaxError('property names with quotes must have matching quotes');
      }

      if (part === 'constructor' || !isOwn) {
        skipFurtherCaching = true;
      }

      intrinsicBaseName += '.' + part;
      intrinsicRealName = '%' + intrinsicBaseName + '%';

      if (src(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError$2('base intrinsic for ' + name + ' exists, but the property is not available.');
          }

          return void undefined$1;
        }

        if ($gOPD$1 && i + 1 >= parts.length) {
          var desc = $gOPD$1(value, part);
          isOwn = !!desc; // By convention, when a data property is converted to an accessor
          // property to emulate a data property that does not suffer from
          // the override mistake, that accessor's getter is marked with
          // an `originalValue` property. Here, when we detect this, we
          // uphold the illusion by pretending to see that original data
          // property, i.e., returning the value rather than the getter
          // itself.

          if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = src(value, part);
          value = value[part];
        }

        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }

    return value;
  };

  var callBind = createCommonjsModule(function (module) {

    var $apply = getIntrinsic('%Function.prototype.apply%');
    var $call = getIntrinsic('%Function.prototype.call%');
    var $reflectApply = getIntrinsic('%Reflect.apply%', true) || functionBind.call($call, $apply);
    var $gOPD = getIntrinsic('%Object.getOwnPropertyDescriptor%', true);
    var $defineProperty = getIntrinsic('%Object.defineProperty%', true);
    var $max = getIntrinsic('%Math.max%');

    if ($defineProperty) {
      try {
        $defineProperty({}, 'a', {
          value: 1
        });
      } catch (e) {
        // IE 8 has a broken defineProperty
        $defineProperty = null;
      }
    }

    module.exports = function callBind(originalFunction) {
      var func = $reflectApply(functionBind, $call, arguments);

      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, 'length');

        if (desc.configurable) {
          // original length, plus the receiver, minus any additional arguments (after the receiver)
          $defineProperty(func, 'length', {
            value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
          });
        }
      }

      return func;
    };

    var applyBind = function applyBind() {
      return $reflectApply(functionBind, $apply, arguments);
    };

    if ($defineProperty) {
      $defineProperty(module.exports, 'apply', {
        value: applyBind
      });
    } else {
      module.exports.apply = applyBind;
    }
  });

  var $indexOf = callBind(getIntrinsic('String.prototype.indexOf'));

  var callBound = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = getIntrinsic(name, !!allowMissing);

    if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
      return callBind(intrinsic);
    }

    return intrinsic;
  };

  var hasToStringTag$2 = typeof Symbol === 'function' && _typeof(Symbol.toStringTag) === 'symbol';
  var $toString$1 = callBound('Object.prototype.toString');

  var isStandardArguments = function isArguments(value) {
    if (hasToStringTag$2 && value && _typeof(value) === 'object' && Symbol.toStringTag in value) {
      return false;
    }

    return $toString$1(value) === '[object Arguments]';
  };

  var isLegacyArguments = function isArguments(value) {
    if (isStandardArguments(value)) {
      return true;
    }

    return value !== null && _typeof(value) === 'object' && typeof value.length === 'number' && value.length >= 0 && $toString$1(value) !== '[object Array]' && $toString$1(value.callee) === '[object Function]';
  };

  var supportsStandardArguments = function () {
    return isStandardArguments(arguments);
  }();

  isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

  var isArguments = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

  var hasSymbols$1 = typeof Symbol === 'function' && _typeof(Symbol('foo')) === 'symbol';
  var toStr$1 = Object.prototype.toString;
  var concat = Array.prototype.concat;
  var origDefineProperty = Object.defineProperty;

  var isFunction = function isFunction(fn) {
    return typeof fn === 'function' && toStr$1.call(fn) === '[object Function]';
  };

  var arePropertyDescriptorsSupported = function arePropertyDescriptorsSupported() {
    var obj = {};

    try {
      origDefineProperty(obj, 'x', {
        enumerable: false,
        value: obj
      }); // eslint-disable-next-line no-unused-vars, no-restricted-syntax

      for (var _ in obj) {
        // jscs:ignore disallowUnusedVariables
        return false;
      }

      return obj.x === obj;
    } catch (e) {
      /* this is IE 8. */
      return false;
    }
  };

  var supportsDescriptors$2 = origDefineProperty && arePropertyDescriptorsSupported();

  var defineProperty$1 = function defineProperty(object, name, value, predicate) {
    if (name in object && (!isFunction(predicate) || !predicate())) {
      return;
    }

    if (supportsDescriptors$2) {
      origDefineProperty(object, name, {
        configurable: true,
        enumerable: false,
        value: value,
        writable: true
      });
    } else {
      object[name] = value;
    }
  };

  var defineProperties = function defineProperties(object, map) {
    var predicates = arguments.length > 2 ? arguments[2] : {};
    var props = objectKeys(map);

    if (hasSymbols$1) {
      props = concat.call(props, Object.getOwnPropertySymbols(map));
    }

    for (var i = 0; i < props.length; i += 1) {
      defineProperty$1(object, props[i], map[props[i]], predicates[props[i]]);
    }
  };

  defineProperties.supportsDescriptors = !!supportsDescriptors$2;
  var defineProperties_1 = defineProperties;

  var numberIsNaN = function numberIsNaN(value) {
    return value !== value;
  };

  var implementation$1 = function is(a, b) {
    if (a === 0 && b === 0) {
      return 1 / a === 1 / b;
    }

    if (a === b) {
      return true;
    }

    if (numberIsNaN(a) && numberIsNaN(b)) {
      return true;
    }

    return false;
  };

  var polyfill$2 = function getPolyfill() {
    return typeof Object.is === 'function' ? Object.is : implementation$1;
  };

  var shim$1 = function shimObjectIs() {
    var polyfill = polyfill$2();
    defineProperties_1(Object, {
      is: polyfill
    }, {
      is: function testObjectIs() {
        return Object.is !== polyfill;
      }
    });
    return polyfill;
  };

  var polyfill$1 = callBind(polyfill$2(), Object);
  defineProperties_1(polyfill$1, {
    getPolyfill: polyfill$2,
    implementation: implementation$1,
    shim: shim$1
  });
  var objectIs = polyfill$1;

  var hasSymbols = shams();
  var hasToStringTag$1 = hasSymbols && !!Symbol.toStringTag;
  var has;
  var $exec;
  var isRegexMarker;
  var badStringifier;

  if (hasToStringTag$1) {
    has = callBound('Object.prototype.hasOwnProperty');
    $exec = callBound('RegExp.prototype.exec');
    isRegexMarker = {};

    var throwRegexMarker = function throwRegexMarker() {
      throw isRegexMarker;
    };

    badStringifier = {
      toString: throwRegexMarker,
      valueOf: throwRegexMarker
    };

    if (_typeof(Symbol.toPrimitive) === 'symbol') {
      badStringifier[Symbol.toPrimitive] = throwRegexMarker;
    }
  }

  var $toString = callBound('Object.prototype.toString');
  var gOPD$1 = Object.getOwnPropertyDescriptor;
  var regexClass = '[object RegExp]';
  var isRegex = hasToStringTag$1 // eslint-disable-next-line consistent-return
  ? function isRegex(value) {
    if (!value || _typeof(value) !== 'object') {
      return false;
    }

    var descriptor = gOPD$1(value, 'lastIndex');
    var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');

    if (!hasLastIndexDataProperty) {
      return false;
    }

    try {
      $exec(value, badStringifier);
    } catch (e) {
      return e === isRegexMarker;
    }
  } : function isRegex(value) {
    // In older browsers, typeof regex incorrectly returns 'function'
    if (!value || _typeof(value) !== 'object' && typeof value !== 'function') {
      return false;
    }

    return $toString(value) === regexClass;
  };

  var $Object = Object;
  var $TypeError$1 = TypeError;

  var implementation = function flags() {
    if (this != null && this !== $Object(this)) {
      throw new $TypeError$1('RegExp.prototype.flags getter called on non-object');
    }

    var result = '';

    if (this.global) {
      result += 'g';
    }

    if (this.ignoreCase) {
      result += 'i';
    }

    if (this.multiline) {
      result += 'm';
    }

    if (this.dotAll) {
      result += 's';
    }

    if (this.unicode) {
      result += 'u';
    }

    if (this.sticky) {
      result += 'y';
    }

    return result;
  };

  var supportsDescriptors$1 = defineProperties_1.supportsDescriptors;
  var $gOPD = Object.getOwnPropertyDescriptor;
  var $TypeError = TypeError;

  var polyfill = function getPolyfill() {
    if (!supportsDescriptors$1) {
      throw new $TypeError('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
    }

    if (/a/mig.flags === 'gim') {
      var descriptor = $gOPD(RegExp.prototype, 'flags');

      if (descriptor && typeof descriptor.get === 'function' && typeof /a/.dotAll === 'boolean') {
        return descriptor.get;
      }
    }

    return implementation;
  };

  var supportsDescriptors = defineProperties_1.supportsDescriptors;
  var gOPD = Object.getOwnPropertyDescriptor;
  var defineProperty = Object.defineProperty;
  var TypeErr = TypeError;
  var getProto = Object.getPrototypeOf;
  var regex = /a/;

  var shim = function shimFlags() {
    if (!supportsDescriptors || !getProto) {
      throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
    }

    var polyfill$1 = polyfill();
    var proto = getProto(regex);
    var descriptor = gOPD(proto, 'flags');

    if (!descriptor || descriptor.get !== polyfill$1) {
      defineProperty(proto, 'flags', {
        configurable: true,
        enumerable: false,
        get: polyfill$1
      });
    }

    return polyfill$1;
  };

  var flagsBound = callBind(implementation);
  defineProperties_1(flagsBound, {
    getPolyfill: polyfill,
    implementation: implementation,
    shim: shim
  });
  var regexp_prototype_flags = flagsBound;

  var getDay = Date.prototype.getDay;

  var tryDateObject = function tryDateGetDayCall(value) {
    try {
      getDay.call(value);
      return true;
    } catch (e) {
      return false;
    }
  };

  var toStr = Object.prototype.toString;
  var dateClass = '[object Date]';
  var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag;

  var isDateObject = function isDateObject(value) {
    if (_typeof(value) !== 'object' || value === null) {
      return false;
    }

    return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
  };

  var getTime = Date.prototype.getTime;

  function deepEqual(actual, expected, options) {
    var opts = options || {}; // 7.1. All identical values are equivalent, as determined by ===.

    if (opts.strict ? objectIs(actual, expected) : actual === expected) {
      return true;
    } // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.


    if (!actual || !expected || _typeof(actual) !== 'object' && _typeof(expected) !== 'object') {
      return opts.strict ? objectIs(actual, expected) : actual == expected;
    }
    /*
     * 7.4. For all other Object pairs, including Array objects, equivalence is
     * determined by having the same number of owned properties (as verified
     * with Object.prototype.hasOwnProperty.call), the same set of keys
     * (although not necessarily the same order), equivalent values for every
     * corresponding key, and an identical 'prototype' property. Note: this
     * accounts for both named and indexed properties on Arrays.
     */
    // eslint-disable-next-line no-use-before-define


    return objEquiv(actual, expected, opts);
  }

  function isUndefinedOrNull(value) {
    return value === null || value === undefined;
  }

  function isBuffer(x) {
    if (!x || _typeof(x) !== 'object' || typeof x.length !== 'number') {
      return false;
    }

    if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
      return false;
    }

    if (x.length > 0 && typeof x[0] !== 'number') {
      return false;
    }

    return true;
  }

  function objEquiv(a, b, opts) {
    /* eslint max-statements: [2, 50] */
    var i, key;

    if (_typeof(a) !== _typeof(b)) {
      return false;
    }

    if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) {
      return false;
    } // an identical 'prototype' property.


    if (a.prototype !== b.prototype) {
      return false;
    }

    if (isArguments(a) !== isArguments(b)) {
      return false;
    }

    var aIsRegex = isRegex(a);
    var bIsRegex = isRegex(b);

    if (aIsRegex !== bIsRegex) {
      return false;
    }

    if (aIsRegex || bIsRegex) {
      return a.source === b.source && regexp_prototype_flags(a) === regexp_prototype_flags(b);
    }

    if (isDateObject(a) && isDateObject(b)) {
      return getTime.call(a) === getTime.call(b);
    }

    var aIsBuffer = isBuffer(a);
    var bIsBuffer = isBuffer(b);

    if (aIsBuffer !== bIsBuffer) {
      return false;
    }

    if (aIsBuffer || bIsBuffer) {
      // && would work too, because both are true or both false here
      if (a.length !== b.length) {
        return false;
      }

      for (i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
          return false;
        }
      }

      return true;
    }

    if (_typeof(a) !== _typeof(b)) {
      return false;
    }

    try {
      var ka = objectKeys(a);
      var kb = objectKeys(b);
    } catch (e) {
      // happens when one is a string literal and the other isn't
      return false;
    } // having the same number of owned properties (keys incorporates hasOwnProperty)


    if (ka.length !== kb.length) {
      return false;
    } // the same set of keys (although not necessarily the same order),


    ka.sort();
    kb.sort(); // ~~~cheap key test

    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] != kb[i]) {
        return false;
      }
    } // equivalent values for every corresponding key, and ~~~possibly expensive deep test


    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];

      if (!deepEqual(a[key], b[key], opts)) {
        return false;
      }
    }

    return true;
  }

  var deepEqual_1 = deepEqual;

  /**
   * Takes any LineString or Polygon and returns the overlapping lines between both features.
   *
   * @name lineOverlap
   * @param {Geometry|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} line1 any LineString or Polygon
   * @param {Geometry|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} line2 any LineString or Polygon
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.tolerance=0] Tolerance distance to match overlapping line segments (in kilometers)
   * @returns {FeatureCollection<LineString>} lines(s) that are overlapping between both features
   * @example
   * var line1 = turf.lineString([[115, -35], [125, -30], [135, -30], [145, -35]]);
   * var line2 = turf.lineString([[115, -25], [125, -30], [135, -30], [145, -25]]);
   *
   * var overlapping = turf.lineOverlap(line1, line2);
   *
   * //addToMap
   * var addToMap = [line1, line2, overlapping]
   */

  function lineOverlap(line1, line2, options) {
    if (options === void 0) {
      options = {};
    } // Optional parameters


    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var tolerance = options.tolerance || 0; // Containers

    var features = []; // Create Spatial Index

    var tree = geojsonRbush_1(); // To-Do -- HACK way to support typescript

    var line = lineSegment(line1);
    tree.load(line);
    var overlapSegment; // Line Intersection
    // Iterate over line segments

    segmentEach$1(line2, function (segment) {
      var doesOverlaps = false;

      if (!segment) {
        return;
      } // Iterate over each segments which falls within the same bounds


      featureEach$2(tree.search(segment), function (match) {
        if (doesOverlaps === false) {
          var coordsSegment = getCoords(segment).sort();
          var coordsMatch = getCoords(match).sort(); // Segment overlaps feature

          if (deepEqual_1(coordsSegment, coordsMatch)) {
            doesOverlaps = true; // Overlaps already exists - only append last coordinate of segment

            if (overlapSegment) overlapSegment = concatSegment(overlapSegment, segment);else overlapSegment = segment; // Match segments which don't share nodes (Issue #901)
          } else if (tolerance === 0 ? booleanPointOnLine(coordsSegment[0], match) && booleanPointOnLine(coordsSegment[1], match) : nearestPointOnLine(match, coordsSegment[0]).properties.dist <= tolerance && nearestPointOnLine(match, coordsSegment[1]).properties.dist <= tolerance) {
            doesOverlaps = true;
            if (overlapSegment) overlapSegment = concatSegment(overlapSegment, segment);else overlapSegment = segment;
          } else if (tolerance === 0 ? booleanPointOnLine(coordsMatch[0], segment) && booleanPointOnLine(coordsMatch[1], segment) : nearestPointOnLine(segment, coordsMatch[0]).properties.dist <= tolerance && nearestPointOnLine(segment, coordsMatch[1]).properties.dist <= tolerance) {
            // Do not define (doesOverlap = true) since more matches can occur within the same segment
            // doesOverlaps = true;
            if (overlapSegment) overlapSegment = concatSegment(overlapSegment, match);else overlapSegment = match;
          }
        }
      }); // Segment doesn't overlap - add overlaps to results & reset

      if (doesOverlaps === false && overlapSegment) {
        features.push(overlapSegment);
        overlapSegment = undefined;
      }
    }); // Add last segment if exists

    if (overlapSegment) features.push(overlapSegment);
    return featureCollection$1(features);
  }
  /**
   * Concat Segment
   *
   * @private
   * @param {Feature<LineString>} line LineString
   * @param {Feature<LineString>} segment 2-vertex LineString
   * @returns {Feature<LineString>} concat linestring
   */


  function concatSegment(line, segment) {
    var coords = getCoords(segment);
    var lineCoords = getCoords(line);
    var start = lineCoords[0];
    var end = lineCoords[lineCoords.length - 1];
    var geom = line.geometry.coordinates;
    if (deepEqual_1(coords[0], start)) geom.unshift(coords[1]);else if (deepEqual_1(coords[0], end)) geom.push(coords[1]);else if (deepEqual_1(coords[1], start)) geom.unshift(coords[0]);else if (deepEqual_1(coords[1], end)) geom.push(coords[0]);
    return line;
  }

  /**
   * Creates a circular sector of a circle of given radius and center {@link Point},
   * between (clockwise) bearing1 and bearing2; 0 bearing is North of center point, positive clockwise.
   *
   * @name sector
   * @param {Coord} center center point
   * @param {number} radius radius of the circle
   * @param {number} bearing1 angle, in decimal degrees, of the first radius of the sector
   * @param {number} bearing2 angle, in decimal degrees, of the second radius of the sector
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians
   * @param {number} [options.steps=64] number of steps
   * @param {Properties} [options.properties={}] Translate properties to Feature Polygon
   * @returns {Feature<Polygon>} sector polygon
   * @example
   * var center = turf.point([-75, 40]);
   * var radius = 5;
   * var bearing1 = 25;
   * var bearing2 = 45;
   *
   * var sector = turf.sector(center, radius, bearing1, bearing2);
   *
   * //addToMap
   * var addToMap = [center, sector];
   */

  function sector(center, radius, bearing1, bearing2, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var properties = options.properties; // validation

    if (!center) throw new Error("center is required");
    if (bearing1 === undefined || bearing1 === null) throw new Error("bearing1 is required");
    if (bearing2 === undefined || bearing2 === null) throw new Error("bearing2 is required");
    if (!radius) throw new Error("radius is required");
    if (_typeof(options) !== "object") throw new Error("options must be an object");

    if (convertAngleTo360(bearing1) === convertAngleTo360(bearing2)) {
      return circle(center, radius, options);
    }

    var coords = getCoords(center);
    var arc = lineArc(center, radius, bearing1, bearing2, options);
    var sliceCoords = [[coords]];
    coordEach$1(arc, function (currentCoords) {
      sliceCoords[0].push(currentCoords);
    });
    sliceCoords[0].push(coords);
    return polygon(sliceCoords, properties);
  }
  /**
   * Takes any angle in degrees
   * and returns a valid angle between 0-360 degrees
   *
   * @private
   * @param {number} alfa angle between -180-180 degrees
   * @returns {number} angle between 0-360 degrees
   */


  function convertAngleTo360(alfa) {
    var beta = alfa % 360;
    if (beta < 0) beta += 360;
    return beta;
  }

  // https://en.wikipedia.org/wiki/Rhumb_line
  /**
   * Takes two {@link Point|points} and finds the bearing angle between them along a Rhumb line
   * i.e. the angle measured in degrees start the north line (0 degrees)
   *
   * @name rhumbBearing
   * @param {Coord} start starting Point
   * @param {Coord} end ending Point
   * @param {Object} [options] Optional parameters
   * @param {boolean} [options.final=false] calculates the final bearing if true
   * @returns {number} bearing from north in decimal degrees, between -180 and 180 degrees (positive clockwise)
   * @example
   * var point1 = turf.point([-75.343, 39.984], {"marker-color": "#F00"});
   * var point2 = turf.point([-75.534, 39.123], {"marker-color": "#00F"});
   *
   * var bearing = turf.rhumbBearing(point1, point2);
   *
   * //addToMap
   * var addToMap = [point1, point2];
   * point1.properties.bearing = bearing;
   * point2.properties.bearing = bearing;
   */

  function rhumbBearing(start, end, options) {
    if (options === void 0) {
      options = {};
    }

    var bear360;

    if (options.final) {
      bear360 = calculateRhumbBearing(getCoord(end), getCoord(start));
    } else {
      bear360 = calculateRhumbBearing(getCoord(start), getCoord(end));
    }

    var bear180 = bear360 > 180 ? -(360 - bear360) : bear360;
    return bear180;
  }
  /**
   * Returns the bearing from ‘this’ point to destination point along a rhumb line.
   * Adapted from Geodesy: https://github.com/chrisveness/geodesy/blob/master/latlon-spherical.js
   *
   * @private
   * @param   {Array<number>} from - origin point.
   * @param   {Array<number>} to - destination point.
   * @returns {number} Bearing in degrees from north.
   * @example
   * var p1 = new LatLon(51.127, 1.338);
   * var p2 = new LatLon(50.964, 1.853);
   * var d = p1.rhumbBearingTo(p2); // 116.7 m
   */


  function calculateRhumbBearing(from, to) {
    // φ => phi
    // Δλ => deltaLambda
    // Δψ => deltaPsi
    // θ => theta
    var phi1 = degreesToRadians(from[1]);
    var phi2 = degreesToRadians(to[1]);
    var deltaLambda = degreesToRadians(to[0] - from[0]); // if deltaLambdaon over 180° take shorter rhumb line across the anti-meridian:

    if (deltaLambda > Math.PI) {
      deltaLambda -= 2 * Math.PI;
    }

    if (deltaLambda < -Math.PI) {
      deltaLambda += 2 * Math.PI;
    }

    var deltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4));
    var theta = Math.atan2(deltaLambda, deltaPsi);
    return (radiansToDegrees(theta) + 360) % 360;
  }

  // https://en.wikipedia.org/wiki/Rhumb_line
  /**
   * Returns the destination {@link Point} having travelled the given distance along a Rhumb line from the
   * origin Point with the (varant) given bearing.
   *
   * @name rhumbDestination
   * @param {Coord} origin starting point
   * @param {number} distance distance from the starting point
   * @param {number} bearing varant bearing angle ranging from -180 to 180 degrees from north
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers
   * @param {Object} [options.properties={}] translate properties to destination point
   * @returns {Feature<Point>} Destination point.
   * @example
   * var pt = turf.point([-75.343, 39.984], {"marker-color": "F00"});
   * var distance = 50;
   * var bearing = 90;
   * var options = {units: 'miles'};
   *
   * var destination = turf.rhumbDestination(pt, distance, bearing, options);
   *
   * //addToMap
   * var addToMap = [pt, destination]
   * destination.properties['marker-color'] = '#00F';
   */

  function rhumbDestination(origin, distance, bearing, options) {
    if (options === void 0) {
      options = {};
    }

    var wasNegativeDistance = distance < 0;
    var distanceInMeters = convertLength(Math.abs(distance), options.units, "meters");
    if (wasNegativeDistance) distanceInMeters = -Math.abs(distanceInMeters);
    var coords = getCoord(origin);
    var destination = calculateRhumbDestination(coords, distanceInMeters, bearing); // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)
    // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678

    destination[0] += destination[0] - coords[0] > 180 ? -360 : coords[0] - destination[0] > 180 ? 360 : 0;
    return point(destination, options.properties);
  }
  /**
   * Returns the destination point having travelled along a rhumb line from origin point the given
   * distance on the  given bearing.
   * Adapted from Geodesy: http://www.movable-type.co.uk/scripts/latlong.html#rhumblines
   *
   * @private
   * @param   {Array<number>} origin - point
   * @param   {number} distance - Distance travelled, in same units as earth radius (default: metres).
   * @param   {number} bearing - Bearing in degrees from north.
   * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).
   * @returns {Array<number>} Destination point.
   */


  function calculateRhumbDestination(origin, distance, bearing, radius) {
    // φ => phi
    // λ => lambda
    // ψ => psi
    // Δ => Delta
    // δ => delta
    // θ => theta
    radius = radius === undefined ? earthRadius : Number(radius);
    var delta = distance / radius; // angular distance in radians

    var lambda1 = origin[0] * Math.PI / 180; // to radians, but without normalize to 𝜋

    var phi1 = degreesToRadians(origin[1]);
    var theta = degreesToRadians(bearing);
    var DeltaPhi = delta * Math.cos(theta);
    var phi2 = phi1 + DeltaPhi; // check for some daft bugger going past the pole, normalise latitude if so

    if (Math.abs(phi2) > Math.PI / 2) {
      phi2 = phi2 > 0 ? Math.PI - phi2 : -Math.PI - phi2;
    }

    var DeltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4)); // E-W course becomes ill-conditioned with 0/0

    var q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1);
    var DeltaLambda = delta * Math.sin(theta) / q;
    var lambda2 = lambda1 + DeltaLambda;
    return [(lambda2 * 180 / Math.PI + 540) % 360 - 180, phi2 * 180 / Math.PI]; // normalise to −180..+180°
  }

  /**
   * Finds the tangents of a {@link Polygon|(Multi)Polygon} from a {@link Point}.
   *
   * @name polygonTangents
   * @param {Coord} pt to calculate the tangent points from
   * @param {Feature<Polygon|MultiPolygon>} polygon to get tangents from
   * @returns {FeatureCollection<Point>} Feature Collection containing the two tangent points
   * @example
   * var polygon = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);
   * var point = turf.point([61, 5]);
   *
   * var tangents = turf.polygonTangents(point, polygon)
   *
   * //addToMap
   * var addToMap = [tangents, point, polygon];
   */

  function polygonTangents(pt, polygon) {
    var pointCoords = getCoords(pt);
    var polyCoords = getCoords(polygon);
    var rtan;
    var ltan;
    var enext;
    var eprev;
    var bbox = bbox$2(polygon);
    var nearestPtIndex = 0;
    var nearest = null; // If the point lies inside the polygon bbox then we need to be a bit trickier
    // otherwise points lying inside reflex angles on concave polys can have issues

    if (pointCoords[0] > bbox[0] && pointCoords[0] < bbox[2] && pointCoords[1] > bbox[1] && pointCoords[1] < bbox[3]) {
      nearest = nearestPoint(pt, explode$1(polygon));
      nearestPtIndex = nearest.properties.featureIndex;
    }

    var type = getType$1(polygon);

    switch (type) {
      case "Polygon":
        rtan = polyCoords[0][nearestPtIndex];
        ltan = polyCoords[0][0];

        if (nearest !== null) {
          if (nearest.geometry.coordinates[1] < pointCoords[1]) ltan = polyCoords[0][nearestPtIndex];
        }

        eprev = isLeft(polyCoords[0][0], polyCoords[0][polyCoords[0].length - 1], pointCoords);
        var out = processPolygon$1(polyCoords[0], pointCoords, eprev, enext, rtan, ltan);
        rtan = out[0];
        ltan = out[1];
        break;

      case "MultiPolygon":
        var closestFeature = 0;
        var closestVertex = 0;
        var verticesCounted = 0;

        for (var i = 0; i < polyCoords[0].length; i++) {
          closestFeature = i;
          var verticeFound = false;

          for (var i2 = 0; i2 < polyCoords[0][i].length; i2++) {
            closestVertex = i2;

            if (verticesCounted === nearestPtIndex) {
              verticeFound = true;
              break;
            }

            verticesCounted++;
          }

          if (verticeFound) break;
        }

        rtan = polyCoords[0][closestFeature][closestVertex];
        ltan = polyCoords[0][closestFeature][closestVertex];
        eprev = isLeft(polyCoords[0][0][0], polyCoords[0][0][polyCoords[0][0].length - 1], pointCoords);
        polyCoords.forEach(function (ring) {
          var out = processPolygon$1(ring[0], pointCoords, eprev, enext, rtan, ltan);
          rtan = out[0];
          ltan = out[1];
        });
        break;
    }

    return featureCollection$1([point(rtan), point(ltan)]);
  }

  function processPolygon$1(polygonCoords, ptCoords, eprev, enext, rtan, ltan) {
    for (var i = 0; i < polygonCoords.length; i++) {
      var currentCoords = polygonCoords[i];
      var nextCoordPair = polygonCoords[i + 1];

      if (i === polygonCoords.length - 1) {
        nextCoordPair = polygonCoords[0];
      }

      enext = isLeft(currentCoords, nextCoordPair, ptCoords);

      if (eprev <= 0 && enext > 0) {
        if (!isBelow(ptCoords, currentCoords, rtan)) {
          rtan = currentCoords;
        }
      } else if (eprev > 0 && enext <= 0) {
        if (!isAbove(ptCoords, currentCoords, ltan)) {
          ltan = currentCoords;
        }
      }

      eprev = enext;
    }

    return [rtan, ltan];
  }

  function isAbove(point1, point2, point3) {
    return isLeft(point1, point2, point3) > 0;
  }

  function isBelow(point1, point2, point3) {
    return isLeft(point1, point2, point3) < 0;
  }

  function isLeft(point1, point2, point3) {
    return (point2[0] - point1[0]) * (point3[1] - point1[1]) - (point3[0] - point1[0]) * (point2[1] - point1[1]);
  }

  /**
   * Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.
   *
   * @name booleanClockwise
   * @param {Feature<LineString>|LineString|Array<Array<number>>} line to be evaluated
   * @returns {boolean} true/false
   * @example
   * var clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);
   * var counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);
   *
   * turf.booleanClockwise(clockwiseRing)
   * //=true
   * turf.booleanClockwise(counterClockwiseRing)
   * //=false
   */

  function booleanClockwise(line) {
    var ring = getCoords(line);
    var sum = 0;
    var i = 1;
    var prev;
    var cur;

    while (i < ring.length) {
      prev = cur || ring[0];
      cur = ring[i];
      sum += (cur[0] - prev[0]) * (cur[1] + prev[1]);
      i++;
    }

    return sum > 0;
  }

  /**
   * Rewind {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon} outer ring counterclockwise and inner rings clockwise (Uses {@link http://en.wikipedia.org/wiki/Shoelace_formula|Shoelace Formula}).
   *
   * @name rewind
   * @param {GeoJSON} geojson input GeoJSON Polygon
   * @param {Object} [options={}] Optional parameters
   * @param {boolean} [options.reverse=false] enable reverse winding
   * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
   * @returns {GeoJSON} rewind Polygon
   * @example
   * var polygon = turf.polygon([[[121, -29], [138, -29], [138, -18], [121, -18], [121, -29]]]);
   *
   * var rewind = turf.rewind(polygon);
   *
   * //addToMap
   * var addToMap = [rewind];
   */

  function rewind(geojson, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var reverse = options.reverse || false;
    var mutate = options.mutate || false; // validation

    if (!geojson) throw new Error("<geojson> is required");
    if (typeof reverse !== "boolean") throw new Error("<reverse> must be a boolean");
    if (typeof mutate !== "boolean") throw new Error("<mutate> must be a boolean"); // prevent input mutation

    if (mutate === false) geojson = clone(geojson); // Support Feature Collection or Geometry Collection

    var results = [];

    switch (geojson.type) {
      case "GeometryCollection":
        geomEach$1(geojson, function (geometry) {
          rewindFeature(geometry, reverse);
        });
        return geojson;

      case "FeatureCollection":
        featureEach$2(geojson, function (feature) {
          featureEach$2(rewindFeature(feature, reverse), function (result) {
            results.push(result);
          });
        });
        return featureCollection$1(results);
    } // Support Feature or Geometry Objects


    return rewindFeature(geojson, reverse);
  }
  /**
   * Rewind
   *
   * @private
   * @param {Geometry|Feature<any>} geojson Geometry or Feature
   * @param {Boolean} [reverse=false] enable reverse winding
   * @returns {Geometry|Feature<any>} rewind Geometry or Feature
   */


  function rewindFeature(geojson, reverse) {
    var type = geojson.type === "Feature" ? geojson.geometry.type : geojson.type; // Support all GeoJSON Geometry Objects

    switch (type) {
      case "GeometryCollection":
        geomEach$1(geojson, function (geometry) {
          rewindFeature(geometry, reverse);
        });
        return geojson;

      case "LineString":
        rewindLineString(getCoords(geojson), reverse);
        return geojson;

      case "Polygon":
        rewindPolygon(getCoords(geojson), reverse);
        return geojson;

      case "MultiLineString":
        getCoords(geojson).forEach(function (lineCoords) {
          rewindLineString(lineCoords, reverse);
        });
        return geojson;

      case "MultiPolygon":
        getCoords(geojson).forEach(function (lineCoords) {
          rewindPolygon(lineCoords, reverse);
        });
        return geojson;

      case "Point":
      case "MultiPoint":
        return geojson;
    }
  }
  /**
   * Rewind LineString - outer ring clockwise
   *
   * @private
   * @param {Array<Array<number>>} coords GeoJSON LineString geometry coordinates
   * @param {Boolean} [reverse=false] enable reverse winding
   * @returns {void} mutates coordinates
   */


  function rewindLineString(coords, reverse) {
    if (booleanClockwise(coords) === reverse) coords.reverse();
  }
  /**
   * Rewind Polygon - outer ring counterclockwise and inner rings clockwise.
   *
   * @private
   * @param {Array<Array<Array<number>>>} coords GeoJSON Polygon geometry coordinates
   * @param {Boolean} [reverse=false] enable reverse winding
   * @returns {void} mutates coordinates
   */


  function rewindPolygon(coords, reverse) {
    // outer ring
    if (booleanClockwise(coords[0]) !== reverse) {
      coords[0].reverse();
    } // inner rings


    for (var i = 1; i < coords.length; i++) {
      if (booleanClockwise(coords[i]) === reverse) {
        coords[i].reverse();
      }
    }
  }

  /**
   * Takes a {@link Point} grid and returns a correspondent matrix {Array<Array<number>>}
   * of the 'property' values
   *
   * @name gridToMatrix
   * @param {FeatureCollection<Point>} grid of points
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.zProperty='elevation'] the property name in `points` from which z-values will be pulled
   * @param {boolean} [options.flip=false] returns the matrix upside-down
   * @param {boolean} [options.flags=false] flags, adding a `matrixPosition` array field ([row, column]) to its properties,
   * the grid points with coordinates on the matrix
   * @returns {Array<Array<number>>} matrix of property values
   * @example
   *   var extent = [-70.823364, -33.553984, -70.473175, -33.302986];
   *   var cellSize = 3;
   *   var grid = turf.pointGrid(extent, cellSize);
   *   // add a random property to each point between 0 and 60
   *   for (var i = 0; i < grid.features.length; i++) {
   *     grid.features[i].properties.elevation = (Math.random() * 60);
   *   }
   *   gridToMatrix(grid);
   *   //= [
   *     [ 1, 13, 10,  9, 10, 13, 18],
   *     [34,  8,  5,  4,  5,  8, 13],
   *     [10,  5,  2,  1,  2,  5,  4],
   *     [ 0,  4, 56, 19,  1,  4,  9],
   *     [10,  5,  2,  1,  2,  5, 10],
   *     [57,  8,  5,  4,  5,  0, 57],
   *     [ 3, 13, 10,  9,  5, 13, 18],
   *     [18, 13, 10,  9, 78, 13, 18]
   *   ]
   */

  function gridToMatrix(grid, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var zProperty = options.zProperty || "elevation";
    var flip = options.flip;
    var flags = options.flags; // validation

    collectionOf(grid, "Point", "input must contain Points");
    var pointsMatrix = sortPointsByLatLng(grid, flip);
    var matrix = []; // create property matrix from sorted points
    // looping order matters here

    for (var r = 0; r < pointsMatrix.length; r++) {
      var pointRow = pointsMatrix[r];
      var row = [];

      for (var c = 0; c < pointRow.length; c++) {
        var point = pointRow[c]; // Check if zProperty exist

        if (point.properties[zProperty]) row.push(point.properties[zProperty]);else row.push(0); // add flags

        if (flags === true) point.properties.matrixPosition = [r, c];
      }

      matrix.push(row);
    }

    return matrix;
  }
  /**
   * Sorts points by latitude and longitude, creating a 2-dimensional array of points
   *
   * @private
   * @param {FeatureCollection<Point>} points GeoJSON Point features
   * @param {boolean} [flip=false] returns the matrix upside-down
   * @returns {Array<Array<Point>>} points ordered by latitude and longitude
   */


  function sortPointsByLatLng(points, flip) {
    var pointsByLatitude = {}; // divide points by rows with the same latitude

    featureEach$2(points, function (point) {
      var lat = getCoords(point)[1];
      if (!pointsByLatitude[lat]) pointsByLatitude[lat] = [];
      pointsByLatitude[lat].push(point);
    }); // sort points (with the same latitude) by longitude

    var orderedRowsByLatitude = Object.keys(pointsByLatitude).map(function (lat) {
      var row = pointsByLatitude[lat];
      var rowOrderedByLongitude = row.sort(function (a, b) {
        return getCoords(a)[0] - getCoords(b)[0];
      });
      return rowOrderedByLongitude;
    }); // sort rows (of points with the same latitude) by latitude

    var pointMatrix = orderedRowsByLatitude.sort(function (a, b) {
      if (flip) return getCoords(a[0])[1] - getCoords(b[0])[1];else return getCoords(b[0])[1] - getCoords(a[0])[1];
    });
    return pointMatrix;
  }
  /*!
   * @license GNU Affero General Public License.
   * Copyright (c) 2015, 2015 Ronny Lorenz <ronny@tbi.univie.ac.at>
   * v. 1.2.0
   * https://github.com/RaumZeit/MarchingSquares.js
   *
   * MarchingSquaresJS is free software: you can redistribute it and/or modify
   * it under the terms of the GNU Affero General Public License as published by
   * the Free Software Foundation, either version 3 of the License, or
   * (at your option) any later version.
   *
   * MarchingSquaresJS is distributed in the hope that it will be useful,
   * but WITHOUT ANY WARRANTY; without even the implied warranty of
   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   * GNU Affero General Public License for more details.
   *
   * As additional permission under GNU Affero General Public License version 3
   * section 7, third-party projects (personal or commercial) may distribute,
   * include, or link against UNMODIFIED VERSIONS of MarchingSquaresJS without the
   * requirement that said third-party project for that reason alone becomes
   * subject to any requirement of the GNU Affero General Public License version 3.
   * Any modifications to MarchingSquaresJS, however, must be shared with the public
   * and made available.
   *
   * In summary this:
   * - allows you to use MarchingSquaresJS at no cost
   * - allows you to use MarchingSquaresJS for both personal and commercial purposes
   * - allows you to distribute UNMODIFIED VERSIONS of MarchingSquaresJS under any
   *   license as long as this license notice is included
   * - enables you to keep the source code of your program that uses MarchingSquaresJS
   *   undisclosed
   * - forces you to share any modifications you have made to MarchingSquaresJS,
   *   e.g. bug-fixes
   *
   * You should have received a copy of the GNU Affero General Public License
   * along with MarchingSquaresJS.  If not, see <http://www.gnu.org/licenses/>.
   */


  var defaultSettings = {
    successCallback: null,
    verbose: false,
    polygons: false
  };
  var settings = {};
  /*
    Compute isobands(s) of a scalar 2D field given a certain
    threshold and a bandwidth by applying the Marching Squares
    Algorithm. The function returns a list of path coordinates
    either for individual polygons within each grid cell, or the
    outline of connected polygons.
  */

  function isoBands(data, minV, bandwidth, options) {
    /* process options */
    options = options ? options : {};
    var optionKeys = Object.keys(defaultSettings);

    for (var i = 0; i < optionKeys.length; i++) {
      var key = optionKeys[i];
      var val = options[key];
      val = typeof val !== "undefined" && val !== null ? val : defaultSettings[key];
      settings[key] = val;
    }

    if (settings.verbose) console.log("MarchingSquaresJS-isoBands: computing isobands for [" + minV + ":" + (minV + bandwidth) + "]");
    var grid = computeBandGrid(data, minV, bandwidth);
    var ret;

    if (settings.polygons) {
      if (settings.verbose) console.log("MarchingSquaresJS-isoBands: returning single polygons for each grid cell");
      ret = BandGrid2Areas(grid);
    } else {
      if (settings.verbose) console.log("MarchingSquaresJS-isoBands: returning polygon paths for entire data grid");
      ret = BandGrid2AreaPaths(grid);
    }

    if (typeof settings.successCallback === "function") settings.successCallback(ret);
    return ret;
  }
  /*
    Thats all for the public interface, below follows the actual
    implementation
  */

  /* Some private variables */


  var Node0 = 64,
      Node1 = 16,
      Node2 = 4,
      Node3 = 1;
  /*
    The look-up tables for tracing back the contour path
    of isoBands
  */

  var isoBandNextXTL = [];
  var isoBandNextYTL = [];
  var isoBandNextOTL = [];
  var isoBandNextXTR = [];
  var isoBandNextYTR = [];
  var isoBandNextOTR = [];
  var isoBandNextXRT = [];
  var isoBandNextYRT = [];
  var isoBandNextORT = [];
  var isoBandNextXRB = [];
  var isoBandNextYRB = [];
  var isoBandNextORB = [];
  var isoBandNextXBL = [];
  var isoBandNextYBL = [];
  var isoBandNextOBL = [];
  var isoBandNextXBR = [];
  var isoBandNextYBR = [];
  var isoBandNextOBR = [];
  var isoBandNextXLT = [];
  var isoBandNextYLT = [];
  var isoBandNextOLT = [];
  var isoBandNextXLB = [];
  var isoBandNextYLB = [];
  var isoBandNextOLB = [];
  isoBandNextXRT[85] = isoBandNextXRB[85] = -1;
  isoBandNextYRT[85] = isoBandNextYRB[85] = 0;
  isoBandNextORT[85] = isoBandNextORB[85] = 1;
  isoBandNextXLT[85] = isoBandNextXLB[85] = 1;
  isoBandNextYLT[85] = isoBandNextYLB[85] = 0;
  isoBandNextOLT[85] = isoBandNextOLB[85] = 1;
  isoBandNextXTL[85] = isoBandNextXTR[85] = 0;
  isoBandNextYTL[85] = isoBandNextYTR[85] = -1;
  isoBandNextOTL[85] = isoBandNextOBL[85] = 0;
  isoBandNextXBR[85] = isoBandNextXBL[85] = 0;
  isoBandNextYBR[85] = isoBandNextYBL[85] = 1;
  isoBandNextOTR[85] = isoBandNextOBR[85] = 1;
  /* triangle cases */

  isoBandNextXLB[1] = isoBandNextXLB[169] = 0;
  isoBandNextYLB[1] = isoBandNextYLB[169] = -1;
  isoBandNextOLB[1] = isoBandNextOLB[169] = 0;
  isoBandNextXBL[1] = isoBandNextXBL[169] = -1;
  isoBandNextYBL[1] = isoBandNextYBL[169] = 0;
  isoBandNextOBL[1] = isoBandNextOBL[169] = 0;
  isoBandNextXRB[4] = isoBandNextXRB[166] = 0;
  isoBandNextYRB[4] = isoBandNextYRB[166] = -1;
  isoBandNextORB[4] = isoBandNextORB[166] = 1;
  isoBandNextXBR[4] = isoBandNextXBR[166] = 1;
  isoBandNextYBR[4] = isoBandNextYBR[166] = 0;
  isoBandNextOBR[4] = isoBandNextOBR[166] = 0;
  isoBandNextXRT[16] = isoBandNextXRT[154] = 0;
  isoBandNextYRT[16] = isoBandNextYRT[154] = 1;
  isoBandNextORT[16] = isoBandNextORT[154] = 1;
  isoBandNextXTR[16] = isoBandNextXTR[154] = 1;
  isoBandNextYTR[16] = isoBandNextYTR[154] = 0;
  isoBandNextOTR[16] = isoBandNextOTR[154] = 1;
  isoBandNextXLT[64] = isoBandNextXLT[106] = 0;
  isoBandNextYLT[64] = isoBandNextYLT[106] = 1;
  isoBandNextOLT[64] = isoBandNextOLT[106] = 0;
  isoBandNextXTL[64] = isoBandNextXTL[106] = -1;
  isoBandNextYTL[64] = isoBandNextYTL[106] = 0;
  isoBandNextOTL[64] = isoBandNextOTL[106] = 1;
  /* single trapezoid cases */

  isoBandNextXLT[2] = isoBandNextXLT[168] = 0;
  isoBandNextYLT[2] = isoBandNextYLT[168] = -1;
  isoBandNextOLT[2] = isoBandNextOLT[168] = 1;
  isoBandNextXLB[2] = isoBandNextXLB[168] = 0;
  isoBandNextYLB[2] = isoBandNextYLB[168] = -1;
  isoBandNextOLB[2] = isoBandNextOLB[168] = 0;
  isoBandNextXBL[2] = isoBandNextXBL[168] = -1;
  isoBandNextYBL[2] = isoBandNextYBL[168] = 0;
  isoBandNextOBL[2] = isoBandNextOBL[168] = 0;
  isoBandNextXBR[2] = isoBandNextXBR[168] = -1;
  isoBandNextYBR[2] = isoBandNextYBR[168] = 0;
  isoBandNextOBR[2] = isoBandNextOBR[168] = 1;
  isoBandNextXRT[8] = isoBandNextXRT[162] = 0;
  isoBandNextYRT[8] = isoBandNextYRT[162] = -1;
  isoBandNextORT[8] = isoBandNextORT[162] = 0;
  isoBandNextXRB[8] = isoBandNextXRB[162] = 0;
  isoBandNextYRB[8] = isoBandNextYRB[162] = -1;
  isoBandNextORB[8] = isoBandNextORB[162] = 1;
  isoBandNextXBL[8] = isoBandNextXBL[162] = 1;
  isoBandNextYBL[8] = isoBandNextYBL[162] = 0;
  isoBandNextOBL[8] = isoBandNextOBL[162] = 1;
  isoBandNextXBR[8] = isoBandNextXBR[162] = 1;
  isoBandNextYBR[8] = isoBandNextYBR[162] = 0;
  isoBandNextOBR[8] = isoBandNextOBR[162] = 0;
  isoBandNextXRT[32] = isoBandNextXRT[138] = 0;
  isoBandNextYRT[32] = isoBandNextYRT[138] = 1;
  isoBandNextORT[32] = isoBandNextORT[138] = 1;
  isoBandNextXRB[32] = isoBandNextXRB[138] = 0;
  isoBandNextYRB[32] = isoBandNextYRB[138] = 1;
  isoBandNextORB[32] = isoBandNextORB[138] = 0;
  isoBandNextXTL[32] = isoBandNextXTL[138] = 1;
  isoBandNextYTL[32] = isoBandNextYTL[138] = 0;
  isoBandNextOTL[32] = isoBandNextOTL[138] = 0;
  isoBandNextXTR[32] = isoBandNextXTR[138] = 1;
  isoBandNextYTR[32] = isoBandNextYTR[138] = 0;
  isoBandNextOTR[32] = isoBandNextOTR[138] = 1;
  isoBandNextXLB[128] = isoBandNextXLB[42] = 0;
  isoBandNextYLB[128] = isoBandNextYLB[42] = 1;
  isoBandNextOLB[128] = isoBandNextOLB[42] = 1;
  isoBandNextXLT[128] = isoBandNextXLT[42] = 0;
  isoBandNextYLT[128] = isoBandNextYLT[42] = 1;
  isoBandNextOLT[128] = isoBandNextOLT[42] = 0;
  isoBandNextXTL[128] = isoBandNextXTL[42] = -1;
  isoBandNextYTL[128] = isoBandNextYTL[42] = 0;
  isoBandNextOTL[128] = isoBandNextOTL[42] = 1;
  isoBandNextXTR[128] = isoBandNextXTR[42] = -1;
  isoBandNextYTR[128] = isoBandNextYTR[42] = 0;
  isoBandNextOTR[128] = isoBandNextOTR[42] = 0;
  /* single rectangle cases */

  isoBandNextXRB[5] = isoBandNextXRB[165] = -1;
  isoBandNextYRB[5] = isoBandNextYRB[165] = 0;
  isoBandNextORB[5] = isoBandNextORB[165] = 0;
  isoBandNextXLB[5] = isoBandNextXLB[165] = 1;
  isoBandNextYLB[5] = isoBandNextYLB[165] = 0;
  isoBandNextOLB[5] = isoBandNextOLB[165] = 0;
  isoBandNextXBR[20] = isoBandNextXBR[150] = 0;
  isoBandNextYBR[20] = isoBandNextYBR[150] = 1;
  isoBandNextOBR[20] = isoBandNextOBR[150] = 1;
  isoBandNextXTR[20] = isoBandNextXTR[150] = 0;
  isoBandNextYTR[20] = isoBandNextYTR[150] = -1;
  isoBandNextOTR[20] = isoBandNextOTR[150] = 1;
  isoBandNextXRT[80] = isoBandNextXRT[90] = -1;
  isoBandNextYRT[80] = isoBandNextYRT[90] = 0;
  isoBandNextORT[80] = isoBandNextORT[90] = 1;
  isoBandNextXLT[80] = isoBandNextXLT[90] = 1;
  isoBandNextYLT[80] = isoBandNextYLT[90] = 0;
  isoBandNextOLT[80] = isoBandNextOLT[90] = 1;
  isoBandNextXBL[65] = isoBandNextXBL[105] = 0;
  isoBandNextYBL[65] = isoBandNextYBL[105] = 1;
  isoBandNextOBL[65] = isoBandNextOBL[105] = 0;
  isoBandNextXTL[65] = isoBandNextXTL[105] = 0;
  isoBandNextYTL[65] = isoBandNextYTL[105] = -1;
  isoBandNextOTL[65] = isoBandNextOTL[105] = 0;
  isoBandNextXRT[160] = isoBandNextXRT[10] = -1;
  isoBandNextYRT[160] = isoBandNextYRT[10] = 0;
  isoBandNextORT[160] = isoBandNextORT[10] = 1;
  isoBandNextXRB[160] = isoBandNextXRB[10] = -1;
  isoBandNextYRB[160] = isoBandNextYRB[10] = 0;
  isoBandNextORB[160] = isoBandNextORB[10] = 0;
  isoBandNextXLB[160] = isoBandNextXLB[10] = 1;
  isoBandNextYLB[160] = isoBandNextYLB[10] = 0;
  isoBandNextOLB[160] = isoBandNextOLB[10] = 0;
  isoBandNextXLT[160] = isoBandNextXLT[10] = 1;
  isoBandNextYLT[160] = isoBandNextYLT[10] = 0;
  isoBandNextOLT[160] = isoBandNextOLT[10] = 1;
  isoBandNextXBR[130] = isoBandNextXBR[40] = 0;
  isoBandNextYBR[130] = isoBandNextYBR[40] = 1;
  isoBandNextOBR[130] = isoBandNextOBR[40] = 1;
  isoBandNextXBL[130] = isoBandNextXBL[40] = 0;
  isoBandNextYBL[130] = isoBandNextYBL[40] = 1;
  isoBandNextOBL[130] = isoBandNextOBL[40] = 0;
  isoBandNextXTL[130] = isoBandNextXTL[40] = 0;
  isoBandNextYTL[130] = isoBandNextYTL[40] = -1;
  isoBandNextOTL[130] = isoBandNextOTL[40] = 0;
  isoBandNextXTR[130] = isoBandNextXTR[40] = 0;
  isoBandNextYTR[130] = isoBandNextYTR[40] = -1;
  isoBandNextOTR[130] = isoBandNextOTR[40] = 1;
  /* single hexagon cases */

  isoBandNextXRB[37] = isoBandNextXRB[133] = 0;
  isoBandNextYRB[37] = isoBandNextYRB[133] = 1;
  isoBandNextORB[37] = isoBandNextORB[133] = 1;
  isoBandNextXLB[37] = isoBandNextXLB[133] = 0;
  isoBandNextYLB[37] = isoBandNextYLB[133] = 1;
  isoBandNextOLB[37] = isoBandNextOLB[133] = 0;
  isoBandNextXTL[37] = isoBandNextXTL[133] = -1;
  isoBandNextYTL[37] = isoBandNextYTL[133] = 0;
  isoBandNextOTL[37] = isoBandNextOTL[133] = 0;
  isoBandNextXTR[37] = isoBandNextXTR[133] = 1;
  isoBandNextYTR[37] = isoBandNextYTR[133] = 0;
  isoBandNextOTR[37] = isoBandNextOTR[133] = 0;
  isoBandNextXBR[148] = isoBandNextXBR[22] = -1;
  isoBandNextYBR[148] = isoBandNextYBR[22] = 0;
  isoBandNextOBR[148] = isoBandNextOBR[22] = 0;
  isoBandNextXLB[148] = isoBandNextXLB[22] = 0;
  isoBandNextYLB[148] = isoBandNextYLB[22] = -1;
  isoBandNextOLB[148] = isoBandNextOLB[22] = 1;
  isoBandNextXLT[148] = isoBandNextXLT[22] = 0;
  isoBandNextYLT[148] = isoBandNextYLT[22] = 1;
  isoBandNextOLT[148] = isoBandNextOLT[22] = 1;
  isoBandNextXTR[148] = isoBandNextXTR[22] = -1;
  isoBandNextYTR[148] = isoBandNextYTR[22] = 0;
  isoBandNextOTR[148] = isoBandNextOTR[22] = 1;
  isoBandNextXRT[82] = isoBandNextXRT[88] = 0;
  isoBandNextYRT[82] = isoBandNextYRT[88] = -1;
  isoBandNextORT[82] = isoBandNextORT[88] = 1;
  isoBandNextXBR[82] = isoBandNextXBR[88] = 1;
  isoBandNextYBR[82] = isoBandNextYBR[88] = 0;
  isoBandNextOBR[82] = isoBandNextOBR[88] = 1;
  isoBandNextXBL[82] = isoBandNextXBL[88] = -1;
  isoBandNextYBL[82] = isoBandNextYBL[88] = 0;
  isoBandNextOBL[82] = isoBandNextOBL[88] = 1;
  isoBandNextXLT[82] = isoBandNextXLT[88] = 0;
  isoBandNextYLT[82] = isoBandNextYLT[88] = -1;
  isoBandNextOLT[82] = isoBandNextOLT[88] = 0;
  isoBandNextXRT[73] = isoBandNextXRT[97] = 0;
  isoBandNextYRT[73] = isoBandNextYRT[97] = 1;
  isoBandNextORT[73] = isoBandNextORT[97] = 0;
  isoBandNextXRB[73] = isoBandNextXRB[97] = 0;
  isoBandNextYRB[73] = isoBandNextYRB[97] = -1;
  isoBandNextORB[73] = isoBandNextORB[97] = 0;
  isoBandNextXBL[73] = isoBandNextXBL[97] = 1;
  isoBandNextYBL[73] = isoBandNextYBL[97] = 0;
  isoBandNextOBL[73] = isoBandNextOBL[97] = 0;
  isoBandNextXTL[73] = isoBandNextXTL[97] = 1;
  isoBandNextYTL[73] = isoBandNextYTL[97] = 0;
  isoBandNextOTL[73] = isoBandNextOTL[97] = 1;
  isoBandNextXRT[145] = isoBandNextXRT[25] = 0;
  isoBandNextYRT[145] = isoBandNextYRT[25] = -1;
  isoBandNextORT[145] = isoBandNextORT[25] = 0;
  isoBandNextXBL[145] = isoBandNextXBL[25] = 1;
  isoBandNextYBL[145] = isoBandNextYBL[25] = 0;
  isoBandNextOBL[145] = isoBandNextOBL[25] = 1;
  isoBandNextXLB[145] = isoBandNextXLB[25] = 0;
  isoBandNextYLB[145] = isoBandNextYLB[25] = 1;
  isoBandNextOLB[145] = isoBandNextOLB[25] = 1;
  isoBandNextXTR[145] = isoBandNextXTR[25] = -1;
  isoBandNextYTR[145] = isoBandNextYTR[25] = 0;
  isoBandNextOTR[145] = isoBandNextOTR[25] = 0;
  isoBandNextXRB[70] = isoBandNextXRB[100] = 0;
  isoBandNextYRB[70] = isoBandNextYRB[100] = 1;
  isoBandNextORB[70] = isoBandNextORB[100] = 0;
  isoBandNextXBR[70] = isoBandNextXBR[100] = -1;
  isoBandNextYBR[70] = isoBandNextYBR[100] = 0;
  isoBandNextOBR[70] = isoBandNextOBR[100] = 1;
  isoBandNextXLT[70] = isoBandNextXLT[100] = 0;
  isoBandNextYLT[70] = isoBandNextYLT[100] = -1;
  isoBandNextOLT[70] = isoBandNextOLT[100] = 1;
  isoBandNextXTL[70] = isoBandNextXTL[100] = 1;
  isoBandNextYTL[70] = isoBandNextYTL[100] = 0;
  isoBandNextOTL[70] = isoBandNextOTL[100] = 0;
  /* single pentagon cases */

  isoBandNextXRB[101] = isoBandNextXRB[69] = 0;
  isoBandNextYRB[101] = isoBandNextYRB[69] = 1;
  isoBandNextORB[101] = isoBandNextORB[69] = 0;
  isoBandNextXTL[101] = isoBandNextXTL[69] = 1;
  isoBandNextYTL[101] = isoBandNextYTL[69] = 0;
  isoBandNextOTL[101] = isoBandNextOTL[69] = 0;
  isoBandNextXLB[149] = isoBandNextXLB[21] = 0;
  isoBandNextYLB[149] = isoBandNextYLB[21] = 1;
  isoBandNextOLB[149] = isoBandNextOLB[21] = 1;
  isoBandNextXTR[149] = isoBandNextXTR[21] = -1;
  isoBandNextYTR[149] = isoBandNextYTR[21] = 0;
  isoBandNextOTR[149] = isoBandNextOTR[21] = 0;
  isoBandNextXBR[86] = isoBandNextXBR[84] = -1;
  isoBandNextYBR[86] = isoBandNextYBR[84] = 0;
  isoBandNextOBR[86] = isoBandNextOBR[84] = 1;
  isoBandNextXLT[86] = isoBandNextXLT[84] = 0;
  isoBandNextYLT[86] = isoBandNextYLT[84] = -1;
  isoBandNextOLT[86] = isoBandNextOLT[84] = 1;
  isoBandNextXRT[89] = isoBandNextXRT[81] = 0;
  isoBandNextYRT[89] = isoBandNextYRT[81] = -1;
  isoBandNextORT[89] = isoBandNextORT[81] = 0;
  isoBandNextXBL[89] = isoBandNextXBL[81] = 1;
  isoBandNextYBL[89] = isoBandNextYBL[81] = 0;
  isoBandNextOBL[89] = isoBandNextOBL[81] = 1;
  isoBandNextXRT[96] = isoBandNextXRT[74] = 0;
  isoBandNextYRT[96] = isoBandNextYRT[74] = 1;
  isoBandNextORT[96] = isoBandNextORT[74] = 0;
  isoBandNextXRB[96] = isoBandNextXRB[74] = -1;
  isoBandNextYRB[96] = isoBandNextYRB[74] = 0;
  isoBandNextORB[96] = isoBandNextORB[74] = 1;
  isoBandNextXLT[96] = isoBandNextXLT[74] = 1;
  isoBandNextYLT[96] = isoBandNextYLT[74] = 0;
  isoBandNextOLT[96] = isoBandNextOLT[74] = 0;
  isoBandNextXTL[96] = isoBandNextXTL[74] = 1;
  isoBandNextYTL[96] = isoBandNextYTL[74] = 0;
  isoBandNextOTL[96] = isoBandNextOTL[74] = 1;
  isoBandNextXRT[24] = isoBandNextXRT[146] = 0;
  isoBandNextYRT[24] = isoBandNextYRT[146] = -1;
  isoBandNextORT[24] = isoBandNextORT[146] = 1;
  isoBandNextXBR[24] = isoBandNextXBR[146] = 1;
  isoBandNextYBR[24] = isoBandNextYBR[146] = 0;
  isoBandNextOBR[24] = isoBandNextOBR[146] = 1;
  isoBandNextXBL[24] = isoBandNextXBL[146] = 0;
  isoBandNextYBL[24] = isoBandNextYBL[146] = 1;
  isoBandNextOBL[24] = isoBandNextOBL[146] = 1;
  isoBandNextXTR[24] = isoBandNextXTR[146] = 0;
  isoBandNextYTR[24] = isoBandNextYTR[146] = -1;
  isoBandNextOTR[24] = isoBandNextOTR[146] = 0;
  isoBandNextXRB[6] = isoBandNextXRB[164] = -1;
  isoBandNextYRB[6] = isoBandNextYRB[164] = 0;
  isoBandNextORB[6] = isoBandNextORB[164] = 1;
  isoBandNextXBR[6] = isoBandNextXBR[164] = -1;
  isoBandNextYBR[6] = isoBandNextYBR[164] = 0;
  isoBandNextOBR[6] = isoBandNextOBR[164] = 0;
  isoBandNextXLB[6] = isoBandNextXLB[164] = 0;
  isoBandNextYLB[6] = isoBandNextYLB[164] = -1;
  isoBandNextOLB[6] = isoBandNextOLB[164] = 1;
  isoBandNextXLT[6] = isoBandNextXLT[164] = 1;
  isoBandNextYLT[6] = isoBandNextYLT[164] = 0;
  isoBandNextOLT[6] = isoBandNextOLT[164] = 0;
  isoBandNextXBL[129] = isoBandNextXBL[41] = 0;
  isoBandNextYBL[129] = isoBandNextYBL[41] = 1;
  isoBandNextOBL[129] = isoBandNextOBL[41] = 1;
  isoBandNextXLB[129] = isoBandNextXLB[41] = 0;
  isoBandNextYLB[129] = isoBandNextYLB[41] = 1;
  isoBandNextOLB[129] = isoBandNextOLB[41] = 0;
  isoBandNextXTL[129] = isoBandNextXTL[41] = -1;
  isoBandNextYTL[129] = isoBandNextYTL[41] = 0;
  isoBandNextOTL[129] = isoBandNextOTL[41] = 0;
  isoBandNextXTR[129] = isoBandNextXTR[41] = 0;
  isoBandNextYTR[129] = isoBandNextYTR[41] = -1;
  isoBandNextOTR[129] = isoBandNextOTR[41] = 0;
  isoBandNextXBR[66] = isoBandNextXBR[104] = 0;
  isoBandNextYBR[66] = isoBandNextYBR[104] = 1;
  isoBandNextOBR[66] = isoBandNextOBR[104] = 0;
  isoBandNextXBL[66] = isoBandNextXBL[104] = -1;
  isoBandNextYBL[66] = isoBandNextYBL[104] = 0;
  isoBandNextOBL[66] = isoBandNextOBL[104] = 1;
  isoBandNextXLT[66] = isoBandNextXLT[104] = 0;
  isoBandNextYLT[66] = isoBandNextYLT[104] = -1;
  isoBandNextOLT[66] = isoBandNextOLT[104] = 0;
  isoBandNextXTL[66] = isoBandNextXTL[104] = 0;
  isoBandNextYTL[66] = isoBandNextYTL[104] = -1;
  isoBandNextOTL[66] = isoBandNextOTL[104] = 1;
  isoBandNextXRT[144] = isoBandNextXRT[26] = -1;
  isoBandNextYRT[144] = isoBandNextYRT[26] = 0;
  isoBandNextORT[144] = isoBandNextORT[26] = 0;
  isoBandNextXLB[144] = isoBandNextXLB[26] = 1;
  isoBandNextYLB[144] = isoBandNextYLB[26] = 0;
  isoBandNextOLB[144] = isoBandNextOLB[26] = 1;
  isoBandNextXLT[144] = isoBandNextXLT[26] = 0;
  isoBandNextYLT[144] = isoBandNextYLT[26] = 1;
  isoBandNextOLT[144] = isoBandNextOLT[26] = 1;
  isoBandNextXTR[144] = isoBandNextXTR[26] = -1;
  isoBandNextYTR[144] = isoBandNextYTR[26] = 0;
  isoBandNextOTR[144] = isoBandNextOTR[26] = 1;
  isoBandNextXRB[36] = isoBandNextXRB[134] = 0;
  isoBandNextYRB[36] = isoBandNextYRB[134] = 1;
  isoBandNextORB[36] = isoBandNextORB[134] = 1;
  isoBandNextXBR[36] = isoBandNextXBR[134] = 0;
  isoBandNextYBR[36] = isoBandNextYBR[134] = 1;
  isoBandNextOBR[36] = isoBandNextOBR[134] = 0;
  isoBandNextXTL[36] = isoBandNextXTL[134] = 0;
  isoBandNextYTL[36] = isoBandNextYTL[134] = -1;
  isoBandNextOTL[36] = isoBandNextOTL[134] = 1;
  isoBandNextXTR[36] = isoBandNextXTR[134] = 1;
  isoBandNextYTR[36] = isoBandNextYTR[134] = 0;
  isoBandNextOTR[36] = isoBandNextOTR[134] = 0;
  isoBandNextXRT[9] = isoBandNextXRT[161] = -1;
  isoBandNextYRT[9] = isoBandNextYRT[161] = 0;
  isoBandNextORT[9] = isoBandNextORT[161] = 0;
  isoBandNextXRB[9] = isoBandNextXRB[161] = 0;
  isoBandNextYRB[9] = isoBandNextYRB[161] = -1;
  isoBandNextORB[9] = isoBandNextORB[161] = 0;
  isoBandNextXBL[9] = isoBandNextXBL[161] = 1;
  isoBandNextYBL[9] = isoBandNextYBL[161] = 0;
  isoBandNextOBL[9] = isoBandNextOBL[161] = 0;
  isoBandNextXLB[9] = isoBandNextXLB[161] = 1;
  isoBandNextYLB[9] = isoBandNextYLB[161] = 0;
  isoBandNextOLB[9] = isoBandNextOLB[161] = 1;
  /* 8-sided cases */

  isoBandNextXRT[136] = 0;
  isoBandNextYRT[136] = 1;
  isoBandNextORT[136] = 1;
  isoBandNextXRB[136] = 0;
  isoBandNextYRB[136] = 1;
  isoBandNextORB[136] = 0;
  isoBandNextXBR[136] = -1;
  isoBandNextYBR[136] = 0;
  isoBandNextOBR[136] = 1;
  isoBandNextXBL[136] = -1;
  isoBandNextYBL[136] = 0;
  isoBandNextOBL[136] = 0;
  isoBandNextXLB[136] = 0;
  isoBandNextYLB[136] = -1;
  isoBandNextOLB[136] = 0;
  isoBandNextXLT[136] = 0;
  isoBandNextYLT[136] = -1;
  isoBandNextOLT[136] = 1;
  isoBandNextXTL[136] = 1;
  isoBandNextYTL[136] = 0;
  isoBandNextOTL[136] = 0;
  isoBandNextXTR[136] = 1;
  isoBandNextYTR[136] = 0;
  isoBandNextOTR[136] = 1;
  isoBandNextXRT[34] = 0;
  isoBandNextYRT[34] = -1;
  isoBandNextORT[34] = 0;
  isoBandNextXRB[34] = 0;
  isoBandNextYRB[34] = -1;
  isoBandNextORB[34] = 1;
  isoBandNextXBR[34] = 1;
  isoBandNextYBR[34] = 0;
  isoBandNextOBR[34] = 0;
  isoBandNextXBL[34] = 1;
  isoBandNextYBL[34] = 0;
  isoBandNextOBL[34] = 1;
  isoBandNextXLB[34] = 0;
  isoBandNextYLB[34] = 1;
  isoBandNextOLB[34] = 1;
  isoBandNextXLT[34] = 0;
  isoBandNextYLT[34] = 1;
  isoBandNextOLT[34] = 0;
  isoBandNextXTL[34] = -1;
  isoBandNextYTL[34] = 0;
  isoBandNextOTL[34] = 1;
  isoBandNextXTR[34] = -1;
  isoBandNextYTR[34] = 0;
  isoBandNextOTR[34] = 0;
  isoBandNextXRT[35] = 0;
  isoBandNextYRT[35] = 1;
  isoBandNextORT[35] = 1;
  isoBandNextXRB[35] = 0;
  isoBandNextYRB[35] = -1;
  isoBandNextORB[35] = 1;
  isoBandNextXBR[35] = 1;
  isoBandNextYBR[35] = 0;
  isoBandNextOBR[35] = 0;
  isoBandNextXBL[35] = -1;
  isoBandNextYBL[35] = 0;
  isoBandNextOBL[35] = 0;
  isoBandNextXLB[35] = 0;
  isoBandNextYLB[35] = -1;
  isoBandNextOLB[35] = 0;
  isoBandNextXLT[35] = 0;
  isoBandNextYLT[35] = 1;
  isoBandNextOLT[35] = 0;
  isoBandNextXTL[35] = -1;
  isoBandNextYTL[35] = 0;
  isoBandNextOTL[35] = 1;
  isoBandNextXTR[35] = 1;
  isoBandNextYTR[35] = 0;
  isoBandNextOTR[35] = 1;
  /* 6-sided cases */

  isoBandNextXRT[153] = 0;
  isoBandNextYRT[153] = 1;
  isoBandNextORT[153] = 1;
  isoBandNextXBL[153] = -1;
  isoBandNextYBL[153] = 0;
  isoBandNextOBL[153] = 0;
  isoBandNextXLB[153] = 0;
  isoBandNextYLB[153] = -1;
  isoBandNextOLB[153] = 0;
  isoBandNextXTR[153] = 1;
  isoBandNextYTR[153] = 0;
  isoBandNextOTR[153] = 1;
  isoBandNextXRB[102] = 0;
  isoBandNextYRB[102] = -1;
  isoBandNextORB[102] = 1;
  isoBandNextXBR[102] = 1;
  isoBandNextYBR[102] = 0;
  isoBandNextOBR[102] = 0;
  isoBandNextXLT[102] = 0;
  isoBandNextYLT[102] = 1;
  isoBandNextOLT[102] = 0;
  isoBandNextXTL[102] = -1;
  isoBandNextYTL[102] = 0;
  isoBandNextOTL[102] = 1;
  isoBandNextXRT[155] = 0;
  isoBandNextYRT[155] = -1;
  isoBandNextORT[155] = 0;
  isoBandNextXBL[155] = 1;
  isoBandNextYBL[155] = 0;
  isoBandNextOBL[155] = 1;
  isoBandNextXLB[155] = 0;
  isoBandNextYLB[155] = 1;
  isoBandNextOLB[155] = 1;
  isoBandNextXTR[155] = -1;
  isoBandNextYTR[155] = 0;
  isoBandNextOTR[155] = 0;
  isoBandNextXRB[103] = 0;
  isoBandNextYRB[103] = 1;
  isoBandNextORB[103] = 0;
  isoBandNextXBR[103] = -1;
  isoBandNextYBR[103] = 0;
  isoBandNextOBR[103] = 1;
  isoBandNextXLT[103] = 0;
  isoBandNextYLT[103] = -1;
  isoBandNextOLT[103] = 1;
  isoBandNextXTL[103] = 1;
  isoBandNextYTL[103] = 0;
  isoBandNextOTL[103] = 0;
  /* 7-sided cases */

  isoBandNextXRT[152] = 0;
  isoBandNextYRT[152] = 1;
  isoBandNextORT[152] = 1;
  isoBandNextXBR[152] = -1;
  isoBandNextYBR[152] = 0;
  isoBandNextOBR[152] = 1;
  isoBandNextXBL[152] = -1;
  isoBandNextYBL[152] = 0;
  isoBandNextOBL[152] = 0;
  isoBandNextXLB[152] = 0;
  isoBandNextYLB[152] = -1;
  isoBandNextOLB[152] = 0;
  isoBandNextXLT[152] = 0;
  isoBandNextYLT[152] = -1;
  isoBandNextOLT[152] = 1;
  isoBandNextXTR[152] = 1;
  isoBandNextYTR[152] = 0;
  isoBandNextOTR[152] = 1;
  isoBandNextXRT[156] = 0;
  isoBandNextYRT[156] = -1;
  isoBandNextORT[156] = 1;
  isoBandNextXBR[156] = 1;
  isoBandNextYBR[156] = 0;
  isoBandNextOBR[156] = 1;
  isoBandNextXBL[156] = -1;
  isoBandNextYBL[156] = 0;
  isoBandNextOBL[156] = 0;
  isoBandNextXLB[156] = 0;
  isoBandNextYLB[156] = -1;
  isoBandNextOLB[156] = 0;
  isoBandNextXLT[156] = 0;
  isoBandNextYLT[156] = 1;
  isoBandNextOLT[156] = 1;
  isoBandNextXTR[156] = -1;
  isoBandNextYTR[156] = 0;
  isoBandNextOTR[156] = 1;
  isoBandNextXRT[137] = 0;
  isoBandNextYRT[137] = 1;
  isoBandNextORT[137] = 1;
  isoBandNextXRB[137] = 0;
  isoBandNextYRB[137] = 1;
  isoBandNextORB[137] = 0;
  isoBandNextXBL[137] = -1;
  isoBandNextYBL[137] = 0;
  isoBandNextOBL[137] = 0;
  isoBandNextXLB[137] = 0;
  isoBandNextYLB[137] = -1;
  isoBandNextOLB[137] = 0;
  isoBandNextXTL[137] = 1;
  isoBandNextYTL[137] = 0;
  isoBandNextOTL[137] = 0;
  isoBandNextXTR[137] = 1;
  isoBandNextYTR[137] = 0;
  isoBandNextOTR[137] = 1;
  isoBandNextXRT[139] = 0;
  isoBandNextYRT[139] = 1;
  isoBandNextORT[139] = 1;
  isoBandNextXRB[139] = 0;
  isoBandNextYRB[139] = -1;
  isoBandNextORB[139] = 0;
  isoBandNextXBL[139] = 1;
  isoBandNextYBL[139] = 0;
  isoBandNextOBL[139] = 0;
  isoBandNextXLB[139] = 0;
  isoBandNextYLB[139] = 1;
  isoBandNextOLB[139] = 0;
  isoBandNextXTL[139] = -1;
  isoBandNextYTL[139] = 0;
  isoBandNextOTL[139] = 0;
  isoBandNextXTR[139] = 1;
  isoBandNextYTR[139] = 0;
  isoBandNextOTR[139] = 1;
  isoBandNextXRT[98] = 0;
  isoBandNextYRT[98] = -1;
  isoBandNextORT[98] = 0;
  isoBandNextXRB[98] = 0;
  isoBandNextYRB[98] = -1;
  isoBandNextORB[98] = 1;
  isoBandNextXBR[98] = 1;
  isoBandNextYBR[98] = 0;
  isoBandNextOBR[98] = 0;
  isoBandNextXBL[98] = 1;
  isoBandNextYBL[98] = 0;
  isoBandNextOBL[98] = 1;
  isoBandNextXLT[98] = 0;
  isoBandNextYLT[98] = 1;
  isoBandNextOLT[98] = 0;
  isoBandNextXTL[98] = -1;
  isoBandNextYTL[98] = 0;
  isoBandNextOTL[98] = 1;
  isoBandNextXRT[99] = 0;
  isoBandNextYRT[99] = 1;
  isoBandNextORT[99] = 0;
  isoBandNextXRB[99] = 0;
  isoBandNextYRB[99] = -1;
  isoBandNextORB[99] = 1;
  isoBandNextXBR[99] = 1;
  isoBandNextYBR[99] = 0;
  isoBandNextOBR[99] = 0;
  isoBandNextXBL[99] = -1;
  isoBandNextYBL[99] = 0;
  isoBandNextOBL[99] = 1;
  isoBandNextXLT[99] = 0;
  isoBandNextYLT[99] = -1;
  isoBandNextOLT[99] = 0;
  isoBandNextXTL[99] = 1;
  isoBandNextYTL[99] = 0;
  isoBandNextOTL[99] = 1;
  isoBandNextXRB[38] = 0;
  isoBandNextYRB[38] = -1;
  isoBandNextORB[38] = 1;
  isoBandNextXBR[38] = 1;
  isoBandNextYBR[38] = 0;
  isoBandNextOBR[38] = 0;
  isoBandNextXLB[38] = 0;
  isoBandNextYLB[38] = 1;
  isoBandNextOLB[38] = 1;
  isoBandNextXLT[38] = 0;
  isoBandNextYLT[38] = 1;
  isoBandNextOLT[38] = 0;
  isoBandNextXTL[38] = -1;
  isoBandNextYTL[38] = 0;
  isoBandNextOTL[38] = 1;
  isoBandNextXTR[38] = -1;
  isoBandNextYTR[38] = 0;
  isoBandNextOTR[38] = 0;
  isoBandNextXRB[39] = 0;
  isoBandNextYRB[39] = 1;
  isoBandNextORB[39] = 1;
  isoBandNextXBR[39] = -1;
  isoBandNextYBR[39] = 0;
  isoBandNextOBR[39] = 0;
  isoBandNextXLB[39] = 0;
  isoBandNextYLB[39] = -1;
  isoBandNextOLB[39] = 1;
  isoBandNextXLT[39] = 0;
  isoBandNextYLT[39] = 1;
  isoBandNextOLT[39] = 0;
  isoBandNextXTL[39] = -1;
  isoBandNextYTL[39] = 0;
  isoBandNextOTL[39] = 1;
  isoBandNextXTR[39] = 1;
  isoBandNextYTR[39] = 0;
  isoBandNextOTR[39] = 0;
  /*
    Define helper functions for the polygon_table
    */

  /* triangle cases */

  var p00 = function p00(cell) {
    return [[cell.bottomleft, 0], [0, 0], [0, cell.leftbottom]];
  };

  var p01 = function p01(cell) {
    return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0]];
  };

  var p02 = function p02(cell) {
    return [[cell.topright, 1], [1, 1], [1, cell.righttop]];
  };

  var p03 = function p03(cell) {
    return [[0, cell.lefttop], [0, 1], [cell.topleft, 1]];
  };
  /* trapezoid cases */


  var p04 = function p04(cell) {
    return [[cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.leftbottom], [0, cell.lefttop]];
  };

  var p05 = function p05(cell) {
    return [[cell.bottomright, 0], [cell.bottomleft, 0], [1, cell.righttop], [1, cell.rightbottom]];
  };

  var p06 = function p06(cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [cell.topleft, 1], [cell.topright, 1]];
  };

  var p07 = function p07(cell) {
    return [[0, cell.leftbottom], [0, cell.lefttop], [cell.topleft, 1], [cell.topright, 1]];
  };
  /* rectangle cases */


  var p08 = function p08(cell) {
    return [[0, 0], [0, cell.leftbottom], [1, cell.rightbottom], [1, 0]];
  };

  var p09 = function p09(cell) {
    return [[1, 0], [cell.bottomright, 0], [cell.topright, 1], [1, 1]];
  };

  var p10 = function p10(cell) {
    return [[1, 1], [1, cell.righttop], [0, cell.lefttop], [0, 1]];
  };

  var p11 = function p11(cell) {
    return [[cell.bottomleft, 0], [0, 0], [0, 1], [cell.topleft, 1]];
  };

  var p12 = function p12(cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [0, cell.leftbottom], [0, cell.lefttop]];
  };

  var p13 = function p13(cell) {
    return [[cell.topleft, 1], [cell.topright, 1], [cell.bottomright, 0], [cell.bottomleft, 0]];
  };
  /* square case */


  var p14 = function p14() {
    return [[0, 0], [0, 1], [1, 1], [1, 0]];
  };
  /* pentagon cases */


  var p15 = function p15(cell) {
    return [[1, cell.rightbottom], [1, 0], [0, 0], [0, 1], [cell.topleft, 1]];
  };
  /* 1211 || 1011 */


  var p16 = function p16(cell) {
    return [[cell.topright, 1], [1, 1], [1, 0], [0, 0], [0, cell.leftbottom]];
  };
  /* 2111 || 0111 */


  var p17 = function p17(cell) {
    return [[1, 0], [cell.bottomright, 0], [0, cell.lefttop], [0, 1], [1, 1]];
  };
  /* 1112 || 1110 */


  var p18 = function p18(cell) {
    return [[1, 1], [1, cell.righttop], [cell.bottomleft, 0], [0, 0], [0, 1]];
  };
  /* 1121 || 1101 */


  var p19 = function p19(cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
  };
  /* 1200 || 1022 */


  var p20 = function p20(cell) {
    return [[1, 1], [1, cell.righttop], [cell.bottomright, 0], [cell.bottomleft, 0], [cell.topright, 1]];
  };
  /* 0120 || 2102 */


  var p21 = function p21(cell) {
    return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [0, cell.leftbottom], [0, cell.lefttop]];
  };
  /* 0012 || 2210 */


  var p22 = function p22(cell) {
    return [[cell.topright, 1], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom], [cell.topleft, 1]];
  };
  /* 2001 || 0221 */


  var p23 = function p23(cell) {
    return [[cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
  };
  /* 1002 || 1220 */


  var p24 = function p24(cell) {
    return [[1, 1], [1, cell.righttop], [0, cell.leftbottom], [0, cell.lefttop], [cell.topright, 1]];
  };
  /* 2100 || 0122 */


  var p25 = function p25(cell) {
    return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [cell.topleft, 1], [cell.topright, 1]];
  };
  /* 0210 || 2012 */


  var p26 = function p26(cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom]];
  };
  /* 0021 || 2201 */

  /*hexagon cases */


  var p27 = function p27(cell) {
    return [[1, cell.rightbottom], [1, 0], [0, 0], [0, cell.leftbottom], [cell.topleft, 1], [cell.topright, 1]];
  };
  /* 0211 || 2011 */


  var p28 = function p28(cell) {
    return [[1, 1], [1, 0], [cell.bottomright, 0], [0, cell.leftbottom], [0, cell.lefttop], [cell.topright, 1]];
  };
  /* 2110 || 0112 */


  var p29 = function p29(cell) {
    return [[1, 1], [1, cell.righttop], [cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.lefttop], [0, 1]];
  };
  /* 1102 || 1120 */


  var p30 = function p30(cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomleft, 0], [0, 0], [0, 1], [cell.topleft, 1]];
  };
  /* 1021 || 1201 */


  var p31 = function p31(cell) {
    return [[1, 1], [1, cell.righttop], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom], [cell.topright, 1]];
  };
  /* 2101 || 0121 */


  var p32 = function p32(cell) {
    return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
  };
  /* 1012 || 1210 */

  /* 8-sided cases */


  var p33 = function p33(cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.leftbottom], [0, cell.lefttop], [cell.topleft, 1], [cell.topright, 1]];
  };
  /* flipped == 1 state for 0202 and 2020 */

  /* 6-sided cases */


  var p34 = function p34(cell) {
    return [[1, 1], [1, cell.righttop], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom], [cell.topright, 1]];
  };
  /* 0101 with flipped == 1 || 2121 with flipped == 1 */


  var p35 = function p35(cell) {
    return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
  };
  /* 1010 with flipped == 1 || 1212 with flipped == 1 */

  /* 7-sided cases */


  var p36 = function p36(cell) {
    return [[1, 1], [1, cell.righttop], [cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.leftbottom], [0, cell.lefttop], [cell.topright, 1]];
  };
  /* 2120 with flipped == 1 || 0102 with flipped == 1 */


  var p37 = function p37(cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomleft, 0], [0, 0], [0, cell.leftbottom], [cell.topleft, 1], [cell.topright, 1]];
  };
  /* 2021 with flipped == 1 || 0201 with flipped == 1 */


  var p38 = function p38(cell) {
    return [[1, cell.righttop], [1, cell.rightbottom], [cell.bottomright, 0], [cell.bottomleft, 0], [0, cell.lefttop], [0, 1], [cell.topleft, 1]];
  };
  /* 1202 with flipped == 1 || 1020 with flipped == 1 */


  var p39 = function p39(cell) {
    return [[1, cell.rightbottom], [1, 0], [cell.bottomright, 0], [0, cell.leftbottom], [0, cell.lefttop], [cell.topleft, 1], [cell.topright, 1]];
  };
  /* 0212 with flipped == 1 || 2010 with flipped == 1 */

  /*
    The lookup tables for edge number given the polygon
    is entered at a specific location
  */


  var isoBandEdgeRT = [];
  var isoBandEdgeRB = [];
  var isoBandEdgeBR = [];
  var isoBandEdgeBL = [];
  var isoBandEdgeLB = [];
  var isoBandEdgeLT = [];
  var isoBandEdgeTL = [];
  var isoBandEdgeTR = [];
  /* triangle cases */

  isoBandEdgeBL[1] = isoBandEdgeLB[1] = 18;
  isoBandEdgeBL[169] = isoBandEdgeLB[169] = 18;
  isoBandEdgeBR[4] = isoBandEdgeRB[4] = 12;
  isoBandEdgeBR[166] = isoBandEdgeRB[166] = 12;
  isoBandEdgeRT[16] = isoBandEdgeTR[16] = 4;
  isoBandEdgeRT[154] = isoBandEdgeTR[154] = 4;
  isoBandEdgeLT[64] = isoBandEdgeTL[64] = 22;
  isoBandEdgeLT[106] = isoBandEdgeTL[106] = 22;
  /* trapezoid cases */

  isoBandEdgeBR[2] = isoBandEdgeLT[2] = 17;
  isoBandEdgeBL[2] = isoBandEdgeLB[2] = 18;
  isoBandEdgeBR[168] = isoBandEdgeLT[168] = 17;
  isoBandEdgeBL[168] = isoBandEdgeLB[168] = 18;
  isoBandEdgeRT[8] = isoBandEdgeBL[8] = 9;
  isoBandEdgeRB[8] = isoBandEdgeBR[8] = 12;
  isoBandEdgeRT[162] = isoBandEdgeBL[162] = 9;
  isoBandEdgeRB[162] = isoBandEdgeBR[162] = 12;
  isoBandEdgeRT[32] = isoBandEdgeTR[32] = 4;
  isoBandEdgeRB[32] = isoBandEdgeTL[32] = 1;
  isoBandEdgeRT[138] = isoBandEdgeTR[138] = 4;
  isoBandEdgeRB[138] = isoBandEdgeTL[138] = 1;
  isoBandEdgeLB[128] = isoBandEdgeTR[128] = 21;
  isoBandEdgeLT[128] = isoBandEdgeTL[128] = 22;
  isoBandEdgeLB[42] = isoBandEdgeTR[42] = 21;
  isoBandEdgeLT[42] = isoBandEdgeTL[42] = 22;
  /* rectangle cases */

  isoBandEdgeRB[5] = isoBandEdgeLB[5] = 14;
  isoBandEdgeRB[165] = isoBandEdgeLB[165] = 14;
  isoBandEdgeBR[20] = isoBandEdgeTR[20] = 6;
  isoBandEdgeBR[150] = isoBandEdgeTR[150] = 6;
  isoBandEdgeRT[80] = isoBandEdgeLT[80] = 11;
  isoBandEdgeRT[90] = isoBandEdgeLT[90] = 11;
  isoBandEdgeBL[65] = isoBandEdgeTL[65] = 3;
  isoBandEdgeBL[105] = isoBandEdgeTL[105] = 3;
  isoBandEdgeRT[160] = isoBandEdgeLT[160] = 11;
  isoBandEdgeRB[160] = isoBandEdgeLB[160] = 14;
  isoBandEdgeRT[10] = isoBandEdgeLT[10] = 11;
  isoBandEdgeRB[10] = isoBandEdgeLB[10] = 14;
  isoBandEdgeBR[130] = isoBandEdgeTR[130] = 6;
  isoBandEdgeBL[130] = isoBandEdgeTL[130] = 3;
  isoBandEdgeBR[40] = isoBandEdgeTR[40] = 6;
  isoBandEdgeBL[40] = isoBandEdgeTL[40] = 3;
  /* pentagon cases */

  isoBandEdgeRB[101] = isoBandEdgeTL[101] = 1;
  isoBandEdgeRB[69] = isoBandEdgeTL[69] = 1;
  isoBandEdgeLB[149] = isoBandEdgeTR[149] = 21;
  isoBandEdgeLB[21] = isoBandEdgeTR[21] = 21;
  isoBandEdgeBR[86] = isoBandEdgeLT[86] = 17;
  isoBandEdgeBR[84] = isoBandEdgeLT[84] = 17;
  isoBandEdgeRT[89] = isoBandEdgeBL[89] = 9;
  isoBandEdgeRT[81] = isoBandEdgeBL[81] = 9;
  isoBandEdgeRT[96] = isoBandEdgeTL[96] = 0;
  isoBandEdgeRB[96] = isoBandEdgeLT[96] = 15;
  isoBandEdgeRT[74] = isoBandEdgeTL[74] = 0;
  isoBandEdgeRB[74] = isoBandEdgeLT[74] = 15;
  isoBandEdgeRT[24] = isoBandEdgeBR[24] = 8;
  isoBandEdgeBL[24] = isoBandEdgeTR[24] = 7;
  isoBandEdgeRT[146] = isoBandEdgeBR[146] = 8;
  isoBandEdgeBL[146] = isoBandEdgeTR[146] = 7;
  isoBandEdgeRB[6] = isoBandEdgeLT[6] = 15;
  isoBandEdgeBR[6] = isoBandEdgeLB[6] = 16;
  isoBandEdgeRB[164] = isoBandEdgeLT[164] = 15;
  isoBandEdgeBR[164] = isoBandEdgeLB[164] = 16;
  isoBandEdgeBL[129] = isoBandEdgeTR[129] = 7;
  isoBandEdgeLB[129] = isoBandEdgeTL[129] = 20;
  isoBandEdgeBL[41] = isoBandEdgeTR[41] = 7;
  isoBandEdgeLB[41] = isoBandEdgeTL[41] = 20;
  isoBandEdgeBR[66] = isoBandEdgeTL[66] = 2;
  isoBandEdgeBL[66] = isoBandEdgeLT[66] = 19;
  isoBandEdgeBR[104] = isoBandEdgeTL[104] = 2;
  isoBandEdgeBL[104] = isoBandEdgeLT[104] = 19;
  isoBandEdgeRT[144] = isoBandEdgeLB[144] = 10;
  isoBandEdgeLT[144] = isoBandEdgeTR[144] = 23;
  isoBandEdgeRT[26] = isoBandEdgeLB[26] = 10;
  isoBandEdgeLT[26] = isoBandEdgeTR[26] = 23;
  isoBandEdgeRB[36] = isoBandEdgeTR[36] = 5;
  isoBandEdgeBR[36] = isoBandEdgeTL[36] = 2;
  isoBandEdgeRB[134] = isoBandEdgeTR[134] = 5;
  isoBandEdgeBR[134] = isoBandEdgeTL[134] = 2;
  isoBandEdgeRT[9] = isoBandEdgeLB[9] = 10;
  isoBandEdgeRB[9] = isoBandEdgeBL[9] = 13;
  isoBandEdgeRT[161] = isoBandEdgeLB[161] = 10;
  isoBandEdgeRB[161] = isoBandEdgeBL[161] = 13;
  /* hexagon cases */

  isoBandEdgeRB[37] = isoBandEdgeTR[37] = 5;
  isoBandEdgeLB[37] = isoBandEdgeTL[37] = 20;
  isoBandEdgeRB[133] = isoBandEdgeTR[133] = 5;
  isoBandEdgeLB[133] = isoBandEdgeTL[133] = 20;
  isoBandEdgeBR[148] = isoBandEdgeLB[148] = 16;
  isoBandEdgeLT[148] = isoBandEdgeTR[148] = 23;
  isoBandEdgeBR[22] = isoBandEdgeLB[22] = 16;
  isoBandEdgeLT[22] = isoBandEdgeTR[22] = 23;
  isoBandEdgeRT[82] = isoBandEdgeBR[82] = 8;
  isoBandEdgeBL[82] = isoBandEdgeLT[82] = 19;
  isoBandEdgeRT[88] = isoBandEdgeBR[88] = 8;
  isoBandEdgeBL[88] = isoBandEdgeLT[88] = 19;
  isoBandEdgeRT[73] = isoBandEdgeTL[73] = 0;
  isoBandEdgeRB[73] = isoBandEdgeBL[73] = 13;
  isoBandEdgeRT[97] = isoBandEdgeTL[97] = 0;
  isoBandEdgeRB[97] = isoBandEdgeBL[97] = 13;
  isoBandEdgeRT[145] = isoBandEdgeBL[145] = 9;
  isoBandEdgeLB[145] = isoBandEdgeTR[145] = 21;
  isoBandEdgeRT[25] = isoBandEdgeBL[25] = 9;
  isoBandEdgeLB[25] = isoBandEdgeTR[25] = 21;
  isoBandEdgeRB[70] = isoBandEdgeTL[70] = 1;
  isoBandEdgeBR[70] = isoBandEdgeLT[70] = 17;
  isoBandEdgeRB[100] = isoBandEdgeTL[100] = 1;
  isoBandEdgeBR[100] = isoBandEdgeLT[100] = 17;
  /* 8-sided cases */

  isoBandEdgeRT[34] = isoBandEdgeBL[34] = 9;
  isoBandEdgeRB[34] = isoBandEdgeBR[34] = 12;
  isoBandEdgeLB[34] = isoBandEdgeTR[34] = 21;
  isoBandEdgeLT[34] = isoBandEdgeTL[34] = 22;
  isoBandEdgeRT[136] = isoBandEdgeTR[136] = 4;
  isoBandEdgeRB[136] = isoBandEdgeTL[136] = 1;
  isoBandEdgeBR[136] = isoBandEdgeLT[136] = 17;
  isoBandEdgeBL[136] = isoBandEdgeLB[136] = 18;
  isoBandEdgeRT[35] = isoBandEdgeTR[35] = 4;
  isoBandEdgeRB[35] = isoBandEdgeBR[35] = 12;
  isoBandEdgeBL[35] = isoBandEdgeLB[35] = 18;
  isoBandEdgeLT[35] = isoBandEdgeTL[35] = 22;
  /* 6-sided cases */

  isoBandEdgeRT[153] = isoBandEdgeTR[153] = 4;
  isoBandEdgeBL[153] = isoBandEdgeLB[153] = 18;
  isoBandEdgeRB[102] = isoBandEdgeBR[102] = 12;
  isoBandEdgeLT[102] = isoBandEdgeTL[102] = 22;
  isoBandEdgeRT[155] = isoBandEdgeBL[155] = 9;
  isoBandEdgeLB[155] = isoBandEdgeTR[155] = 23;
  isoBandEdgeRB[103] = isoBandEdgeTL[103] = 1;
  isoBandEdgeBR[103] = isoBandEdgeLT[103] = 17;
  /* 7-sided cases */

  isoBandEdgeRT[152] = isoBandEdgeTR[152] = 4;
  isoBandEdgeBR[152] = isoBandEdgeLT[152] = 17;
  isoBandEdgeBL[152] = isoBandEdgeLB[152] = 18;
  isoBandEdgeRT[156] = isoBandEdgeBR[156] = 8;
  isoBandEdgeBL[156] = isoBandEdgeLB[156] = 18;
  isoBandEdgeLT[156] = isoBandEdgeTR[156] = 23;
  isoBandEdgeRT[137] = isoBandEdgeTR[137] = 4;
  isoBandEdgeRB[137] = isoBandEdgeTL[137] = 1;
  isoBandEdgeBL[137] = isoBandEdgeLB[137] = 18;
  isoBandEdgeRT[139] = isoBandEdgeTR[139] = 4;
  isoBandEdgeRB[139] = isoBandEdgeBL[139] = 13;
  isoBandEdgeLB[139] = isoBandEdgeTL[139] = 20;
  isoBandEdgeRT[98] = isoBandEdgeBL[98] = 9;
  isoBandEdgeRB[98] = isoBandEdgeBR[98] = 12;
  isoBandEdgeLT[98] = isoBandEdgeTL[98] = 22;
  isoBandEdgeRT[99] = isoBandEdgeTL[99] = 0;
  isoBandEdgeRB[99] = isoBandEdgeBR[99] = 12;
  isoBandEdgeBL[99] = isoBandEdgeLT[99] = 19;
  isoBandEdgeRB[38] = isoBandEdgeBR[38] = 12;
  isoBandEdgeLB[38] = isoBandEdgeTR[38] = 21;
  isoBandEdgeLT[38] = isoBandEdgeTL[38] = 22;
  isoBandEdgeRB[39] = isoBandEdgeTR[39] = 5;
  isoBandEdgeBR[39] = isoBandEdgeLB[39] = 16;
  isoBandEdgeLT[39] = isoBandEdgeTL[39] = 22;
  /*
    The lookup tables for all different polygons that
    may appear within a grid cell
  */

  var polygon_table = [];
  /* triangle cases */

  polygon_table[1] = polygon_table[169] = p00;
  /* 2221 || 0001 */

  polygon_table[4] = polygon_table[166] = p01;
  /* 2212 || 0010 */

  polygon_table[16] = polygon_table[154] = p02;
  /* 2122 || 0100 */

  polygon_table[64] = polygon_table[106] = p03;
  /* 1222 || 1000 */

  /* trapezoid cases */

  polygon_table[168] = polygon_table[2] = p04;
  /* 2220 || 0002 */

  polygon_table[162] = polygon_table[8] = p05;
  /* 2202 || 0020 */

  polygon_table[138] = polygon_table[32] = p06;
  /* 2022 || 0200 */

  polygon_table[42] = polygon_table[128] = p07;
  /* 0222 || 2000 */

  /* rectangle cases */

  polygon_table[5] = polygon_table[165] = p08;
  /* 0011 || 2211 */

  polygon_table[20] = polygon_table[150] = p09;
  /* 0110 || 2112 */

  polygon_table[80] = polygon_table[90] = p10;
  /* 1100 || 1122 */

  polygon_table[65] = polygon_table[105] = p11;
  /* 1001 || 1221 */

  polygon_table[160] = polygon_table[10] = p12;
  /* 2200 || 0022 */

  polygon_table[130] = polygon_table[40] = p13;
  /* 2002 || 0220 */

  /* square case */

  polygon_table[85] = p14;
  /* 1111 */

  /* pentagon cases */

  polygon_table[101] = polygon_table[69] = p15;
  /* 1211 || 1011 */

  polygon_table[149] = polygon_table[21] = p16;
  /* 2111 || 0111 */

  polygon_table[86] = polygon_table[84] = p17;
  /* 1112 || 1110 */

  polygon_table[89] = polygon_table[81] = p18;
  /* 1121 || 1101 */

  polygon_table[96] = polygon_table[74] = p19;
  /* 1200 || 1022 */

  polygon_table[24] = polygon_table[146] = p20;
  /* 0120 || 2102 */

  polygon_table[6] = polygon_table[164] = p21;
  /* 0012 || 2210 */

  polygon_table[129] = polygon_table[41] = p22;
  /* 2001 || 0221 */

  polygon_table[66] = polygon_table[104] = p23;
  /* 1002 || 1220 */

  polygon_table[144] = polygon_table[26] = p24;
  /* 2100 || 0122 */

  polygon_table[36] = polygon_table[134] = p25;
  /* 0210 || 2012 */

  polygon_table[9] = polygon_table[161] = p26;
  /* 0021 || 2201 */

  /* hexagon cases */

  polygon_table[37] = polygon_table[133] = p27;
  /* 0211 || 2011 */

  polygon_table[148] = polygon_table[22] = p28;
  /* 2110 || 0112 */

  polygon_table[82] = polygon_table[88] = p29;
  /* 1102 || 1120 */

  polygon_table[73] = polygon_table[97] = p30;
  /* 1021 || 1201 */

  polygon_table[145] = polygon_table[25] = p31;
  /* 2101 || 0121 */

  polygon_table[70] = polygon_table[100] = p32;
  /* 1012 || 1210 */

  /* 8-sided cases */

  polygon_table[34] = function (c) {
    return [p07(c), p05(c)];
  };
  /* 0202 || 2020 with flipped == 0 */


  polygon_table[35] = p33;
  /* flipped == 1 state for 0202 and 2020 */

  polygon_table[136] = function (c) {
    return [p06(c), p04(c)];
  };
  /* 2020 || 0202 with flipped == 0 */

  /* 6-sided cases */


  polygon_table[153] = function (c) {
    return [p02(c), p00(c)];
  };
  /* 0101 with flipped == 0 || 2121 with flipped == 2 */


  polygon_table[102] = function (c) {
    return [p01(c), p03(c)];
  };
  /* 1010 with flipped == 0 || 1212 with flipped == 2 */


  polygon_table[155] = p34;
  /* 0101 with flipped == 1 || 2121 with flipped == 1 */

  polygon_table[103] = p35;
  /* 1010 with flipped == 1 || 1212 with flipped == 1 */

  /* 7-sided cases */

  polygon_table[152] = function (c) {
    return [p02(c), p04(c)];
  };
  /* 2120 with flipped == 2 || 0102 with flipped == 0 */


  polygon_table[156] = p36;
  /* 2120 with flipped == 1 || 0102 with flipped == 1 */

  polygon_table[137] = function (c) {
    return [p06(c), p00(c)];
  };
  /* 2021 with flipped == 2 || 0201 with flipped == 0 */


  polygon_table[139] = p37;
  /* 2021 with flipped == 1 || 0201 with flipped == 1 */

  polygon_table[98] = function (c) {
    return [p05(c), p03(c)];
  };
  /* 1202 with flipped == 2 || 1020 with flipped == 0 */


  polygon_table[99] = p38;
  /* 1202 with flipped == 1 || 1020 with flipped == 1 */

  polygon_table[38] = function (c) {
    return [p01(c), p07(c)];
  };
  /* 0212 with flipped == 2 || 2010 with flipped == 0 */


  polygon_table[39] = p39;
  /* 0212 with flipped == 1 || 2010 with flipped == 1 */

  /*
  ####################################
  Some small helper functions
  ####################################
  */

  /* assume that x1 == 1 &&  x0 == 0 */

  function interpolateX(y, y0, y1) {
    return (y - y0) / (y1 - y0);
  }

  function isArray(myArray) {
    return myArray.constructor.toString().indexOf("Array") > -1;
  }
  /*
  ####################################
  Below is the actual Marching Squares implementation
  ####################################
  */


  function computeBandGrid(data, minV, bandwidth) {
    var rows = data.length - 1;
    var cols = data[0].length - 1;
    var BandGrid = {
      rows: rows,
      cols: cols,
      cells: []
    };
    var maxV = minV + Math.abs(bandwidth);

    for (var j = 0; j < rows; ++j) {
      BandGrid.cells[j] = [];

      for (var i = 0; i < cols; ++i) {
        /*  compose the 4-trit corner representation */
        var cval = 0;
        var tl = data[j + 1][i];
        var tr = data[j + 1][i + 1];
        var br = data[j][i + 1];
        var bl = data[j][i];

        if (isNaN(tl) || isNaN(tr) || isNaN(br) || isNaN(bl)) {
          continue;
        }

        cval |= tl < minV ? 0 : tl > maxV ? 128 : 64;
        cval |= tr < minV ? 0 : tr > maxV ? 32 : 16;
        cval |= br < minV ? 0 : br > maxV ? 8 : 4;
        cval |= bl < minV ? 0 : bl > maxV ? 2 : 1;
        var cval_real = +cval;
        /* resolve ambiguity via averaging */

        var flipped = 0;

        if (cval === 17
        /* 0101 */
        || cval === 18
        /* 0102 */
        || cval === 33
        /* 0201 */
        || cval === 34
        /* 0202 */
        || cval === 38
        /* 0212 */
        || cval === 68
        /* 1010 */
        || cval === 72
        /* 1020 */
        || cval === 98
        /* 1202 */
        || cval === 102
        /* 1212 */
        || cval === 132
        /* 2010 */
        || cval === 136
        /* 2020 */
        || cval === 137
        /* 2021 */
        || cval === 152
        /* 2120 */
        || cval === 153
        /* 2121 */
        ) {
            var average = (tl + tr + br + bl) / 4;
            /* set flipped state */

            flipped = average > maxV ? 2 : average < minV ? 0 : 1;
            /* adjust cval for flipped cases */

            /* 8-sided cases */

            if (cval === 34) {
              if (flipped === 1) {
                cval = 35;
              } else if (flipped === 0) {
                cval = 136;
              }
            } else if (cval === 136) {
              if (flipped === 1) {
                cval = 35;
                flipped = 4;
              } else if (flipped === 0) {
                cval = 34;
              }
            } else if (cval === 17) {
              /* 6-sided polygon cases */
              if (flipped === 1) {
                cval = 155;
                flipped = 4;
              } else if (flipped === 0) {
                cval = 153;
              }
            } else if (cval === 68) {
              if (flipped === 1) {
                cval = 103;
                flipped = 4;
              } else if (flipped === 0) {
                cval = 102;
              }
            } else if (cval === 153) {
              if (flipped === 1) cval = 155;
            } else if (cval === 102) {
              if (flipped === 1) cval = 103;
            } else if (cval === 152) {
              /* 7-sided polygon cases */
              if (flipped < 2) {
                cval = 156;
                flipped = 1;
              }
            } else if (cval === 137) {
              if (flipped < 2) {
                cval = 139;
                flipped = 1;
              }
            } else if (cval === 98) {
              if (flipped < 2) {
                cval = 99;
                flipped = 1;
              }
            } else if (cval === 38) {
              if (flipped < 2) {
                cval = 39;
                flipped = 1;
              }
            } else if (cval === 18) {
              if (flipped > 0) {
                cval = 156;
                flipped = 4;
              } else {
                cval = 152;
              }
            } else if (cval === 33) {
              if (flipped > 0) {
                cval = 139;
                flipped = 4;
              } else {
                cval = 137;
              }
            } else if (cval === 72) {
              if (flipped > 0) {
                cval = 99;
                flipped = 4;
              } else {
                cval = 98;
              }
            } else if (cval === 132) {
              if (flipped > 0) {
                cval = 39;
                flipped = 4;
              } else {
                cval = 38;
              }
            }
          }
        /* add cell to BandGrid if it contains at least one polygon-side */


        if (cval != 0 && cval != 170) {
          var topleft, topright, bottomleft, bottomright, righttop, rightbottom, lefttop, leftbottom;
          topleft = topright = bottomleft = bottomright = righttop = rightbottom = lefttop = leftbottom = 0.5;
          var edges = [];
          /* do interpolation here */

          /* 1st Triangles */

          if (cval === 1) {
            /* 0001 */
            bottomleft = 1 - interpolateX(minV, br, bl);
            leftbottom = 1 - interpolateX(minV, tl, bl);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 169) {
            /* 2221 */
            bottomleft = interpolateX(maxV, bl, br);
            leftbottom = interpolateX(maxV, bl, tl);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 4) {
            /* 0010 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            bottomright = interpolateX(minV, bl, br);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 166) {
            /* 2212 */
            rightbottom = interpolateX(maxV, br, tr);
            bottomright = 1 - interpolateX(maxV, br, bl);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 16) {
            /* 0100 */
            righttop = interpolateX(minV, br, tr);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
          } else if (cval === 154) {
            /* 2122 */
            righttop = 1 - interpolateX(maxV, tr, br);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
          } else if (cval === 64) {
            /* 1000 */
            lefttop = interpolateX(minV, bl, tl);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 106) {
            /* 1222 */
            lefttop = 1 - interpolateX(maxV, tl, bl);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 168) {
            /* 2nd Trapezoids */

            /* 2220 */
            bottomright = interpolateX(maxV, bl, br);
            bottomleft = interpolateX(minV, bl, br);
            leftbottom = interpolateX(minV, bl, tl);
            lefttop = interpolateX(maxV, bl, tl);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 2) {
            /* 0002 */
            bottomright = 1 - interpolateX(minV, br, bl);
            bottomleft = 1 - interpolateX(maxV, br, bl);
            leftbottom = 1 - interpolateX(maxV, tl, bl);
            lefttop = 1 - interpolateX(minV, tl, bl);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 162) {
            /* 2202 */
            righttop = interpolateX(maxV, br, tr);
            rightbottom = interpolateX(minV, br, tr);
            bottomright = 1 - interpolateX(minV, br, bl);
            bottomleft = 1 - interpolateX(maxV, br, bl);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 8) {
            /* 0020 */
            righttop = 1 - interpolateX(minV, tr, br);
            rightbottom = 1 - interpolateX(maxV, tr, br);
            bottomright = interpolateX(maxV, bl, br);
            bottomleft = interpolateX(minV, bl, br);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 138) {
            /* 2022 */
            righttop = 1 - interpolateX(minV, tr, br);
            rightbottom = 1 - interpolateX(maxV, tr, br);
            topleft = 1 - interpolateX(maxV, tr, tl);
            topright = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 32) {
            /* 0200 */
            righttop = interpolateX(maxV, br, tr);
            rightbottom = interpolateX(minV, br, tr);
            topleft = interpolateX(minV, tl, tr);
            topright = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 42) {
            /* 0222 */
            leftbottom = 1 - interpolateX(maxV, tl, bl);
            lefttop = 1 - interpolateX(minV, tl, bl);
            topleft = interpolateX(minV, tl, tr);
            topright = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeLB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 128) {
            /* 2000 */
            leftbottom = interpolateX(minV, bl, tl);
            lefttop = interpolateX(maxV, bl, tl);
            topleft = 1 - interpolateX(maxV, tr, tl);
            topright = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeLB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          }
          /* 3rd rectangle cases */


          if (cval === 5) {
            /* 0011 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            leftbottom = 1 - interpolateX(minV, tl, bl);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 165) {
            /* 2211 */
            rightbottom = interpolateX(maxV, br, tr);
            leftbottom = interpolateX(maxV, bl, tl);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 20) {
            /* 0110 */
            bottomright = interpolateX(minV, bl, br);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeBR[cval]);
          } else if (cval === 150) {
            /* 2112 */
            bottomright = 1 - interpolateX(maxV, br, bl);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeBR[cval]);
          } else if (cval === 80) {
            /* 1100 */
            righttop = interpolateX(minV, br, tr);
            lefttop = interpolateX(minV, bl, tl);
            edges.push(isoBandEdgeRT[cval]);
          } else if (cval === 90) {
            /* 1122 */
            righttop = 1 - interpolateX(maxV, tr, br);
            lefttop = 1 - interpolateX(maxV, tl, bl);
            edges.push(isoBandEdgeRT[cval]);
          } else if (cval === 65) {
            /* 1001 */
            bottomleft = 1 - interpolateX(minV, br, bl);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 105) {
            /* 1221 */
            bottomleft = interpolateX(maxV, bl, br);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 160) {
            /* 2200 */
            righttop = interpolateX(maxV, br, tr);
            rightbottom = interpolateX(minV, br, tr);
            leftbottom = interpolateX(minV, bl, tl);
            lefttop = interpolateX(maxV, bl, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 10) {
            /* 0022 */
            righttop = 1 - interpolateX(minV, tr, br);
            rightbottom = 1 - interpolateX(maxV, tr, br);
            leftbottom = 1 - interpolateX(maxV, tl, bl);
            lefttop = 1 - interpolateX(minV, tl, bl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 130) {
            /* 2002 */
            bottomright = 1 - interpolateX(minV, br, bl);
            bottomleft = 1 - interpolateX(maxV, br, bl);
            topleft = 1 - interpolateX(maxV, tr, tl);
            topright = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 40) {
            /* 0220 */
            bottomright = interpolateX(maxV, bl, br);
            bottomleft = interpolateX(minV, bl, br);
            topleft = interpolateX(minV, tl, tr);
            topright = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 101) {
            /* 4th single pentagon cases */

            /* 1211 */
            rightbottom = interpolateX(maxV, br, tr);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 69) {
            /* 1011 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 149) {
            /* 2111 */
            leftbottom = interpolateX(maxV, bl, tl);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeLB[cval]);
          } else if (cval === 21) {
            /* 0111 */
            leftbottom = 1 - interpolateX(minV, tl, bl);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeLB[cval]);
          } else if (cval === 86) {
            /* 1112 */
            bottomright = 1 - interpolateX(maxV, br, bl);
            lefttop = 1 - interpolateX(maxV, tl, bl);
            edges.push(isoBandEdgeBR[cval]);
          } else if (cval === 84) {
            /* 1110 */
            bottomright = interpolateX(minV, bl, br);
            lefttop = interpolateX(minV, bl, tl);
            edges.push(isoBandEdgeBR[cval]);
          } else if (cval === 89) {
            /* 1121 */
            righttop = 1 - interpolateX(maxV, tr, br);
            bottomleft = interpolateX(maxV, bl, br);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 81) {
            /* 1101 */
            righttop = interpolateX(minV, br, tr);
            bottomleft = 1 - interpolateX(minV, br, bl);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 96) {
            /* 1200 */
            righttop = interpolateX(maxV, br, tr);
            rightbottom = interpolateX(minV, br, tr);
            lefttop = interpolateX(minV, bl, tl);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 74) {
            /* 1022 */
            righttop = 1 - interpolateX(minV, tr, br);
            rightbottom = 1 - interpolateX(maxV, tr, br);
            lefttop = 1 - interpolateX(maxV, tl, bl);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 24) {
            /* 0120 */
            righttop = 1 - interpolateX(maxV, tr, br);
            bottomright = interpolateX(maxV, bl, br);
            bottomleft = interpolateX(minV, bl, br);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 146) {
            /* 2102 */
            righttop = interpolateX(minV, br, tr);
            bottomright = 1 - interpolateX(minV, br, bl);
            bottomleft = 1 - interpolateX(maxV, br, bl);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 6) {
            /* 0012 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            bottomright = 1 - interpolateX(maxV, br, bl);
            leftbottom = 1 - interpolateX(maxV, tl, bl);
            lefttop = 1 - interpolateX(minV, tl, bl);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          } else if (cval === 164) {
            /* 2210 */
            rightbottom = interpolateX(maxV, br, tr);
            bottomright = interpolateX(minV, bl, br);
            leftbottom = interpolateX(minV, bl, tl);
            lefttop = interpolateX(maxV, bl, tl);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          } else if (cval === 129) {
            /* 2001 */
            bottomleft = 1 - interpolateX(minV, br, bl);
            leftbottom = interpolateX(maxV, bl, tl);
            topleft = 1 - interpolateX(maxV, tr, tl);
            topright = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeBL[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if (cval === 41) {
            /* 0221 */
            bottomleft = interpolateX(maxV, bl, br);
            leftbottom = 1 - interpolateX(minV, tl, bl);
            topleft = interpolateX(minV, tl, tr);
            topright = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeBL[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if (cval === 66) {
            /* 1002 */
            bottomright = 1 - interpolateX(minV, br, bl);
            bottomleft = 1 - interpolateX(maxV, br, bl);
            lefttop = 1 - interpolateX(maxV, tl, bl);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 104) {
            /* 1220 */
            bottomright = interpolateX(maxV, bl, br);
            bottomleft = interpolateX(minV, bl, br);
            lefttop = interpolateX(minV, bl, tl);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeBL[cval]);
            edges.push(isoBandEdgeTL[cval]);
          } else if (cval === 144) {
            /* 2100 */
            righttop = interpolateX(minV, br, tr);
            leftbottom = interpolateX(minV, bl, tl);
            lefttop = interpolateX(maxV, bl, tl);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 26) {
            /* 0122 */
            righttop = 1 - interpolateX(maxV, tr, br);
            leftbottom = 1 - interpolateX(maxV, tl, bl);
            lefttop = 1 - interpolateX(minV, tl, bl);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 36) {
            /* 0210 */
            rightbottom = interpolateX(maxV, br, tr);
            bottomright = interpolateX(minV, bl, br);
            topleft = interpolateX(minV, tl, tr);
            topright = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          } else if (cval === 134) {
            /* 2012 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            bottomright = 1 - interpolateX(maxV, br, bl);
            topleft = 1 - interpolateX(maxV, tr, tl);
            topright = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          } else if (cval === 9) {
            /* 0021 */
            righttop = 1 - interpolateX(minV, tr, br);
            rightbottom = 1 - interpolateX(maxV, tr, br);
            bottomleft = interpolateX(maxV, bl, br);
            leftbottom = 1 - interpolateX(minV, tl, bl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 161) {
            /* 2201 */
            righttop = interpolateX(maxV, br, tr);
            rightbottom = interpolateX(minV, br, tr);
            bottomleft = 1 - interpolateX(minV, br, bl);
            leftbottom = interpolateX(maxV, bl, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 37) {
            /* 5th single hexagon cases */

            /* 0211 */
            rightbottom = interpolateX(maxV, br, tr);
            leftbottom = 1 - interpolateX(minV, tl, bl);
            topleft = interpolateX(minV, tl, tr);
            topright = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if (cval === 133) {
            /* 2011 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            leftbottom = interpolateX(maxV, bl, tl);
            topleft = 1 - interpolateX(maxV, tr, tl);
            topright = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if (cval === 148) {
            /* 2110 */
            bottomright = interpolateX(minV, bl, br);
            leftbottom = interpolateX(minV, bl, tl);
            lefttop = interpolateX(maxV, bl, tl);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 22) {
            /* 0112 */
            bottomright = 1 - interpolateX(maxV, br, bl);
            leftbottom = 1 - interpolateX(maxV, tl, bl);
            lefttop = 1 - interpolateX(minV, tl, bl);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 82) {
            /* 1102 */
            righttop = interpolateX(minV, br, tr);
            bottomright = 1 - interpolateX(minV, br, bl);
            bottomleft = 1 - interpolateX(maxV, br, bl);
            lefttop = 1 - interpolateX(maxV, tl, bl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 88) {
            /* 1120 */
            righttop = 1 - interpolateX(maxV, tr, br);
            bottomright = interpolateX(maxV, bl, br);
            bottomleft = interpolateX(minV, bl, br);
            lefttop = interpolateX(minV, bl, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 73) {
            /* 1021 */
            righttop = 1 - interpolateX(minV, tr, br);
            rightbottom = 1 - interpolateX(maxV, tr, br);
            bottomleft = interpolateX(maxV, bl, br);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 97) {
            /* 1201 */
            righttop = interpolateX(maxV, br, tr);
            rightbottom = interpolateX(minV, br, tr);
            bottomleft = 1 - interpolateX(minV, br, bl);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
          } else if (cval === 145) {
            /* 2101 */
            righttop = interpolateX(minV, br, tr);
            bottomleft = 1 - interpolateX(minV, br, bl);
            leftbottom = interpolateX(maxV, bl, tl);
            topright = 1 - interpolateX(maxV, tr, tl);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if (cval === 25) {
            /* 0121 */
            righttop = 1 - interpolateX(maxV, tr, br);
            bottomleft = interpolateX(maxV, bl, br);
            leftbottom = 1 - interpolateX(minV, tl, bl);
            topright = interpolateX(minV, tl, tr);
            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if (cval === 70) {
            /* 1012 */
            rightbottom = 1 - interpolateX(minV, tr, br);
            bottomright = 1 - interpolateX(maxV, br, bl);
            lefttop = 1 - interpolateX(maxV, tl, bl);
            topleft = 1 - interpolateX(minV, tr, tl);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          } else if (cval === 100) {
            /* 1210 */
            rightbottom = interpolateX(maxV, br, tr);
            bottomright = interpolateX(minV, bl, br);
            lefttop = interpolateX(minV, bl, tl);
            topleft = interpolateX(maxV, tl, tr);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          } else if (cval === 34) {
            /* 8-sided cases */

            /* 0202 || 2020 with flipped == 0 */
            if (flipped === 0) {
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            } else {
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            }

            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 35) {
            /* flipped == 1 state for 0202, and 2020 with flipped == 4*/
            if (flipped === 4) {
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            } else {
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            }

            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBL[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 136) {
            /* 2020 || 0202 with flipped == 0 */
            if (flipped === 0) {
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            } else {
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            }

            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 153) {
            /* 6-sided polygon cases */

            /* 0101 with flipped == 0 || 2121 with flipped == 2 */
            if (flipped === 0) {
              righttop = interpolateX(minV, br, tr);
              bottomleft = 1 - interpolateX(minV, br, bl);
              leftbottom = 1 - interpolateX(minV, tl, bl);
              topright = interpolateX(minV, tl, tr);
            } else {
              righttop = 1 - interpolateX(maxV, tr, br);
              bottomleft = interpolateX(maxV, bl, br);
              leftbottom = interpolateX(maxV, bl, tl);
              topright = 1 - interpolateX(maxV, tr, tl);
            }

            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 102) {
            /* 1010 with flipped == 0 || 1212 with flipped == 2 */
            if (flipped === 0) {
              rightbottom = 1 - interpolateX(minV, tr, br);
              bottomright = interpolateX(minV, bl, br);
              lefttop = interpolateX(minV, bl, tl);
              topleft = 1 - interpolateX(minV, tr, tl);
            } else {
              rightbottom = interpolateX(maxV, br, tr);
              bottomright = 1 - interpolateX(maxV, br, bl);
              lefttop = 1 - interpolateX(maxV, tl, bl);
              topleft = interpolateX(maxV, tl, tr);
            }

            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 155) {
            /* 0101 with flipped == 4 || 2121 with flipped == 1 */
            if (flipped === 4) {
              righttop = interpolateX(minV, br, tr);
              bottomleft = 1 - interpolateX(minV, br, bl);
              leftbottom = 1 - interpolateX(minV, tl, bl);
              topright = interpolateX(minV, tl, tr);
            } else {
              righttop = 1 - interpolateX(maxV, tr, br);
              bottomleft = interpolateX(maxV, bl, br);
              leftbottom = interpolateX(maxV, bl, tl);
              topright = 1 - interpolateX(maxV, tr, tl);
            }

            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if (cval === 103) {
            /* 1010 with flipped == 4 || 1212 with flipped == 1 */
            if (flipped === 4) {
              rightbottom = 1 - interpolateX(minV, tr, br);
              bottomright = interpolateX(minV, bl, br);
              lefttop = interpolateX(minV, bl, tl);
              topleft = 1 - interpolateX(minV, tr, tl);
            } else {
              rightbottom = interpolateX(maxV, br, tr);
              bottomright = 1 - interpolateX(maxV, br, bl);
              lefttop = 1 - interpolateX(maxV, tl, bl);
              topleft = interpolateX(maxV, tl, tr);
            }

            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
          } else if (cval === 152) {
            /* 7-sided polygon cases */

            /* 2120 with flipped == 2 || 0102 with flipped == 0 */
            if (flipped === 0) {
              righttop = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topright = interpolateX(minV, tl, tr);
            } else {
              righttop = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topright = 1 - interpolateX(maxV, tr, tl);
            }

            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 156) {
            /* 2120 with flipped == 1 || 0102 with flipped == 4 */
            if (flipped === 4) {
              righttop = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topright = interpolateX(minV, tl, tr);
            } else {
              righttop = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topright = 1 - interpolateX(maxV, tr, tl);
            }

            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeBL[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 137) {
            /* 2021 with flipped == 2 || 0201 with flipped == 0 */
            if (flipped === 0) {
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomleft = 1 - interpolateX(minV, br, bl);
              leftbottom = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            } else {
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomleft = interpolateX(maxV, bl, br);
              leftbottom = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            }

            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 139) {
            /* 2021 with flipped == 1 || 0201 with flipped == 4 */
            if (flipped === 4) {
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomleft = 1 - interpolateX(minV, br, bl);
              leftbottom = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            } else {
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomleft = interpolateX(maxV, bl, br);
              leftbottom = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            }

            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLB[cval]);
          } else if (cval === 98) {
            /* 1202 with flipped == 2 || 1020 with flipped == 0 */
            if (flipped === 0) {
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              lefttop = interpolateX(minV, bl, tl);
              topleft = 1 - interpolateX(minV, tr, tl);
            } else {
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              lefttop = 1 - interpolateX(maxV, tl, bl);
              topleft = interpolateX(maxV, tl, tr);
            }

            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 99) {
            /* 1202 with flipped == 1 || 1020 with flipped == 4 */
            if (flipped === 4) {
              righttop = 1 - interpolateX(minV, tr, br);
              rightbottom = 1 - interpolateX(maxV, tr, br);
              bottomright = interpolateX(maxV, bl, br);
              bottomleft = interpolateX(minV, bl, br);
              lefttop = interpolateX(minV, bl, tl);
              topleft = 1 - interpolateX(minV, tr, tl);
            } else {
              righttop = interpolateX(maxV, br, tr);
              rightbottom = interpolateX(minV, br, tr);
              bottomright = 1 - interpolateX(minV, br, bl);
              bottomleft = 1 - interpolateX(maxV, br, bl);
              lefttop = 1 - interpolateX(maxV, tl, bl);
              topleft = interpolateX(maxV, tl, tr);
            }

            edges.push(isoBandEdgeRT[cval]);
            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBL[cval]);
          } else if (cval === 38) {
            /* 0212 with flipped == 2 || 2010 with flipped == 0 */
            if (flipped === 0) {
              rightbottom = 1 - interpolateX(minV, tr, br);
              bottomright = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            } else {
              rightbottom = interpolateX(maxV, br, tr);
              bottomright = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            }

            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeLB[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 39) {
            /* 0212 with flipped == 1 || 2010 with flipped == 4 */
            if (flipped === 4) {
              rightbottom = 1 - interpolateX(minV, tr, br);
              bottomright = interpolateX(minV, bl, br);
              leftbottom = interpolateX(minV, bl, tl);
              lefttop = interpolateX(maxV, bl, tl);
              topleft = 1 - interpolateX(maxV, tr, tl);
              topright = 1 - interpolateX(minV, tr, tl);
            } else {
              rightbottom = interpolateX(maxV, br, tr);
              bottomright = 1 - interpolateX(maxV, br, bl);
              leftbottom = 1 - interpolateX(maxV, tl, bl);
              lefttop = 1 - interpolateX(minV, tl, bl);
              topleft = interpolateX(minV, tl, tr);
              topright = interpolateX(maxV, tl, tr);
            }

            edges.push(isoBandEdgeRB[cval]);
            edges.push(isoBandEdgeBR[cval]);
            edges.push(isoBandEdgeLT[cval]);
          } else if (cval === 85) {
            righttop = 1;
            rightbottom = 0;
            bottomright = 1;
            bottomleft = 0;
            leftbottom = 0;
            lefttop = 1;
            topleft = 0;
            topright = 1;
          }

          if (topleft < 0 || topleft > 1 || topright < 0 || topright > 1 || righttop < 0 || righttop > 1 || bottomright < 0 || bottomright > 1 || leftbottom < 0 || leftbottom > 1 || lefttop < 0 || lefttop > 1) {
            console.log("MarchingSquaresJS-isoBands: " + cval + " " + cval_real + " " + tl + "," + tr + "," + br + "," + bl + " " + flipped + " " + topleft + " " + topright + " " + righttop + " " + rightbottom + " " + bottomright + " " + bottomleft + " " + leftbottom + " " + lefttop);
          }

          BandGrid.cells[j][i] = {
            cval: cval,
            cval_real: cval_real,
            flipped: flipped,
            topleft: topleft,
            topright: topright,
            righttop: righttop,
            rightbottom: rightbottom,
            bottomright: bottomright,
            bottomleft: bottomleft,
            leftbottom: leftbottom,
            lefttop: lefttop,
            edges: edges
          };
        }
      }
    }

    return BandGrid;
  }

  function BandGrid2AreaPaths(grid) {
    var areas = [];
    var rows = grid.rows;
    var cols = grid.cols;
    var currentPolygon = [];

    for (var j = 0; j < rows; j++) {
      for (var i = 0; i < cols; i++) {
        if (typeof grid.cells[j][i] !== "undefined" && grid.cells[j][i].edges.length > 0) {
          /* trace back polygon path starting from this cell */
          var cell = grid.cells[j][i];
          /* get start coordinates */

          var prev = getStartXY(cell),
              next = null,
              p = i,
              q = j;

          if (prev !== null) {
            currentPolygon.push([prev.p[0] + p, prev.p[1] + q]); //console.log(cell);
            //console.log("coords: " + (prev.p[0] + p) + " " + (prev.p[1] + q));
          }

          do {
            //console.log(p + "," + q);
            //console.log(grid.cells[q][p]);
            //console.log(grid.cells[q][p].edges);
            //console.log("from : " + prev.x + " " + prev.y + " " + prev.o);
            next = getExitXY(grid.cells[q][p], prev.x, prev.y, prev.o);

            if (next !== null) {
              //console.log("coords: " + (next.p[0] + p) + " " + (next.p[1] + q));
              currentPolygon.push([next.p[0] + p, next.p[1] + q]);
              p += next.x;
              q += next.y;
              prev = next;
            } else {
              //console.log("getExitXY() returned null!");
              break;
            } //console.log("to : " + next.x + " " + next.y + " " + next.o);

            /* special case, where we've reached the grid boundaries */


            if (q < 0 || q >= rows || p < 0 || p >= cols || typeof grid.cells[q][p] === "undefined") {
              /* to create a closed path, we need to trace our way
                  arround the missing data, until we find an entry
                  point again
              */

              /* set back coordinates of current cell */
              p -= next.x;
              q -= next.y; //console.log("reached boundary at " + p + " " + q);

              var missing = traceOutOfGridPath(grid, p, q, next.x, next.y, next.o);

              if (missing !== null) {
                missing.path.forEach(function (pp) {
                  //console.log("coords: " + (pp[0]) + " " + (pp[1]));
                  currentPolygon.push(pp);
                });
                p = missing.i;
                q = missing.j;
                prev = missing;
              } else {
                break;
              } //console.log(grid.cells[q][p]);

            }
          } while (typeof grid.cells[q][p] !== "undefined" && grid.cells[q][p].edges.length > 0);

          areas.push(currentPolygon); //console.log("next polygon");
          //console.log(currentPolygon);

          currentPolygon = [];
          if (grid.cells[j][i].edges.length > 0) i--;
        }
      }
    }

    return areas;
  }

  function traceOutOfGridPath(grid, i, j, d_x, d_y, d_o) {
    var cell = grid.cells[j][i];
    var cval = cell.cval_real;
    var p = i + d_x,
        q = j + d_y;
    var path = [];
    var closed = false;

    while (!closed) {
      //console.log("processing cell " + p + "," + q + " " + d_x + " " + d_y + " " + d_o);
      if (typeof grid.cells[q] === "undefined" || typeof grid.cells[q][p] === "undefined") {
        //console.log("which is undefined");

        /* we can't move on, so we have to change direction to proceed further */

        /* go back to previous cell */
        q -= d_y;
        p -= d_x;
        cell = grid.cells[q][p];
        cval = cell.cval_real;
        /* check where we've left defined cells of the grid... */

        if (d_y === -1) {
          /* we came from top */
          if (d_o === 0) {
            /* exit left */
            if (cval & Node3) {
              /* lower left node is within range, so we move left */
              path.push([p, q]);
              d_x = -1;
              d_y = 0;
              d_o = 0;
            } else if (cval & Node2) {
              /* lower right node is within range, so we move right */
              path.push([p + 1, q]);
              d_x = 1;
              d_y = 0;
              d_o = 0;
            } else {
              /* close the path */
              path.push([p + cell.bottomright, q]);
              d_x = 0;
              d_y = 1;
              d_o = 1;
              closed = true;
              break;
            }
          } else if (cval & Node3) {
            path.push([p, q]);
            d_x = -1;
            d_y = 0;
            d_o = 0;
          } else if (cval & Node2) {
            path.push([p + cell.bottomright, q]);
            d_x = 0;
            d_y = 1;
            d_o = 1;
            closed = true;
            break;
          } else {
            path.push([p + cell.bottomleft, q]);
            d_x = 0;
            d_y = 1;
            d_o = 0;
            closed = true;
            break;
          }
        } else if (d_y === 1) {
          /* we came from bottom */
          //console.log("we came from bottom and hit a non-existing cell " + (p + d_x) + "," + (q + d_y) + "!");
          if (d_o === 0) {
            /* exit left */
            if (cval & Node1) {
              /* top right node is within range, so we move right */
              path.push([p + 1, q + 1]);
              d_x = 1;
              d_y = 0;
              d_o = 1;
            } else if (!(cval & Node0)) {
              /* found entry within same cell */
              path.push([p + cell.topright, q + 1]);
              d_x = 0;
              d_y = -1;
              d_o = 1;
              closed = true; //console.log("found entry from bottom at " + p + "," + q);

              break;
            } else {
              path.push([p + cell.topleft, q + 1]);
              d_x = 0;
              d_y = -1;
              d_o = 0;
              closed = true;
              break;
            }
          } else if (cval & Node1) {
            path.push([p + 1, q + 1]);
            d_x = 1;
            d_y = 0;
            d_o = 1;
          } else {
            /* move right */
            path.push([p + 1, q + 1]);
            d_x = 1;
            d_y = 0;
            d_o = 1; //console.log("wtf");
            //break;
          }
        } else if (d_x === -1) {
          /* we came from right */
          //console.log("we came from right and hit a non-existing cell at " + (p + d_x) + "," + (q + d_y) + "!");
          if (d_o === 0) {
            //console.log("continue at bottom");
            if (cval & Node0) {
              path.push([p, q + 1]);
              d_x = 0;
              d_y = 1;
              d_o = 0; //console.log("moving upwards to " + (p + d_x) + "," + (q + d_y) + "!");
            } else if (!(cval & Node3)) {
              /* there has to be an entry into the regular grid again! */
              //console.log("exiting top");
              path.push([p, q + cell.lefttop]);
              d_x = 1;
              d_y = 0;
              d_o = 1;
              closed = true;
              break;
            } else {
              //console.log("exiting bottom");
              path.push([p, q + cell.leftbottom]);
              d_x = 1;
              d_y = 0;
              d_o = 0;
              closed = true;
              break;
            }
          } else {
            //console.log("continue at top");
            if (cval & Node0) {
              path.push([p, q + 1]);
              d_x = 0;
              d_y = 1;
              d_o = 0; //console.log("moving upwards to " + (p + d_x) + "," + (q + d_y) + "!");
            } else {
              /* */
              console.log("MarchingSquaresJS-isoBands: wtf");
              break;
            }
          }
        } else if (d_x === 1) {
          /* we came from left */
          //console.log("we came from left and hit a non-existing cell " + (p + d_x) + "," + (q + d_y) + "!");
          if (d_o === 0) {
            /* exit bottom */
            if (cval & Node2) {
              path.push([p + 1, q]);
              d_x = 0;
              d_y = -1;
              d_o = 1;
            } else {
              path.push([p + 1, q + cell.rightbottom]);
              d_x = -1;
              d_y = 0;
              d_o = 0;
              closed = true;
              break;
            }
          } else {
            /* exit top */
            if (cval & Node2) {
              path.push([p + 1, q]);
              d_x = 0;
              d_y = -1;
              d_o = 1;
            } else if (!(cval & Node1)) {
              path.push([p + 1, q + cell.rightbottom]);
              d_x = -1;
              d_y = 0;
              d_o = 0;
              closed = true;
              break;
            } else {
              path.push([p + 1, q + cell.righttop]);
              d_x = -1;
              d_y = 0;
              d_o = 1;
              break;
            }
          }
        } else {
          /* we came from the same cell */
          console.log("MarchingSquaresJS-isoBands: we came from nowhere!");
          break;
        }
      } else {
        /* try to find an entry into the regular grid again! */
        cell = grid.cells[q][p];
        cval = cell.cval_real; //console.log("which is defined");

        if (d_x === -1) {
          if (d_o === 0) {
            /* try to go downwards */
            if (typeof grid.cells[q - 1] !== "undefined" && typeof grid.cells[q - 1][p] !== "undefined") {
              d_x = 0;
              d_y = -1;
              d_o = 1;
            } else if (cval & Node3) {
              /* proceed searching in x-direction */
              //console.log("proceeding in x-direction!");
              path.push([p, q]);
            } else {
              /* we must have found an entry into the regular grid */
              path.push([p + cell.bottomright, q]);
              d_x = 0;
              d_y = 1;
              d_o = 1;
              closed = true; //console.log("found entry from bottom at " + p + "," + q);

              break;
            }
          } else if (cval & Node0) {
            /* proceed searchin in x-direction */
            console.log("MarchingSquaresJS-isoBands: proceeding in x-direction!");
          } else {
            /* we must have found an entry into the regular grid */
            console.log("MarchingSquaresJS-isoBands: found entry from top at " + p + "," + q);
            break;
          }
        } else if (d_x === 1) {
          if (d_o === 0) {
            console.log("MarchingSquaresJS-isoBands: wtf");
            break;
          } else {
            /* try to go upwards */
            if (typeof grid.cells[q + 1] !== "undefined" && typeof grid.cells[q + 1][p] !== "undefined") {
              d_x = 0;
              d_y = 1;
              d_o = 0;
            } else if (cval & Node1) {
              path.push([p + 1, q + 1]);
              d_x = 1;
              d_y = 0;
              d_o = 1;
            } else {
              /* found an entry point into regular grid! */
              path.push([p + cell.topleft, q + 1]);
              d_x = 0;
              d_y = -1;
              d_o = 0;
              closed = true; //console.log("found entry from bottom at " + p + "," + q);

              break;
            }
          }
        } else if (d_y === -1) {
          if (d_o === 1) {
            /* try to go right */
            if (typeof grid.cells[q][p + 1] !== "undefined") {
              d_x = 1;
              d_y = 0;
              d_o = 1;
            } else if (cval & Node2) {
              path.push([p + 1, q]);
              d_x = 0;
              d_y = -1;
              d_o = 1;
            } else {
              /* found entry into regular grid! */
              path.push([p + 1, q + cell.righttop]);
              d_x = -1;
              d_y = 0;
              d_o = 1;
              closed = true; //console.log("found entry from top at " + p + "," + q);

              break;
            }
          } else {
            console.log("MarchingSquaresJS-isoBands: wtf");
            break;
          }
        } else if (d_y === 1) {
          if (d_o === 0) {
            //console.log("we came from bottom left and proceed to the left");

            /* try to go left */
            if (typeof grid.cells[q][p - 1] !== "undefined") {
              d_x = -1;
              d_y = 0;
              d_o = 0;
            } else if (cval & Node0) {
              path.push([p, q + 1]);
              d_x = 0;
              d_y = 1;
              d_o = 0;
            } else {
              /* found an entry point into regular grid! */
              path.push([p, q + cell.leftbottom]);
              d_x = 1;
              d_y = 0;
              d_o = 0;
              closed = true; //console.log("found entry from bottom at " + p + "," + q);

              break;
            }
          } else {
            //console.log("we came from bottom right and proceed to the right");
            console.log("MarchingSquaresJS-isoBands: wtf");
            break;
          }
        } else {
          console.log("MarchingSquaresJS-isoBands: where did we came from???");
          break;
        }
      }

      p += d_x;
      q += d_y; //console.log("going on to  " + p + "," + q + " via " + d_x + " " + d_y + " " + d_o);

      if (p === i && q === j) {
        /* bail out, once we've closed a circle path */
        break;
      }
    } //console.log("exit with " + p + "," + q + " " + d_x + " " + d_y + " " + d_o);


    return {
      path: path,
      i: p,
      j: q,
      x: d_x,
      y: d_y,
      o: d_o
    };
  }

  function deleteEdge(cell, edgeIdx) {
    delete cell.edges[edgeIdx];

    for (var k = edgeIdx + 1; k < cell.edges.length; k++) {
      cell.edges[k - 1] = cell.edges[k];
    }

    cell.edges.pop();
  }

  function getStartXY(cell) {
    if (cell.edges.length > 0) {
      var e = cell.edges[cell.edges.length - 1]; //console.log("starting with edge " + e);

      var cval = cell.cval_real;

      switch (e) {
        case 0:
          if (cval & Node1) {
            /* node 1 within range */
            return {
              p: [1, cell.righttop],
              x: -1,
              y: 0,
              o: 1
            };
          } else {
            /* node 1 below or above threshold */
            return {
              p: [cell.topleft, 1],
              x: 0,
              y: -1,
              o: 0
            };
          }

        case 1:
          if (cval & Node2) {
            return {
              p: [cell.topleft, 1],
              x: 0,
              y: -1,
              o: 0
            };
          } else {
            return {
              p: [1, cell.rightbottom],
              x: -1,
              y: 0,
              o: 0
            };
          }

        case 2:
          if (cval & Node2) {
            return {
              p: [cell.bottomright, 0],
              x: 0,
              y: 1,
              o: 1
            };
          } else {
            return {
              p: [cell.topleft, 1],
              x: 0,
              y: -1,
              o: 0
            };
          }

        case 3:
          if (cval & Node3) {
            return {
              p: [cell.topleft, 1],
              x: 0,
              y: -1,
              o: 0
            };
          } else {
            return {
              p: [cell.bottomleft, 0],
              x: 0,
              y: 1,
              o: 0
            };
          }

        case 4:
          if (cval & Node1) {
            return {
              p: [1, cell.righttop],
              x: -1,
              y: 0,
              o: 1
            };
          } else {
            return {
              p: [cell.topright, 1],
              x: 0,
              y: -1,
              o: 1
            };
          }

        case 5:
          if (cval & Node2) {
            return {
              p: [cell.topright, 1],
              x: 0,
              y: -1,
              o: 1
            };
          } else {
            return {
              p: [1, cell.rightbottom],
              x: -1,
              y: 0,
              o: 0
            };
          }

        case 6:
          if (cval & Node2) {
            return {
              p: [cell.bottomright, 0],
              x: 0,
              y: 1,
              o: 1
            };
          } else {
            return {
              p: [cell.topright, 1],
              x: 0,
              y: -1,
              o: 1
            };
          }

        case 7:
          if (cval & Node3) {
            return {
              p: [cell.topright, 1],
              x: 0,
              y: -1,
              o: 1
            };
          } else {
            return {
              p: [cell.bottomleft, 0],
              x: 0,
              y: 1,
              o: 0
            };
          }

        case 8:
          if (cval & Node2) {
            return {
              p: [cell.bottomright, 0],
              x: 0,
              y: 1,
              o: 1
            };
          } else {
            return {
              p: [1, cell.righttop],
              x: -1,
              y: 0,
              o: 1
            };
          }

        case 9:
          if (cval & Node3) {
            return {
              p: [1, cell.righttop],
              x: -1,
              y: 0,
              o: 1
            };
          } else {
            return {
              p: [cell.bottomleft, 0],
              x: 0,
              y: 1,
              o: 0
            };
          }

        case 10:
          if (cval & Node3) {
            return {
              p: [0, cell.leftbottom],
              x: 1,
              y: 0,
              o: 0
            };
          } else {
            return {
              p: [1, cell.righttop],
              x: -1,
              y: 0,
              o: 1
            };
          }

        case 11:
          if (cval & Node0) {
            return {
              p: [1, cell.righttop],
              x: -1,
              y: 0,
              o: 1
            };
          } else {
            return {
              p: [0, cell.lefttop],
              x: 1,
              y: 0,
              o: 1
            };
          }

        case 12:
          if (cval & Node2) {
            return {
              p: [cell.bottomright, 0],
              x: 0,
              y: 1,
              o: 1
            };
          } else {
            return {
              p: [1, cell.rightbottom],
              x: -1,
              y: 0,
              o: 0
            };
          }

        case 13:
          if (cval & Node3) {
            return {
              p: [1, cell.rightbottom],
              x: -1,
              y: 0,
              o: 0
            };
          } else {
            return {
              p: [cell.bottomleft, 0],
              x: 0,
              y: 1,
              o: 0
            };
          }

        case 14:
          if (cval & Node3) {
            return {
              p: [0, cell.leftbottom],
              x: 1,
              y: 0,
              o: 0
            };
          } else {
            return {
              p: [1, cell.rightbottom],
              x: -1,
              y: 0,
              o: 0
            };
          }

        case 15:
          if (cval & Node0) {
            return {
              p: [1, cell.rightbottom],
              x: -1,
              y: 0,
              o: 0
            };
          } else {
            return {
              p: [0, cell.lefttop],
              x: 1,
              y: 0,
              o: 1
            };
          }

        case 16:
          if (cval & Node2) {
            return {
              p: [cell.bottomright, 0],
              x: 0,
              y: 1,
              o: 1
            };
          } else {
            return {
              p: [0, cell.leftbottom],
              x: 1,
              y: 0,
              o: 0
            };
          }

        case 17:
          if (cval & Node0) {
            return {
              p: [cell.bottomright, 0],
              x: 0,
              y: 1,
              o: 1
            };
          } else {
            return {
              p: [0, cell.lefttop],
              x: 1,
              y: 0,
              o: 1
            };
          }

        case 18:
          if (cval & Node3) {
            return {
              p: [0, cell.leftbottom],
              x: 1,
              y: 0,
              o: 0
            };
          } else {
            return {
              p: [cell.bottomleft, 0],
              x: 0,
              y: 1,
              o: 0
            };
          }

        case 19:
          if (cval & Node0) {
            return {
              p: [cell.bottomleft, 0],
              x: 0,
              y: 1,
              o: 0
            };
          } else {
            return {
              p: [0, cell.lefttop],
              x: 1,
              y: 0,
              o: 1
            };
          }

        case 20:
          if (cval & Node0) {
            return {
              p: [cell.topleft, 1],
              x: 0,
              y: -1,
              o: 0
            };
          } else {
            return {
              p: [0, cell.leftbottom],
              x: 1,
              y: 0,
              o: 0
            };
          }

        case 21:
          if (cval & Node1) {
            return {
              p: [0, cell.leftbottom],
              x: 1,
              y: 0,
              o: 0
            };
          } else {
            return {
              p: [cell.topright, 1],
              x: 0,
              y: -1,
              o: 1
            };
          }

        case 22:
          if (cval & Node0) {
            return {
              p: [cell.topleft, 1],
              x: 0,
              y: -1,
              o: 0
            };
          } else {
            return {
              p: [0, cell.lefttop],
              x: 1,
              y: 0,
              o: 1
            };
          }

        case 23:
          if (cval & Node1) {
            return {
              p: [0, cell.lefttop],
              x: 1,
              y: 0,
              o: 1
            };
          } else {
            return {
              p: [cell.topright, 1],
              x: 0,
              y: -1,
              o: 1
            };
          }

        default:
          console.log("MarchingSquaresJS-isoBands: edge index out of range!");
          console.log(cell);
          break;
      }
    }

    return null;
  }

  function getExitXY(cell, x, y, o) {
    var e,
        id_x,
        d_x,
        d_y,
        cval = cell.cval;
    var d_o;

    switch (x) {
      case -1:
        switch (o) {
          case 0:
            e = isoBandEdgeRB[cval];
            d_x = isoBandNextXRB[cval];
            d_y = isoBandNextYRB[cval];
            d_o = isoBandNextORB[cval];
            break;

          default:
            e = isoBandEdgeRT[cval];
            d_x = isoBandNextXRT[cval];
            d_y = isoBandNextYRT[cval];
            d_o = isoBandNextORT[cval];
            break;
        }

        break;

      case 1:
        switch (o) {
          case 0:
            e = isoBandEdgeLB[cval];
            d_x = isoBandNextXLB[cval];
            d_y = isoBandNextYLB[cval];
            d_o = isoBandNextOLB[cval];
            break;

          default:
            e = isoBandEdgeLT[cval];
            d_x = isoBandNextXLT[cval];
            d_y = isoBandNextYLT[cval];
            d_o = isoBandNextOLT[cval];
            break;
        }

        break;

      default:
        switch (y) {
          case -1:
            switch (o) {
              case 0:
                e = isoBandEdgeTL[cval];
                d_x = isoBandNextXTL[cval];
                d_y = isoBandNextYTL[cval];
                d_o = isoBandNextOTL[cval];
                break;

              default:
                e = isoBandEdgeTR[cval];
                d_x = isoBandNextXTR[cval];
                d_y = isoBandNextYTR[cval];
                d_o = isoBandNextOTR[cval];
                break;
            }

            break;

          case 1:
            switch (o) {
              case 0:
                e = isoBandEdgeBL[cval];
                d_x = isoBandNextXBL[cval];
                d_y = isoBandNextYBL[cval];
                d_o = isoBandNextOBL[cval];
                break;

              default:
                e = isoBandEdgeBR[cval];
                d_x = isoBandNextXBR[cval];
                d_y = isoBandNextYBR[cval];
                d_o = isoBandNextOBR[cval];
                break;
            }

            break;
        }

        break;
    }

    id_x = cell.edges.indexOf(e);

    if (typeof cell.edges[id_x] !== "undefined") {
      deleteEdge(cell, id_x);
    } else {
      //console.log("wrong edges...");
      //console.log(x + " " + y + " " + o);
      //console.log(cell);
      return null;
    }

    cval = cell.cval_real;

    switch (e) {
      case 0:
        if (cval & Node1) {
          /* node 1 within range */
          x = cell.topleft;
          y = 1;
        } else {
          /* node 1 below or above threshold */
          x = 1;
          y = cell.righttop;
        }

        break;

      case 1:
        if (cval & Node2) {
          x = 1;
          y = cell.rightbottom;
        } else {
          x = cell.topleft;
          y = 1;
        }

        break;

      case 2:
        if (cval & Node2) {
          x = cell.topleft;
          y = 1;
        } else {
          x = cell.bottomright;
          y = 0;
        }

        break;

      case 3:
        if (cval & Node3) {
          x = cell.bottomleft;
          y = 0;
        } else {
          x = cell.topleft;
          y = 1;
        }

        break;

      case 4:
        if (cval & Node1) {
          x = cell.topright;
          y = 1;
        } else {
          x = 1;
          y = cell.righttop;
        }

        break;

      case 5:
        if (cval & Node2) {
          x = 1;
          y = cell.rightbottom;
        } else {
          x = cell.topright;
          y = 1;
        }

        break;

      case 6:
        if (cval & Node2) {
          x = cell.topright;
          y = 1;
        } else {
          x = cell.bottomright;
          y = 0;
        }

        break;

      case 7:
        if (cval & Node3) {
          x = cell.bottomleft;
          y = 0;
        } else {
          x = cell.topright;
          y = 1;
        }

        break;

      case 8:
        if (cval & Node2) {
          x = 1;
          y = cell.righttop;
        } else {
          x = cell.bottomright;
          y = 0;
        }

        break;

      case 9:
        if (cval & Node3) {
          x = cell.bottomleft;
          y = 0;
        } else {
          x = 1;
          y = cell.righttop;
        }

        break;

      case 10:
        if (cval & Node3) {
          x = 1;
          y = cell.righttop;
        } else {
          x = 0;
          y = cell.leftbottom;
        }

        break;

      case 11:
        if (cval & Node0) {
          x = 0;
          y = cell.lefttop;
        } else {
          x = 1;
          y = cell.righttop;
        }

        break;

      case 12:
        if (cval & Node2) {
          x = 1;
          y = cell.rightbottom;
        } else {
          x = cell.bottomright;
          y = 0;
        }

        break;

      case 13:
        if (cval & Node3) {
          x = cell.bottomleft;
          y = 0;
        } else {
          x = 1;
          y = cell.rightbottom;
        }

        break;

      case 14:
        if (cval & Node3) {
          x = 1;
          y = cell.rightbottom;
        } else {
          x = 0;
          y = cell.leftbottom;
        }

        break;

      case 15:
        if (cval & Node0) {
          x = 0;
          y = cell.lefttop;
        } else {
          x = 1;
          y = cell.rightbottom;
        }

        break;

      case 16:
        if (cval & Node2) {
          x = 0;
          y = cell.leftbottom;
        } else {
          x = cell.bottomright;
          y = 0;
        }

        break;

      case 17:
        if (cval & Node0) {
          x = 0;
          y = cell.lefttop;
        } else {
          x = cell.bottomright;
          y = 0;
        }

        break;

      case 18:
        if (cval & Node3) {
          x = cell.bottomleft;
          y = 0;
        } else {
          x = 0;
          y = cell.leftbottom;
        }

        break;

      case 19:
        if (cval & Node0) {
          x = 0;
          y = cell.lefttop;
        } else {
          x = cell.bottomleft;
          y = 0;
        }

        break;

      case 20:
        if (cval & Node0) {
          x = 0;
          y = cell.leftbottom;
        } else {
          x = cell.topleft;
          y = 1;
        }

        break;

      case 21:
        if (cval & Node1) {
          x = cell.topright;
          y = 1;
        } else {
          x = 0;
          y = cell.leftbottom;
        }

        break;

      case 22:
        if (cval & Node0) {
          x = 0;
          y = cell.lefttop;
        } else {
          x = cell.topleft;
          y = 1;
        }

        break;

      case 23:
        if (cval & Node1) {
          x = cell.topright;
          y = 1;
        } else {
          x = 0;
          y = cell.lefttop;
        }

        break;

      default:
        console.log("MarchingSquaresJS-isoBands: edge index out of range!");
        console.log(cell);
        return null;
    }

    if (typeof x === "undefined" || typeof y === "undefined" || typeof d_x === "undefined" || typeof d_y === "undefined" || typeof d_o === "undefined") {
      console.log("MarchingSquaresJS-isoBands: undefined value!");
      console.log(cell);
      console.log(x + " " + y + " " + d_x + " " + d_y + " " + d_o);
    }

    return {
      p: [x, y],
      x: d_x,
      y: d_y,
      o: d_o
    };
  }

  function BandGrid2Areas(grid) {
    var areas = [];
    var area_idx = 0;
    grid.cells.forEach(function (g, j) {
      g.forEach(function (gg, i) {
        if (typeof gg !== "undefined") {
          var a = polygon_table[gg.cval](gg);

          if (_typeof(a) === "object" && isArray(a)) {
            if (_typeof(a[0]) === "object" && isArray(a[0])) {
              if (_typeof(a[0][0]) === "object" && isArray(a[0][0])) {
                a.forEach(function (aa) {
                  aa.forEach(function (aaa) {
                    aaa[0] += i;
                    aaa[1] += j;
                  });
                  areas[area_idx++] = aa;
                });
              } else {
                a.forEach(function (aa) {
                  aa[0] += i;
                  aa[1] += j;
                });
                areas[area_idx++] = a;
              }
            } else {
              console.log("MarchingSquaresJS-isoBands: bandcell polygon with malformed coordinates");
            }
          } else {
            console.log("MarchingSquaresJS-isoBands: bandcell polygon with null coordinates");
          }
        }
      });
    });
    return areas;
  }
  /**
   * Takes a square or rectangular grid {@link FeatureCollection} of {@link Point} features with z-values and an array of
   * value breaks and generates filled contour isobands.
   *
   * @name isobands
   * @param {FeatureCollection<Point>} pointGrid input points - must be square or rectangular
   * @param {Array<number>} breaks where to draw contours
   * @param {Object} [options={}] options on output
   * @param {string} [options.zProperty='elevation'] the property name in `points` from which z-values will be pulled
   * @param {Object} [options.commonProperties={}] GeoJSON properties passed to ALL isobands
   * @param {Array<Object>} [options.breaksProperties=[]] GeoJSON properties passed, in order, to the correspondent isoband (order defined by breaks)
   * @returns {FeatureCollection<MultiPolygon>} a FeatureCollection of {@link MultiPolygon} features representing isobands
   */


  function isobands(pointGrid, breaks, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var zProperty = options.zProperty || "elevation";
    var commonProperties = options.commonProperties || {};
    var breaksProperties = options.breaksProperties || []; // Validation

    collectionOf(pointGrid, "Point", "Input must contain Points");
    if (!breaks) throw new Error("breaks is required");
    if (!Array.isArray(breaks)) throw new Error("breaks is not an Array");
    if (!isObject(commonProperties)) throw new Error("commonProperties is not an Object");
    if (!Array.isArray(breaksProperties)) throw new Error("breaksProperties is not an Array"); // Isoband methods

    var matrix = gridToMatrix(pointGrid, {
      zProperty: zProperty,
      flip: true
    });
    var contours = createContourLines(matrix, breaks, zProperty);
    contours = rescaleContours(contours, matrix, pointGrid);
    var multipolygons = contours.map(function (contour, index) {
      if (breaksProperties[index] && !isObject(breaksProperties[index])) {
        throw new Error("Each mappedProperty is required to be an Object");
      } // collect all properties


      var contourProperties = objectAssign({}, commonProperties, breaksProperties[index]);
      contourProperties[zProperty] = contour[zProperty];
      var multiP = multiPolygon(contour.groupedRings, contourProperties);
      return multiP;
    });
    return featureCollection$1(multipolygons);
  }
  /**
   * Creates the contours lines (featuresCollection of polygon features) from the 2D data grid
   *
   * Marchingsquares process the grid data as a 3D representation of a function on a 2D plane, therefore it
   * assumes the points (x-y coordinates) are one 'unit' distance. The result of the IsoBands function needs to be
   * rescaled, with turfjs, to the original area and proportions on the map
   *
   * @private
   * @param {Array<Array<number>>} matrix Grid Data
   * @param {Array<number>} breaks Breaks
   * @param {string} [property='elevation'] Property
   * @returns {Array<any>} contours
   */


  function createContourLines(matrix, breaks, property) {
    var contours = [];

    for (var i = 1; i < breaks.length; i++) {
      var lowerBand = +breaks[i - 1]; // make sure the breaks value is a number

      var upperBand = +breaks[i];
      var isobandsCoords = isoBands(matrix, lowerBand, upperBand - lowerBand); // as per GeoJson rules for creating a Polygon, make sure the first element
      // in the array of LinearRings represents the exterior ring (i.e. biggest area),
      // and any subsequent elements represent interior rings (i.e. smaller area);
      // this avoids rendering issues of the MultiPolygons on the map

      var nestedRings = orderByArea(isobandsCoords);
      var groupedRings = groupNestedRings(nestedRings);
      var obj = {};
      obj["groupedRings"] = groupedRings;
      obj[property] = lowerBand + "-" + upperBand;
      contours.push(obj);
    }

    return contours;
  }
  /**
   * Transform isobands of 2D grid to polygons for the map
   *
   * @private
   * @param {Array<any>} contours Contours
   * @param {Array<Array<number>>} matrix Grid Data
   * @param {Object} points Points by Latitude
   * @returns {Array<any>} contours
   */


  function rescaleContours(contours, matrix, points) {
    // get dimensions (on the map) of the original grid
    var gridBbox = bbox$2(points); // [ minX, minY, maxX, maxY ]

    var originalWidth = gridBbox[2] - gridBbox[0];
    var originalHeigth = gridBbox[3] - gridBbox[1]; // get origin, which is the first point of the last row on the rectangular data on the map

    var x0 = gridBbox[0];
    var y0 = gridBbox[1]; // get number of cells per side

    var matrixWidth = matrix[0].length - 1;
    var matrixHeight = matrix.length - 1; // calculate the scaling factor between matrix and rectangular grid on the map

    var scaleX = originalWidth / matrixWidth;
    var scaleY = originalHeigth / matrixHeight;

    var resize = function resize(point) {
      point[0] = point[0] * scaleX + x0;
      point[1] = point[1] * scaleY + y0;
    }; // resize and shift each point/line of the isobands


    contours.forEach(function (contour) {
      contour.groupedRings.forEach(function (lineRingSet) {
        lineRingSet.forEach(function (lineRing) {
          lineRing.forEach(resize);
        });
      });
    });
    return contours;
  }
  /*  utility functions */

  /**
   * Returns an array of coordinates (of LinearRings) in descending order by area
   *
   * @private
   * @param {Array<LineString>} ringsCoords array of closed LineString
   * @returns {Array} array of the input LineString ordered by area
   */


  function orderByArea(ringsCoords) {
    var ringsWithArea = [];
    var areas = [];
    ringsCoords.forEach(function (coords) {
      // var poly = polygon([points]);
      var ringArea = area(polygon([coords])); // create an array of areas value

      areas.push(ringArea); // associate each lineRing with its area

      ringsWithArea.push({
        ring: coords,
        area: ringArea
      });
    });
    areas.sort(function (a, b) {
      // bigger --> smaller
      return b - a;
    }); // create a new array of linearRings coordinates ordered by their area

    var orderedByArea = [];
    areas.forEach(function (area) {
      for (var lr = 0; lr < ringsWithArea.length; lr++) {
        if (ringsWithArea[lr].area === area) {
          orderedByArea.push(ringsWithArea[lr].ring);
          ringsWithArea.splice(lr, 1);
          break;
        }
      }
    });
    return orderedByArea;
  }
  /**
   * Returns an array of arrays of coordinates, each representing
   * a set of (coordinates of) nested LinearRings,
   * i.e. the first ring contains all the others
   *
   * @private
   * @param {Array} orderedLinearRings array of coordinates (of LinearRings) in descending order by area
   * @returns {Array<Array>} Array of coordinates of nested LinearRings
   */


  function groupNestedRings(orderedLinearRings) {
    // create a list of the (coordinates of) LinearRings
    var lrList = orderedLinearRings.map(function (lr) {
      return {
        lrCoordinates: lr,
        grouped: false
      };
    });
    var groupedLinearRingsCoords = [];

    while (!allGrouped(lrList)) {
      for (var i = 0; i < lrList.length; i++) {
        if (!lrList[i].grouped) {
          // create new group starting with the larger not already grouped ring
          var group = [];
          group.push(lrList[i].lrCoordinates);
          lrList[i].grouped = true;
          var outerMostPoly = polygon([lrList[i].lrCoordinates]); // group all the rings contained by the outermost ring

          for (var j = i + 1; j < lrList.length; j++) {
            if (!lrList[j].grouped) {
              var lrPoly = polygon([lrList[j].lrCoordinates]);

              if (isInside$1(lrPoly, outerMostPoly)) {
                group.push(lrList[j].lrCoordinates);
                lrList[j].grouped = true;
              }
            }
          } // insert the new group


          groupedLinearRingsCoords.push(group);
        }
      }
    }

    return groupedLinearRingsCoords;
  }
  /**
   * @private
   * @param {Polygon} testPolygon polygon of interest
   * @param {Polygon} targetPolygon polygon you want to compare with
   * @returns {boolean} true if test-Polygon is inside target-Polygon
   */


  function isInside$1(testPolygon, targetPolygon) {
    var points = explode$1(testPolygon);

    for (var i = 0; i < points.features.length; i++) {
      if (!booleanPointInPolygon(points.features[i], targetPolygon)) {
        return false;
      }
    }

    return true;
  }
  /**
   * @private
   * @param {Array<Object>} list list of objects which might contain the 'group' attribute
   * @returns {boolean} true if all the objects in the list are marked as grouped
   */


  function allGrouped(list) {
    for (var i = 0; i < list.length; i++) {
      if (list[i].grouped === false) {
        return false;
      }
    }

    return true;
  }

  /**
   * Rotates any geojson Feature or Geometry of a specified angle, around its `centroid` or a given `pivot` point.
   *
   * @name transformRotate
   * @param {GeoJSON} geojson object to be rotated
   * @param {number} angle of rotation in decimal degrees, positive clockwise
   * @param {Object} [options={}] Optional parameters
   * @param {Coord} [options.pivot='centroid'] point around which the rotation will be performed
   * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
   * @returns {GeoJSON} the rotated GeoJSON feature
   * @example
   * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);
   * var options = {pivot: [0, 25]};
   * var rotatedPoly = turf.transformRotate(poly, 10, options);
   *
   * //addToMap
   * var addToMap = [poly, rotatedPoly];
   * rotatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};
   */

  function transformRotate(geojson, angle, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var pivot = options.pivot;
    var mutate = options.mutate; // Input validation

    if (!geojson) throw new Error("geojson is required");
    if (angle === undefined || angle === null || isNaN(angle)) throw new Error("angle is required"); // Shortcut no-rotation

    if (angle === 0) return geojson; // Use centroid of GeoJSON if pivot is not provided

    if (!pivot) pivot = centroid(geojson); // Clone geojson to avoid side effects

    if (mutate === false || mutate === undefined) geojson = clone(geojson); // Rotate each coordinate

    coordEach$1(geojson, function (pointCoords) {
      var initialAngle = rhumbBearing(pivot, pointCoords);
      var finalAngle = initialAngle + angle;
      var distance = rhumbDistance(pivot, pointCoords);
      var newCoords = getCoords(rhumbDestination(pivot, distance, finalAngle));
      pointCoords[0] = newCoords[0];
      pointCoords[1] = newCoords[1];
    });
    return geojson;
  }

  /**
   * Scale a GeoJSON from a given point by a factor of scaling (ex: factor=2 would make the GeoJSON 200% larger).
   * If a FeatureCollection is provided, the origin point will be calculated based on each individual Feature.
   *
   * @name transformScale
   * @param {GeoJSON} geojson GeoJSON to be scaled
   * @param {number} factor of scaling, positive or negative values greater than 0
   * @param {Object} [options={}] Optional parameters
   * @param {string|Coord} [options.origin='centroid'] Point from which the scaling will occur (string options: sw/se/nw/ne/center/centroid)
   * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
   * @returns {GeoJSON} scaled GeoJSON
   * @example
   * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);
   * var scaledPoly = turf.transformScale(poly, 3);
   *
   * //addToMap
   * var addToMap = [poly, scaledPoly];
   * scaledPoly.properties = {stroke: '#F00', 'stroke-width': 4};
   */

  function transformScale(geojson, factor, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var origin = options.origin;
    var mutate = options.mutate; // Input validation

    if (!geojson) throw new Error("geojson required");
    if (typeof factor !== "number" || factor === 0) throw new Error("invalid factor");
    var originIsPoint = Array.isArray(origin) || _typeof(origin) === "object"; // Clone geojson to avoid side effects

    if (mutate !== true) geojson = clone(geojson); // Scale each Feature separately

    if (geojson.type === "FeatureCollection" && !originIsPoint) {
      featureEach$2(geojson, function (feature, index) {
        geojson.features[index] = scale(feature, factor, origin);
      });
      return geojson;
    } // Scale Feature/Geometry


    return scale(geojson, factor, origin);
  }
  /**
   * Scale Feature/Geometry
   *
   * @private
   * @param {Feature|Geometry} feature GeoJSON Feature/Geometry
   * @param {number} factor of scaling, positive or negative values greater than 0
   * @param {string|Coord} [origin="centroid"] Point from which the scaling will occur (string options: sw/se/nw/ne/center/centroid)
   * @returns {Feature|Geometry} scaled GeoJSON Feature/Geometry
   */


  function scale(feature, factor, origin) {
    // Default params
    var isPoint = getType$1(feature) === "Point";
    origin = defineOrigin(feature, origin); // Shortcut no-scaling

    if (factor === 1 || isPoint) return feature; // Scale each coordinate

    coordEach$1(feature, function (coord) {
      var originalDistance = rhumbDistance(origin, coord);
      var bearing = rhumbBearing(origin, coord);
      var newDistance = originalDistance * factor;
      var newCoord = getCoords(rhumbDestination(origin, newDistance, bearing));
      coord[0] = newCoord[0];
      coord[1] = newCoord[1];
      if (coord.length === 3) coord[2] *= factor;
    });
    return feature;
  }
  /**
   * Define Origin
   *
   * @private
   * @param {GeoJSON} geojson GeoJSON
   * @param {string|Coord} origin sw/se/nw/ne/center/centroid
   * @returns {Feature<Point>} Point origin
   */


  function defineOrigin(geojson, origin) {
    // Default params
    if (origin === undefined || origin === null) origin = "centroid"; // Input Coord

    if (Array.isArray(origin) || _typeof(origin) === "object") return getCoord(origin); // Define BBox

    var bbox = geojson.bbox ? geojson.bbox : bbox$2(geojson);
    var west = bbox[0];
    var south = bbox[1];
    var east = bbox[2];
    var north = bbox[3];

    switch (origin) {
      case "sw":
      case "southwest":
      case "westsouth":
      case "bottomleft":
        return point([west, south]);

      case "se":
      case "southeast":
      case "eastsouth":
      case "bottomright":
        return point([east, south]);

      case "nw":
      case "northwest":
      case "westnorth":
      case "topleft":
        return point([west, north]);

      case "ne":
      case "northeast":
      case "eastnorth":
      case "topright":
        return point([east, north]);

      case "center":
        return center(geojson);

      case undefined:
      case null:
      case "centroid":
        return centroid(geojson);

      default:
        throw new Error("invalid origin");
    }
  }

  /**
   * Moves any geojson Feature or Geometry of a specified distance along a Rhumb Line
   * on the provided direction angle.
   *
   * @name transformTranslate
   * @param {GeoJSON} geojson object to be translated
   * @param {number} distance length of the motion; negative values determine motion in opposite direction
   * @param {number} direction of the motion; angle from North in decimal degrees, positive clockwise
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] in which `distance` will be express; miles, kilometers, degrees, or radians
   * @param {number} [options.zTranslation=0] length of the vertical motion, same unit of distance
   * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
   * @returns {GeoJSON} the translated GeoJSON object
   * @example
   * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);
   * var translatedPoly = turf.transformTranslate(poly, 100, 35);
   *
   * //addToMap
   * var addToMap = [poly, translatedPoly];
   * translatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};
   */

  function transformTranslate(geojson, distance, direction, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var units = options.units;
    var zTranslation = options.zTranslation;
    var mutate = options.mutate; // Input validation

    if (!geojson) throw new Error("geojson is required");
    if (distance === undefined || distance === null || isNaN(distance)) throw new Error("distance is required");
    if (zTranslation && typeof zTranslation !== "number" && isNaN(zTranslation)) throw new Error("zTranslation is not a number"); // Shortcut no-motion

    zTranslation = zTranslation !== undefined ? zTranslation : 0;
    if (distance === 0 && zTranslation === 0) return geojson;
    if (direction === undefined || direction === null || isNaN(direction)) throw new Error("direction is required"); // Invert with negative distances

    if (distance < 0) {
      distance = -distance;
      direction = direction + 180;
    } // Clone geojson to avoid side effects


    if (mutate === false || mutate === undefined) geojson = clone(geojson); // Translate each coordinate

    coordEach$1(geojson, function (pointCoords) {
      var newCoords = getCoords(rhumbDestination(pointCoords, distance, direction, {
        units: units
      }));
      pointCoords[0] = newCoords[0];
      pointCoords[1] = newCoords[1];
      if (zTranslation && pointCoords.length === 3) pointCoords[2] += zTranslation;
    });
    return geojson;
  }

  /**
   * https://github.com/rook2pawn/node-intersection
   *
   * Author @rook2pawn
   */

  /**
   * AB
   *
   * @private
   * @param {Array<Array<number>>} segment - 2 vertex line segment
   * @returns {Array<number>} coordinates [x, y]
   */

  function ab(segment) {
    var start = segment[0];
    var end = segment[1];
    return [end[0] - start[0], end[1] - start[1]];
  }
  /**
   * Cross Product
   *
   * @private
   * @param {Array<number>} v1 coordinates [x, y]
   * @param {Array<number>} v2 coordinates [x, y]
   * @returns {Array<number>} Cross Product
   */


  function crossProduct$1(v1, v2) {
    return v1[0] * v2[1] - v2[0] * v1[1];
  }
  /**
   * Add
   *
   * @private
   * @param {Array<number>} v1 coordinates [x, y]
   * @param {Array<number>} v2 coordinates [x, y]
   * @returns {Array<number>} Add
   */


  function add(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1]];
  }
  /**
   * Sub
   *
   * @private
   * @param {Array<number>} v1 coordinates [x, y]
   * @param {Array<number>} v2 coordinates [x, y]
   * @returns {Array<number>} Sub
   */


  function sub(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1]];
  }
  /**
   * scalarMult
   *
   * @private
   * @param {number} s scalar
   * @param {Array<number>} v coordinates [x, y]
   * @returns {Array<number>} scalarMult
   */


  function scalarMult(s, v) {
    return [s * v[0], s * v[1]];
  }
  /**
   * Intersect Segments
   *
   * @private
   * @param {Array<number>} a coordinates [x, y]
   * @param {Array<number>} b coordinates [x, y]
   * @returns {Array<number>} intersection
   */


  function intersectSegments(a, b) {
    var p = a[0];
    var r = ab(a);
    var q = b[0];
    var s = ab(b);
    var cross = crossProduct$1(r, s);
    var qmp = sub(q, p);
    var numerator = crossProduct$1(qmp, s);
    var t = numerator / cross;
    var intersection = add(p, scalarMult(t, r));
    return intersection;
  }
  /**
   * Is Parallel
   *
   * @private
   * @param {Array<number>} a coordinates [x, y]
   * @param {Array<number>} b coordinates [x, y]
   * @returns {boolean} true if a and b are parallel (or co-linear)
   */


  function isParallel$1(a, b) {
    var r = ab(a);
    var s = ab(b);
    return crossProduct$1(r, s) === 0;
  }
  /**
   * Intersection
   *
   * @private
   * @param {Array<number>} a coordinates [x, y]
   * @param {Array<number>} b coordinates [x, y]
   * @returns {Array<number>|boolean} true if a and b are parallel (or co-linear)
   */


  function intersection$2(a, b) {
    if (isParallel$1(a, b)) return false;
    return intersectSegments(a, b);
  }
  /**
   * Takes a {@link LineString|line} and returns a {@link LineString|line} at offset by the specified distance.
   *
   * @name lineOffset
   * @param {Geometry|Feature<LineString|MultiLineString>} geojson input GeoJSON
   * @param {number} distance distance to offset the line (can be of negative value)
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] can be degrees, radians, miles, kilometers, inches, yards, meters
   * @returns {Feature<LineString|MultiLineString>} Line offset from the input line
   * @example
   * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]], { "stroke": "#F00" });
   *
   * var offsetLine = turf.lineOffset(line, 2, {units: 'miles'});
   *
   * //addToMap
   * var addToMap = [offsetLine, line]
   * offsetLine.properties.stroke = "#00F"
   */


  function lineOffset(geojson, distance, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var units = options.units; // Valdiation

    if (!geojson) throw new Error("geojson is required");
    if (distance === undefined || distance === null || isNaN(distance)) throw new Error("distance is required");
    var type = getType$1(geojson);
    var properties = geojson.properties;

    switch (type) {
      case "LineString":
        return lineOffsetFeature(geojson, distance, units);

      case "MultiLineString":
        var coords = [];
        flattenEach$1(geojson, function (feature) {
          coords.push(lineOffsetFeature(feature, distance, units).geometry.coordinates);
        });
        return multiLineString(coords, properties);

      default:
        throw new Error("geometry " + type + " is not supported");
    }
  }
  /**
   * Line Offset
   *
   * @private
   * @param {Geometry|Feature<LineString>} line input line
   * @param {number} distance distance to offset the line (can be of negative value)
   * @param {string} [units=kilometers] units
   * @returns {Feature<LineString>} Line offset from the input line
   */


  function lineOffsetFeature(line, distance, units) {
    var segments = [];
    var offsetDegrees = lengthToDegrees(distance, units);
    var coords = getCoords(line);
    var finalCoords = [];
    coords.forEach(function (currentCoords, index) {
      if (index !== coords.length - 1) {
        var segment = processSegment(currentCoords, coords[index + 1], offsetDegrees);
        segments.push(segment);

        if (index > 0) {
          var seg2Coords = segments[index - 1];
          var intersects = intersection$2(segment, seg2Coords); // Handling for line segments that aren't straight

          if (intersects !== false) {
            seg2Coords[1] = intersects;
            segment[0] = intersects;
          }

          finalCoords.push(seg2Coords[0]);

          if (index === coords.length - 2) {
            finalCoords.push(segment[0]);
            finalCoords.push(segment[1]);
          }
        } // Handling for lines that only have 1 segment


        if (coords.length === 2) {
          finalCoords.push(segment[0]);
          finalCoords.push(segment[1]);
        }
      }
    });
    return lineString(finalCoords, line.properties);
  }
  /**
   * Process Segment
   * Inspiration taken from http://stackoverflow.com/questions/2825412/draw-a-parallel-line
   *
   * @private
   * @param {Array<number>} point1 Point coordinates
   * @param {Array<number>} point2 Point coordinates
   * @param {number} offset Offset
   * @returns {Array<Array<number>>} offset points
   */


  function processSegment(point1, point2, offset) {
    var L = Math.sqrt((point1[0] - point2[0]) * (point1[0] - point2[0]) + (point1[1] - point2[1]) * (point1[1] - point2[1]));
    var out1x = point1[0] + offset * (point2[1] - point1[1]) / L;
    var out2x = point2[0] + offset * (point2[1] - point1[1]) / L;
    var out1y = point1[1] + offset * (point1[0] - point2[0]) / L;
    var out2y = point2[1] + offset * (point1[0] - point2[0]) / L;
    return [[out1x, out1y], [out2x, out2y]];
  }

  function mathSign(x) {
    return (x > 0) - (x < 0) || +x;
  }
  /**
   * Returns the direction of the point q relative to the vector p1 -> p2.
   *
   * Implementation of geos::algorithm::CGAlgorithm::orientationIndex()
   * (same as geos::algorithm::CGAlgorithm::computeOrientation())
   *
   * @param {number[]} p1 - the origin point of the vector
   * @param {number[]} p2 - the final point of the vector
   * @param {number[]} q - the point to compute the direction to
   *
   * @returns {number} - 1 if q is ccw (left) from p1->p2,
   *    -1 if q is cw (right) from p1->p2,
   *     0 if q is colinear with p1->p2
   */


  function orientationIndex(p1, p2, q) {
    var dx1 = p2[0] - p1[0],
        dy1 = p2[1] - p1[1],
        dx2 = q[0] - p2[0],
        dy2 = q[1] - p2[1];
    return mathSign(dx1 * dy2 - dx2 * dy1);
  }
  /**
   * Checks if two envelopes are equal.
   *
   * The function assumes that the arguments are envelopes, i.e.: Rectangular polygon
   *
   * @param {Feature<Polygon>} env1 - Envelope
   * @param {Feature<Polygon>} env2 - Envelope
   * @returns {boolean} - True if the envelopes are equal
   */

  function envelopeIsEqual(env1, env2) {
    var envX1 = env1.geometry.coordinates[0].map(function (c) {
      return c[0];
    }),
        envY1 = env1.geometry.coordinates[0].map(function (c) {
      return c[1];
    }),
        envX2 = env2.geometry.coordinates[0].map(function (c) {
      return c[0];
    }),
        envY2 = env2.geometry.coordinates[0].map(function (c) {
      return c[1];
    });
    return Math.max.apply(null, envX1) === Math.max.apply(null, envX2) && Math.max.apply(null, envY1) === Math.max.apply(null, envY2) && Math.min.apply(null, envX1) === Math.min.apply(null, envX2) && Math.min.apply(null, envY1) === Math.min.apply(null, envY2);
  }
  /**
   * Check if a envelope is contained in other one.
   *
   * The function assumes that the arguments are envelopes, i.e.: Convex polygon
   * XXX: Envelopes are rectangular, checking if a point is inside a rectangule is something easy,
   * this could be further improved.
   *
   * @param {Feature<Polygon>} self - Envelope
   * @param {Feature<Polygon>} env - Envelope
   * @returns {boolean} - True if env is contained in self
   */

  function envelopeContains(self, env) {
    return env.geometry.coordinates[0].every(function (c) {
      return booleanPointInPolygon(point(c), self);
    });
  }
  /**
   * Checks if two coordinates are equal.
   *
   * @param {number[]} coord1 - First coordinate
   * @param {number[]} coord2 - Second coordinate
   * @returns {boolean} - True if coordinates are equal
   */

  function coordinatesEqual(coord1, coord2) {
    return coord1[0] === coord2[0] && coord1[1] === coord2[1];
  }

  /**
   * Node
   */

  var Node$3 =
  /** @class */
  function () {
    function Node(coordinates) {
      this.id = Node.buildId(coordinates);
      this.coordinates = coordinates; //< {Number[]}

      this.innerEdges = []; //< {Edge[]}
      // We wil store to (out) edges in an CCW order as geos::planargraph::DirectedEdgeStar does

      this.outerEdges = []; //< {Edge[]}

      this.outerEdgesSorted = false; //< {Boolean} flag that stores if the outer Edges had been sorted
    }

    Node.buildId = function (coordinates) {
      return coordinates.join(",");
    };

    Node.prototype.removeInnerEdge = function (edge) {
      this.innerEdges = this.innerEdges.filter(function (e) {
        return e.from.id !== edge.from.id;
      });
    };

    Node.prototype.removeOuterEdge = function (edge) {
      this.outerEdges = this.outerEdges.filter(function (e) {
        return e.to.id !== edge.to.id;
      });
    };
    /**
     * Outer edges are stored CCW order.
     *
     * @memberof Node
     * @param {Edge} edge - Edge to add as an outerEdge.
     */


    Node.prototype.addOuterEdge = function (edge) {
      this.outerEdges.push(edge);
      this.outerEdgesSorted = false;
    };
    /**
     * Sorts outer edges in CCW way.
     *
     * @memberof Node
     * @private
     */


    Node.prototype.sortOuterEdges = function () {
      var _this = this;

      if (!this.outerEdgesSorted) {
        //this.outerEdges.sort((a, b) => a.compareTo(b));
        // Using this comparator in order to be deterministic
        this.outerEdges.sort(function (a, b) {
          var aNode = a.to,
              bNode = b.to;
          if (aNode.coordinates[0] - _this.coordinates[0] >= 0 && bNode.coordinates[0] - _this.coordinates[0] < 0) return 1;
          if (aNode.coordinates[0] - _this.coordinates[0] < 0 && bNode.coordinates[0] - _this.coordinates[0] >= 0) return -1;

          if (aNode.coordinates[0] - _this.coordinates[0] === 0 && bNode.coordinates[0] - _this.coordinates[0] === 0) {
            if (aNode.coordinates[1] - _this.coordinates[1] >= 0 || bNode.coordinates[1] - _this.coordinates[1] >= 0) return aNode.coordinates[1] - bNode.coordinates[1];
            return bNode.coordinates[1] - aNode.coordinates[1];
          }

          var det = orientationIndex(_this.coordinates, aNode.coordinates, bNode.coordinates);
          if (det < 0) return 1;
          if (det > 0) return -1;
          var d1 = Math.pow(aNode.coordinates[0] - _this.coordinates[0], 2) + Math.pow(aNode.coordinates[1] - _this.coordinates[1], 2),
              d2 = Math.pow(bNode.coordinates[0] - _this.coordinates[0], 2) + Math.pow(bNode.coordinates[1] - _this.coordinates[1], 2);
          return d1 - d2;
        });
        this.outerEdgesSorted = true;
      }
    };
    /**
     * Retrieves outer edges.
     *
     * They are sorted if they aren't in the CCW order.
     *
     * @memberof Node
     * @returns {Edge[]} - List of outer edges sorted in a CCW order.
     */


    Node.prototype.getOuterEdges = function () {
      this.sortOuterEdges();
      return this.outerEdges;
    };

    Node.prototype.getOuterEdge = function (i) {
      this.sortOuterEdges();
      return this.outerEdges[i];
    };

    Node.prototype.addInnerEdge = function (edge) {
      this.innerEdges.push(edge);
    };

    return Node;
  }();

  /**
   * This class is inspired by GEOS's geos::operation::polygonize::PolygonizeDirectedEdge
   */

  var Edge$1 =
  /** @class */
  function () {
    /**
     * @param {Node} from - start node of the Edge
     * @param {Node} to - end node of the edge
     */
    function Edge(from, to) {
      this.from = from; //< start

      this.to = to; //< End

      this.next = undefined; //< The edge to be computed after

      this.label = undefined; //< Used in order to detect Cut Edges (Bridges)

      this.symetric = undefined; //< The symetric edge of this

      this.ring = undefined; //< EdgeRing in which the Edge is

      this.from.addOuterEdge(this);
      this.to.addInnerEdge(this);
    }
    /**
     * Creates or get the symetric Edge.
     *
     * @returns {Edge} - Symetric Edge.
     */


    Edge.prototype.getSymetric = function () {
      if (!this.symetric) {
        this.symetric = new Edge(this.to, this.from);
        this.symetric.symetric = this;
      }

      return this.symetric;
    };
    /**
     * Removes edge from from and to nodes.
     */


    Edge.prototype.deleteEdge = function () {
      this.from.removeOuterEdge(this);
      this.to.removeInnerEdge(this);
    };
    /**
     * Compares Edge equallity.
     *
     * An edge is equal to another, if the from and to nodes are the same.
     *
     * @param {Edge} edge - Another Edge
     * @returns {boolean} - True if Edges are equal, False otherwise
     */


    Edge.prototype.isEqual = function (edge) {
      return this.from.id === edge.from.id && this.to.id === edge.to.id;
    };

    Edge.prototype.toString = function () {
      return "Edge { " + this.from.id + " -> " + this.to.id + " }";
    };
    /**
     * Returns a LineString representation of the Edge
     *
     * @returns {Feature<LineString>} - LineString representation of the Edge
     */


    Edge.prototype.toLineString = function () {
      return lineString([this.from.coordinates, this.to.coordinates]);
    };
    /**
     * Comparator of two edges.
     *
     * Implementation of geos::planargraph::DirectedEdge::compareTo.
     *
     * @param {Edge} edge - Another edge to compare with this one
     * @returns {number} -1 if this Edge has a greater angle with the positive x-axis than b,
     *          0 if the Edges are colinear,
     *          1 otherwise
     */


    Edge.prototype.compareTo = function (edge) {
      return orientationIndex(edge.from.coordinates, edge.to.coordinates, this.to.coordinates);
    };

    return Edge;
  }();

  /**
   * Ring of edges which form a polygon.
   *
   * The ring may be either an outer shell or a hole.
   *
   * This class is inspired in GEOS's geos::operation::polygonize::EdgeRing
   */

  var EdgeRing$1 =
  /** @class */
  function () {
    function EdgeRing() {
      this.edges = [];
      this.polygon = undefined; //< Caches Polygon representation

      this.envelope = undefined; //< Caches Envelope representation
    }
    /**
     * Add an edge to the ring, inserting it in the last position.
     *
     * @memberof EdgeRing
     * @param {Edge} edge - Edge to be inserted
     */


    EdgeRing.prototype.push = function (edge) {
      this.edges.push(edge);
      this.polygon = this.envelope = undefined;
    };
    /**
     * Get Edge.
     *
     * @memberof EdgeRing
     * @param {number} i - Index
     * @returns {Edge} - Edge in the i position
     */


    EdgeRing.prototype.get = function (i) {
      return this.edges[i];
    };

    Object.defineProperty(EdgeRing.prototype, "length", {
      /**
       * Getter of length property.
       *
       * @memberof EdgeRing
       * @returns {number} - Length of the edge ring.
       */
      get: function get() {
        return this.edges.length;
      },
      enumerable: true,
      configurable: true
    });
    /**
     * Similar to Array.prototype.forEach for the list of Edges in the EdgeRing.
     *
     * @memberof EdgeRing
     * @param {Function} f - The same function to be passed to Array.prototype.forEach
     */

    EdgeRing.prototype.forEach = function (f) {
      this.edges.forEach(f);
    };
    /**
     * Similar to Array.prototype.map for the list of Edges in the EdgeRing.
     *
     * @memberof EdgeRing
     * @param {Function} f - The same function to be passed to Array.prototype.map
     * @returns {Array} - The mapped values in the function
     */


    EdgeRing.prototype.map = function (f) {
      return this.edges.map(f);
    };
    /**
     * Similar to Array.prototype.some for the list of Edges in the EdgeRing.
     *
     * @memberof EdgeRing
     * @param {Function} f - The same function to be passed to Array.prototype.some
     * @returns {boolean} - True if an Edge check the condition
     */


    EdgeRing.prototype.some = function (f) {
      return this.edges.some(f);
    };
    /**
     * Check if the ring is valid in geomtry terms.
     *
     * A ring must have either 0 or 4 or more points. The first and the last must be
     * equal (in 2D)
     * geos::geom::LinearRing::validateConstruction
     *
     * @memberof EdgeRing
     * @returns {boolean} - Validity of the EdgeRing
     */


    EdgeRing.prototype.isValid = function () {
      // TODO: stub
      return true;
    };
    /**
     * Tests whether this ring is a hole.
     *
     * A ring is a hole if it is oriented counter-clockwise.
     * Similar implementation of geos::algorithm::CGAlgorithms::isCCW
     *
     * @memberof EdgeRing
     * @returns {boolean} - true: if it is a hole
     */


    EdgeRing.prototype.isHole = function () {
      var _this = this; // XXX: Assuming Ring is valid
      // Find highest point


      var hiIndex = this.edges.reduce(function (high, edge, i) {
        if (edge.from.coordinates[1] > _this.edges[high].from.coordinates[1]) high = i;
        return high;
      }, 0),
          iPrev = (hiIndex === 0 ? this.length : hiIndex) - 1,
          iNext = (hiIndex + 1) % this.length,
          disc = orientationIndex(this.edges[iPrev].from.coordinates, this.edges[hiIndex].from.coordinates, this.edges[iNext].from.coordinates);
      if (disc === 0) return this.edges[iPrev].from.coordinates[0] > this.edges[iNext].from.coordinates[0];
      return disc > 0;
    };
    /**
     * Creates a MultiPoint representing the EdgeRing (discarts edges directions).
     *
     * @memberof EdgeRing
     * @returns {Feature<MultiPoint>} - Multipoint representation of the EdgeRing
     */


    EdgeRing.prototype.toMultiPoint = function () {
      return multiPoint(this.edges.map(function (edge) {
        return edge.from.coordinates;
      }));
    };
    /**
     * Creates a Polygon representing the EdgeRing.
     *
     * @memberof EdgeRing
     * @returns {Feature<Polygon>} - Polygon representation of the Edge Ring
     */


    EdgeRing.prototype.toPolygon = function () {
      if (this.polygon) return this.polygon;
      var coordinates = this.edges.map(function (edge) {
        return edge.from.coordinates;
      });
      coordinates.push(this.edges[0].from.coordinates);
      return this.polygon = polygon([coordinates]);
    };
    /**
     * Calculates the envelope of the EdgeRing.
     *
     * @memberof EdgeRing
     * @returns {Feature<Polygon>} - envelope
     */


    EdgeRing.prototype.getEnvelope = function () {
      if (this.envelope) return this.envelope;
      return this.envelope = envelope(this.toPolygon());
    };
    /**
     * `geos::operation::polygonize::EdgeRing::findEdgeRingContaining`
     *
     * @param {EdgeRing} testEdgeRing - EdgeRing to look in the list
     * @param {EdgeRing[]} shellList - List of EdgeRing in which to search
     *
     * @returns {EdgeRing} - EdgeRing which contains the testEdgeRing
     */


    EdgeRing.findEdgeRingContaining = function (testEdgeRing, shellList) {
      var testEnvelope = testEdgeRing.getEnvelope();
      var minEnvelope, minShell;
      shellList.forEach(function (shell) {
        var tryEnvelope = shell.getEnvelope();
        if (minShell) minEnvelope = minShell.getEnvelope(); // the hole envelope cannot equal the shell envelope

        if (envelopeIsEqual(tryEnvelope, testEnvelope)) return;

        if (envelopeContains(tryEnvelope, testEnvelope)) {
          var testEdgeRingCoordinates = testEdgeRing.map(function (edge) {
            return edge.from.coordinates;
          });
          var testPoint = void 0;

          var _loop_1 = function _loop_1(pt) {
            if (!shell.some(function (edge) {
              return coordinatesEqual(pt, edge.from.coordinates);
            })) {
              testPoint = pt;
            }
          };

          for (var _i = 0, testEdgeRingCoordinates_1 = testEdgeRingCoordinates; _i < testEdgeRingCoordinates_1.length; _i++) {
            var pt = testEdgeRingCoordinates_1[_i];

            _loop_1(pt);
          }

          if (testPoint && shell.inside(point(testPoint))) {
            if (!minShell || envelopeContains(minEnvelope, tryEnvelope)) minShell = shell;
          }
        }
      });
      return minShell;
    };
    /**
     * Checks if the point is inside the edgeRing
     *
     * @param {Feature<Point>} pt - Point to check if it is inside the edgeRing
     * @returns {boolean} - True if it is inside, False otherwise
     */


    EdgeRing.prototype.inside = function (pt) {
      return booleanPointInPolygon(pt, this.toPolygon());
    };

    return EdgeRing;
  }();

  /**
   * Validates the geoJson.
   *
   * @param {GeoJSON} geoJson - input geoJson.
   * @throws {Error} if geoJson is invalid.
   */

  function validateGeoJson(geoJson) {
    if (!geoJson) throw new Error("No geojson passed");
    if (geoJson.type !== "FeatureCollection" && geoJson.type !== "GeometryCollection" && geoJson.type !== "MultiLineString" && geoJson.type !== "LineString" && geoJson.type !== "Feature") throw new Error("Invalid input type '" + geoJson.type + "'. Geojson must be FeatureCollection, GeometryCollection, LineString, MultiLineString or Feature");
  }
  /**
   * Represents a planar graph of edges and nodes that can be used to compute a polygonization.
   *
   * Although, this class is inspired by GEOS's `geos::operation::polygonize::PolygonizeGraph`,
   * it isn't a rewrite. As regards algorithm, this class implements the same logic, but it
   * isn't a javascript transcription of the C++ source.
   *
   * This graph is directed (both directions are created)
   */


  var Graph$1 =
  /** @class */
  function () {
    function Graph() {
      this.edges = []; //< {Edge[]} dirEdges
      // The key is the `id` of the Node (ie: coordinates.join(','))

      this.nodes = {};
    }
    /**
     * Creates a graph from a GeoJSON.
     *
     * @param {FeatureCollection<LineString>} geoJson - it must comply with the restrictions detailed in the index
     * @returns {Graph} - The newly created graph
     * @throws {Error} if geoJson is invalid.
     */


    Graph.fromGeoJson = function (geoJson) {
      validateGeoJson(geoJson);
      var graph = new Graph();
      flattenEach$1(geoJson, function (feature) {
        featureOf(feature, "LineString", "Graph::fromGeoJson"); // When a LineString if formed by many segments, split them

        coordReduce$1(feature, function (prev, cur) {
          if (prev) {
            var start = graph.getNode(prev),
                end = graph.getNode(cur);
            graph.addEdge(start, end);
          }

          return cur;
        });
      });
      return graph;
    };
    /**
     * Creates or get a Node.
     *
     * @param {number[]} coordinates - Coordinates of the node
     * @returns {Node} - The created or stored node
     */


    Graph.prototype.getNode = function (coordinates) {
      var id = Node$3.buildId(coordinates);
      var node = this.nodes[id];
      if (!node) node = this.nodes[id] = new Node$3(coordinates);
      return node;
    };
    /**
     * Adds an Edge and its symetricall.
     *
     * Edges are added symetrically, i.e.: we also add its symetric
     *
     * @param {Node} from - Node which starts the Edge
     * @param {Node} to - Node which ends the Edge
     */


    Graph.prototype.addEdge = function (from, to) {
      var edge = new Edge$1(from, to),
          symetricEdge = edge.getSymetric();
      this.edges.push(edge);
      this.edges.push(symetricEdge);
    };
    /**
     * Removes Dangle Nodes (nodes with grade 1).
     */


    Graph.prototype.deleteDangles = function () {
      var _this = this;

      Object.keys(this.nodes).map(function (id) {
        return _this.nodes[id];
      }).forEach(function (node) {
        return _this._removeIfDangle(node);
      });
    };
    /**
     * Check if node is dangle, if so, remove it.
     *
     * It calls itself recursively, removing a dangling node might cause another dangling node
     *
     * @param {Node} node - Node to check if it's a dangle
     */


    Graph.prototype._removeIfDangle = function (node) {
      var _this = this; // As edges are directed and symetrical, we count only innerEdges


      if (node.innerEdges.length <= 1) {
        var outerNodes = node.getOuterEdges().map(function (e) {
          return e.to;
        });
        this.removeNode(node);
        outerNodes.forEach(function (n) {
          return _this._removeIfDangle(n);
        });
      }
    };
    /**
     * Delete cut-edges (bridge edges).
     *
     * The graph will be traversed, all the edges will be labeled according the ring
     * in which they are. (The label is a number incremented by 1). Edges with the same
     * label are cut-edges.
     */


    Graph.prototype.deleteCutEdges = function () {
      var _this = this;

      this._computeNextCWEdges();

      this._findLabeledEdgeRings(); // Cut-edges (bridges) are edges where both edges have the same label


      this.edges.forEach(function (edge) {
        if (edge.label === edge.symetric.label) {
          _this.removeEdge(edge.symetric);

          _this.removeEdge(edge);
        }
      });
    };
    /**
     * Set the `next` property of each Edge.
     *
     * The graph will be transversed in a CW form, so, we set the next of the symetrical edge as the previous one.
     * OuterEdges are sorted CCW.
     *
     * @param {Node} [node] - If no node is passed, the function calls itself for every node in the Graph
     */


    Graph.prototype._computeNextCWEdges = function (node) {
      var _this = this;

      if (typeof node === "undefined") {
        Object.keys(this.nodes).forEach(function (id) {
          return _this._computeNextCWEdges(_this.nodes[id]);
        });
      } else {
        node.getOuterEdges().forEach(function (edge, i) {
          node.getOuterEdge((i === 0 ? node.getOuterEdges().length : i) - 1).symetric.next = edge;
        });
      }
    };
    /**
     * Computes the next edge pointers going CCW around the given node, for the given edgering label.
     *
     * This algorithm has the effect of converting maximal edgerings into minimal edgerings
     *
     * XXX: method literally transcribed from `geos::operation::polygonize::PolygonizeGraph::computeNextCCWEdges`,
     * could be written in a more javascript way.
     *
     * @param {Node} node - Node
     * @param {number} label - Ring's label
     */


    Graph.prototype._computeNextCCWEdges = function (node, label) {
      var edges = node.getOuterEdges();
      var firstOutDE, prevInDE;

      for (var i = edges.length - 1; i >= 0; --i) {
        var de = edges[i],
            sym = de.symetric,
            outDE = void 0,
            inDE = void 0;
        if (de.label === label) outDE = de;
        if (sym.label === label) inDE = sym;
        if (!outDE || !inDE) // This edge is not in edgering
          continue;
        if (inDE) prevInDE = inDE;

        if (outDE) {
          if (prevInDE) {
            prevInDE.next = outDE;
            prevInDE = undefined;
          }

          if (!firstOutDE) firstOutDE = outDE;
        }
      }

      if (prevInDE) prevInDE.next = firstOutDE;
    };
    /**
     * Finds rings and labels edges according to which rings are.
     *
     * The label is a number which is increased for each ring.
     *
     * @returns {Edge[]} edges that start rings
     */


    Graph.prototype._findLabeledEdgeRings = function () {
      var edgeRingStarts = [];
      var label = 0;
      this.edges.forEach(function (edge) {
        if (edge.label >= 0) return;
        edgeRingStarts.push(edge);
        var e = edge;

        do {
          e.label = label;
          e = e.next;
        } while (!edge.isEqual(e));

        label++;
      });
      return edgeRingStarts;
    };
    /**
     * Computes the EdgeRings formed by the edges in this graph.
     *
     * @returns {EdgeRing[]} - A list of all the EdgeRings in the graph.
     */


    Graph.prototype.getEdgeRings = function () {
      var _this = this;

      this._computeNextCWEdges(); // Clear labels


      this.edges.forEach(function (edge) {
        edge.label = undefined;
      });

      this._findLabeledEdgeRings().forEach(function (edge) {
        // convertMaximalToMinimalEdgeRings
        _this._findIntersectionNodes(edge).forEach(function (node) {
          _this._computeNextCCWEdges(node, edge.label);
        });
      });

      var edgeRingList = []; // find all edgerings

      this.edges.forEach(function (edge) {
        if (edge.ring) return;
        edgeRingList.push(_this._findEdgeRing(edge));
      });
      return edgeRingList;
    };
    /**
     * Find all nodes in a Maxima EdgeRing which are self-intersection nodes.
     *
     * @param {Node} startEdge - Start Edge of the Ring
     * @returns {Node[]} - intersection nodes
     */


    Graph.prototype._findIntersectionNodes = function (startEdge) {
      var intersectionNodes = [];
      var edge = startEdge;

      var _loop_1 = function _loop_1() {
        // getDegree
        var degree = 0;
        edge.from.getOuterEdges().forEach(function (e) {
          if (e.label === startEdge.label) ++degree;
        });
        if (degree > 1) intersectionNodes.push(edge.from);
        edge = edge.next;
      };

      do {
        _loop_1();
      } while (!startEdge.isEqual(edge));

      return intersectionNodes;
    };
    /**
     * Get the edge-ring which starts from the provided Edge.
     *
     * @param {Edge} startEdge - starting edge of the edge ring
     * @returns {EdgeRing} - EdgeRing which start Edge is the provided one.
     */


    Graph.prototype._findEdgeRing = function (startEdge) {
      var edge = startEdge;
      var edgeRing = new EdgeRing$1();

      do {
        edgeRing.push(edge);
        edge.ring = edgeRing;
        edge = edge.next;
      } while (!startEdge.isEqual(edge));

      return edgeRing;
    };
    /**
     * Removes a node from the Graph.
     *
     * It also removes edges asociated to that node
     * @param {Node} node - Node to be removed
     */


    Graph.prototype.removeNode = function (node) {
      var _this = this;

      node.getOuterEdges().forEach(function (edge) {
        return _this.removeEdge(edge);
      });
      node.innerEdges.forEach(function (edge) {
        return _this.removeEdge(edge);
      });
      delete this.nodes[node.id];
    };
    /**
     * Remove edge from the graph and deletes the edge.
     *
     * @param {Edge} edge - Edge to be removed
     */


    Graph.prototype.removeEdge = function (edge) {
      this.edges = this.edges.filter(function (e) {
        return !e.isEqual(edge);
      });
      edge.deleteEdge();
    };

    return Graph;
  }();

  /**
   * Polygonizes {@link LineString|(Multi)LineString(s)} into {@link Polygons}.
   *
   * Implementation of GEOSPolygonize function (`geos::operation::polygonize::Polygonizer`).
   *
   * Polygonizes a set of lines that represents edges in a planar graph. Edges must be correctly
   * noded, i.e., they must only meet at their endpoints.
   *
   * The implementation correctly handles:
   *
   * - Dangles: edges which have one or both ends which are not incident on another edge endpoint.
   * - Cut Edges (bridges): edges that are connected at both ends but which do not form part of a polygon.
   *
   * @name polygonize
   * @param {FeatureCollection|Geometry|Feature<LineString|MultiLineString>} geoJson Lines in order to polygonize
   * @returns {FeatureCollection<Polygon>} Polygons created
   * @throws {Error} if geoJson is invalid.
   */

  function polygonize(geoJson) {
    var graph = Graph$1.fromGeoJson(geoJson); // 1. Remove dangle node

    graph.deleteDangles(); // 2. Remove cut-edges (bridge edges)

    graph.deleteCutEdges(); // 3. Get all holes and shells

    var holes = [],
        shells = [];
    graph.getEdgeRings().filter(function (edgeRing) {
      return edgeRing.isValid();
    }).forEach(function (edgeRing) {
      if (edgeRing.isHole()) holes.push(edgeRing);else shells.push(edgeRing);
    }); // 4. Assign Holes to Shells

    holes.forEach(function (hole) {
      if (EdgeRing$1.findEdgeRingContaining(hole, shells)) shells.push(hole);
    }); // 5. EdgeRings to Polygons

    return featureCollection$1(shells.map(function (shell) {
      return shell.toPolygon();
    }));
  }

  /**
   * Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.
   *
   * @name booleanDisjoint
   * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry
   * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry
   * @returns {boolean} true/false
   * @example
   * var point = turf.point([2, 2]);
   * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);
   *
   * turf.booleanDisjoint(line, point);
   * //=true
   */

  function booleanDisjoint(feature1, feature2) {
    var bool = true;
    flattenEach$1(feature1, function (flatten1) {
      flattenEach$1(feature2, function (flatten2) {
        if (bool === false) {
          return false;
        }

        bool = disjoint(flatten1.geometry, flatten2.geometry);
      });
    });
    return bool;
  }
  /**
   * Disjoint operation for simple Geometries (Point/LineString/Polygon)
   *
   * @private
   * @param {Geometry<any>} geom1 GeoJSON Geometry
   * @param {Geometry<any>} geom2 GeoJSON Geometry
   * @returns {boolean} true/false
   */


  function disjoint(geom1, geom2) {
    switch (geom1.type) {
      case "Point":
        switch (geom2.type) {
          case "Point":
            return !compareCoords$1(geom1.coordinates, geom2.coordinates);

          case "LineString":
            return !isPointOnLine(geom2, geom1);

          case "Polygon":
            return !booleanPointInPolygon(geom1, geom2);
        }
        /* istanbul ignore next */


        break;

      case "LineString":
        switch (geom2.type) {
          case "Point":
            return !isPointOnLine(geom1, geom2);

          case "LineString":
            return !isLineOnLine$1(geom1, geom2);

          case "Polygon":
            return !isLineInPoly$1(geom2, geom1);
        }
        /* istanbul ignore next */


        break;

      case "Polygon":
        switch (geom2.type) {
          case "Point":
            return !booleanPointInPolygon(geom2, geom1);

          case "LineString":
            return !isLineInPoly$1(geom1, geom2);

          case "Polygon":
            return !isPolyInPoly$1(geom2, geom1);
        }

    }

    return false;
  } // http://stackoverflow.com/a/11908158/1979085


  function isPointOnLine(lineString, pt) {
    for (var i = 0; i < lineString.coordinates.length - 1; i++) {
      if (isPointOnLineSegment$1(lineString.coordinates[i], lineString.coordinates[i + 1], pt.coordinates)) {
        return true;
      }
    }

    return false;
  }

  function isLineOnLine$1(lineString1, lineString2) {
    var doLinesIntersect = lineIntersect(lineString1, lineString2);

    if (doLinesIntersect.features.length > 0) {
      return true;
    }

    return false;
  }

  function isLineInPoly$1(polygon, lineString) {
    for (var _i = 0, _a = lineString.coordinates; _i < _a.length; _i++) {
      var coord = _a[_i];

      if (booleanPointInPolygon(coord, polygon)) {
        return true;
      }
    }

    var doLinesIntersect = lineIntersect(lineString, polygonToLine(polygon));

    if (doLinesIntersect.features.length > 0) {
      return true;
    }

    return false;
  }
  /**
   * Is Polygon (geom1) in Polygon (geom2)
   * Only takes into account outer rings
   * See http://stackoverflow.com/a/4833823/1979085
   *
   * @private
   * @param {Geometry|Feature<Polygon>} feature1 Polygon1
   * @param {Geometry|Feature<Polygon>} feature2 Polygon2
   * @returns {boolean} true/false
   */


  function isPolyInPoly$1(feature1, feature2) {
    for (var _i = 0, _a = feature1.coordinates[0]; _i < _a.length; _i++) {
      var coord1 = _a[_i];

      if (booleanPointInPolygon(coord1, feature2)) {
        return true;
      }
    }

    for (var _b = 0, _c = feature2.coordinates[0]; _b < _c.length; _b++) {
      var coord2 = _c[_b];

      if (booleanPointInPolygon(coord2, feature1)) {
        return true;
      }
    }

    var doLinesIntersect = lineIntersect(polygonToLine(feature1), polygonToLine(feature2));

    if (doLinesIntersect.features.length > 0) {
      return true;
    }

    return false;
  }

  function isPointOnLineSegment$1(lineSegmentStart, lineSegmentEnd, pt) {
    var dxc = pt[0] - lineSegmentStart[0];
    var dyc = pt[1] - lineSegmentStart[1];
    var dxl = lineSegmentEnd[0] - lineSegmentStart[0];
    var dyl = lineSegmentEnd[1] - lineSegmentStart[1];
    var cross = dxc * dyl - dyc * dxl;

    if (cross !== 0) {
      return false;
    }

    if (Math.abs(dxl) >= Math.abs(dyl)) {
      if (dxl > 0) {
        return lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0];
      } else {
        return lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];
      }
    } else if (dyl > 0) {
      return lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1];
    } else {
      return lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];
    }
  }
  /**
   * compareCoords
   *
   * @private
   * @param {Position} pair1 point [x,y]
   * @param {Position} pair2 point [x,y]
   * @returns {boolean} true/false if coord pairs match
   */


  function compareCoords$1(pair1, pair2) {
    return pair1[0] === pair2[0] && pair1[1] === pair2[1];
  }

  /**
   * Boolean-contains returns True if the second geometry is completely contained by the first geometry.
   * The interiors of both geometries must intersect and, the interior and boundary of the secondary (geometry b)
   * must not intersect the exterior of the primary (geometry a).
   * Boolean-contains returns the exact opposite result of the `@turf/boolean-within`.
   *
   * @name booleanContains
   * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry
   * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry
   * @returns {boolean} true/false
   * @example
   * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);
   * var point = turf.point([1, 2]);
   *
   * turf.booleanContains(line, point);
   * //=true
   */

  function booleanContains(feature1, feature2) {
    var geom1 = getGeom(feature1);
    var geom2 = getGeom(feature2);
    var type1 = geom1.type;
    var type2 = geom2.type;
    var coords1 = geom1.coordinates;
    var coords2 = geom2.coordinates;

    switch (type1) {
      case "Point":
        switch (type2) {
          case "Point":
            return compareCoords(coords1, coords2);

          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }

      case "MultiPoint":
        switch (type2) {
          case "Point":
            return isPointInMultiPoint(geom1, geom2);

          case "MultiPoint":
            return isMultiPointInMultiPoint(geom1, geom2);

          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }

      case "LineString":
        switch (type2) {
          case "Point":
            return booleanPointOnLine(geom2, geom1, {
              ignoreEndVertices: true
            });

          case "LineString":
            return isLineOnLine(geom1, geom2);

          case "MultiPoint":
            return isMultiPointOnLine(geom1, geom2);

          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }

      case "Polygon":
        switch (type2) {
          case "Point":
            return booleanPointInPolygon(geom2, geom1, {
              ignoreBoundary: true
            });

          case "LineString":
            return isLineInPoly(geom1, geom2);

          case "Polygon":
            return isPolyInPoly(geom1, geom2);

          case "MultiPoint":
            return isMultiPointInPoly(geom1, geom2);

          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }

      default:
        throw new Error("feature1 " + type1 + " geometry not supported");
    }
  }
  function isPointInMultiPoint(multiPoint, pt) {
    var i;
    var output = false;

    for (i = 0; i < multiPoint.coordinates.length; i++) {
      if (compareCoords(multiPoint.coordinates[i], pt.coordinates)) {
        output = true;
        break;
      }
    }

    return output;
  }
  function isMultiPointInMultiPoint(multiPoint1, multiPoint2) {
    for (var _i = 0, _a = multiPoint2.coordinates; _i < _a.length; _i++) {
      var coord2 = _a[_i];
      var matchFound = false;

      for (var _b = 0, _c = multiPoint1.coordinates; _b < _c.length; _b++) {
        var coord1 = _c[_b];

        if (compareCoords(coord2, coord1)) {
          matchFound = true;
          break;
        }
      }

      if (!matchFound) {
        return false;
      }
    }

    return true;
  }
  function isMultiPointOnLine(lineString, multiPoint) {
    var haveFoundInteriorPoint = false;

    for (var _i = 0, _a = multiPoint.coordinates; _i < _a.length; _i++) {
      var coord = _a[_i];

      if (booleanPointOnLine(coord, lineString, {
        ignoreEndVertices: true
      })) {
        haveFoundInteriorPoint = true;
      }

      if (!booleanPointOnLine(coord, lineString)) {
        return false;
      }
    }

    if (haveFoundInteriorPoint) {
      return true;
    }

    return false;
  }
  function isMultiPointInPoly(polygon, multiPoint) {
    for (var _i = 0, _a = multiPoint.coordinates; _i < _a.length; _i++) {
      var coord = _a[_i];

      if (!booleanPointInPolygon(coord, polygon, {
        ignoreBoundary: true
      })) {
        return false;
      }
    }

    return true;
  }
  function isLineOnLine(lineString1, lineString2) {
    var haveFoundInteriorPoint = false;

    for (var _i = 0, _a = lineString2.coordinates; _i < _a.length; _i++) {
      var coords = _a[_i];

      if (booleanPointOnLine({
        type: "Point",
        coordinates: coords
      }, lineString1, {
        ignoreEndVertices: true
      })) {
        haveFoundInteriorPoint = true;
      }

      if (!booleanPointOnLine({
        type: "Point",
        coordinates: coords
      }, lineString1, {
        ignoreEndVertices: false
      })) {
        return false;
      }
    }

    return haveFoundInteriorPoint;
  }
  function isLineInPoly(polygon, linestring) {
    var output = false;
    var i = 0;
    var polyBbox = bbox$2(polygon);
    var lineBbox = bbox$2(linestring);

    if (!doBBoxOverlap(polyBbox, lineBbox)) {
      return false;
    }

    for (i; i < linestring.coordinates.length - 1; i++) {
      var midPoint = getMidpoint(linestring.coordinates[i], linestring.coordinates[i + 1]);

      if (booleanPointInPolygon({
        type: "Point",
        coordinates: midPoint
      }, polygon, {
        ignoreBoundary: true
      })) {
        output = true;
        break;
      }
    }

    return output;
  }
  /**
   * Is Polygon2 in Polygon1
   * Only takes into account outer rings
   *
   * @private
   * @param {Geometry|Feature<Polygon>} feature1 Polygon1
   * @param {Geometry|Feature<Polygon>} feature2 Polygon2
   * @returns {boolean} true/false
   */

  function isPolyInPoly(feature1, feature2) {
    // Handle Nulls
    if (feature1.type === "Feature" && feature1.geometry === null) {
      return false;
    }

    if (feature2.type === "Feature" && feature2.geometry === null) {
      return false;
    }

    var poly1Bbox = bbox$2(feature1);
    var poly2Bbox = bbox$2(feature2);

    if (!doBBoxOverlap(poly1Bbox, poly2Bbox)) {
      return false;
    }

    var coords = getGeom(feature2).coordinates;

    for (var _i = 0, coords_1 = coords; _i < coords_1.length; _i++) {
      var ring = coords_1[_i];

      for (var _a = 0, ring_1 = ring; _a < ring_1.length; _a++) {
        var coord = ring_1[_a];

        if (!booleanPointInPolygon(coord, feature1)) {
          return false;
        }
      }
    }

    return true;
  }
  function doBBoxOverlap(bbox1, bbox2) {
    if (bbox1[0] > bbox2[0]) {
      return false;
    }

    if (bbox1[2] < bbox2[2]) {
      return false;
    }

    if (bbox1[1] > bbox2[1]) {
      return false;
    }

    if (bbox1[3] < bbox2[3]) {
      return false;
    }

    return true;
  }
  /**
   * compareCoords
   *
   * @private
   * @param {Position} pair1 point [x,y]
   * @param {Position} pair2 point [x,y]
   * @returns {boolean} true/false if coord pairs match
   */

  function compareCoords(pair1, pair2) {
    return pair1[0] === pair2[0] && pair1[1] === pair2[1];
  }
  function getMidpoint(pair1, pair2) {
    return [(pair1[0] + pair2[0]) / 2, (pair1[1] + pair2[1]) / 2];
  }

  /**
   * Boolean-Crosses returns True if the intersection results in a geometry whose dimension is one less than
   * the maximum dimension of the two source geometries and the intersection set is interior to
   * both source geometries.
   *
   * Boolean-Crosses returns t (TRUE) for only multipoint/polygon, multipoint/linestring, linestring/linestring, linestring/polygon, and linestring/multipolygon comparisons.
   *
   * @name booleanCrosses
   * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry
   * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry
   * @returns {boolean} true/false
   * @example
   * var line1 = turf.lineString([[-2, 2], [4, 2]]);
   * var line2 = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);
   *
   * var cross = turf.booleanCrosses(line1, line2);
   * //=true
   */

  function booleanCrosses(feature1, feature2) {
    var geom1 = getGeom(feature1);
    var geom2 = getGeom(feature2);
    var type1 = geom1.type;
    var type2 = geom2.type;

    switch (type1) {
      case "MultiPoint":
        switch (type2) {
          case "LineString":
            return doMultiPointAndLineStringCross(geom1, geom2);

          case "Polygon":
            return doesMultiPointCrossPoly(geom1, geom2);

          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }

      case "LineString":
        switch (type2) {
          case "MultiPoint":
            // An inverse operation
            return doMultiPointAndLineStringCross(geom2, geom1);

          case "LineString":
            return doLineStringsCross(geom1, geom2);

          case "Polygon":
            return doLineStringAndPolygonCross(geom1, geom2);

          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }

      case "Polygon":
        switch (type2) {
          case "MultiPoint":
            // An inverse operation
            return doesMultiPointCrossPoly(geom2, geom1);

          case "LineString":
            // An inverse operation
            return doLineStringAndPolygonCross(geom2, geom1);

          default:
            throw new Error("feature2 " + type2 + " geometry not supported");
        }

      default:
        throw new Error("feature1 " + type1 + " geometry not supported");
    }
  }

  function doMultiPointAndLineStringCross(multiPoint, lineString) {
    var foundIntPoint = false;
    var foundExtPoint = false;
    var pointLength = multiPoint.coordinates.length;
    var i = 0;

    while (i < pointLength && !foundIntPoint && !foundExtPoint) {
      for (var i2 = 0; i2 < lineString.coordinates.length - 1; i2++) {
        var incEndVertices = true;

        if (i2 === 0 || i2 === lineString.coordinates.length - 2) {
          incEndVertices = false;
        }

        if (isPointOnLineSegment(lineString.coordinates[i2], lineString.coordinates[i2 + 1], multiPoint.coordinates[i], incEndVertices)) {
          foundIntPoint = true;
        } else {
          foundExtPoint = true;
        }
      }

      i++;
    }

    return foundIntPoint && foundExtPoint;
  }

  function doLineStringsCross(lineString1, lineString2) {
    var doLinesIntersect = lineIntersect(lineString1, lineString2);

    if (doLinesIntersect.features.length > 0) {
      for (var i = 0; i < lineString1.coordinates.length - 1; i++) {
        for (var i2 = 0; i2 < lineString2.coordinates.length - 1; i2++) {
          var incEndVertices = true;

          if (i2 === 0 || i2 === lineString2.coordinates.length - 2) {
            incEndVertices = false;
          }

          if (isPointOnLineSegment(lineString1.coordinates[i], lineString1.coordinates[i + 1], lineString2.coordinates[i2], incEndVertices)) {
            return true;
          }
        }
      }
    }

    return false;
  }

  function doLineStringAndPolygonCross(lineString, polygon) {
    var line = polygonToLine$1(polygon);
    var doLinesIntersect = lineIntersect(lineString, line);

    if (doLinesIntersect.features.length > 0) {
      return true;
    }

    return false;
  }

  function doesMultiPointCrossPoly(multiPoint, polygon) {
    var foundIntPoint = false;
    var foundExtPoint = false;
    var pointLength = multiPoint.coordinates.length;

    for (var i = 0; i < pointLength && (!foundIntPoint || !foundExtPoint); i++) {
      if (booleanPointInPolygon(point(multiPoint.coordinates[i]), polygon)) {
        foundIntPoint = true;
      } else {
        foundExtPoint = true;
      }
    }

    return foundExtPoint && foundIntPoint;
  }
  /**
   * Is a point on a line segment
   * Only takes into account outer rings
   * See http://stackoverflow.com/a/4833823/1979085
   *
   * @private
   * @param {number[]} lineSegmentStart coord pair of start of line
   * @param {number[]} lineSegmentEnd coord pair of end of line
   * @param {number[]} pt coord pair of point to check
   * @param {boolean} incEnd whether the point is allowed to fall on the line ends
   * @returns {boolean} true/false
   */


  function isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, pt, incEnd) {
    var dxc = pt[0] - lineSegmentStart[0];
    var dyc = pt[1] - lineSegmentStart[1];
    var dxl = lineSegmentEnd[0] - lineSegmentStart[0];
    var dyl = lineSegmentEnd[1] - lineSegmentStart[1];
    var cross = dxc * dyl - dyc * dxl;

    if (cross !== 0) {
      return false;
    }

    if (incEnd) {
      if (Math.abs(dxl) >= Math.abs(dyl)) {
        return dxl > 0 ? lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0] : lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];
      }

      return dyl > 0 ? lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1] : lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];
    } else {
      if (Math.abs(dxl) >= Math.abs(dyl)) {
        return dxl > 0 ? lineSegmentStart[0] < pt[0] && pt[0] < lineSegmentEnd[0] : lineSegmentEnd[0] < pt[0] && pt[0] < lineSegmentStart[0];
      }

      return dyl > 0 ? lineSegmentStart[1] < pt[1] && pt[1] < lineSegmentEnd[1] : lineSegmentEnd[1] < pt[1] && pt[1] < lineSegmentStart[1];
    }
  }

  var Equality = function Equality(opt) {
    this.precision = opt && opt.precision ? opt.precision : 17;
    this.direction = opt && opt.direction ? opt.direction : false;
    this.pseudoNode = opt && opt.pseudoNode ? opt.pseudoNode : false;
    this.objectComparator = opt && opt.objectComparator ? opt.objectComparator : objectComparator;
  };

  Equality.prototype.compare = function (g1, g2) {
    if (g1.type !== g2.type || !sameLength(g1, g2)) return false;

    switch (g1.type) {
      case 'Point':
        return this.compareCoord(g1.coordinates, g2.coordinates);

      case 'LineString':
        return this.compareLine(g1.coordinates, g2.coordinates, 0, false);

      case 'Polygon':
        return this.comparePolygon(g1, g2);

      case 'Feature':
        return this.compareFeature(g1, g2);

      default:
        if (g1.type.indexOf('Multi') === 0) {
          var context = this;
          var g1s = explode(g1);
          var g2s = explode(g2);
          return g1s.every(function (g1part) {
            return this.some(function (g2part) {
              return context.compare(g1part, g2part);
            });
          }, g2s);
        }

    }

    return false;
  };

  function explode(g) {
    return g.coordinates.map(function (part) {
      return {
        type: g.type.replace('Multi', ''),
        coordinates: part
      };
    });
  } //compare length of coordinates/array


  function sameLength(g1, g2) {
    return g1.hasOwnProperty('coordinates') ? g1.coordinates.length === g2.coordinates.length : g1.length === g2.length;
  } // compare the two coordinates [x,y]


  Equality.prototype.compareCoord = function (c1, c2) {
    if (c1.length !== c2.length) {
      return false;
    }

    for (var i = 0; i < c1.length; i++) {
      if (c1[i].toFixed(this.precision) !== c2[i].toFixed(this.precision)) {
        return false;
      }
    }

    return true;
  };

  Equality.prototype.compareLine = function (path1, path2, ind, isPoly) {
    if (!sameLength(path1, path2)) return false;
    var p1 = this.pseudoNode ? path1 : this.removePseudo(path1);
    var p2 = this.pseudoNode ? path2 : this.removePseudo(path2);

    if (isPoly && !this.compareCoord(p1[0], p2[0])) {
      // fix start index of both to same point
      p2 = this.fixStartIndex(p2, p1);
      if (!p2) return;
    } // for linestring ind =0 and for polygon ind =1


    var sameDirection = this.compareCoord(p1[ind], p2[ind]);

    if (this.direction || sameDirection) {
      return this.comparePath(p1, p2);
    } else {
      if (this.compareCoord(p1[ind], p2[p2.length - (1 + ind)])) {
        return this.comparePath(p1.slice().reverse(), p2);
      }

      return false;
    }
  };

  Equality.prototype.fixStartIndex = function (sourcePath, targetPath) {
    //make sourcePath first point same as of targetPath
    var correctPath,
        ind = -1;

    for (var i = 0; i < sourcePath.length; i++) {
      if (this.compareCoord(sourcePath[i], targetPath[0])) {
        ind = i;
        break;
      }
    }

    if (ind >= 0) {
      correctPath = [].concat(sourcePath.slice(ind, sourcePath.length), sourcePath.slice(1, ind + 1));
    }

    return correctPath;
  };

  Equality.prototype.comparePath = function (p1, p2) {
    var cont = this;
    return p1.every(function (c, i) {
      return cont.compareCoord(c, this[i]);
    }, p2);
  };

  Equality.prototype.comparePolygon = function (g1, g2) {
    if (this.compareLine(g1.coordinates[0], g2.coordinates[0], 1, true)) {
      var holes1 = g1.coordinates.slice(1, g1.coordinates.length);
      var holes2 = g2.coordinates.slice(1, g2.coordinates.length);
      var cont = this;
      return holes1.every(function (h1) {
        return this.some(function (h2) {
          return cont.compareLine(h1, h2, 1, true);
        });
      }, holes2);
    } else {
      return false;
    }
  };

  Equality.prototype.compareFeature = function (g1, g2) {
    if (g1.id !== g2.id || !this.objectComparator(g1.properties, g2.properties) || !this.compareBBox(g1, g2)) {
      return false;
    }

    return this.compare(g1.geometry, g2.geometry);
  };

  Equality.prototype.compareBBox = function (g1, g2) {
    if (!g1.bbox && !g2.bbox || g1.bbox && g2.bbox && this.compareCoord(g1.bbox, g2.bbox)) {
      return true;
    }

    return false;
  };

  Equality.prototype.removePseudo = function (path) {
    //TODO to be implement
    return path;
  };

  function objectComparator(obj1, obj2) {
    return deepEqual_1(obj1, obj2, {
      strict: true
    });
  }

  var geojsonEquality = Equality;

  /**
   * Compares two geometries of the same dimension and returns true if their intersection set results in a geometry
   * different from both but of the same dimension. It applies to Polygon/Polygon, LineString/LineString,
   * Multipoint/Multipoint, MultiLineString/MultiLineString and MultiPolygon/MultiPolygon.
   *
   * In other words, it returns true if the two geometries overlap, provided that neither completely contains the other.
   *
   * @name booleanOverlap
   * @param  {Geometry|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} feature1 input
   * @param  {Geometry|Feature<LineString|MultiLineString|Polygon|MultiPolygon>} feature2 input
   * @returns {boolean} true/false
   * @example
   * var poly1 = turf.polygon([[[0,0],[0,5],[5,5],[5,0],[0,0]]]);
   * var poly2 = turf.polygon([[[1,1],[1,6],[6,6],[6,1],[1,1]]]);
   * var poly3 = turf.polygon([[[10,10],[10,15],[15,15],[15,10],[10,10]]]);
   *
   * turf.booleanOverlap(poly1, poly2)
   * //=true
   * turf.booleanOverlap(poly2, poly3)
   * //=false
   */

  function booleanOverlap(feature1, feature2) {
    var geom1 = getGeom(feature1);
    var geom2 = getGeom(feature2);
    var type1 = geom1.type;
    var type2 = geom2.type;

    if (type1 === "MultiPoint" && type2 !== "MultiPoint" || (type1 === "LineString" || type1 === "MultiLineString") && type2 !== "LineString" && type2 !== "MultiLineString" || (type1 === "Polygon" || type1 === "MultiPolygon") && type2 !== "Polygon" && type2 !== "MultiPolygon") {
      throw new Error("features must be of the same type");
    }

    if (type1 === "Point") throw new Error("Point geometry not supported"); // features must be not equal

    var equality = new geojsonEquality({
      precision: 6
    });
    if (equality.compare(feature1, feature2)) return false;
    var overlap = 0;

    switch (type1) {
      case "MultiPoint":
        for (var i = 0; i < geom1.coordinates.length; i++) {
          for (var j = 0; j < geom2.coordinates.length; j++) {
            var coord1 = geom1.coordinates[i];
            var coord2 = geom2.coordinates[j];

            if (coord1[0] === coord2[0] && coord1[1] === coord2[1]) {
              return true;
            }
          }
        }

        return false;

      case "LineString":
      case "MultiLineString":
        segmentEach$1(feature1, function (segment1) {
          segmentEach$1(feature2, function (segment2) {
            if (lineOverlap(segment1, segment2).features.length) overlap++;
          });
        });
        break;

      case "Polygon":
      case "MultiPolygon":
        segmentEach$1(feature1, function (segment1) {
          segmentEach$1(feature2, function (segment2) {
            if (lineIntersect(segment1, segment2).features.length) overlap++;
          });
        });
        break;
    }

    return overlap > 0;
  }

  /**
   * Determine whether two geometries of the same type have identical X,Y coordinate values.
   * See http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm
   *
   * @name booleanEqual
   * @param {Geometry|Feature} feature1 GeoJSON input
   * @param {Geometry|Feature} feature2 GeoJSON input
   * @returns {boolean} true if the objects are equal, false otherwise
   * @example
   * var pt1 = turf.point([0, 0]);
   * var pt2 = turf.point([0, 0]);
   * var pt3 = turf.point([1, 1]);
   *
   * turf.booleanEqual(pt1, pt2);
   * //= true
   * turf.booleanEqual(pt2, pt3);
   * //= false
   */

  function booleanEqual(feature1, feature2) {
    var type1 = getGeom(feature1).type;
    var type2 = getGeom(feature2).type;
    if (type1 !== type2) return false;
    var equality = new geojsonEquality({
      precision: 6
    });
    return equality.compare(cleanCoords(feature1), cleanCoords(feature2));
  }

  /**
   * Boolean-intersects returns (TRUE) two geometries intersect.
   *
   * @name booleanIntersects
   * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry
   * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry
   * @returns {boolean} true/false
   * @example
   * var point = turf.point([2, 2]);
   * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);
   *
   * turf.booleanIntersects(line, point);
   * //=true
   */

  function booleanIntersects(feature1, feature2) {
    var bool = false;
    flattenEach$1(feature1, function (flatten1) {
      flattenEach$1(feature2, function (flatten2) {
        if (bool === true) {
          return true;
        }

        bool = !booleanDisjoint(flatten1.geometry, flatten2.geometry);
      });
    });
    return bool;
  }

  var DBSCAN_1 = createCommonjsModule(function (module) {
    /**
     * DBSCAN class construcotr
     * @constructor
     *
     * @param {Array} dataset
     * @param {number} epsilon
     * @param {number} minPts
     * @param {function} distanceFunction
     * @returns {DBSCAN}
     */
    function DBSCAN(dataset, epsilon, minPts, distanceFunction) {
      /** @type {Array} */
      this.dataset = [];
      /** @type {number} */

      this.epsilon = 1;
      /** @type {number} */

      this.minPts = 2;
      /** @type {function} */

      this.distance = this._euclideanDistance;
      /** @type {Array} */

      this.clusters = [];
      /** @type {Array} */

      this.noise = []; // temporary variables used during computation

      /** @type {Array} */

      this._visited = [];
      /** @type {Array} */

      this._assigned = [];
      /** @type {number} */

      this._datasetLength = 0;

      this._init(dataset, epsilon, minPts, distanceFunction);
    }
    /******************************************************************************/
    // public functions

    /**
     * Start clustering
     *
     * @param {Array} dataset
     * @param {number} epsilon
     * @param {number} minPts
     * @param {function} distanceFunction
     * @returns {undefined}
     * @access public
     */

    DBSCAN.prototype.run = function (dataset, epsilon, minPts, distanceFunction) {
      this._init(dataset, epsilon, minPts, distanceFunction);

      for (var pointId = 0; pointId < this._datasetLength; pointId++) {
        // if point is not visited, check if it forms a cluster
        if (this._visited[pointId] !== 1) {
          this._visited[pointId] = 1; // if closest neighborhood is too small to form a cluster, mark as noise

          var neighbors = this._regionQuery(pointId);

          if (neighbors.length < this.minPts) {
            this.noise.push(pointId);
          } else {
            // create new cluster and add point
            var clusterId = this.clusters.length;
            this.clusters.push([]);

            this._addToCluster(pointId, clusterId);

            this._expandCluster(clusterId, neighbors);
          }
        }
      }

      return this.clusters;
    };
    /******************************************************************************/
    // protected functions

    /**
     * Set object properties
     *
     * @param {Array} dataset
     * @param {number} epsilon
     * @param {number} minPts
     * @param {function} distance
     * @returns {undefined}
     * @access protected
     */


    DBSCAN.prototype._init = function (dataset, epsilon, minPts, distance) {
      if (dataset) {
        if (!(dataset instanceof Array)) {
          throw Error('Dataset must be of type array, ' + _typeof(dataset) + ' given');
        }

        this.dataset = dataset;
        this.clusters = [];
        this.noise = [];
        this._datasetLength = dataset.length;
        this._visited = new Array(this._datasetLength);
        this._assigned = new Array(this._datasetLength);
      }

      if (epsilon) {
        this.epsilon = epsilon;
      }

      if (minPts) {
        this.minPts = minPts;
      }

      if (distance) {
        this.distance = distance;
      }
    };
    /**
     * Expand cluster to closest points of given neighborhood
     *
     * @param {number} clusterId
     * @param {Array} neighbors
     * @returns {undefined}
     * @access protected
     */


    DBSCAN.prototype._expandCluster = function (clusterId, neighbors) {
      /**
       * It's very important to calculate length of neighbors array each time,
       * as the number of elements changes over time
       */
      for (var i = 0; i < neighbors.length; i++) {
        var pointId2 = neighbors[i];

        if (this._visited[pointId2] !== 1) {
          this._visited[pointId2] = 1;

          var neighbors2 = this._regionQuery(pointId2);

          if (neighbors2.length >= this.minPts) {
            neighbors = this._mergeArrays(neighbors, neighbors2);
          }
        } // add to cluster


        if (this._assigned[pointId2] !== 1) {
          this._addToCluster(pointId2, clusterId);
        }
      }
    };
    /**
     * Add new point to cluster
     *
     * @param {number} pointId
     * @param {number} clusterId
     */


    DBSCAN.prototype._addToCluster = function (pointId, clusterId) {
      this.clusters[clusterId].push(pointId);
      this._assigned[pointId] = 1;
    };
    /**
     * Find all neighbors around given point
     *
     * @param {number} pointId,
     * @param {number} epsilon
     * @returns {Array}
     * @access protected
     */


    DBSCAN.prototype._regionQuery = function (pointId) {
      var neighbors = [];

      for (var id = 0; id < this._datasetLength; id++) {
        var dist = this.distance(this.dataset[pointId], this.dataset[id]);

        if (dist < this.epsilon) {
          neighbors.push(id);
        }
      }

      return neighbors;
    };
    /******************************************************************************/
    // helpers

    /**
     * @param {Array} a
     * @param {Array} b
     * @returns {Array}
     * @access protected
     */


    DBSCAN.prototype._mergeArrays = function (a, b) {
      var len = b.length;

      for (var i = 0; i < len; i++) {
        var P = b[i];

        if (a.indexOf(P) < 0) {
          a.push(P);
        }
      }

      return a;
    };
    /**
     * Calculate euclidean distance in multidimensional space
     *
     * @param {Array} p
     * @param {Array} q
     * @returns {number}
     * @access protected
     */


    DBSCAN.prototype._euclideanDistance = function (p, q) {
      var sum = 0;
      var i = Math.min(p.length, q.length);

      while (i--) {
        sum += (p[i] - q[i]) * (p[i] - q[i]);
      }

      return Math.sqrt(sum);
    };

    if (module.exports) {
      module.exports = DBSCAN;
    }
  });

  var KMEANS_1 = createCommonjsModule(function (module) {
    /**
     * KMEANS clustering
     *
     * @author Lukasz Krawczyk <contact@lukaszkrawczyk.eu>
     * @copyright MIT
     */

    /**
     * KMEANS class constructor
     * @constructor
     *
     * @param {Array} dataset
     * @param {number} k - number of clusters
     * @param {function} distance - distance function
     * @returns {KMEANS}
     */
    function KMEANS(dataset, k, distance) {
      this.k = 3; // number of clusters

      this.dataset = []; // set of feature vectors

      this.assignments = []; // set of associated clusters for each feature vector

      this.centroids = []; // vectors for our clusters

      this.init(dataset, k, distance);
    }
    /**
     * @returns {undefined}
     */


    KMEANS.prototype.init = function (dataset, k, distance) {
      this.assignments = [];
      this.centroids = [];

      if (typeof dataset !== 'undefined') {
        this.dataset = dataset;
      }

      if (typeof k !== 'undefined') {
        this.k = k;
      }

      if (typeof distance !== 'undefined') {
        this.distance = distance;
      }
    };
    /**
     * @returns {undefined}
     */


    KMEANS.prototype.run = function (dataset, k) {
      this.init(dataset, k);
      var len = this.dataset.length; // initialize centroids

      for (var i = 0; i < this.k; i++) {
        this.centroids[i] = this.randomCentroid();
      }

      var change = true;

      while (change) {
        // assign feature vectors to clusters
        change = this.assign(); // adjust location of centroids

        for (var centroidId = 0; centroidId < this.k; centroidId++) {
          var mean = new Array(maxDim);
          var count = 0; // init mean vector

          for (var dim = 0; dim < maxDim; dim++) {
            mean[dim] = 0;
          }

          for (var j = 0; j < len; j++) {
            var maxDim = this.dataset[j].length; // if current cluster id is assigned to point

            if (centroidId === this.assignments[j]) {
              for (var dim = 0; dim < maxDim; dim++) {
                mean[dim] += this.dataset[j][dim];
              }

              count++;
            }
          }

          if (count > 0) {
            // if cluster contain points, adjust centroid position
            for (var dim = 0; dim < maxDim; dim++) {
              mean[dim] /= count;
            }

            this.centroids[centroidId] = mean;
          } else {
            // if cluster is empty, generate new random centroid
            this.centroids[centroidId] = this.randomCentroid();
            change = true;
          }
        }
      }

      return this.getClusters();
    };
    /**
     * Generate random centroid
     *
     * @returns {Array}
     */


    KMEANS.prototype.randomCentroid = function () {
      var maxId = this.dataset.length - 1;
      var centroid;
      var id;

      do {
        id = Math.round(Math.random() * maxId);
        centroid = this.dataset[id];
      } while (this.centroids.indexOf(centroid) >= 0);

      return centroid;
    };
    /**
     * Assign points to clusters
     *
     * @returns {boolean}
     */


    KMEANS.prototype.assign = function () {
      var change = false;
      var len = this.dataset.length;
      var closestCentroid;

      for (var i = 0; i < len; i++) {
        closestCentroid = this.argmin(this.dataset[i], this.centroids, this.distance);

        if (closestCentroid != this.assignments[i]) {
          this.assignments[i] = closestCentroid;
          change = true;
        }
      }

      return change;
    };
    /**
     * Extract information about clusters
     *
     * @returns {undefined}
     */


    KMEANS.prototype.getClusters = function () {
      var clusters = new Array(this.k);
      var centroidId;

      for (var pointId = 0; pointId < this.assignments.length; pointId++) {
        centroidId = this.assignments[pointId]; // init empty cluster

        if (typeof clusters[centroidId] === 'undefined') {
          clusters[centroidId] = [];
        }

        clusters[centroidId].push(pointId);
      }

      return clusters;
    }; // utils

    /**
     * @params {Array} point
     * @params {Array.<Array>} set
     * @params {Function} f
     * @returns {number}
     */


    KMEANS.prototype.argmin = function (point, set, f) {
      var min = Number.MAX_VALUE;
      var arg = 0;
      var len = set.length;
      var d;

      for (var i = 0; i < len; i++) {
        d = f(point, set[i]);

        if (d < min) {
          min = d;
          arg = i;
        }
      }

      return arg;
    };
    /**
     * Euclidean distance
     *
     * @params {number} p
     * @params {number} q
     * @returns {number}
     */


    KMEANS.prototype.distance = function (p, q) {
      var sum = 0;
      var i = Math.min(p.length, q.length);

      while (i--) {
        var diff = p[i] - q[i];
        sum += diff * diff;
      }

      return Math.sqrt(sum);
    };

    if (module.exports) {
      module.exports = KMEANS;
    }
  });

  /**
   * PriorityQueue
   * Elements in this queue are sorted according to their value
   *
   * @author Lukasz Krawczyk <contact@lukaszkrawczyk.eu>
   * @copyright MIT
   */
  var PriorityQueue_1 = createCommonjsModule(function (module) {
    /**
     * PriorityQueue class construcotr
     * @constructor
     *
     * @example
     * queue: [1,2,3,4]
     * priorities: [4,1,2,3]
     * > result = [1,4,2,3]
     *
     * @param {Array} elements
     * @param {Array} priorities
     * @param {string} sorting - asc / desc
     * @returns {PriorityQueue}
     */
    function PriorityQueue(elements, priorities, sorting) {
      /** @type {Array} */
      this._queue = [];
      /** @type {Array} */

      this._priorities = [];
      /** @type {string} */

      this._sorting = 'desc';

      this._init(elements, priorities, sorting);
    }
    /**
     * Insert element
     *
     * @param {Object} ele
     * @param {Object} priority
     * @returns {undefined}
     * @access public
     */

    PriorityQueue.prototype.insert = function (ele, priority) {
      var indexToInsert = this._queue.length;
      var index = indexToInsert;

      while (index--) {
        var priority2 = this._priorities[index];

        if (this._sorting === 'desc') {
          if (priority > priority2) {
            indexToInsert = index;
          }
        } else {
          if (priority < priority2) {
            indexToInsert = index;
          }
        }
      }

      this._insertAt(ele, priority, indexToInsert);
    };
    /**
     * Remove element
     *
     * @param {Object} ele
     * @returns {undefined}
     * @access public
     */


    PriorityQueue.prototype.remove = function (ele) {
      var index = this._queue.length;

      while (index--) {
        var ele2 = this._queue[index];

        if (ele === ele2) {
          this._queue.splice(index, 1);

          this._priorities.splice(index, 1);

          break;
        }
      }
    };
    /**
     * For each loop wrapper
     *
     * @param {function} func
     * @returs {undefined}
     * @access public
     */


    PriorityQueue.prototype.forEach = function (func) {
      this._queue.forEach(func);
    };
    /**
     * @returns {Array}
     * @access public
     */


    PriorityQueue.prototype.getElements = function () {
      return this._queue;
    };
    /**
     * @param {number} index
     * @returns {Object}
     * @access public
     */


    PriorityQueue.prototype.getElementPriority = function (index) {
      return this._priorities[index];
    };
    /**
     * @returns {Array}
     * @access public
     */


    PriorityQueue.prototype.getPriorities = function () {
      return this._priorities;
    };
    /**
     * @returns {Array}
     * @access public
     */


    PriorityQueue.prototype.getElementsWithPriorities = function () {
      var result = [];

      for (var i = 0, l = this._queue.length; i < l; i++) {
        result.push([this._queue[i], this._priorities[i]]);
      }

      return result;
    };
    /**
     * Set object properties
     *
     * @param {Array} elements
     * @param {Array} priorities
     * @returns {undefined}
     * @access protected
     */


    PriorityQueue.prototype._init = function (elements, priorities, sorting) {
      if (elements && priorities) {
        this._queue = [];
        this._priorities = [];

        if (elements.length !== priorities.length) {
          throw new Error('Arrays must have the same length');
        }

        for (var i = 0; i < elements.length; i++) {
          this.insert(elements[i], priorities[i]);
        }
      }

      if (sorting) {
        this._sorting = sorting;
      }
    };
    /**
     * Insert element at given position
     *
     * @param {Object} ele
     * @param {number} index
     * @returns {undefined}
     * @access protected
     */


    PriorityQueue.prototype._insertAt = function (ele, priority, index) {
      if (this._queue.length === index) {
        this._queue.push(ele);

        this._priorities.push(priority);
      } else {
        this._queue.splice(index, 0, ele);

        this._priorities.splice(index, 0, priority);
      }
    };

    if (module.exports) {
      module.exports = PriorityQueue;
    }
  });

  var OPTICS_1 = createCommonjsModule(function (module) {
    /**
     * @requires ./PriorityQueue.js
     */
    if (module.exports) {
      var PriorityQueue = PriorityQueue_1;
    }
    /**
     * OPTICS - Ordering points to identify the clustering structure
     *
     * @author Lukasz Krawczyk <contact@lukaszkrawczyk.eu>
     * @copyright MIT
     */

    /**
     * OPTICS class constructor
     * @constructor
     *
     * @param {Array} dataset
     * @param {number} epsilon
     * @param {number} minPts
     * @param {function} distanceFunction
     * @returns {OPTICS}
     */


    function OPTICS(dataset, epsilon, minPts, distanceFunction) {
      /** @type {number} */
      this.epsilon = 1;
      /** @type {number} */

      this.minPts = 1;
      /** @type {function} */

      this.distance = this._euclideanDistance; // temporary variables used during computation

      /** @type {Array} */

      this._reachability = [];
      /** @type {Array} */

      this._processed = [];
      /** @type {number} */

      this._coreDistance = 0;
      /** @type {Array} */

      this._orderedList = [];

      this._init(dataset, epsilon, minPts, distanceFunction);
    }
    /******************************************************************************/
    // pulic functions

    /**
     * Start clustering
     *
     * @param {Array} dataset
     * @returns {undefined}
     * @access public
     */


    OPTICS.prototype.run = function (dataset, epsilon, minPts, distanceFunction) {
      this._init(dataset, epsilon, minPts, distanceFunction);

      for (var pointId = 0, l = this.dataset.length; pointId < l; pointId++) {
        if (this._processed[pointId] !== 1) {
          this._processed[pointId] = 1;
          this.clusters.push([pointId]);
          var clusterId = this.clusters.length - 1;

          this._orderedList.push(pointId);

          var priorityQueue = new PriorityQueue(null, null, 'asc');

          var neighbors = this._regionQuery(pointId); // using priority queue assign elements to new cluster


          if (this._distanceToCore(pointId) !== undefined) {
            this._updateQueue(pointId, neighbors, priorityQueue);

            this._expandCluster(clusterId, priorityQueue);
          }
        }
      }

      return this.clusters;
    };
    /**
     * Generate reachability plot for all points
     *
     * @returns {array}
     * @access public
     */


    OPTICS.prototype.getReachabilityPlot = function () {
      var reachabilityPlot = [];

      for (var i = 0, l = this._orderedList.length; i < l; i++) {
        var pointId = this._orderedList[i];
        var distance = this._reachability[pointId];
        reachabilityPlot.push([pointId, distance]);
      }

      return reachabilityPlot;
    };
    /******************************************************************************/
    // protected functions

    /**
     * Set object properties
     *
     * @param {Array} dataset
     * @param {number} epsilon
     * @param {number} minPts
     * @param {function} distance
     * @returns {undefined}
     * @access protected
     */


    OPTICS.prototype._init = function (dataset, epsilon, minPts, distance) {
      if (dataset) {
        if (!(dataset instanceof Array)) {
          throw Error('Dataset must be of type array, ' + _typeof(dataset) + ' given');
        }

        this.dataset = dataset;
        this.clusters = [];
        this._reachability = new Array(this.dataset.length);
        this._processed = new Array(this.dataset.length);
        this._coreDistance = 0;
        this._orderedList = [];
      }

      if (epsilon) {
        this.epsilon = epsilon;
      }

      if (minPts) {
        this.minPts = minPts;
      }

      if (distance) {
        this.distance = distance;
      }
    };
    /**
     * Update information in queue
     *
     * @param {number} pointId
     * @param {Array} neighbors
     * @param {PriorityQueue} queue
     * @returns {undefined}
     * @access protected
     */


    OPTICS.prototype._updateQueue = function (pointId, neighbors, queue) {
      var self = this;
      this._coreDistance = this._distanceToCore(pointId);
      neighbors.forEach(function (pointId2) {
        if (self._processed[pointId2] === undefined) {
          var dist = self.distance(self.dataset[pointId], self.dataset[pointId2]);
          var newReachableDistance = Math.max(self._coreDistance, dist);

          if (self._reachability[pointId2] === undefined) {
            self._reachability[pointId2] = newReachableDistance;
            queue.insert(pointId2, newReachableDistance);
          } else {
            if (newReachableDistance < self._reachability[pointId2]) {
              self._reachability[pointId2] = newReachableDistance;
              queue.remove(pointId2);
              queue.insert(pointId2, newReachableDistance);
            }
          }
        }
      });
    };
    /**
     * Expand cluster
     *
     * @param {number} clusterId
     * @param {PriorityQueue} queue
     * @returns {undefined}
     * @access protected
     */


    OPTICS.prototype._expandCluster = function (clusterId, queue) {
      var queueElements = queue.getElements();

      for (var p = 0, l = queueElements.length; p < l; p++) {
        var pointId = queueElements[p];

        if (this._processed[pointId] === undefined) {
          var neighbors = this._regionQuery(pointId);

          this._processed[pointId] = 1;
          this.clusters[clusterId].push(pointId);

          this._orderedList.push(pointId);

          if (this._distanceToCore(pointId) !== undefined) {
            this._updateQueue(pointId, neighbors, queue);

            this._expandCluster(clusterId, queue);
          }
        }
      }
    };
    /**
     * Calculating distance to cluster core
     *
     * @param {number} pointId
     * @returns {number}
     * @access protected
     */


    OPTICS.prototype._distanceToCore = function (pointId) {
      var l = this.epsilon;

      for (var coreDistCand = 0; coreDistCand < l; coreDistCand++) {
        var neighbors = this._regionQuery(pointId, coreDistCand);

        if (neighbors.length >= this.minPts) {
          return coreDistCand;
        }
      }

      return;
    };
    /**
     * Find all neighbors around given point
     *
     * @param {number} pointId
     * @param {number} epsilon
     * @returns {Array}
     * @access protected
     */


    OPTICS.prototype._regionQuery = function (pointId, epsilon) {
      epsilon = epsilon || this.epsilon;
      var neighbors = [];

      for (var id = 0, l = this.dataset.length; id < l; id++) {
        if (this.distance(this.dataset[pointId], this.dataset[id]) < epsilon) {
          neighbors.push(id);
        }
      }

      return neighbors;
    };
    /******************************************************************************/
    // helpers

    /**
     * Calculate euclidean distance in multidimensional space
     *
     * @param {Array} p
     * @param {Array} q
     * @returns {number}
     * @access protected
     */


    OPTICS.prototype._euclideanDistance = function (p, q) {
      var sum = 0;
      var i = Math.min(p.length, q.length);

      while (i--) {
        sum += (p[i] - q[i]) * (p[i] - q[i]);
      }

      return Math.sqrt(sum);
    };

    if (module.exports) {
      module.exports = OPTICS;
    }
  });

  var lib = createCommonjsModule(function (module) {
    if (module.exports) {
      module.exports = {
        DBSCAN: DBSCAN_1,
        KMEANS: KMEANS_1,
        OPTICS: OPTICS_1,
        PriorityQueue: PriorityQueue_1
      };
    }
  });

  /**
   * Takes a set of {@link Point|points} and partition them into clusters according to {@link DBSCAN's|https://en.wikipedia.org/wiki/DBSCAN} data clustering algorithm.
   *
   * @name clustersDbscan
   * @param {FeatureCollection<Point>} points to be clustered
   * @param {number} maxDistance Maximum Distance between any point of the cluster to generate the clusters (kilometers only)
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units="kilometers"] in which `maxDistance` is expressed, can be degrees, radians, miles, or kilometers
   * @param {boolean} [options.mutate=false] Allows GeoJSON input to be mutated
   * @param {number} [options.minPoints=3] Minimum number of points to generate a single cluster,
   * points which do not meet this requirement will be classified as an 'edge' or 'noise'.
   * @returns {FeatureCollection<Point>} Clustered Points with an additional two properties associated to each Feature:
   * - {number} cluster - the associated clusterId
   * - {string} dbscan - type of point it has been classified as ('core'|'edge'|'noise')
   * @example
   * // create random points with random z-values in their properties
   * var points = turf.randomPoint(100, {bbox: [0, 30, 20, 50]});
   * var maxDistance = 100;
   * var clustered = turf.clustersDbscan(points, maxDistance);
   *
   * //addToMap
   * var addToMap = [clustered];
   */

  function clustersDbscan(points, maxDistance, options) {
    // Input validation being handled by Typescript
    // collectionOf(points, 'Point', 'points must consist of a FeatureCollection of only Points');
    // if (maxDistance === null || maxDistance === undefined) throw new Error('maxDistance is required');
    // if (!(Math.sign(maxDistance) > 0)) throw new Error('maxDistance is invalid');
    // if (!(minPoints === undefined || minPoints === null || Math.sign(minPoints) > 0)) throw new Error('options.minPoints is invalid');
    if (options === void 0) {
      options = {};
    } // Clone points to prevent any mutations


    if (options.mutate !== true) points = clone(points); // Defaults

    options.minPoints = options.minPoints || 3; // create clustered ids

    var dbscan = new lib.DBSCAN();
    var clusteredIds = dbscan.run(coordAll$1(points), convertLength(maxDistance, options.units), options.minPoints, distance$1); // Tag points to Clusters ID

    var clusterId = -1;
    clusteredIds.forEach(function (clusterIds) {
      clusterId++; // assign cluster ids to input points

      clusterIds.forEach(function (idx) {
        var clusterPoint = points.features[idx];
        if (!clusterPoint.properties) clusterPoint.properties = {};
        clusterPoint.properties.cluster = clusterId;
        clusterPoint.properties.dbscan = "core";
      });
    }); // handle noise points, if any
    // edges points are tagged by DBSCAN as both 'noise' and 'cluster' as they can "reach" less than 'minPoints' number of points

    dbscan.noise.forEach(function (noiseId) {
      var noisePoint = points.features[noiseId];
      if (!noisePoint.properties) noisePoint.properties = {};
      if (noisePoint.properties.cluster) noisePoint.properties.dbscan = "edge";else noisePoint.properties.dbscan = "noise";
    });
    return points;
  }

  var distance = {
    /**
     * Euclidean distance
     */
    eudist: function eudist(v1, v2, sqrt) {
      var len = v1.length;
      var sum = 0;

      for (var i = 0; i < len; i++) {
        var d = (v1[i] || 0) - (v2[i] || 0);
        sum += d * d;
      } // Square root not really needed


      return sqrt ? Math.sqrt(sum) : sum;
    },
    mandist: function mandist(v1, v2, sqrt) {
      var len = v1.length;
      var sum = 0;

      for (var i = 0; i < len; i++) {
        sum += Math.abs((v1[i] || 0) - (v2[i] || 0));
      } // Square root not really needed


      return sqrt ? Math.sqrt(sum) : sum;
    },

    /**
     * Unidimensional distance
     */
    dist: function dist(v1, v2, sqrt) {
      var d = Math.abs(v1 - v2);
      return sqrt ? d : d * d;
    }
  };

  var eudist$1 = distance.eudist,
      dist = distance.dist;
  var kinit = {
    kmrand: function kmrand(data, k) {
      var map = {},
          ks = [],
          t = k << 2;
      var len = data.length;
      var multi = data[0].length > 0;

      while (ks.length < k && t-- > 0) {
        var d = data[Math.floor(Math.random() * len)];
        var key = multi ? d.join("_") : "" + d;

        if (!map[key]) {
          map[key] = true;
          ks.push(d);
        }
      }

      if (ks.length < k) throw new Error("Error initializating clusters");else return ks;
    },

    /**
     * K-means++ initial centroid selection
     */
    kmpp: function kmpp(data, k) {
      var distance = data[0].length ? eudist$1 : dist;
      var ks = [],
          len = data.length;
      var multi = data[0].length > 0;

      var c = data[Math.floor(Math.random() * len)];
      multi ? c.join("_") : "" + c;
      ks.push(c);

      while (ks.length < k) {
        // Min Distances between current centroids and data points
        var dists = [],
            lk = ks.length;
        var dsum = 0,
            prs = [];

        for (var i = 0; i < len; i++) {
          var min = Infinity;

          for (var j = 0; j < lk; j++) {
            var _dist = distance(data[i], ks[j]);

            if (_dist <= min) min = _dist;
          }

          dists[i] = min;
        } // Sum all min distances


        for (var _i = 0; _i < len; _i++) {
          dsum += dists[_i];
        } // Probabilities and cummulative prob (cumsum)


        for (var _i2 = 0; _i2 < len; _i2++) {
          prs[_i2] = {
            i: _i2,
            v: data[_i2],
            pr: dists[_i2] / dsum,
            cs: 0
          };
        } // Sort Probabilities


        prs.sort(function (a, b) {
          return a.pr - b.pr;
        }); // Cummulative Probabilities

        prs[0].cs = prs[0].pr;

        for (var _i3 = 1; _i3 < len; _i3++) {
          prs[_i3].cs = prs[_i3 - 1].cs + prs[_i3].pr;
        } // Randomize


        var rnd = Math.random(); // Gets only the items whose cumsum >= rnd

        var idx = 0;

        while (idx < len - 1 && prs[idx++].cs < rnd) {}

        ks.push(prs[idx - 1].v);
        /*
        let done = false;
        while(!done) {
        	// this is our new centroid
        	c = prs[idx-1].v
        	key = multi? c.join("_") : `${c}`;
        	if(!map[key]) {
        		map[key] = true;
        		ks.push(c);
        		done = true;
        	}
        	else {
        		idx++;
        	}
        }
        */
      }

      return ks;
    }
  };

  /*jshint esversion: 6 */


  var eudist = distance.eudist,
      kmrand = kinit.kmrand,
      kmpp = kinit.kmpp;
  var MAX = 10000;
  /**
   * Inits an array with values
   */

  function init(len, val, v) {
    v = v || [];

    for (var i = 0; i < len; i++) {
      v[i] = val;
    }

    return v;
  }

  function skmeans(data, k, initial, maxit) {
    var ks = [],
        old = [],
        idxs = [],
        dist = [];
    var conv = false,
        it = maxit || MAX;
    var len = data.length,
        vlen = data[0].length,
        multi = vlen > 0;
    var count = [];

    if (!initial) {
      var _idxs = {};

      while (ks.length < k) {
        var idx = Math.floor(Math.random() * len);

        if (!_idxs[idx]) {
          _idxs[idx] = true;
          ks.push(data[idx]);
        }
      }
    } else if (initial == "kmrand") {
      ks = kmrand(data, k);
    } else if (initial == "kmpp") {
      ks = kmpp(data, k);
    } else {
      ks = initial;
    }

    do {
      // Reset k count
      init(k, 0, count); // For each value in data, find the nearest centroid

      for (var i = 0; i < len; i++) {
        var min = Infinity,
            _idx = 0;

        for (var j = 0; j < k; j++) {
          // Multidimensional or unidimensional
          var dist = multi ? eudist(data[i], ks[j]) : Math.abs(data[i] - ks[j]);

          if (dist <= min) {
            min = dist;
            _idx = j;
          }
        }

        idxs[i] = _idx; // Index of the selected centroid for that value

        count[_idx]++; // Number of values for this centroid
      } // Recalculate centroids


      var sum = [],
          old = [];

      for (var _j = 0; _j < k; _j++) {
        // Multidimensional or unidimensional
        sum[_j] = multi ? init(vlen, 0, sum[_j]) : 0;
        old[_j] = ks[_j];
      } // If multidimensional


      if (multi) {
        for (var _j2 = 0; _j2 < k; _j2++) {
          ks[_j2] = [];
        } // Sum values and count for each centroid


        for (var _i = 0; _i < len; _i++) {
          var _idx2 = idxs[_i],
              // Centroid for that item
          vsum = sum[_idx2],
              // Sum values for this centroid
          vect = data[_i]; // Current vector
          // Accumulate value on the centroid for current vector

          for (var h = 0; h < vlen; h++) {
            vsum[h] += vect[h];
          }
        } // Calculate the average for each centroid


        conv = true;

        for (var _j3 = 0; _j3 < k; _j3++) {
          var ksj = ks[_j3],
              // Current centroid
          sumj = sum[_j3],
              // Accumulated centroid values
          oldj = old[_j3],
              // Old centroid value
          cj = count[_j3]; // Number of elements for this centroid
          // New average

          for (var _h = 0; _h < vlen; _h++) {
            ksj[_h] = sumj[_h] / cj || 0; // New centroid
          } // Find if centroids have moved


          if (conv) {
            for (var _h2 = 0; _h2 < vlen; _h2++) {
              if (oldj[_h2] != ksj[_h2]) {
                conv = false;
                break;
              }
            }
          }
        }
      } // If unidimensional
      else {
          // Sum values and count for each centroid
          for (var _i2 = 0; _i2 < len; _i2++) {
            var _idx3 = idxs[_i2];
            sum[_idx3] += data[_i2];
          } // Calculate the average for each centroid


          for (var _j4 = 0; _j4 < k; _j4++) {
            ks[_j4] = sum[_j4] / count[_j4] || 0; // New centroid
          } // Find if centroids have moved


          conv = true;

          for (var _j5 = 0; _j5 < k; _j5++) {
            if (old[_j5] != ks[_j5]) {
              conv = false;
              break;
            }
          }
        }

      conv = conv || --it <= 0;
    } while (!conv);

    return {
      it: MAX - it,
      k: k,
      idxs: idxs,
      centroids: ks
    };
  }

  var main = skmeans;

  /**
   * Takes a set of {@link Point|points} and partition them into clusters using the k-mean .
   * It uses the [k-means algorithm](https://en.wikipedia.org/wiki/K-means_clustering)
   *
   * @name clustersKmeans
   * @param {FeatureCollection<Point>} points to be clustered
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.numberOfClusters=Math.sqrt(numberOfPoints/2)] numberOfClusters that will be generated
   * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
   * @returns {FeatureCollection<Point>} Clustered Points with an additional two properties associated to each Feature:
   * - {number} cluster - the associated clusterId
   * - {[number, number]} centroid - Centroid of the cluster [Longitude, Latitude]
   * @example
   * // create random points with random z-values in their properties
   * var points = turf.randomPoint(100, {bbox: [0, 30, 20, 50]});
   * var options = {numberOfClusters: 7};
   * var clustered = turf.clustersKmeans(points, options);
   *
   * //addToMap
   * var addToMap = [clustered];
   */

  function clustersKmeans(points, options) {
    if (options === void 0) {
      options = {};
    } // Default Params


    var count = points.features.length;
    options.numberOfClusters = options.numberOfClusters || Math.round(Math.sqrt(count / 2)); // numberOfClusters can't be greater than the number of points
    // fallbacks to count

    if (options.numberOfClusters > count) options.numberOfClusters = count; // Clone points to prevent any mutations (enabled by default)

    if (options.mutate !== true) points = clone(points); // collect points coordinates

    var data = coordAll$1(points); // create seed to avoid skmeans to drift

    var initialCentroids = data.slice(0, options.numberOfClusters); // create skmeans clusters

    var skmeansResult = main(data, options.numberOfClusters, initialCentroids); // store centroids {clusterId: [number, number]}

    var centroids = {};
    skmeansResult.centroids.forEach(function (coord, idx) {
      centroids[idx] = coord;
    }); // add associated cluster number

    featureEach$2(points, function (point, index) {
      var clusterId = skmeansResult.idxs[index];
      point.properties.cluster = clusterId;
      point.properties.centroid = centroids[clusterId];
    });
    return points;
  }

  /**
   * Boolean-Parallel returns True if each segment of `line1` is parallel to the correspondent segment of `line2`
   *
   * @name booleanParallel
   * @param {Geometry|Feature<LineString>} line1 GeoJSON Feature or Geometry
   * @param {Geometry|Feature<LineString>} line2 GeoJSON Feature or Geometry
   * @returns {boolean} true/false if the lines are parallel
   * @example
   * var line1 = turf.lineString([[0, 0], [0, 1]]);
   * var line2 = turf.lineString([[1, 0], [1, 1]]);
   *
   * turf.booleanParallel(line1, line2);
   * //=true
   */

  function booleanParallel(line1, line2) {
    // validation
    if (!line1) throw new Error("line1 is required");
    if (!line2) throw new Error("line2 is required");
    var type1 = getType(line1, "line1");
    if (type1 !== "LineString") throw new Error("line1 must be a LineString");
    var type2 = getType(line2, "line2");
    if (type2 !== "LineString") throw new Error("line2 must be a LineString");
    var segments1 = lineSegment(cleanCoords(line1)).features;
    var segments2 = lineSegment(cleanCoords(line2)).features;

    for (var i = 0; i < segments1.length; i++) {
      var segment1 = segments1[i].geometry.coordinates;
      if (!segments2[i]) break;
      var segment2 = segments2[i].geometry.coordinates;
      if (!isParallel(segment1, segment2)) return false;
    }

    return true;
  }
  /**
   * Compares slopes and return result
   *
   * @private
   * @param {Geometry|Feature<LineString>} segment1 Geometry or Feature
   * @param {Geometry|Feature<LineString>} segment2 Geometry or Feature
   * @returns {boolean} if slopes are equal
   */


  function isParallel(segment1, segment2) {
    var slope1 = bearingToAzimuth(rhumbBearing(segment1[0], segment1[1]));
    var slope2 = bearingToAzimuth(rhumbBearing(segment2[0], segment2[1]));
    return slope1 === slope2;
  }
  /**
   * Returns Feature's type
   *
   * @private
   * @param {Geometry|Feature<any>} geojson Geometry or Feature
   * @param {string} name of the variable
   * @returns {string} Feature's type
   */


  function getType(geojson, name) {
    if (geojson.geometry && geojson.geometry.type) return geojson.geometry.type;
    if (geojson.type) return geojson.type; // if GeoJSON geometry

    throw new Error("Invalid GeoJSON object for " + name);
  }

  // http://github.com/bgrins/javascript-astar
  // Freely distributable under the MIT License.
  // Implements the astar search algorithm in javascript using a Binary Heap.
  // Includes Binary Heap (with modifications) from Marijn Haverbeke.
  // http://eloquentjavascript.net/appendix2.html

  function pathTo(node) {
    var curr = node,
        path = [];

    while (curr.parent) {
      path.unshift(curr);
      curr = curr.parent;
    }

    return path;
  }

  function getHeap() {
    return new BinaryHeap(function (node) {
      return node.f;
    });
  }
  /**
   * Astar
   * @private
   */


  var astar = {
    /**
     * Perform an A* Search on a graph given a start and end node.
     *
     * @private
     * @memberof astar
     * @param {Graph} graph Graph
     * @param {GridNode} start Start
     * @param {GridNode} end End
     * @param {Object} [options] Options
     * @param {bool} [options.closest] Specifies whether to return the path to the closest node if the target is unreachable.
     * @param {Function} [options.heuristic] Heuristic function (see astar.heuristics).
     * @returns {Object} Search
     */
    search: function search(graph, start, end, options) {
      graph.cleanDirty();
      options = options || {};
      var heuristic = options.heuristic || astar.heuristics.manhattan,
          closest = options.closest || false;
      var openHeap = getHeap(),
          closestNode = start; // set the start node to be the closest if required

      start.h = heuristic(start, end);
      openHeap.push(start);

      while (openHeap.size() > 0) {
        // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.
        var currentNode = openHeap.pop(); // End case -- result has been found, return the traced path.

        if (currentNode === end) {
          return pathTo(currentNode);
        } // Normal case -- move currentNode from open to closed, process each of its neighbors.


        currentNode.closed = true; // Find all neighbors for the current node.

        var neighbors = graph.neighbors(currentNode);

        for (var i = 0, il = neighbors.length; i < il; ++i) {
          var neighbor = neighbors[i];

          if (neighbor.closed || neighbor.isWall()) {
            // Not a valid node to process, skip to next neighbor.
            continue;
          } // The g score is the shortest distance from start to current node.
          // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.


          var gScore = currentNode.g + neighbor.getCost(currentNode),
              beenVisited = neighbor.visited;

          if (!beenVisited || gScore < neighbor.g) {
            // Found an optimal (so far) path to this node.  Take score for node to see how good it is.
            neighbor.visited = true;
            neighbor.parent = currentNode;
            neighbor.h = neighbor.h || heuristic(neighbor, end);
            neighbor.g = gScore;
            neighbor.f = neighbor.g + neighbor.h;
            graph.markDirty(neighbor);

            if (closest) {
              // If the neighbour is closer than the current closestNode or if it's equally close but has
              // a cheaper path than the current closest node then it becomes the closest node
              if (neighbor.h < closestNode.h || neighbor.h === closestNode.h && neighbor.g < closestNode.g) {
                closestNode = neighbor;
              }
            }

            if (!beenVisited) {
              // Pushing to heap will put it in proper place based on the 'f' value.
              openHeap.push(neighbor);
            } else {
              // Already seen the node, but since it has been rescored we need to reorder it in the heap
              openHeap.rescoreElement(neighbor);
            }
          }
        }
      }

      if (closest) {
        return pathTo(closestNode);
      } // No result was found - empty array signifies failure to find path.


      return [];
    },
    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html
    heuristics: {
      manhattan: function manhattan(pos0, pos1) {
        var d1 = Math.abs(pos1.x - pos0.x);
        var d2 = Math.abs(pos1.y - pos0.y);
        return d1 + d2;
      },
      diagonal: function diagonal(pos0, pos1) {
        var D = 1;
        var D2 = Math.sqrt(2);
        var d1 = Math.abs(pos1.x - pos0.x);
        var d2 = Math.abs(pos1.y - pos0.y);
        return D * (d1 + d2) + (D2 - 2 * D) * Math.min(d1, d2);
      }
    },
    cleanNode: function cleanNode(node) {
      node.f = 0;
      node.g = 0;
      node.h = 0;
      node.visited = false;
      node.closed = false;
      node.parent = null;
    }
  };
  /**
   * A graph memory structure
   *
   * @private
   * @param {Array} gridIn 2D array of input weights
   * @param {Object} [options] Options
   * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed
   * @returns {void} Graph
   */

  function Graph(gridIn, options) {
    options = options || {};
    this.nodes = [];
    this.diagonal = !!options.diagonal;
    this.grid = [];

    for (var x = 0; x < gridIn.length; x++) {
      this.grid[x] = [];

      for (var y = 0, row = gridIn[x]; y < row.length; y++) {
        var node = new GridNode(x, y, row[y]);
        this.grid[x][y] = node;
        this.nodes.push(node);
      }
    }

    this.init();
  }

  Graph.prototype.init = function () {
    this.dirtyNodes = [];

    for (var i = 0; i < this.nodes.length; i++) {
      astar.cleanNode(this.nodes[i]);
    }
  };

  Graph.prototype.cleanDirty = function () {
    for (var i = 0; i < this.dirtyNodes.length; i++) {
      astar.cleanNode(this.dirtyNodes[i]);
    }

    this.dirtyNodes = [];
  };

  Graph.prototype.markDirty = function (node) {
    this.dirtyNodes.push(node);
  };

  Graph.prototype.neighbors = function (node) {
    var ret = [],
        x = node.x,
        y = node.y,
        grid = this.grid; // West

    if (grid[x - 1] && grid[x - 1][y]) {
      ret.push(grid[x - 1][y]);
    } // East


    if (grid[x + 1] && grid[x + 1][y]) {
      ret.push(grid[x + 1][y]);
    } // South


    if (grid[x] && grid[x][y - 1]) {
      ret.push(grid[x][y - 1]);
    } // North


    if (grid[x] && grid[x][y + 1]) {
      ret.push(grid[x][y + 1]);
    }

    if (this.diagonal) {
      // Southwest
      if (grid[x - 1] && grid[x - 1][y - 1]) {
        ret.push(grid[x - 1][y - 1]);
      } // Southeast


      if (grid[x + 1] && grid[x + 1][y - 1]) {
        ret.push(grid[x + 1][y - 1]);
      } // Northwest


      if (grid[x - 1] && grid[x - 1][y + 1]) {
        ret.push(grid[x - 1][y + 1]);
      } // Northeast


      if (grid[x + 1] && grid[x + 1][y + 1]) {
        ret.push(grid[x + 1][y + 1]);
      }
    }

    return ret;
  };

  Graph.prototype.toString = function () {
    var graphString = [],
        nodes = this.grid,
        // when using grid
    rowDebug,
        row,
        y,
        l;

    for (var x = 0, len = nodes.length; x < len; x++) {
      rowDebug = [];
      row = nodes[x];

      for (y = 0, l = row.length; y < l; y++) {
        rowDebug.push(row[y].weight);
      }

      graphString.push(rowDebug.join(" "));
    }

    return graphString.join("\n");
  };

  function GridNode(x, y, weight) {
    this.x = x;
    this.y = y;
    this.weight = weight;
  }

  GridNode.prototype.toString = function () {
    return "[" + this.x + " " + this.y + "]";
  };

  GridNode.prototype.getCost = function (fromNeighbor) {
    // Take diagonal weight into consideration.
    if (fromNeighbor && fromNeighbor.x !== this.x && fromNeighbor.y !== this.y) {
      return this.weight * 1.41421;
    }

    return this.weight;
  };

  GridNode.prototype.isWall = function () {
    return this.weight === 0;
  };

  function BinaryHeap(scoreFunction) {
    this.content = [];
    this.scoreFunction = scoreFunction;
  }

  BinaryHeap.prototype = {
    push: function push(element) {
      // Add the new element to the end of the array.
      this.content.push(element); // Allow it to sink down.

      this.sinkDown(this.content.length - 1);
    },
    pop: function pop() {
      // Store the first element so we can return it later.
      var result = this.content[0]; // Get the element at the end of the array.

      var end = this.content.pop(); // If there are any elements left, put the end element at the
      // start, and let it bubble up.

      if (this.content.length > 0) {
        this.content[0] = end;
        this.bubbleUp(0);
      }

      return result;
    },
    remove: function remove(node) {
      var i = this.content.indexOf(node); // When it is found, the process seen in 'pop' is repeated
      // to fill up the hole.

      var end = this.content.pop();

      if (i !== this.content.length - 1) {
        this.content[i] = end;

        if (this.scoreFunction(end) < this.scoreFunction(node)) {
          this.sinkDown(i);
        } else {
          this.bubbleUp(i);
        }
      }
    },
    size: function size() {
      return this.content.length;
    },
    rescoreElement: function rescoreElement(node) {
      this.sinkDown(this.content.indexOf(node));
    },
    sinkDown: function sinkDown(n) {
      // Fetch the element that has to be sunk.
      var element = this.content[n]; // When at 0, an element can not sink any further.

      while (n > 0) {
        // Compute the parent element's index, and fetch it.
        var parentN = (n + 1 >> 1) - 1,
            parent = this.content[parentN]; // Swap the elements if the parent is greater.

        if (this.scoreFunction(element) < this.scoreFunction(parent)) {
          this.content[parentN] = element;
          this.content[n] = parent; // Update 'n' to continue at the new position.

          n = parentN; // Found a parent that is less, no need to sink any further.
        } else {
          break;
        }
      }
    },
    bubbleUp: function bubbleUp(n) {
      // Look up the target element and its score.
      var length = this.content.length,
          element = this.content[n],
          elemScore = this.scoreFunction(element);

      while (true) {
        // Compute the indices of the child elements.
        var child2N = n + 1 << 1,
            child1N = child2N - 1; // This is used to store the new position of the element, if any.

        var swap = null,
            child1Score; // If the first child exists (is inside the array)...

        if (child1N < length) {
          // Look it up and compute its score.
          var child1 = this.content[child1N];
          child1Score = this.scoreFunction(child1); // If the score is less than our element's, we need to swap.

          if (child1Score < elemScore) {
            swap = child1N;
          }
        } // Do the same checks for the other child.


        if (child2N < length) {
          var child2 = this.content[child2N],
              child2Score = this.scoreFunction(child2);

          if (child2Score < (swap === null ? elemScore : child1Score)) {
            swap = child2N;
          }
        } // If the element needs to be moved, swap it, and continue.


        if (swap !== null) {
          this.content[n] = this.content[swap];
          this.content[swap] = element;
          n = swap; // Otherwise, we are done.
        } else {
          break;
        }
      }
    }
  };
  /**
   * Returns the shortest {@link LineString|path} from {@link Point|start} to {@link Point|end} without colliding with
   * any {@link Feature} in {@link FeatureCollection<Polygon>| obstacles}
   *
   * @name shortestPath
   * @param {Coord} start point
   * @param {Coord} end point
   * @param {Object} [options={}] optional parameters
   * @param {Geometry|Feature|FeatureCollection<Polygon>} [options.obstacles] areas which path cannot travel
   * @param {number} [options.minDistance] minimum distance between shortest path and obstacles
   * @param {string} [options.units='kilometers'] unit in which resolution & minimum distance will be expressed in; it can be degrees, radians, miles, kilometers, ...
   * @param {number} [options.resolution=100] distance between matrix points on which the path will be calculated
   * @returns {Feature<LineString>} shortest path between start and end
   * @example
   * var start = [-5, -6];
   * var end = [9, -6];
   * var options = {
   *   obstacles: turf.polygon([[[0, -7], [5, -7], [5, -3], [0, -3], [0, -7]]])
   * };
   *
   * var path = turf.shortestPath(start, end, options);
   *
   * //addToMap
   * var addToMap = [start, end, options.obstacles, path];
   */

  function shortestPath(start, end, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var resolution = options.resolution;
    var minDistance = options.minDistance;
    var obstacles = options.obstacles || featureCollection$1([]); // validation

    if (!start) throw new Error("start is required");
    if (!end) throw new Error("end is required");
    if (resolution && !isNumber(resolution) || resolution <= 0) throw new Error("options.resolution must be a number, greater than 0");
    if (minDistance) throw new Error("options.minDistance is not yet implemented"); // Normalize Inputs

    var startCoord = getCoord(start);
    var endCoord = getCoord(end);
    start = point(startCoord);
    end = point(endCoord); // Handle obstacles

    switch (getType$1(obstacles)) {
      case "FeatureCollection":
        if (obstacles.features.length === 0) return lineString([startCoord, endCoord]);
        break;

      case "Polygon":
        obstacles = featureCollection$1([feature(getGeom(obstacles))]);
        break;

      default:
        throw new Error("invalid obstacles");
    } // define path grid area


    var collection = obstacles;
    collection.features.push(start);
    collection.features.push(end);
    var box = bbox$2(transformScale(bboxPolygon(bbox$2(collection)), 1.15)); // extend 15%

    if (!resolution) {
      var width = distance$1([box[0], box[1]], [box[2], box[1]], options);
      resolution = width / 100;
    }

    collection.features.pop();
    collection.features.pop();
    var west = box[0];
    var south = box[1];
    var east = box[2];
    var north = box[3];
    var xFraction = resolution / distance$1([west, south], [east, south], options);
    var cellWidth = xFraction * (east - west);
    var yFraction = resolution / distance$1([west, south], [west, north], options);
    var cellHeight = yFraction * (north - south);
    var bboxHorizontalSide = east - west;
    var bboxVerticalSide = north - south;
    var columns = Math.floor(bboxHorizontalSide / cellWidth);
    var rows = Math.floor(bboxVerticalSide / cellHeight); // adjust origin of the grid

    var deltaX = (bboxHorizontalSide - columns * cellWidth) / 2;
    var deltaY = (bboxVerticalSide - rows * cellHeight) / 2; // loop through points only once to speed up process
    // define matrix grid for A-star algorithm

    var pointMatrix = [];
    var matrix = [];
    var closestToStart = [];
    var closestToEnd = [];
    var minDistStart = Infinity;
    var minDistEnd = Infinity;
    var currentY = north - deltaY;
    var r = 0;

    while (currentY >= south) {
      // var currentY = south + deltaY;
      var matrixRow = [];
      var pointMatrixRow = [];
      var currentX = west + deltaX;
      var c = 0;

      while (currentX <= east) {
        var pt = point([currentX, currentY]);
        var isInsideObstacle = isInside(pt, obstacles); // feed obstacles matrix

        matrixRow.push(isInsideObstacle ? 0 : 1); // with javascript-astar
        // matrixRow.push(isInsideObstacle ? 1 : 0); // with astar-andrea
        // map point's coords

        pointMatrixRow.push(currentX + "|" + currentY); // set closest points

        var distStart = distance$1(pt, start); // if (distStart < minDistStart) {

        if (!isInsideObstacle && distStart < minDistStart) {
          minDistStart = distStart;
          closestToStart = {
            x: c,
            y: r
          };
        }

        var distEnd = distance$1(pt, end); // if (distEnd < minDistEnd) {

        if (!isInsideObstacle && distEnd < minDistEnd) {
          minDistEnd = distEnd;
          closestToEnd = {
            x: c,
            y: r
          };
        }

        currentX += cellWidth;
        c++;
      }

      matrix.push(matrixRow);
      pointMatrix.push(pointMatrixRow);
      currentY -= cellHeight;
      r++;
    } // find path on matrix grid
    // javascript-astar ----------------------


    var graph = new Graph(matrix, {
      diagonal: true
    });
    var startOnMatrix = graph.grid[closestToStart.y][closestToStart.x];
    var endOnMatrix = graph.grid[closestToEnd.y][closestToEnd.x];
    var result = astar.search(graph, startOnMatrix, endOnMatrix);
    var path = [startCoord];
    result.forEach(function (coord) {
      var coords = pointMatrix[coord.x][coord.y].split("|");
      path.push([+coords[0], +coords[1]]); // make sure coords are numbers
    });
    path.push(endCoord); // ---------------------------------------
    // astar-andrea ------------------------
    // var result = aStar(matrix, [closestToStart.x, closestToStart.y], [closestToEnd.x, closestToEnd.y], 'DiagonalFree');
    // var path = [start.geometry.coordinates];
    // result.forEach(function (coord) {
    //     var coords = pointMatrix[coord[1]][coord[0]].split('|');
    //     path.push([+coords[0], +coords[1]]); // make sure coords are numbers
    // });
    // path.push(end.geometry.coordinates);
    // ---------------------------------------

    return cleanCoords(lineString(path));
  }
  /**
   * Checks if Point is inside any of the Polygons
   *
   * @private
   * @param {Feature<Point>} pt to check
   * @param {FeatureCollection<Polygon>} polygons features
   * @returns {boolean} if inside or not
   */


  function isInside(pt, polygons) {
    for (var i = 0; i < polygons.features.length; i++) {
      if (booleanPointInPolygon(pt, polygons.features[i])) {
        return true;
      }
    }

    return false;
  }

  function constant (x) {
    return function () {
      return x;
    };
  }

  function x(d) {
    return d[0];
  }
  function y(d) {
    return d[1];
  }

  function RedBlackTree() {
    this._ = null; // root node
  }

  function RedBlackNode(node) {
    node.U = // parent node
    node.C = // color - true for red, false for black
    node.L = // left node
    node.R = // right node
    node.P = // previous node
    node.N = null; // next node
  }
  RedBlackTree.prototype = {
    constructor: RedBlackTree,
    insert: function insert(after, node) {
      var parent, grandpa, uncle;

      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;

        if (after.R) {
          after = after.R;

          while (after.L) {
            after = after.L;
          }

          after.L = node;
        } else {
          after.R = node;
        }

        parent = after;
      } else if (this._) {
        after = RedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }

      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;

      while (parent && parent.C) {
        grandpa = parent.U;

        if (parent === grandpa.L) {
          uncle = grandpa.R;

          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              RedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }

            parent.C = false;
            grandpa.C = true;
            RedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;

          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              RedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }

            parent.C = false;
            grandpa.C = true;
            RedBlackRotateLeft(this, grandpa);
          }
        }

        parent = after.U;
      }

      this._.C = false;
    },
    remove: function remove(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U,
          sibling,
          left = node.L,
          right = node.R,
          next,
          red;
      if (!left) next = right;else if (!right) next = left;else next = RedBlackFirst(right);

      if (parent) {
        if (parent.L === node) parent.L = next;else parent.R = next;
      } else {
        this._ = next;
      }

      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;

        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }

      if (node) node.U = parent;
      if (red) return;

      if (node && node.C) {
        node.C = false;
        return;
      }

      do {
        if (node === this._) break;

        if (node === parent.L) {
          sibling = parent.R;

          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            RedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }

          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              RedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }

            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            RedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;

          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            RedBlackRotateRight(this, parent);
            sibling = parent.L;
          }

          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              RedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }

            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            RedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }

        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);

      if (node) node.C = false;
    }
  };

  function RedBlackRotateLeft(tree, node) {
    var p = node,
        q = node.R,
        parent = p.U;

    if (parent) {
      if (parent.L === p) parent.L = q;else parent.R = q;
    } else {
      tree._ = q;
    }

    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }

  function RedBlackRotateRight(tree, node) {
    var p = node,
        q = node.L,
        parent = p.U;

    if (parent) {
      if (parent.L === p) parent.L = q;else parent.R = q;
    } else {
      tree._ = q;
    }

    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }

  function RedBlackFirst(node) {
    while (node.L) {
      node = node.L;
    }

    return node;
  }

  function createEdge(left, right, v0, v1) {
    var edge = [null, null],
        index = edges.push(edge) - 1;
    edge.left = left;
    edge.right = right;
    if (v0) setEdgeEnd(edge, left, right, v0);
    if (v1) setEdgeEnd(edge, right, left, v1);
    cells[left.index].halfedges.push(index);
    cells[right.index].halfedges.push(index);
    return edge;
  }
  function createBorderEdge(left, v0, v1) {
    var edge = [v0, v1];
    edge.left = left;
    return edge;
  }
  function setEdgeEnd(edge, left, right, vertex) {
    if (!edge[0] && !edge[1]) {
      edge[0] = vertex;
      edge.left = left;
      edge.right = right;
    } else if (edge.left === right) {
      edge[1] = vertex;
    } else {
      edge[0] = vertex;
    }
  } // Liang–Barsky line clipping.

  function clipEdge(edge, x0, y0, x1, y1) {
    var a = edge[0],
        b = edge[1],
        ax = a[0],
        ay = a[1],
        bx = b[0],
        by = b[1],
        t0 = 0,
        t1 = 1,
        dx = bx - ax,
        dy = by - ay,
        r;
    r = x0 - ax;
    if (!dx && r > 0) return;
    r /= dx;

    if (dx < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dx > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = x1 - ax;
    if (!dx && r < 0) return;
    r /= dx;

    if (dx < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dx > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    r = y0 - ay;
    if (!dy && r > 0) return;
    r /= dy;

    if (dy < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dy > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = y1 - ay;
    if (!dy && r < 0) return;
    r /= dy;

    if (dy < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dy > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

    if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
    if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
    return true;
  }

  function connectEdge(edge, x0, y0, x1, y1) {
    var v1 = edge[1];
    if (v1) return true;
    var v0 = edge[0],
        left = edge.left,
        right = edge.right,
        lx = left[0],
        ly = left[1],
        rx = right[0],
        ry = right[1],
        fx = (lx + rx) / 2,
        fy = (ly + ry) / 2,
        fm,
        fb;

    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;

      if (lx > rx) {
        if (!v0) v0 = [fx, y0];else if (v0[1] >= y1) return;
        v1 = [fx, y1];
      } else {
        if (!v0) v0 = [fx, y1];else if (v0[1] < y0) return;
        v1 = [fx, y0];
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;

      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!v0) v0 = [(y0 - fb) / fm, y0];else if (v0[1] >= y1) return;
          v1 = [(y1 - fb) / fm, y1];
        } else {
          if (!v0) v0 = [(y1 - fb) / fm, y1];else if (v0[1] < y0) return;
          v1 = [(y0 - fb) / fm, y0];
        }
      } else {
        if (ly < ry) {
          if (!v0) v0 = [x0, fm * x0 + fb];else if (v0[0] >= x1) return;
          v1 = [x1, fm * x1 + fb];
        } else {
          if (!v0) v0 = [x1, fm * x1 + fb];else if (v0[0] < x0) return;
          v1 = [x0, fm * x0 + fb];
        }
      }
    }

    edge[0] = v0;
    edge[1] = v1;
    return true;
  }

  function clipEdges(x0, y0, x1, y1) {
    var i = edges.length,
        edge;

    while (i--) {
      if (!connectEdge(edge = edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$2 || Math.abs(edge[0][1] - edge[1][1]) > epsilon$2)) {
        delete edges[i];
      }
    }
  }

  function createCell(site) {
    return cells[site.index] = {
      site: site,
      halfedges: []
    };
  }

  function cellHalfedgeAngle(cell, edge) {
    var site = cell.site,
        va = edge.left,
        vb = edge.right;
    if (site === vb) vb = va, va = site;
    if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
    if (site === va) va = edge[1], vb = edge[0];else va = edge[0], vb = edge[1];
    return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
  }

  function cellHalfedgeStart(cell, edge) {
    return edge[+(edge.left !== cell.site)];
  }
  function cellHalfedgeEnd(cell, edge) {
    return edge[+(edge.left === cell.site)];
  }
  function sortCellHalfedges() {
    for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
      if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
        var index = new Array(m),
            array = new Array(m);

        for (j = 0; j < m; ++j) {
          index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
        }

        index.sort(function (i, j) {
          return array[j] - array[i];
        });

        for (j = 0; j < m; ++j) {
          array[j] = halfedges[index[j]];
        }

        for (j = 0; j < m; ++j) {
          halfedges[j] = array[j];
        }
      }
    }
  }
  function clipCells(x0, y0, x1, y1) {
    var nCells = cells.length,
        iCell,
        cell,
        site,
        iHalfedge,
        halfedges,
        nHalfedges,
        start,
        startX,
        startY,
        end,
        endX,
        endY,
        cover = true;

    for (iCell = 0; iCell < nCells; ++iCell) {
      if (cell = cells[iCell]) {
        site = cell.site;
        halfedges = cell.halfedges;
        iHalfedge = halfedges.length; // Remove any dangling clipped edges.

        while (iHalfedge--) {
          if (!edges[halfedges[iHalfedge]]) {
            halfedges.splice(iHalfedge, 1);
          }
        } // Insert any border edges as necessary.


        iHalfedge = 0, nHalfedges = halfedges.length;

        while (iHalfedge < nHalfedges) {
          end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
          start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];

          if (Math.abs(endX - startX) > epsilon$2 || Math.abs(endY - startY) > epsilon$2) {
            halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end, Math.abs(endX - x0) < epsilon$2 && y1 - endY > epsilon$2 ? [x0, Math.abs(startX - x0) < epsilon$2 ? startY : y1] : Math.abs(endY - y1) < epsilon$2 && x1 - endX > epsilon$2 ? [Math.abs(startY - y1) < epsilon$2 ? startX : x1, y1] : Math.abs(endX - x1) < epsilon$2 && endY - y0 > epsilon$2 ? [x1, Math.abs(startX - x1) < epsilon$2 ? startY : y0] : Math.abs(endY - y0) < epsilon$2 && endX - x0 > epsilon$2 ? [Math.abs(startY - y0) < epsilon$2 ? startX : x0, y0] : null)) - 1);
            ++nHalfedges;
          }
        }

        if (nHalfedges) cover = false;
      }
    } // If there weren’t any edges, have the closest site cover the extent.
    // It doesn’t matter which corner of the extent we measure!


    if (cover) {
      var dx,
          dy,
          d2,
          dc = Infinity;

      for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
        if (cell = cells[iCell]) {
          site = cell.site;
          dx = site[0] - x0;
          dy = site[1] - y0;
          d2 = dx * dx + dy * dy;
          if (d2 < dc) dc = d2, cover = cell;
        }
      }

      if (cover) {
        var v00 = [x0, y0],
            v01 = [x0, y1],
            v11 = [x1, y1],
            v10 = [x1, y0];
        cover.halfedges.push(edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1, edges.push(createBorderEdge(site, v01, v11)) - 1, edges.push(createBorderEdge(site, v11, v10)) - 1, edges.push(createBorderEdge(site, v10, v00)) - 1);
      }
    } // Lastly delete any cells with no edges; these were entirely clipped.


    for (iCell = 0; iCell < nCells; ++iCell) {
      if (cell = cells[iCell]) {
        if (!cell.halfedges.length) {
          delete cells[iCell];
        }
      }
    }
  }

  var circlePool = [];
  var firstCircle;

  function Circle() {
    RedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }

  function attachCircle(arc) {
    var lArc = arc.P,
        rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site,
        cSite = arc.site,
        rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite[0],
        by = cSite[1],
        ax = lSite[0] - bx,
        ay = lSite[1] - by,
        cx = rSite[0] - bx,
        cy = rSite[1] - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -epsilon2) return;
    var ha = ax * ax + ay * ay,
        hc = cx * cx + cy * cy,
        x = (cy * ha - ay * hc) / d,
        y = (ax * hc - cx * ha) / d;
    var circle = circlePool.pop() || new Circle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

    arc.circle = circle;
    var before = null,
        node = circles._;

    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L;else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R;else {
          before = node;
          break;
        }
      }
    }

    circles.insert(before, circle);
    if (!before) firstCircle = circle;
  }
  function detachCircle(arc) {
    var circle = arc.circle;

    if (circle) {
      if (!circle.P) firstCircle = circle.N;
      circles.remove(circle);
      circlePool.push(circle);
      RedBlackNode(circle);
      arc.circle = null;
    }
  }

  var beachPool = [];

  function Beach() {
    RedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }

  function createBeach(site) {
    var beach = beachPool.pop() || new Beach();
    beach.site = site;
    return beach;
  }

  function detachBeach(beach) {
    detachCircle(beach);
    beaches.remove(beach);
    beachPool.push(beach);
    RedBlackNode(beach);
  }

  function removeBeach(beach) {
    var circle = beach.circle,
        x = circle.x,
        y = circle.cy,
        vertex = [x, y],
        previous = beach.P,
        next = beach.N,
        disappearing = [beach];
    detachBeach(beach);
    var lArc = previous;

    while (lArc.circle && Math.abs(x - lArc.circle.x) < epsilon$2 && Math.abs(y - lArc.circle.cy) < epsilon$2) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      detachBeach(lArc);
      lArc = previous;
    }

    disappearing.unshift(lArc);
    detachCircle(lArc);
    var rArc = next;

    while (rArc.circle && Math.abs(x - rArc.circle.x) < epsilon$2 && Math.abs(y - rArc.circle.cy) < epsilon$2) {
      next = rArc.N;
      disappearing.push(rArc);
      detachBeach(rArc);
      rArc = next;
    }

    disappearing.push(rArc);
    detachCircle(rArc);
    var nArcs = disappearing.length,
        iArc;

    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }

    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);
    attachCircle(lArc);
    attachCircle(rArc);
  }
  function addBeach(site) {
    var x = site[0],
        directrix = site[1],
        lArc,
        rArc,
        dxl,
        dxr,
        node = beaches._;

    while (node) {
      dxl = leftBreakPoint(node, directrix) - x;
      if (dxl > epsilon$2) node = node.L;else {
        dxr = x - rightBreakPoint(node, directrix);

        if (dxr > epsilon$2) {
          if (!node.R) {
            lArc = node;
            break;
          }

          node = node.R;
        } else {
          if (dxl > -epsilon$2) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -epsilon$2) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }

          break;
        }
      }
    }

    createCell(site);
    var newArc = createBeach(site);
    beaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;

    if (lArc === rArc) {
      detachCircle(lArc);
      rArc = createBeach(lArc.site);
      beaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
      attachCircle(lArc);
      attachCircle(rArc);
      return;
    }

    if (!rArc) {
      // && lArc
      newArc.edge = createEdge(lArc.site, newArc.site);
      return;
    } // else lArc !== rArc


    detachCircle(lArc);
    detachCircle(rArc);
    var lSite = lArc.site,
        ax = lSite[0],
        ay = lSite[1],
        bx = site[0] - ax,
        by = site[1] - ay,
        rSite = rArc.site,
        cx = rSite[0] - ax,
        cy = rSite[1] - ay,
        d = 2 * (bx * cy - by * cx),
        hb = bx * bx + by * by,
        hc = cx * cx + cy * cy,
        vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];
    setEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = createEdge(lSite, site, null, vertex);
    rArc.edge = createEdge(site, rSite, null, vertex);
    attachCircle(lArc);
    attachCircle(rArc);
  }

  function leftBreakPoint(arc, directrix) {
    var site = arc.site,
        rfocx = site[0],
        rfocy = site[1],
        pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site[0],
        lfocy = site[1],
        plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx,
        aby2 = 1 / pby2 - 1 / plby2,
        b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }

  function rightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return leftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site[1] === directrix ? site[0] : Infinity;
  }

  var epsilon$2 = 1e-6;
  var epsilon2 = 1e-12;
  var beaches;
  var cells;
  var circles;
  var edges;

  function triangleArea(a, b, c) {
    return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
  }

  function lexicographic(a, b) {
    return b[1] - a[1] || b[0] - a[0];
  }

  function Diagram(sites, extent) {
    var site = sites.sort(lexicographic).pop(),
        x,
        y,
        circle;
    edges = [];
    cells = new Array(sites.length);
    beaches = new RedBlackTree();
    circles = new RedBlackTree();

    while (true) {
      circle = firstCircle;

      if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {
        if (site[0] !== x || site[1] !== y) {
          addBeach(site);
          x = site[0], y = site[1];
        }

        site = sites.pop();
      } else if (circle) {
        removeBeach(circle.arc);
      } else {
        break;
      }
    }

    sortCellHalfedges();

    if (extent) {
      var x0 = +extent[0][0],
          y0 = +extent[0][1],
          x1 = +extent[1][0],
          y1 = +extent[1][1];
      clipEdges(x0, y0, x1, y1);
      clipCells(x0, y0, x1, y1);
    }

    this.edges = edges;
    this.cells = cells;
    beaches = circles = edges = cells = null;
  }
  Diagram.prototype = {
    constructor: Diagram,
    polygons: function polygons() {
      var edges = this.edges;
      return this.cells.map(function (cell) {
        var polygon = cell.halfedges.map(function (i) {
          return cellHalfedgeStart(cell, edges[i]);
        });
        polygon.data = cell.site.data;
        return polygon;
      });
    },
    triangles: function triangles() {
      var triangles = [],
          edges = this.edges;
      this.cells.forEach(function (cell, i) {
        if (!(m = (halfedges = cell.halfedges).length)) return;
        var site = cell.site,
            halfedges,
            j = -1,
            m,
            s0,
            e1 = edges[halfedges[m - 1]],
            s1 = e1.left === site ? e1.right : e1.left;

        while (++j < m) {
          s0 = s1;
          e1 = edges[halfedges[j]];
          s1 = e1.left === site ? e1.right : e1.left;

          if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
            triangles.push([site.data, s0.data, s1.data]);
          }
        }
      });
      return triangles;
    },
    links: function links() {
      return this.edges.filter(function (edge) {
        return edge.right;
      }).map(function (edge) {
        return {
          source: edge.left.data,
          target: edge.right.data
        };
      });
    },
    find: function find(x, y, radius) {
      var that = this,
          i0,
          i1 = that._found || 0,
          n = that.cells.length,
          cell; // Use the previously-found cell, or start with an arbitrary one.

      while (!(cell = that.cells[i1])) {
        if (++i1 >= n) return null;
      }

      var dx = x - cell.site[0],
          dy = y - cell.site[1],
          d2 = dx * dx + dy * dy; // Traverse the half-edges to find a closer cell, if any.

      do {
        cell = that.cells[i0 = i1], i1 = null;
        cell.halfedges.forEach(function (e) {
          var edge = that.edges[e],
              v = edge.left;
          if ((v === cell.site || !v) && !(v = edge.right)) return;
          var vx = x - v[0],
              vy = y - v[1],
              v2 = vx * vx + vy * vy;
          if (v2 < d2) d2 = v2, i1 = v.index;
        });
      } while (i1 !== null);

      that._found = i0;
      return radius == null || d2 <= radius * radius ? cell.site : null;
    }
  };

  function voronoi$1 () {
    var x$1 = x,
        y$1 = y,
        extent = null;

    function voronoi(data) {
      return new Diagram(data.map(function (d, i) {
        var s = [Math.round(x$1(d, i, data) / epsilon$2) * epsilon$2, Math.round(y$1(d, i, data) / epsilon$2) * epsilon$2];
        s.index = i;
        s.data = d;
        return s;
      }), extent);
    }

    voronoi.polygons = function (data) {
      return voronoi(data).polygons();
    };

    voronoi.links = function (data) {
      return voronoi(data).links();
    };

    voronoi.triangles = function (data) {
      return voronoi(data).triangles();
    };

    voronoi.x = function (_) {
      return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), voronoi) : x$1;
    };

    voronoi.y = function (_) {
      return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), voronoi) : y$1;
    };

    voronoi.extent = function (_) {
      return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
    };

    voronoi.size = function (_) {
      return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
    };

    return voronoi;
  }

  /**
   * @private
   * @param {Array<Array<number>>} coords representing a polygon
   * @returns {Feature<Polygon>} polygon
   */

  function coordsToPolygon(coords) {
    coords = coords.slice();
    coords.push(coords[0]);
    return polygon([coords]);
  }
  /**
   * Takes a FeatureCollection of points, and a bounding box, and returns a FeatureCollection
   * of Voronoi polygons.
   *
   * The Voronoi algorithim used comes from the d3-voronoi package.
   *
   * @name voronoi
   * @param {FeatureCollection<Point>} points to find the Voronoi polygons around.
   * @param {Object} [options={}] Optional parameters
   * @param {number[]} [options.bbox=[-180, -85, 180, -85]] clipping rectangle, in [minX, minY, maxX, MaxY] order.
   * @returns {FeatureCollection<Polygon>} a set of polygons, one per input point.
   * @example
   * var options = {
   *   bbox: [-70, 40, -60, 60]
   * };
   * var points = turf.randomPoint(100, options);
   * var voronoiPolygons = turf.voronoi(points, options);
   *
   * //addToMap
   * var addToMap = [voronoiPolygons, points];
   */


  function voronoi(points, options) {
    // Optional params
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var bbox = options.bbox || [-180, -85, 180, 85]; // Input Validation

    if (!points) throw new Error("points is required");
    if (!Array.isArray(bbox)) throw new Error("bbox is invalid");
    collectionOf(points, "Point", "points"); // Main

    return featureCollection$1(voronoi$1().x(function (feature) {
      return feature.geometry.coordinates[0];
    }).y(function (feature) {
      return feature.geometry.coordinates[1];
    }).extent([[bbox[0], bbox[1]], [bbox[2], bbox[3]]]).polygons(points.features).map(coordsToPolygon));
  }

  /**
   * Takes a {@link Point} and calculates the ellipse polygon given two semi-axes expressed in variable units and steps for precision.
   *
   * @param {Coord} center center point
   * @param {number} xSemiAxis semi (major) axis of the ellipse along the x-axis
   * @param {number} ySemiAxis semi (minor) axis of the ellipse along the y-axis
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.angle=0] angle of rotation in decimal degrees, positive clockwise
   * @param {Coord} [options.pivot='origin'] point around which the rotation will be performed
   * @param {number} [options.steps=64] number of steps
   * @param {string} [options.units='kilometers'] unit of measurement for axes
   * @param {Object} [options.properties={}] properties
   * @returns {Feature<Polygon>} ellipse polygon
   * @example
   * var center = [-75, 40];
   * var xSemiAxis = 5;
   * var ySemiAxis = 2;
   * var ellipse = turf.ellipse(center, xSemiAxis, ySemiAxis);
   *
   * //addToMap
   * var addToMap = [turf.point(center), ellipse]
   */

  function ellipse(center, xSemiAxis, ySemiAxis, options) {
    // Optional params
    options = options || {};
    var steps = options.steps || 64;
    var units = options.units || "kilometers";
    var angle = options.angle || 0;
    var pivot = options.pivot || center;
    var properties = options.properties || center.properties || {}; // validation

    if (!center) throw new Error("center is required");
    if (!xSemiAxis) throw new Error("xSemiAxis is required");
    if (!ySemiAxis) throw new Error("ySemiAxis is required");
    if (!isObject(options)) throw new Error("options must be an object");
    if (!isNumber(steps)) throw new Error("steps must be a number");
    if (!isNumber(angle)) throw new Error("angle must be a number");
    var centerCoords = getCoord(center);

    if (units === "degrees") {
      var angleRad = degreesToRadians(angle);
    } else {
      xSemiAxis = rhumbDestination(center, xSemiAxis, 90, {
        units: units
      });
      ySemiAxis = rhumbDestination(center, ySemiAxis, 0, {
        units: units
      });
      xSemiAxis = getCoord(xSemiAxis)[0] - centerCoords[0];
      ySemiAxis = getCoord(ySemiAxis)[1] - centerCoords[1];
    }

    var coordinates = [];

    for (var i = 0; i < steps; i += 1) {
      var stepAngle = i * -360 / steps;
      var x = xSemiAxis * ySemiAxis / Math.sqrt(Math.pow(ySemiAxis, 2) + Math.pow(xSemiAxis, 2) * Math.pow(getTanDeg(stepAngle), 2));
      var y = xSemiAxis * ySemiAxis / Math.sqrt(Math.pow(xSemiAxis, 2) + Math.pow(ySemiAxis, 2) / Math.pow(getTanDeg(stepAngle), 2));
      if (stepAngle < -90 && stepAngle >= -270) x = -x;
      if (stepAngle < -180 && stepAngle >= -360) y = -y;

      if (units === "degrees") {
        var newx = x * Math.cos(angleRad) + y * Math.sin(angleRad);
        var newy = y * Math.cos(angleRad) - x * Math.sin(angleRad);
        x = newx;
        y = newy;
      }

      coordinates.push([x + centerCoords[0], y + centerCoords[1]]);
    }

    coordinates.push(coordinates[0]);

    if (units === "degrees") {
      return polygon([coordinates], properties);
    } else {
      return transformRotate(polygon([coordinates], properties), angle, {
        pivot: pivot
      });
    }
  }
  /**
   * Get Tan Degrees
   *
   * @private
   * @param {number} deg Degrees
   * @returns {number} Tan Degrees
   */


  function getTanDeg(deg) {
    var rad = deg * Math.PI / 180;
    return Math.tan(rad);
  }

  /**
   * Takes a {@link Feature} or {@link FeatureCollection} and returns the mean center. Can be weighted.
   *
   * @name centerMean
   * @param {GeoJSON} geojson GeoJSON to be centered
   * @param {Object} [options={}] Optional parameters
   * @param {Object} [options.properties={}] Translate GeoJSON Properties to Point
   * @param {Object} [options.bbox={}] Translate GeoJSON BBox to Point
   * @param {Object} [options.id={}] Translate GeoJSON Id to Point
   * @param {string} [options.weight] the property name used to weight the center
   * @returns {Feature<Point>} a Point feature at the mean center point of all input features
   * @example
   * var features = turf.featureCollection([
   *   turf.point([-97.522259, 35.4691], {value: 10}),
   *   turf.point([-97.502754, 35.463455], {value: 3}),
   *   turf.point([-97.508269, 35.463245], {value: 5})
   * ]);
   *
   * var options = {weight: "value"}
   * var mean = turf.centerMean(features, options);
   *
   * //addToMap
   * var addToMap = [features, mean]
   * mean.properties['marker-size'] = 'large';
   * mean.properties['marker-color'] = '#000';
   */

  function centerMean(geojson, // To-Do include Typescript AllGeoJSON
  options) {
    if (options === void 0) {
      options = {};
    }

    var sumXs = 0;
    var sumYs = 0;
    var sumNs = 0;
    geomEach$1(geojson, function (geom, featureIndex, properties) {
      var weight = options.weight ? properties === null || properties === void 0 ? void 0 : properties[options.weight] : undefined;
      weight = weight === undefined || weight === null ? 1 : weight;
      if (!isNumber(weight)) throw new Error("weight value must be a number for feature index " + featureIndex);
      weight = Number(weight);

      if (weight > 0) {
        coordEach$1(geom, function (coord) {
          sumXs += coord[0] * weight;
          sumYs += coord[1] * weight;
          sumNs += weight;
        });
      }
    });
    return point([sumXs / sumNs, sumYs / sumNs], options.properties, options);
  }

  /**
   * Takes a {@link FeatureCollection} of points and calculates the median center,
   * algorithimically. The median center is understood as the point that is
   * requires the least total travel from all other points.
   *
   * Turfjs has four different functions for calculating the center of a set of
   * data. Each is useful depending on circumstance.
   *
   * `@turf/center` finds the simple center of a dataset, by finding the
   * midpoint between the extents of the data. That is, it divides in half the
   * farthest east and farthest west point as well as the farthest north and
   * farthest south.
   *
   * `@turf/center-of-mass` imagines that the dataset is a sheet of paper.
   * The center of mass is where the sheet would balance on a fingertip.
   *
   * `@turf/center-mean` takes the averages of all the coordinates and
   * produces a value that respects that. Unlike `@turf/center`, it is
   * sensitive to clusters and outliers. It lands in the statistical middle of a
   * dataset, not the geographical. It can also be weighted, meaning certain
   * points are more important than others.
   *
   * `@turf/center-median` takes the mean center and tries to find, iteratively,
   * a new point that requires the least amount of travel from all the points in
   * the dataset. It is not as sensitive to outliers as `@turf/center-mean`, but it is
   * attracted to clustered data. It, too, can be weighted.
   *
   * **Bibliography**
   *
   * Harold W. Kuhn and Robert E. Kuenne, “An Efficient Algorithm for the
   * Numerical Solution of the Generalized Weber Problem in Spatial
   * Economics,” _Journal of Regional Science_ 4, no. 2 (1962): 21–33,
   * doi:{@link https://doi.org/10.1111/j.1467-9787.1962.tb00902.x}.
   *
   * James E. Burt, Gerald M. Barber, and David L. Rigby, _Elementary
   * Statistics for Geographers_, 3rd ed., New York: The Guilford
   * Press, 2009, 150–151.
   *
   * @name centerMedian
   * @param {FeatureCollection<any>} features Any GeoJSON Feature Collection
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.weight] the property name used to weight the center
   * @param {number} [options.tolerance=0.001] the difference in distance between candidate medians at which point the algorighim stops iterating.
   * @param {number} [options.counter=10] how many attempts to find the median, should the tolerance be insufficient.
   * @returns {Feature<Point>} The median center of the collection
   * @example
   * var points = turf.points([[0, 0], [1, 0], [0, 1], [5, 8]]);
   * var medianCenter = turf.centerMedian(points);
   *
   * //addToMap
   * var addToMap = [points, medianCenter]
   */

  function centerMedian(features, options) {
    if (options === void 0) {
      options = {};
    } // Optional params


    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var counter = options.counter || 10;
    if (!isNumber(counter)) throw new Error("counter must be a number");
    var weightTerm = options.weight; // Calculate mean center:

    var meanCenter = centerMean(features, {
      weight: options.weight
    }); // Calculate center of every feature:

    var centroids = featureCollection$1([]);
    featureEach$2(features, function (feature) {
      var _a;

      centroids.features.push(centroid(feature, {
        properties: {
          weight: (_a = feature.properties) === null || _a === void 0 ? void 0 : _a[weightTerm]
        }
      }));
    });
    var properties = {
      tolerance: options.tolerance,
      medianCandidates: []
    };
    return findMedian(meanCenter.geometry.coordinates, [0, 0], centroids, properties, counter);
  }
  /**
   * Recursive function to find new candidate medians.
   *
   * @private
   * @param {Position} candidateMedian current candidate median
   * @param {Position} previousCandidate the previous candidate median
   * @param {FeatureCollection<Point>} centroids the collection of centroids whose median we are determining
   * @param {number} counter how many attempts to try before quitting.
   * @returns {Feature<Point>} the median center of the dataset.
   */


  function findMedian(candidateMedian, previousCandidate, centroids, properties, counter) {
    var tolerance = properties.tolerance || 0.001;
    var candidateXsum = 0;
    var candidateYsum = 0;
    var kSum = 0;
    var centroidCount = 0;
    featureEach$2(centroids, function (theCentroid) {
      var _a;

      var weightValue = (_a = theCentroid.properties) === null || _a === void 0 ? void 0 : _a.weight;
      var weight = weightValue === undefined || weightValue === null ? 1 : weightValue;
      weight = Number(weight);
      if (!isNumber(weight)) throw new Error("weight value must be a number");

      if (weight > 0) {
        centroidCount += 1;
        var distanceFromCandidate = weight * distance$1(theCentroid, candidateMedian);
        if (distanceFromCandidate === 0) distanceFromCandidate = 1;
        var k = weight / distanceFromCandidate;
        candidateXsum += theCentroid.geometry.coordinates[0] * k;
        candidateYsum += theCentroid.geometry.coordinates[1] * k;
        kSum += k;
      }
    });
    if (centroidCount < 1) throw new Error("no features to measure");
    var candidateX = candidateXsum / kSum;
    var candidateY = candidateYsum / kSum;

    if (centroidCount === 1 || counter === 0 || Math.abs(candidateX - previousCandidate[0]) < tolerance && Math.abs(candidateY - previousCandidate[1]) < tolerance) {
      return point([candidateX, candidateY], {
        medianCandidates: properties.medianCandidates
      });
    } else {
      properties.medianCandidates.push([candidateX, candidateY]);
      return findMedian([candidateX, candidateY], candidateMedian, centroids, properties, counter - 1);
    }
  }

  /**
   * Takes a {@link FeatureCollection} and returns a standard deviational ellipse,
   * also known as a “directional distribution.” The standard deviational ellipse
   * aims to show the direction and the distribution of a dataset by drawing
   * an ellipse that contains about one standard deviation’s worth (~ 70%) of the
   * data.
   *
   * This module mirrors the functionality of [Directional Distribution](http://desktop.arcgis.com/en/arcmap/10.3/tools/spatial-statistics-toolbox/directional-distribution.htm)
   * in ArcGIS and the [QGIS Standard Deviational Ellipse Plugin](http://arken.nmbu.no/~havatv/gis/qgisplugins/SDEllipse/)
   *
   * **Bibliography**
   *
   * • Robert S. Yuill, “The Standard Deviational Ellipse; An Updated Tool for
   * Spatial Description,” _Geografiska Annaler_ 53, no. 1 (1971): 28–39,
   * doi:{@link https://doi.org/10.2307/490885|10.2307/490885}.
   *
   * • Paul Hanly Furfey, “A Note on Lefever’s “Standard Deviational Ellipse,”
   * _American Journal of Sociology_ 33, no. 1 (1927): 94—98,
   * doi:{@link https://doi.org/10.1086/214336|10.1086/214336}.
   *
   *
   * @name standardDeviationalEllipse
   * @param {FeatureCollection<Point>} points GeoJSON points
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.weight] the property name used to weight the center
   * @param {number} [options.steps=64] number of steps for the polygon
   * @param {Object} [options.properties={}] properties to pass to the resulting ellipse
   * @returns {Feature<Polygon>} an elliptical Polygon that includes approximately 1 SD of the dataset within it.
   * @example
   *
   * var bbox = [-74, 40.72, -73.98, 40.74];
   * var points = turf.randomPoint(400, {bbox: bbox});
   * var sdEllipse = turf.standardDeviationalEllipse(points);
   *
   * //addToMap
   * var addToMap = [points, sdEllipse];
   *
   */

  function standardDeviationalEllipse(points, options) {
    // Optional params
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var steps = options.steps || 64;
    var weightTerm = options.weight;
    var properties = options.properties || {}; // Validation:

    if (!isNumber(steps)) throw new Error("steps must be a number");
    if (!isObject(properties)) throw new Error("properties must be a number"); // Calculate mean center & number of features:

    var numberOfFeatures = coordAll$1(points).length;
    var meanCenter = centerMean(points, {
      weight: weightTerm
    }); // Calculate angle of rotation:
    // [X, Y] = mean center of all [x, y].
    // theta = arctan( (A + B) / C )
    // A = sum((x - X)^2) - sum((y - Y)^2)
    // B = sqrt(A^2 + 4(sum((x - X)(y - Y))^2))
    // C = 2(sum((x - X)(y - Y)))

    var xDeviationSquaredSum = 0;
    var yDeviationSquaredSum = 0;
    var xyDeviationSum = 0;
    featureEach$2(points, function (point) {
      var weight = point.properties[weightTerm] || 1;
      var deviation = getDeviations(getCoords(point), getCoords(meanCenter));
      xDeviationSquaredSum += Math.pow(deviation.x, 2) * weight;
      yDeviationSquaredSum += Math.pow(deviation.y, 2) * weight;
      xyDeviationSum += deviation.x * deviation.y * weight;
    });
    var bigA = xDeviationSquaredSum - yDeviationSquaredSum;
    var bigB = Math.sqrt(Math.pow(bigA, 2) + 4 * Math.pow(xyDeviationSum, 2));
    var bigC = 2 * xyDeviationSum;
    var theta = Math.atan((bigA + bigB) / bigC);
    var thetaDeg = theta * 180 / Math.PI; // Calculate axes:
    // sigmaX = sqrt((1 / n - 2) * sum((((x - X) * cos(theta)) - ((y - Y) * sin(theta)))^2))
    // sigmaY = sqrt((1 / n - 2) * sum((((x - X) * sin(theta)) - ((y - Y) * cos(theta)))^2))

    var sigmaXsum = 0;
    var sigmaYsum = 0;
    var weightsum = 0;
    featureEach$2(points, function (point) {
      var weight = point.properties[weightTerm] || 1;
      var deviation = getDeviations(getCoords(point), getCoords(meanCenter));
      sigmaXsum += Math.pow(deviation.x * Math.cos(theta) - deviation.y * Math.sin(theta), 2) * weight;
      sigmaYsum += Math.pow(deviation.x * Math.sin(theta) + deviation.y * Math.cos(theta), 2) * weight;
      weightsum += weight;
    });
    var sigmaX = Math.sqrt(2 * sigmaXsum / weightsum);
    var sigmaY = Math.sqrt(2 * sigmaYsum / weightsum);
    var theEllipse = ellipse(meanCenter, sigmaX, sigmaY, {
      units: "degrees",
      angle: thetaDeg,
      steps: steps,
      properties: properties
    });
    var pointsWithinEllipse = pointsWithinPolygon(points, featureCollection$1([theEllipse]));
    var standardDeviationalEllipseProperties = {
      meanCenterCoordinates: getCoords(meanCenter),
      semiMajorAxis: sigmaX,
      semiMinorAxis: sigmaY,
      numberOfFeatures: numberOfFeatures,
      angle: thetaDeg,
      percentageWithinEllipse: 100 * coordAll$1(pointsWithinEllipse).length / numberOfFeatures
    };
    theEllipse.properties.standardDeviationalEllipse = standardDeviationalEllipseProperties;
    return theEllipse;
  }
  /**
   * Get x_i - X and y_i - Y
   *
   * @private
   * @param {Array} coordinates Array of [x_i, y_i]
   * @param {Array} center Array of [X, Y]
   * @returns {Object} { x: n, y: m }
   */


  function getDeviations(coordinates, center) {
    return {
      x: coordinates[0] - center[0],
      y: coordinates[1] - center[1]
    };
  }

  /**
   * Finds the angle formed by two adjacent segments defined by 3 points. The result will be the (positive clockwise)
   * angle with origin on the `startPoint-midPoint` segment, or its explementary angle if required.
   *
   * @name angle
   * @param {Coord} startPoint Start Point Coordinates
   * @param {Coord} midPoint Mid Point Coordinates
   * @param {Coord} endPoint End Point Coordinates
   * @param {Object} [options={}] Optional parameters
   * @param {boolean} [options.explementary=false] Returns the explementary angle instead (360 - angle)
   * @param {boolean} [options.mercator=false] if calculations should be performed over Mercator or WGS84 projection
   * @returns {number} Angle between the provided points, or its explementary.
   * @example
   * turf.angle([5, 5], [5, 6], [3, 4]);
   * //=45
   */

  function angle(startPoint, midPoint, endPoint, options) {
    if (options === void 0) {
      options = {};
    } // Optional Parameters


    if (!isObject(options)) {
      throw new Error("options is invalid");
    } // Validation


    if (!startPoint) {
      throw new Error("startPoint is required");
    }

    if (!midPoint) {
      throw new Error("midPoint is required");
    }

    if (!endPoint) {
      throw new Error("endPoint is required");
    } // Rename to shorter variables


    var A = startPoint;
    var O = midPoint;
    var B = endPoint; // Main

    var azimuthAO = bearingToAzimuth(options.mercator !== true ? bearing(A, O) : rhumbBearing(A, O));
    var azimuthBO = bearingToAzimuth(options.mercator !== true ? bearing(B, O) : rhumbBearing(B, O));
    var angleAO = Math.abs(azimuthAO - azimuthBO); // Explementary angle

    if (options.explementary === true) {
      return 360 - angleAO;
    }

    return angleAO;
  }

  /**
   * Smooths a {@link Polygon} or {@link MultiPolygon}. Based on [Chaikin's algorithm](http://graphics.cs.ucdavis.edu/education/CAGDNotes/Chaikins-Algorithm/Chaikins-Algorithm.html).
   * Warning: may create degenerate polygons.
   *
   * @name polygonSmooth
   * @param {FeatureCollection|Feature<Polygon|MultiPolygon>} inputPolys (Multi)Polygon(s) to smooth
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.iterations=1] THe number of times to smooth the polygon. A higher value means a smoother polygon.
   * @returns {FeatureCollection<Polygon>} FeatureCollection containing the smoothed polygon/poylgons
   * @example
   * var polygon = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);
   *
   * var smoothed = turf.polygonSmooth(polygon, {iterations: 3})
   *
   * //addToMap
   * var addToMap = [smoothed, polygon];
   */

  function polygonSmooth(inputPolys, options) {
    var outPolys = []; // Optional parameters

    var iterations = options.iterations || 1;
    if (!inputPolys) throw new Error("inputPolys is required");
    geomEach$1(inputPolys, function (geom, geomIndex, properties) {
      var outCoords;
      var poly;
      var tempOutput;

      switch (geom.type) {
        case "Polygon":
          outCoords = [[]];

          for (var i = 0; i < iterations; i++) {
            tempOutput = [[]];
            poly = geom;
            if (i > 0) poly = polygon(outCoords).geometry;
            processPolygon(poly, tempOutput);
            outCoords = tempOutput.slice(0);
          }

          outPolys.push(polygon(outCoords, properties));
          break;

        case "MultiPolygon":
          outCoords = [[[]]];

          for (var y = 0; y < iterations; y++) {
            tempOutput = [[[]]];
            poly = geom;
            if (y > 0) poly = multiPolygon(outCoords).geometry;
            processMultiPolygon(poly, tempOutput);
            outCoords = tempOutput.slice(0);
          }

          outPolys.push(multiPolygon(outCoords, properties));
          break;

        default:
          throw new Error("geometry is invalid, must be Polygon or MultiPolygon");
      }
    });
    return featureCollection$1(outPolys);
  }
  /**
   * @param {poly} poly to process
   * @param {poly} tempOutput to place the results in
   * @private
   */


  function processPolygon(poly, tempOutput) {
    var prevGeomIndex = 0;
    var subtractCoordIndex = 0;
    coordEach$1(poly, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
      if (geometryIndex > prevGeomIndex) {
        prevGeomIndex = geometryIndex;
        subtractCoordIndex = coordIndex;
        tempOutput.push([]);
      }

      var realCoordIndex = coordIndex - subtractCoordIndex;
      var p1 = poly.coordinates[geometryIndex][realCoordIndex + 1];
      var p0x = currentCoord[0];
      var p0y = currentCoord[1];
      var p1x = p1[0];
      var p1y = p1[1];
      tempOutput[geometryIndex].push([0.75 * p0x + 0.25 * p1x, 0.75 * p0y + 0.25 * p1y]);
      tempOutput[geometryIndex].push([0.25 * p0x + 0.75 * p1x, 0.25 * p0y + 0.75 * p1y]);
    }, true);
    tempOutput.forEach(function (ring) {
      ring.push(ring[0]);
    });
  }
  /**
   * @param {poly} poly to process
   * @param {poly} tempOutput to place the results in
   * @private
   */


  function processMultiPolygon(poly, tempOutput) {
    var prevGeomIndex = 0;
    var subtractCoordIndex = 0;
    var prevMultiIndex = 0;
    coordEach$1(poly, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
      if (multiFeatureIndex > prevMultiIndex) {
        prevMultiIndex = multiFeatureIndex;
        subtractCoordIndex = coordIndex;
        tempOutput.push([[]]);
      }

      if (geometryIndex > prevGeomIndex) {
        prevGeomIndex = geometryIndex;
        subtractCoordIndex = coordIndex;
        tempOutput[multiFeatureIndex].push([]);
      }

      var realCoordIndex = coordIndex - subtractCoordIndex;
      var p1 = poly.coordinates[multiFeatureIndex][geometryIndex][realCoordIndex + 1];
      var p0x = currentCoord[0];
      var p0y = currentCoord[1];
      var p1x = p1[0];
      var p1y = p1[1];
      tempOutput[multiFeatureIndex][geometryIndex].push([0.75 * p0x + 0.25 * p1x, 0.75 * p0y + 0.25 * p1y]);
      tempOutput[multiFeatureIndex][geometryIndex].push([0.25 * p0x + 0.75 * p1x, 0.25 * p0y + 0.75 * p1y]);
    }, true);
    tempOutput.forEach(function (poly) {
      poly.forEach(function (ring) {
        ring.push(ring[0]);
      });
    });
  }

  /**
   * calcualte the Minkowski p-norm distance between two features.
   * @param feature1 point feature
   * @param feature2 point feature
   * @param p p-norm 1=<p<=infinity 1: Manhattan distance 2: Euclidean distance
   */

  function pNormDistance(feature1, feature2, p) {
    if (p === void 0) {
      p = 2;
    }

    var coordinate1 = getCoord(feature1);
    var coordinate2 = getCoord(feature2);
    var xDiff = coordinate1[0] - coordinate2[0];
    var yDiff = coordinate1[1] - coordinate2[1];

    if (p === 1) {
      return Math.abs(xDiff) + Math.abs(yDiff);
    }

    return Math.pow(Math.pow(xDiff, p) + Math.pow(yDiff, p), 1 / p);
  }
  /**
   *
   *
   * @name distanceWeight
   * @param {FeatureCollection<any>} fc FeatureCollection.
   * @param {Object} [options] option object.
   * @param {number} [options.threshold=10000] If the distance between neighbor and
   * target features is greater than threshold, the weight of that neighbor is 0.
   * @param {number} [options.p=2] Minkowski p-norm distance parameter.
   * 1: Manhattan distance. 2: Euclidean distance. 1=<p<=infinity.
   * @param {boolean} [options.binary=false] If true, weight=1 if d <= threshold otherwise weight=0.
   *  If false, weight=Math.pow(d, alpha).
   * @param {number} [options.alpha=-1] distance decay parameter.
   * A big value means the weight decay quickly as distance increases.
   * @param {boolean} [options.standardization=false] row standardization.
   * @returns {Array<Array<number>>} distance weight matrix.
   * @example
   *
   * var bbox = [-65, 40, -63, 42];
   * var dataset = turf.randomPoint(100, { bbox: bbox });
   * var result = turf.distanceWeight(dataset);
   */

  function distanceWeight(fc, options) {
    options = options || {};
    var threshold = options.threshold || 10000;
    var p = options.p || 2;
    var binary = options.binary || false;
    var alpha = options.alpha || -1;
    var rowTransform = options.standardization || false;
    var features = [];
    featureEach$2(fc, function (feature) {
      features.push(centroid(feature));
    }); // computing the distance between the features

    var weights = [];

    for (var i = 0; i < features.length; i++) {
      weights[i] = [];
    }

    for (var i = 0; i < features.length; i++) {
      for (var j = i; j < features.length; j++) {
        if (i === j) {
          weights[i][j] = 0;
        }

        var dis = pNormDistance(features[i], features[j], p);
        weights[i][j] = dis;
        weights[j][i] = dis;
      }
    } // binary or distance decay


    for (var i = 0; i < features.length; i++) {
      for (var j = 0; j < features.length; j++) {
        var dis = weights[i][j];

        if (dis === 0) {
          continue;
        }

        if (binary) {
          if (dis <= threshold) {
            weights[i][j] = 1.0;
          } else {
            weights[i][j] = 0.0;
          }
        } else {
          if (dis <= threshold) {
            weights[i][j] = Math.pow(dis, alpha);
          } else {
            weights[i][j] = 0.0;
          }
        }
      }
    }

    if (rowTransform) {
      for (var i = 0; i < features.length; i++) {
        var rowSum = weights[i].reduce(function (sum, currentVal) {
          return sum + currentVal;
        }, 0);

        for (var j = 0; j < features.length; j++) {
          weights[i][j] = weights[i][j] / rowSum;
        }
      }
    }

    return weights;
  }

  /**
   * Moran's I measures patterns of attribute values associated with features.
   * The method reveal whether similar values tend to occur near each other,
   * or whether high or low values are interspersed.
   *
   * Moran's I > 0 means a clusterd pattern.
   * Moran's I < 0 means a dispersed pattern.
   * Moran's I = 0 means a random pattern.
   *
   * In order to test the significance of the result. The z score is calculated.
   * A positive enough z-score (ex. >1.96) indicates clustering,
   * while a negative enough z-score (ex. <-1.96) indicates a dispersed pattern.
   *
   * the z-score can be calculated based on a normal or random assumption.
   *
   * **Bibliography***
   *
   * 1. [Moran's I](https://en.wikipedia.org/wiki/Moran%27s_I)
   *
   * 2. [pysal](http://pysal.readthedocs.io/en/latest/index.html)
   *
   * 3. Andy Mitchell, The ESRI Guide to GIS Analysis Volume 2: Spatial Measurements & Statistics.
   *
   * @name moranIndex
   * @param {FeatureCollection<any>} fc
   * @param {Object} options
   * @param {string} options.inputField the property name, must contain numeric values
   * @param {number} [options.threshold=100000] the distance threshold
   * @param {number} [options.p=2] the Minkowski p-norm distance parameter
   * @param {boolean} [options.binary=false] whether transfrom the distance to binary
   * @param {number} [options.alpha=-1] the distance decay parameter
   * @param {boolean} [options.standardization=true] wheter row standardization the distance
   * @returns {MoranIndex}
   * @example
   *
   * const bbox = [-65, 40, -63, 42];
   * const dataset = turf.randomPoint(100, { bbox: bbox });
   *
   * const result = turf.moranIndex(dataset, {
   *   inputField: 'CRIME',
   * });
   */

  function index$4 (fc, options) {
    var inputField = options.inputField;
    var threshold = options.threshold || 100000;
    var p = options.p || 2;
    var binary = options.binary || false;
    var alpha = options.alpha || -1;
    var standardization = options.standardization || true;
    var weight = distanceWeight(fc, {
      alpha: alpha,
      binary: binary,
      p: p,
      standardization: standardization,
      threshold: threshold
    });
    var y = [];
    featureEach$2(fc, function (feature) {
      var feaProperties = feature.properties || {}; // validate inputField exists

      y.push(feaProperties[inputField]);
    });
    var yMean = mean(y);
    var yVar = variance(y);
    var weightSum = 0;
    var s0 = 0;
    var s1 = 0;
    var s2 = 0;
    var n = weight.length; // validate y.length is the same as weight.length

    for (var i = 0; i < n; i++) {
      var subS2 = 0;

      for (var j = 0; j < n; j++) {
        weightSum += weight[i][j] * (y[i] - yMean) * (y[j] - yMean);
        s0 += weight[i][j];
        s1 += Math.pow(weight[i][j] + weight[j][i], 2);
        subS2 += weight[i][j] + weight[j][i];
      }

      s2 += Math.pow(subS2, 2);
    }

    s1 = 0.5 * s1;
    var moranIndex = weightSum / s0 / yVar;
    var expectedMoranIndex = -1 / (n - 1);
    var vNum = n * n * s1 - n * s2 + 3 * (s0 * s0);
    var vDen = (n - 1) * (n + 1) * (s0 * s0);
    var vNorm = vNum / vDen - expectedMoranIndex * expectedMoranIndex;
    var stdNorm = Math.sqrt(vNorm);
    var zNorm = (moranIndex - expectedMoranIndex) / stdNorm;
    return {
      expectedMoranIndex: expectedMoranIndex,
      moranIndex: moranIndex,
      stdNorm: stdNorm,
      zNorm: zNorm
    };
  }
  /**
   * get mean of a list
   * @param {number[]} y
   * @returns {number}
   *
   */

  function mean(y) {
    var sum = 0;

    for (var _i = 0, y_1 = y; _i < y_1.length; _i++) {
      var item = y_1[_i];
      sum += item;
    }

    return sum / y.length;
  }
  /**
   * get variance of a list
   * @param {number[]} y
   * @returns {number}
   *
   */


  function variance(y) {
    var yMean = mean(y);
    var sum = 0;

    for (var _i = 0, y_2 = y; _i < y_2.length; _i++) {
      var item = y_2[_i];
      sum += Math.pow(item - yMean, 2);
    }

    return sum / y.length;
  }
  /**
   * @typedef {Object} MoranIndex
   * @property {number} moranIndex the moran's Index of the observed feature set
   * @property {number} expectedMoranIndex the moran's Index of the random distribution
   * @property {number} stdNorm the standard devitaion of the random distribution
   * @property {number} zNorm the z-score of the observe samples with regard to the random distribution
   */

  /**
   * Converts a WGS84 GeoJSON object into Mercator (EPSG:900913) projection
   *
   * @name toMercator
   * @param {GeoJSON|Position} geojson WGS84 GeoJSON object
   * @param {Object} [options] Optional parameters
   * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
   * @returns {GeoJSON} Projected GeoJSON
   * @example
   * var pt = turf.point([-71,41]);
   * var converted = turf.toMercator(pt);
   *
   * //addToMap
   * var addToMap = [pt, converted];
   */

  function toMercator(geojson, options) {
    if (options === void 0) {
      options = {};
    }

    return convert(geojson, "mercator", options);
  }
  /**
   * Converts a Mercator (EPSG:900913) GeoJSON object into WGS84 projection
   *
   * @name toWgs84
   * @param {GeoJSON|Position} geojson Mercator GeoJSON object
   * @param {Object} [options] Optional parameters
   * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
   * @returns {GeoJSON} Projected GeoJSON
   * @example
   * var pt = turf.point([-7903683.846322424, 5012341.663847514]);
   * var converted = turf.toWgs84(pt);
   *
   * //addToMap
   * var addToMap = [pt, converted];
   */

  function toWgs84(geojson, options) {
    if (options === void 0) {
      options = {};
    }

    return convert(geojson, "wgs84", options);
  }
  /**
   * Converts a GeoJSON coordinates to the defined `projection`
   *
   * @private
   * @param {GeoJSON} geojson GeoJSON Feature or Geometry
   * @param {string} projection defines the projection system to convert the coordinates to
   * @param {Object} [options] Optional parameters
   * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)
   * @returns {GeoJSON} Converted GeoJSON
   */

  function convert(geojson, projection, options) {
    if (options === void 0) {
      options = {};
    } // Optional parameters


    options = options || {};
    var mutate = options.mutate; // Validation

    if (!geojson) throw new Error("geojson is required"); // Handle Position

    if (Array.isArray(geojson) && isNumber(geojson[0])) geojson = projection === "mercator" ? convertToMercator(geojson) : convertToWgs84(geojson); // Handle GeoJSON
    else {
        // Handle possible data mutation
        if (mutate !== true) geojson = clone(geojson);
        coordEach$1(geojson, function (coord) {
          var newCoord = projection === "mercator" ? convertToMercator(coord) : convertToWgs84(coord);
          coord[0] = newCoord[0];
          coord[1] = newCoord[1];
        });
      }
    return geojson;
  }
  /**
   * Convert lon/lat values to 900913 x/y.
   * (from https://github.com/mapbox/sphericalmercator)
   *
   * @private
   * @param {Array<number>} lonLat WGS84 point
   * @returns {Array<number>} Mercator [x, y] point
   */


  function convertToMercator(lonLat) {
    var D2R = Math.PI / 180,
        // 900913 properties
    A = 6378137.0,
        MAXEXTENT = 20037508.342789244; // compensate longitudes passing the 180th meridian
    // from https://github.com/proj4js/proj4js/blob/master/lib/common/adjust_lon.js

    var adjusted = Math.abs(lonLat[0]) <= 180 ? lonLat[0] : lonLat[0] - sign(lonLat[0]) * 360;
    var xy = [A * adjusted * D2R, A * Math.log(Math.tan(Math.PI * 0.25 + 0.5 * lonLat[1] * D2R))]; // if xy value is beyond maxextent (e.g. poles), return maxextent

    if (xy[0] > MAXEXTENT) xy[0] = MAXEXTENT;
    if (xy[0] < -MAXEXTENT) xy[0] = -MAXEXTENT;
    if (xy[1] > MAXEXTENT) xy[1] = MAXEXTENT;
    if (xy[1] < -MAXEXTENT) xy[1] = -MAXEXTENT;
    return xy;
  }
  /**
   * Convert 900913 x/y values to lon/lat.
   * (from https://github.com/mapbox/sphericalmercator)
   *
   * @private
   * @param {Array<number>} xy Mercator [x, y] point
   * @returns {Array<number>} WGS84 [lon, lat] point
   */


  function convertToWgs84(xy) {
    // 900913 properties.
    var R2D = 180 / Math.PI;
    var A = 6378137.0;
    return [xy[0] * R2D / A, (Math.PI * 0.5 - 2.0 * Math.atan(Math.exp(-xy[1] / A))) * R2D];
  }
  /**
   * Returns the sign of the input, or zero
   *
   * @private
   * @param {number} x input
   * @returns {number} -1|0|1 output
   */


  function sign(x) {
    return x < 0 ? -1 : x > 0 ? 1 : 0;
  }

  var index$3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    toMercator: toMercator,
    toWgs84: toWgs84
  });

  var __spreadArrays = undefined && undefined.__spreadArrays || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
      s += arguments[i].length;
    }

    for (var r = Array(s), k = 0, i = 0; i < il; i++) {
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
        r[k] = a[j];
      }
    }

    return r;
  };
  /**
   * Returns a random position within a {@link bounding box}.
   *
   * @name randomPosition
   * @param {Array<number>} [bbox=[-180, -90, 180, 90]] a bounding box inside of which positions are placed.
   * @returns {Array<number>} Position [longitude, latitude]
   * @example
   * var position = turf.randomPosition([-180, -90, 180, 90])
   * // => position
   */

  function randomPosition(bbox) {
    if (Array.isArray(bbox)) {
      return coordInBBox(bbox);
    }

    if (bbox && bbox.bbox) {
      return coordInBBox(bbox.bbox);
    }

    return [lon(), lat()];
  }
  /**
   * Returns a random {@link point}.
   *
   * @name randomPoint
   * @param {number} [count=1] how many geometries will be generated
   * @param {Object} [options={}] Optional parameters
   * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.
   * @returns {FeatureCollection<Point>} GeoJSON FeatureCollection of points
   * @example
   * var points = turf.randomPoint(25, {bbox: [-180, -90, 180, 90]})
   * // => points
   */

  function randomPoint(count, options) {
    if (options === void 0) {
      options = {};
    }

    if (count === undefined || count === null) {
      count = 1;
    }

    var features = [];

    for (var i = 0; i < count; i++) {
      features.push(point(randomPosition(options.bbox)));
    }

    return featureCollection$1(features);
  }
  /**
   * Returns a random {@link polygon}.
   *
   * @name randomPolygon
   * @param {number} [count=1] how many geometries will be generated
   * @param {Object} [options={}] Optional parameters
   * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.
   * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.
   * @param {number} [options.max_radial_length=10] is the maximum number of decimal degrees latitude or longitude that a
   * vertex can reach out of the center of the Polygon.
   * @returns {FeatureCollection<Polygon>} GeoJSON FeatureCollection of polygons
   * @example
   * var polygons = turf.randomPolygon(25, {bbox: [-180, -90, 180, 90]})
   * // => polygons
   */

  function randomPolygon(count, options) {
    if (options === void 0) {
      options = {};
    } // Default param


    if (count === undefined || count === null) {
      count = 1;
    }

    if (!isNumber(options.num_vertices) || options.num_vertices === undefined) {
      options.num_vertices = 10;
    }

    if (!isNumber(options.max_radial_length) || options.max_radial_length === undefined) {
      options.max_radial_length = 10;
    }

    var features = [];

    var _loop_1 = function _loop_1(i) {
      var vertices = [];

      var circleOffsets = __spreadArrays(Array(options.num_vertices + 1)).map(Math.random); // Sum Offsets


      circleOffsets.forEach(function (cur, index, arr) {
        arr[index] = index > 0 ? cur + arr[index - 1] : cur;
      }); // scaleOffsets

      circleOffsets.forEach(function (cur) {
        cur = cur * 2 * Math.PI / circleOffsets[circleOffsets.length - 1];
        var radialScaler = Math.random();
        vertices.push([radialScaler * (options.max_radial_length || 10) * Math.sin(cur), radialScaler * (options.max_radial_length || 10) * Math.cos(cur)]);
      });
      vertices[vertices.length - 1] = vertices[0]; // close the ring
      // center the polygon around something

      vertices = vertices.map(vertexToCoordinate(randomPosition(options.bbox)));
      features.push(polygon([vertices]));
    };

    for (var i = 0; i < count; i++) {
      _loop_1();
    }

    return featureCollection$1(features);
  }
  /**
   * Returns a random {@link linestring}.
   *
   * @name randomLineString
   * @param {number} [count=1] how many geometries will be generated
   * @param {Object} [options={}] Optional parameters
   * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.
   * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.
   * @param {number} [options.max_length=0.0001] is the maximum number of decimal degrees that a
   * vertex can be from its predecessor
   * @param {number} [options.max_rotation=Math.PI / 8] is the maximum number of radians that a
   * line segment can turn from the previous segment.
   * @returns {FeatureCollection<LineString>} GeoJSON FeatureCollection of linestrings
   * @example
   * var lineStrings = turf.randomLineString(25, {bbox: [-180, -90, 180, 90]})
   * // => lineStrings
   */

  function randomLineString(count, options) {
    if (options === void 0) {
      options = {};
    } // Optional parameters


    options = options || {};

    if (!isObject(options)) {
      throw new Error("options is invalid");
    }

    var bbox = options.bbox;
    var num_vertices = options.num_vertices;
    var max_length = options.max_length;
    var max_rotation = options.max_rotation;

    if (count === undefined || count === null) {
      count = 1;
    } // Default parameters


    if (!isNumber(num_vertices) || num_vertices === undefined || num_vertices < 2) {
      num_vertices = 10;
    }

    if (!isNumber(max_length) || max_length === undefined) {
      max_length = 0.0001;
    }

    if (!isNumber(max_rotation) || max_rotation === undefined) {
      max_rotation = Math.PI / 8;
    }

    var features = [];

    for (var i = 0; i < count; i++) {
      var startingPoint = randomPosition(bbox);
      var vertices = [startingPoint];

      for (var j = 0; j < num_vertices - 1; j++) {
        var priorAngle = j === 0 ? Math.random() * 2 * Math.PI : Math.tan((vertices[j][1] - vertices[j - 1][1]) / (vertices[j][0] - vertices[j - 1][0]));
        var angle = priorAngle + (Math.random() - 0.5) * max_rotation * 2;
        var distance = Math.random() * max_length;
        vertices.push([vertices[j][0] + distance * Math.cos(angle), vertices[j][1] + distance * Math.sin(angle)]);
      }

      features.push(lineString(vertices));
    }

    return featureCollection$1(features);
  }

  function vertexToCoordinate(hub) {
    return function (cur) {
      return [cur[0] + hub[0], cur[1] + hub[1]];
    };
  }

  function rnd() {
    return Math.random() - 0.5;
  }

  function lon() {
    return rnd() * 360;
  }

  function lat() {
    return rnd() * 180;
  }

  function coordInBBox(bbox) {
    return [Math.random() * (bbox[2] - bbox[0]) + bbox[0], Math.random() * (bbox[3] - bbox[1]) + bbox[1]];
  }

  var index$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    randomPosition: randomPosition,
    randomPoint: randomPoint,
    randomPolygon: randomPolygon,
    randomLineString: randomLineString
  });

  /**
   * Get Cluster
   *
   * @name getCluster
   * @param {FeatureCollection} geojson GeoJSON Features
   * @param {*} filter Filter used on GeoJSON properties to get Cluster
   * @returns {FeatureCollection} Single Cluster filtered by GeoJSON Properties
   * @example
   * var geojson = turf.featureCollection([
   *     turf.point([0, 0], {'marker-symbol': 'circle'}),
   *     turf.point([2, 4], {'marker-symbol': 'star'}),
   *     turf.point([3, 6], {'marker-symbol': 'star'}),
   *     turf.point([5, 1], {'marker-symbol': 'square'}),
   *     turf.point([4, 2], {'marker-symbol': 'circle'})
   * ]);
   *
   * // Create a cluster using K-Means (adds `cluster` to GeoJSON properties)
   * var clustered = turf.clustersKmeans(geojson);
   *
   * // Retrieve first cluster (0)
   * var cluster = turf.getCluster(clustered, {cluster: 0});
   * //= cluster
   *
   * // Retrieve cluster based on custom properties
   * turf.getCluster(clustered, {'marker-symbol': 'circle'}).length;
   * //= 2
   * turf.getCluster(clustered, {'marker-symbol': 'square'}).length;
   * //= 1
   */

  function getCluster(geojson, filter) {
    // Validation
    if (!geojson) throw new Error("geojson is required");
    if (geojson.type !== "FeatureCollection") throw new Error("geojson must be a FeatureCollection");
    if (filter === undefined || filter === null) throw new Error("filter is required"); // Filter Features

    var features = [];
    featureEach$2(geojson, function (feature) {
      if (applyFilter(feature.properties, filter)) features.push(feature);
    });
    return featureCollection$1(features);
  }
  /**
   * Callback for clusterEach
   *
   * @callback clusterEachCallback
   * @param {FeatureCollection} [cluster] The current cluster being processed.
   * @param {*} [clusterValue] Value used to create cluster being processed.
   * @param {number} [currentIndex] The index of the current element being processed in the array.Starts at index 0
   * @returns {void}
   */

  /**
   * clusterEach
   *
   * @name clusterEach
   * @param {FeatureCollection} geojson GeoJSON Features
   * @param {string|number} property GeoJSON property key/value used to create clusters
   * @param {Function} callback a method that takes (cluster, clusterValue, currentIndex)
   * @returns {void}
   * @example
   * var geojson = turf.featureCollection([
   *     turf.point([0, 0]),
   *     turf.point([2, 4]),
   *     turf.point([3, 6]),
   *     turf.point([5, 1]),
   *     turf.point([4, 2])
   * ]);
   *
   * // Create a cluster using K-Means (adds `cluster` to GeoJSON properties)
   * var clustered = turf.clustersKmeans(geojson);
   *
   * // Iterate over each cluster
   * turf.clusterEach(clustered, 'cluster', function (cluster, clusterValue, currentIndex) {
   *     //= cluster
   *     //= clusterValue
   *     //= currentIndex
   * })
   *
   * // Calculate the total number of clusters
   * var total = 0
   * turf.clusterEach(clustered, 'cluster', function () {
   *     total++;
   * });
   *
   * // Create an Array of all the values retrieved from the 'cluster' property
   * var values = []
   * turf.clusterEach(clustered, 'cluster', function (cluster, clusterValue) {
   *     values.push(clusterValue);
   * });
   */

  function clusterEach(geojson, property, callback) {
    // Validation
    if (!geojson) throw new Error("geojson is required");
    if (geojson.type !== "FeatureCollection") throw new Error("geojson must be a FeatureCollection");
    if (property === undefined || property === null) throw new Error("property is required"); // Create clusters based on property values

    var bins = createBins(geojson, property);
    var values = Object.keys(bins);

    for (var index = 0; index < values.length; index++) {
      var value = values[index];
      var bin = bins[value];
      var features = [];

      for (var i = 0; i < bin.length; i++) {
        features.push(geojson.features[bin[i]]);
      }

      callback(featureCollection$1(features), value, index);
    }
  }
  /**
   * Callback for clusterReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback clusterReduceCallback
   * @param {*} [previousValue] The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {FeatureCollection} [cluster] The current cluster being processed.
   * @param {*} [clusterValue] Value used to create cluster being processed.
   * @param {number} [currentIndex] The index of the current element being processed in the
   * array. Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
   */

  /**
   * Reduce clusters in GeoJSON Features, similar to Array.reduce()
   *
   * @name clusterReduce
   * @param {FeatureCollection} geojson GeoJSON Features
   * @param {string|number} property GeoJSON property key/value used to create clusters
   * @param {Function} callback a method that takes (previousValue, cluster, clusterValue, currentIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var geojson = turf.featureCollection([
   *     turf.point([0, 0]),
   *     turf.point([2, 4]),
   *     turf.point([3, 6]),
   *     turf.point([5, 1]),
   *     turf.point([4, 2])
   * ]);
   *
   * // Create a cluster using K-Means (adds `cluster` to GeoJSON properties)
   * var clustered = turf.clustersKmeans(geojson);
   *
   * // Iterate over each cluster and perform a calculation
   * var initialValue = 0
   * turf.clusterReduce(clustered, 'cluster', function (previousValue, cluster, clusterValue, currentIndex) {
   *     //=previousValue
   *     //=cluster
   *     //=clusterValue
   *     //=currentIndex
   *     return previousValue++;
   * }, initialValue);
   *
   * // Calculate the total number of clusters
   * var total = turf.clusterReduce(clustered, 'cluster', function (previousValue) {
   *     return previousValue++;
   * }, 0);
   *
   * // Create an Array of all the values retrieved from the 'cluster' property
   * var values = turf.clusterReduce(clustered, 'cluster', function (previousValue, cluster, clusterValue) {
   *     return previousValue.concat(clusterValue);
   * }, []);
   */

  function clusterReduce(geojson, property, callback, initialValue) {
    var previousValue = initialValue;
    clusterEach(geojson, property, function (cluster, clusterValue, currentIndex) {
      if (currentIndex === 0 && initialValue === undefined) previousValue = cluster;else previousValue = callback(previousValue, cluster, clusterValue, currentIndex);
    });
    return previousValue;
  }
  /**
   * Create Bins
   *
   * @private
   * @param {FeatureCollection} geojson GeoJSON Features
   * @param {string|number} property Property values are used to create bins
   * @returns {Object} bins with Feature IDs
   * @example
   * var geojson = turf.featureCollection([
   *     turf.point([0, 0], {cluster: 0, foo: 'null'}),
   *     turf.point([2, 4], {cluster: 1, foo: 'bar'}),
   *     turf.point([5, 1], {0: 'foo'}),
   *     turf.point([3, 6], {cluster: 1}),
   * ]);
   * createBins(geojson, 'cluster');
   * //= { '0': [ 0 ], '1': [ 1, 3 ] }
   */

  function createBins(geojson, property) {
    var bins = {};
    featureEach$2(geojson, function (feature, i) {
      var properties = feature.properties || {};

      if (Object.prototype.hasOwnProperty.call(properties, String(property))) {
        var value = properties[property];
        if (Object.prototype.hasOwnProperty.call(bins, value)) bins[value].push(i);else bins[value] = [i];
      }
    });
    return bins;
  }
  /**
   * Apply Filter
   *
   * @private
   * @param {*} properties Properties
   * @param {*} filter Filter
   * @returns {boolean} applied Filter to properties
   */

  function applyFilter(properties, filter) {
    if (properties === undefined) return false;

    var filterType = _typeof(filter); // String & Number


    if (filterType === "number" || filterType === "string") return Object.prototype.hasOwnProperty.call(properties, filter); // Array
    else if (Array.isArray(filter)) {
        for (var i = 0; i < filter.length; i++) {
          if (!applyFilter(properties, filter[i])) return false;
        }

        return true; // Object
      } else {
        return propertiesContainsFilter(properties, filter);
      }
  }
  /**
   * Properties contains filter (does not apply deepEqual operations)
   *
   * @private
   * @param {*} properties Properties
   * @param {Object} filter Filter
   * @returns {boolean} does filter equal Properties
   * @example
   * propertiesContainsFilter({foo: 'bar', cluster: 0}, {cluster: 0})
   * //= true
   * propertiesContainsFilter({foo: 'bar', cluster: 0}, {cluster: 1})
   * //= false
   */

  function propertiesContainsFilter(properties, filter) {
    var keys = Object.keys(filter);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (properties[key] !== filter[key]) return false;
    }

    return true;
  }
  /**
   * Filter Properties
   *
   * @private
   * @param {*} properties Properties
   * @param {Array<string>} keys Used to filter Properties
   * @returns {*} filtered Properties
   * @example
   * filterProperties({foo: 'bar', cluster: 0}, ['cluster'])
   * //= {cluster: 0}
   */

  function filterProperties(properties, keys) {
    if (!keys) return {};
    if (!keys.length) return {};
    var newProperties = {};

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (Object.prototype.hasOwnProperty.call(properties, key)) newProperties[key] = properties[key];
    }

    return newProperties;
  }

  var index$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    getCluster: getCluster,
    clusterEach: clusterEach,
    clusterReduce: clusterReduce,
    createBins: createBins,
    applyFilter: applyFilter,
    propertiesContainsFilter: propertiesContainsFilter,
    filterProperties: filterProperties
  });

  /**
   * splaytree v3.1.0
   * Fast Splay tree for Node and browser
   *
   * @author Alexander Milevski <info@w8r.name>
   * @license MIT
   * @preserve
   */
  var Node$2 =
  /** @class */
  function () {
    function Node(key, data) {
      this.next = null;
      this.key = key;
      this.data = data;
      this.left = null;
      this.right = null;
    }

    return Node;
  }();
  /* follows "An implementation of top-down splaying"
   * by D. Sleator <sleator@cs.cmu.edu> March 1992
   */


  function DEFAULT_COMPARE(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }
  /**
   * Simple top down splay, not requiring i to be in the tree t.
   */


  function splay(i, t, comparator) {
    var N = new Node$2(null, null);
    var l = N;
    var r = N;

    while (true) {
      var cmp = comparator(i, t.key); //if (i < t.key) {

      if (cmp < 0) {
        if (t.left === null) break; //if (i < t.left.key) {

        if (comparator(i, t.left.key) < 0) {
          var y = t.left;
          /* rotate right */

          t.left = y.right;
          y.right = t;
          t = y;
          if (t.left === null) break;
        }

        r.left = t;
        /* link right */

        r = t;
        t = t.left; //} else if (i > t.key) {
      } else if (cmp > 0) {
        if (t.right === null) break; //if (i > t.right.key) {

        if (comparator(i, t.right.key) > 0) {
          var y = t.right;
          /* rotate left */

          t.right = y.left;
          y.left = t;
          t = y;
          if (t.right === null) break;
        }

        l.right = t;
        /* link left */

        l = t;
        t = t.right;
      } else break;
    }
    /* assemble */


    l.right = t.left;
    r.left = t.right;
    t.left = N.right;
    t.right = N.left;
    return t;
  }

  function insert(i, data, t, comparator) {
    var node = new Node$2(i, data);

    if (t === null) {
      node.left = node.right = null;
      return node;
    }

    t = splay(i, t, comparator);
    var cmp = comparator(i, t.key);

    if (cmp < 0) {
      node.left = t.left;
      node.right = t;
      t.left = null;
    } else if (cmp >= 0) {
      node.right = t.right;
      node.left = t;
      t.right = null;
    }

    return node;
  }

  function split(key, v, comparator) {
    var left = null;
    var right = null;

    if (v) {
      v = splay(key, v, comparator);
      var cmp = comparator(v.key, key);

      if (cmp === 0) {
        left = v.left;
        right = v.right;
      } else if (cmp < 0) {
        right = v.right;
        v.right = null;
        left = v;
      } else {
        left = v.left;
        v.left = null;
        right = v;
      }
    }

    return {
      left: left,
      right: right
    };
  }

  function merge$1(left, right, comparator) {
    if (right === null) return left;
    if (left === null) return right;
    right = splay(left.key, right, comparator);
    right.left = left;
    return right;
  }
  /**
   * Prints level of the tree
   */


  function printRow(root, prefix, isTail, out, printNode) {
    if (root) {
      out("" + prefix + (isTail ? '└── ' : '├── ') + printNode(root) + "\n");
      var indent = prefix + (isTail ? '    ' : '│   ');
      if (root.left) printRow(root.left, indent, false, out, printNode);
      if (root.right) printRow(root.right, indent, true, out, printNode);
    }
  }

  var Tree =
  /** @class */
  function () {
    function Tree(comparator) {
      if (comparator === void 0) {
        comparator = DEFAULT_COMPARE;
      }

      this._root = null;
      this._size = 0;
      this._comparator = comparator;
    }
    /**
     * Inserts a key, allows duplicates
     */


    Tree.prototype.insert = function (key, data) {
      this._size++;
      return this._root = insert(key, data, this._root, this._comparator);
    };
    /**
     * Adds a key, if it is not present in the tree
     */


    Tree.prototype.add = function (key, data) {
      var node = new Node$2(key, data);

      if (this._root === null) {
        node.left = node.right = null;
        this._size++;
        this._root = node;
      }

      var comparator = this._comparator;
      var t = splay(key, this._root, comparator);
      var cmp = comparator(key, t.key);
      if (cmp === 0) this._root = t;else {
        if (cmp < 0) {
          node.left = t.left;
          node.right = t;
          t.left = null;
        } else if (cmp > 0) {
          node.right = t.right;
          node.left = t;
          t.right = null;
        }

        this._size++;
        this._root = node;
      }
      return this._root;
    };
    /**
     * @param  {Key} key
     * @return {Node|null}
     */


    Tree.prototype.remove = function (key) {
      this._root = this._remove(key, this._root, this._comparator);
    };
    /**
     * Deletes i from the tree if it's there
     */


    Tree.prototype._remove = function (i, t, comparator) {
      var x;
      if (t === null) return null;
      t = splay(i, t, comparator);
      var cmp = comparator(i, t.key);

      if (cmp === 0) {
        /* found it */
        if (t.left === null) {
          x = t.right;
        } else {
          x = splay(i, t.left, comparator);
          x.right = t.right;
        }

        this._size--;
        return x;
      }

      return t;
      /* It wasn't there */
    };
    /**
     * Removes and returns the node with smallest key
     */


    Tree.prototype.pop = function () {
      var node = this._root;

      if (node) {
        while (node.left) {
          node = node.left;
        }

        this._root = splay(node.key, this._root, this._comparator);
        this._root = this._remove(node.key, this._root, this._comparator);
        return {
          key: node.key,
          data: node.data
        };
      }

      return null;
    };
    /**
     * Find without splaying
     */


    Tree.prototype.findStatic = function (key) {
      var current = this._root;
      var compare = this._comparator;

      while (current) {
        var cmp = compare(key, current.key);
        if (cmp === 0) return current;else if (cmp < 0) current = current.left;else current = current.right;
      }

      return null;
    };

    Tree.prototype.find = function (key) {
      if (this._root) {
        this._root = splay(key, this._root, this._comparator);
        if (this._comparator(key, this._root.key) !== 0) return null;
      }

      return this._root;
    };

    Tree.prototype.contains = function (key) {
      var current = this._root;
      var compare = this._comparator;

      while (current) {
        var cmp = compare(key, current.key);
        if (cmp === 0) return true;else if (cmp < 0) current = current.left;else current = current.right;
      }

      return false;
    };

    Tree.prototype.forEach = function (visitor, ctx) {
      var current = this._root;
      var Q = [];
      /* Initialize stack s */

      var done = false;

      while (!done) {
        if (current !== null) {
          Q.push(current);
          current = current.left;
        } else {
          if (Q.length !== 0) {
            current = Q.pop();
            visitor.call(ctx, current);
            current = current.right;
          } else done = true;
        }
      }

      return this;
    };
    /**
     * Walk key range from `low` to `high`. Stops if `fn` returns a value.
     */


    Tree.prototype.range = function (low, high, fn, ctx) {
      var Q = [];
      var compare = this._comparator;
      var node = this._root;
      var cmp;

      while (Q.length !== 0 || node) {
        if (node) {
          Q.push(node);
          node = node.left;
        } else {
          node = Q.pop();
          cmp = compare(node.key, high);

          if (cmp > 0) {
            break;
          } else if (compare(node.key, low) >= 0) {
            if (fn.call(ctx, node)) return this; // stop if smth is returned
          }

          node = node.right;
        }
      }

      return this;
    };
    /**
     * Returns array of keys
     */


    Tree.prototype.keys = function () {
      var keys = [];
      this.forEach(function (_a) {
        var key = _a.key;
        return keys.push(key);
      });
      return keys;
    };
    /**
     * Returns array of all the data in the nodes
     */


    Tree.prototype.values = function () {
      var values = [];
      this.forEach(function (_a) {
        var data = _a.data;
        return values.push(data);
      });
      return values;
    };

    Tree.prototype.min = function () {
      if (this._root) return this.minNode(this._root).key;
      return null;
    };

    Tree.prototype.max = function () {
      if (this._root) return this.maxNode(this._root).key;
      return null;
    };

    Tree.prototype.minNode = function (t) {
      if (t === void 0) {
        t = this._root;
      }

      if (t) while (t.left) {
        t = t.left;
      }
      return t;
    };

    Tree.prototype.maxNode = function (t) {
      if (t === void 0) {
        t = this._root;
      }

      if (t) while (t.right) {
        t = t.right;
      }
      return t;
    };
    /**
     * Returns node at given index
     */


    Tree.prototype.at = function (index) {
      var current = this._root;
      var done = false;
      var i = 0;
      var Q = [];

      while (!done) {
        if (current) {
          Q.push(current);
          current = current.left;
        } else {
          if (Q.length > 0) {
            current = Q.pop();
            if (i === index) return current;
            i++;
            current = current.right;
          } else done = true;
        }
      }

      return null;
    };

    Tree.prototype.next = function (d) {
      var root = this._root;
      var successor = null;

      if (d.right) {
        successor = d.right;

        while (successor.left) {
          successor = successor.left;
        }

        return successor;
      }

      var comparator = this._comparator;

      while (root) {
        var cmp = comparator(d.key, root.key);
        if (cmp === 0) break;else if (cmp < 0) {
          successor = root;
          root = root.left;
        } else root = root.right;
      }

      return successor;
    };

    Tree.prototype.prev = function (d) {
      var root = this._root;
      var predecessor = null;

      if (d.left !== null) {
        predecessor = d.left;

        while (predecessor.right) {
          predecessor = predecessor.right;
        }

        return predecessor;
      }

      var comparator = this._comparator;

      while (root) {
        var cmp = comparator(d.key, root.key);
        if (cmp === 0) break;else if (cmp < 0) root = root.left;else {
          predecessor = root;
          root = root.right;
        }
      }

      return predecessor;
    };

    Tree.prototype.clear = function () {
      this._root = null;
      this._size = 0;
      return this;
    };

    Tree.prototype.toList = function () {
      return toList(this._root);
    };
    /**
     * Bulk-load items. Both array have to be same size
     */


    Tree.prototype.load = function (keys, values, presort) {
      if (values === void 0) {
        values = [];
      }

      if (presort === void 0) {
        presort = false;
      }

      var size = keys.length;
      var comparator = this._comparator; // sort if needed

      if (presort) sort(keys, values, 0, size - 1, comparator);

      if (this._root === null) {
        // empty tree
        this._root = loadRecursive(keys, values, 0, size);
        this._size = size;
      } else {
        // that re-builds the whole tree from two in-order traversals
        var mergedList = mergeLists(this.toList(), createList(keys, values), comparator);
        size = this._size + size;
        this._root = sortedListToBST({
          head: mergedList
        }, 0, size);
      }

      return this;
    };

    Tree.prototype.isEmpty = function () {
      return this._root === null;
    };

    Object.defineProperty(Tree.prototype, "size", {
      get: function get() {
        return this._size;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Tree.prototype, "root", {
      get: function get() {
        return this._root;
      },
      enumerable: true,
      configurable: true
    });

    Tree.prototype.toString = function (printNode) {
      if (printNode === void 0) {
        printNode = function printNode(n) {
          return String(n.key);
        };
      }

      var out = [];
      printRow(this._root, '', true, function (v) {
        return out.push(v);
      }, printNode);
      return out.join('');
    };

    Tree.prototype.update = function (key, newKey, newData) {
      var comparator = this._comparator;

      var _a = split(key, this._root, comparator),
          left = _a.left,
          right = _a.right;

      if (comparator(key, newKey) < 0) {
        right = insert(newKey, newData, right, comparator);
      } else {
        left = insert(newKey, newData, left, comparator);
      }

      this._root = merge$1(left, right, comparator);
    };

    Tree.prototype.split = function (key) {
      return split(key, this._root, this._comparator);
    };

    return Tree;
  }();

  function loadRecursive(keys, values, start, end) {
    var size = end - start;

    if (size > 0) {
      var middle = start + Math.floor(size / 2);
      var key = keys[middle];
      var data = values[middle];
      var node = new Node$2(key, data);
      node.left = loadRecursive(keys, values, start, middle);
      node.right = loadRecursive(keys, values, middle + 1, end);
      return node;
    }

    return null;
  }

  function createList(keys, values) {
    var head = new Node$2(null, null);
    var p = head;

    for (var i = 0; i < keys.length; i++) {
      p = p.next = new Node$2(keys[i], values[i]);
    }

    p.next = null;
    return head.next;
  }

  function toList(root) {
    var current = root;
    var Q = [];
    var done = false;
    var head = new Node$2(null, null);
    var p = head;

    while (!done) {
      if (current) {
        Q.push(current);
        current = current.left;
      } else {
        if (Q.length > 0) {
          current = p = p.next = Q.pop();
          current = current.right;
        } else done = true;
      }
    }

    p.next = null; // that'll work even if the tree was empty

    return head.next;
  }

  function sortedListToBST(list, start, end) {
    var size = end - start;

    if (size > 0) {
      var middle = start + Math.floor(size / 2);
      var left = sortedListToBST(list, start, middle);
      var root = list.head;
      root.left = left;
      list.head = list.head.next;
      root.right = sortedListToBST(list, middle + 1, end);
      return root;
    }

    return null;
  }

  function mergeLists(l1, l2, compare) {
    var head = new Node$2(null, null); // dummy

    var p = head;
    var p1 = l1;
    var p2 = l2;

    while (p1 !== null && p2 !== null) {
      if (compare(p1.key, p2.key) < 0) {
        p.next = p1;
        p1 = p1.next;
      } else {
        p.next = p2;
        p2 = p2.next;
      }

      p = p.next;
    }

    if (p1 !== null) {
      p.next = p1;
    } else if (p2 !== null) {
      p.next = p2;
    }

    return head.next;
  }

  function sort(keys, values, left, right, compare) {
    if (left >= right) return;
    var pivot = keys[left + right >> 1];
    var i = left - 1;
    var j = right + 1;

    while (true) {
      do {
        i++;
      } while (compare(keys[i], pivot) < 0);

      do {
        j--;
      } while (compare(keys[j], pivot) > 0);

      if (i >= j) break;
      var tmp = keys[i];
      keys[i] = keys[j];
      keys[j] = tmp;
      tmp = values[i];
      values[i] = values[j];
      values[j] = tmp;
    }

    sort(keys, values, left, j, compare);
    sort(keys, values, j + 1, right, compare);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  /**
   * A bounding box has the format:
   *
   *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }
   *
   */


  var isInBbox = function isInBbox(bbox, point) {
    return bbox.ll.x <= point.x && point.x <= bbox.ur.x && bbox.ll.y <= point.y && point.y <= bbox.ur.y;
  };
  /* Returns either null, or a bbox (aka an ordered pair of points)
   * If there is only one point of overlap, a bbox with identical points
   * will be returned */


  var getBboxOverlap = function getBboxOverlap(b1, b2) {
    // check if the bboxes overlap at all
    if (b2.ur.x < b1.ll.x || b1.ur.x < b2.ll.x || b2.ur.y < b1.ll.y || b1.ur.y < b2.ll.y) return null; // find the middle two X values

    var lowerX = b1.ll.x < b2.ll.x ? b2.ll.x : b1.ll.x;
    var upperX = b1.ur.x < b2.ur.x ? b1.ur.x : b2.ur.x; // find the middle two Y values

    var lowerY = b1.ll.y < b2.ll.y ? b2.ll.y : b1.ll.y;
    var upperY = b1.ur.y < b2.ur.y ? b1.ur.y : b2.ur.y; // put those middle values together to get the overlap

    return {
      ll: {
        x: lowerX,
        y: lowerY
      },
      ur: {
        x: upperX,
        y: upperY
      }
    };
  };
  /* Javascript doesn't do integer math. Everything is
   * floating point with percision Number.EPSILON.
   *
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON
   */


  var epsilon$1 = Number.EPSILON; // IE Polyfill

  if (epsilon$1 === undefined) epsilon$1 = Math.pow(2, -52);
  var EPSILON_SQ = epsilon$1 * epsilon$1;
  /* FLP comparator */

  var cmp = function cmp(a, b) {
    // check if they're both 0
    if (-epsilon$1 < a && a < epsilon$1) {
      if (-epsilon$1 < b && b < epsilon$1) {
        return 0;
      }
    } // check if they're flp equal


    var ab = a - b;

    if (ab * ab < EPSILON_SQ * a * b) {
      return 0;
    } // normal comparison


    return a < b ? -1 : 1;
  };
  /**
   * This class rounds incoming values sufficiently so that
   * floating points problems are, for the most part, avoided.
   *
   * Incoming points are have their x & y values tested against
   * all previously seen x & y values. If either is 'too close'
   * to a previously seen value, it's value is 'snapped' to the
   * previously seen value.
   *
   * All points should be rounded by this class before being
   * stored in any data structures in the rest of this algorithm.
   */


  var PtRounder = /*#__PURE__*/function () {
    function PtRounder() {
      _classCallCheck(this, PtRounder);

      this.reset();
    }

    _createClass(PtRounder, [{
      key: "reset",
      value: function reset() {
        this.xRounder = new CoordRounder();
        this.yRounder = new CoordRounder();
      }
    }, {
      key: "round",
      value: function round(x, y) {
        return {
          x: this.xRounder.round(x),
          y: this.yRounder.round(y)
        };
      }
    }]);

    return PtRounder;
  }();

  var CoordRounder = /*#__PURE__*/function () {
    function CoordRounder() {
      _classCallCheck(this, CoordRounder);

      this.tree = new Tree(); // preseed with 0 so we don't end up with values < Number.EPSILON

      this.round(0);
    } // Note: this can rounds input values backwards or forwards.
    //       You might ask, why not restrict this to just rounding
    //       forwards? Wouldn't that allow left endpoints to always
    //       remain left endpoints during splitting (never change to
    //       right). No - it wouldn't, because we snap intersections
    //       to endpoints (to establish independence from the segment
    //       angle for t-intersections).


    _createClass(CoordRounder, [{
      key: "round",
      value: function round(coord) {
        var node = this.tree.add(coord);
        var prevNode = this.tree.prev(node);

        if (prevNode !== null && cmp(node.key, prevNode.key) === 0) {
          this.tree.remove(coord);
          return prevNode.key;
        }

        var nextNode = this.tree.next(node);

        if (nextNode !== null && cmp(node.key, nextNode.key) === 0) {
          this.tree.remove(coord);
          return nextNode.key;
        }

        return coord;
      }
    }]);

    return CoordRounder;
  }(); // singleton available by import


  var rounder = new PtRounder();
  /* Cross Product of two vectors with first point at origin */

  var crossProduct = function crossProduct(a, b) {
    return a.x * b.y - a.y * b.x;
  };
  /* Dot Product of two vectors with first point at origin */


  var dotProduct = function dotProduct(a, b) {
    return a.x * b.x + a.y * b.y;
  };
  /* Comparator for two vectors with same starting point */


  var compareVectorAngles = function compareVectorAngles(basePt, endPt1, endPt2) {
    var v1 = {
      x: endPt1.x - basePt.x,
      y: endPt1.y - basePt.y
    };
    var v2 = {
      x: endPt2.x - basePt.x,
      y: endPt2.y - basePt.y
    };
    var kross = crossProduct(v1, v2);
    return cmp(kross, 0);
  };

  var length = function length(v) {
    return Math.sqrt(dotProduct(v, v));
  };
  /* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */


  var sineOfAngle = function sineOfAngle(pShared, pBase, pAngle) {
    var vBase = {
      x: pBase.x - pShared.x,
      y: pBase.y - pShared.y
    };
    var vAngle = {
      x: pAngle.x - pShared.x,
      y: pAngle.y - pShared.y
    };
    return crossProduct(vAngle, vBase) / length(vAngle) / length(vBase);
  };
  /* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */


  var cosineOfAngle = function cosineOfAngle(pShared, pBase, pAngle) {
    var vBase = {
      x: pBase.x - pShared.x,
      y: pBase.y - pShared.y
    };
    var vAngle = {
      x: pAngle.x - pShared.x,
      y: pAngle.y - pShared.y
    };
    return dotProduct(vAngle, vBase) / length(vAngle) / length(vBase);
  };
  /* Get the x coordinate where the given line (defined by a point and vector)
   * crosses the horizontal line with the given y coordiante.
   * In the case of parrallel lines (including overlapping ones) returns null. */


  var horizontalIntersection = function horizontalIntersection(pt, v, y) {
    if (v.y === 0) return null;
    return {
      x: pt.x + v.x / v.y * (y - pt.y),
      y: y
    };
  };
  /* Get the y coordinate where the given line (defined by a point and vector)
   * crosses the vertical line with the given x coordiante.
   * In the case of parrallel lines (including overlapping ones) returns null. */


  var verticalIntersection = function verticalIntersection(pt, v, x) {
    if (v.x === 0) return null;
    return {
      x: x,
      y: pt.y + v.y / v.x * (x - pt.x)
    };
  };
  /* Get the intersection of two lines, each defined by a base point and a vector.
   * In the case of parrallel lines (including overlapping ones) returns null. */


  var intersection = function intersection(pt1, v1, pt2, v2) {
    // take some shortcuts for vertical and horizontal lines
    // this also ensures we don't calculate an intersection and then discover
    // it's actually outside the bounding box of the line
    if (v1.x === 0) return verticalIntersection(pt2, v2, pt1.x);
    if (v2.x === 0) return verticalIntersection(pt1, v1, pt2.x);
    if (v1.y === 0) return horizontalIntersection(pt2, v2, pt1.y);
    if (v2.y === 0) return horizontalIntersection(pt1, v1, pt2.y); // General case for non-overlapping segments.
    // This algorithm is based on Schneider and Eberly.
    // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244

    var kross = crossProduct(v1, v2);
    if (kross == 0) return null;
    var ve = {
      x: pt2.x - pt1.x,
      y: pt2.y - pt1.y
    };
    var d1 = crossProduct(ve, v1) / kross;
    var d2 = crossProduct(ve, v2) / kross; // take the average of the two calculations to minimize rounding error

    var x1 = pt1.x + d2 * v1.x,
        x2 = pt2.x + d1 * v2.x;
    var y1 = pt1.y + d2 * v1.y,
        y2 = pt2.y + d1 * v2.y;
    var x = (x1 + x2) / 2;
    var y = (y1 + y2) / 2;
    return {
      x: x,
      y: y
    };
  };

  var SweepEvent = /*#__PURE__*/function () {
    _createClass(SweepEvent, null, [{
      key: "compare",
      // for ordering sweep events in the sweep event queue
      value: function compare(a, b) {
        // favor event with a point that the sweep line hits first
        var ptCmp = SweepEvent.comparePoints(a.point, b.point);
        if (ptCmp !== 0) return ptCmp; // the points are the same, so link them if needed

        if (a.point !== b.point) a.link(b); // favor right events over left

        if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1; // we have two matching left or right endpoints
        // ordering of this case is the same as for their segments

        return Segment.compare(a.segment, b.segment);
      } // for ordering points in sweep line order

    }, {
      key: "comparePoints",
      value: function comparePoints(aPt, bPt) {
        if (aPt.x < bPt.x) return -1;
        if (aPt.x > bPt.x) return 1;
        if (aPt.y < bPt.y) return -1;
        if (aPt.y > bPt.y) return 1;
        return 0;
      } // Warning: 'point' input will be modified and re-used (for performance)

    }]);

    function SweepEvent(point, isLeft) {
      _classCallCheck(this, SweepEvent);

      if (point.events === undefined) point.events = [this];else point.events.push(this);
      this.point = point;
      this.isLeft = isLeft; // this.segment, this.otherSE set by factory
    }

    _createClass(SweepEvent, [{
      key: "link",
      value: function link(other) {
        if (other.point === this.point) {
          throw new Error('Tried to link already linked events');
        }

        var otherEvents = other.point.events;

        for (var i = 0, iMax = otherEvents.length; i < iMax; i++) {
          var evt = otherEvents[i];
          this.point.events.push(evt);
          evt.point = this.point;
        }

        this.checkForConsuming();
      }
      /* Do a pass over our linked events and check to see if any pair
       * of segments match, and should be consumed. */

    }, {
      key: "checkForConsuming",
      value: function checkForConsuming() {
        // FIXME: The loops in this method run O(n^2) => no good.
        //        Maintain little ordered sweep event trees?
        //        Can we maintaining an ordering that avoids the need
        //        for the re-sorting with getLeftmostComparator in geom-out?
        // Compare each pair of events to see if other events also match
        var numEvents = this.point.events.length;

        for (var i = 0; i < numEvents; i++) {
          var evt1 = this.point.events[i];
          if (evt1.segment.consumedBy !== undefined) continue;

          for (var j = i + 1; j < numEvents; j++) {
            var evt2 = this.point.events[j];
            if (evt2.consumedBy !== undefined) continue;
            if (evt1.otherSE.point.events !== evt2.otherSE.point.events) continue;
            evt1.segment.consume(evt2.segment);
          }
        }
      }
    }, {
      key: "getAvailableLinkedEvents",
      value: function getAvailableLinkedEvents() {
        // point.events is always of length 2 or greater
        var events = [];

        for (var i = 0, iMax = this.point.events.length; i < iMax; i++) {
          var evt = this.point.events[i];

          if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {
            events.push(evt);
          }
        }

        return events;
      }
      /**
       * Returns a comparator function for sorting linked events that will
       * favor the event that will give us the smallest left-side angle.
       * All ring construction starts as low as possible heading to the right,
       * so by always turning left as sharp as possible we'll get polygons
       * without uncessary loops & holes.
       *
       * The comparator function has a compute cache such that it avoids
       * re-computing already-computed values.
       */

    }, {
      key: "getLeftmostComparator",
      value: function getLeftmostComparator(baseEvent) {
        var _this = this;

        var cache = new Map();

        var fillCache = function fillCache(linkedEvent) {
          var nextEvent = linkedEvent.otherSE;
          cache.set(linkedEvent, {
            sine: sineOfAngle(_this.point, baseEvent.point, nextEvent.point),
            cosine: cosineOfAngle(_this.point, baseEvent.point, nextEvent.point)
          });
        };

        return function (a, b) {
          if (!cache.has(a)) fillCache(a);
          if (!cache.has(b)) fillCache(b);

          var _cache$get = cache.get(a),
              asine = _cache$get.sine,
              acosine = _cache$get.cosine;

          var _cache$get2 = cache.get(b),
              bsine = _cache$get2.sine,
              bcosine = _cache$get2.cosine; // both on or above x-axis


          if (asine >= 0 && bsine >= 0) {
            if (acosine < bcosine) return 1;
            if (acosine > bcosine) return -1;
            return 0;
          } // both below x-axis


          if (asine < 0 && bsine < 0) {
            if (acosine < bcosine) return -1;
            if (acosine > bcosine) return 1;
            return 0;
          } // one above x-axis, one below


          if (bsine < asine) return -1;
          if (bsine > asine) return 1;
          return 0;
        };
      }
    }]);

    return SweepEvent;
  }(); // segments and sweep events when all else is identical


  var segmentId = 0;

  var Segment = /*#__PURE__*/function () {
    _createClass(Segment, null, [{
      key: "compare",

      /* This compare() function is for ordering segments in the sweep
       * line tree, and does so according to the following criteria:
       *
       * Consider the vertical line that lies an infinestimal step to the
       * right of the right-more of the two left endpoints of the input
       * segments. Imagine slowly moving a point up from negative infinity
       * in the increasing y direction. Which of the two segments will that
       * point intersect first? That segment comes 'before' the other one.
       *
       * If neither segment would be intersected by such a line, (if one
       * or more of the segments are vertical) then the line to be considered
       * is directly on the right-more of the two left inputs.
       */
      value: function compare(a, b) {
        var alx = a.leftSE.point.x;
        var blx = b.leftSE.point.x;
        var arx = a.rightSE.point.x;
        var brx = b.rightSE.point.x; // check if they're even in the same vertical plane

        if (brx < alx) return 1;
        if (arx < blx) return -1;
        var aly = a.leftSE.point.y;
        var bly = b.leftSE.point.y;
        var ary = a.rightSE.point.y;
        var bry = b.rightSE.point.y; // is left endpoint of segment B the right-more?

        if (alx < blx) {
          // are the two segments in the same horizontal plane?
          if (bly < aly && bly < ary) return 1;
          if (bly > aly && bly > ary) return -1; // is the B left endpoint colinear to segment A?

          var aCmpBLeft = a.comparePoint(b.leftSE.point);
          if (aCmpBLeft < 0) return 1;
          if (aCmpBLeft > 0) return -1; // is the A right endpoint colinear to segment B ?

          var bCmpARight = b.comparePoint(a.rightSE.point);
          if (bCmpARight !== 0) return bCmpARight; // colinear segments, consider the one with left-more
          // left endpoint to be first (arbitrary?)

          return -1;
        } // is left endpoint of segment A the right-more?


        if (alx > blx) {
          if (aly < bly && aly < bry) return -1;
          if (aly > bly && aly > bry) return 1; // is the A left endpoint colinear to segment B?

          var bCmpALeft = b.comparePoint(a.leftSE.point);
          if (bCmpALeft !== 0) return bCmpALeft; // is the B right endpoint colinear to segment A?

          var aCmpBRight = a.comparePoint(b.rightSE.point);
          if (aCmpBRight < 0) return 1;
          if (aCmpBRight > 0) return -1; // colinear segments, consider the one with left-more
          // left endpoint to be first (arbitrary?)

          return 1;
        } // if we get here, the two left endpoints are in the same
        // vertical plane, ie alx === blx
        // consider the lower left-endpoint to come first


        if (aly < bly) return -1;
        if (aly > bly) return 1; // left endpoints are identical
        // check for colinearity by using the left-more right endpoint
        // is the A right endpoint more left-more?

        if (arx < brx) {
          var _bCmpARight = b.comparePoint(a.rightSE.point);

          if (_bCmpARight !== 0) return _bCmpARight;
        } // is the B right endpoint more left-more?


        if (arx > brx) {
          var _aCmpBRight = a.comparePoint(b.rightSE.point);

          if (_aCmpBRight < 0) return 1;
          if (_aCmpBRight > 0) return -1;
        }

        if (arx !== brx) {
          // are these two [almost] vertical segments with opposite orientation?
          // if so, the one with the lower right endpoint comes first
          var ay = ary - aly;
          var ax = arx - alx;
          var by = bry - bly;
          var bx = brx - blx;
          if (ay > ax && by < bx) return 1;
          if (ay < ax && by > bx) return -1;
        } // we have colinear segments with matching orientation
        // consider the one with more left-more right endpoint to be first


        if (arx > brx) return 1;
        if (arx < brx) return -1; // if we get here, two two right endpoints are in the same
        // vertical plane, ie arx === brx
        // consider the lower right-endpoint to come first

        if (ary < bry) return -1;
        if (ary > bry) return 1; // right endpoints identical as well, so the segments are idential
        // fall back on creation order as consistent tie-breaker

        if (a.id < b.id) return -1;
        if (a.id > b.id) return 1; // identical segment, ie a === b

        return 0;
      }
      /* Warning: a reference to ringWindings input will be stored,
       *  and possibly will be later modified */

    }]);

    function Segment(leftSE, rightSE, rings, windings) {
      _classCallCheck(this, Segment);

      this.id = ++segmentId;
      this.leftSE = leftSE;
      leftSE.segment = this;
      leftSE.otherSE = rightSE;
      this.rightSE = rightSE;
      rightSE.segment = this;
      rightSE.otherSE = leftSE;
      this.rings = rings;
      this.windings = windings; // left unset for performance, set later in algorithm
      // this.ringOut, this.consumedBy, this.prev
    }

    _createClass(Segment, [{
      key: "replaceRightSE",

      /* When a segment is split, the rightSE is replaced with a new sweep event */
      value: function replaceRightSE(newRightSE) {
        this.rightSE = newRightSE;
        this.rightSE.segment = this;
        this.rightSE.otherSE = this.leftSE;
        this.leftSE.otherSE = this.rightSE;
      }
    }, {
      key: "bbox",
      value: function bbox() {
        var y1 = this.leftSE.point.y;
        var y2 = this.rightSE.point.y;
        return {
          ll: {
            x: this.leftSE.point.x,
            y: y1 < y2 ? y1 : y2
          },
          ur: {
            x: this.rightSE.point.x,
            y: y1 > y2 ? y1 : y2
          }
        };
      }
      /* A vector from the left point to the right */

    }, {
      key: "vector",
      value: function vector() {
        return {
          x: this.rightSE.point.x - this.leftSE.point.x,
          y: this.rightSE.point.y - this.leftSE.point.y
        };
      }
    }, {
      key: "isAnEndpoint",
      value: function isAnEndpoint(pt) {
        return pt.x === this.leftSE.point.x && pt.y === this.leftSE.point.y || pt.x === this.rightSE.point.x && pt.y === this.rightSE.point.y;
      }
      /* Compare this segment with a point.
       *
       * A point P is considered to be colinear to a segment if there
       * exists a distance D such that if we travel along the segment
       * from one * endpoint towards the other a distance D, we find
       * ourselves at point P.
       *
       * Return value indicates:
       *
       *   1: point lies above the segment (to the left of vertical)
       *   0: point is colinear to segment
       *  -1: point lies below the segment (to the right of vertical)
       */

    }, {
      key: "comparePoint",
      value: function comparePoint(point) {
        if (this.isAnEndpoint(point)) return 0;
        var lPt = this.leftSE.point;
        var rPt = this.rightSE.point;
        var v = this.vector(); // Exactly vertical segments.

        if (lPt.x === rPt.x) {
          if (point.x === lPt.x) return 0;
          return point.x < lPt.x ? 1 : -1;
        } // Nearly vertical segments with an intersection.
        // Check to see where a point on the line with matching Y coordinate is.


        var yDist = (point.y - lPt.y) / v.y;
        var xFromYDist = lPt.x + yDist * v.x;
        if (point.x === xFromYDist) return 0; // General case.
        // Check to see where a point on the line with matching X coordinate is.

        var xDist = (point.x - lPt.x) / v.x;
        var yFromXDist = lPt.y + xDist * v.y;
        if (point.y === yFromXDist) return 0;
        return point.y < yFromXDist ? -1 : 1;
      }
      /**
       * Given another segment, returns the first non-trivial intersection
       * between the two segments (in terms of sweep line ordering), if it exists.
       *
       * A 'non-trivial' intersection is one that will cause one or both of the
       * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:
       *
       *   * endpoint of segA with endpoint of segB --> trivial
       *   * endpoint of segA with point along segB --> non-trivial
       *   * endpoint of segB with point along segA --> non-trivial
       *   * point along segA with point along segB --> non-trivial
       *
       * If no non-trivial intersection exists, return null
       * Else, return null.
       */

    }, {
      key: "getIntersection",
      value: function getIntersection(other) {
        // If bboxes don't overlap, there can't be any intersections
        var tBbox = this.bbox();
        var oBbox = other.bbox();
        var bboxOverlap = getBboxOverlap(tBbox, oBbox);
        if (bboxOverlap === null) return null; // We first check to see if the endpoints can be considered intersections.
        // This will 'snap' intersections to endpoints if possible, and will
        // handle cases of colinearity.

        var tlp = this.leftSE.point;
        var trp = this.rightSE.point;
        var olp = other.leftSE.point;
        var orp = other.rightSE.point; // does each endpoint touch the other segment?
        // note that we restrict the 'touching' definition to only allow segments
        // to touch endpoints that lie forward from where we are in the sweep line pass

        var touchesOtherLSE = isInBbox(tBbox, olp) && this.comparePoint(olp) === 0;
        var touchesThisLSE = isInBbox(oBbox, tlp) && other.comparePoint(tlp) === 0;
        var touchesOtherRSE = isInBbox(tBbox, orp) && this.comparePoint(orp) === 0;
        var touchesThisRSE = isInBbox(oBbox, trp) && other.comparePoint(trp) === 0; // do left endpoints match?

        if (touchesThisLSE && touchesOtherLSE) {
          // these two cases are for colinear segments with matching left
          // endpoints, and one segment being longer than the other
          if (touchesThisRSE && !touchesOtherRSE) return trp;
          if (!touchesThisRSE && touchesOtherRSE) return orp; // either the two segments match exactly (two trival intersections)
          // or just on their left endpoint (one trivial intersection

          return null;
        } // does this left endpoint matches (other doesn't)


        if (touchesThisLSE) {
          // check for segments that just intersect on opposing endpoints
          if (touchesOtherRSE) {
            if (tlp.x === orp.x && tlp.y === orp.y) return null;
          } // t-intersection on left endpoint


          return tlp;
        } // does other left endpoint matches (this doesn't)


        if (touchesOtherLSE) {
          // check for segments that just intersect on opposing endpoints
          if (touchesThisRSE) {
            if (trp.x === olp.x && trp.y === olp.y) return null;
          } // t-intersection on left endpoint


          return olp;
        } // trivial intersection on right endpoints


        if (touchesThisRSE && touchesOtherRSE) return null; // t-intersections on just one right endpoint

        if (touchesThisRSE) return trp;
        if (touchesOtherRSE) return orp; // None of our endpoints intersect. Look for a general intersection between
        // infinite lines laid over the segments

        var pt = intersection(tlp, this.vector(), olp, other.vector()); // are the segments parrallel? Note that if they were colinear with overlap,
        // they would have an endpoint intersection and that case was already handled above

        if (pt === null) return null; // is the intersection found between the lines not on the segments?

        if (!isInBbox(bboxOverlap, pt)) return null; // round the the computed point if needed

        return rounder.round(pt.x, pt.y);
      }
      /**
       * Split the given segment into multiple segments on the given points.
       *  * Each existing segment will retain its leftSE and a new rightSE will be
       *    generated for it.
       *  * A new segment will be generated which will adopt the original segment's
       *    rightSE, and a new leftSE will be generated for it.
       *  * If there are more than two points given to split on, new segments
       *    in the middle will be generated with new leftSE and rightSE's.
       *  * An array of the newly generated SweepEvents will be returned.
       *
       * Warning: input array of points is modified
       */

    }, {
      key: "split",
      value: function split(point) {
        var newEvents = [];
        var alreadyLinked = point.events !== undefined;
        var newLeftSE = new SweepEvent(point, true);
        var newRightSE = new SweepEvent(point, false);
        var oldRightSE = this.rightSE;
        this.replaceRightSE(newRightSE);
        newEvents.push(newRightSE);
        newEvents.push(newLeftSE);
        var newSeg = new Segment(newLeftSE, oldRightSE, this.rings.slice(), this.windings.slice()); // when splitting a nearly vertical downward-facing segment,
        // sometimes one of the resulting new segments is vertical, in which
        // case its left and right events may need to be swapped

        if (SweepEvent.comparePoints(newSeg.leftSE.point, newSeg.rightSE.point) > 0) {
          newSeg.swapEvents();
        }

        if (SweepEvent.comparePoints(this.leftSE.point, this.rightSE.point) > 0) {
          this.swapEvents();
        } // in the point we just used to create new sweep events with was already
        // linked to other events, we need to check if either of the affected
        // segments should be consumed


        if (alreadyLinked) {
          newLeftSE.checkForConsuming();
          newRightSE.checkForConsuming();
        }

        return newEvents;
      }
      /* Swap which event is left and right */

    }, {
      key: "swapEvents",
      value: function swapEvents() {
        var tmpEvt = this.rightSE;
        this.rightSE = this.leftSE;
        this.leftSE = tmpEvt;
        this.leftSE.isLeft = true;
        this.rightSE.isLeft = false;

        for (var i = 0, iMax = this.windings.length; i < iMax; i++) {
          this.windings[i] *= -1;
        }
      }
      /* Consume another segment. We take their rings under our wing
       * and mark them as consumed. Use for perfectly overlapping segments */

    }, {
      key: "consume",
      value: function consume(other) {
        var consumer = this;
        var consumee = other;

        while (consumer.consumedBy) {
          consumer = consumer.consumedBy;
        }

        while (consumee.consumedBy) {
          consumee = consumee.consumedBy;
        }

        var cmp = Segment.compare(consumer, consumee);
        if (cmp === 0) return; // already consumed
        // the winner of the consumption is the earlier segment
        // according to sweep line ordering

        if (cmp > 0) {
          var tmp = consumer;
          consumer = consumee;
          consumee = tmp;
        } // make sure a segment doesn't consume it's prev


        if (consumer.prev === consumee) {
          var _tmp = consumer;
          consumer = consumee;
          consumee = _tmp;
        }

        for (var i = 0, iMax = consumee.rings.length; i < iMax; i++) {
          var ring = consumee.rings[i];
          var winding = consumee.windings[i];
          var index = consumer.rings.indexOf(ring);

          if (index === -1) {
            consumer.rings.push(ring);
            consumer.windings.push(winding);
          } else consumer.windings[index] += winding;
        }

        consumee.rings = null;
        consumee.windings = null;
        consumee.consumedBy = consumer; // mark sweep events consumed as to maintain ordering in sweep event queue

        consumee.leftSE.consumedBy = consumer.leftSE;
        consumee.rightSE.consumedBy = consumer.rightSE;
      }
      /* The first segment previous segment chain that is in the result */

    }, {
      key: "prevInResult",
      value: function prevInResult() {
        if (this._prevInResult !== undefined) return this._prevInResult;
        if (!this.prev) this._prevInResult = null;else if (this.prev.isInResult()) this._prevInResult = this.prev;else this._prevInResult = this.prev.prevInResult();
        return this._prevInResult;
      }
    }, {
      key: "beforeState",
      value: function beforeState() {
        if (this._beforeState !== undefined) return this._beforeState;
        if (!this.prev) this._beforeState = {
          rings: [],
          windings: [],
          multiPolys: []
        };else {
          var seg = this.prev.consumedBy || this.prev;
          this._beforeState = seg.afterState();
        }
        return this._beforeState;
      }
    }, {
      key: "afterState",
      value: function afterState() {
        if (this._afterState !== undefined) return this._afterState;
        var beforeState = this.beforeState();
        this._afterState = {
          rings: beforeState.rings.slice(0),
          windings: beforeState.windings.slice(0),
          multiPolys: []
        };
        var ringsAfter = this._afterState.rings;
        var windingsAfter = this._afterState.windings;
        var mpsAfter = this._afterState.multiPolys; // calculate ringsAfter, windingsAfter

        for (var i = 0, iMax = this.rings.length; i < iMax; i++) {
          var ring = this.rings[i];
          var winding = this.windings[i];
          var index = ringsAfter.indexOf(ring);

          if (index === -1) {
            ringsAfter.push(ring);
            windingsAfter.push(winding);
          } else windingsAfter[index] += winding;
        } // calcualte polysAfter


        var polysAfter = [];
        var polysExclude = [];

        for (var _i = 0, _iMax = ringsAfter.length; _i < _iMax; _i++) {
          if (windingsAfter[_i] === 0) continue; // non-zero rule

          var _ring = ringsAfter[_i];
          var poly = _ring.poly;
          if (polysExclude.indexOf(poly) !== -1) continue;
          if (_ring.isExterior) polysAfter.push(poly);else {
            if (polysExclude.indexOf(poly) === -1) polysExclude.push(poly);

            var _index = polysAfter.indexOf(_ring.poly);

            if (_index !== -1) polysAfter.splice(_index, 1);
          }
        } // calculate multiPolysAfter


        for (var _i2 = 0, _iMax2 = polysAfter.length; _i2 < _iMax2; _i2++) {
          var mp = polysAfter[_i2].multiPoly;
          if (mpsAfter.indexOf(mp) === -1) mpsAfter.push(mp);
        }

        return this._afterState;
      }
      /* Is this segment part of the final result? */

    }, {
      key: "isInResult",
      value: function isInResult() {
        // if we've been consumed, we're not in the result
        if (this.consumedBy) return false;
        if (this._isInResult !== undefined) return this._isInResult;
        var mpsBefore = this.beforeState().multiPolys;
        var mpsAfter = this.afterState().multiPolys;

        switch (operation.type) {
          case 'union':
            {
              // UNION - included iff:
              //  * On one side of us there is 0 poly interiors AND
              //  * On the other side there is 1 or more.
              var noBefores = mpsBefore.length === 0;
              var noAfters = mpsAfter.length === 0;
              this._isInResult = noBefores !== noAfters;
              break;
            }

          case 'intersection':
            {
              // INTERSECTION - included iff:
              //  * on one side of us all multipolys are rep. with poly interiors AND
              //  * on the other side of us, not all multipolys are repsented
              //    with poly interiors
              var least;
              var most;

              if (mpsBefore.length < mpsAfter.length) {
                least = mpsBefore.length;
                most = mpsAfter.length;
              } else {
                least = mpsAfter.length;
                most = mpsBefore.length;
              }

              this._isInResult = most === operation.numMultiPolys && least < most;
              break;
            }

          case 'xor':
            {
              // XOR - included iff:
              //  * the difference between the number of multipolys represented
              //    with poly interiors on our two sides is an odd number
              var diff = Math.abs(mpsBefore.length - mpsAfter.length);
              this._isInResult = diff % 2 === 1;
              break;
            }

          case 'difference':
            {
              // DIFFERENCE included iff:
              //  * on exactly one side, we have just the subject
              var isJustSubject = function isJustSubject(mps) {
                return mps.length === 1 && mps[0].isSubject;
              };

              this._isInResult = isJustSubject(mpsBefore) !== isJustSubject(mpsAfter);
              break;
            }

          default:
            throw new Error("Unrecognized operation type found ".concat(operation.type));
        }

        return this._isInResult;
      }
    }], [{
      key: "fromRing",
      value: function fromRing(pt1, pt2, ring) {
        var leftPt, rightPt, winding; // ordering the two points according to sweep line ordering

        var cmpPts = SweepEvent.comparePoints(pt1, pt2);

        if (cmpPts < 0) {
          leftPt = pt1;
          rightPt = pt2;
          winding = 1;
        } else if (cmpPts > 0) {
          leftPt = pt2;
          rightPt = pt1;
          winding = -1;
        } else throw new Error("Tried to create degenerate segment at [".concat(pt1.x, ", ").concat(pt1.y, "]"));

        var leftSE = new SweepEvent(leftPt, true);
        var rightSE = new SweepEvent(rightPt, false);
        return new Segment(leftSE, rightSE, [ring], [winding]);
      }
    }]);

    return Segment;
  }();

  var RingIn = /*#__PURE__*/function () {
    function RingIn(geomRing, poly, isExterior) {
      _classCallCheck(this, RingIn);

      if (!Array.isArray(geomRing) || geomRing.length === 0) {
        throw new Error('Input geometry is not a valid Polygon or MultiPolygon');
      }

      this.poly = poly;
      this.isExterior = isExterior;
      this.segments = [];

      if (typeof geomRing[0][0] !== 'number' || typeof geomRing[0][1] !== 'number') {
        throw new Error('Input geometry is not a valid Polygon or MultiPolygon');
      }

      var firstPoint = rounder.round(geomRing[0][0], geomRing[0][1]);
      this.bbox = {
        ll: {
          x: firstPoint.x,
          y: firstPoint.y
        },
        ur: {
          x: firstPoint.x,
          y: firstPoint.y
        }
      };
      var prevPoint = firstPoint;

      for (var i = 1, iMax = geomRing.length; i < iMax; i++) {
        if (typeof geomRing[i][0] !== 'number' || typeof geomRing[i][1] !== 'number') {
          throw new Error('Input geometry is not a valid Polygon or MultiPolygon');
        }

        var point = rounder.round(geomRing[i][0], geomRing[i][1]); // skip repeated points

        if (point.x === prevPoint.x && point.y === prevPoint.y) continue;
        this.segments.push(Segment.fromRing(prevPoint, point, this));
        if (point.x < this.bbox.ll.x) this.bbox.ll.x = point.x;
        if (point.y < this.bbox.ll.y) this.bbox.ll.y = point.y;
        if (point.x > this.bbox.ur.x) this.bbox.ur.x = point.x;
        if (point.y > this.bbox.ur.y) this.bbox.ur.y = point.y;
        prevPoint = point;
      } // add segment from last to first if last is not the same as first


      if (firstPoint.x !== prevPoint.x || firstPoint.y !== prevPoint.y) {
        this.segments.push(Segment.fromRing(prevPoint, firstPoint, this));
      }
    }

    _createClass(RingIn, [{
      key: "getSweepEvents",
      value: function getSweepEvents() {
        var sweepEvents = [];

        for (var i = 0, iMax = this.segments.length; i < iMax; i++) {
          var segment = this.segments[i];
          sweepEvents.push(segment.leftSE);
          sweepEvents.push(segment.rightSE);
        }

        return sweepEvents;
      }
    }]);

    return RingIn;
  }();

  var PolyIn = /*#__PURE__*/function () {
    function PolyIn(geomPoly, multiPoly) {
      _classCallCheck(this, PolyIn);

      if (!Array.isArray(geomPoly)) {
        throw new Error('Input geometry is not a valid Polygon or MultiPolygon');
      }

      this.exteriorRing = new RingIn(geomPoly[0], this, true); // copy by value

      this.bbox = {
        ll: {
          x: this.exteriorRing.bbox.ll.x,
          y: this.exteriorRing.bbox.ll.y
        },
        ur: {
          x: this.exteriorRing.bbox.ur.x,
          y: this.exteriorRing.bbox.ur.y
        }
      };
      this.interiorRings = [];

      for (var i = 1, iMax = geomPoly.length; i < iMax; i++) {
        var ring = new RingIn(geomPoly[i], this, false);
        if (ring.bbox.ll.x < this.bbox.ll.x) this.bbox.ll.x = ring.bbox.ll.x;
        if (ring.bbox.ll.y < this.bbox.ll.y) this.bbox.ll.y = ring.bbox.ll.y;
        if (ring.bbox.ur.x > this.bbox.ur.x) this.bbox.ur.x = ring.bbox.ur.x;
        if (ring.bbox.ur.y > this.bbox.ur.y) this.bbox.ur.y = ring.bbox.ur.y;
        this.interiorRings.push(ring);
      }

      this.multiPoly = multiPoly;
    }

    _createClass(PolyIn, [{
      key: "getSweepEvents",
      value: function getSweepEvents() {
        var sweepEvents = this.exteriorRing.getSweepEvents();

        for (var i = 0, iMax = this.interiorRings.length; i < iMax; i++) {
          var ringSweepEvents = this.interiorRings[i].getSweepEvents();

          for (var j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {
            sweepEvents.push(ringSweepEvents[j]);
          }
        }

        return sweepEvents;
      }
    }]);

    return PolyIn;
  }();

  var MultiPolyIn = /*#__PURE__*/function () {
    function MultiPolyIn(geom, isSubject) {
      _classCallCheck(this, MultiPolyIn);

      if (!Array.isArray(geom)) {
        throw new Error('Input geometry is not a valid Polygon or MultiPolygon');
      }

      try {
        // if the input looks like a polygon, convert it to a multipolygon
        if (typeof geom[0][0][0] === 'number') geom = [geom];
      } catch (ex) {// The input is either malformed or has empty arrays.
        // In either case, it will be handled later on.
      }

      this.polys = [];
      this.bbox = {
        ll: {
          x: Number.POSITIVE_INFINITY,
          y: Number.POSITIVE_INFINITY
        },
        ur: {
          x: Number.NEGATIVE_INFINITY,
          y: Number.NEGATIVE_INFINITY
        }
      };

      for (var i = 0, iMax = geom.length; i < iMax; i++) {
        var poly = new PolyIn(geom[i], this);
        if (poly.bbox.ll.x < this.bbox.ll.x) this.bbox.ll.x = poly.bbox.ll.x;
        if (poly.bbox.ll.y < this.bbox.ll.y) this.bbox.ll.y = poly.bbox.ll.y;
        if (poly.bbox.ur.x > this.bbox.ur.x) this.bbox.ur.x = poly.bbox.ur.x;
        if (poly.bbox.ur.y > this.bbox.ur.y) this.bbox.ur.y = poly.bbox.ur.y;
        this.polys.push(poly);
      }

      this.isSubject = isSubject;
    }

    _createClass(MultiPolyIn, [{
      key: "getSweepEvents",
      value: function getSweepEvents() {
        var sweepEvents = [];

        for (var i = 0, iMax = this.polys.length; i < iMax; i++) {
          var polySweepEvents = this.polys[i].getSweepEvents();

          for (var j = 0, jMax = polySweepEvents.length; j < jMax; j++) {
            sweepEvents.push(polySweepEvents[j]);
          }
        }

        return sweepEvents;
      }
    }]);

    return MultiPolyIn;
  }();

  var RingOut = /*#__PURE__*/function () {
    _createClass(RingOut, null, [{
      key: "factory",

      /* Given the segments from the sweep line pass, compute & return a series
       * of closed rings from all the segments marked to be part of the result */
      value: function factory(allSegments) {
        var ringsOut = [];

        for (var i = 0, iMax = allSegments.length; i < iMax; i++) {
          var segment = allSegments[i];
          if (!segment.isInResult() || segment.ringOut) continue;
          var prevEvent = null;
          var event = segment.leftSE;
          var nextEvent = segment.rightSE;
          var events = [event];
          var startingPoint = event.point;
          var intersectionLEs = [];
          /* Walk the chain of linked events to form a closed ring */

          while (true) {
            prevEvent = event;
            event = nextEvent;
            events.push(event);
            /* Is the ring complete? */

            if (event.point === startingPoint) break;

            while (true) {
              var availableLEs = event.getAvailableLinkedEvents();
              /* Did we hit a dead end? This shouldn't happen. Indicates some earlier
               * part of the algorithm malfunctioned... please file a bug report. */

              if (availableLEs.length === 0) {
                var firstPt = events[0].point;
                var lastPt = events[events.length - 1].point;
                throw new Error("Unable to complete output ring starting at [".concat(firstPt.x, ",") + " ".concat(firstPt.y, "]. Last matching segment found ends at") + " [".concat(lastPt.x, ", ").concat(lastPt.y, "]."));
              }
              /* Only one way to go, so cotinue on the path */


              if (availableLEs.length === 1) {
                nextEvent = availableLEs[0].otherSE;
                break;
              }
              /* We must have an intersection. Check for a completed loop */


              var indexLE = null;

              for (var j = 0, jMax = intersectionLEs.length; j < jMax; j++) {
                if (intersectionLEs[j].point === event.point) {
                  indexLE = j;
                  break;
                }
              }
              /* Found a completed loop. Cut that off and make a ring */


              if (indexLE !== null) {
                var intersectionLE = intersectionLEs.splice(indexLE)[0];
                var ringEvents = events.splice(intersectionLE.index);
                ringEvents.unshift(ringEvents[0].otherSE);
                ringsOut.push(new RingOut(ringEvents.reverse()));
                continue;
              }
              /* register the intersection */


              intersectionLEs.push({
                index: events.length,
                point: event.point
              });
              /* Choose the left-most option to continue the walk */

              var comparator = event.getLeftmostComparator(prevEvent);
              nextEvent = availableLEs.sort(comparator)[0].otherSE;
              break;
            }
          }

          ringsOut.push(new RingOut(events));
        }

        return ringsOut;
      }
    }]);

    function RingOut(events) {
      _classCallCheck(this, RingOut);

      this.events = events;

      for (var i = 0, iMax = events.length; i < iMax; i++) {
        events[i].segment.ringOut = this;
      }

      this.poly = null;
    }

    _createClass(RingOut, [{
      key: "getGeom",
      value: function getGeom() {
        // Remove superfluous points (ie extra points along a straight line),
        var prevPt = this.events[0].point;
        var points = [prevPt];

        for (var i = 1, iMax = this.events.length - 1; i < iMax; i++) {
          var _pt = this.events[i].point;
          var _nextPt = this.events[i + 1].point;
          if (compareVectorAngles(_pt, prevPt, _nextPt) === 0) continue;
          points.push(_pt);
          prevPt = _pt;
        } // ring was all (within rounding error of angle calc) colinear points


        if (points.length === 1) return null; // check if the starting point is necessary

        var pt = points[0];
        var nextPt = points[1];
        if (compareVectorAngles(pt, prevPt, nextPt) === 0) points.shift();
        points.push(points[0]);
        var step = this.isExteriorRing() ? 1 : -1;
        var iStart = this.isExteriorRing() ? 0 : points.length - 1;
        var iEnd = this.isExteriorRing() ? points.length : -1;
        var orderedPoints = [];

        for (var _i = iStart; _i != iEnd; _i += step) {
          orderedPoints.push([points[_i].x, points[_i].y]);
        }

        return orderedPoints;
      }
    }, {
      key: "isExteriorRing",
      value: function isExteriorRing() {
        if (this._isExteriorRing === undefined) {
          var enclosing = this.enclosingRing();
          this._isExteriorRing = enclosing ? !enclosing.isExteriorRing() : true;
        }

        return this._isExteriorRing;
      }
    }, {
      key: "enclosingRing",
      value: function enclosingRing() {
        if (this._enclosingRing === undefined) {
          this._enclosingRing = this._calcEnclosingRing();
        }

        return this._enclosingRing;
      }
      /* Returns the ring that encloses this one, if any */

    }, {
      key: "_calcEnclosingRing",
      value: function _calcEnclosingRing() {
        // start with the ealier sweep line event so that the prevSeg
        // chain doesn't lead us inside of a loop of ours
        var leftMostEvt = this.events[0];

        for (var i = 1, iMax = this.events.length; i < iMax; i++) {
          var evt = this.events[i];
          if (SweepEvent.compare(leftMostEvt, evt) > 0) leftMostEvt = evt;
        }

        var prevSeg = leftMostEvt.segment.prevInResult();
        var prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;

        while (true) {
          // no segment found, thus no ring can enclose us
          if (!prevSeg) return null; // no segments below prev segment found, thus the ring of the prev
          // segment must loop back around and enclose us

          if (!prevPrevSeg) return prevSeg.ringOut; // if the two segments are of different rings, the ring of the prev
          // segment must either loop around us or the ring of the prev prev
          // seg, which would make us and the ring of the prev peers

          if (prevPrevSeg.ringOut !== prevSeg.ringOut) {
            if (prevPrevSeg.ringOut.enclosingRing() !== prevSeg.ringOut) {
              return prevSeg.ringOut;
            } else return prevSeg.ringOut.enclosingRing();
          } // two segments are from the same ring, so this was a penisula
          // of that ring. iterate downward, keep searching


          prevSeg = prevPrevSeg.prevInResult();
          prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;
        }
      }
    }]);

    return RingOut;
  }();

  var PolyOut = /*#__PURE__*/function () {
    function PolyOut(exteriorRing) {
      _classCallCheck(this, PolyOut);

      this.exteriorRing = exteriorRing;
      exteriorRing.poly = this;
      this.interiorRings = [];
    }

    _createClass(PolyOut, [{
      key: "addInterior",
      value: function addInterior(ring) {
        this.interiorRings.push(ring);
        ring.poly = this;
      }
    }, {
      key: "getGeom",
      value: function getGeom() {
        var geom = [this.exteriorRing.getGeom()]; // exterior ring was all (within rounding error of angle calc) colinear points

        if (geom[0] === null) return null;

        for (var i = 0, iMax = this.interiorRings.length; i < iMax; i++) {
          var ringGeom = this.interiorRings[i].getGeom(); // interior ring was all (within rounding error of angle calc) colinear points

          if (ringGeom === null) continue;
          geom.push(ringGeom);
        }

        return geom;
      }
    }]);

    return PolyOut;
  }();

  var MultiPolyOut = /*#__PURE__*/function () {
    function MultiPolyOut(rings) {
      _classCallCheck(this, MultiPolyOut);

      this.rings = rings;
      this.polys = this._composePolys(rings);
    }

    _createClass(MultiPolyOut, [{
      key: "getGeom",
      value: function getGeom() {
        var geom = [];

        for (var i = 0, iMax = this.polys.length; i < iMax; i++) {
          var polyGeom = this.polys[i].getGeom(); // exterior ring was all (within rounding error of angle calc) colinear points

          if (polyGeom === null) continue;
          geom.push(polyGeom);
        }

        return geom;
      }
    }, {
      key: "_composePolys",
      value: function _composePolys(rings) {
        var polys = [];

        for (var i = 0, iMax = rings.length; i < iMax; i++) {
          var ring = rings[i];
          if (ring.poly) continue;
          if (ring.isExteriorRing()) polys.push(new PolyOut(ring));else {
            var enclosingRing = ring.enclosingRing();
            if (!enclosingRing.poly) polys.push(new PolyOut(enclosingRing));
            enclosingRing.poly.addInterior(ring);
          }
        }

        return polys;
      }
    }]);

    return MultiPolyOut;
  }();
  /**
   * NOTE:  We must be careful not to change any segments while
   *        they are in the SplayTree. AFAIK, there's no way to tell
   *        the tree to rebalance itself - thus before splitting
   *        a segment that's in the tree, we remove it from the tree,
   *        do the split, then re-insert it. (Even though splitting a
   *        segment *shouldn't* change its correct position in the
   *        sweep line tree, the reality is because of rounding errors,
   *        it sometimes does.)
   */


  var SweepLine = /*#__PURE__*/function () {
    function SweepLine(queue) {
      var comparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Segment.compare;

      _classCallCheck(this, SweepLine);

      this.queue = queue;
      this.tree = new Tree(comparator);
      this.segments = [];
    }

    _createClass(SweepLine, [{
      key: "process",
      value: function process(event) {
        var segment = event.segment;
        var newEvents = []; // if we've already been consumed by another segment,
        // clean up our body parts and get out

        if (event.consumedBy) {
          if (event.isLeft) this.queue.remove(event.otherSE);else this.tree.remove(segment);
          return newEvents;
        }

        var node = event.isLeft ? this.tree.insert(segment) : this.tree.find(segment);
        if (!node) throw new Error("Unable to find segment #".concat(segment.id, " ") + "[".concat(segment.leftSE.point.x, ", ").concat(segment.leftSE.point.y, "] -> ") + "[".concat(segment.rightSE.point.x, ", ").concat(segment.rightSE.point.y, "] ") + 'in SweepLine tree. Please submit a bug report.');
        var prevNode = node;
        var nextNode = node;
        var prevSeg = undefined;
        var nextSeg = undefined; // skip consumed segments still in tree

        while (prevSeg === undefined) {
          prevNode = this.tree.prev(prevNode);
          if (prevNode === null) prevSeg = null;else if (prevNode.key.consumedBy === undefined) prevSeg = prevNode.key;
        } // skip consumed segments still in tree


        while (nextSeg === undefined) {
          nextNode = this.tree.next(nextNode);
          if (nextNode === null) nextSeg = null;else if (nextNode.key.consumedBy === undefined) nextSeg = nextNode.key;
        }

        if (event.isLeft) {
          // Check for intersections against the previous segment in the sweep line
          var prevMySplitter = null;

          if (prevSeg) {
            var prevInter = prevSeg.getIntersection(segment);

            if (prevInter !== null) {
              if (!segment.isAnEndpoint(prevInter)) prevMySplitter = prevInter;

              if (!prevSeg.isAnEndpoint(prevInter)) {
                var newEventsFromSplit = this._splitSafely(prevSeg, prevInter);

                for (var i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {
                  newEvents.push(newEventsFromSplit[i]);
                }
              }
            }
          } // Check for intersections against the next segment in the sweep line


          var nextMySplitter = null;

          if (nextSeg) {
            var nextInter = nextSeg.getIntersection(segment);

            if (nextInter !== null) {
              if (!segment.isAnEndpoint(nextInter)) nextMySplitter = nextInter;

              if (!nextSeg.isAnEndpoint(nextInter)) {
                var _newEventsFromSplit = this._splitSafely(nextSeg, nextInter);

                for (var _i = 0, _iMax = _newEventsFromSplit.length; _i < _iMax; _i++) {
                  newEvents.push(_newEventsFromSplit[_i]);
                }
              }
            }
          } // For simplicity, even if we find more than one intersection we only
          // spilt on the 'earliest' (sweep-line style) of the intersections.
          // The other intersection will be handled in a future process().


          if (prevMySplitter !== null || nextMySplitter !== null) {
            var mySplitter = null;
            if (prevMySplitter === null) mySplitter = nextMySplitter;else if (nextMySplitter === null) mySplitter = prevMySplitter;else {
              var cmpSplitters = SweepEvent.comparePoints(prevMySplitter, nextMySplitter);
              mySplitter = cmpSplitters <= 0 ? prevMySplitter : nextMySplitter;
            } // Rounding errors can cause changes in ordering,
            // so remove afected segments and right sweep events before splitting

            this.queue.remove(segment.rightSE);
            newEvents.push(segment.rightSE);

            var _newEventsFromSplit2 = segment.split(mySplitter);

            for (var _i2 = 0, _iMax2 = _newEventsFromSplit2.length; _i2 < _iMax2; _i2++) {
              newEvents.push(_newEventsFromSplit2[_i2]);
            }
          }

          if (newEvents.length > 0) {
            // We found some intersections, so re-do the current event to
            // make sure sweep line ordering is totally consistent for later
            // use with the segment 'prev' pointers
            this.tree.remove(segment);
            newEvents.push(event);
          } else {
            // done with left event
            this.segments.push(segment);
            segment.prev = prevSeg;
          }
        } else {
          // event.isRight
          // since we're about to be removed from the sweep line, check for
          // intersections between our previous and next segments
          if (prevSeg && nextSeg) {
            var inter = prevSeg.getIntersection(nextSeg);

            if (inter !== null) {
              if (!prevSeg.isAnEndpoint(inter)) {
                var _newEventsFromSplit3 = this._splitSafely(prevSeg, inter);

                for (var _i3 = 0, _iMax3 = _newEventsFromSplit3.length; _i3 < _iMax3; _i3++) {
                  newEvents.push(_newEventsFromSplit3[_i3]);
                }
              }

              if (!nextSeg.isAnEndpoint(inter)) {
                var _newEventsFromSplit4 = this._splitSafely(nextSeg, inter);

                for (var _i4 = 0, _iMax4 = _newEventsFromSplit4.length; _i4 < _iMax4; _i4++) {
                  newEvents.push(_newEventsFromSplit4[_i4]);
                }
              }
            }
          }

          this.tree.remove(segment);
        }

        return newEvents;
      }
      /* Safely split a segment that is currently in the datastructures
       * IE - a segment other than the one that is currently being processed. */

    }, {
      key: "_splitSafely",
      value: function _splitSafely(seg, pt) {
        // Rounding errors can cause changes in ordering,
        // so remove afected segments and right sweep events before splitting
        // removeNode() doesn't work, so have re-find the seg
        // https://github.com/w8r/splay-tree/pull/5
        this.tree.remove(seg);
        var rightSE = seg.rightSE;
        this.queue.remove(rightSE);
        var newEvents = seg.split(pt);
        newEvents.push(rightSE); // splitting can trigger consumption

        if (seg.consumedBy === undefined) this.tree.insert(seg);
        return newEvents;
      }
    }]);

    return SweepLine;
  }();

  var POLYGON_CLIPPING_MAX_QUEUE_SIZE = typeof process !== 'undefined' && process.env.POLYGON_CLIPPING_MAX_QUEUE_SIZE || 1000000;
  var POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS = typeof process !== 'undefined' && process.env.POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS || 1000000;

  var Operation = /*#__PURE__*/function () {
    function Operation() {
      _classCallCheck(this, Operation);
    }

    _createClass(Operation, [{
      key: "run",
      value: function run(type, geom, moreGeoms) {
        operation.type = type;
        rounder.reset();
        /* Convert inputs to MultiPoly objects */

        var multipolys = [new MultiPolyIn(geom, true)];

        for (var i = 0, iMax = moreGeoms.length; i < iMax; i++) {
          multipolys.push(new MultiPolyIn(moreGeoms[i], false));
        }

        operation.numMultiPolys = multipolys.length;
        /* BBox optimization for difference operation
         * If the bbox of a multipolygon that's part of the clipping doesn't
         * intersect the bbox of the subject at all, we can just drop that
         * multiploygon. */

        if (operation.type === 'difference') {
          // in place removal
          var subject = multipolys[0];
          var _i = 1;

          while (_i < multipolys.length) {
            if (getBboxOverlap(multipolys[_i].bbox, subject.bbox) !== null) _i++;else multipolys.splice(_i, 1);
          }
        }
        /* BBox optimization for intersection operation
         * If we can find any pair of multipolygons whose bbox does not overlap,
         * then the result will be empty. */


        if (operation.type === 'intersection') {
          // TODO: this is O(n^2) in number of polygons. By sorting the bboxes,
          //       it could be optimized to O(n * ln(n))
          for (var _i2 = 0, _iMax = multipolys.length; _i2 < _iMax; _i2++) {
            var mpA = multipolys[_i2];

            for (var j = _i2 + 1, jMax = multipolys.length; j < jMax; j++) {
              if (getBboxOverlap(mpA.bbox, multipolys[j].bbox) === null) return [];
            }
          }
        }
        /* Put segment endpoints in a priority queue */


        var queue = new Tree(SweepEvent.compare);

        for (var _i3 = 0, _iMax2 = multipolys.length; _i3 < _iMax2; _i3++) {
          var sweepEvents = multipolys[_i3].getSweepEvents();

          for (var _j = 0, _jMax = sweepEvents.length; _j < _jMax; _j++) {
            queue.insert(sweepEvents[_j]);

            if (queue.size > POLYGON_CLIPPING_MAX_QUEUE_SIZE) {
              // prevents an infinite loop, an otherwise common manifestation of bugs
              throw new Error('Infinite loop when putting segment endpoints in a priority queue ' + '(queue size too big). Please file a bug report.');
            }
          }
        }
        /* Pass the sweep line over those endpoints */


        var sweepLine = new SweepLine(queue);
        var prevQueueSize = queue.size;
        var node = queue.pop();

        while (node) {
          var evt = node.key;

          if (queue.size === prevQueueSize) {
            // prevents an infinite loop, an otherwise common manifestation of bugs
            var seg = evt.segment;
            throw new Error("Unable to pop() ".concat(evt.isLeft ? 'left' : 'right', " SweepEvent ") + "[".concat(evt.point.x, ", ").concat(evt.point.y, "] from segment #").concat(seg.id, " ") + "[".concat(seg.leftSE.point.x, ", ").concat(seg.leftSE.point.y, "] -> ") + "[".concat(seg.rightSE.point.x, ", ").concat(seg.rightSE.point.y, "] from queue. ") + 'Please file a bug report.');
          }

          if (queue.size > POLYGON_CLIPPING_MAX_QUEUE_SIZE) {
            // prevents an infinite loop, an otherwise common manifestation of bugs
            throw new Error('Infinite loop when passing sweep line over endpoints ' + '(queue size too big). Please file a bug report.');
          }

          if (sweepLine.segments.length > POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS) {
            // prevents an infinite loop, an otherwise common manifestation of bugs
            throw new Error('Infinite loop when passing sweep line over endpoints ' + '(too many sweep line segments). Please file a bug report.');
          }

          var newEvents = sweepLine.process(evt);

          for (var _i4 = 0, _iMax3 = newEvents.length; _i4 < _iMax3; _i4++) {
            var _evt = newEvents[_i4];
            if (_evt.consumedBy === undefined) queue.insert(_evt);
          }

          prevQueueSize = queue.size;
          node = queue.pop();
        } // free some memory we don't need anymore


        rounder.reset();
        /* Collect and compile segments we're keeping into a multipolygon */

        var ringsOut = RingOut.factory(sweepLine.segments);
        var result = new MultiPolyOut(ringsOut);
        return result.getGeom();
      }
    }]);

    return Operation;
  }(); // singleton available by import


  var operation = new Operation();

  var union$1 = function union(geom) {
    for (var _len = arguments.length, moreGeoms = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      moreGeoms[_key - 1] = arguments[_key];
    }

    return operation.run('union', geom, moreGeoms);
  };

  var intersection$1 = function intersection(geom) {
    for (var _len2 = arguments.length, moreGeoms = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      moreGeoms[_key2 - 1] = arguments[_key2];
    }

    return operation.run('intersection', geom, moreGeoms);
  };

  var xor = function xor(geom) {
    for (var _len3 = arguments.length, moreGeoms = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      moreGeoms[_key3 - 1] = arguments[_key3];
    }

    return operation.run('xor', geom, moreGeoms);
  };

  var difference$1 = function difference(subjectGeom) {
    for (var _len4 = arguments.length, clippingGeoms = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      clippingGeoms[_key4 - 1] = arguments[_key4];
    }

    return operation.run('difference', subjectGeom, clippingGeoms);
  };

  var index = {
    union: union$1,
    intersection: intersection$1,
    xor: xor,
    difference: difference$1
  };

  /**
   * Finds the difference between two {@link Polygon|polygons} by clipping the second polygon from the first.
   *
   * @name difference
   * @param {Feature<Polygon|MultiPolygon>} polygon1 input Polygon feature
   * @param {Feature<Polygon|MultiPolygon>} polygon2 Polygon feature to difference from polygon1
   * @returns {Feature<Polygon|MultiPolygon>|null} a Polygon or MultiPolygon feature showing the area of `polygon1` excluding the area of `polygon2` (if empty returns `null`)
   * @example
   * var polygon1 = turf.polygon([[
   *   [128, -26],
   *   [141, -26],
   *   [141, -21],
   *   [128, -21],
   *   [128, -26]
   * ]], {
   *   "fill": "#F00",
   *   "fill-opacity": 0.1
   * });
   * var polygon2 = turf.polygon([[
   *   [126, -28],
   *   [140, -28],
   *   [140, -20],
   *   [126, -20],
   *   [126, -28]
   * ]], {
   *   "fill": "#00F",
   *   "fill-opacity": 0.1
   * });
   *
   * var difference = turf.difference(polygon1, polygon2);
   *
   * //addToMap
   * var addToMap = [polygon1, polygon2, difference];
   */

  function difference(polygon1, polygon2) {
    var geom1 = getGeom(polygon1);
    var geom2 = getGeom(polygon2);
    var properties = polygon1.properties || {};
    var differenced = index.difference(geom1.coordinates, geom2.coordinates);
    if (differenced.length === 0) return null;
    if (differenced.length === 1) return polygon(differenced[0], properties);
    return multiPolygon(differenced, properties);
  }

  /* Polyfill service v3.13.0
   * For detailed credits and licence information see http://github.com/financial-times/polyfill-service
   *
   * - Array.prototype.fill, License: CC0 */if(!('fill'in Array.prototype)){Object.defineProperty(Array.prototype,'fill',{configurable:true,value:function fill(value){if(this===undefined||this===null){throw new TypeError(this+' is not an object');}var arrayLike=Object(this);var length=Math.max(Math.min(arrayLike.length,9007199254740991),0)||0;var relativeStart=1 in arguments?parseInt(Number(arguments[1]),10)||0:0;relativeStart=relativeStart<0?Math.max(length+relativeStart,0):Math.min(relativeStart,length);var relativeEnd=2 in arguments&&arguments[2]!==undefined?parseInt(Number(arguments[2]),10)||0:length;relativeEnd=relativeEnd<0?Math.max(length+arguments[2],0):Math.min(relativeEnd,length);while(relativeStart<relativeEnd){arrayLike[relativeStart]=value;++relativeStart;}return arrayLike;},writable:true});}/**
   * Polyfill for IE support
   */Number.isFinite=Number.isFinite||function(value){return typeof value==='number'&&isFinite(value);};Number.isInteger=Number.isInteger||function(val){return typeof val==='number'&&isFinite(val)&&Math.floor(val)===val;};Number.parseFloat=Number.parseFloat||parseFloat;Number.isNaN=Number.isNaN||function(value){return value!==value;// eslint-disable-line
  };/**
   * Polyfill for IE support
   */Math.trunc=Math.trunc||function(x){return x<0?Math.ceil(x):Math.floor(x);};var NumberUtil=function NumberUtil(){};NumberUtil.prototype.interfaces_=function interfaces_(){return [];};NumberUtil.prototype.getClass=function getClass(){return NumberUtil;};NumberUtil.prototype.equalsWithTolerance=function equalsWithTolerance(x1,x2,tolerance){return Math.abs(x1-x2)<=tolerance;};var IllegalArgumentException=function(Error){function IllegalArgumentException(message){Error.call(this,message);this.name='IllegalArgumentException';this.message=message;this.stack=new Error().stack;}if(Error)IllegalArgumentException.__proto__=Error;IllegalArgumentException.prototype=Object.create(Error&&Error.prototype);IllegalArgumentException.prototype.constructor=IllegalArgumentException;return IllegalArgumentException;}(Error);var Double=function Double(){};var staticAccessors$1={MAX_VALUE:{configurable:true}};Double.isNaN=function isNaN(n){return Number.isNaN(n);};Double.doubleToLongBits=function doubleToLongBits(n){return n;};Double.longBitsToDouble=function longBitsToDouble(n){return n;};Double.isInfinite=function isInfinite(n){return !Number.isFinite(n);};staticAccessors$1.MAX_VALUE.get=function(){return Number.MAX_VALUE;};Object.defineProperties(Double,staticAccessors$1);var Comparable=function Comparable(){};var Clonable=function Clonable(){};var Comparator=function Comparator(){};function Serializable(){}// import Assert from '../util/Assert'
  var Coordinate=function Coordinate(){this.x=null;this.y=null;this.z=null;if(arguments.length===0){this.x=0.0;this.y=0.0;this.z=Coordinate.NULL_ORDINATE;}else if(arguments.length===1){var c=arguments[0];this.x=c.x;this.y=c.y;this.z=c.z;}else if(arguments.length===2){this.x=arguments[0];this.y=arguments[1];this.z=Coordinate.NULL_ORDINATE;}else if(arguments.length===3){this.x=arguments[0];this.y=arguments[1];this.z=arguments[2];}};var staticAccessors={DimensionalComparator:{configurable:true},serialVersionUID:{configurable:true},NULL_ORDINATE:{configurable:true},X:{configurable:true},Y:{configurable:true},Z:{configurable:true}};Coordinate.prototype.setOrdinate=function setOrdinate(ordinateIndex,value){switch(ordinateIndex){case Coordinate.X:this.x=value;break;case Coordinate.Y:this.y=value;break;case Coordinate.Z:this.z=value;break;default:throw new IllegalArgumentException('Invalid ordinate index: '+ordinateIndex);}};Coordinate.prototype.equals2D=function equals2D(){if(arguments.length===1){var other=arguments[0];if(this.x!==other.x){return false;}if(this.y!==other.y){return false;}return true;}else if(arguments.length===2){var c=arguments[0];var tolerance=arguments[1];if(!NumberUtil.equalsWithTolerance(this.x,c.x,tolerance)){return false;}if(!NumberUtil.equalsWithTolerance(this.y,c.y,tolerance)){return false;}return true;}};Coordinate.prototype.getOrdinate=function getOrdinate(ordinateIndex){switch(ordinateIndex){case Coordinate.X:return this.x;case Coordinate.Y:return this.y;case Coordinate.Z:return this.z;}throw new IllegalArgumentException('Invalid ordinate index: '+ordinateIndex);};Coordinate.prototype.equals3D=function equals3D(other){return this.x===other.x&&this.y===other.y&&(this.z===other.z||Double.isNaN(this.z))&&Double.isNaN(other.z);};Coordinate.prototype.equals=function equals(other){if(!(other instanceof Coordinate)){return false;}return this.equals2D(other);};Coordinate.prototype.equalInZ=function equalInZ(c,tolerance){return NumberUtil.equalsWithTolerance(this.z,c.z,tolerance);};Coordinate.prototype.compareTo=function compareTo(o){var other=o;if(this.x<other.x){return -1;}if(this.x>other.x){return 1;}if(this.y<other.y){return -1;}if(this.y>other.y){return 1;}return 0;};Coordinate.prototype.clone=function clone(){// try {
  // var coord = null
  // return coord
  // } catch (e) {
  // if (e instanceof CloneNotSupportedException) {
  //   Assert.shouldNeverReachHere("this shouldn't happen because this class is Cloneable")
  //   return null
  // } else throw e
  // } finally {}
  };Coordinate.prototype.copy=function copy(){return new Coordinate(this);};Coordinate.prototype.toString=function toString(){return '('+this.x+', '+this.y+', '+this.z+')';};Coordinate.prototype.distance3D=function distance3D(c){var dx=this.x-c.x;var dy=this.y-c.y;var dz=this.z-c.z;return Math.sqrt(dx*dx+dy*dy+dz*dz);};Coordinate.prototype.distance=function distance(c){var dx=this.x-c.x;var dy=this.y-c.y;return Math.sqrt(dx*dx+dy*dy);};Coordinate.prototype.hashCode=function hashCode(){var result=17;result=37*result+Coordinate.hashCode(this.x);result=37*result+Coordinate.hashCode(this.y);return result;};Coordinate.prototype.setCoordinate=function setCoordinate(other){this.x=other.x;this.y=other.y;this.z=other.z;};Coordinate.prototype.interfaces_=function interfaces_(){return [Comparable,Clonable,Serializable];};Coordinate.prototype.getClass=function getClass(){return Coordinate;};Coordinate.hashCode=function hashCode(){if(arguments.length===1){var x=arguments[0];var f=Double.doubleToLongBits(x);return Math.trunc((f^f)>>>32);}};staticAccessors.DimensionalComparator.get=function(){return DimensionalComparator;};staticAccessors.serialVersionUID.get=function(){return 6683108902428366910;};staticAccessors.NULL_ORDINATE.get=function(){return Double.NaN;};staticAccessors.X.get=function(){return 0;};staticAccessors.Y.get=function(){return 1;};staticAccessors.Z.get=function(){return 2;};Object.defineProperties(Coordinate,staticAccessors);var DimensionalComparator=function DimensionalComparator(dimensionsToTest){this._dimensionsToTest=2;if(arguments.length===0);else if(arguments.length===1){var dimensionsToTest$1=arguments[0];if(dimensionsToTest$1!==2&&dimensionsToTest$1!==3){throw new IllegalArgumentException('only 2 or 3 dimensions may be specified');}this._dimensionsToTest=dimensionsToTest$1;}};DimensionalComparator.prototype.compare=function compare(o1,o2){var c1=o1;var c2=o2;var compX=DimensionalComparator.compare(c1.x,c2.x);if(compX!==0){return compX;}var compY=DimensionalComparator.compare(c1.y,c2.y);if(compY!==0){return compY;}if(this._dimensionsToTest<=2){return 0;}var compZ=DimensionalComparator.compare(c1.z,c2.z);return compZ;};DimensionalComparator.prototype.interfaces_=function interfaces_(){return [Comparator];};DimensionalComparator.prototype.getClass=function getClass(){return DimensionalComparator;};DimensionalComparator.compare=function compare(a,b){if(a<b){return -1;}if(a>b){return 1;}if(Double.isNaN(a)){if(Double.isNaN(b)){return 0;}return -1;}if(Double.isNaN(b)){return 1;}return 0;};// import hasInterface from '../../../../hasInterface'
  // import CoordinateSequence from './CoordinateSequence'
  var CoordinateSequenceFactory=function CoordinateSequenceFactory(){};CoordinateSequenceFactory.prototype.create=function create(){// if (arguments.length === 1) {
  // if (arguments[0] instanceof Array) {
  //   let coordinates = arguments[0]
  // } else if (hasInterface(arguments[0], CoordinateSequence)) {
  //   let coordSeq = arguments[0]
  // }
  // } else if (arguments.length === 2) {
  // let size = arguments[0]
  // let dimension = arguments[1]
  // }
  };CoordinateSequenceFactory.prototype.interfaces_=function interfaces_(){return [];};CoordinateSequenceFactory.prototype.getClass=function getClass(){return CoordinateSequenceFactory;};var Location=function Location(){};var staticAccessors$4={INTERIOR:{configurable:true},BOUNDARY:{configurable:true},EXTERIOR:{configurable:true},NONE:{configurable:true}};Location.prototype.interfaces_=function interfaces_(){return [];};Location.prototype.getClass=function getClass(){return Location;};Location.toLocationSymbol=function toLocationSymbol(locationValue){switch(locationValue){case Location.EXTERIOR:return 'e';case Location.BOUNDARY:return 'b';case Location.INTERIOR:return 'i';case Location.NONE:return '-';}throw new IllegalArgumentException('Unknown location value: '+locationValue);};staticAccessors$4.INTERIOR.get=function(){return 0;};staticAccessors$4.BOUNDARY.get=function(){return 1;};staticAccessors$4.EXTERIOR.get=function(){return 2;};staticAccessors$4.NONE.get=function(){return -1;};Object.defineProperties(Location,staticAccessors$4);var hasInterface=function hasInterface(o,i){return o.interfaces_&&o.interfaces_().indexOf(i)>-1;};var MathUtil=function MathUtil(){};var staticAccessors$5={LOG_10:{configurable:true}};MathUtil.prototype.interfaces_=function interfaces_(){return [];};MathUtil.prototype.getClass=function getClass(){return MathUtil;};MathUtil.log10=function log10(x){var ln=Math.log(x);if(Double.isInfinite(ln)){return ln;}if(Double.isNaN(ln)){return ln;}return ln/MathUtil.LOG_10;};MathUtil.min=function min(v1,v2,v3,v4){var min=v1;if(v2<min){min=v2;}if(v3<min){min=v3;}if(v4<min){min=v4;}return min;};MathUtil.clamp=function clamp(){if(typeof arguments[2]==='number'&&typeof arguments[0]==='number'&&typeof arguments[1]==='number'){var x=arguments[0];var min=arguments[1];var max=arguments[2];if(x<min){return min;}if(x>max){return max;}return x;}else if(Number.isInteger(arguments[2])&&Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var x$1=arguments[0];var min$1=arguments[1];var max$1=arguments[2];if(x$1<min$1){return min$1;}if(x$1>max$1){return max$1;}return x$1;}};MathUtil.wrap=function wrap(index,max){if(index<0){return max- -index%max;}return index%max;};MathUtil.max=function max(){if(arguments.length===3){var v1=arguments[0];var v2=arguments[1];var v3=arguments[2];var max=v1;if(v2>max){max=v2;}if(v3>max){max=v3;}return max;}else if(arguments.length===4){var v1$1=arguments[0];var v2$1=arguments[1];var v3$1=arguments[2];var v4=arguments[3];var max$1=v1$1;if(v2$1>max$1){max$1=v2$1;}if(v3$1>max$1){max$1=v3$1;}if(v4>max$1){max$1=v4;}return max$1;}};MathUtil.average=function average(x1,x2){return (x1+x2)/2.0;};staticAccessors$5.LOG_10.get=function(){return Math.log(10);};Object.defineProperties(MathUtil,staticAccessors$5);var StringBuffer=function StringBuffer(str){this.str=str;};StringBuffer.prototype.append=function append(e){this.str+=e;};StringBuffer.prototype.setCharAt=function setCharAt(i,c){this.str=this.str.substr(0,i)+c+this.str.substr(i+1);};StringBuffer.prototype.toString=function toString(e){return this.str;};var Integer=function Integer(value){this.value=value;};Integer.prototype.intValue=function intValue(){return this.value;};Integer.prototype.compareTo=function compareTo(o){if(this.value<o){return -1;}if(this.value>o){return 1;}return 0;};Integer.isNaN=function isNaN(n){return Number.isNaN(n);};var Character=function Character(){};Character.isWhitespace=function isWhitespace(c){return c<=32&&c>=0||c===127;};Character.toUpperCase=function toUpperCase(c){return c.toUpperCase();};var DD=function DD(){this._hi=0.0;this._lo=0.0;if(arguments.length===0){this.init(0.0);}else if(arguments.length===1){if(typeof arguments[0]==='number'){var x=arguments[0];this.init(x);}else if(arguments[0]instanceof DD){var dd=arguments[0];this.init(dd);}else if(typeof arguments[0]==='string'){var str=arguments[0];DD.call(this,DD.parse(str));}}else if(arguments.length===2){var hi=arguments[0];var lo=arguments[1];this.init(hi,lo);}};var staticAccessors$7={PI:{configurable:true},TWO_PI:{configurable:true},PI_2:{configurable:true},E:{configurable:true},NaN:{configurable:true},EPS:{configurable:true},SPLIT:{configurable:true},MAX_PRINT_DIGITS:{configurable:true},TEN:{configurable:true},ONE:{configurable:true},SCI_NOT_EXPONENT_CHAR:{configurable:true},SCI_NOT_ZERO:{configurable:true}};DD.prototype.le=function le(y){return (this._hi<y._hi||this._hi===y._hi)&&this._lo<=y._lo;};DD.prototype.extractSignificantDigits=function extractSignificantDigits(insertDecimalPoint,magnitude){var y=this.abs();var mag=DD.magnitude(y._hi);var scale=DD.TEN.pow(mag);y=y.divide(scale);if(y.gt(DD.TEN)){y=y.divide(DD.TEN);mag+=1;}else if(y.lt(DD.ONE)){y=y.multiply(DD.TEN);mag-=1;}var decimalPointPos=mag+1;var buf=new StringBuffer();var numDigits=DD.MAX_PRINT_DIGITS-1;for(var i=0;i<=numDigits;i++){if(insertDecimalPoint&&i===decimalPointPos){buf.append('.');}var digit=Math.trunc(y._hi);if(digit<0){break;}var rebiasBy10=false;var digitChar=0;if(digit>9){rebiasBy10=true;digitChar='9';}else {digitChar='0'+digit;}buf.append(digitChar);y=y.subtract(DD.valueOf(digit)).multiply(DD.TEN);if(rebiasBy10){y.selfAdd(DD.TEN);}var continueExtractingDigits=true;var remMag=DD.magnitude(y._hi);if(remMag<0&&Math.abs(remMag)>=numDigits-i){continueExtractingDigits=false;}if(!continueExtractingDigits){break;}}magnitude[0]=mag;return buf.toString();};DD.prototype.sqr=function sqr(){return this.multiply(this);};DD.prototype.doubleValue=function doubleValue(){return this._hi+this._lo;};DD.prototype.subtract=function subtract(){if(arguments[0]instanceof DD){var y=arguments[0];return this.add(y.negate());}else if(typeof arguments[0]==='number'){var y$1=arguments[0];return this.add(-y$1);}};DD.prototype.equals=function equals(){if(arguments.length===1){var y=arguments[0];return this._hi===y._hi&&this._lo===y._lo;}};DD.prototype.isZero=function isZero(){return this._hi===0.0&&this._lo===0.0;};DD.prototype.selfSubtract=function selfSubtract(){if(arguments[0]instanceof DD){var y=arguments[0];if(this.isNaN()){return this;}return this.selfAdd(-y._hi,-y._lo);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];if(this.isNaN()){return this;}return this.selfAdd(-y$1,0.0);}};DD.prototype.getSpecialNumberString=function getSpecialNumberString(){if(this.isZero()){return '0.0';}if(this.isNaN()){return 'NaN ';}return null;};DD.prototype.min=function min(x){if(this.le(x)){return this;}else {return x;}};DD.prototype.selfDivide=function selfDivide(){if(arguments.length===1){if(arguments[0]instanceof DD){var y=arguments[0];return this.selfDivide(y._hi,y._lo);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];return this.selfDivide(y$1,0.0);}}else if(arguments.length===2){var yhi=arguments[0];var ylo=arguments[1];var hc=null;var tc=null;var hy=null;var ty=null;var C=null;var c=null;var U=null;var u=null;C=this._hi/yhi;c=DD.SPLIT*C;hc=c-C;u=DD.SPLIT*yhi;hc=c-hc;tc=C-hc;hy=u-yhi;U=C*yhi;hy=u-hy;ty=yhi-hy;u=hc*hy-U+hc*ty+tc*hy+tc*ty;c=(this._hi-U-u+this._lo-C*ylo)/yhi;u=C+c;this._hi=u;this._lo=C-u+c;return this;}};DD.prototype.dump=function dump(){return 'DD<'+this._hi+', '+this._lo+'>';};DD.prototype.divide=function divide(){if(arguments[0]instanceof DD){var y=arguments[0];var hc=null;var tc=null;var hy=null;var ty=null;var C=null;var c=null;var U=null;var u=null;C=this._hi/y._hi;c=DD.SPLIT*C;hc=c-C;u=DD.SPLIT*y._hi;hc=c-hc;tc=C-hc;hy=u-y._hi;U=C*y._hi;hy=u-hy;ty=y._hi-hy;u=hc*hy-U+hc*ty+tc*hy+tc*ty;c=(this._hi-U-u+this._lo-C*y._lo)/y._hi;u=C+c;var zhi=u;var zlo=C-u+c;return new DD(zhi,zlo);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];if(Double.isNaN(y$1)){return DD.createNaN();}return DD.copy(this).selfDivide(y$1,0.0);}};DD.prototype.ge=function ge(y){return (this._hi>y._hi||this._hi===y._hi)&&this._lo>=y._lo;};DD.prototype.pow=function pow(exp){if(exp===0.0){return DD.valueOf(1.0);}var r=new DD(this);var s=DD.valueOf(1.0);var n=Math.abs(exp);if(n>1){while(n>0){if(n%2===1){s.selfMultiply(r);}n/=2;if(n>0){r=r.sqr();}}}else {s=r;}if(exp<0){return s.reciprocal();}return s;};DD.prototype.ceil=function ceil(){if(this.isNaN()){return DD.NaN;}var fhi=Math.ceil(this._hi);var flo=0.0;if(fhi===this._hi){flo=Math.ceil(this._lo);}return new DD(fhi,flo);};DD.prototype.compareTo=function compareTo(o){var other=o;if(this._hi<other._hi){return -1;}if(this._hi>other._hi){return 1;}if(this._lo<other._lo){return -1;}if(this._lo>other._lo){return 1;}return 0;};DD.prototype.rint=function rint(){if(this.isNaN()){return this;}var plus5=this.add(0.5);return plus5.floor();};DD.prototype.setValue=function setValue(){if(arguments[0]instanceof DD){var value=arguments[0];this.init(value);return this;}else if(typeof arguments[0]==='number'){var value$1=arguments[0];this.init(value$1);return this;}};DD.prototype.max=function max(x){if(this.ge(x)){return this;}else {return x;}};DD.prototype.sqrt=function sqrt(){if(this.isZero()){return DD.valueOf(0.0);}if(this.isNegative()){return DD.NaN;}var x=1.0/Math.sqrt(this._hi);var ax=this._hi*x;var axdd=DD.valueOf(ax);var diffSq=this.subtract(axdd.sqr());var d2=diffSq._hi*(x*0.5);return axdd.add(d2);};DD.prototype.selfAdd=function selfAdd(){if(arguments.length===1){if(arguments[0]instanceof DD){var y=arguments[0];return this.selfAdd(y._hi,y._lo);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];var H=null;var h=null;var S=null;var s=null;var e=null;var f=null;S=this._hi+y$1;e=S-this._hi;s=S-e;s=y$1-e+(this._hi-s);f=s+this._lo;H=S+f;h=f+(S-H);this._hi=H+h;this._lo=h+(H-this._hi);return this;}}else if(arguments.length===2){var yhi=arguments[0];var ylo=arguments[1];var H$1=null;var h$1=null;var T=null;var t=null;var S$1=null;var s$1=null;var e$1=null;var f$1=null;S$1=this._hi+yhi;T=this._lo+ylo;e$1=S$1-this._hi;f$1=T-this._lo;s$1=S$1-e$1;t=T-f$1;s$1=yhi-e$1+(this._hi-s$1);t=ylo-f$1+(this._lo-t);e$1=s$1+T;H$1=S$1+e$1;h$1=e$1+(S$1-H$1);e$1=t+h$1;var zhi=H$1+e$1;var zlo=e$1+(H$1-zhi);this._hi=zhi;this._lo=zlo;return this;}};DD.prototype.selfMultiply=function selfMultiply(){if(arguments.length===1){if(arguments[0]instanceof DD){var y=arguments[0];return this.selfMultiply(y._hi,y._lo);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];return this.selfMultiply(y$1,0.0);}}else if(arguments.length===2){var yhi=arguments[0];var ylo=arguments[1];var hx=null;var tx=null;var hy=null;var ty=null;var C=null;var c=null;C=DD.SPLIT*this._hi;hx=C-this._hi;c=DD.SPLIT*yhi;hx=C-hx;tx=this._hi-hx;hy=c-yhi;C=this._hi*yhi;hy=c-hy;ty=yhi-hy;c=hx*hy-C+hx*ty+tx*hy+tx*ty+(this._hi*ylo+this._lo*yhi);var zhi=C+c;hx=C-zhi;var zlo=c+hx;this._hi=zhi;this._lo=zlo;return this;}};DD.prototype.selfSqr=function selfSqr(){return this.selfMultiply(this);};DD.prototype.floor=function floor(){if(this.isNaN()){return DD.NaN;}var fhi=Math.floor(this._hi);var flo=0.0;if(fhi===this._hi){flo=Math.floor(this._lo);}return new DD(fhi,flo);};DD.prototype.negate=function negate(){if(this.isNaN()){return this;}return new DD(-this._hi,-this._lo);};DD.prototype.clone=function clone(){// try {
  // return null
  // } catch (ex) {
  // if (ex instanceof CloneNotSupportedException) {
  //   return null
  // } else throw ex
  // } finally {}
  };DD.prototype.multiply=function multiply(){if(arguments[0]instanceof DD){var y=arguments[0];if(y.isNaN()){return DD.createNaN();}return DD.copy(this).selfMultiply(y);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];if(Double.isNaN(y$1)){return DD.createNaN();}return DD.copy(this).selfMultiply(y$1,0.0);}};DD.prototype.isNaN=function isNaN(){return Double.isNaN(this._hi);};DD.prototype.intValue=function intValue(){return Math.trunc(this._hi);};DD.prototype.toString=function toString(){var mag=DD.magnitude(this._hi);if(mag>=-3&&mag<=20){return this.toStandardNotation();}return this.toSciNotation();};DD.prototype.toStandardNotation=function toStandardNotation(){var specialStr=this.getSpecialNumberString();if(specialStr!==null){return specialStr;}var magnitude=new Array(1).fill(null);var sigDigits=this.extractSignificantDigits(true,magnitude);var decimalPointPos=magnitude[0]+1;var num=sigDigits;if(sigDigits.charAt(0)==='.'){num='0'+sigDigits;}else if(decimalPointPos<0){num='0.'+DD.stringOfChar('0',-decimalPointPos)+sigDigits;}else if(sigDigits.indexOf('.')===-1){var numZeroes=decimalPointPos-sigDigits.length;var zeroes=DD.stringOfChar('0',numZeroes);num=sigDigits+zeroes+'.0';}if(this.isNegative()){return '-'+num;}return num;};DD.prototype.reciprocal=function reciprocal(){var hc=null;var tc=null;var hy=null;var ty=null;var C=null;var c=null;var U=null;var u=null;C=1.0/this._hi;c=DD.SPLIT*C;hc=c-C;u=DD.SPLIT*this._hi;hc=c-hc;tc=C-hc;hy=u-this._hi;U=C*this._hi;hy=u-hy;ty=this._hi-hy;u=hc*hy-U+hc*ty+tc*hy+tc*ty;c=(1.0-U-u-C*this._lo)/this._hi;var zhi=C+c;var zlo=C-zhi+c;return new DD(zhi,zlo);};DD.prototype.toSciNotation=function toSciNotation(){if(this.isZero()){return DD.SCI_NOT_ZERO;}var specialStr=this.getSpecialNumberString();if(specialStr!==null){return specialStr;}var magnitude=new Array(1).fill(null);var digits=this.extractSignificantDigits(false,magnitude);var expStr=DD.SCI_NOT_EXPONENT_CHAR+magnitude[0];if(digits.charAt(0)==='0'){throw new Error('Found leading zero: '+digits);}var trailingDigits='';if(digits.length>1){trailingDigits=digits.substring(1);}var digitsWithDecimal=digits.charAt(0)+'.'+trailingDigits;if(this.isNegative()){return '-'+digitsWithDecimal+expStr;}return digitsWithDecimal+expStr;};DD.prototype.abs=function abs(){if(this.isNaN()){return DD.NaN;}if(this.isNegative()){return this.negate();}return new DD(this);};DD.prototype.isPositive=function isPositive(){return (this._hi>0.0||this._hi===0.0)&&this._lo>0.0;};DD.prototype.lt=function lt(y){return (this._hi<y._hi||this._hi===y._hi)&&this._lo<y._lo;};DD.prototype.add=function add(){if(arguments[0]instanceof DD){var y=arguments[0];return DD.copy(this).selfAdd(y);}else if(typeof arguments[0]==='number'){var y$1=arguments[0];return DD.copy(this).selfAdd(y$1);}};DD.prototype.init=function init(){if(arguments.length===1){if(typeof arguments[0]==='number'){var x=arguments[0];this._hi=x;this._lo=0.0;}else if(arguments[0]instanceof DD){var dd=arguments[0];this._hi=dd._hi;this._lo=dd._lo;}}else if(arguments.length===2){var hi=arguments[0];var lo=arguments[1];this._hi=hi;this._lo=lo;}};DD.prototype.gt=function gt(y){return (this._hi>y._hi||this._hi===y._hi)&&this._lo>y._lo;};DD.prototype.isNegative=function isNegative(){return (this._hi<0.0||this._hi===0.0)&&this._lo<0.0;};DD.prototype.trunc=function trunc(){if(this.isNaN()){return DD.NaN;}if(this.isPositive()){return this.floor();}else {return this.ceil();}};DD.prototype.signum=function signum(){if(this._hi>0){return 1;}if(this._hi<0){return -1;}if(this._lo>0){return 1;}if(this._lo<0){return -1;}return 0;};DD.prototype.interfaces_=function interfaces_(){return [Serializable,Comparable,Clonable];};DD.prototype.getClass=function getClass(){return DD;};DD.sqr=function sqr(x){return DD.valueOf(x).selfMultiply(x);};DD.valueOf=function valueOf(){if(typeof arguments[0]==='string'){var str=arguments[0];return DD.parse(str);}else if(typeof arguments[0]==='number'){var x=arguments[0];return new DD(x);}};DD.sqrt=function sqrt(x){return DD.valueOf(x).sqrt();};DD.parse=function parse(str){var i=0;var strlen=str.length;while(Character.isWhitespace(str.charAt(i))){i++;}var isNegative=false;if(i<strlen){var signCh=str.charAt(i);if(signCh==='-'||signCh==='+'){i++;if(signCh==='-'){isNegative=true;}}}var val=new DD();var numDigits=0;var numBeforeDec=0;var exp=0;while(true){if(i>=strlen){break;}var ch=str.charAt(i);i++;if(Character.isDigit(ch)){var d=ch-'0';val.selfMultiply(DD.TEN);val.selfAdd(d);numDigits++;continue;}if(ch==='.'){numBeforeDec=numDigits;continue;}if(ch==='e'||ch==='E'){var expStr=str.substring(i);try{exp=Integer.parseInt(expStr);}catch(ex){if(ex instanceof Error){throw new Error('Invalid exponent '+expStr+' in string '+str);}else {throw ex;}}finally{}break;}throw new Error("Unexpected character '"+ch+"' at position "+i+' in string '+str);}var val2=val;var numDecPlaces=numDigits-numBeforeDec-exp;if(numDecPlaces===0){val2=val;}else if(numDecPlaces>0){var scale=DD.TEN.pow(numDecPlaces);val2=val.divide(scale);}else if(numDecPlaces<0){var scale$1=DD.TEN.pow(-numDecPlaces);val2=val.multiply(scale$1);}if(isNegative){return val2.negate();}return val2;};DD.createNaN=function createNaN(){return new DD(Double.NaN,Double.NaN);};DD.copy=function copy(dd){return new DD(dd);};DD.magnitude=function magnitude(x){var xAbs=Math.abs(x);var xLog10=Math.log(xAbs)/Math.log(10);var xMag=Math.trunc(Math.floor(xLog10));var xApprox=Math.pow(10,xMag);if(xApprox*10<=xAbs){xMag+=1;}return xMag;};DD.stringOfChar=function stringOfChar(ch,len){var buf=new StringBuffer();for(var i=0;i<len;i++){buf.append(ch);}return buf.toString();};staticAccessors$7.PI.get=function(){return new DD(3.141592653589793116e+00,1.224646799147353207e-16);};staticAccessors$7.TWO_PI.get=function(){return new DD(6.283185307179586232e+00,2.449293598294706414e-16);};staticAccessors$7.PI_2.get=function(){return new DD(1.570796326794896558e+00,6.123233995736766036e-17);};staticAccessors$7.E.get=function(){return new DD(2.718281828459045091e+00,1.445646891729250158e-16);};staticAccessors$7.NaN.get=function(){return new DD(Double.NaN,Double.NaN);};staticAccessors$7.EPS.get=function(){return 1.23259516440783e-32;};staticAccessors$7.SPLIT.get=function(){return 134217729.0;};staticAccessors$7.MAX_PRINT_DIGITS.get=function(){return 32;};staticAccessors$7.TEN.get=function(){return DD.valueOf(10.0);};staticAccessors$7.ONE.get=function(){return DD.valueOf(1.0);};staticAccessors$7.SCI_NOT_EXPONENT_CHAR.get=function(){return 'E';};staticAccessors$7.SCI_NOT_ZERO.get=function(){return '0.0E0';};Object.defineProperties(DD,staticAccessors$7);var CGAlgorithmsDD=function CGAlgorithmsDD(){};var staticAccessors$6={DP_SAFE_EPSILON:{configurable:true}};CGAlgorithmsDD.prototype.interfaces_=function interfaces_(){return [];};CGAlgorithmsDD.prototype.getClass=function getClass(){return CGAlgorithmsDD;};CGAlgorithmsDD.orientationIndex=function orientationIndex(p1,p2,q){var index=CGAlgorithmsDD.orientationIndexFilter(p1,p2,q);if(index<=1){return index;}var dx1=DD.valueOf(p2.x).selfAdd(-p1.x);var dy1=DD.valueOf(p2.y).selfAdd(-p1.y);var dx2=DD.valueOf(q.x).selfAdd(-p2.x);var dy2=DD.valueOf(q.y).selfAdd(-p2.y);return dx1.selfMultiply(dy2).selfSubtract(dy1.selfMultiply(dx2)).signum();};CGAlgorithmsDD.signOfDet2x2=function signOfDet2x2(x1,y1,x2,y2){var det=x1.multiply(y2).selfSubtract(y1.multiply(x2));return det.signum();};CGAlgorithmsDD.intersection=function intersection(p1,p2,q1,q2){var denom1=DD.valueOf(q2.y).selfSubtract(q1.y).selfMultiply(DD.valueOf(p2.x).selfSubtract(p1.x));var denom2=DD.valueOf(q2.x).selfSubtract(q1.x).selfMultiply(DD.valueOf(p2.y).selfSubtract(p1.y));var denom=denom1.subtract(denom2);var numx1=DD.valueOf(q2.x).selfSubtract(q1.x).selfMultiply(DD.valueOf(p1.y).selfSubtract(q1.y));var numx2=DD.valueOf(q2.y).selfSubtract(q1.y).selfMultiply(DD.valueOf(p1.x).selfSubtract(q1.x));var numx=numx1.subtract(numx2);var fracP=numx.selfDivide(denom).doubleValue();var x=DD.valueOf(p1.x).selfAdd(DD.valueOf(p2.x).selfSubtract(p1.x).selfMultiply(fracP)).doubleValue();var numy1=DD.valueOf(p2.x).selfSubtract(p1.x).selfMultiply(DD.valueOf(p1.y).selfSubtract(q1.y));var numy2=DD.valueOf(p2.y).selfSubtract(p1.y).selfMultiply(DD.valueOf(p1.x).selfSubtract(q1.x));var numy=numy1.subtract(numy2);var fracQ=numy.selfDivide(denom).doubleValue();var y=DD.valueOf(q1.y).selfAdd(DD.valueOf(q2.y).selfSubtract(q1.y).selfMultiply(fracQ)).doubleValue();return new Coordinate(x,y);};CGAlgorithmsDD.orientationIndexFilter=function orientationIndexFilter(pa,pb,pc){var detsum=null;var detleft=(pa.x-pc.x)*(pb.y-pc.y);var detright=(pa.y-pc.y)*(pb.x-pc.x);var det=detleft-detright;if(detleft>0.0){if(detright<=0.0){return CGAlgorithmsDD.signum(det);}else {detsum=detleft+detright;}}else if(detleft<0.0){if(detright>=0.0){return CGAlgorithmsDD.signum(det);}else {detsum=-detleft-detright;}}else {return CGAlgorithmsDD.signum(det);}var errbound=CGAlgorithmsDD.DP_SAFE_EPSILON*detsum;if(det>=errbound||-det>=errbound){return CGAlgorithmsDD.signum(det);}return 2;};CGAlgorithmsDD.signum=function signum(x){if(x>0){return 1;}if(x<0){return -1;}return 0;};staticAccessors$6.DP_SAFE_EPSILON.get=function(){return 1e-15;};Object.defineProperties(CGAlgorithmsDD,staticAccessors$6);var CoordinateSequence=function CoordinateSequence(){};var staticAccessors$8={X:{configurable:true},Y:{configurable:true},Z:{configurable:true},M:{configurable:true}};staticAccessors$8.X.get=function(){return 0;};staticAccessors$8.Y.get=function(){return 1;};staticAccessors$8.Z.get=function(){return 2;};staticAccessors$8.M.get=function(){return 3;};CoordinateSequence.prototype.setOrdinate=function setOrdinate(index,ordinateIndex,value){};CoordinateSequence.prototype.size=function size(){};CoordinateSequence.prototype.getOrdinate=function getOrdinate(index,ordinateIndex){};CoordinateSequence.prototype.getCoordinate=function getCoordinate(){};CoordinateSequence.prototype.getCoordinateCopy=function getCoordinateCopy(i){};CoordinateSequence.prototype.getDimension=function getDimension(){};CoordinateSequence.prototype.getX=function getX(index){};CoordinateSequence.prototype.clone=function clone(){};CoordinateSequence.prototype.expandEnvelope=function expandEnvelope(env){};CoordinateSequence.prototype.copy=function copy(){};CoordinateSequence.prototype.getY=function getY(index){};CoordinateSequence.prototype.toCoordinateArray=function toCoordinateArray(){};CoordinateSequence.prototype.interfaces_=function interfaces_(){return [Clonable];};CoordinateSequence.prototype.getClass=function getClass(){return CoordinateSequence;};Object.defineProperties(CoordinateSequence,staticAccessors$8);var Exception=function Exception(){};var NotRepresentableException=function(Exception$$1){function NotRepresentableException(){Exception$$1.call(this,'Projective point not representable on the Cartesian plane.');}if(Exception$$1)NotRepresentableException.__proto__=Exception$$1;NotRepresentableException.prototype=Object.create(Exception$$1&&Exception$$1.prototype);NotRepresentableException.prototype.constructor=NotRepresentableException;NotRepresentableException.prototype.interfaces_=function interfaces_(){return [];};NotRepresentableException.prototype.getClass=function getClass(){return NotRepresentableException;};return NotRepresentableException;}(Exception);var System=function System(){};System.arraycopy=function arraycopy(src,srcPos,dest,destPos,len){var c=0;for(var i=srcPos;i<srcPos+len;i++){dest[destPos+c]=src[i];c++;}};System.getProperty=function getProperty(name){return {'line.separator':'\n'}[name];};var HCoordinate=function HCoordinate(){this.x=null;this.y=null;this.w=null;if(arguments.length===0){this.x=0.0;this.y=0.0;this.w=1.0;}else if(arguments.length===1){var p=arguments[0];this.x=p.x;this.y=p.y;this.w=1.0;}else if(arguments.length===2){if(typeof arguments[0]==='number'&&typeof arguments[1]==='number'){var _x=arguments[0];var _y=arguments[1];this.x=_x;this.y=_y;this.w=1.0;}else if(arguments[0]instanceof HCoordinate&&arguments[1]instanceof HCoordinate){var p1=arguments[0];var p2=arguments[1];this.x=p1.y*p2.w-p2.y*p1.w;this.y=p2.x*p1.w-p1.x*p2.w;this.w=p1.x*p2.y-p2.x*p1.y;}else if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Coordinate){var p1$1=arguments[0];var p2$1=arguments[1];this.x=p1$1.y-p2$1.y;this.y=p2$1.x-p1$1.x;this.w=p1$1.x*p2$1.y-p2$1.x*p1$1.y;}}else if(arguments.length===3){var _x$1=arguments[0];var _y$1=arguments[1];var _w=arguments[2];this.x=_x$1;this.y=_y$1;this.w=_w;}else if(arguments.length===4){var p1$2=arguments[0];var p2$2=arguments[1];var q1=arguments[2];var q2=arguments[3];var px=p1$2.y-p2$2.y;var py=p2$2.x-p1$2.x;var pw=p1$2.x*p2$2.y-p2$2.x*p1$2.y;var qx=q1.y-q2.y;var qy=q2.x-q1.x;var qw=q1.x*q2.y-q2.x*q1.y;this.x=py*qw-qy*pw;this.y=qx*pw-px*qw;this.w=px*qy-qx*py;}};HCoordinate.prototype.getY=function getY(){var a=this.y/this.w;if(Double.isNaN(a)||Double.isInfinite(a)){throw new NotRepresentableException();}return a;};HCoordinate.prototype.getX=function getX(){var a=this.x/this.w;if(Double.isNaN(a)||Double.isInfinite(a)){throw new NotRepresentableException();}return a;};HCoordinate.prototype.getCoordinate=function getCoordinate(){var p=new Coordinate();p.x=this.getX();p.y=this.getY();return p;};HCoordinate.prototype.interfaces_=function interfaces_(){return [];};HCoordinate.prototype.getClass=function getClass(){return HCoordinate;};HCoordinate.intersection=function intersection(p1,p2,q1,q2){var px=p1.y-p2.y;var py=p2.x-p1.x;var pw=p1.x*p2.y-p2.x*p1.y;var qx=q1.y-q2.y;var qy=q2.x-q1.x;var qw=q1.x*q2.y-q2.x*q1.y;var x=py*qw-qy*pw;var y=qx*pw-px*qw;var w=px*qy-qx*py;var xInt=x/w;var yInt=y/w;if(Double.isNaN(xInt)||Double.isInfinite(xInt)||Double.isNaN(yInt)||Double.isInfinite(yInt)){throw new NotRepresentableException();}return new Coordinate(xInt,yInt);};var Envelope=function Envelope(){this._minx=null;this._maxx=null;this._miny=null;this._maxy=null;if(arguments.length===0){this.init();}else if(arguments.length===1){if(arguments[0]instanceof Coordinate){var p=arguments[0];this.init(p.x,p.x,p.y,p.y);}else if(arguments[0]instanceof Envelope){var env=arguments[0];this.init(env);}}else if(arguments.length===2){var p1=arguments[0];var p2=arguments[1];this.init(p1.x,p2.x,p1.y,p2.y);}else if(arguments.length===4){var x1=arguments[0];var x2=arguments[1];var y1=arguments[2];var y2=arguments[3];this.init(x1,x2,y1,y2);}};var staticAccessors$9={serialVersionUID:{configurable:true}};Envelope.prototype.getArea=function getArea(){return this.getWidth()*this.getHeight();};Envelope.prototype.equals=function equals(other){if(!(other instanceof Envelope)){return false;}var otherEnvelope=other;if(this.isNull()){return otherEnvelope.isNull();}return this._maxx===otherEnvelope.getMaxX()&&this._maxy===otherEnvelope.getMaxY()&&this._minx===otherEnvelope.getMinX()&&this._miny===otherEnvelope.getMinY();};Envelope.prototype.intersection=function intersection(env){if(this.isNull()||env.isNull()||!this.intersects(env)){return new Envelope();}var intMinX=this._minx>env._minx?this._minx:env._minx;var intMinY=this._miny>env._miny?this._miny:env._miny;var intMaxX=this._maxx<env._maxx?this._maxx:env._maxx;var intMaxY=this._maxy<env._maxy?this._maxy:env._maxy;return new Envelope(intMinX,intMaxX,intMinY,intMaxY);};Envelope.prototype.isNull=function isNull(){return this._maxx<this._minx;};Envelope.prototype.getMaxX=function getMaxX(){return this._maxx;};Envelope.prototype.covers=function covers(){if(arguments.length===1){if(arguments[0]instanceof Coordinate){var p=arguments[0];return this.covers(p.x,p.y);}else if(arguments[0]instanceof Envelope){var other=arguments[0];if(this.isNull()||other.isNull()){return false;}return other.getMinX()>=this._minx&&other.getMaxX()<=this._maxx&&other.getMinY()>=this._miny&&other.getMaxY()<=this._maxy;}}else if(arguments.length===2){var x=arguments[0];var y=arguments[1];if(this.isNull()){return false;}return x>=this._minx&&x<=this._maxx&&y>=this._miny&&y<=this._maxy;}};Envelope.prototype.intersects=function intersects(){if(arguments.length===1){if(arguments[0]instanceof Envelope){var other=arguments[0];if(this.isNull()||other.isNull()){return false;}return !(other._minx>this._maxx||other._maxx<this._minx||other._miny>this._maxy||other._maxy<this._miny);}else if(arguments[0]instanceof Coordinate){var p=arguments[0];return this.intersects(p.x,p.y);}}else if(arguments.length===2){var x=arguments[0];var y=arguments[1];if(this.isNull()){return false;}return !(x>this._maxx||x<this._minx||y>this._maxy||y<this._miny);}};Envelope.prototype.getMinY=function getMinY(){return this._miny;};Envelope.prototype.getMinX=function getMinX(){return this._minx;};Envelope.prototype.expandToInclude=function expandToInclude(){if(arguments.length===1){if(arguments[0]instanceof Coordinate){var p=arguments[0];this.expandToInclude(p.x,p.y);}else if(arguments[0]instanceof Envelope){var other=arguments[0];if(other.isNull()){return null;}if(this.isNull()){this._minx=other.getMinX();this._maxx=other.getMaxX();this._miny=other.getMinY();this._maxy=other.getMaxY();}else {if(other._minx<this._minx){this._minx=other._minx;}if(other._maxx>this._maxx){this._maxx=other._maxx;}if(other._miny<this._miny){this._miny=other._miny;}if(other._maxy>this._maxy){this._maxy=other._maxy;}}}}else if(arguments.length===2){var x=arguments[0];var y=arguments[1];if(this.isNull()){this._minx=x;this._maxx=x;this._miny=y;this._maxy=y;}else {if(x<this._minx){this._minx=x;}if(x>this._maxx){this._maxx=x;}if(y<this._miny){this._miny=y;}if(y>this._maxy){this._maxy=y;}}}};Envelope.prototype.minExtent=function minExtent(){if(this.isNull()){return 0.0;}var w=this.getWidth();var h=this.getHeight();if(w<h){return w;}return h;};Envelope.prototype.getWidth=function getWidth(){if(this.isNull()){return 0;}return this._maxx-this._minx;};Envelope.prototype.compareTo=function compareTo(o){var env=o;if(this.isNull()){if(env.isNull()){return 0;}return -1;}else {if(env.isNull()){return 1;}}if(this._minx<env._minx){return -1;}if(this._minx>env._minx){return 1;}if(this._miny<env._miny){return -1;}if(this._miny>env._miny){return 1;}if(this._maxx<env._maxx){return -1;}if(this._maxx>env._maxx){return 1;}if(this._maxy<env._maxy){return -1;}if(this._maxy>env._maxy){return 1;}return 0;};Envelope.prototype.translate=function translate(transX,transY){if(this.isNull()){return null;}this.init(this.getMinX()+transX,this.getMaxX()+transX,this.getMinY()+transY,this.getMaxY()+transY);};Envelope.prototype.toString=function toString(){return 'Env['+this._minx+' : '+this._maxx+', '+this._miny+' : '+this._maxy+']';};Envelope.prototype.setToNull=function setToNull(){this._minx=0;this._maxx=-1;this._miny=0;this._maxy=-1;};Envelope.prototype.getHeight=function getHeight(){if(this.isNull()){return 0;}return this._maxy-this._miny;};Envelope.prototype.maxExtent=function maxExtent(){if(this.isNull()){return 0.0;}var w=this.getWidth();var h=this.getHeight();if(w>h){return w;}return h;};Envelope.prototype.expandBy=function expandBy(){if(arguments.length===1){var distance=arguments[0];this.expandBy(distance,distance);}else if(arguments.length===2){var deltaX=arguments[0];var deltaY=arguments[1];if(this.isNull()){return null;}this._minx-=deltaX;this._maxx+=deltaX;this._miny-=deltaY;this._maxy+=deltaY;if(this._minx>this._maxx||this._miny>this._maxy){this.setToNull();}}};Envelope.prototype.contains=function contains(){if(arguments.length===1){if(arguments[0]instanceof Envelope){var other=arguments[0];return this.covers(other);}else if(arguments[0]instanceof Coordinate){var p=arguments[0];return this.covers(p);}}else if(arguments.length===2){var x=arguments[0];var y=arguments[1];return this.covers(x,y);}};Envelope.prototype.centre=function centre(){if(this.isNull()){return null;}return new Coordinate((this.getMinX()+this.getMaxX())/2.0,(this.getMinY()+this.getMaxY())/2.0);};Envelope.prototype.init=function init(){if(arguments.length===0){this.setToNull();}else if(arguments.length===1){if(arguments[0]instanceof Coordinate){var p=arguments[0];this.init(p.x,p.x,p.y,p.y);}else if(arguments[0]instanceof Envelope){var env=arguments[0];this._minx=env._minx;this._maxx=env._maxx;this._miny=env._miny;this._maxy=env._maxy;}}else if(arguments.length===2){var p1=arguments[0];var p2=arguments[1];this.init(p1.x,p2.x,p1.y,p2.y);}else if(arguments.length===4){var x1=arguments[0];var x2=arguments[1];var y1=arguments[2];var y2=arguments[3];if(x1<x2){this._minx=x1;this._maxx=x2;}else {this._minx=x2;this._maxx=x1;}if(y1<y2){this._miny=y1;this._maxy=y2;}else {this._miny=y2;this._maxy=y1;}}};Envelope.prototype.getMaxY=function getMaxY(){return this._maxy;};Envelope.prototype.distance=function distance(env){if(this.intersects(env)){return 0;}var dx=0.0;if(this._maxx<env._minx){dx=env._minx-this._maxx;}else if(this._minx>env._maxx){dx=this._minx-env._maxx;}var dy=0.0;if(this._maxy<env._miny){dy=env._miny-this._maxy;}else if(this._miny>env._maxy){dy=this._miny-env._maxy;}if(dx===0.0){return dy;}if(dy===0.0){return dx;}return Math.sqrt(dx*dx+dy*dy);};Envelope.prototype.hashCode=function hashCode(){var result=17;result=37*result+Coordinate.hashCode(this._minx);result=37*result+Coordinate.hashCode(this._maxx);result=37*result+Coordinate.hashCode(this._miny);result=37*result+Coordinate.hashCode(this._maxy);return result;};Envelope.prototype.interfaces_=function interfaces_(){return [Comparable,Serializable];};Envelope.prototype.getClass=function getClass(){return Envelope;};Envelope.intersects=function intersects(){if(arguments.length===3){var p1=arguments[0];var p2=arguments[1];var q=arguments[2];if(q.x>=(p1.x<p2.x?p1.x:p2.x)&&q.x<=(p1.x>p2.x?p1.x:p2.x)&&q.y>=(p1.y<p2.y?p1.y:p2.y)&&q.y<=(p1.y>p2.y?p1.y:p2.y)){return true;}return false;}else if(arguments.length===4){var p1$1=arguments[0];var p2$1=arguments[1];var q1=arguments[2];var q2=arguments[3];var minq=Math.min(q1.x,q2.x);var maxq=Math.max(q1.x,q2.x);var minp=Math.min(p1$1.x,p2$1.x);var maxp=Math.max(p1$1.x,p2$1.x);if(minp>maxq){return false;}if(maxp<minq){return false;}minq=Math.min(q1.y,q2.y);maxq=Math.max(q1.y,q2.y);minp=Math.min(p1$1.y,p2$1.y);maxp=Math.max(p1$1.y,p2$1.y);if(minp>maxq){return false;}if(maxp<minq){return false;}return true;}};staticAccessors$9.serialVersionUID.get=function(){return 5873921885273102420;};Object.defineProperties(Envelope,staticAccessors$9);var regExes={'typeStr':/^\s*(\w+)\s*\(\s*(.*)\s*\)\s*$/,'emptyTypeStr':/^\s*(\w+)\s*EMPTY\s*$/,'spaces':/\s+/,'parenComma':/\)\s*,\s*\(/,'doubleParenComma':/\)\s*\)\s*,\s*\(\s*\(/,// can't use {2} here
  'trimParens':/^\s*\(?(.*?)\)?\s*$/};/**
   * Class for reading and writing Well-Known Text.
   *
   * NOTE: Adapted from OpenLayers 2.11 implementation.
   */ /** Create a new parser for WKT
   *
   * @param {GeometryFactory} geometryFactory
   * @return An instance of WKTParser.
   * @constructor
   * @private
   */var WKTParser=function WKTParser(geometryFactory){this.geometryFactory=geometryFactory||new GeometryFactory();};/**
   * Deserialize a WKT string and return a geometry. Supports WKT for POINT,
   * MULTIPOINT, LINESTRING, LINEARRING, MULTILINESTRING, POLYGON, MULTIPOLYGON,
   * and GEOMETRYCOLLECTION.
   *
   * @param {String} wkt A WKT string.
   * @return {Geometry} A geometry instance.
   * @private
   */WKTParser.prototype.read=function read(wkt){var geometry,type,str;wkt=wkt.replace(/[\n\r]/g,' ');var matches=regExes.typeStr.exec(wkt);if(wkt.search('EMPTY')!==-1){matches=regExes.emptyTypeStr.exec(wkt);matches[2]=undefined;}if(matches){type=matches[1].toLowerCase();str=matches[2];if(parse$1[type]){geometry=parse$1[type].apply(this,[str]);}}if(geometry===undefined){throw new Error('Could not parse WKT '+wkt);}return geometry;};/**
   * Serialize a geometry into a WKT string.
   *
   * @param {Geometry} geometry A feature or array of features.
   * @return {String} The WKT string representation of the input geometries.
   * @private
   */WKTParser.prototype.write=function write(geometry){return this.extractGeometry(geometry);};/**
   * Entry point to construct the WKT for a single Geometry object.
   *
   * @param {Geometry} geometry
   * @return {String} A WKT string of representing the geometry.
   * @private
   */WKTParser.prototype.extractGeometry=function extractGeometry(geometry){var type=geometry.getGeometryType().toLowerCase();if(!extract$1[type]){return null;}var wktType=type.toUpperCase();var data;if(geometry.isEmpty()){data=wktType+' EMPTY';}else {data=wktType+'('+extract$1[type].apply(this,[geometry])+')';}return data;};/**
   * Object with properties corresponding to the geometry types. Property values
   * are functions that do the actual data extraction.
   * @private
   */var extract$1={coordinate:function coordinate(coordinate$1){return coordinate$1.x+' '+coordinate$1.y;},/**
     * Return a space delimited string of point coordinates.
     *
     * @param {Point}
     *          point
     * @return {String} A string of coordinates representing the point.
     */point:function point(point$1){return extract$1.coordinate.call(this,point$1._coordinates._coordinates[0]);},/**
     * Return a comma delimited string of point coordinates from a multipoint.
     *
     * @param {MultiPoint}
     *          multipoint
     * @return {String} A string of point coordinate strings representing the
     *         multipoint.
     */multipoint:function multipoint(multipoint$1){var this$1=this;var array=[];for(var i=0,len=multipoint$1._geometries.length;i<len;++i){array.push('('+extract$1.point.apply(this$1,[multipoint$1._geometries[i]])+')');}return array.join(',');},/**
     * Return a comma delimited string of point coordinates from a line.
     *
     * @param {LineString} linestring
     * @return {String} A string of point coordinate strings representing the linestring.
     */linestring:function linestring(linestring$1){var this$1=this;var array=[];for(var i=0,len=linestring$1._points._coordinates.length;i<len;++i){array.push(extract$1.coordinate.apply(this$1,[linestring$1._points._coordinates[i]]));}return array.join(',');},linearring:function linearring(linearring$1){var this$1=this;var array=[];for(var i=0,len=linearring$1._points._coordinates.length;i<len;++i){array.push(extract$1.coordinate.apply(this$1,[linearring$1._points._coordinates[i]]));}return array.join(',');},/**
     * Return a comma delimited string of linestring strings from a
     * multilinestring.
     *
     * @param {MultiLineString} multilinestring
     * @return {String} A string of of linestring strings representing the multilinestring.
     */multilinestring:function multilinestring(multilinestring$1){var this$1=this;var array=[];for(var i=0,len=multilinestring$1._geometries.length;i<len;++i){array.push('('+extract$1.linestring.apply(this$1,[multilinestring$1._geometries[i]])+')');}return array.join(',');},/**
     * Return a comma delimited string of linear ring arrays from a polygon.
     *
     * @param {Polygon} polygon
     * @return {String} An array of linear ring arrays representing the polygon.
     */polygon:function polygon(polygon$1){var this$1=this;var array=[];array.push('('+extract$1.linestring.apply(this,[polygon$1._shell])+')');for(var i=0,len=polygon$1._holes.length;i<len;++i){array.push('('+extract$1.linestring.apply(this$1,[polygon$1._holes[i]])+')');}return array.join(',');},/**
     * Return an array of polygon arrays from a multipolygon.
     *
     * @param {MultiPolygon} multipolygon
     * @return {String} An array of polygon arrays representing the multipolygon.
     */multipolygon:function multipolygon(multipolygon$1){var this$1=this;var array=[];for(var i=0,len=multipolygon$1._geometries.length;i<len;++i){array.push('('+extract$1.polygon.apply(this$1,[multipolygon$1._geometries[i]])+')');}return array.join(',');},/**
     * Return the WKT portion between 'GEOMETRYCOLLECTION(' and ')' for an
     * geometrycollection.
     *
     * @param {GeometryCollection} collection
     * @return {String} internal WKT representation of the collection.
     */geometrycollection:function geometrycollection(collection){var this$1=this;var array=[];for(var i=0,len=collection._geometries.length;i<len;++i){array.push(this$1.extractGeometry(collection._geometries[i]));}return array.join(',');}};/**
   * Object with properties corresponding to the geometry types. Property values
   * are functions that do the actual parsing.
   * @private
   */var parse$1={/**
     * Return point geometry given a point WKT fragment.
     *
     * @param {String} str A WKT fragment representing the point.
     * @return {Point} A point geometry.
     * @private
     */point:function point(str){if(str===undefined){return this.geometryFactory.createPoint();}var coords=str.trim().split(regExes.spaces);return this.geometryFactory.createPoint(new Coordinate(Number.parseFloat(coords[0]),Number.parseFloat(coords[1])));},/**
     * Return a multipoint geometry given a multipoint WKT fragment.
     *
     * @param {String} str A WKT fragment representing the multipoint.
     * @return {Point} A multipoint feature.
     * @private
     */multipoint:function multipoint(str){var this$1=this;if(str===undefined){return this.geometryFactory.createMultiPoint();}var point;var points=str.trim().split(',');var components=[];for(var i=0,len=points.length;i<len;++i){point=points[i].replace(regExes.trimParens,'$1');components.push(parse$1.point.apply(this$1,[point]));}return this.geometryFactory.createMultiPoint(components);},/**
     * Return a linestring geometry given a linestring WKT fragment.
     *
     * @param {String} str A WKT fragment representing the linestring.
     * @return {LineString} A linestring geometry.
     * @private
     */linestring:function linestring(str){if(str===undefined){return this.geometryFactory.createLineString();}var points=str.trim().split(',');var components=[];var coords;for(var i=0,len=points.length;i<len;++i){coords=points[i].trim().split(regExes.spaces);components.push(new Coordinate(Number.parseFloat(coords[0]),Number.parseFloat(coords[1])));}return this.geometryFactory.createLineString(components);},/**
     * Return a linearring geometry given a linearring WKT fragment.
     *
     * @param {String} str A WKT fragment representing the linearring.
     * @return {LinearRing} A linearring geometry.
     * @private
     */linearring:function linearring(str){if(str===undefined){return this.geometryFactory.createLinearRing();}var points=str.trim().split(',');var components=[];var coords;for(var i=0,len=points.length;i<len;++i){coords=points[i].trim().split(regExes.spaces);components.push(new Coordinate(Number.parseFloat(coords[0]),Number.parseFloat(coords[1])));}return this.geometryFactory.createLinearRing(components);},/**
     * Return a multilinestring geometry given a multilinestring WKT fragment.
     *
     * @param {String} str A WKT fragment representing the multilinestring.
     * @return {MultiLineString} A multilinestring geometry.
     * @private
     */multilinestring:function multilinestring(str){var this$1=this;if(str===undefined){return this.geometryFactory.createMultiLineString();}var line;var lines=str.trim().split(regExes.parenComma);var components=[];for(var i=0,len=lines.length;i<len;++i){line=lines[i].replace(regExes.trimParens,'$1');components.push(parse$1.linestring.apply(this$1,[line]));}return this.geometryFactory.createMultiLineString(components);},/**
     * Return a polygon geometry given a polygon WKT fragment.
     *
     * @param {String} str A WKT fragment representing the polygon.
     * @return {Polygon} A polygon geometry.
     * @private
     */polygon:function polygon(str){var this$1=this;if(str===undefined){return this.geometryFactory.createPolygon();}var ring,linestring,linearring;var rings=str.trim().split(regExes.parenComma);var shell;var holes=[];for(var i=0,len=rings.length;i<len;++i){ring=rings[i].replace(regExes.trimParens,'$1');linestring=parse$1.linestring.apply(this$1,[ring]);linearring=this$1.geometryFactory.createLinearRing(linestring._points);if(i===0){shell=linearring;}else {holes.push(linearring);}}return this.geometryFactory.createPolygon(shell,holes);},/**
     * Return a multipolygon geometry given a multipolygon WKT fragment.
     *
     * @param {String} str A WKT fragment representing the multipolygon.
     * @return {MultiPolygon} A multipolygon geometry.
     * @private
     */multipolygon:function multipolygon(str){var this$1=this;if(str===undefined){return this.geometryFactory.createMultiPolygon();}var polygon;var polygons=str.trim().split(regExes.doubleParenComma);var components=[];for(var i=0,len=polygons.length;i<len;++i){polygon=polygons[i].replace(regExes.trimParens,'$1');components.push(parse$1.polygon.apply(this$1,[polygon]));}return this.geometryFactory.createMultiPolygon(components);},/**
     * Return a geometrycollection given a geometrycollection WKT fragment.
     *
     * @param {String} str A WKT fragment representing the geometrycollection.
     * @return {GeometryCollection}
     * @private
     */geometrycollection:function geometrycollection(str){var this$1=this;if(str===undefined){return this.geometryFactory.createGeometryCollection();}// separate components of the collection with |
  str=str.replace(/,\s*([A-Za-z])/g,'|$1');var wktArray=str.trim().split('|');var components=[];for(var i=0,len=wktArray.length;i<len;++i){components.push(this$1.read(wktArray[i]));}return this.geometryFactory.createGeometryCollection(components);}};/**
   * Writes the Well-Known Text representation of a {@link Geometry}. The
   * Well-Known Text format is defined in the <A
   * HREF="http://www.opengis.org/techno/specs.htm"> OGC Simple Features
   * Specification for SQL</A>.
   * <p>
   * The <code>WKTWriter</code> outputs coordinates rounded to the precision
   * model. Only the maximum number of decimal places necessary to represent the
   * ordinates to the required precision will be output.
   * <p>
   * The SFS WKT spec does not define a special tag for {@link LinearRing}s.
   * Under the spec, rings are output as <code>LINESTRING</code>s.
   */ /**
   * @param {GeometryFactory} geometryFactory
   * @constructor
   */var WKTWriter=function WKTWriter(geometryFactory){this.parser=new WKTParser(geometryFactory);};/**
   * Converts a <code>Geometry</code> to its Well-known Text representation.
   *
   * @param {Geometry} geometry a <code>Geometry</code> to process.
   * @return {string} a <Geometry Tagged Text> string (see the OpenGIS Simple
   *       Features Specification).
   * @memberof WKTWriter
   */WKTWriter.prototype.write=function write(geometry){return this.parser.write(geometry);};/**
   * Generates the WKT for a <tt>LINESTRING</tt> specified by two
   * {@link Coordinate}s.
   *
   * @param p0 the first coordinate.
   * @param p1 the second coordinate.
   *
   * @return the WKT.
   * @private
   */WKTWriter.toLineString=function toLineString(p0,p1){if(arguments.length!==2){throw new Error('Not implemented');}return 'LINESTRING ( '+p0.x+' '+p0.y+', '+p1.x+' '+p1.y+' )';};var RuntimeException=function(Error){function RuntimeException(message){Error.call(this,message);this.name='RuntimeException';this.message=message;this.stack=new Error().stack;}if(Error)RuntimeException.__proto__=Error;RuntimeException.prototype=Object.create(Error&&Error.prototype);RuntimeException.prototype.constructor=RuntimeException;return RuntimeException;}(Error);var AssertionFailedException=function(RuntimeException$$1){function AssertionFailedException(){RuntimeException$$1.call(this);if(arguments.length===0){RuntimeException$$1.call(this);}else if(arguments.length===1){var message=arguments[0];RuntimeException$$1.call(this,message);}}if(RuntimeException$$1)AssertionFailedException.__proto__=RuntimeException$$1;AssertionFailedException.prototype=Object.create(RuntimeException$$1&&RuntimeException$$1.prototype);AssertionFailedException.prototype.constructor=AssertionFailedException;AssertionFailedException.prototype.interfaces_=function interfaces_(){return [];};AssertionFailedException.prototype.getClass=function getClass(){return AssertionFailedException;};return AssertionFailedException;}(RuntimeException);var Assert=function Assert(){};Assert.prototype.interfaces_=function interfaces_(){return [];};Assert.prototype.getClass=function getClass(){return Assert;};Assert.shouldNeverReachHere=function shouldNeverReachHere(){if(arguments.length===0){Assert.shouldNeverReachHere(null);}else if(arguments.length===1){var message=arguments[0];throw new AssertionFailedException('Should never reach here'+(message!==null?': '+message:''));}};Assert.isTrue=function isTrue(){var assertion;var message;if(arguments.length===1){assertion=arguments[0];Assert.isTrue(assertion,null);}else if(arguments.length===2){assertion=arguments[0];message=arguments[1];if(!assertion){if(message===null){throw new AssertionFailedException();}else {throw new AssertionFailedException(message);}}}};Assert.equals=function equals(){var expectedValue;var actualValue;var message;if(arguments.length===2){expectedValue=arguments[0];actualValue=arguments[1];Assert.equals(expectedValue,actualValue,null);}else if(arguments.length===3){expectedValue=arguments[0];actualValue=arguments[1];message=arguments[2];if(!actualValue.equals(expectedValue)){throw new AssertionFailedException('Expected '+expectedValue+' but encountered '+actualValue+(message!==null?': '+message:''));}}};var LineIntersector=function LineIntersector(){this._result=null;this._inputLines=Array(2).fill().map(function(){return Array(2);});this._intPt=new Array(2).fill(null);this._intLineIndex=null;this._isProper=null;this._pa=null;this._pb=null;this._precisionModel=null;this._intPt[0]=new Coordinate();this._intPt[1]=new Coordinate();this._pa=this._intPt[0];this._pb=this._intPt[1];this._result=0;};var staticAccessors$10={DONT_INTERSECT:{configurable:true},DO_INTERSECT:{configurable:true},COLLINEAR:{configurable:true},NO_INTERSECTION:{configurable:true},POINT_INTERSECTION:{configurable:true},COLLINEAR_INTERSECTION:{configurable:true}};LineIntersector.prototype.getIndexAlongSegment=function getIndexAlongSegment(segmentIndex,intIndex){this.computeIntLineIndex();return this._intLineIndex[segmentIndex][intIndex];};LineIntersector.prototype.getTopologySummary=function getTopologySummary(){var catBuf=new StringBuffer();if(this.isEndPoint()){catBuf.append(' endpoint');}if(this._isProper){catBuf.append(' proper');}if(this.isCollinear()){catBuf.append(' collinear');}return catBuf.toString();};LineIntersector.prototype.computeIntersection=function computeIntersection(p1,p2,p3,p4){this._inputLines[0][0]=p1;this._inputLines[0][1]=p2;this._inputLines[1][0]=p3;this._inputLines[1][1]=p4;this._result=this.computeIntersect(p1,p2,p3,p4);};LineIntersector.prototype.getIntersectionNum=function getIntersectionNum(){return this._result;};LineIntersector.prototype.computeIntLineIndex=function computeIntLineIndex(){if(arguments.length===0){if(this._intLineIndex===null){this._intLineIndex=Array(2).fill().map(function(){return Array(2);});this.computeIntLineIndex(0);this.computeIntLineIndex(1);}}else if(arguments.length===1){var segmentIndex=arguments[0];var dist0=this.getEdgeDistance(segmentIndex,0);var dist1=this.getEdgeDistance(segmentIndex,1);if(dist0>dist1){this._intLineIndex[segmentIndex][0]=0;this._intLineIndex[segmentIndex][1]=1;}else {this._intLineIndex[segmentIndex][0]=1;this._intLineIndex[segmentIndex][1]=0;}}};LineIntersector.prototype.isProper=function isProper(){return this.hasIntersection()&&this._isProper;};LineIntersector.prototype.setPrecisionModel=function setPrecisionModel(precisionModel){this._precisionModel=precisionModel;};LineIntersector.prototype.isInteriorIntersection=function isInteriorIntersection(){var this$1=this;if(arguments.length===0){if(this.isInteriorIntersection(0)){return true;}if(this.isInteriorIntersection(1)){return true;}return false;}else if(arguments.length===1){var inputLineIndex=arguments[0];for(var i=0;i<this._result;i++){if(!(this$1._intPt[i].equals2D(this$1._inputLines[inputLineIndex][0])||this$1._intPt[i].equals2D(this$1._inputLines[inputLineIndex][1]))){return true;}}return false;}};LineIntersector.prototype.getIntersection=function getIntersection(intIndex){return this._intPt[intIndex];};LineIntersector.prototype.isEndPoint=function isEndPoint(){return this.hasIntersection()&&!this._isProper;};LineIntersector.prototype.hasIntersection=function hasIntersection(){return this._result!==LineIntersector.NO_INTERSECTION;};LineIntersector.prototype.getEdgeDistance=function getEdgeDistance(segmentIndex,intIndex){var dist=LineIntersector.computeEdgeDistance(this._intPt[intIndex],this._inputLines[segmentIndex][0],this._inputLines[segmentIndex][1]);return dist;};LineIntersector.prototype.isCollinear=function isCollinear(){return this._result===LineIntersector.COLLINEAR_INTERSECTION;};LineIntersector.prototype.toString=function toString(){return WKTWriter.toLineString(this._inputLines[0][0],this._inputLines[0][1])+' - '+WKTWriter.toLineString(this._inputLines[1][0],this._inputLines[1][1])+this.getTopologySummary();};LineIntersector.prototype.getEndpoint=function getEndpoint(segmentIndex,ptIndex){return this._inputLines[segmentIndex][ptIndex];};LineIntersector.prototype.isIntersection=function isIntersection(pt){var this$1=this;for(var i=0;i<this._result;i++){if(this$1._intPt[i].equals2D(pt)){return true;}}return false;};LineIntersector.prototype.getIntersectionAlongSegment=function getIntersectionAlongSegment(segmentIndex,intIndex){this.computeIntLineIndex();return this._intPt[this._intLineIndex[segmentIndex][intIndex]];};LineIntersector.prototype.interfaces_=function interfaces_(){return [];};LineIntersector.prototype.getClass=function getClass(){return LineIntersector;};LineIntersector.computeEdgeDistance=function computeEdgeDistance(p,p0,p1){var dx=Math.abs(p1.x-p0.x);var dy=Math.abs(p1.y-p0.y);var dist=-1.0;if(p.equals(p0)){dist=0.0;}else if(p.equals(p1)){if(dx>dy){dist=dx;}else {dist=dy;}}else {var pdx=Math.abs(p.x-p0.x);var pdy=Math.abs(p.y-p0.y);if(dx>dy){dist=pdx;}else {dist=pdy;}if(dist===0.0&&!p.equals(p0)){dist=Math.max(pdx,pdy);}}Assert.isTrue(!(dist===0.0&&!p.equals(p0)),'Bad distance calculation');return dist;};LineIntersector.nonRobustComputeEdgeDistance=function nonRobustComputeEdgeDistance(p,p1,p2){var dx=p.x-p1.x;var dy=p.y-p1.y;var dist=Math.sqrt(dx*dx+dy*dy);Assert.isTrue(!(dist===0.0&&!p.equals(p1)),'Invalid distance calculation');return dist;};staticAccessors$10.DONT_INTERSECT.get=function(){return 0;};staticAccessors$10.DO_INTERSECT.get=function(){return 1;};staticAccessors$10.COLLINEAR.get=function(){return 2;};staticAccessors$10.NO_INTERSECTION.get=function(){return 0;};staticAccessors$10.POINT_INTERSECTION.get=function(){return 1;};staticAccessors$10.COLLINEAR_INTERSECTION.get=function(){return 2;};Object.defineProperties(LineIntersector,staticAccessors$10);var RobustLineIntersector=function(LineIntersector$$1){function RobustLineIntersector(){LineIntersector$$1.apply(this,arguments);}if(LineIntersector$$1)RobustLineIntersector.__proto__=LineIntersector$$1;RobustLineIntersector.prototype=Object.create(LineIntersector$$1&&LineIntersector$$1.prototype);RobustLineIntersector.prototype.constructor=RobustLineIntersector;RobustLineIntersector.prototype.isInSegmentEnvelopes=function isInSegmentEnvelopes(intPt){var env0=new Envelope(this._inputLines[0][0],this._inputLines[0][1]);var env1=new Envelope(this._inputLines[1][0],this._inputLines[1][1]);return env0.contains(intPt)&&env1.contains(intPt);};RobustLineIntersector.prototype.computeIntersection=function computeIntersection(){if(arguments.length===3){var p=arguments[0];var p1=arguments[1];var p2=arguments[2];this._isProper=false;if(Envelope.intersects(p1,p2,p)){if(CGAlgorithms.orientationIndex(p1,p2,p)===0&&CGAlgorithms.orientationIndex(p2,p1,p)===0){this._isProper=true;if(p.equals(p1)||p.equals(p2)){this._isProper=false;}this._result=LineIntersector$$1.POINT_INTERSECTION;return null;}}this._result=LineIntersector$$1.NO_INTERSECTION;}else {return LineIntersector$$1.prototype.computeIntersection.apply(this,arguments);}};RobustLineIntersector.prototype.normalizeToMinimum=function normalizeToMinimum(n1,n2,n3,n4,normPt){normPt.x=this.smallestInAbsValue(n1.x,n2.x,n3.x,n4.x);normPt.y=this.smallestInAbsValue(n1.y,n2.y,n3.y,n4.y);n1.x-=normPt.x;n1.y-=normPt.y;n2.x-=normPt.x;n2.y-=normPt.y;n3.x-=normPt.x;n3.y-=normPt.y;n4.x-=normPt.x;n4.y-=normPt.y;};RobustLineIntersector.prototype.safeHCoordinateIntersection=function safeHCoordinateIntersection(p1,p2,q1,q2){var intPt=null;try{intPt=HCoordinate.intersection(p1,p2,q1,q2);}catch(e){if(e instanceof NotRepresentableException){intPt=RobustLineIntersector.nearestEndpoint(p1,p2,q1,q2);}else {throw e;}}finally{}return intPt;};RobustLineIntersector.prototype.intersection=function intersection(p1,p2,q1,q2){var intPt=this.intersectionWithNormalization(p1,p2,q1,q2);if(!this.isInSegmentEnvelopes(intPt)){intPt=new Coordinate(RobustLineIntersector.nearestEndpoint(p1,p2,q1,q2));}if(this._precisionModel!==null){this._precisionModel.makePrecise(intPt);}return intPt;};RobustLineIntersector.prototype.smallestInAbsValue=function smallestInAbsValue(x1,x2,x3,x4){var x=x1;var xabs=Math.abs(x);if(Math.abs(x2)<xabs){x=x2;xabs=Math.abs(x2);}if(Math.abs(x3)<xabs){x=x3;xabs=Math.abs(x3);}if(Math.abs(x4)<xabs){x=x4;}return x;};RobustLineIntersector.prototype.checkDD=function checkDD(p1,p2,q1,q2,intPt){var intPtDD=CGAlgorithmsDD.intersection(p1,p2,q1,q2);var isIn=this.isInSegmentEnvelopes(intPtDD);System.out.println('DD in env = '+isIn+'  --------------------- '+intPtDD);if(intPt.distance(intPtDD)>0.0001){System.out.println('Distance = '+intPt.distance(intPtDD));}};RobustLineIntersector.prototype.intersectionWithNormalization=function intersectionWithNormalization(p1,p2,q1,q2){var n1=new Coordinate(p1);var n2=new Coordinate(p2);var n3=new Coordinate(q1);var n4=new Coordinate(q2);var normPt=new Coordinate();this.normalizeToEnvCentre(n1,n2,n3,n4,normPt);var intPt=this.safeHCoordinateIntersection(n1,n2,n3,n4);intPt.x+=normPt.x;intPt.y+=normPt.y;return intPt;};RobustLineIntersector.prototype.computeCollinearIntersection=function computeCollinearIntersection(p1,p2,q1,q2){var p1q1p2=Envelope.intersects(p1,p2,q1);var p1q2p2=Envelope.intersects(p1,p2,q2);var q1p1q2=Envelope.intersects(q1,q2,p1);var q1p2q2=Envelope.intersects(q1,q2,p2);if(p1q1p2&&p1q2p2){this._intPt[0]=q1;this._intPt[1]=q2;return LineIntersector$$1.COLLINEAR_INTERSECTION;}if(q1p1q2&&q1p2q2){this._intPt[0]=p1;this._intPt[1]=p2;return LineIntersector$$1.COLLINEAR_INTERSECTION;}if(p1q1p2&&q1p1q2){this._intPt[0]=q1;this._intPt[1]=p1;return q1.equals(p1)&&!p1q2p2&&!q1p2q2?LineIntersector$$1.POINT_INTERSECTION:LineIntersector$$1.COLLINEAR_INTERSECTION;}if(p1q1p2&&q1p2q2){this._intPt[0]=q1;this._intPt[1]=p2;return q1.equals(p2)&&!p1q2p2&&!q1p1q2?LineIntersector$$1.POINT_INTERSECTION:LineIntersector$$1.COLLINEAR_INTERSECTION;}if(p1q2p2&&q1p1q2){this._intPt[0]=q2;this._intPt[1]=p1;return q2.equals(p1)&&!p1q1p2&&!q1p2q2?LineIntersector$$1.POINT_INTERSECTION:LineIntersector$$1.COLLINEAR_INTERSECTION;}if(p1q2p2&&q1p2q2){this._intPt[0]=q2;this._intPt[1]=p2;return q2.equals(p2)&&!p1q1p2&&!q1p1q2?LineIntersector$$1.POINT_INTERSECTION:LineIntersector$$1.COLLINEAR_INTERSECTION;}return LineIntersector$$1.NO_INTERSECTION;};RobustLineIntersector.prototype.normalizeToEnvCentre=function normalizeToEnvCentre(n00,n01,n10,n11,normPt){var minX0=n00.x<n01.x?n00.x:n01.x;var minY0=n00.y<n01.y?n00.y:n01.y;var maxX0=n00.x>n01.x?n00.x:n01.x;var maxY0=n00.y>n01.y?n00.y:n01.y;var minX1=n10.x<n11.x?n10.x:n11.x;var minY1=n10.y<n11.y?n10.y:n11.y;var maxX1=n10.x>n11.x?n10.x:n11.x;var maxY1=n10.y>n11.y?n10.y:n11.y;var intMinX=minX0>minX1?minX0:minX1;var intMaxX=maxX0<maxX1?maxX0:maxX1;var intMinY=minY0>minY1?minY0:minY1;var intMaxY=maxY0<maxY1?maxY0:maxY1;var intMidX=(intMinX+intMaxX)/2.0;var intMidY=(intMinY+intMaxY)/2.0;normPt.x=intMidX;normPt.y=intMidY;n00.x-=normPt.x;n00.y-=normPt.y;n01.x-=normPt.x;n01.y-=normPt.y;n10.x-=normPt.x;n10.y-=normPt.y;n11.x-=normPt.x;n11.y-=normPt.y;};RobustLineIntersector.prototype.computeIntersect=function computeIntersect(p1,p2,q1,q2){this._isProper=false;if(!Envelope.intersects(p1,p2,q1,q2)){return LineIntersector$$1.NO_INTERSECTION;}var Pq1=CGAlgorithms.orientationIndex(p1,p2,q1);var Pq2=CGAlgorithms.orientationIndex(p1,p2,q2);if(Pq1>0&&Pq2>0||Pq1<0&&Pq2<0){return LineIntersector$$1.NO_INTERSECTION;}var Qp1=CGAlgorithms.orientationIndex(q1,q2,p1);var Qp2=CGAlgorithms.orientationIndex(q1,q2,p2);if(Qp1>0&&Qp2>0||Qp1<0&&Qp2<0){return LineIntersector$$1.NO_INTERSECTION;}var collinear=Pq1===0&&Pq2===0&&Qp1===0&&Qp2===0;if(collinear){return this.computeCollinearIntersection(p1,p2,q1,q2);}if(Pq1===0||Pq2===0||Qp1===0||Qp2===0){this._isProper=false;if(p1.equals2D(q1)||p1.equals2D(q2)){this._intPt[0]=p1;}else if(p2.equals2D(q1)||p2.equals2D(q2)){this._intPt[0]=p2;}else if(Pq1===0){this._intPt[0]=new Coordinate(q1);}else if(Pq2===0){this._intPt[0]=new Coordinate(q2);}else if(Qp1===0){this._intPt[0]=new Coordinate(p1);}else if(Qp2===0){this._intPt[0]=new Coordinate(p2);}}else {this._isProper=true;this._intPt[0]=this.intersection(p1,p2,q1,q2);}return LineIntersector$$1.POINT_INTERSECTION;};RobustLineIntersector.prototype.interfaces_=function interfaces_(){return [];};RobustLineIntersector.prototype.getClass=function getClass(){return RobustLineIntersector;};RobustLineIntersector.nearestEndpoint=function nearestEndpoint(p1,p2,q1,q2){var nearestPt=p1;var minDist=CGAlgorithms.distancePointLine(p1,q1,q2);var dist=CGAlgorithms.distancePointLine(p2,q1,q2);if(dist<minDist){minDist=dist;nearestPt=p2;}dist=CGAlgorithms.distancePointLine(q1,p1,p2);if(dist<minDist){minDist=dist;nearestPt=q1;}dist=CGAlgorithms.distancePointLine(q2,p1,p2);if(dist<minDist){minDist=dist;nearestPt=q2;}return nearestPt;};return RobustLineIntersector;}(LineIntersector);var RobustDeterminant=function RobustDeterminant(){};RobustDeterminant.prototype.interfaces_=function interfaces_(){return [];};RobustDeterminant.prototype.getClass=function getClass(){return RobustDeterminant;};RobustDeterminant.orientationIndex=function orientationIndex(p1,p2,q){var dx1=p2.x-p1.x;var dy1=p2.y-p1.y;var dx2=q.x-p2.x;var dy2=q.y-p2.y;return RobustDeterminant.signOfDet2x2(dx1,dy1,dx2,dy2);};RobustDeterminant.signOfDet2x2=function signOfDet2x2(x1,y1,x2,y2){var sign=null;var swap=null;var k=null;sign=1;if(x1===0.0||y2===0.0){if(y1===0.0||x2===0.0){return 0;}else if(y1>0){if(x2>0){return -sign;}else {return sign;}}else {if(x2>0){return sign;}else {return -sign;}}}if(y1===0.0||x2===0.0){if(y2>0){if(x1>0){return sign;}else {return -sign;}}else {if(x1>0){return -sign;}else {return sign;}}}if(y1>0.0){if(y2>0.0){if(y1<=y2);else {sign=-sign;swap=x1;x1=x2;x2=swap;swap=y1;y1=y2;y2=swap;}}else {if(y1<=-y2){sign=-sign;x2=-x2;y2=-y2;}else {swap=x1;x1=-x2;x2=swap;swap=y1;y1=-y2;y2=swap;}}}else {if(y2>0.0){if(-y1<=y2){sign=-sign;x1=-x1;y1=-y1;}else {swap=-x1;x1=x2;x2=swap;swap=-y1;y1=y2;y2=swap;}}else {if(y1>=y2){x1=-x1;y1=-y1;x2=-x2;y2=-y2;}else {sign=-sign;swap=-x1;x1=-x2;x2=swap;swap=-y1;y1=-y2;y2=swap;}}}if(x1>0.0){if(x2>0.0){if(x1<=x2);else {return sign;}}else {return sign;}}else {if(x2>0.0){return -sign;}else {if(x1>=x2){sign=-sign;x1=-x1;x2=-x2;}else {return -sign;}}}while(true){k=Math.floor(x2/x1);x2=x2-k*x1;y2=y2-k*y1;if(y2<0.0){return -sign;}if(y2>y1){return sign;}if(x1>x2+x2){if(y1<y2+y2){return sign;}}else {if(y1>y2+y2){return -sign;}else {x2=x1-x2;y2=y1-y2;sign=-sign;}}if(y2===0.0){if(x2===0.0){return 0;}else {return -sign;}}if(x2===0.0){return sign;}k=Math.floor(x1/x2);x1=x1-k*x2;y1=y1-k*y2;if(y1<0.0){return sign;}if(y1>y2){return -sign;}if(x2>x1+x1){if(y2<y1+y1){return -sign;}}else {if(y2>y1+y1){return sign;}else {x1=x2-x1;y1=y2-y1;sign=-sign;}}if(y1===0.0){if(x1===0.0){return 0;}else {return sign;}}if(x1===0.0){return -sign;}}};var RayCrossingCounter=function RayCrossingCounter(){this._p=null;this._crossingCount=0;this._isPointOnSegment=false;var p=arguments[0];this._p=p;};RayCrossingCounter.prototype.countSegment=function countSegment(p1,p2){if(p1.x<this._p.x&&p2.x<this._p.x){return null;}if(this._p.x===p2.x&&this._p.y===p2.y){this._isPointOnSegment=true;return null;}if(p1.y===this._p.y&&p2.y===this._p.y){var minx=p1.x;var maxx=p2.x;if(minx>maxx){minx=p2.x;maxx=p1.x;}if(this._p.x>=minx&&this._p.x<=maxx){this._isPointOnSegment=true;}return null;}if(p1.y>this._p.y&&p2.y<=this._p.y||p2.y>this._p.y&&p1.y<=this._p.y){var x1=p1.x-this._p.x;var y1=p1.y-this._p.y;var x2=p2.x-this._p.x;var y2=p2.y-this._p.y;var xIntSign=RobustDeterminant.signOfDet2x2(x1,y1,x2,y2);if(xIntSign===0.0){this._isPointOnSegment=true;return null;}if(y2<y1){xIntSign=-xIntSign;}if(xIntSign>0.0){this._crossingCount++;}}};RayCrossingCounter.prototype.isPointInPolygon=function isPointInPolygon(){return this.getLocation()!==Location.EXTERIOR;};RayCrossingCounter.prototype.getLocation=function getLocation(){if(this._isPointOnSegment){return Location.BOUNDARY;}if(this._crossingCount%2===1){return Location.INTERIOR;}return Location.EXTERIOR;};RayCrossingCounter.prototype.isOnSegment=function isOnSegment(){return this._isPointOnSegment;};RayCrossingCounter.prototype.interfaces_=function interfaces_(){return [];};RayCrossingCounter.prototype.getClass=function getClass(){return RayCrossingCounter;};RayCrossingCounter.locatePointInRing=function locatePointInRing(){if(arguments[0]instanceof Coordinate&&hasInterface(arguments[1],CoordinateSequence)){var p=arguments[0];var ring=arguments[1];var counter=new RayCrossingCounter(p);var p1=new Coordinate();var p2=new Coordinate();for(var i=1;i<ring.size();i++){ring.getCoordinate(i,p1);ring.getCoordinate(i-1,p2);counter.countSegment(p1,p2);if(counter.isOnSegment()){return counter.getLocation();}}return counter.getLocation();}else if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Array){var p$1=arguments[0];var ring$1=arguments[1];var counter$1=new RayCrossingCounter(p$1);for(var i$1=1;i$1<ring$1.length;i$1++){var p1$1=ring$1[i$1];var p2$1=ring$1[i$1-1];counter$1.countSegment(p1$1,p2$1);if(counter$1.isOnSegment()){return counter$1.getLocation();}}return counter$1.getLocation();}};var CGAlgorithms=function CGAlgorithms(){};var staticAccessors$3={CLOCKWISE:{configurable:true},RIGHT:{configurable:true},COUNTERCLOCKWISE:{configurable:true},LEFT:{configurable:true},COLLINEAR:{configurable:true},STRAIGHT:{configurable:true}};CGAlgorithms.prototype.interfaces_=function interfaces_(){return [];};CGAlgorithms.prototype.getClass=function getClass(){return CGAlgorithms;};CGAlgorithms.orientationIndex=function orientationIndex(p1,p2,q){return CGAlgorithmsDD.orientationIndex(p1,p2,q);};CGAlgorithms.signedArea=function signedArea(){if(arguments[0]instanceof Array){var ring=arguments[0];if(ring.length<3){return 0.0;}var sum=0.0;var x0=ring[0].x;for(var i=1;i<ring.length-1;i++){var x=ring[i].x-x0;var y1=ring[i+1].y;var y2=ring[i-1].y;sum+=x*(y2-y1);}return sum/2.0;}else if(hasInterface(arguments[0],CoordinateSequence)){var ring$1=arguments[0];var n=ring$1.size();if(n<3){return 0.0;}var p0=new Coordinate();var p1=new Coordinate();var p2=new Coordinate();ring$1.getCoordinate(0,p1);ring$1.getCoordinate(1,p2);var x0$1=p1.x;p2.x-=x0$1;var sum$1=0.0;for(var i$1=1;i$1<n-1;i$1++){p0.y=p1.y;p1.x=p2.x;p1.y=p2.y;ring$1.getCoordinate(i$1+1,p2);p2.x-=x0$1;sum$1+=p1.x*(p0.y-p2.y);}return sum$1/2.0;}};CGAlgorithms.distanceLineLine=function distanceLineLine(A,B,C,D){if(A.equals(B)){return CGAlgorithms.distancePointLine(A,C,D);}if(C.equals(D)){return CGAlgorithms.distancePointLine(D,A,B);}var noIntersection=false;if(!Envelope.intersects(A,B,C,D)){noIntersection=true;}else {var denom=(B.x-A.x)*(D.y-C.y)-(B.y-A.y)*(D.x-C.x);if(denom===0){noIntersection=true;}else {var rNumb=(A.y-C.y)*(D.x-C.x)-(A.x-C.x)*(D.y-C.y);var sNum=(A.y-C.y)*(B.x-A.x)-(A.x-C.x)*(B.y-A.y);var s=sNum/denom;var r=rNumb/denom;if(r<0||r>1||s<0||s>1){noIntersection=true;}}}if(noIntersection){return MathUtil.min(CGAlgorithms.distancePointLine(A,C,D),CGAlgorithms.distancePointLine(B,C,D),CGAlgorithms.distancePointLine(C,A,B),CGAlgorithms.distancePointLine(D,A,B));}return 0.0;};CGAlgorithms.isPointInRing=function isPointInRing(p,ring){return CGAlgorithms.locatePointInRing(p,ring)!==Location.EXTERIOR;};CGAlgorithms.computeLength=function computeLength(pts){var n=pts.size();if(n<=1){return 0.0;}var len=0.0;var p=new Coordinate();pts.getCoordinate(0,p);var x0=p.x;var y0=p.y;for(var i=1;i<n;i++){pts.getCoordinate(i,p);var x1=p.x;var y1=p.y;var dx=x1-x0;var dy=y1-y0;len+=Math.sqrt(dx*dx+dy*dy);x0=x1;y0=y1;}return len;};CGAlgorithms.isCCW=function isCCW(ring){var nPts=ring.length-1;if(nPts<3){throw new IllegalArgumentException('Ring has fewer than 4 points, so orientation cannot be determined');}var hiPt=ring[0];var hiIndex=0;for(var i=1;i<=nPts;i++){var p=ring[i];if(p.y>hiPt.y){hiPt=p;hiIndex=i;}}var iPrev=hiIndex;do{iPrev=iPrev-1;if(iPrev<0){iPrev=nPts;}}while(ring[iPrev].equals2D(hiPt)&&iPrev!==hiIndex);var iNext=hiIndex;do{iNext=(iNext+1)%nPts;}while(ring[iNext].equals2D(hiPt)&&iNext!==hiIndex);var prev=ring[iPrev];var next=ring[iNext];if(prev.equals2D(hiPt)||next.equals2D(hiPt)||prev.equals2D(next)){return false;}var disc=CGAlgorithms.computeOrientation(prev,hiPt,next);var isCCW=false;if(disc===0){isCCW=prev.x>next.x;}else {isCCW=disc>0;}return isCCW;};CGAlgorithms.locatePointInRing=function locatePointInRing(p,ring){return RayCrossingCounter.locatePointInRing(p,ring);};CGAlgorithms.distancePointLinePerpendicular=function distancePointLinePerpendicular(p,A,B){var len2=(B.x-A.x)*(B.x-A.x)+(B.y-A.y)*(B.y-A.y);var s=((A.y-p.y)*(B.x-A.x)-(A.x-p.x)*(B.y-A.y))/len2;return Math.abs(s)*Math.sqrt(len2);};CGAlgorithms.computeOrientation=function computeOrientation(p1,p2,q){return CGAlgorithms.orientationIndex(p1,p2,q);};CGAlgorithms.distancePointLine=function distancePointLine(){if(arguments.length===2){var p=arguments[0];var line=arguments[1];if(line.length===0){throw new IllegalArgumentException('Line array must contain at least one vertex');}var minDistance=p.distance(line[0]);for(var i=0;i<line.length-1;i++){var dist=CGAlgorithms.distancePointLine(p,line[i],line[i+1]);if(dist<minDistance){minDistance=dist;}}return minDistance;}else if(arguments.length===3){var p$1=arguments[0];var A=arguments[1];var B=arguments[2];if(A.x===B.x&&A.y===B.y){return p$1.distance(A);}var len2=(B.x-A.x)*(B.x-A.x)+(B.y-A.y)*(B.y-A.y);var r=((p$1.x-A.x)*(B.x-A.x)+(p$1.y-A.y)*(B.y-A.y))/len2;if(r<=0.0){return p$1.distance(A);}if(r>=1.0){return p$1.distance(B);}var s=((A.y-p$1.y)*(B.x-A.x)-(A.x-p$1.x)*(B.y-A.y))/len2;return Math.abs(s)*Math.sqrt(len2);}};CGAlgorithms.isOnLine=function isOnLine(p,pt){var lineIntersector=new RobustLineIntersector();for(var i=1;i<pt.length;i++){var p0=pt[i-1];var p1=pt[i];lineIntersector.computeIntersection(p,p0,p1);if(lineIntersector.hasIntersection()){return true;}}return false;};staticAccessors$3.CLOCKWISE.get=function(){return -1;};staticAccessors$3.RIGHT.get=function(){return CGAlgorithms.CLOCKWISE;};staticAccessors$3.COUNTERCLOCKWISE.get=function(){return 1;};staticAccessors$3.LEFT.get=function(){return CGAlgorithms.COUNTERCLOCKWISE;};staticAccessors$3.COLLINEAR.get=function(){return 0;};staticAccessors$3.STRAIGHT.get=function(){return CGAlgorithms.COLLINEAR;};Object.defineProperties(CGAlgorithms,staticAccessors$3);var GeometryComponentFilter=function GeometryComponentFilter(){};GeometryComponentFilter.prototype.filter=function filter(geom){};GeometryComponentFilter.prototype.interfaces_=function interfaces_(){return [];};GeometryComponentFilter.prototype.getClass=function getClass(){return GeometryComponentFilter;};var Geometry=function Geometry(){var factory=arguments[0];this._envelope=null;this._factory=null;this._SRID=null;this._userData=null;this._factory=factory;this._SRID=factory.getSRID();};var staticAccessors$11={serialVersionUID:{configurable:true},SORTINDEX_POINT:{configurable:true},SORTINDEX_MULTIPOINT:{configurable:true},SORTINDEX_LINESTRING:{configurable:true},SORTINDEX_LINEARRING:{configurable:true},SORTINDEX_MULTILINESTRING:{configurable:true},SORTINDEX_POLYGON:{configurable:true},SORTINDEX_MULTIPOLYGON:{configurable:true},SORTINDEX_GEOMETRYCOLLECTION:{configurable:true},geometryChangedFilter:{configurable:true}};Geometry.prototype.isGeometryCollection=function isGeometryCollection(){return this.getSortIndex()===Geometry.SORTINDEX_GEOMETRYCOLLECTION;};Geometry.prototype.getFactory=function getFactory(){return this._factory;};Geometry.prototype.getGeometryN=function getGeometryN(n){return this;};Geometry.prototype.getArea=function getArea(){return 0.0;};Geometry.prototype.isRectangle=function isRectangle(){return false;};Geometry.prototype.equals=function equals(){if(arguments[0]instanceof Geometry){var g$1=arguments[0];if(g$1===null){return false;}return this.equalsTopo(g$1);}else if(arguments[0]instanceof Object){var o=arguments[0];if(!(o instanceof Geometry)){return false;}var g=o;return this.equalsExact(g);}};Geometry.prototype.equalsExact=function equalsExact(other){return this===other||this.equalsExact(other,0);};Geometry.prototype.geometryChanged=function geometryChanged(){this.apply(Geometry.geometryChangedFilter);};Geometry.prototype.geometryChangedAction=function geometryChangedAction(){this._envelope=null;};Geometry.prototype.equalsNorm=function equalsNorm(g){if(g===null){return false;}return this.norm().equalsExact(g.norm());};Geometry.prototype.getLength=function getLength(){return 0.0;};Geometry.prototype.getNumGeometries=function getNumGeometries(){return 1;};Geometry.prototype.compareTo=function compareTo(){if(arguments.length===1){var o=arguments[0];var other=o;if(this.getSortIndex()!==other.getSortIndex()){return this.getSortIndex()-other.getSortIndex();}if(this.isEmpty()&&other.isEmpty()){return 0;}if(this.isEmpty()){return -1;}if(other.isEmpty()){return 1;}return this.compareToSameClass(o);}else if(arguments.length===2){var other$1=arguments[0];var comp=arguments[1];if(this.getSortIndex()!==other$1.getSortIndex()){return this.getSortIndex()-other$1.getSortIndex();}if(this.isEmpty()&&other$1.isEmpty()){return 0;}if(this.isEmpty()){return -1;}if(other$1.isEmpty()){return 1;}return this.compareToSameClass(other$1,comp);}};Geometry.prototype.getUserData=function getUserData(){return this._userData;};Geometry.prototype.getSRID=function getSRID(){return this._SRID;};Geometry.prototype.getEnvelope=function getEnvelope(){return this.getFactory().toGeometry(this.getEnvelopeInternal());};Geometry.prototype.checkNotGeometryCollection=function checkNotGeometryCollection(g){if(g.getSortIndex()===Geometry.SORTINDEX_GEOMETRYCOLLECTION){throw new IllegalArgumentException('This method does not support GeometryCollection arguments');}};Geometry.prototype.equal=function equal(a,b,tolerance){if(tolerance===0){return a.equals(b);}return a.distance(b)<=tolerance;};Geometry.prototype.norm=function norm(){var copy=this.copy();copy.normalize();return copy;};Geometry.prototype.getPrecisionModel=function getPrecisionModel(){return this._factory.getPrecisionModel();};Geometry.prototype.getEnvelopeInternal=function getEnvelopeInternal(){if(this._envelope===null){this._envelope=this.computeEnvelopeInternal();}return new Envelope(this._envelope);};Geometry.prototype.setSRID=function setSRID(SRID){this._SRID=SRID;};Geometry.prototype.setUserData=function setUserData(userData){this._userData=userData;};Geometry.prototype.compare=function compare(a,b){var i=a.iterator();var j=b.iterator();while(i.hasNext()&&j.hasNext()){var aElement=i.next();var bElement=j.next();var comparison=aElement.compareTo(bElement);if(comparison!==0){return comparison;}}if(i.hasNext()){return 1;}if(j.hasNext()){return -1;}return 0;};Geometry.prototype.hashCode=function hashCode(){return this.getEnvelopeInternal().hashCode();};Geometry.prototype.isGeometryCollectionOrDerived=function isGeometryCollectionOrDerived(){if(this.getSortIndex()===Geometry.SORTINDEX_GEOMETRYCOLLECTION||this.getSortIndex()===Geometry.SORTINDEX_MULTIPOINT||this.getSortIndex()===Geometry.SORTINDEX_MULTILINESTRING||this.getSortIndex()===Geometry.SORTINDEX_MULTIPOLYGON){return true;}return false;};Geometry.prototype.interfaces_=function interfaces_(){return [Clonable,Comparable,Serializable];};Geometry.prototype.getClass=function getClass(){return Geometry;};Geometry.hasNonEmptyElements=function hasNonEmptyElements(geometries){for(var i=0;i<geometries.length;i++){if(!geometries[i].isEmpty()){return true;}}return false;};Geometry.hasNullElements=function hasNullElements(array){for(var i=0;i<array.length;i++){if(array[i]===null){return true;}}return false;};staticAccessors$11.serialVersionUID.get=function(){return 8763622679187376702;};staticAccessors$11.SORTINDEX_POINT.get=function(){return 0;};staticAccessors$11.SORTINDEX_MULTIPOINT.get=function(){return 1;};staticAccessors$11.SORTINDEX_LINESTRING.get=function(){return 2;};staticAccessors$11.SORTINDEX_LINEARRING.get=function(){return 3;};staticAccessors$11.SORTINDEX_MULTILINESTRING.get=function(){return 4;};staticAccessors$11.SORTINDEX_POLYGON.get=function(){return 5;};staticAccessors$11.SORTINDEX_MULTIPOLYGON.get=function(){return 6;};staticAccessors$11.SORTINDEX_GEOMETRYCOLLECTION.get=function(){return 7;};staticAccessors$11.geometryChangedFilter.get=function(){return geometryChangedFilter;};Object.defineProperties(Geometry,staticAccessors$11);var geometryChangedFilter=function geometryChangedFilter(){};geometryChangedFilter.interfaces_=function interfaces_(){return [GeometryComponentFilter];};geometryChangedFilter.filter=function filter(geom){geom.geometryChangedAction();};var CoordinateFilter=function CoordinateFilter(){};CoordinateFilter.prototype.filter=function filter(coord){};CoordinateFilter.prototype.interfaces_=function interfaces_(){return [];};CoordinateFilter.prototype.getClass=function getClass(){return CoordinateFilter;};var BoundaryNodeRule=function BoundaryNodeRule(){};var staticAccessors$12={Mod2BoundaryNodeRule:{configurable:true},EndPointBoundaryNodeRule:{configurable:true},MultiValentEndPointBoundaryNodeRule:{configurable:true},MonoValentEndPointBoundaryNodeRule:{configurable:true},MOD2_BOUNDARY_RULE:{configurable:true},ENDPOINT_BOUNDARY_RULE:{configurable:true},MULTIVALENT_ENDPOINT_BOUNDARY_RULE:{configurable:true},MONOVALENT_ENDPOINT_BOUNDARY_RULE:{configurable:true},OGC_SFS_BOUNDARY_RULE:{configurable:true}};BoundaryNodeRule.prototype.isInBoundary=function isInBoundary(boundaryCount){};BoundaryNodeRule.prototype.interfaces_=function interfaces_(){return [];};BoundaryNodeRule.prototype.getClass=function getClass(){return BoundaryNodeRule;};staticAccessors$12.Mod2BoundaryNodeRule.get=function(){return Mod2BoundaryNodeRule;};staticAccessors$12.EndPointBoundaryNodeRule.get=function(){return EndPointBoundaryNodeRule;};staticAccessors$12.MultiValentEndPointBoundaryNodeRule.get=function(){return MultiValentEndPointBoundaryNodeRule;};staticAccessors$12.MonoValentEndPointBoundaryNodeRule.get=function(){return MonoValentEndPointBoundaryNodeRule;};staticAccessors$12.MOD2_BOUNDARY_RULE.get=function(){return new Mod2BoundaryNodeRule();};staticAccessors$12.ENDPOINT_BOUNDARY_RULE.get=function(){return new EndPointBoundaryNodeRule();};staticAccessors$12.MULTIVALENT_ENDPOINT_BOUNDARY_RULE.get=function(){return new MultiValentEndPointBoundaryNodeRule();};staticAccessors$12.MONOVALENT_ENDPOINT_BOUNDARY_RULE.get=function(){return new MonoValentEndPointBoundaryNodeRule();};staticAccessors$12.OGC_SFS_BOUNDARY_RULE.get=function(){return BoundaryNodeRule.MOD2_BOUNDARY_RULE;};Object.defineProperties(BoundaryNodeRule,staticAccessors$12);var Mod2BoundaryNodeRule=function Mod2BoundaryNodeRule(){};Mod2BoundaryNodeRule.prototype.isInBoundary=function isInBoundary(boundaryCount){return boundaryCount%2===1;};Mod2BoundaryNodeRule.prototype.interfaces_=function interfaces_(){return [BoundaryNodeRule];};Mod2BoundaryNodeRule.prototype.getClass=function getClass(){return Mod2BoundaryNodeRule;};var EndPointBoundaryNodeRule=function EndPointBoundaryNodeRule(){};EndPointBoundaryNodeRule.prototype.isInBoundary=function isInBoundary(boundaryCount){return boundaryCount>0;};EndPointBoundaryNodeRule.prototype.interfaces_=function interfaces_(){return [BoundaryNodeRule];};EndPointBoundaryNodeRule.prototype.getClass=function getClass(){return EndPointBoundaryNodeRule;};var MultiValentEndPointBoundaryNodeRule=function MultiValentEndPointBoundaryNodeRule(){};MultiValentEndPointBoundaryNodeRule.prototype.isInBoundary=function isInBoundary(boundaryCount){return boundaryCount>1;};MultiValentEndPointBoundaryNodeRule.prototype.interfaces_=function interfaces_(){return [BoundaryNodeRule];};MultiValentEndPointBoundaryNodeRule.prototype.getClass=function getClass(){return MultiValentEndPointBoundaryNodeRule;};var MonoValentEndPointBoundaryNodeRule=function MonoValentEndPointBoundaryNodeRule(){};MonoValentEndPointBoundaryNodeRule.prototype.isInBoundary=function isInBoundary(boundaryCount){return boundaryCount===1;};MonoValentEndPointBoundaryNodeRule.prototype.interfaces_=function interfaces_(){return [BoundaryNodeRule];};MonoValentEndPointBoundaryNodeRule.prototype.getClass=function getClass(){return MonoValentEndPointBoundaryNodeRule;};// import Iterator from './Iterator'
  /**
   * @see http://download.oracle.com/javase/6/docs/api/java/util/Collection.html
   *
   * @constructor
   * @private
   */var Collection=function Collection(){};Collection.prototype.add=function add(){};/**
   * Appends all of the elements in the specified collection to the end of this
   * list, in the order that they are returned by the specified collection's
   * iterator (optional operation).
   * @param {javascript.util.Collection} c
   * @return {boolean}
   */Collection.prototype.addAll=function addAll(){};/**
   * Returns true if this collection contains no elements.
   * @return {boolean}
   */Collection.prototype.isEmpty=function isEmpty(){};/**
   * Returns an iterator over the elements in this collection.
   * @return {javascript.util.Iterator}
   */Collection.prototype.iterator=function iterator(){};/**
   * Returns an iterator over the elements in this collection.
   * @return {number}
   */Collection.prototype.size=function size(){};/**
   * Returns an array containing all of the elements in this collection.
   * @return {Array}
   */Collection.prototype.toArray=function toArray(){};/**
   * Removes a single instance of the specified element from this collection if it
   * is present. (optional)
   * @param {Object} e
   * @return {boolean}
   */Collection.prototype.remove=function remove(){};/**
   * @param {string=} message Optional message
   * @extends {Error}
   * @constructor
   * @private
   */function IndexOutOfBoundsException(message){this.message=message||'';}IndexOutOfBoundsException.prototype=new Error();/**
   * @type {string}
   */IndexOutOfBoundsException.prototype.name='IndexOutOfBoundsException';/**
   * @see http://download.oracle.com/javase/6/docs/api/java/util/Iterator.html
   * @constructor
   * @private
   */var Iterator=function Iterator(){};Iterator.prototype.hasNext=function hasNext(){};/**
   * Returns the next element in the iteration.
   * @return {Object}
   */Iterator.prototype.next=function next(){};/**
   * Removes from the underlying collection the last element returned by the
   * iterator (optional operation).
   */Iterator.prototype.remove=function remove(){};/**
   * @see http://download.oracle.com/javase/6/docs/api/java/util/List.html
   *
   * @extends {javascript.util.Collection}
   * @constructor
   * @private
   */var List=function(Collection$$1){function List(){Collection$$1.apply(this,arguments);}if(Collection$$1)List.__proto__=Collection$$1;List.prototype=Object.create(Collection$$1&&Collection$$1.prototype);List.prototype.constructor=List;List.prototype.get=function get(){};/**
     * Replaces the element at the specified position in this list with the
     * specified element (optional operation).
     * @param {number} index
     * @param {Object} e
     * @return {Object}
     */List.prototype.set=function set(){};/**
     * Returns true if this collection contains no elements.
     * @return {boolean}
     */List.prototype.isEmpty=function isEmpty(){};return List;}(Collection);/**
   * @param {string=} message Optional message
   * @extends {Error}
   * @constructor
   * @private
   */function NoSuchElementException(message){this.message=message||'';}NoSuchElementException.prototype=new Error();/**
   * @type {string}
   */NoSuchElementException.prototype.name='NoSuchElementException';// import OperationNotSupported from './OperationNotSupported'
  /**
   * @see http://download.oracle.com/javase/6/docs/api/java/util/ArrayList.html
   *
   * @extends List
   * @private
   */var ArrayList=function(List$$1){function ArrayList(){List$$1.call(this);this.array_=[];if(arguments[0]instanceof Collection){this.addAll(arguments[0]);}}if(List$$1)ArrayList.__proto__=List$$1;ArrayList.prototype=Object.create(List$$1&&List$$1.prototype);ArrayList.prototype.constructor=ArrayList;ArrayList.prototype.ensureCapacity=function ensureCapacity(){};ArrayList.prototype.interfaces_=function interfaces_(){return [List$$1,Collection];};/**
     * @override
     */ArrayList.prototype.add=function add(e){if(arguments.length===1){this.array_.push(e);}else {this.array_.splice(arguments[0],arguments[1]);}return true;};ArrayList.prototype.clear=function clear(){this.array_=[];};/**
     * @override
     */ArrayList.prototype.addAll=function addAll(c){var this$1=this;for(var i=c.iterator();i.hasNext();){this$1.add(i.next());}return true;};/**
     * @override
     */ArrayList.prototype.set=function set(index,element){var oldElement=this.array_[index];this.array_[index]=element;return oldElement;};/**
     * @override
     */ArrayList.prototype.iterator=function iterator(){return new Iterator_(this);};/**
     * @override
     */ArrayList.prototype.get=function get(index){if(index<0||index>=this.size()){throw new IndexOutOfBoundsException();}return this.array_[index];};/**
     * @override
     */ArrayList.prototype.isEmpty=function isEmpty(){return this.array_.length===0;};/**
     * @override
     */ArrayList.prototype.size=function size(){return this.array_.length;};/**
     * @override
     */ArrayList.prototype.toArray=function toArray(){var this$1=this;var array=[];for(var i=0,len=this.array_.length;i<len;i++){array.push(this$1.array_[i]);}return array;};/**
     * @override
     */ArrayList.prototype.remove=function remove(o){var this$1=this;var found=false;for(var i=0,len=this.array_.length;i<len;i++){if(this$1.array_[i]===o){this$1.array_.splice(i,1);found=true;break;}}return found;};return ArrayList;}(List);/**
   * @extends {Iterator}
   * @param {ArrayList} arrayList
   * @constructor
   * @private
   */var Iterator_=function(Iterator$$1){function Iterator_(arrayList){Iterator$$1.call(this);/**
       * @type {ArrayList}
       * @private
      */this.arrayList_=arrayList;/**
       * @type {number}
       * @private
      */this.position_=0;}if(Iterator$$1)Iterator_.__proto__=Iterator$$1;Iterator_.prototype=Object.create(Iterator$$1&&Iterator$$1.prototype);Iterator_.prototype.constructor=Iterator_;/**
     * @override
     */Iterator_.prototype.next=function next(){if(this.position_===this.arrayList_.size()){throw new NoSuchElementException();}return this.arrayList_.get(this.position_++);};/**
     * @override
     */Iterator_.prototype.hasNext=function hasNext(){if(this.position_<this.arrayList_.size()){return true;}else {return false;}};/**
     * TODO: should be in ListIterator
     * @override
     */Iterator_.prototype.set=function set(element){return this.arrayList_.set(this.position_-1,element);};/**
     * @override
     */Iterator_.prototype.remove=function remove(){this.arrayList_.remove(this.arrayList_.get(this.position_));};return Iterator_;}(Iterator);var CoordinateList=function(ArrayList$$1){function CoordinateList(){ArrayList$$1.call(this);if(arguments.length===0);else if(arguments.length===1){var coord=arguments[0];this.ensureCapacity(coord.length);this.add(coord,true);}else if(arguments.length===2){var coord$1=arguments[0];var allowRepeated=arguments[1];this.ensureCapacity(coord$1.length);this.add(coord$1,allowRepeated);}}if(ArrayList$$1)CoordinateList.__proto__=ArrayList$$1;CoordinateList.prototype=Object.create(ArrayList$$1&&ArrayList$$1.prototype);CoordinateList.prototype.constructor=CoordinateList;var staticAccessors={coordArrayType:{configurable:true}};staticAccessors.coordArrayType.get=function(){return new Array(0).fill(null);};CoordinateList.prototype.getCoordinate=function getCoordinate(i){return this.get(i);};CoordinateList.prototype.addAll=function addAll(){var this$1=this;if(arguments.length===2){var coll=arguments[0];var allowRepeated=arguments[1];var isChanged=false;for(var i=coll.iterator();i.hasNext();){this$1.add(i.next(),allowRepeated);isChanged=true;}return isChanged;}else {return ArrayList$$1.prototype.addAll.apply(this,arguments);}};CoordinateList.prototype.clone=function clone(){var this$1=this;var clone=ArrayList$$1.prototype.clone.call(this);for(var i=0;i<this.size();i++){clone.add(i,this$1.get(i).copy());}return clone;};CoordinateList.prototype.toCoordinateArray=function toCoordinateArray(){return this.toArray(CoordinateList.coordArrayType);};CoordinateList.prototype.add=function add(){var this$1=this;if(arguments.length===1){var coord=arguments[0];ArrayList$$1.prototype.add.call(this,coord);}else if(arguments.length===2){if(arguments[0]instanceof Array&&typeof arguments[1]==='boolean'){var coord$1=arguments[0];var allowRepeated=arguments[1];this.add(coord$1,allowRepeated,true);return true;}else if(arguments[0]instanceof Coordinate&&typeof arguments[1]==='boolean'){var coord$2=arguments[0];var allowRepeated$1=arguments[1];if(!allowRepeated$1){if(this.size()>=1){var last=this.get(this.size()-1);if(last.equals2D(coord$2)){return null;}}}ArrayList$$1.prototype.add.call(this,coord$2);}else if(arguments[0]instanceof Object&&typeof arguments[1]==='boolean'){var obj=arguments[0];var allowRepeated$2=arguments[1];this.add(obj,allowRepeated$2);return true;}}else if(arguments.length===3){if(typeof arguments[2]==='boolean'&&arguments[0]instanceof Array&&typeof arguments[1]==='boolean'){var coord$3=arguments[0];var allowRepeated$3=arguments[1];var direction=arguments[2];if(direction){for(var i$1=0;i$1<coord$3.length;i$1++){this$1.add(coord$3[i$1],allowRepeated$3);}}else {for(var i$2=coord$3.length-1;i$2>=0;i$2--){this$1.add(coord$3[i$2],allowRepeated$3);}}return true;}else if(typeof arguments[2]==='boolean'&&Number.isInteger(arguments[0])&&arguments[1]instanceof Coordinate){var i$3=arguments[0];var coord$4=arguments[1];var allowRepeated$4=arguments[2];if(!allowRepeated$4){var size=this.size();if(size>0){if(i$3>0){var prev=this.get(i$3-1);if(prev.equals2D(coord$4)){return null;}}if(i$3<size){var next=this.get(i$3);if(next.equals2D(coord$4)){return null;}}}}ArrayList$$1.prototype.add.call(this,i$3,coord$4);}}else if(arguments.length===4){var coord$5=arguments[0];var allowRepeated$5=arguments[1];var start=arguments[2];var end=arguments[3];var inc=1;if(start>end){inc=-1;}for(var i=start;i!==end;i+=inc){this$1.add(coord$5[i],allowRepeated$5);}return true;}};CoordinateList.prototype.closeRing=function closeRing(){if(this.size()>0){this.add(new Coordinate(this.get(0)),false);}};CoordinateList.prototype.interfaces_=function interfaces_(){return [];};CoordinateList.prototype.getClass=function getClass(){return CoordinateList;};Object.defineProperties(CoordinateList,staticAccessors);return CoordinateList;}(ArrayList);var CoordinateArrays=function CoordinateArrays(){};var staticAccessors$13={ForwardComparator:{configurable:true},BidirectionalComparator:{configurable:true},coordArrayType:{configurable:true}};staticAccessors$13.ForwardComparator.get=function(){return ForwardComparator;};staticAccessors$13.BidirectionalComparator.get=function(){return BidirectionalComparator;};staticAccessors$13.coordArrayType.get=function(){return new Array(0).fill(null);};CoordinateArrays.prototype.interfaces_=function interfaces_(){return [];};CoordinateArrays.prototype.getClass=function getClass(){return CoordinateArrays;};CoordinateArrays.isRing=function isRing(pts){if(pts.length<4){return false;}if(!pts[0].equals2D(pts[pts.length-1])){return false;}return true;};CoordinateArrays.ptNotInList=function ptNotInList(testPts,pts){for(var i=0;i<testPts.length;i++){var testPt=testPts[i];if(CoordinateArrays.indexOf(testPt,pts)<0){return testPt;}}return null;};CoordinateArrays.scroll=function scroll(coordinates,firstCoordinate){var i=CoordinateArrays.indexOf(firstCoordinate,coordinates);if(i<0){return null;}var newCoordinates=new Array(coordinates.length).fill(null);System.arraycopy(coordinates,i,newCoordinates,0,coordinates.length-i);System.arraycopy(coordinates,0,newCoordinates,coordinates.length-i,i);System.arraycopy(newCoordinates,0,coordinates,0,coordinates.length);};CoordinateArrays.equals=function equals(){if(arguments.length===2){var coord1=arguments[0];var coord2=arguments[1];if(coord1===coord2){return true;}if(coord1===null||coord2===null){return false;}if(coord1.length!==coord2.length){return false;}for(var i=0;i<coord1.length;i++){if(!coord1[i].equals(coord2[i])){return false;}}return true;}else if(arguments.length===3){var coord1$1=arguments[0];var coord2$1=arguments[1];var coordinateComparator=arguments[2];if(coord1$1===coord2$1){return true;}if(coord1$1===null||coord2$1===null){return false;}if(coord1$1.length!==coord2$1.length){return false;}for(var i$1=0;i$1<coord1$1.length;i$1++){if(coordinateComparator.compare(coord1$1[i$1],coord2$1[i$1])!==0){return false;}}return true;}};CoordinateArrays.intersection=function intersection(coordinates,env){var coordList=new CoordinateList();for(var i=0;i<coordinates.length;i++){if(env.intersects(coordinates[i])){coordList.add(coordinates[i],true);}}return coordList.toCoordinateArray();};CoordinateArrays.hasRepeatedPoints=function hasRepeatedPoints(coord){for(var i=1;i<coord.length;i++){if(coord[i-1].equals(coord[i])){return true;}}return false;};CoordinateArrays.removeRepeatedPoints=function removeRepeatedPoints(coord){if(!CoordinateArrays.hasRepeatedPoints(coord)){return coord;}var coordList=new CoordinateList(coord,false);return coordList.toCoordinateArray();};CoordinateArrays.reverse=function reverse(coord){var last=coord.length-1;var mid=Math.trunc(last/2);for(var i=0;i<=mid;i++){var tmp=coord[i];coord[i]=coord[last-i];coord[last-i]=tmp;}};CoordinateArrays.removeNull=function removeNull(coord){var nonNull=0;for(var i=0;i<coord.length;i++){if(coord[i]!==null){nonNull++;}}var newCoord=new Array(nonNull).fill(null);if(nonNull===0){return newCoord;}var j=0;for(var i$1=0;i$1<coord.length;i$1++){if(coord[i$1]!==null){newCoord[j++]=coord[i$1];}}return newCoord;};CoordinateArrays.copyDeep=function copyDeep(){if(arguments.length===1){var coordinates=arguments[0];var copy=new Array(coordinates.length).fill(null);for(var i=0;i<coordinates.length;i++){copy[i]=new Coordinate(coordinates[i]);}return copy;}else if(arguments.length===5){var src=arguments[0];var srcStart=arguments[1];var dest=arguments[2];var destStart=arguments[3];var length=arguments[4];for(var i$1=0;i$1<length;i$1++){dest[destStart+i$1]=new Coordinate(src[srcStart+i$1]);}}};CoordinateArrays.isEqualReversed=function isEqualReversed(pts1,pts2){for(var i=0;i<pts1.length;i++){var p1=pts1[i];var p2=pts2[pts1.length-i-1];if(p1.compareTo(p2)!==0){return false;}}return true;};CoordinateArrays.envelope=function envelope(coordinates){var env=new Envelope();for(var i=0;i<coordinates.length;i++){env.expandToInclude(coordinates[i]);}return env;};CoordinateArrays.toCoordinateArray=function toCoordinateArray(coordList){return coordList.toArray(CoordinateArrays.coordArrayType);};CoordinateArrays.atLeastNCoordinatesOrNothing=function atLeastNCoordinatesOrNothing(n,c){return c.length>=n?c:[];};CoordinateArrays.indexOf=function indexOf(coordinate,coordinates){for(var i=0;i<coordinates.length;i++){if(coordinate.equals(coordinates[i])){return i;}}return -1;};CoordinateArrays.increasingDirection=function increasingDirection(pts){for(var i=0;i<Math.trunc(pts.length/2);i++){var j=pts.length-1-i;var comp=pts[i].compareTo(pts[j]);if(comp!==0){return comp;}}return 1;};CoordinateArrays.compare=function compare(pts1,pts2){var i=0;while(i<pts1.length&&i<pts2.length){var compare=pts1[i].compareTo(pts2[i]);if(compare!==0){return compare;}i++;}if(i<pts2.length){return -1;}if(i<pts1.length){return 1;}return 0;};CoordinateArrays.minCoordinate=function minCoordinate(coordinates){var minCoord=null;for(var i=0;i<coordinates.length;i++){if(minCoord===null||minCoord.compareTo(coordinates[i])>0){minCoord=coordinates[i];}}return minCoord;};CoordinateArrays.extract=function extract(pts,start,end){start=MathUtil.clamp(start,0,pts.length);end=MathUtil.clamp(end,-1,pts.length);var npts=end-start+1;if(end<0){npts=0;}if(start>=pts.length){npts=0;}if(end<start){npts=0;}var extractPts=new Array(npts).fill(null);if(npts===0){return extractPts;}var iPts=0;for(var i=start;i<=end;i++){extractPts[iPts++]=pts[i];}return extractPts;};Object.defineProperties(CoordinateArrays,staticAccessors$13);var ForwardComparator=function ForwardComparator(){};ForwardComparator.prototype.compare=function compare(o1,o2){var pts1=o1;var pts2=o2;return CoordinateArrays.compare(pts1,pts2);};ForwardComparator.prototype.interfaces_=function interfaces_(){return [Comparator];};ForwardComparator.prototype.getClass=function getClass(){return ForwardComparator;};var BidirectionalComparator=function BidirectionalComparator(){};BidirectionalComparator.prototype.compare=function compare(o1,o2){var pts1=o1;var pts2=o2;if(pts1.length<pts2.length){return -1;}if(pts1.length>pts2.length){return 1;}if(pts1.length===0){return 0;}var forwardComp=CoordinateArrays.compare(pts1,pts2);var isEqualRev=CoordinateArrays.isEqualReversed(pts1,pts2);if(isEqualRev){return 0;}return forwardComp;};BidirectionalComparator.prototype.OLDcompare=function OLDcompare(o1,o2){var pts1=o1;var pts2=o2;if(pts1.length<pts2.length){return -1;}if(pts1.length>pts2.length){return 1;}if(pts1.length===0){return 0;}var dir1=CoordinateArrays.increasingDirection(pts1);var dir2=CoordinateArrays.increasingDirection(pts2);var i1=dir1>0?0:pts1.length-1;var i2=dir2>0?0:pts1.length-1;for(var i=0;i<pts1.length;i++){var comparePt=pts1[i1].compareTo(pts2[i2]);if(comparePt!==0){return comparePt;}i1+=dir1;i2+=dir2;}return 0;};BidirectionalComparator.prototype.interfaces_=function interfaces_(){return [Comparator];};BidirectionalComparator.prototype.getClass=function getClass(){return BidirectionalComparator;};/**
   * @see http://download.oracle.com/javase/6/docs/api/java/util/Map.html
   *
   * @constructor
   * @private
   */var Map$1=function Map(){};Map$1.prototype.get=function get(){};/**
   * Associates the specified value with the specified key in this map (optional
   * operation).
   * @param {Object} key
   * @param {Object} value
   * @return {Object}
   */Map$1.prototype.put=function put(){};/**
   * Returns the number of key-value mappings in this map.
   * @return {number}
   */Map$1.prototype.size=function size(){};/**
   * Returns a Collection view of the values contained in this map.
   * @return {javascript.util.Collection}
   */Map$1.prototype.values=function values(){};/**
   * Returns a {@link Set} view of the mappings contained in this map.
   * The set is backed by the map, so changes to the map are
   * reflected in the set, and vice-versa.If the map is modified
   * while an iteration over the set is in progress (except through
   * the iterator's own <tt>remove</tt> operation, or through the
   * <tt>setValue</tt> operation on a map entry returned by the
   * iterator) the results of the iteration are undefined.The set
   * supports element removal, which removes the corresponding
   * mapping from the map, via the <tt>Iterator.remove</tt>,
   * <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and
   * <tt>clear</tt> operations.It does not support the
   * <tt>add</tt> or <tt>addAll</tt> operations.
   *
   * @return {Set} a set view of the mappings contained in this map
   */Map$1.prototype.entrySet=function entrySet(){};/**
   * @see http://download.oracle.com/javase/6/docs/api/java/util/SortedMap.html
   *
   * @extends {Map}
   * @constructor
   * @private
   */var SortedMap=function(Map){function SortedMap(){Map.apply(this,arguments);}if(Map)SortedMap.__proto__=Map;SortedMap.prototype=Object.create(Map&&Map.prototype);SortedMap.prototype.constructor=SortedMap;return SortedMap;}(Map$1);/**
   * @param {string=} message Optional message
   * @extends {Error}
   * @constructor
   * @private
   */function OperationNotSupported(message){this.message=message||'';}OperationNotSupported.prototype=new Error();/**
   * @type {string}
   */OperationNotSupported.prototype.name='OperationNotSupported';/**
   * @see http://download.oracle.com/javase/6/docs/api/java/util/Set.html
   *
   * @extends {Collection}
   * @constructor
   * @private
   */function Set$1(){}Set$1.prototype=new Collection();/**
   * Returns true if this set contains the specified element. More formally,
   * returns true if and only if this set contains an element e such that (o==null ?
   * e==null : o.equals(e)).
   * @param {Object} e
   * @return {boolean}
   */Set$1.prototype.contains=function(){};/**
   * @see http://docs.oracle.com/javase/6/docs/api/java/util/HashSet.html
   *
   * @extends {javascript.util.Set}
   * @constructor
   * @private
   */var HashSet=function(Set$$1){function HashSet(){Set$$1.call(this);this.array_=[];if(arguments[0]instanceof Collection){this.addAll(arguments[0]);}}if(Set$$1)HashSet.__proto__=Set$$1;HashSet.prototype=Object.create(Set$$1&&Set$$1.prototype);HashSet.prototype.constructor=HashSet;/**
     * @override
     */HashSet.prototype.contains=function contains(o){var this$1=this;for(var i=0,len=this.array_.length;i<len;i++){var e=this$1.array_[i];if(e===o){return true;}}return false;};/**
     * @override
     */HashSet.prototype.add=function add(o){if(this.contains(o)){return false;}this.array_.push(o);return true;};/**
     * @override
     */HashSet.prototype.addAll=function addAll(c){var this$1=this;for(var i=c.iterator();i.hasNext();){this$1.add(i.next());}return true;};/**
     * @override
     */HashSet.prototype.remove=function remove(o){// throw new javascript.util.OperationNotSupported()
  throw new Error();};/**
     * @override
     */HashSet.prototype.size=function size(){return this.array_.length;};/**
     * @override
     */HashSet.prototype.isEmpty=function isEmpty(){return this.array_.length===0;};/**
     * @override
     */HashSet.prototype.toArray=function toArray(){var this$1=this;var array=[];for(var i=0,len=this.array_.length;i<len;i++){array.push(this$1.array_[i]);}return array;};/**
     * @override
     */HashSet.prototype.iterator=function iterator(){return new Iterator_$1(this);};return HashSet;}(Set$1);/**
     * @extends {Iterator}
     * @param {HashSet} hashSet
     * @constructor
     * @private
     */var Iterator_$1=function(Iterator$$1){function Iterator_(hashSet){Iterator$$1.call(this);/**
       * @type {HashSet}
       * @private
       */this.hashSet_=hashSet;/**
       * @type {number}
       * @private
       */this.position_=0;}if(Iterator$$1)Iterator_.__proto__=Iterator$$1;Iterator_.prototype=Object.create(Iterator$$1&&Iterator$$1.prototype);Iterator_.prototype.constructor=Iterator_;/**
     * @override
     */Iterator_.prototype.next=function next(){if(this.position_===this.hashSet_.size()){throw new NoSuchElementException();}return this.hashSet_.array_[this.position_++];};/**
     * @override
     */Iterator_.prototype.hasNext=function hasNext(){if(this.position_<this.hashSet_.size()){return true;}else {return false;}};/**
     * @override
     */Iterator_.prototype.remove=function remove(){throw new OperationNotSupported();};return Iterator_;}(Iterator);var BLACK=0;var RED=1;function colorOf(p){return p===null?BLACK:p.color;}function parentOf(p){return p===null?null:p.parent;}function setColor(p,c){if(p!==null){p.color=c;}}function leftOf(p){return p===null?null:p.left;}function rightOf(p){return p===null?null:p.right;}/**
   * @see http://download.oracle.com/javase/6/docs/api/java/util/TreeMap.html
   *
   * @extends {SortedMap}
   * @constructor
   * @private
   */function TreeMap(){/**
     * @type {Object}
     * @private
     */this.root_=null;/**
     * @type {number}
     * @private
    */this.size_=0;}TreeMap.prototype=new SortedMap();/**
   * @override
   */TreeMap.prototype.get=function(key){var p=this.root_;while(p!==null){var cmp=key['compareTo'](p.key);if(cmp<0){p=p.left;}else if(cmp>0){p=p.right;}else {return p.value;}}return null;};/**
   * @override
   */TreeMap.prototype.put=function(key,value){if(this.root_===null){this.root_={key:key,value:value,left:null,right:null,parent:null,color:BLACK,getValue:function getValue(){return this.value;},getKey:function getKey(){return this.key;}};this.size_=1;return null;}var t=this.root_;var parent;var cmp;do{parent=t;cmp=key['compareTo'](t.key);if(cmp<0){t=t.left;}else if(cmp>0){t=t.right;}else {var oldValue=t.value;t.value=value;return oldValue;}}while(t!==null);var e={key:key,left:null,right:null,value:value,parent:parent,color:BLACK,getValue:function getValue(){return this.value;},getKey:function getKey(){return this.key;}};if(cmp<0){parent.left=e;}else {parent.right=e;}this.fixAfterInsertion(e);this.size_++;return null;};/**
   * @param {Object} x
   */TreeMap.prototype.fixAfterInsertion=function(x){var this$1=this;x.color=RED;while(x!=null&&x!==this.root_&&x.parent.color===RED){if(parentOf(x)===leftOf(parentOf(parentOf(x)))){var y=rightOf(parentOf(parentOf(x)));if(colorOf(y)===RED){setColor(parentOf(x),BLACK);setColor(y,BLACK);setColor(parentOf(parentOf(x)),RED);x=parentOf(parentOf(x));}else {if(x===rightOf(parentOf(x))){x=parentOf(x);this$1.rotateLeft(x);}setColor(parentOf(x),BLACK);setColor(parentOf(parentOf(x)),RED);this$1.rotateRight(parentOf(parentOf(x)));}}else {var y$1=leftOf(parentOf(parentOf(x)));if(colorOf(y$1)===RED){setColor(parentOf(x),BLACK);setColor(y$1,BLACK);setColor(parentOf(parentOf(x)),RED);x=parentOf(parentOf(x));}else {if(x===leftOf(parentOf(x))){x=parentOf(x);this$1.rotateRight(x);}setColor(parentOf(x),BLACK);setColor(parentOf(parentOf(x)),RED);this$1.rotateLeft(parentOf(parentOf(x)));}}}this.root_.color=BLACK;};/**
   * @override
   */TreeMap.prototype.values=function(){var arrayList=new ArrayList();var p=this.getFirstEntry();if(p!==null){arrayList.add(p.value);while((p=TreeMap.successor(p))!==null){arrayList.add(p.value);}}return arrayList;};/**
   * @override
   */TreeMap.prototype.entrySet=function(){var hashSet=new HashSet();var p=this.getFirstEntry();if(p!==null){hashSet.add(p);while((p=TreeMap.successor(p))!==null){hashSet.add(p);}}return hashSet;};/**
   * @param {Object} p
   */TreeMap.prototype.rotateLeft=function(p){if(p!=null){var r=p.right;p.right=r.left;if(r.left!=null){r.left.parent=p;}r.parent=p.parent;if(p.parent===null){this.root_=r;}else if(p.parent.left===p){p.parent.left=r;}else {p.parent.right=r;}r.left=p;p.parent=r;}};/**
   * @param {Object} p
   */TreeMap.prototype.rotateRight=function(p){if(p!=null){var l=p.left;p.left=l.right;if(l.right!=null){l.right.parent=p;}l.parent=p.parent;if(p.parent===null){this.root_=l;}else if(p.parent.right===p){p.parent.right=l;}else {p.parent.left=l;}l.right=p;p.parent=l;}};/**
   * @return {Object}
   */TreeMap.prototype.getFirstEntry=function(){var p=this.root_;if(p!=null){while(p.left!=null){p=p.left;}}return p;};/**
   * @param {Object} t
   * @return {Object}
   * @private
   */TreeMap.successor=function(t){if(t===null){return null;}else if(t.right!==null){var p=t.right;while(p.left!==null){p=p.left;}return p;}else {var p$1=t.parent;var ch=t;while(p$1!==null&&ch===p$1.right){ch=p$1;p$1=p$1.parent;}return p$1;}};/**
   * @override
   */TreeMap.prototype.size=function(){return this.size_;};var Lineal=function Lineal(){};Lineal.prototype.interfaces_=function interfaces_(){return [];};Lineal.prototype.getClass=function getClass(){return Lineal;};/**
   * @see http://download.oracle.com/javase/6/docs/api/java/util/SortedSet.html
   *
   * @extends {Set}
   * @constructor
   * @private
   */function SortedSet(){}SortedSet.prototype=new Set$1();// import Iterator from './Iterator'
  /**
   * @see http://download.oracle.com/javase/6/docs/api/java/util/TreeSet.html
   *
   * @extends {SortedSet}
   * @constructor
   * @private
   */function TreeSet(){/**
     * @type {Array}
     * @private
    */this.array_=[];if(arguments[0]instanceof Collection){this.addAll(arguments[0]);}}TreeSet.prototype=new SortedSet();/**
   * @override
   */TreeSet.prototype.contains=function(o){var this$1=this;for(var i=0,len=this.array_.length;i<len;i++){var e=this$1.array_[i];if(e['compareTo'](o)===0){return true;}}return false;};/**
   * @override
   */TreeSet.prototype.add=function(o){var this$1=this;if(this.contains(o)){return false;}for(var i=0,len=this.array_.length;i<len;i++){var e=this$1.array_[i];if(e['compareTo'](o)===1){this$1.array_.splice(i,0,o);return true;}}this.array_.push(o);return true;};/**
   * @override
   */TreeSet.prototype.addAll=function(c){var this$1=this;for(var i=c.iterator();i.hasNext();){this$1.add(i.next());}return true;};/**
   * @override
   */TreeSet.prototype.remove=function(e){throw new OperationNotSupported();};/**
   * @override
   */TreeSet.prototype.size=function(){return this.array_.length;};/**
   * @override
   */TreeSet.prototype.isEmpty=function(){return this.array_.length===0;};/**
   * @override
   */TreeSet.prototype.toArray=function(){var this$1=this;var array=[];for(var i=0,len=this.array_.length;i<len;i++){array.push(this$1.array_[i]);}return array;};/**
   * @override
   */TreeSet.prototype.iterator=function(){return new Iterator_$2(this);};/**
   * @extends {javascript.util.Iterator}
   * @param {javascript.util.TreeSet} treeSet
   * @constructor
   * @private
   */var Iterator_$2=function Iterator_$2(treeSet){/**
     * @type {javascript.util.TreeSet}
     * @private
     */this.treeSet_=treeSet;/**
     * @type {number}
     * @private
     */this.position_=0;};/**
   * @override
   */Iterator_$2.prototype.next=function(){if(this.position_===this.treeSet_.size()){throw new NoSuchElementException();}return this.treeSet_.array_[this.position_++];};/**
   * @override
   */Iterator_$2.prototype.hasNext=function(){if(this.position_<this.treeSet_.size()){return true;}else {return false;}};/**
   * @override
   */Iterator_$2.prototype.remove=function(){throw new OperationNotSupported();};/**
   * @see http://download.oracle.com/javase/6/docs/api/java/util/Arrays.html
   *
   * @constructor
   * @private
   */var Arrays=function Arrays(){};Arrays.sort=function sort(){var a=arguments[0];var i;var t;var comparator;var compare;if(arguments.length===1){compare=function compare(a,b){return a.compareTo(b);};a.sort(compare);}else if(arguments.length===2){comparator=arguments[1];compare=function compare(a,b){return comparator['compare'](a,b);};a.sort(compare);}else if(arguments.length===3){t=a.slice(arguments[1],arguments[2]);t.sort();var r=a.slice(0,arguments[1]).concat(t,a.slice(arguments[2],a.length));a.splice(0,a.length);for(i=0;i<r.length;i++){a.push(r[i]);}}else if(arguments.length===4){t=a.slice(arguments[1],arguments[2]);comparator=arguments[3];compare=function compare(a,b){return comparator['compare'](a,b);};t.sort(compare);r=a.slice(0,arguments[1]).concat(t,a.slice(arguments[2],a.length));a.splice(0,a.length);for(i=0;i<r.length;i++){a.push(r[i]);}}};/**
   * @param {Array} array
   * @return {ArrayList}
   */Arrays.asList=function asList(array){var arrayList=new ArrayList();for(var i=0,len=array.length;i<len;i++){arrayList.add(array[i]);}return arrayList;};var Dimension=function Dimension(){};var staticAccessors$14={P:{configurable:true},L:{configurable:true},A:{configurable:true},FALSE:{configurable:true},TRUE:{configurable:true},DONTCARE:{configurable:true},SYM_FALSE:{configurable:true},SYM_TRUE:{configurable:true},SYM_DONTCARE:{configurable:true},SYM_P:{configurable:true},SYM_L:{configurable:true},SYM_A:{configurable:true}};staticAccessors$14.P.get=function(){return 0;};staticAccessors$14.L.get=function(){return 1;};staticAccessors$14.A.get=function(){return 2;};staticAccessors$14.FALSE.get=function(){return -1;};staticAccessors$14.TRUE.get=function(){return -2;};staticAccessors$14.DONTCARE.get=function(){return -3;};staticAccessors$14.SYM_FALSE.get=function(){return 'F';};staticAccessors$14.SYM_TRUE.get=function(){return 'T';};staticAccessors$14.SYM_DONTCARE.get=function(){return '*';};staticAccessors$14.SYM_P.get=function(){return '0';};staticAccessors$14.SYM_L.get=function(){return '1';};staticAccessors$14.SYM_A.get=function(){return '2';};Dimension.prototype.interfaces_=function interfaces_(){return [];};Dimension.prototype.getClass=function getClass(){return Dimension;};Dimension.toDimensionSymbol=function toDimensionSymbol(dimensionValue){switch(dimensionValue){case Dimension.FALSE:return Dimension.SYM_FALSE;case Dimension.TRUE:return Dimension.SYM_TRUE;case Dimension.DONTCARE:return Dimension.SYM_DONTCARE;case Dimension.P:return Dimension.SYM_P;case Dimension.L:return Dimension.SYM_L;case Dimension.A:return Dimension.SYM_A;}throw new IllegalArgumentException('Unknown dimension value: '+dimensionValue);};Dimension.toDimensionValue=function toDimensionValue(dimensionSymbol){switch(Character.toUpperCase(dimensionSymbol)){case Dimension.SYM_FALSE:return Dimension.FALSE;case Dimension.SYM_TRUE:return Dimension.TRUE;case Dimension.SYM_DONTCARE:return Dimension.DONTCARE;case Dimension.SYM_P:return Dimension.P;case Dimension.SYM_L:return Dimension.L;case Dimension.SYM_A:return Dimension.A;}throw new IllegalArgumentException('Unknown dimension symbol: '+dimensionSymbol);};Object.defineProperties(Dimension,staticAccessors$14);var GeometryFilter=function GeometryFilter(){};GeometryFilter.prototype.filter=function filter(geom){};GeometryFilter.prototype.interfaces_=function interfaces_(){return [];};GeometryFilter.prototype.getClass=function getClass(){return GeometryFilter;};var CoordinateSequenceFilter=function CoordinateSequenceFilter(){};CoordinateSequenceFilter.prototype.filter=function filter(seq,i){};CoordinateSequenceFilter.prototype.isDone=function isDone(){};CoordinateSequenceFilter.prototype.isGeometryChanged=function isGeometryChanged(){};CoordinateSequenceFilter.prototype.interfaces_=function interfaces_(){return [];};CoordinateSequenceFilter.prototype.getClass=function getClass(){return CoordinateSequenceFilter;};var GeometryCollection=function(Geometry$$1){function GeometryCollection(geometries,factory){Geometry$$1.call(this,factory);this._geometries=geometries||[];if(Geometry$$1.hasNullElements(this._geometries)){throw new IllegalArgumentException('geometries must not contain null elements');}}if(Geometry$$1)GeometryCollection.__proto__=Geometry$$1;GeometryCollection.prototype=Object.create(Geometry$$1&&Geometry$$1.prototype);GeometryCollection.prototype.constructor=GeometryCollection;var staticAccessors={serialVersionUID:{configurable:true}};GeometryCollection.prototype.computeEnvelopeInternal=function computeEnvelopeInternal(){var this$1=this;var envelope=new Envelope();for(var i=0;i<this._geometries.length;i++){envelope.expandToInclude(this$1._geometries[i].getEnvelopeInternal());}return envelope;};GeometryCollection.prototype.getGeometryN=function getGeometryN(n){return this._geometries[n];};GeometryCollection.prototype.getSortIndex=function getSortIndex(){return Geometry$$1.SORTINDEX_GEOMETRYCOLLECTION;};GeometryCollection.prototype.getCoordinates=function getCoordinates(){var this$1=this;var coordinates=new Array(this.getNumPoints()).fill(null);var k=-1;for(var i=0;i<this._geometries.length;i++){var childCoordinates=this$1._geometries[i].getCoordinates();for(var j=0;j<childCoordinates.length;j++){k++;coordinates[k]=childCoordinates[j];}}return coordinates;};GeometryCollection.prototype.getArea=function getArea(){var this$1=this;var area=0.0;for(var i=0;i<this._geometries.length;i++){area+=this$1._geometries[i].getArea();}return area;};GeometryCollection.prototype.equalsExact=function equalsExact(){var this$1=this;if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}var otherCollection=other;if(this._geometries.length!==otherCollection._geometries.length){return false;}for(var i=0;i<this._geometries.length;i++){if(!this$1._geometries[i].equalsExact(otherCollection._geometries[i],tolerance)){return false;}}return true;}else {return Geometry$$1.prototype.equalsExact.apply(this,arguments);}};GeometryCollection.prototype.normalize=function normalize(){var this$1=this;for(var i=0;i<this._geometries.length;i++){this$1._geometries[i].normalize();}Arrays.sort(this._geometries);};GeometryCollection.prototype.getCoordinate=function getCoordinate(){if(this.isEmpty()){return null;}return this._geometries[0].getCoordinate();};GeometryCollection.prototype.getBoundaryDimension=function getBoundaryDimension(){var this$1=this;var dimension=Dimension.FALSE;for(var i=0;i<this._geometries.length;i++){dimension=Math.max(dimension,this$1._geometries[i].getBoundaryDimension());}return dimension;};GeometryCollection.prototype.getDimension=function getDimension(){var this$1=this;var dimension=Dimension.FALSE;for(var i=0;i<this._geometries.length;i++){dimension=Math.max(dimension,this$1._geometries[i].getDimension());}return dimension;};GeometryCollection.prototype.getLength=function getLength(){var this$1=this;var sum=0.0;for(var i=0;i<this._geometries.length;i++){sum+=this$1._geometries[i].getLength();}return sum;};GeometryCollection.prototype.getNumPoints=function getNumPoints(){var this$1=this;var numPoints=0;for(var i=0;i<this._geometries.length;i++){numPoints+=this$1._geometries[i].getNumPoints();}return numPoints;};GeometryCollection.prototype.getNumGeometries=function getNumGeometries(){return this._geometries.length;};GeometryCollection.prototype.reverse=function reverse(){var this$1=this;var n=this._geometries.length;var revGeoms=new Array(n).fill(null);for(var i=0;i<this._geometries.length;i++){revGeoms[i]=this$1._geometries[i].reverse();}return this.getFactory().createGeometryCollection(revGeoms);};GeometryCollection.prototype.compareToSameClass=function compareToSameClass(){var this$1=this;if(arguments.length===1){var o=arguments[0];var theseElements=new TreeSet(Arrays.asList(this._geometries));var otherElements=new TreeSet(Arrays.asList(o._geometries));return this.compare(theseElements,otherElements);}else if(arguments.length===2){var o$1=arguments[0];var comp=arguments[1];var gc=o$1;var n1=this.getNumGeometries();var n2=gc.getNumGeometries();var i=0;while(i<n1&&i<n2){var thisGeom=this$1.getGeometryN(i);var otherGeom=gc.getGeometryN(i);var holeComp=thisGeom.compareToSameClass(otherGeom,comp);if(holeComp!==0){return holeComp;}i++;}if(i<n1){return 1;}if(i<n2){return -1;}return 0;}};GeometryCollection.prototype.apply=function apply(){var this$1=this;if(hasInterface(arguments[0],CoordinateFilter)){var filter=arguments[0];for(var i=0;i<this._geometries.length;i++){this$1._geometries[i].apply(filter);}}else if(hasInterface(arguments[0],CoordinateSequenceFilter)){var filter$1=arguments[0];if(this._geometries.length===0){return null;}for(var i$1=0;i$1<this._geometries.length;i$1++){this$1._geometries[i$1].apply(filter$1);if(filter$1.isDone()){break;}}if(filter$1.isGeometryChanged()){this.geometryChanged();}}else if(hasInterface(arguments[0],GeometryFilter)){var filter$2=arguments[0];filter$2.filter(this);for(var i$2=0;i$2<this._geometries.length;i$2++){this$1._geometries[i$2].apply(filter$2);}}else if(hasInterface(arguments[0],GeometryComponentFilter)){var filter$3=arguments[0];filter$3.filter(this);for(var i$3=0;i$3<this._geometries.length;i$3++){this$1._geometries[i$3].apply(filter$3);}}};GeometryCollection.prototype.getBoundary=function getBoundary(){this.checkNotGeometryCollection(this);Assert.shouldNeverReachHere();return null;};GeometryCollection.prototype.clone=function clone(){var this$1=this;var gc=Geometry$$1.prototype.clone.call(this);gc._geometries=new Array(this._geometries.length).fill(null);for(var i=0;i<this._geometries.length;i++){gc._geometries[i]=this$1._geometries[i].clone();}return gc;};GeometryCollection.prototype.getGeometryType=function getGeometryType(){return 'GeometryCollection';};GeometryCollection.prototype.copy=function copy(){var this$1=this;var geometries=new Array(this._geometries.length).fill(null);for(var i=0;i<geometries.length;i++){geometries[i]=this$1._geometries[i].copy();}return new GeometryCollection(geometries,this._factory);};GeometryCollection.prototype.isEmpty=function isEmpty(){var this$1=this;for(var i=0;i<this._geometries.length;i++){if(!this$1._geometries[i].isEmpty()){return false;}}return true;};GeometryCollection.prototype.interfaces_=function interfaces_(){return [];};GeometryCollection.prototype.getClass=function getClass(){return GeometryCollection;};staticAccessors.serialVersionUID.get=function(){return -5694727726395021467;};Object.defineProperties(GeometryCollection,staticAccessors);return GeometryCollection;}(Geometry);var MultiLineString=function(GeometryCollection$$1){function MultiLineString(){GeometryCollection$$1.apply(this,arguments);}if(GeometryCollection$$1)MultiLineString.__proto__=GeometryCollection$$1;MultiLineString.prototype=Object.create(GeometryCollection$$1&&GeometryCollection$$1.prototype);MultiLineString.prototype.constructor=MultiLineString;var staticAccessors={serialVersionUID:{configurable:true}};MultiLineString.prototype.getSortIndex=function getSortIndex(){return Geometry.SORTINDEX_MULTILINESTRING;};MultiLineString.prototype.equalsExact=function equalsExact(){if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}return GeometryCollection$$1.prototype.equalsExact.call(this,other,tolerance);}else {return GeometryCollection$$1.prototype.equalsExact.apply(this,arguments);}};MultiLineString.prototype.getBoundaryDimension=function getBoundaryDimension(){if(this.isClosed()){return Dimension.FALSE;}return 0;};MultiLineString.prototype.isClosed=function isClosed(){var this$1=this;if(this.isEmpty()){return false;}for(var i=0;i<this._geometries.length;i++){if(!this$1._geometries[i].isClosed()){return false;}}return true;};MultiLineString.prototype.getDimension=function getDimension(){return 1;};MultiLineString.prototype.reverse=function reverse(){var this$1=this;var nLines=this._geometries.length;var revLines=new Array(nLines).fill(null);for(var i=0;i<this._geometries.length;i++){revLines[nLines-1-i]=this$1._geometries[i].reverse();}return this.getFactory().createMultiLineString(revLines);};MultiLineString.prototype.getBoundary=function getBoundary(){return new BoundaryOp(this).getBoundary();};MultiLineString.prototype.getGeometryType=function getGeometryType(){return 'MultiLineString';};MultiLineString.prototype.copy=function copy(){var this$1=this;var lineStrings=new Array(this._geometries.length).fill(null);for(var i=0;i<lineStrings.length;i++){lineStrings[i]=this$1._geometries[i].copy();}return new MultiLineString(lineStrings,this._factory);};MultiLineString.prototype.interfaces_=function interfaces_(){return [Lineal];};MultiLineString.prototype.getClass=function getClass(){return MultiLineString;};staticAccessors.serialVersionUID.get=function(){return 8166665132445433741;};Object.defineProperties(MultiLineString,staticAccessors);return MultiLineString;}(GeometryCollection);var BoundaryOp=function BoundaryOp(){this._geom=null;this._geomFact=null;this._bnRule=null;this._endpointMap=null;if(arguments.length===1){var geom=arguments[0];var bnRule=BoundaryNodeRule.MOD2_BOUNDARY_RULE;this._geom=geom;this._geomFact=geom.getFactory();this._bnRule=bnRule;}else if(arguments.length===2){var geom$1=arguments[0];var bnRule$1=arguments[1];this._geom=geom$1;this._geomFact=geom$1.getFactory();this._bnRule=bnRule$1;}};BoundaryOp.prototype.boundaryMultiLineString=function boundaryMultiLineString(mLine){if(this._geom.isEmpty()){return this.getEmptyMultiPoint();}var bdyPts=this.computeBoundaryCoordinates(mLine);if(bdyPts.length===1){return this._geomFact.createPoint(bdyPts[0]);}return this._geomFact.createMultiPointFromCoords(bdyPts);};BoundaryOp.prototype.getBoundary=function getBoundary(){if(this._geom instanceof LineString){return this.boundaryLineString(this._geom);}if(this._geom instanceof MultiLineString){return this.boundaryMultiLineString(this._geom);}return this._geom.getBoundary();};BoundaryOp.prototype.boundaryLineString=function boundaryLineString(line){if(this._geom.isEmpty()){return this.getEmptyMultiPoint();}if(line.isClosed()){var closedEndpointOnBoundary=this._bnRule.isInBoundary(2);if(closedEndpointOnBoundary){return line.getStartPoint();}else {return this._geomFact.createMultiPoint();}}return this._geomFact.createMultiPoint([line.getStartPoint(),line.getEndPoint()]);};BoundaryOp.prototype.getEmptyMultiPoint=function getEmptyMultiPoint(){return this._geomFact.createMultiPoint();};BoundaryOp.prototype.computeBoundaryCoordinates=function computeBoundaryCoordinates(mLine){var this$1=this;var bdyPts=new ArrayList();this._endpointMap=new TreeMap();for(var i=0;i<mLine.getNumGeometries();i++){var line=mLine.getGeometryN(i);if(line.getNumPoints()===0){continue;}this$1.addEndpoint(line.getCoordinateN(0));this$1.addEndpoint(line.getCoordinateN(line.getNumPoints()-1));}for(var it=this._endpointMap.entrySet().iterator();it.hasNext();){var entry=it.next();var counter=entry.getValue();var valence=counter.count;if(this$1._bnRule.isInBoundary(valence)){bdyPts.add(entry.getKey());}}return CoordinateArrays.toCoordinateArray(bdyPts);};BoundaryOp.prototype.addEndpoint=function addEndpoint(pt){var counter=this._endpointMap.get(pt);if(counter===null){counter=new Counter();this._endpointMap.put(pt,counter);}counter.count++;};BoundaryOp.prototype.interfaces_=function interfaces_(){return [];};BoundaryOp.prototype.getClass=function getClass(){return BoundaryOp;};BoundaryOp.getBoundary=function getBoundary(){if(arguments.length===1){var g=arguments[0];var bop=new BoundaryOp(g);return bop.getBoundary();}else if(arguments.length===2){var g$1=arguments[0];var bnRule=arguments[1];var bop$1=new BoundaryOp(g$1,bnRule);return bop$1.getBoundary();}};var Counter=function Counter(){this.count=null;};Counter.prototype.interfaces_=function interfaces_(){return [];};Counter.prototype.getClass=function getClass(){return Counter;};// boundary
  function PrintStream(){}function StringReader(){}var DecimalFormat=function DecimalFormat(){};function ByteArrayOutputStream(){}function IOException(){}function LineNumberReader(){}var StringUtil=function StringUtil(){};var staticAccessors$15={NEWLINE:{configurable:true},SIMPLE_ORDINATE_FORMAT:{configurable:true}};StringUtil.prototype.interfaces_=function interfaces_(){return [];};StringUtil.prototype.getClass=function getClass(){return StringUtil;};StringUtil.chars=function chars(c,n){var ch=new Array(n).fill(null);for(var i=0;i<n;i++){ch[i]=c;}return String(ch);};StringUtil.getStackTrace=function getStackTrace(){if(arguments.length===1){var t=arguments[0];var os=new ByteArrayOutputStream();var ps=new PrintStream(os);t.printStackTrace(ps);return os.toString();}else if(arguments.length===2){var t$1=arguments[0];var depth=arguments[1];var stackTrace='';var stringReader=new StringReader(StringUtil.getStackTrace(t$1));var lineNumberReader=new LineNumberReader(stringReader);for(var i=0;i<depth;i++){try{stackTrace+=lineNumberReader.readLine()+StringUtil.NEWLINE;}catch(e){if(e instanceof IOException){Assert.shouldNeverReachHere();}else {throw e;}}finally{}}return stackTrace;}};StringUtil.split=function split(s,separator){var separatorlen=separator.length;var tokenList=new ArrayList();var tmpString=''+s;var pos=tmpString.indexOf(separator);while(pos>=0){var token=tmpString.substring(0,pos);tokenList.add(token);tmpString=tmpString.substring(pos+separatorlen);pos=tmpString.indexOf(separator);}if(tmpString.length>0){tokenList.add(tmpString);}var res=new Array(tokenList.size()).fill(null);for(var i=0;i<res.length;i++){res[i]=tokenList.get(i);}return res;};StringUtil.toString=function toString(){if(arguments.length===1){var d=arguments[0];return StringUtil.SIMPLE_ORDINATE_FORMAT.format(d);}};StringUtil.spaces=function spaces(n){return StringUtil.chars(' ',n);};staticAccessors$15.NEWLINE.get=function(){return System.getProperty('line.separator');};staticAccessors$15.SIMPLE_ORDINATE_FORMAT.get=function(){return new DecimalFormat('0.#');};Object.defineProperties(StringUtil,staticAccessors$15);var CoordinateSequences=function CoordinateSequences(){};CoordinateSequences.prototype.interfaces_=function interfaces_(){return [];};CoordinateSequences.prototype.getClass=function getClass(){return CoordinateSequences;};CoordinateSequences.copyCoord=function copyCoord(src,srcPos,dest,destPos){var minDim=Math.min(src.getDimension(),dest.getDimension());for(var dim=0;dim<minDim;dim++){dest.setOrdinate(destPos,dim,src.getOrdinate(srcPos,dim));}};CoordinateSequences.isRing=function isRing(seq){var n=seq.size();if(n===0){return true;}if(n<=3){return false;}return seq.getOrdinate(0,CoordinateSequence.X)===seq.getOrdinate(n-1,CoordinateSequence.X)&&seq.getOrdinate(0,CoordinateSequence.Y)===seq.getOrdinate(n-1,CoordinateSequence.Y);};CoordinateSequences.isEqual=function isEqual(cs1,cs2){var cs1Size=cs1.size();var cs2Size=cs2.size();if(cs1Size!==cs2Size){return false;}var dim=Math.min(cs1.getDimension(),cs2.getDimension());for(var i=0;i<cs1Size;i++){for(var d=0;d<dim;d++){var v1=cs1.getOrdinate(i,d);var v2=cs2.getOrdinate(i,d);if(cs1.getOrdinate(i,d)===cs2.getOrdinate(i,d)){continue;}if(Double.isNaN(v1)&&Double.isNaN(v2)){continue;}return false;}}return true;};CoordinateSequences.extend=function extend(fact,seq,size){var newseq=fact.create(size,seq.getDimension());var n=seq.size();CoordinateSequences.copy(seq,0,newseq,0,n);if(n>0){for(var i=n;i<size;i++){CoordinateSequences.copy(seq,n-1,newseq,i,1);}}return newseq;};CoordinateSequences.reverse=function reverse(seq){var last=seq.size()-1;var mid=Math.trunc(last/2);for(var i=0;i<=mid;i++){CoordinateSequences.swap(seq,i,last-i);}};CoordinateSequences.swap=function swap(seq,i,j){if(i===j){return null;}for(var dim=0;dim<seq.getDimension();dim++){var tmp=seq.getOrdinate(i,dim);seq.setOrdinate(i,dim,seq.getOrdinate(j,dim));seq.setOrdinate(j,dim,tmp);}};CoordinateSequences.copy=function copy(src,srcPos,dest,destPos,length){for(var i=0;i<length;i++){CoordinateSequences.copyCoord(src,srcPos+i,dest,destPos+i);}};CoordinateSequences.toString=function toString(){if(arguments.length===1){var cs=arguments[0];var size=cs.size();if(size===0){return '()';}var dim=cs.getDimension();var buf=new StringBuffer();buf.append('(');for(var i=0;i<size;i++){if(i>0){buf.append(' ');}for(var d=0;d<dim;d++){if(d>0){buf.append(',');}buf.append(StringUtil.toString(cs.getOrdinate(i,d)));}}buf.append(')');return buf.toString();}};CoordinateSequences.ensureValidRing=function ensureValidRing(fact,seq){var n=seq.size();if(n===0){return seq;}if(n<=3){return CoordinateSequences.createClosedRing(fact,seq,4);}var isClosed=seq.getOrdinate(0,CoordinateSequence.X)===seq.getOrdinate(n-1,CoordinateSequence.X)&&seq.getOrdinate(0,CoordinateSequence.Y)===seq.getOrdinate(n-1,CoordinateSequence.Y);if(isClosed){return seq;}return CoordinateSequences.createClosedRing(fact,seq,n+1);};CoordinateSequences.createClosedRing=function createClosedRing(fact,seq,size){var newseq=fact.create(size,seq.getDimension());var n=seq.size();CoordinateSequences.copy(seq,0,newseq,0,n);for(var i=n;i<size;i++){CoordinateSequences.copy(seq,0,newseq,i,1);}return newseq;};var LineString=function(Geometry$$1){function LineString(points,factory){Geometry$$1.call(this,factory);this._points=null;this.init(points);}if(Geometry$$1)LineString.__proto__=Geometry$$1;LineString.prototype=Object.create(Geometry$$1&&Geometry$$1.prototype);LineString.prototype.constructor=LineString;var staticAccessors={serialVersionUID:{configurable:true}};LineString.prototype.computeEnvelopeInternal=function computeEnvelopeInternal(){if(this.isEmpty()){return new Envelope();}return this._points.expandEnvelope(new Envelope());};LineString.prototype.isRing=function isRing(){return this.isClosed()&&this.isSimple();};LineString.prototype.getSortIndex=function getSortIndex(){return Geometry$$1.SORTINDEX_LINESTRING;};LineString.prototype.getCoordinates=function getCoordinates(){return this._points.toCoordinateArray();};LineString.prototype.equalsExact=function equalsExact(){var this$1=this;if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}var otherLineString=other;if(this._points.size()!==otherLineString._points.size()){return false;}for(var i=0;i<this._points.size();i++){if(!this$1.equal(this$1._points.getCoordinate(i),otherLineString._points.getCoordinate(i),tolerance)){return false;}}return true;}else {return Geometry$$1.prototype.equalsExact.apply(this,arguments);}};LineString.prototype.normalize=function normalize(){var this$1=this;for(var i=0;i<Math.trunc(this._points.size()/2);i++){var j=this$1._points.size()-1-i;if(!this$1._points.getCoordinate(i).equals(this$1._points.getCoordinate(j))){if(this$1._points.getCoordinate(i).compareTo(this$1._points.getCoordinate(j))>0){CoordinateSequences.reverse(this$1._points);}return null;}}};LineString.prototype.getCoordinate=function getCoordinate(){if(this.isEmpty()){return null;}return this._points.getCoordinate(0);};LineString.prototype.getBoundaryDimension=function getBoundaryDimension(){if(this.isClosed()){return Dimension.FALSE;}return 0;};LineString.prototype.isClosed=function isClosed(){if(this.isEmpty()){return false;}return this.getCoordinateN(0).equals2D(this.getCoordinateN(this.getNumPoints()-1));};LineString.prototype.getEndPoint=function getEndPoint(){if(this.isEmpty()){return null;}return this.getPointN(this.getNumPoints()-1);};LineString.prototype.getDimension=function getDimension(){return 1;};LineString.prototype.getLength=function getLength(){return CGAlgorithms.computeLength(this._points);};LineString.prototype.getNumPoints=function getNumPoints(){return this._points.size();};LineString.prototype.reverse=function reverse(){var seq=this._points.copy();CoordinateSequences.reverse(seq);var revLine=this.getFactory().createLineString(seq);return revLine;};LineString.prototype.compareToSameClass=function compareToSameClass(){var this$1=this;if(arguments.length===1){var o=arguments[0];var line=o;var i=0;var j=0;while(i<this._points.size()&&j<line._points.size()){var comparison=this$1._points.getCoordinate(i).compareTo(line._points.getCoordinate(j));if(comparison!==0){return comparison;}i++;j++;}if(i<this._points.size()){return 1;}if(j<line._points.size()){return -1;}return 0;}else if(arguments.length===2){var o$1=arguments[0];var comp=arguments[1];var line$1=o$1;return comp.compare(this._points,line$1._points);}};LineString.prototype.apply=function apply(){var this$1=this;if(hasInterface(arguments[0],CoordinateFilter)){var filter=arguments[0];for(var i=0;i<this._points.size();i++){filter.filter(this$1._points.getCoordinate(i));}}else if(hasInterface(arguments[0],CoordinateSequenceFilter)){var filter$1=arguments[0];if(this._points.size()===0){return null;}for(var i$1=0;i$1<this._points.size();i$1++){filter$1.filter(this$1._points,i$1);if(filter$1.isDone()){break;}}if(filter$1.isGeometryChanged()){this.geometryChanged();}}else if(hasInterface(arguments[0],GeometryFilter)){var filter$2=arguments[0];filter$2.filter(this);}else if(hasInterface(arguments[0],GeometryComponentFilter)){var filter$3=arguments[0];filter$3.filter(this);}};LineString.prototype.getBoundary=function getBoundary(){return new BoundaryOp(this).getBoundary();};LineString.prototype.isEquivalentClass=function isEquivalentClass(other){return other instanceof LineString;};LineString.prototype.clone=function clone(){var ls=Geometry$$1.prototype.clone.call(this);ls._points=this._points.clone();return ls;};LineString.prototype.getCoordinateN=function getCoordinateN(n){return this._points.getCoordinate(n);};LineString.prototype.getGeometryType=function getGeometryType(){return 'LineString';};LineString.prototype.copy=function copy(){return new LineString(this._points.copy(),this._factory);};LineString.prototype.getCoordinateSequence=function getCoordinateSequence(){return this._points;};LineString.prototype.isEmpty=function isEmpty(){return this._points.size()===0;};LineString.prototype.init=function init(points){if(points===null){points=this.getFactory().getCoordinateSequenceFactory().create([]);}if(points.size()===1){throw new IllegalArgumentException('Invalid number of points in LineString (found '+points.size()+' - must be 0 or >= 2)');}this._points=points;};LineString.prototype.isCoordinate=function isCoordinate(pt){var this$1=this;for(var i=0;i<this._points.size();i++){if(this$1._points.getCoordinate(i).equals(pt)){return true;}}return false;};LineString.prototype.getStartPoint=function getStartPoint(){if(this.isEmpty()){return null;}return this.getPointN(0);};LineString.prototype.getPointN=function getPointN(n){return this.getFactory().createPoint(this._points.getCoordinate(n));};LineString.prototype.interfaces_=function interfaces_(){return [Lineal];};LineString.prototype.getClass=function getClass(){return LineString;};staticAccessors.serialVersionUID.get=function(){return 3110669828065365560;};Object.defineProperties(LineString,staticAccessors);return LineString;}(Geometry);var Puntal=function Puntal(){};Puntal.prototype.interfaces_=function interfaces_(){return [];};Puntal.prototype.getClass=function getClass(){return Puntal;};var Point=function(Geometry$$1){function Point(coordinates,factory){Geometry$$1.call(this,factory);this._coordinates=coordinates||null;this.init(this._coordinates);}if(Geometry$$1)Point.__proto__=Geometry$$1;Point.prototype=Object.create(Geometry$$1&&Geometry$$1.prototype);Point.prototype.constructor=Point;var staticAccessors={serialVersionUID:{configurable:true}};Point.prototype.computeEnvelopeInternal=function computeEnvelopeInternal(){if(this.isEmpty()){return new Envelope();}var env=new Envelope();env.expandToInclude(this._coordinates.getX(0),this._coordinates.getY(0));return env;};Point.prototype.getSortIndex=function getSortIndex(){return Geometry$$1.SORTINDEX_POINT;};Point.prototype.getCoordinates=function getCoordinates(){return this.isEmpty()?[]:[this.getCoordinate()];};Point.prototype.equalsExact=function equalsExact(){if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}if(this.isEmpty()&&other.isEmpty()){return true;}if(this.isEmpty()!==other.isEmpty()){return false;}return this.equal(other.getCoordinate(),this.getCoordinate(),tolerance);}else {return Geometry$$1.prototype.equalsExact.apply(this,arguments);}};Point.prototype.normalize=function normalize(){};Point.prototype.getCoordinate=function getCoordinate(){return this._coordinates.size()!==0?this._coordinates.getCoordinate(0):null;};Point.prototype.getBoundaryDimension=function getBoundaryDimension(){return Dimension.FALSE;};Point.prototype.getDimension=function getDimension(){return 0;};Point.prototype.getNumPoints=function getNumPoints(){return this.isEmpty()?0:1;};Point.prototype.reverse=function reverse(){return this.copy();};Point.prototype.getX=function getX(){if(this.getCoordinate()===null){throw new Error('getX called on empty Point');}return this.getCoordinate().x;};Point.prototype.compareToSameClass=function compareToSameClass(){if(arguments.length===1){var other=arguments[0];var point$1=other;return this.getCoordinate().compareTo(point$1.getCoordinate());}else if(arguments.length===2){var other$1=arguments[0];var comp=arguments[1];var point=other$1;return comp.compare(this._coordinates,point._coordinates);}};Point.prototype.apply=function apply(){if(hasInterface(arguments[0],CoordinateFilter)){var filter=arguments[0];if(this.isEmpty()){return null;}filter.filter(this.getCoordinate());}else if(hasInterface(arguments[0],CoordinateSequenceFilter)){var filter$1=arguments[0];if(this.isEmpty()){return null;}filter$1.filter(this._coordinates,0);if(filter$1.isGeometryChanged()){this.geometryChanged();}}else if(hasInterface(arguments[0],GeometryFilter)){var filter$2=arguments[0];filter$2.filter(this);}else if(hasInterface(arguments[0],GeometryComponentFilter)){var filter$3=arguments[0];filter$3.filter(this);}};Point.prototype.getBoundary=function getBoundary(){return this.getFactory().createGeometryCollection(null);};Point.prototype.clone=function clone(){var p=Geometry$$1.prototype.clone.call(this);p._coordinates=this._coordinates.clone();return p;};Point.prototype.getGeometryType=function getGeometryType(){return 'Point';};Point.prototype.copy=function copy(){return new Point(this._coordinates.copy(),this._factory);};Point.prototype.getCoordinateSequence=function getCoordinateSequence(){return this._coordinates;};Point.prototype.getY=function getY(){if(this.getCoordinate()===null){throw new Error('getY called on empty Point');}return this.getCoordinate().y;};Point.prototype.isEmpty=function isEmpty(){return this._coordinates.size()===0;};Point.prototype.init=function init(coordinates){if(coordinates===null){coordinates=this.getFactory().getCoordinateSequenceFactory().create([]);}Assert.isTrue(coordinates.size()<=1);this._coordinates=coordinates;};Point.prototype.isSimple=function isSimple(){return true;};Point.prototype.interfaces_=function interfaces_(){return [Puntal];};Point.prototype.getClass=function getClass(){return Point;};staticAccessors.serialVersionUID.get=function(){return 4902022702746614570;};Object.defineProperties(Point,staticAccessors);return Point;}(Geometry);var Polygonal=function Polygonal(){};Polygonal.prototype.interfaces_=function interfaces_(){return [];};Polygonal.prototype.getClass=function getClass(){return Polygonal;};var Polygon=function(Geometry$$1){function Polygon(shell,holes,factory){Geometry$$1.call(this,factory);this._shell=null;this._holes=null;if(shell===null){shell=this.getFactory().createLinearRing();}if(holes===null){holes=[];}if(Geometry$$1.hasNullElements(holes)){throw new IllegalArgumentException('holes must not contain null elements');}if(shell.isEmpty()&&Geometry$$1.hasNonEmptyElements(holes)){throw new IllegalArgumentException('shell is empty but holes are not');}this._shell=shell;this._holes=holes;}if(Geometry$$1)Polygon.__proto__=Geometry$$1;Polygon.prototype=Object.create(Geometry$$1&&Geometry$$1.prototype);Polygon.prototype.constructor=Polygon;var staticAccessors={serialVersionUID:{configurable:true}};Polygon.prototype.computeEnvelopeInternal=function computeEnvelopeInternal(){return this._shell.getEnvelopeInternal();};Polygon.prototype.getSortIndex=function getSortIndex(){return Geometry$$1.SORTINDEX_POLYGON;};Polygon.prototype.getCoordinates=function getCoordinates(){var this$1=this;if(this.isEmpty()){return [];}var coordinates=new Array(this.getNumPoints()).fill(null);var k=-1;var shellCoordinates=this._shell.getCoordinates();for(var x=0;x<shellCoordinates.length;x++){k++;coordinates[k]=shellCoordinates[x];}for(var i=0;i<this._holes.length;i++){var childCoordinates=this$1._holes[i].getCoordinates();for(var j=0;j<childCoordinates.length;j++){k++;coordinates[k]=childCoordinates[j];}}return coordinates;};Polygon.prototype.getArea=function getArea(){var this$1=this;var area=0.0;area+=Math.abs(CGAlgorithms.signedArea(this._shell.getCoordinateSequence()));for(var i=0;i<this._holes.length;i++){area-=Math.abs(CGAlgorithms.signedArea(this$1._holes[i].getCoordinateSequence()));}return area;};Polygon.prototype.isRectangle=function isRectangle(){if(this.getNumInteriorRing()!==0){return false;}if(this._shell===null){return false;}if(this._shell.getNumPoints()!==5){return false;}var seq=this._shell.getCoordinateSequence();var env=this.getEnvelopeInternal();for(var i=0;i<5;i++){var x=seq.getX(i);if(!(x===env.getMinX()||x===env.getMaxX())){return false;}var y=seq.getY(i);if(!(y===env.getMinY()||y===env.getMaxY())){return false;}}var prevX=seq.getX(0);var prevY=seq.getY(0);for(var i$1=1;i$1<=4;i$1++){var x$1=seq.getX(i$1);var y$1=seq.getY(i$1);var xChanged=x$1!==prevX;var yChanged=y$1!==prevY;if(xChanged===yChanged){return false;}prevX=x$1;prevY=y$1;}return true;};Polygon.prototype.equalsExact=function equalsExact(){var this$1=this;if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}var otherPolygon=other;var thisShell=this._shell;var otherPolygonShell=otherPolygon._shell;if(!thisShell.equalsExact(otherPolygonShell,tolerance)){return false;}if(this._holes.length!==otherPolygon._holes.length){return false;}for(var i=0;i<this._holes.length;i++){if(!this$1._holes[i].equalsExact(otherPolygon._holes[i],tolerance)){return false;}}return true;}else {return Geometry$$1.prototype.equalsExact.apply(this,arguments);}};Polygon.prototype.normalize=function normalize(){var this$1=this;if(arguments.length===0){this.normalize(this._shell,true);for(var i=0;i<this._holes.length;i++){this$1.normalize(this$1._holes[i],false);}Arrays.sort(this._holes);}else if(arguments.length===2){var ring=arguments[0];var clockwise=arguments[1];if(ring.isEmpty()){return null;}var uniqueCoordinates=new Array(ring.getCoordinates().length-1).fill(null);System.arraycopy(ring.getCoordinates(),0,uniqueCoordinates,0,uniqueCoordinates.length);var minCoordinate=CoordinateArrays.minCoordinate(ring.getCoordinates());CoordinateArrays.scroll(uniqueCoordinates,minCoordinate);System.arraycopy(uniqueCoordinates,0,ring.getCoordinates(),0,uniqueCoordinates.length);ring.getCoordinates()[uniqueCoordinates.length]=uniqueCoordinates[0];if(CGAlgorithms.isCCW(ring.getCoordinates())===clockwise){CoordinateArrays.reverse(ring.getCoordinates());}}};Polygon.prototype.getCoordinate=function getCoordinate(){return this._shell.getCoordinate();};Polygon.prototype.getNumInteriorRing=function getNumInteriorRing(){return this._holes.length;};Polygon.prototype.getBoundaryDimension=function getBoundaryDimension(){return 1;};Polygon.prototype.getDimension=function getDimension(){return 2;};Polygon.prototype.getLength=function getLength(){var this$1=this;var len=0.0;len+=this._shell.getLength();for(var i=0;i<this._holes.length;i++){len+=this$1._holes[i].getLength();}return len;};Polygon.prototype.getNumPoints=function getNumPoints(){var this$1=this;var numPoints=this._shell.getNumPoints();for(var i=0;i<this._holes.length;i++){numPoints+=this$1._holes[i].getNumPoints();}return numPoints;};Polygon.prototype.reverse=function reverse(){var this$1=this;var poly=this.copy();poly._shell=this._shell.copy().reverse();poly._holes=new Array(this._holes.length).fill(null);for(var i=0;i<this._holes.length;i++){poly._holes[i]=this$1._holes[i].copy().reverse();}return poly;};Polygon.prototype.convexHull=function convexHull(){return this.getExteriorRing().convexHull();};Polygon.prototype.compareToSameClass=function compareToSameClass(){var this$1=this;if(arguments.length===1){var o=arguments[0];var thisShell=this._shell;var otherShell=o._shell;return thisShell.compareToSameClass(otherShell);}else if(arguments.length===2){var o$1=arguments[0];var comp=arguments[1];var poly=o$1;var thisShell$1=this._shell;var otherShell$1=poly._shell;var shellComp=thisShell$1.compareToSameClass(otherShell$1,comp);if(shellComp!==0){return shellComp;}var nHole1=this.getNumInteriorRing();var nHole2=poly.getNumInteriorRing();var i=0;while(i<nHole1&&i<nHole2){var thisHole=this$1.getInteriorRingN(i);var otherHole=poly.getInteriorRingN(i);var holeComp=thisHole.compareToSameClass(otherHole,comp);if(holeComp!==0){return holeComp;}i++;}if(i<nHole1){return 1;}if(i<nHole2){return -1;}return 0;}};Polygon.prototype.apply=function apply(filter){var this$1=this;if(hasInterface(filter,CoordinateFilter)){this._shell.apply(filter);for(var i$1=0;i$1<this._holes.length;i$1++){this$1._holes[i$1].apply(filter);}}else if(hasInterface(filter,CoordinateSequenceFilter)){this._shell.apply(filter);if(!filter.isDone()){for(var i$2=0;i$2<this._holes.length;i$2++){this$1._holes[i$2].apply(filter);if(filter.isDone()){break;}}}if(filter.isGeometryChanged()){this.geometryChanged();}}else if(hasInterface(filter,GeometryFilter)){filter.filter(this);}else if(hasInterface(filter,GeometryComponentFilter)){filter.filter(this);this._shell.apply(filter);for(var i=0;i<this._holes.length;i++){this$1._holes[i].apply(filter);}}};Polygon.prototype.getBoundary=function getBoundary(){var this$1=this;if(this.isEmpty()){return this.getFactory().createMultiLineString();}var rings=new Array(this._holes.length+1).fill(null);rings[0]=this._shell;for(var i=0;i<this._holes.length;i++){rings[i+1]=this$1._holes[i];}if(rings.length<=1){return this.getFactory().createLinearRing(rings[0].getCoordinateSequence());}return this.getFactory().createMultiLineString(rings);};Polygon.prototype.clone=function clone(){var this$1=this;var poly=Geometry$$1.prototype.clone.call(this);poly._shell=this._shell.clone();poly._holes=new Array(this._holes.length).fill(null);for(var i=0;i<this._holes.length;i++){poly._holes[i]=this$1._holes[i].clone();}return poly;};Polygon.prototype.getGeometryType=function getGeometryType(){return 'Polygon';};Polygon.prototype.copy=function copy(){var this$1=this;var shell=this._shell.copy();var holes=new Array(this._holes.length).fill(null);for(var i=0;i<holes.length;i++){holes[i]=this$1._holes[i].copy();}return new Polygon(shell,holes,this._factory);};Polygon.prototype.getExteriorRing=function getExteriorRing(){return this._shell;};Polygon.prototype.isEmpty=function isEmpty(){return this._shell.isEmpty();};Polygon.prototype.getInteriorRingN=function getInteriorRingN(n){return this._holes[n];};Polygon.prototype.interfaces_=function interfaces_(){return [Polygonal];};Polygon.prototype.getClass=function getClass(){return Polygon;};staticAccessors.serialVersionUID.get=function(){return -3494792200821764533;};Object.defineProperties(Polygon,staticAccessors);return Polygon;}(Geometry);var MultiPoint=function(GeometryCollection$$1){function MultiPoint(){GeometryCollection$$1.apply(this,arguments);}if(GeometryCollection$$1)MultiPoint.__proto__=GeometryCollection$$1;MultiPoint.prototype=Object.create(GeometryCollection$$1&&GeometryCollection$$1.prototype);MultiPoint.prototype.constructor=MultiPoint;var staticAccessors={serialVersionUID:{configurable:true}};MultiPoint.prototype.getSortIndex=function getSortIndex(){return Geometry.SORTINDEX_MULTIPOINT;};MultiPoint.prototype.isValid=function isValid(){return true;};MultiPoint.prototype.equalsExact=function equalsExact(){if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}return GeometryCollection$$1.prototype.equalsExact.call(this,other,tolerance);}else {return GeometryCollection$$1.prototype.equalsExact.apply(this,arguments);}};MultiPoint.prototype.getCoordinate=function getCoordinate(){if(arguments.length===1){var n=arguments[0];return this._geometries[n].getCoordinate();}else {return GeometryCollection$$1.prototype.getCoordinate.apply(this,arguments);}};MultiPoint.prototype.getBoundaryDimension=function getBoundaryDimension(){return Dimension.FALSE;};MultiPoint.prototype.getDimension=function getDimension(){return 0;};MultiPoint.prototype.getBoundary=function getBoundary(){return this.getFactory().createGeometryCollection(null);};MultiPoint.prototype.getGeometryType=function getGeometryType(){return 'MultiPoint';};MultiPoint.prototype.copy=function copy(){var this$1=this;var points=new Array(this._geometries.length).fill(null);for(var i=0;i<points.length;i++){points[i]=this$1._geometries[i].copy();}return new MultiPoint(points,this._factory);};MultiPoint.prototype.interfaces_=function interfaces_(){return [Puntal];};MultiPoint.prototype.getClass=function getClass(){return MultiPoint;};staticAccessors.serialVersionUID.get=function(){return -8048474874175355449;};Object.defineProperties(MultiPoint,staticAccessors);return MultiPoint;}(GeometryCollection);var LinearRing=function(LineString$$1){function LinearRing(points,factory){if(points instanceof Coordinate&&factory instanceof GeometryFactory){points=factory.getCoordinateSequenceFactory().create(points);}LineString$$1.call(this,points,factory);this.validateConstruction();}if(LineString$$1)LinearRing.__proto__=LineString$$1;LinearRing.prototype=Object.create(LineString$$1&&LineString$$1.prototype);LinearRing.prototype.constructor=LinearRing;var staticAccessors={MINIMUM_VALID_SIZE:{configurable:true},serialVersionUID:{configurable:true}};LinearRing.prototype.getSortIndex=function getSortIndex(){return Geometry.SORTINDEX_LINEARRING;};LinearRing.prototype.getBoundaryDimension=function getBoundaryDimension(){return Dimension.FALSE;};LinearRing.prototype.isClosed=function isClosed(){if(this.isEmpty()){return true;}return LineString$$1.prototype.isClosed.call(this);};LinearRing.prototype.reverse=function reverse(){var seq=this._points.copy();CoordinateSequences.reverse(seq);var rev=this.getFactory().createLinearRing(seq);return rev;};LinearRing.prototype.validateConstruction=function validateConstruction(){if(!this.isEmpty()&&!LineString$$1.prototype.isClosed.call(this)){throw new IllegalArgumentException('Points of LinearRing do not form a closed linestring');}if(this.getCoordinateSequence().size()>=1&&this.getCoordinateSequence().size()<LinearRing.MINIMUM_VALID_SIZE){throw new IllegalArgumentException('Invalid number of points in LinearRing (found '+this.getCoordinateSequence().size()+' - must be 0 or >= 4)');}};LinearRing.prototype.getGeometryType=function getGeometryType(){return 'LinearRing';};LinearRing.prototype.copy=function copy(){return new LinearRing(this._points.copy(),this._factory);};LinearRing.prototype.interfaces_=function interfaces_(){return [];};LinearRing.prototype.getClass=function getClass(){return LinearRing;};staticAccessors.MINIMUM_VALID_SIZE.get=function(){return 4;};staticAccessors.serialVersionUID.get=function(){return -4261142084085851829;};Object.defineProperties(LinearRing,staticAccessors);return LinearRing;}(LineString);var MultiPolygon=function(GeometryCollection$$1){function MultiPolygon(){GeometryCollection$$1.apply(this,arguments);}if(GeometryCollection$$1)MultiPolygon.__proto__=GeometryCollection$$1;MultiPolygon.prototype=Object.create(GeometryCollection$$1&&GeometryCollection$$1.prototype);MultiPolygon.prototype.constructor=MultiPolygon;var staticAccessors={serialVersionUID:{configurable:true}};MultiPolygon.prototype.getSortIndex=function getSortIndex(){return Geometry.SORTINDEX_MULTIPOLYGON;};MultiPolygon.prototype.equalsExact=function equalsExact(){if(arguments.length===2){var other=arguments[0];var tolerance=arguments[1];if(!this.isEquivalentClass(other)){return false;}return GeometryCollection$$1.prototype.equalsExact.call(this,other,tolerance);}else {return GeometryCollection$$1.prototype.equalsExact.apply(this,arguments);}};MultiPolygon.prototype.getBoundaryDimension=function getBoundaryDimension(){return 1;};MultiPolygon.prototype.getDimension=function getDimension(){return 2;};MultiPolygon.prototype.reverse=function reverse(){var this$1=this;var n=this._geometries.length;var revGeoms=new Array(n).fill(null);for(var i=0;i<this._geometries.length;i++){revGeoms[i]=this$1._geometries[i].reverse();}return this.getFactory().createMultiPolygon(revGeoms);};MultiPolygon.prototype.getBoundary=function getBoundary(){var this$1=this;if(this.isEmpty()){return this.getFactory().createMultiLineString();}var allRings=new ArrayList();for(var i=0;i<this._geometries.length;i++){var polygon=this$1._geometries[i];var rings=polygon.getBoundary();for(var j=0;j<rings.getNumGeometries();j++){allRings.add(rings.getGeometryN(j));}}var allRingsArray=new Array(allRings.size()).fill(null);return this.getFactory().createMultiLineString(allRings.toArray(allRingsArray));};MultiPolygon.prototype.getGeometryType=function getGeometryType(){return 'MultiPolygon';};MultiPolygon.prototype.copy=function copy(){var this$1=this;var polygons=new Array(this._geometries.length).fill(null);for(var i=0;i<polygons.length;i++){polygons[i]=this$1._geometries[i].copy();}return new MultiPolygon(polygons,this._factory);};MultiPolygon.prototype.interfaces_=function interfaces_(){return [Polygonal];};MultiPolygon.prototype.getClass=function getClass(){return MultiPolygon;};staticAccessors.serialVersionUID.get=function(){return -551033529766975875;};Object.defineProperties(MultiPolygon,staticAccessors);return MultiPolygon;}(GeometryCollection);var GeometryEditor=function GeometryEditor(factory){this._factory=factory||null;this._isUserDataCopied=false;};var staticAccessors$16={NoOpGeometryOperation:{configurable:true},CoordinateOperation:{configurable:true},CoordinateSequenceOperation:{configurable:true}};GeometryEditor.prototype.setCopyUserData=function setCopyUserData(isUserDataCopied){this._isUserDataCopied=isUserDataCopied;};GeometryEditor.prototype.edit=function edit(geometry,operation){if(geometry===null){return null;}var result=this.editInternal(geometry,operation);if(this._isUserDataCopied){result.setUserData(geometry.getUserData());}return result;};GeometryEditor.prototype.editInternal=function editInternal(geometry,operation){if(this._factory===null){this._factory=geometry.getFactory();}if(geometry instanceof GeometryCollection){return this.editGeometryCollection(geometry,operation);}if(geometry instanceof Polygon){return this.editPolygon(geometry,operation);}if(geometry instanceof Point){return operation.edit(geometry,this._factory);}if(geometry instanceof LineString){return operation.edit(geometry,this._factory);}Assert.shouldNeverReachHere('Unsupported Geometry class: '+geometry.getClass().getName());return null;};GeometryEditor.prototype.editGeometryCollection=function editGeometryCollection(collection,operation){var this$1=this;var collectionForType=operation.edit(collection,this._factory);var geometries=new ArrayList();for(var i=0;i<collectionForType.getNumGeometries();i++){var geometry=this$1.edit(collectionForType.getGeometryN(i),operation);if(geometry===null||geometry.isEmpty()){continue;}geometries.add(geometry);}if(collectionForType.getClass()===MultiPoint){return this._factory.createMultiPoint(geometries.toArray([]));}if(collectionForType.getClass()===MultiLineString){return this._factory.createMultiLineString(geometries.toArray([]));}if(collectionForType.getClass()===MultiPolygon){return this._factory.createMultiPolygon(geometries.toArray([]));}return this._factory.createGeometryCollection(geometries.toArray([]));};GeometryEditor.prototype.editPolygon=function editPolygon(polygon,operation){var this$1=this;var newPolygon=operation.edit(polygon,this._factory);if(newPolygon===null){newPolygon=this._factory.createPolygon(null);}if(newPolygon.isEmpty()){return newPolygon;}var shell=this.edit(newPolygon.getExteriorRing(),operation);if(shell===null||shell.isEmpty()){return this._factory.createPolygon();}var holes=new ArrayList();for(var i=0;i<newPolygon.getNumInteriorRing();i++){var hole=this$1.edit(newPolygon.getInteriorRingN(i),operation);if(hole===null||hole.isEmpty()){continue;}holes.add(hole);}return this._factory.createPolygon(shell,holes.toArray([]));};GeometryEditor.prototype.interfaces_=function interfaces_(){return [];};GeometryEditor.prototype.getClass=function getClass(){return GeometryEditor;};GeometryEditor.GeometryEditorOperation=function GeometryEditorOperation(){};staticAccessors$16.NoOpGeometryOperation.get=function(){return NoOpGeometryOperation;};staticAccessors$16.CoordinateOperation.get=function(){return CoordinateOperation;};staticAccessors$16.CoordinateSequenceOperation.get=function(){return CoordinateSequenceOperation;};Object.defineProperties(GeometryEditor,staticAccessors$16);var NoOpGeometryOperation=function NoOpGeometryOperation(){};NoOpGeometryOperation.prototype.edit=function edit(geometry,factory){return geometry;};NoOpGeometryOperation.prototype.interfaces_=function interfaces_(){return [GeometryEditor.GeometryEditorOperation];};NoOpGeometryOperation.prototype.getClass=function getClass(){return NoOpGeometryOperation;};var CoordinateOperation=function CoordinateOperation(){};CoordinateOperation.prototype.edit=function edit(geometry,factory){var coords=this.editCoordinates(geometry.getCoordinates(),geometry);if(coords===null){return geometry;}if(geometry instanceof LinearRing){return factory.createLinearRing(coords);}if(geometry instanceof LineString){return factory.createLineString(coords);}if(geometry instanceof Point){if(coords.length>0){return factory.createPoint(coords[0]);}else {return factory.createPoint();}}return geometry;};CoordinateOperation.prototype.interfaces_=function interfaces_(){return [GeometryEditor.GeometryEditorOperation];};CoordinateOperation.prototype.getClass=function getClass(){return CoordinateOperation;};var CoordinateSequenceOperation=function CoordinateSequenceOperation(){};CoordinateSequenceOperation.prototype.edit=function edit(geometry,factory){if(geometry instanceof LinearRing){return factory.createLinearRing(this.edit(geometry.getCoordinateSequence(),geometry));}if(geometry instanceof LineString){return factory.createLineString(this.edit(geometry.getCoordinateSequence(),geometry));}if(geometry instanceof Point){return factory.createPoint(this.edit(geometry.getCoordinateSequence(),geometry));}return geometry;};CoordinateSequenceOperation.prototype.interfaces_=function interfaces_(){return [GeometryEditor.GeometryEditorOperation];};CoordinateSequenceOperation.prototype.getClass=function getClass(){return CoordinateSequenceOperation;};var CoordinateArraySequence=function CoordinateArraySequence(){var this$1=this;this._dimension=3;this._coordinates=null;if(arguments.length===1){if(arguments[0]instanceof Array){this._coordinates=arguments[0];this._dimension=3;}else if(Number.isInteger(arguments[0])){var size=arguments[0];this._coordinates=new Array(size).fill(null);for(var i=0;i<size;i++){this$1._coordinates[i]=new Coordinate();}}else if(hasInterface(arguments[0],CoordinateSequence)){var coordSeq=arguments[0];if(coordSeq===null){this._coordinates=new Array(0).fill(null);return null;}this._dimension=coordSeq.getDimension();this._coordinates=new Array(coordSeq.size()).fill(null);for(var i$1=0;i$1<this._coordinates.length;i$1++){this$1._coordinates[i$1]=coordSeq.getCoordinateCopy(i$1);}}}else if(arguments.length===2){if(arguments[0]instanceof Array&&Number.isInteger(arguments[1])){var coordinates=arguments[0];var dimension=arguments[1];this._coordinates=coordinates;this._dimension=dimension;if(coordinates===null){this._coordinates=new Array(0).fill(null);}}else if(Number.isInteger(arguments[0])&&Number.isInteger(arguments[1])){var size$1=arguments[0];var dimension$1=arguments[1];this._coordinates=new Array(size$1).fill(null);this._dimension=dimension$1;for(var i$2=0;i$2<size$1;i$2++){this$1._coordinates[i$2]=new Coordinate();}}}};var staticAccessors$18={serialVersionUID:{configurable:true}};CoordinateArraySequence.prototype.setOrdinate=function setOrdinate(index,ordinateIndex,value){switch(ordinateIndex){case CoordinateSequence.X:this._coordinates[index].x=value;break;case CoordinateSequence.Y:this._coordinates[index].y=value;break;case CoordinateSequence.Z:this._coordinates[index].z=value;break;default:throw new IllegalArgumentException('invalid ordinateIndex');}};CoordinateArraySequence.prototype.size=function size(){return this._coordinates.length;};CoordinateArraySequence.prototype.getOrdinate=function getOrdinate(index,ordinateIndex){switch(ordinateIndex){case CoordinateSequence.X:return this._coordinates[index].x;case CoordinateSequence.Y:return this._coordinates[index].y;case CoordinateSequence.Z:return this._coordinates[index].z;}return Double.NaN;};CoordinateArraySequence.prototype.getCoordinate=function getCoordinate(){if(arguments.length===1){var i=arguments[0];return this._coordinates[i];}else if(arguments.length===2){var index=arguments[0];var coord=arguments[1];coord.x=this._coordinates[index].x;coord.y=this._coordinates[index].y;coord.z=this._coordinates[index].z;}};CoordinateArraySequence.prototype.getCoordinateCopy=function getCoordinateCopy(i){return new Coordinate(this._coordinates[i]);};CoordinateArraySequence.prototype.getDimension=function getDimension(){return this._dimension;};CoordinateArraySequence.prototype.getX=function getX(index){return this._coordinates[index].x;};CoordinateArraySequence.prototype.clone=function clone(){var this$1=this;var cloneCoordinates=new Array(this.size()).fill(null);for(var i=0;i<this._coordinates.length;i++){cloneCoordinates[i]=this$1._coordinates[i].clone();}return new CoordinateArraySequence(cloneCoordinates,this._dimension);};CoordinateArraySequence.prototype.expandEnvelope=function expandEnvelope(env){var this$1=this;for(var i=0;i<this._coordinates.length;i++){env.expandToInclude(this$1._coordinates[i]);}return env;};CoordinateArraySequence.prototype.copy=function copy(){var this$1=this;var cloneCoordinates=new Array(this.size()).fill(null);for(var i=0;i<this._coordinates.length;i++){cloneCoordinates[i]=this$1._coordinates[i].copy();}return new CoordinateArraySequence(cloneCoordinates,this._dimension);};CoordinateArraySequence.prototype.toString=function toString(){var this$1=this;if(this._coordinates.length>0){var strBuf=new StringBuffer(17*this._coordinates.length);strBuf.append('(');strBuf.append(this._coordinates[0]);for(var i=1;i<this._coordinates.length;i++){strBuf.append(', ');strBuf.append(this$1._coordinates[i]);}strBuf.append(')');return strBuf.toString();}else {return '()';}};CoordinateArraySequence.prototype.getY=function getY(index){return this._coordinates[index].y;};CoordinateArraySequence.prototype.toCoordinateArray=function toCoordinateArray(){return this._coordinates;};CoordinateArraySequence.prototype.interfaces_=function interfaces_(){return [CoordinateSequence,Serializable];};CoordinateArraySequence.prototype.getClass=function getClass(){return CoordinateArraySequence;};staticAccessors$18.serialVersionUID.get=function(){return -915438501601840650;};Object.defineProperties(CoordinateArraySequence,staticAccessors$18);var CoordinateArraySequenceFactory=function CoordinateArraySequenceFactory(){};var staticAccessors$17={serialVersionUID:{configurable:true},instanceObject:{configurable:true}};CoordinateArraySequenceFactory.prototype.readResolve=function readResolve(){return CoordinateArraySequenceFactory.instance();};CoordinateArraySequenceFactory.prototype.create=function create(){if(arguments.length===1){if(arguments[0]instanceof Array){var coordinates=arguments[0];return new CoordinateArraySequence(coordinates);}else if(hasInterface(arguments[0],CoordinateSequence)){var coordSeq=arguments[0];return new CoordinateArraySequence(coordSeq);}}else if(arguments.length===2){var size=arguments[0];var dimension=arguments[1];if(dimension>3){dimension=3;}if(dimension<2){return new CoordinateArraySequence(size);}return new CoordinateArraySequence(size,dimension);}};CoordinateArraySequenceFactory.prototype.interfaces_=function interfaces_(){return [CoordinateSequenceFactory,Serializable];};CoordinateArraySequenceFactory.prototype.getClass=function getClass(){return CoordinateArraySequenceFactory;};CoordinateArraySequenceFactory.instance=function instance(){return CoordinateArraySequenceFactory.instanceObject;};staticAccessors$17.serialVersionUID.get=function(){return -4099577099607551657;};staticAccessors$17.instanceObject.get=function(){return new CoordinateArraySequenceFactory();};Object.defineProperties(CoordinateArraySequenceFactory,staticAccessors$17);/**
   * @see http://download.oracle.com/javase/6/docs/api/java/util/HashMap.html
   *
   * @extends {javascript.util.Map}
   * @constructor
   * @private
   */var HashMap=function(MapInterface){function HashMap(){MapInterface.call(this);this.map_=new Map();}if(MapInterface)HashMap.__proto__=MapInterface;HashMap.prototype=Object.create(MapInterface&&MapInterface.prototype);HashMap.prototype.constructor=HashMap;/**
     * @override
     */HashMap.prototype.get=function get(key){return this.map_.get(key)||null;};/**
     * @override
     */HashMap.prototype.put=function put(key,value){this.map_.set(key,value);return value;};/**
     * @override
     */HashMap.prototype.values=function values(){var arrayList=new ArrayList();var it=this.map_.values();var o=it.next();while(!o.done){arrayList.add(o.value);o=it.next();}return arrayList;};/**
     * @override
     */HashMap.prototype.entrySet=function entrySet(){var hashSet=new HashSet();this.map_.entries().forEach(function(entry){return hashSet.add(entry);});return hashSet;};/**
     * @override
     */HashMap.prototype.size=function size(){return this.map_.size();};return HashMap;}(Map$1);var PrecisionModel=function PrecisionModel(){this._modelType=null;this._scale=null;if(arguments.length===0){this._modelType=PrecisionModel.FLOATING;}else if(arguments.length===1){if(arguments[0]instanceof Type){var modelType=arguments[0];this._modelType=modelType;if(modelType===PrecisionModel.FIXED){this.setScale(1.0);}}else if(typeof arguments[0]==='number'){var scale=arguments[0];this._modelType=PrecisionModel.FIXED;this.setScale(scale);}else if(arguments[0]instanceof PrecisionModel){var pm=arguments[0];this._modelType=pm._modelType;this._scale=pm._scale;}}};var staticAccessors$19={serialVersionUID:{configurable:true},maximumPreciseValue:{configurable:true}};PrecisionModel.prototype.equals=function equals(other){if(!(other instanceof PrecisionModel)){return false;}var otherPrecisionModel=other;return this._modelType===otherPrecisionModel._modelType&&this._scale===otherPrecisionModel._scale;};PrecisionModel.prototype.compareTo=function compareTo(o){var other=o;var sigDigits=this.getMaximumSignificantDigits();var otherSigDigits=other.getMaximumSignificantDigits();return new Integer(sigDigits).compareTo(new Integer(otherSigDigits));};PrecisionModel.prototype.getScale=function getScale(){return this._scale;};PrecisionModel.prototype.isFloating=function isFloating(){return this._modelType===PrecisionModel.FLOATING||this._modelType===PrecisionModel.FLOATING_SINGLE;};PrecisionModel.prototype.getType=function getType(){return this._modelType;};PrecisionModel.prototype.toString=function toString(){var description='UNKNOWN';if(this._modelType===PrecisionModel.FLOATING){description='Floating';}else if(this._modelType===PrecisionModel.FLOATING_SINGLE){description='Floating-Single';}else if(this._modelType===PrecisionModel.FIXED){description='Fixed (Scale='+this.getScale()+')';}return description;};PrecisionModel.prototype.makePrecise=function makePrecise(){if(typeof arguments[0]==='number'){var val=arguments[0];if(Double.isNaN(val)){return val;}if(this._modelType===PrecisionModel.FLOATING_SINGLE){var floatSingleVal=val;return floatSingleVal;}if(this._modelType===PrecisionModel.FIXED){return Math.round(val*this._scale)/this._scale;}return val;}else if(arguments[0]instanceof Coordinate){var coord=arguments[0];if(this._modelType===PrecisionModel.FLOATING){return null;}coord.x=this.makePrecise(coord.x);coord.y=this.makePrecise(coord.y);}};PrecisionModel.prototype.getMaximumSignificantDigits=function getMaximumSignificantDigits(){var maxSigDigits=16;if(this._modelType===PrecisionModel.FLOATING){maxSigDigits=16;}else if(this._modelType===PrecisionModel.FLOATING_SINGLE){maxSigDigits=6;}else if(this._modelType===PrecisionModel.FIXED){maxSigDigits=1+Math.trunc(Math.ceil(Math.log(this.getScale())/Math.log(10)));}return maxSigDigits;};PrecisionModel.prototype.setScale=function setScale(scale){this._scale=Math.abs(scale);};PrecisionModel.prototype.interfaces_=function interfaces_(){return [Serializable,Comparable];};PrecisionModel.prototype.getClass=function getClass(){return PrecisionModel;};PrecisionModel.mostPrecise=function mostPrecise(pm1,pm2){if(pm1.compareTo(pm2)>=0){return pm1;}return pm2;};staticAccessors$19.serialVersionUID.get=function(){return 7777263578777803835;};staticAccessors$19.maximumPreciseValue.get=function(){return 9007199254740992.0;};Object.defineProperties(PrecisionModel,staticAccessors$19);var Type=function Type(name){this._name=name||null;Type.nameToTypeMap.put(name,this);};var staticAccessors$1$1={serialVersionUID:{configurable:true},nameToTypeMap:{configurable:true}};Type.prototype.readResolve=function readResolve(){return Type.nameToTypeMap.get(this._name);};Type.prototype.toString=function toString(){return this._name;};Type.prototype.interfaces_=function interfaces_(){return [Serializable];};Type.prototype.getClass=function getClass(){return Type;};staticAccessors$1$1.serialVersionUID.get=function(){return -5528602631731589822;};staticAccessors$1$1.nameToTypeMap.get=function(){return new HashMap();};Object.defineProperties(Type,staticAccessors$1$1);PrecisionModel.Type=Type;PrecisionModel.FIXED=new Type('FIXED');PrecisionModel.FLOATING=new Type('FLOATING');PrecisionModel.FLOATING_SINGLE=new Type('FLOATING SINGLE');var GeometryFactory=function GeometryFactory(){this._precisionModel=new PrecisionModel();this._SRID=0;this._coordinateSequenceFactory=GeometryFactory.getDefaultCoordinateSequenceFactory();if(arguments.length===0);else if(arguments.length===1){if(hasInterface(arguments[0],CoordinateSequenceFactory)){this._coordinateSequenceFactory=arguments[0];}else if(arguments[0]instanceof PrecisionModel){this._precisionModel=arguments[0];}}else if(arguments.length===2){this._precisionModel=arguments[0];this._SRID=arguments[1];}else if(arguments.length===3){this._precisionModel=arguments[0];this._SRID=arguments[1];this._coordinateSequenceFactory=arguments[2];}};var staticAccessors$2={serialVersionUID:{configurable:true}};GeometryFactory.prototype.toGeometry=function toGeometry(envelope){if(envelope.isNull()){return this.createPoint(null);}if(envelope.getMinX()===envelope.getMaxX()&&envelope.getMinY()===envelope.getMaxY()){return this.createPoint(new Coordinate(envelope.getMinX(),envelope.getMinY()));}if(envelope.getMinX()===envelope.getMaxX()||envelope.getMinY()===envelope.getMaxY()){return this.createLineString([new Coordinate(envelope.getMinX(),envelope.getMinY()),new Coordinate(envelope.getMaxX(),envelope.getMaxY())]);}return this.createPolygon(this.createLinearRing([new Coordinate(envelope.getMinX(),envelope.getMinY()),new Coordinate(envelope.getMinX(),envelope.getMaxY()),new Coordinate(envelope.getMaxX(),envelope.getMaxY()),new Coordinate(envelope.getMaxX(),envelope.getMinY()),new Coordinate(envelope.getMinX(),envelope.getMinY())]),null);};GeometryFactory.prototype.createLineString=function createLineString(coordinates){if(!coordinates){return new LineString(this.getCoordinateSequenceFactory().create([]),this);}else if(coordinates instanceof Array){return new LineString(this.getCoordinateSequenceFactory().create(coordinates),this);}else if(hasInterface(coordinates,CoordinateSequence)){return new LineString(coordinates,this);}};GeometryFactory.prototype.createMultiLineString=function createMultiLineString(){if(arguments.length===0){return new MultiLineString(null,this);}else if(arguments.length===1){var lineStrings=arguments[0];return new MultiLineString(lineStrings,this);}};GeometryFactory.prototype.buildGeometry=function buildGeometry(geomList){var geomClass=null;var isHeterogeneous=false;var hasGeometryCollection=false;for(var i=geomList.iterator();i.hasNext();){var geom=i.next();var partClass=geom.getClass();if(geomClass===null){geomClass=partClass;}if(partClass!==geomClass){isHeterogeneous=true;}if(geom.isGeometryCollectionOrDerived()){hasGeometryCollection=true;}}if(geomClass===null){return this.createGeometryCollection();}if(isHeterogeneous||hasGeometryCollection){return this.createGeometryCollection(GeometryFactory.toGeometryArray(geomList));}var geom0=geomList.iterator().next();var isCollection=geomList.size()>1;if(isCollection){if(geom0 instanceof Polygon){return this.createMultiPolygon(GeometryFactory.toPolygonArray(geomList));}else if(geom0 instanceof LineString){return this.createMultiLineString(GeometryFactory.toLineStringArray(geomList));}else if(geom0 instanceof Point){return this.createMultiPoint(GeometryFactory.toPointArray(geomList));}Assert.shouldNeverReachHere('Unhandled class: '+geom0.getClass().getName());}return geom0;};GeometryFactory.prototype.createMultiPointFromCoords=function createMultiPointFromCoords(coordinates){return this.createMultiPoint(coordinates!==null?this.getCoordinateSequenceFactory().create(coordinates):null);};GeometryFactory.prototype.createPoint=function createPoint(){if(arguments.length===0){return this.createPoint(this.getCoordinateSequenceFactory().create([]));}else if(arguments.length===1){if(arguments[0]instanceof Coordinate){var coordinate=arguments[0];return this.createPoint(coordinate!==null?this.getCoordinateSequenceFactory().create([coordinate]):null);}else if(hasInterface(arguments[0],CoordinateSequence)){var coordinates=arguments[0];return new Point(coordinates,this);}}};GeometryFactory.prototype.getCoordinateSequenceFactory=function getCoordinateSequenceFactory(){return this._coordinateSequenceFactory;};GeometryFactory.prototype.createPolygon=function createPolygon(){if(arguments.length===0){return new Polygon(null,null,this);}else if(arguments.length===1){if(hasInterface(arguments[0],CoordinateSequence)){var coordinates=arguments[0];return this.createPolygon(this.createLinearRing(coordinates));}else if(arguments[0]instanceof Array){var coordinates$1=arguments[0];return this.createPolygon(this.createLinearRing(coordinates$1));}else if(arguments[0]instanceof LinearRing){var shell=arguments[0];return this.createPolygon(shell,null);}}else if(arguments.length===2){var shell$1=arguments[0];var holes=arguments[1];return new Polygon(shell$1,holes,this);}};GeometryFactory.prototype.getSRID=function getSRID(){return this._SRID;};GeometryFactory.prototype.createGeometryCollection=function createGeometryCollection(){if(arguments.length===0){return new GeometryCollection(null,this);}else if(arguments.length===1){var geometries=arguments[0];return new GeometryCollection(geometries,this);}};GeometryFactory.prototype.createGeometry=function createGeometry(g){var editor=new GeometryEditor(this);return editor.edit(g,{edit:function edit(){if(arguments.length===2){var coordSeq=arguments[0];// const geometry = arguments[1]
  return this._coordinateSequenceFactory.create(coordSeq);}}});};GeometryFactory.prototype.getPrecisionModel=function getPrecisionModel(){return this._precisionModel;};GeometryFactory.prototype.createLinearRing=function createLinearRing(){if(arguments.length===0){return this.createLinearRing(this.getCoordinateSequenceFactory().create([]));}else if(arguments.length===1){if(arguments[0]instanceof Array){var coordinates=arguments[0];return this.createLinearRing(coordinates!==null?this.getCoordinateSequenceFactory().create(coordinates):null);}else if(hasInterface(arguments[0],CoordinateSequence)){var coordinates$1=arguments[0];return new LinearRing(coordinates$1,this);}}};GeometryFactory.prototype.createMultiPolygon=function createMultiPolygon(){if(arguments.length===0){return new MultiPolygon(null,this);}else if(arguments.length===1){var polygons=arguments[0];return new MultiPolygon(polygons,this);}};GeometryFactory.prototype.createMultiPoint=function createMultiPoint(){var this$1=this;if(arguments.length===0){return new MultiPoint(null,this);}else if(arguments.length===1){if(arguments[0]instanceof Array){var point=arguments[0];return new MultiPoint(point,this);}else if(arguments[0]instanceof Array){var coordinates=arguments[0];return this.createMultiPoint(coordinates!==null?this.getCoordinateSequenceFactory().create(coordinates):null);}else if(hasInterface(arguments[0],CoordinateSequence)){var coordinates$1=arguments[0];if(coordinates$1===null){return this.createMultiPoint(new Array(0).fill(null));}var points=new Array(coordinates$1.size()).fill(null);for(var i=0;i<coordinates$1.size();i++){var ptSeq=this$1.getCoordinateSequenceFactory().create(1,coordinates$1.getDimension());CoordinateSequences.copy(coordinates$1,i,ptSeq,0,1);points[i]=this$1.createPoint(ptSeq);}return this.createMultiPoint(points);}}};GeometryFactory.prototype.interfaces_=function interfaces_(){return [Serializable];};GeometryFactory.prototype.getClass=function getClass(){return GeometryFactory;};GeometryFactory.toMultiPolygonArray=function toMultiPolygonArray(multiPolygons){var multiPolygonArray=new Array(multiPolygons.size()).fill(null);return multiPolygons.toArray(multiPolygonArray);};GeometryFactory.toGeometryArray=function toGeometryArray(geometries){if(geometries===null){return null;}var geometryArray=new Array(geometries.size()).fill(null);return geometries.toArray(geometryArray);};GeometryFactory.getDefaultCoordinateSequenceFactory=function getDefaultCoordinateSequenceFactory(){return CoordinateArraySequenceFactory.instance();};GeometryFactory.toMultiLineStringArray=function toMultiLineStringArray(multiLineStrings){var multiLineStringArray=new Array(multiLineStrings.size()).fill(null);return multiLineStrings.toArray(multiLineStringArray);};GeometryFactory.toLineStringArray=function toLineStringArray(lineStrings){var lineStringArray=new Array(lineStrings.size()).fill(null);return lineStrings.toArray(lineStringArray);};GeometryFactory.toMultiPointArray=function toMultiPointArray(multiPoints){var multiPointArray=new Array(multiPoints.size()).fill(null);return multiPoints.toArray(multiPointArray);};GeometryFactory.toLinearRingArray=function toLinearRingArray(linearRings){var linearRingArray=new Array(linearRings.size()).fill(null);return linearRings.toArray(linearRingArray);};GeometryFactory.toPointArray=function toPointArray(points){var pointArray=new Array(points.size()).fill(null);return points.toArray(pointArray);};GeometryFactory.toPolygonArray=function toPolygonArray(polygons){var polygonArray=new Array(polygons.size()).fill(null);return polygons.toArray(polygonArray);};GeometryFactory.createPointFromInternalCoord=function createPointFromInternalCoord(coord,exemplar){exemplar.getPrecisionModel().makePrecise(coord);return exemplar.getFactory().createPoint(coord);};staticAccessors$2.serialVersionUID.get=function(){return -6820524753094095635;};Object.defineProperties(GeometryFactory,staticAccessors$2);var geometryTypes=['Point','MultiPoint','LineString','MultiLineString','Polygon','MultiPolygon'];/**
   * Class for reading and writing Well-Known Text.Create a new parser for GeoJSON
   * NOTE: Adapted from OpenLayers 2.11 implementation.
   */ /**
   * Create a new parser for GeoJSON
   *
   * @param {GeometryFactory} geometryFactory
   * @return An instance of GeoJsonParser.
   * @constructor
   * @private
   */var GeoJSONParser=function GeoJSONParser(geometryFactory){this.geometryFactory=geometryFactory||new GeometryFactory();};/**
   * Deserialize a GeoJSON object and return the Geometry or Feature(Collection) with JSTS Geometries
   *
   * @param {}
   *        A GeoJSON object.
   * @return {} A Geometry instance or object representing a Feature(Collection) with Geometry instances.
   * @private
   */GeoJSONParser.prototype.read=function read(json){var obj;if(typeof json==='string'){obj=JSON.parse(json);}else {obj=json;}var type=obj.type;if(!parse[type]){throw new Error('Unknown GeoJSON type: '+obj.type);}if(geometryTypes.indexOf(type)!==-1){return parse[type].apply(this,[obj.coordinates]);}else if(type==='GeometryCollection'){return parse[type].apply(this,[obj.geometries]);}// feature or feature collection
  return parse[type].apply(this,[obj]);};/**
   * Serialize a Geometry object into GeoJSON
   *
   * @param {Geometry}
   *        geometry A Geometry or array of Geometries.
   * @return {Object} A GeoJSON object represting the input Geometry/Geometries.
   * @private
   */GeoJSONParser.prototype.write=function write(geometry){var type=geometry.getGeometryType();if(!extract[type]){throw new Error('Geometry is not supported');}return extract[type].apply(this,[geometry]);};var parse={/**
     * Parse a GeoJSON Feature object
     *
     * @param {Object}
     *          obj Object to parse.
     *
     * @return {Object} Feature with geometry/bbox converted to JSTS Geometries.
     */Feature:function Feature(obj){var feature={};// copy features
  for(var key in obj){feature[key]=obj[key];}// parse geometry
  if(obj.geometry){var type=obj.geometry.type;if(!parse[type]){throw new Error('Unknown GeoJSON type: '+obj.type);}feature.geometry=this.read(obj.geometry);}// bbox
  if(obj.bbox){feature.bbox=parse.bbox.apply(this,[obj.bbox]);}return feature;},/**
     * Parse a GeoJSON FeatureCollection object
     *
     * @param {Object}
     *          obj Object to parse.
     *
     * @return {Object} FeatureCollection with geometry/bbox converted to JSTS Geometries.
     */FeatureCollection:function FeatureCollection(obj){var this$1=this;var featureCollection={};if(obj.features){featureCollection.features=[];for(var i=0;i<obj.features.length;++i){featureCollection.features.push(this$1.read(obj.features[i]));}}if(obj.bbox){featureCollection.bbox=this.parse.bbox.apply(this,[obj.bbox]);}return featureCollection;},/**
     * Convert the ordinates in an array to an array of Coordinates
     *
     * @param {Array}
     *          array Array with {Number}s.
     *
     * @return {Array} Array with Coordinates.
     */coordinates:function coordinates(array){var coordinates=[];for(var i=0;i<array.length;++i){var sub=array[i];coordinates.push(new Coordinate(sub[0],sub[1]));}return coordinates;},/**
     * Convert the bbox to a LinearRing
     *
     * @param {Array}
     *          array Array with [xMin, yMin, xMax, yMax].
     *
     * @return {Array} Array with Coordinates.
     */bbox:function bbox(array){return this.geometryFactory.createLinearRing([new Coordinate(array[0],array[1]),new Coordinate(array[2],array[1]),new Coordinate(array[2],array[3]),new Coordinate(array[0],array[3]),new Coordinate(array[0],array[1])]);},/**
     * Convert an Array with ordinates to a Point
     *
     * @param {Array}
     *          array Array with ordinates.
     *
     * @return {Point} Point.
     */Point:function Point(array){var coordinate=new Coordinate(array[0],array[1]);return this.geometryFactory.createPoint(coordinate);},/**
     * Convert an Array with coordinates to a MultiPoint
     *
     * @param {Array}
     *          array Array with coordinates.
     *
     * @return {MultiPoint} MultiPoint.
     */MultiPoint:function MultiPoint(array){var this$1=this;var points=[];for(var i=0;i<array.length;++i){points.push(parse.Point.apply(this$1,[array[i]]));}return this.geometryFactory.createMultiPoint(points);},/**
     * Convert an Array with coordinates to a LineString
     *
     * @param {Array}
     *          array Array with coordinates.
     *
     * @return {LineString} LineString.
     */LineString:function LineString(array){var coordinates=parse.coordinates.apply(this,[array]);return this.geometryFactory.createLineString(coordinates);},/**
     * Convert an Array with coordinates to a MultiLineString
     *
     * @param {Array}
     *          array Array with coordinates.
     *
     * @return {MultiLineString} MultiLineString.
     */MultiLineString:function MultiLineString(array){var this$1=this;var lineStrings=[];for(var i=0;i<array.length;++i){lineStrings.push(parse.LineString.apply(this$1,[array[i]]));}return this.geometryFactory.createMultiLineString(lineStrings);},/**
     * Convert an Array to a Polygon
     *
     * @param {Array}
     *          array Array with shell and holes.
     *
     * @return {Polygon} Polygon.
     */Polygon:function Polygon(array){var this$1=this;var shellCoordinates=parse.coordinates.apply(this,[array[0]]);var shell=this.geometryFactory.createLinearRing(shellCoordinates);var holes=[];for(var i=1;i<array.length;++i){var hole=array[i];var coordinates=parse.coordinates.apply(this$1,[hole]);var linearRing=this$1.geometryFactory.createLinearRing(coordinates);holes.push(linearRing);}return this.geometryFactory.createPolygon(shell,holes);},/**
     * Convert an Array to a MultiPolygon
     *
     * @param {Array}
     *          array Array of arrays with shell and rings.
     *
     * @return {MultiPolygon} MultiPolygon.
     */MultiPolygon:function MultiPolygon(array){var this$1=this;var polygons=[];for(var i=0;i<array.length;++i){var polygon=array[i];polygons.push(parse.Polygon.apply(this$1,[polygon]));}return this.geometryFactory.createMultiPolygon(polygons);},/**
     * Convert an Array to a GeometryCollection
     *
     * @param {Array}
     *          array Array of GeoJSON geometries.
     *
     * @return {GeometryCollection} GeometryCollection.
     */GeometryCollection:function GeometryCollection(array){var this$1=this;var geometries=[];for(var i=0;i<array.length;++i){var geometry=array[i];geometries.push(this$1.read(geometry));}return this.geometryFactory.createGeometryCollection(geometries);}};var extract={/**
     * Convert a Coordinate to an Array
     *
     * @param {Coordinate}
     *          coordinate Coordinate to convert.
     *
     * @return {Array} Array of ordinates.
     */coordinate:function coordinate(_coordinate){return [_coordinate.x,_coordinate.y];},/**
     * Convert a Point to a GeoJSON object
     *
     * @param {Point}
     *          point Point to convert.
     *
     * @return {Array} Array of 2 ordinates (paired to a coordinate).
     */Point:function Point(point){var array=extract.coordinate.apply(this,[point.getCoordinate()]);return {type:'Point',coordinates:array};},/**
     * Convert a MultiPoint to a GeoJSON object
     *
     * @param {MultiPoint}
     *          multipoint MultiPoint to convert.
     *
     * @return {Array} Array of coordinates.
     */MultiPoint:function MultiPoint(multipoint){var this$1=this;var array=[];for(var i=0;i<multipoint._geometries.length;++i){var point=multipoint._geometries[i];var geoJson=extract.Point.apply(this$1,[point]);array.push(geoJson.coordinates);}return {type:'MultiPoint',coordinates:array};},/**
     * Convert a LineString to a GeoJSON object
     *
     * @param {LineString}
     *          linestring LineString to convert.
     *
     * @return {Array} Array of coordinates.
     */LineString:function LineString(linestring){var this$1=this;var array=[];var coordinates=linestring.getCoordinates();for(var i=0;i<coordinates.length;++i){var coordinate=coordinates[i];array.push(extract.coordinate.apply(this$1,[coordinate]));}return {type:'LineString',coordinates:array};},/**
     * Convert a MultiLineString to a GeoJSON object
     *
     * @param {MultiLineString}
     *          multilinestring MultiLineString to convert.
     *
     * @return {Array} Array of Array of coordinates.
     */MultiLineString:function MultiLineString(multilinestring){var this$1=this;var array=[];for(var i=0;i<multilinestring._geometries.length;++i){var linestring=multilinestring._geometries[i];var geoJson=extract.LineString.apply(this$1,[linestring]);array.push(geoJson.coordinates);}return {type:'MultiLineString',coordinates:array};},/**
     * Convert a Polygon to a GeoJSON object
     *
     * @param {Polygon}
     *          polygon Polygon to convert.
     *
     * @return {Array} Array with shell, holes.
     */Polygon:function Polygon(polygon){var this$1=this;var array=[];var shellGeoJson=extract.LineString.apply(this,[polygon._shell]);array.push(shellGeoJson.coordinates);for(var i=0;i<polygon._holes.length;++i){var hole=polygon._holes[i];var holeGeoJson=extract.LineString.apply(this$1,[hole]);array.push(holeGeoJson.coordinates);}return {type:'Polygon',coordinates:array};},/**
     * Convert a MultiPolygon to a GeoJSON object
     *
     * @param {MultiPolygon}
     *          multipolygon MultiPolygon to convert.
     *
     * @return {Array} Array of polygons.
     */MultiPolygon:function MultiPolygon(multipolygon){var this$1=this;var array=[];for(var i=0;i<multipolygon._geometries.length;++i){var polygon=multipolygon._geometries[i];var geoJson=extract.Polygon.apply(this$1,[polygon]);array.push(geoJson.coordinates);}return {type:'MultiPolygon',coordinates:array};},/**
     * Convert a GeometryCollection to a GeoJSON object
     *
     * @param {GeometryCollection}
     *          collection GeometryCollection to convert.
     *
     * @return {Array} Array of geometries.
     */GeometryCollection:function GeometryCollection(collection){var this$1=this;var array=[];for(var i=0;i<collection._geometries.length;++i){var geometry=collection._geometries[i];var type=geometry.getGeometryType();array.push(extract[type].apply(this$1,[geometry]));}return {type:'GeometryCollection',geometries:array};}};/**
   * Converts a geometry in GeoJSON to a {@link Geometry}.
   */ /**
   * A <code>GeoJSONReader</code> is parameterized by a <code>GeometryFactory</code>,
   * to allow it to create <code>Geometry</code> objects of the appropriate
   * implementation. In particular, the <code>GeometryFactory</code> determines
   * the <code>PrecisionModel</code> and <code>SRID</code> that is used.
   *
   * @param {GeometryFactory} geometryFactory
   * @constructor
   */var GeoJSONReader=function GeoJSONReader(geometryFactory){this.geometryFactory=geometryFactory||new GeometryFactory();this.precisionModel=this.geometryFactory.getPrecisionModel();this.parser=new GeoJSONParser(this.geometryFactory);};/**
   * Reads a GeoJSON representation of a {@link Geometry}
   *
   * Will also parse GeoJSON Features/FeatureCollections as custom objects.
   *
   * @param {Object|String} geoJson a GeoJSON Object or String.
   * @return {Geometry|Object} a <code>Geometry or Feature/FeatureCollection representation.</code>
   * @memberof GeoJSONReader
   */GeoJSONReader.prototype.read=function read(geoJson){var geometry=this.parser.read(geoJson);if(this.precisionModel.getType()===PrecisionModel.FIXED){this.reducePrecision(geometry);}return geometry;};// NOTE: this is a hack
  GeoJSONReader.prototype.reducePrecision=function reducePrecision(geometry){var this$1=this;var i,len;if(geometry.coordinate){this.precisionModel.makePrecise(geometry.coordinate);}else if(geometry.points){for(i=0,len=geometry.points.length;i<len;i++){this$1.precisionModel.makePrecise(geometry.points[i]);}}else if(geometry.geometries){for(i=0,len=geometry.geometries.length;i<len;i++){this$1.reducePrecision(geometry.geometries[i]);}}};/**
   * @module GeoJSONWriter
   */ /**
   * Writes the GeoJSON representation of a {@link Geometry}. The
   * The GeoJSON format is defined <A
   * HREF="http://geojson.org/geojson-spec.html">here</A>.
   */ /**
   * The <code>GeoJSONWriter</code> outputs coordinates rounded to the precision
   * model. Only the maximum number of decimal places necessary to represent the
   * ordinates to the required precision will be output.
   *
   * @param {GeometryFactory} geometryFactory
   * @constructor
   */var GeoJSONWriter=function GeoJSONWriter(){this.parser=new GeoJSONParser(this.geometryFactory);};/**
   * Converts a <code>Geometry</code> to its GeoJSON representation.
   *
   * @param {Geometry}
   *        geometry a <code>Geometry</code> to process.
   * @return {Object} The GeoJSON representation of the Geometry.
   * @memberof GeoJSONWriter
   */GeoJSONWriter.prototype.write=function write(geometry){return this.parser.write(geometry);};/* eslint-disable no-undef */ // io
  var Position=function Position(){};var staticAccessors$20={ON:{configurable:true},LEFT:{configurable:true},RIGHT:{configurable:true}};Position.prototype.interfaces_=function interfaces_(){return [];};Position.prototype.getClass=function getClass(){return Position;};Position.opposite=function opposite(position){if(position===Position.LEFT){return Position.RIGHT;}if(position===Position.RIGHT){return Position.LEFT;}return position;};staticAccessors$20.ON.get=function(){return 0;};staticAccessors$20.LEFT.get=function(){return 1;};staticAccessors$20.RIGHT.get=function(){return 2;};Object.defineProperties(Position,staticAccessors$20);/**
   * @param {string=} message Optional message
   * @extends {Error}
   * @constructor
   * @private
   */function EmptyStackException(message){this.message=message||'';}EmptyStackException.prototype=new Error();/**
   * @type {string}
   */EmptyStackException.prototype.name='EmptyStackException';/**
   * @see http://download.oracle.com/javase/6/docs/api/java/util/Stack.html
   *
   * @extends {List}
   * @constructor
   * @private
   */function Stack(){/**
     * @type {Array}
     * @private
     */this.array_=[];}Stack.prototype=new List();/**
   * @override
   */Stack.prototype.add=function(e){this.array_.push(e);return true;};/**
   * @override
   */Stack.prototype.get=function(index){if(index<0||index>=this.size()){throw new Error();}return this.array_[index];};/**
   * Pushes an item onto the top of this stack.
   * @param {Object} e
   * @return {Object}
   */Stack.prototype.push=function(e){this.array_.push(e);return e;};/**
   * Pushes an item onto the top of this stack.
   * @param {Object} e
   * @return {Object}
   */Stack.prototype.pop=function(e){if(this.array_.length===0){throw new EmptyStackException();}return this.array_.pop();};/**
   * Looks at the object at the top of this stack without removing it from the
   * stack.
   * @return {Object}
   */Stack.prototype.peek=function(){if(this.array_.length===0){throw new EmptyStackException();}return this.array_[this.array_.length-1];};/**
   * Tests if this stack is empty.
   * @return {boolean} true if and only if this stack contains no items; false
   *         otherwise.
   */Stack.prototype.empty=function(){if(this.array_.length===0){return true;}else {return false;}};/**
   * @return {boolean}
   */Stack.prototype.isEmpty=function(){return this.empty();};/**
   * Returns the 1-based position where an object is on this stack. If the object
   * o occurs as an item in this stack, this method returns the distance from the
   * top of the stack of the occurrence nearest the top of the stack; the topmost
   * item on the stack is considered to be at distance 1. The equals method is
   * used to compare o to the items in this stack.
   *
   * NOTE: does not currently actually use equals. (=== is used)
   *
   * @param {Object} o
   * @return {number} the 1-based position from the top of the stack where the
   *         object is located; the return value -1 indicates that the object is
   *         not on the stack.
   */Stack.prototype.search=function(o){return this.array_.indexOf(o);};/**
   * @return {number}
   * @export
   */Stack.prototype.size=function(){return this.array_.length;};/**
   * @return {Array}
   */Stack.prototype.toArray=function(){var this$1=this;var array=[];for(var i=0,len=this.array_.length;i<len;i++){array.push(this$1.array_[i]);}return array;};var RightmostEdgeFinder=function RightmostEdgeFinder(){this._minIndex=-1;this._minCoord=null;this._minDe=null;this._orientedDe=null;};RightmostEdgeFinder.prototype.getCoordinate=function getCoordinate(){return this._minCoord;};RightmostEdgeFinder.prototype.getRightmostSide=function getRightmostSide(de,index){var side=this.getRightmostSideOfSegment(de,index);if(side<0){side=this.getRightmostSideOfSegment(de,index-1);}if(side<0){this._minCoord=null;this.checkForRightmostCoordinate(de);}return side;};RightmostEdgeFinder.prototype.findRightmostEdgeAtVertex=function findRightmostEdgeAtVertex(){var pts=this._minDe.getEdge().getCoordinates();Assert.isTrue(this._minIndex>0&&this._minIndex<pts.length,'rightmost point expected to be interior vertex of edge');var pPrev=pts[this._minIndex-1];var pNext=pts[this._minIndex+1];var orientation=CGAlgorithms.computeOrientation(this._minCoord,pNext,pPrev);var usePrev=false;if(pPrev.y<this._minCoord.y&&pNext.y<this._minCoord.y&&orientation===CGAlgorithms.COUNTERCLOCKWISE){usePrev=true;}else if(pPrev.y>this._minCoord.y&&pNext.y>this._minCoord.y&&orientation===CGAlgorithms.CLOCKWISE){usePrev=true;}if(usePrev){this._minIndex=this._minIndex-1;}};RightmostEdgeFinder.prototype.getRightmostSideOfSegment=function getRightmostSideOfSegment(de,i){var e=de.getEdge();var coord=e.getCoordinates();if(i<0||i+1>=coord.length){return -1;}if(coord[i].y===coord[i+1].y){return -1;}var pos=Position.LEFT;if(coord[i].y<coord[i+1].y){pos=Position.RIGHT;}return pos;};RightmostEdgeFinder.prototype.getEdge=function getEdge(){return this._orientedDe;};RightmostEdgeFinder.prototype.checkForRightmostCoordinate=function checkForRightmostCoordinate(de){var this$1=this;var coord=de.getEdge().getCoordinates();for(var i=0;i<coord.length-1;i++){if(this$1._minCoord===null||coord[i].x>this$1._minCoord.x){this$1._minDe=de;this$1._minIndex=i;this$1._minCoord=coord[i];}}};RightmostEdgeFinder.prototype.findRightmostEdgeAtNode=function findRightmostEdgeAtNode(){var node=this._minDe.getNode();var star=node.getEdges();this._minDe=star.getRightmostEdge();if(!this._minDe.isForward()){this._minDe=this._minDe.getSym();this._minIndex=this._minDe.getEdge().getCoordinates().length-1;}};RightmostEdgeFinder.prototype.findEdge=function findEdge(dirEdgeList){var this$1=this;for(var i=dirEdgeList.iterator();i.hasNext();){var de=i.next();if(!de.isForward()){continue;}this$1.checkForRightmostCoordinate(de);}Assert.isTrue(this._minIndex!==0||this._minCoord.equals(this._minDe.getCoordinate()),'inconsistency in rightmost processing');if(this._minIndex===0){this.findRightmostEdgeAtNode();}else {this.findRightmostEdgeAtVertex();}this._orientedDe=this._minDe;var rightmostSide=this.getRightmostSide(this._minDe,this._minIndex);if(rightmostSide===Position.LEFT){this._orientedDe=this._minDe.getSym();}};RightmostEdgeFinder.prototype.interfaces_=function interfaces_(){return [];};RightmostEdgeFinder.prototype.getClass=function getClass(){return RightmostEdgeFinder;};var TopologyException=function(RuntimeException$$1){function TopologyException(msg,pt){RuntimeException$$1.call(this,TopologyException.msgWithCoord(msg,pt));this.pt=pt?new Coordinate(pt):null;this.name='TopologyException';}if(RuntimeException$$1)TopologyException.__proto__=RuntimeException$$1;TopologyException.prototype=Object.create(RuntimeException$$1&&RuntimeException$$1.prototype);TopologyException.prototype.constructor=TopologyException;TopologyException.prototype.getCoordinate=function getCoordinate(){return this.pt;};TopologyException.prototype.interfaces_=function interfaces_(){return [];};TopologyException.prototype.getClass=function getClass(){return TopologyException;};TopologyException.msgWithCoord=function msgWithCoord(msg,pt){if(!pt){return msg+' [ '+pt+' ]';}return msg;};return TopologyException;}(RuntimeException);var LinkedList=function LinkedList(){this.array_=[];};LinkedList.prototype.addLast=function addLast(e){this.array_.push(e);};LinkedList.prototype.removeFirst=function removeFirst(){return this.array_.shift();};LinkedList.prototype.isEmpty=function isEmpty(){return this.array_.length===0;};var BufferSubgraph=function BufferSubgraph(){this._finder=null;this._dirEdgeList=new ArrayList();this._nodes=new ArrayList();this._rightMostCoord=null;this._env=null;this._finder=new RightmostEdgeFinder();};BufferSubgraph.prototype.clearVisitedEdges=function clearVisitedEdges(){for(var it=this._dirEdgeList.iterator();it.hasNext();){var de=it.next();de.setVisited(false);}};BufferSubgraph.prototype.getRightmostCoordinate=function getRightmostCoordinate(){return this._rightMostCoord;};BufferSubgraph.prototype.computeNodeDepth=function computeNodeDepth(n){var this$1=this;var startEdge=null;for(var i=n.getEdges().iterator();i.hasNext();){var de=i.next();if(de.isVisited()||de.getSym().isVisited()){startEdge=de;break;}}if(startEdge===null){throw new TopologyException('unable to find edge to compute depths at '+n.getCoordinate());}n.getEdges().computeDepths(startEdge);for(var i$1=n.getEdges().iterator();i$1.hasNext();){var de$1=i$1.next();de$1.setVisited(true);this$1.copySymDepths(de$1);}};BufferSubgraph.prototype.computeDepth=function computeDepth(outsideDepth){this.clearVisitedEdges();var de=this._finder.getEdge();// const n = de.getNode()
  // const label = de.getLabel()
  de.setEdgeDepths(Position.RIGHT,outsideDepth);this.copySymDepths(de);this.computeDepths(de);};BufferSubgraph.prototype.create=function create(node){this.addReachable(node);this._finder.findEdge(this._dirEdgeList);this._rightMostCoord=this._finder.getCoordinate();};BufferSubgraph.prototype.findResultEdges=function findResultEdges(){for(var it=this._dirEdgeList.iterator();it.hasNext();){var de=it.next();if(de.getDepth(Position.RIGHT)>=1&&de.getDepth(Position.LEFT)<=0&&!de.isInteriorAreaEdge()){de.setInResult(true);}}};BufferSubgraph.prototype.computeDepths=function computeDepths(startEdge){var this$1=this;var nodesVisited=new HashSet();var nodeQueue=new LinkedList();var startNode=startEdge.getNode();nodeQueue.addLast(startNode);nodesVisited.add(startNode);startEdge.setVisited(true);while(!nodeQueue.isEmpty()){var n=nodeQueue.removeFirst();nodesVisited.add(n);this$1.computeNodeDepth(n);for(var i=n.getEdges().iterator();i.hasNext();){var de=i.next();var sym=de.getSym();if(sym.isVisited()){continue;}var adjNode=sym.getNode();if(!nodesVisited.contains(adjNode)){nodeQueue.addLast(adjNode);nodesVisited.add(adjNode);}}}};BufferSubgraph.prototype.compareTo=function compareTo(o){var graph=o;if(this._rightMostCoord.x<graph._rightMostCoord.x){return -1;}if(this._rightMostCoord.x>graph._rightMostCoord.x){return 1;}return 0;};BufferSubgraph.prototype.getEnvelope=function getEnvelope(){if(this._env===null){var edgeEnv=new Envelope();for(var it=this._dirEdgeList.iterator();it.hasNext();){var dirEdge=it.next();var pts=dirEdge.getEdge().getCoordinates();for(var i=0;i<pts.length-1;i++){edgeEnv.expandToInclude(pts[i]);}}this._env=edgeEnv;}return this._env;};BufferSubgraph.prototype.addReachable=function addReachable(startNode){var this$1=this;var nodeStack=new Stack();nodeStack.add(startNode);while(!nodeStack.empty()){var node=nodeStack.pop();this$1.add(node,nodeStack);}};BufferSubgraph.prototype.copySymDepths=function copySymDepths(de){var sym=de.getSym();sym.setDepth(Position.LEFT,de.getDepth(Position.RIGHT));sym.setDepth(Position.RIGHT,de.getDepth(Position.LEFT));};BufferSubgraph.prototype.add=function add(node,nodeStack){var this$1=this;node.setVisited(true);this._nodes.add(node);for(var i=node.getEdges().iterator();i.hasNext();){var de=i.next();this$1._dirEdgeList.add(de);var sym=de.getSym();var symNode=sym.getNode();if(!symNode.isVisited()){nodeStack.push(symNode);}}};BufferSubgraph.prototype.getNodes=function getNodes(){return this._nodes;};BufferSubgraph.prototype.getDirectedEdges=function getDirectedEdges(){return this._dirEdgeList;};BufferSubgraph.prototype.interfaces_=function interfaces_(){return [Comparable];};BufferSubgraph.prototype.getClass=function getClass(){return BufferSubgraph;};var TopologyLocation=function TopologyLocation(){var this$1=this;this.location=null;if(arguments.length===1){if(arguments[0]instanceof Array){var location=arguments[0];this.init(location.length);}else if(Number.isInteger(arguments[0])){var on=arguments[0];this.init(1);this.location[Position.ON]=on;}else if(arguments[0]instanceof TopologyLocation){var gl=arguments[0];this.init(gl.location.length);if(gl!==null){for(var i=0;i<this.location.length;i++){this$1.location[i]=gl.location[i];}}}}else if(arguments.length===3){var on$1=arguments[0];var left=arguments[1];var right=arguments[2];this.init(3);this.location[Position.ON]=on$1;this.location[Position.LEFT]=left;this.location[Position.RIGHT]=right;}};TopologyLocation.prototype.setAllLocations=function setAllLocations(locValue){var this$1=this;for(var i=0;i<this.location.length;i++){this$1.location[i]=locValue;}};TopologyLocation.prototype.isNull=function isNull(){var this$1=this;for(var i=0;i<this.location.length;i++){if(this$1.location[i]!==Location.NONE){return false;}}return true;};TopologyLocation.prototype.setAllLocationsIfNull=function setAllLocationsIfNull(locValue){var this$1=this;for(var i=0;i<this.location.length;i++){if(this$1.location[i]===Location.NONE){this$1.location[i]=locValue;}}};TopologyLocation.prototype.isLine=function isLine(){return this.location.length===1;};TopologyLocation.prototype.merge=function merge(gl){var this$1=this;if(gl.location.length>this.location.length){var newLoc=new Array(3).fill(null);newLoc[Position.ON]=this.location[Position.ON];newLoc[Position.LEFT]=Location.NONE;newLoc[Position.RIGHT]=Location.NONE;this.location=newLoc;}for(var i=0;i<this.location.length;i++){if(this$1.location[i]===Location.NONE&&i<gl.location.length){this$1.location[i]=gl.location[i];}}};TopologyLocation.prototype.getLocations=function getLocations(){return this.location;};TopologyLocation.prototype.flip=function flip(){if(this.location.length<=1){return null;}var temp=this.location[Position.LEFT];this.location[Position.LEFT]=this.location[Position.RIGHT];this.location[Position.RIGHT]=temp;};TopologyLocation.prototype.toString=function toString(){var buf=new StringBuffer();if(this.location.length>1){buf.append(Location.toLocationSymbol(this.location[Position.LEFT]));}buf.append(Location.toLocationSymbol(this.location[Position.ON]));if(this.location.length>1){buf.append(Location.toLocationSymbol(this.location[Position.RIGHT]));}return buf.toString();};TopologyLocation.prototype.setLocations=function setLocations(on,left,right){this.location[Position.ON]=on;this.location[Position.LEFT]=left;this.location[Position.RIGHT]=right;};TopologyLocation.prototype.get=function get(posIndex){if(posIndex<this.location.length){return this.location[posIndex];}return Location.NONE;};TopologyLocation.prototype.isArea=function isArea(){return this.location.length>1;};TopologyLocation.prototype.isAnyNull=function isAnyNull(){var this$1=this;for(var i=0;i<this.location.length;i++){if(this$1.location[i]===Location.NONE){return true;}}return false;};TopologyLocation.prototype.setLocation=function setLocation(){if(arguments.length===1){var locValue=arguments[0];this.setLocation(Position.ON,locValue);}else if(arguments.length===2){var locIndex=arguments[0];var locValue$1=arguments[1];this.location[locIndex]=locValue$1;}};TopologyLocation.prototype.init=function init(size){this.location=new Array(size).fill(null);this.setAllLocations(Location.NONE);};TopologyLocation.prototype.isEqualOnSide=function isEqualOnSide(le,locIndex){return this.location[locIndex]===le.location[locIndex];};TopologyLocation.prototype.allPositionsEqual=function allPositionsEqual(loc){var this$1=this;for(var i=0;i<this.location.length;i++){if(this$1.location[i]!==loc){return false;}}return true;};TopologyLocation.prototype.interfaces_=function interfaces_(){return [];};TopologyLocation.prototype.getClass=function getClass(){return TopologyLocation;};var Label=function Label(){this.elt=new Array(2).fill(null);if(arguments.length===1){if(Number.isInteger(arguments[0])){var onLoc=arguments[0];this.elt[0]=new TopologyLocation(onLoc);this.elt[1]=new TopologyLocation(onLoc);}else if(arguments[0]instanceof Label){var lbl=arguments[0];this.elt[0]=new TopologyLocation(lbl.elt[0]);this.elt[1]=new TopologyLocation(lbl.elt[1]);}}else if(arguments.length===2){var geomIndex=arguments[0];var onLoc$1=arguments[1];this.elt[0]=new TopologyLocation(Location.NONE);this.elt[1]=new TopologyLocation(Location.NONE);this.elt[geomIndex].setLocation(onLoc$1);}else if(arguments.length===3){var onLoc$2=arguments[0];var leftLoc=arguments[1];var rightLoc=arguments[2];this.elt[0]=new TopologyLocation(onLoc$2,leftLoc,rightLoc);this.elt[1]=new TopologyLocation(onLoc$2,leftLoc,rightLoc);}else if(arguments.length===4){var geomIndex$1=arguments[0];var onLoc$3=arguments[1];var leftLoc$1=arguments[2];var rightLoc$1=arguments[3];this.elt[0]=new TopologyLocation(Location.NONE,Location.NONE,Location.NONE);this.elt[1]=new TopologyLocation(Location.NONE,Location.NONE,Location.NONE);this.elt[geomIndex$1].setLocations(onLoc$3,leftLoc$1,rightLoc$1);}};Label.prototype.getGeometryCount=function getGeometryCount(){var count=0;if(!this.elt[0].isNull()){count++;}if(!this.elt[1].isNull()){count++;}return count;};Label.prototype.setAllLocations=function setAllLocations(geomIndex,location){this.elt[geomIndex].setAllLocations(location);};Label.prototype.isNull=function isNull(geomIndex){return this.elt[geomIndex].isNull();};Label.prototype.setAllLocationsIfNull=function setAllLocationsIfNull(){if(arguments.length===1){var location=arguments[0];this.setAllLocationsIfNull(0,location);this.setAllLocationsIfNull(1,location);}else if(arguments.length===2){var geomIndex=arguments[0];var location$1=arguments[1];this.elt[geomIndex].setAllLocationsIfNull(location$1);}};Label.prototype.isLine=function isLine(geomIndex){return this.elt[geomIndex].isLine();};Label.prototype.merge=function merge(lbl){var this$1=this;for(var i=0;i<2;i++){if(this$1.elt[i]===null&&lbl.elt[i]!==null){this$1.elt[i]=new TopologyLocation(lbl.elt[i]);}else {this$1.elt[i].merge(lbl.elt[i]);}}};Label.prototype.flip=function flip(){this.elt[0].flip();this.elt[1].flip();};Label.prototype.getLocation=function getLocation(){if(arguments.length===1){var geomIndex=arguments[0];return this.elt[geomIndex].get(Position.ON);}else if(arguments.length===2){var geomIndex$1=arguments[0];var posIndex=arguments[1];return this.elt[geomIndex$1].get(posIndex);}};Label.prototype.toString=function toString(){var buf=new StringBuffer();if(this.elt[0]!==null){buf.append('A:');buf.append(this.elt[0].toString());}if(this.elt[1]!==null){buf.append(' B:');buf.append(this.elt[1].toString());}return buf.toString();};Label.prototype.isArea=function isArea(){if(arguments.length===0){return this.elt[0].isArea()||this.elt[1].isArea();}else if(arguments.length===1){var geomIndex=arguments[0];return this.elt[geomIndex].isArea();}};Label.prototype.isAnyNull=function isAnyNull(geomIndex){return this.elt[geomIndex].isAnyNull();};Label.prototype.setLocation=function setLocation(){if(arguments.length===2){var geomIndex=arguments[0];var location=arguments[1];this.elt[geomIndex].setLocation(Position.ON,location);}else if(arguments.length===3){var geomIndex$1=arguments[0];var posIndex=arguments[1];var location$1=arguments[2];this.elt[geomIndex$1].setLocation(posIndex,location$1);}};Label.prototype.isEqualOnSide=function isEqualOnSide(lbl,side){return this.elt[0].isEqualOnSide(lbl.elt[0],side)&&this.elt[1].isEqualOnSide(lbl.elt[1],side);};Label.prototype.allPositionsEqual=function allPositionsEqual(geomIndex,loc){return this.elt[geomIndex].allPositionsEqual(loc);};Label.prototype.toLine=function toLine(geomIndex){if(this.elt[geomIndex].isArea()){this.elt[geomIndex]=new TopologyLocation(this.elt[geomIndex].location[0]);}};Label.prototype.interfaces_=function interfaces_(){return [];};Label.prototype.getClass=function getClass(){return Label;};Label.toLineLabel=function toLineLabel(label){var lineLabel=new Label(Location.NONE);for(var i=0;i<2;i++){lineLabel.setLocation(i,label.getLocation(i));}return lineLabel;};var EdgeRing=function EdgeRing(){this._startDe=null;this._maxNodeDegree=-1;this._edges=new ArrayList();this._pts=new ArrayList();this._label=new Label(Location.NONE);this._ring=null;this._isHole=null;this._shell=null;this._holes=new ArrayList();this._geometryFactory=null;var start=arguments[0];var geometryFactory=arguments[1];this._geometryFactory=geometryFactory;this.computePoints(start);this.computeRing();};EdgeRing.prototype.computeRing=function computeRing(){var this$1=this;if(this._ring!==null){return null;}var coord=new Array(this._pts.size()).fill(null);for(var i=0;i<this._pts.size();i++){coord[i]=this$1._pts.get(i);}this._ring=this._geometryFactory.createLinearRing(coord);this._isHole=CGAlgorithms.isCCW(this._ring.getCoordinates());};EdgeRing.prototype.isIsolated=function isIsolated(){return this._label.getGeometryCount()===1;};EdgeRing.prototype.computePoints=function computePoints(start){var this$1=this;this._startDe=start;var de=start;var isFirstEdge=true;do{if(de===null){throw new TopologyException('Found null DirectedEdge');}if(de.getEdgeRing()===this$1){throw new TopologyException('Directed Edge visited twice during ring-building at '+de.getCoordinate());}this$1._edges.add(de);var label=de.getLabel();Assert.isTrue(label.isArea());this$1.mergeLabel(label);this$1.addPoints(de.getEdge(),de.isForward(),isFirstEdge);isFirstEdge=false;this$1.setEdgeRing(de,this$1);de=this$1.getNext(de);}while(de!==this._startDe);};EdgeRing.prototype.getLinearRing=function getLinearRing(){return this._ring;};EdgeRing.prototype.getCoordinate=function getCoordinate(i){return this._pts.get(i);};EdgeRing.prototype.computeMaxNodeDegree=function computeMaxNodeDegree(){var this$1=this;this._maxNodeDegree=0;var de=this._startDe;do{var node=de.getNode();var degree=node.getEdges().getOutgoingDegree(this$1);if(degree>this$1._maxNodeDegree){this$1._maxNodeDegree=degree;}de=this$1.getNext(de);}while(de!==this._startDe);this._maxNodeDegree*=2;};EdgeRing.prototype.addPoints=function addPoints(edge,isForward,isFirstEdge){var this$1=this;var edgePts=edge.getCoordinates();if(isForward){var startIndex=1;if(isFirstEdge){startIndex=0;}for(var i=startIndex;i<edgePts.length;i++){this$1._pts.add(edgePts[i]);}}else {var startIndex$1=edgePts.length-2;if(isFirstEdge){startIndex$1=edgePts.length-1;}for(var i$1=startIndex$1;i$1>=0;i$1--){this$1._pts.add(edgePts[i$1]);}}};EdgeRing.prototype.isHole=function isHole(){return this._isHole;};EdgeRing.prototype.setInResult=function setInResult(){var de=this._startDe;do{de.getEdge().setInResult(true);de=de.getNext();}while(de!==this._startDe);};EdgeRing.prototype.containsPoint=function containsPoint(p){var shell=this.getLinearRing();var env=shell.getEnvelopeInternal();if(!env.contains(p)){return false;}if(!CGAlgorithms.isPointInRing(p,shell.getCoordinates())){return false;}for(var i=this._holes.iterator();i.hasNext();){var hole=i.next();if(hole.containsPoint(p)){return false;}}return true;};EdgeRing.prototype.addHole=function addHole(ring){this._holes.add(ring);};EdgeRing.prototype.isShell=function isShell(){return this._shell===null;};EdgeRing.prototype.getLabel=function getLabel(){return this._label;};EdgeRing.prototype.getEdges=function getEdges(){return this._edges;};EdgeRing.prototype.getMaxNodeDegree=function getMaxNodeDegree(){if(this._maxNodeDegree<0){this.computeMaxNodeDegree();}return this._maxNodeDegree;};EdgeRing.prototype.getShell=function getShell(){return this._shell;};EdgeRing.prototype.mergeLabel=function mergeLabel(){if(arguments.length===1){var deLabel=arguments[0];this.mergeLabel(deLabel,0);this.mergeLabel(deLabel,1);}else if(arguments.length===2){var deLabel$1=arguments[0];var geomIndex=arguments[1];var loc=deLabel$1.getLocation(geomIndex,Position.RIGHT);if(loc===Location.NONE){return null;}if(this._label.getLocation(geomIndex)===Location.NONE){this._label.setLocation(geomIndex,loc);return null;}}};EdgeRing.prototype.setShell=function setShell(shell){this._shell=shell;if(shell!==null){shell.addHole(this);}};EdgeRing.prototype.toPolygon=function toPolygon(geometryFactory){var this$1=this;var holeLR=new Array(this._holes.size()).fill(null);for(var i=0;i<this._holes.size();i++){holeLR[i]=this$1._holes.get(i).getLinearRing();}var poly=geometryFactory.createPolygon(this.getLinearRing(),holeLR);return poly;};EdgeRing.prototype.interfaces_=function interfaces_(){return [];};EdgeRing.prototype.getClass=function getClass(){return EdgeRing;};var MinimalEdgeRing=function(EdgeRing$$1){function MinimalEdgeRing(){var start=arguments[0];var geometryFactory=arguments[1];EdgeRing$$1.call(this,start,geometryFactory);}if(EdgeRing$$1)MinimalEdgeRing.__proto__=EdgeRing$$1;MinimalEdgeRing.prototype=Object.create(EdgeRing$$1&&EdgeRing$$1.prototype);MinimalEdgeRing.prototype.constructor=MinimalEdgeRing;MinimalEdgeRing.prototype.setEdgeRing=function setEdgeRing(de,er){de.setMinEdgeRing(er);};MinimalEdgeRing.prototype.getNext=function getNext(de){return de.getNextMin();};MinimalEdgeRing.prototype.interfaces_=function interfaces_(){return [];};MinimalEdgeRing.prototype.getClass=function getClass(){return MinimalEdgeRing;};return MinimalEdgeRing;}(EdgeRing);var MaximalEdgeRing=function(EdgeRing$$1){function MaximalEdgeRing(){var start=arguments[0];var geometryFactory=arguments[1];EdgeRing$$1.call(this,start,geometryFactory);}if(EdgeRing$$1)MaximalEdgeRing.__proto__=EdgeRing$$1;MaximalEdgeRing.prototype=Object.create(EdgeRing$$1&&EdgeRing$$1.prototype);MaximalEdgeRing.prototype.constructor=MaximalEdgeRing;MaximalEdgeRing.prototype.buildMinimalRings=function buildMinimalRings(){var this$1=this;var minEdgeRings=new ArrayList();var de=this._startDe;do{if(de.getMinEdgeRing()===null){var minEr=new MinimalEdgeRing(de,this$1._geometryFactory);minEdgeRings.add(minEr);}de=de.getNext();}while(de!==this._startDe);return minEdgeRings;};MaximalEdgeRing.prototype.setEdgeRing=function setEdgeRing(de,er){de.setEdgeRing(er);};MaximalEdgeRing.prototype.linkDirectedEdgesForMinimalEdgeRings=function linkDirectedEdgesForMinimalEdgeRings(){var this$1=this;var de=this._startDe;do{var node=de.getNode();node.getEdges().linkMinimalDirectedEdges(this$1);de=de.getNext();}while(de!==this._startDe);};MaximalEdgeRing.prototype.getNext=function getNext(de){return de.getNext();};MaximalEdgeRing.prototype.interfaces_=function interfaces_(){return [];};MaximalEdgeRing.prototype.getClass=function getClass(){return MaximalEdgeRing;};return MaximalEdgeRing;}(EdgeRing);var GraphComponent=function GraphComponent(){this._label=null;this._isInResult=false;this._isCovered=false;this._isCoveredSet=false;this._isVisited=false;if(arguments.length===0);else if(arguments.length===1){var label=arguments[0];this._label=label;}};GraphComponent.prototype.setVisited=function setVisited(isVisited){this._isVisited=isVisited;};GraphComponent.prototype.setInResult=function setInResult(isInResult){this._isInResult=isInResult;};GraphComponent.prototype.isCovered=function isCovered(){return this._isCovered;};GraphComponent.prototype.isCoveredSet=function isCoveredSet(){return this._isCoveredSet;};GraphComponent.prototype.setLabel=function setLabel(label){this._label=label;};GraphComponent.prototype.getLabel=function getLabel(){return this._label;};GraphComponent.prototype.setCovered=function setCovered(isCovered){this._isCovered=isCovered;this._isCoveredSet=true;};GraphComponent.prototype.updateIM=function updateIM(im){Assert.isTrue(this._label.getGeometryCount()>=2,'found partial label');this.computeIM(im);};GraphComponent.prototype.isInResult=function isInResult(){return this._isInResult;};GraphComponent.prototype.isVisited=function isVisited(){return this._isVisited;};GraphComponent.prototype.interfaces_=function interfaces_(){return [];};GraphComponent.prototype.getClass=function getClass(){return GraphComponent;};var Node$1=function(GraphComponent$$1){function Node(){GraphComponent$$1.call(this);this._coord=null;this._edges=null;var coord=arguments[0];var edges=arguments[1];this._coord=coord;this._edges=edges;this._label=new Label(0,Location.NONE);}if(GraphComponent$$1)Node.__proto__=GraphComponent$$1;Node.prototype=Object.create(GraphComponent$$1&&GraphComponent$$1.prototype);Node.prototype.constructor=Node;Node.prototype.isIncidentEdgeInResult=function isIncidentEdgeInResult(){for(var it=this.getEdges().getEdges().iterator();it.hasNext();){var de=it.next();if(de.getEdge().isInResult()){return true;}}return false;};Node.prototype.isIsolated=function isIsolated(){return this._label.getGeometryCount()===1;};Node.prototype.getCoordinate=function getCoordinate(){return this._coord;};Node.prototype.print=function print(out){out.println('node '+this._coord+' lbl: '+this._label);};Node.prototype.computeIM=function computeIM(im){};Node.prototype.computeMergedLocation=function computeMergedLocation(label2,eltIndex){var loc=Location.NONE;loc=this._label.getLocation(eltIndex);if(!label2.isNull(eltIndex)){var nLoc=label2.getLocation(eltIndex);if(loc!==Location.BOUNDARY){loc=nLoc;}}return loc;};Node.prototype.setLabel=function setLabel(){if(arguments.length===2){var argIndex=arguments[0];var onLocation=arguments[1];if(this._label===null){this._label=new Label(argIndex,onLocation);}else {this._label.setLocation(argIndex,onLocation);}}else {return GraphComponent$$1.prototype.setLabel.apply(this,arguments);}};Node.prototype.getEdges=function getEdges(){return this._edges;};Node.prototype.mergeLabel=function mergeLabel(){var this$1=this;if(arguments[0]instanceof Node){var n=arguments[0];this.mergeLabel(n._label);}else if(arguments[0]instanceof Label){var label2=arguments[0];for(var i=0;i<2;i++){var loc=this$1.computeMergedLocation(label2,i);var thisLoc=this$1._label.getLocation(i);if(thisLoc===Location.NONE){this$1._label.setLocation(i,loc);}}}};Node.prototype.add=function add(e){this._edges.insert(e);e.setNode(this);};Node.prototype.setLabelBoundary=function setLabelBoundary(argIndex){if(this._label===null){return null;}var loc=Location.NONE;if(this._label!==null){loc=this._label.getLocation(argIndex);}var newLoc=null;switch(loc){case Location.BOUNDARY:newLoc=Location.INTERIOR;break;case Location.INTERIOR:newLoc=Location.BOUNDARY;break;default:newLoc=Location.BOUNDARY;break;}this._label.setLocation(argIndex,newLoc);};Node.prototype.interfaces_=function interfaces_(){return [];};Node.prototype.getClass=function getClass(){return Node;};return Node;}(GraphComponent);var NodeMap=function NodeMap(){this.nodeMap=new TreeMap();this.nodeFact=null;var nodeFact=arguments[0];this.nodeFact=nodeFact;};NodeMap.prototype.find=function find(coord){return this.nodeMap.get(coord);};NodeMap.prototype.addNode=function addNode(){if(arguments[0]instanceof Coordinate){var coord=arguments[0];var node=this.nodeMap.get(coord);if(node===null){node=this.nodeFact.createNode(coord);this.nodeMap.put(coord,node);}return node;}else if(arguments[0]instanceof Node$1){var n=arguments[0];var node$1=this.nodeMap.get(n.getCoordinate());if(node$1===null){this.nodeMap.put(n.getCoordinate(),n);return n;}node$1.mergeLabel(n);return node$1;}};NodeMap.prototype.print=function print(out){for(var it=this.iterator();it.hasNext();){var n=it.next();n.print(out);}};NodeMap.prototype.iterator=function iterator(){return this.nodeMap.values().iterator();};NodeMap.prototype.values=function values(){return this.nodeMap.values();};NodeMap.prototype.getBoundaryNodes=function getBoundaryNodes(geomIndex){var bdyNodes=new ArrayList();for(var i=this.iterator();i.hasNext();){var node=i.next();if(node.getLabel().getLocation(geomIndex)===Location.BOUNDARY){bdyNodes.add(node);}}return bdyNodes;};NodeMap.prototype.add=function add(e){var p=e.getCoordinate();var n=this.addNode(p);n.add(e);};NodeMap.prototype.interfaces_=function interfaces_(){return [];};NodeMap.prototype.getClass=function getClass(){return NodeMap;};var Quadrant=function Quadrant(){};var staticAccessors$21={NE:{configurable:true},NW:{configurable:true},SW:{configurable:true},SE:{configurable:true}};Quadrant.prototype.interfaces_=function interfaces_(){return [];};Quadrant.prototype.getClass=function getClass(){return Quadrant;};Quadrant.isNorthern=function isNorthern(quad){return quad===Quadrant.NE||quad===Quadrant.NW;};Quadrant.isOpposite=function isOpposite(quad1,quad2){if(quad1===quad2){return false;}var diff=(quad1-quad2+4)%4;if(diff===2){return true;}return false;};Quadrant.commonHalfPlane=function commonHalfPlane(quad1,quad2){if(quad1===quad2){return quad1;}var diff=(quad1-quad2+4)%4;if(diff===2){return -1;}var min=quad1<quad2?quad1:quad2;var max=quad1>quad2?quad1:quad2;if(min===0&&max===3){return 3;}return min;};Quadrant.isInHalfPlane=function isInHalfPlane(quad,halfPlane){if(halfPlane===Quadrant.SE){return quad===Quadrant.SE||quad===Quadrant.SW;}return quad===halfPlane||quad===halfPlane+1;};Quadrant.quadrant=function quadrant(){if(typeof arguments[0]==='number'&&typeof arguments[1]==='number'){var dx=arguments[0];var dy=arguments[1];if(dx===0.0&&dy===0.0){throw new IllegalArgumentException('Cannot compute the quadrant for point ( '+dx+', '+dy+' )');}if(dx>=0.0){if(dy>=0.0){return Quadrant.NE;}else {return Quadrant.SE;}}else {if(dy>=0.0){return Quadrant.NW;}else {return Quadrant.SW;}}}else if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Coordinate){var p0=arguments[0];var p1=arguments[1];if(p1.x===p0.x&&p1.y===p0.y){throw new IllegalArgumentException('Cannot compute the quadrant for two identical points '+p0);}if(p1.x>=p0.x){if(p1.y>=p0.y){return Quadrant.NE;}else {return Quadrant.SE;}}else {if(p1.y>=p0.y){return Quadrant.NW;}else {return Quadrant.SW;}}}};staticAccessors$21.NE.get=function(){return 0;};staticAccessors$21.NW.get=function(){return 1;};staticAccessors$21.SW.get=function(){return 2;};staticAccessors$21.SE.get=function(){return 3;};Object.defineProperties(Quadrant,staticAccessors$21);var EdgeEnd=function EdgeEnd(){this._edge=null;this._label=null;this._node=null;this._p0=null;this._p1=null;this._dx=null;this._dy=null;this._quadrant=null;if(arguments.length===1){var edge=arguments[0];this._edge=edge;}else if(arguments.length===3){var edge$1=arguments[0];var p0=arguments[1];var p1=arguments[2];var label=null;this._edge=edge$1;this.init(p0,p1);this._label=label;}else if(arguments.length===4){var edge$2=arguments[0];var p0$1=arguments[1];var p1$1=arguments[2];var label$1=arguments[3];this._edge=edge$2;this.init(p0$1,p1$1);this._label=label$1;}};EdgeEnd.prototype.compareDirection=function compareDirection(e){if(this._dx===e._dx&&this._dy===e._dy){return 0;}if(this._quadrant>e._quadrant){return 1;}if(this._quadrant<e._quadrant){return -1;}return CGAlgorithms.computeOrientation(e._p0,e._p1,this._p1);};EdgeEnd.prototype.getDy=function getDy(){return this._dy;};EdgeEnd.prototype.getCoordinate=function getCoordinate(){return this._p0;};EdgeEnd.prototype.setNode=function setNode(node){this._node=node;};EdgeEnd.prototype.print=function print(out){var angle=Math.atan2(this._dy,this._dx);var className=this.getClass().getName();var lastDotPos=className.lastIndexOf('.');var name=className.substring(lastDotPos+1);out.print('  '+name+': '+this._p0+' - '+this._p1+' '+this._quadrant+':'+angle+'   '+this._label);};EdgeEnd.prototype.compareTo=function compareTo(obj){var e=obj;return this.compareDirection(e);};EdgeEnd.prototype.getDirectedCoordinate=function getDirectedCoordinate(){return this._p1;};EdgeEnd.prototype.getDx=function getDx(){return this._dx;};EdgeEnd.prototype.getLabel=function getLabel(){return this._label;};EdgeEnd.prototype.getEdge=function getEdge(){return this._edge;};EdgeEnd.prototype.getQuadrant=function getQuadrant(){return this._quadrant;};EdgeEnd.prototype.getNode=function getNode(){return this._node;};EdgeEnd.prototype.toString=function toString(){var angle=Math.atan2(this._dy,this._dx);var className=this.getClass().getName();var lastDotPos=className.lastIndexOf('.');var name=className.substring(lastDotPos+1);return '  '+name+': '+this._p0+' - '+this._p1+' '+this._quadrant+':'+angle+'   '+this._label;};EdgeEnd.prototype.computeLabel=function computeLabel(boundaryNodeRule){};EdgeEnd.prototype.init=function init(p0,p1){this._p0=p0;this._p1=p1;this._dx=p1.x-p0.x;this._dy=p1.y-p0.y;this._quadrant=Quadrant.quadrant(this._dx,this._dy);Assert.isTrue(!(this._dx===0&&this._dy===0),'EdgeEnd with identical endpoints found');};EdgeEnd.prototype.interfaces_=function interfaces_(){return [Comparable];};EdgeEnd.prototype.getClass=function getClass(){return EdgeEnd;};var DirectedEdge=function(EdgeEnd$$1){function DirectedEdge(){var edge=arguments[0];var isForward=arguments[1];EdgeEnd$$1.call(this,edge);this._isForward=null;this._isInResult=false;this._isVisited=false;this._sym=null;this._next=null;this._nextMin=null;this._edgeRing=null;this._minEdgeRing=null;this._depth=[0,-999,-999];this._isForward=isForward;if(isForward){this.init(edge.getCoordinate(0),edge.getCoordinate(1));}else {var n=edge.getNumPoints()-1;this.init(edge.getCoordinate(n),edge.getCoordinate(n-1));}this.computeDirectedLabel();}if(EdgeEnd$$1)DirectedEdge.__proto__=EdgeEnd$$1;DirectedEdge.prototype=Object.create(EdgeEnd$$1&&EdgeEnd$$1.prototype);DirectedEdge.prototype.constructor=DirectedEdge;DirectedEdge.prototype.getNextMin=function getNextMin(){return this._nextMin;};DirectedEdge.prototype.getDepth=function getDepth(position){return this._depth[position];};DirectedEdge.prototype.setVisited=function setVisited(isVisited){this._isVisited=isVisited;};DirectedEdge.prototype.computeDirectedLabel=function computeDirectedLabel(){this._label=new Label(this._edge.getLabel());if(!this._isForward){this._label.flip();}};DirectedEdge.prototype.getNext=function getNext(){return this._next;};DirectedEdge.prototype.setDepth=function setDepth(position,depthVal){if(this._depth[position]!==-999){if(this._depth[position]!==depthVal){throw new TopologyException('assigned depths do not match',this.getCoordinate());}}this._depth[position]=depthVal;};DirectedEdge.prototype.isInteriorAreaEdge=function isInteriorAreaEdge(){var this$1=this;var isInteriorAreaEdge=true;for(var i=0;i<2;i++){if(!(this$1._label.isArea(i)&&this$1._label.getLocation(i,Position.LEFT)===Location.INTERIOR&&this$1._label.getLocation(i,Position.RIGHT)===Location.INTERIOR)){isInteriorAreaEdge=false;}}return isInteriorAreaEdge;};DirectedEdge.prototype.setNextMin=function setNextMin(nextMin){this._nextMin=nextMin;};DirectedEdge.prototype.print=function print(out){EdgeEnd$$1.prototype.print.call(this,out);out.print(' '+this._depth[Position.LEFT]+'/'+this._depth[Position.RIGHT]);out.print(' ('+this.getDepthDelta()+')');if(this._isInResult){out.print(' inResult');}};DirectedEdge.prototype.setMinEdgeRing=function setMinEdgeRing(minEdgeRing){this._minEdgeRing=minEdgeRing;};DirectedEdge.prototype.isLineEdge=function isLineEdge(){var isLine=this._label.isLine(0)||this._label.isLine(1);var isExteriorIfArea0=!this._label.isArea(0)||this._label.allPositionsEqual(0,Location.EXTERIOR);var isExteriorIfArea1=!this._label.isArea(1)||this._label.allPositionsEqual(1,Location.EXTERIOR);return isLine&&isExteriorIfArea0&&isExteriorIfArea1;};DirectedEdge.prototype.setEdgeRing=function setEdgeRing(edgeRing){this._edgeRing=edgeRing;};DirectedEdge.prototype.getMinEdgeRing=function getMinEdgeRing(){return this._minEdgeRing;};DirectedEdge.prototype.getDepthDelta=function getDepthDelta(){var depthDelta=this._edge.getDepthDelta();if(!this._isForward){depthDelta=-depthDelta;}return depthDelta;};DirectedEdge.prototype.setInResult=function setInResult(isInResult){this._isInResult=isInResult;};DirectedEdge.prototype.getSym=function getSym(){return this._sym;};DirectedEdge.prototype.isForward=function isForward(){return this._isForward;};DirectedEdge.prototype.getEdge=function getEdge(){return this._edge;};DirectedEdge.prototype.printEdge=function printEdge(out){this.print(out);out.print(' ');if(this._isForward){this._edge.print(out);}else {this._edge.printReverse(out);}};DirectedEdge.prototype.setSym=function setSym(de){this._sym=de;};DirectedEdge.prototype.setVisitedEdge=function setVisitedEdge(isVisited){this.setVisited(isVisited);this._sym.setVisited(isVisited);};DirectedEdge.prototype.setEdgeDepths=function setEdgeDepths(position,depth){var depthDelta=this.getEdge().getDepthDelta();if(!this._isForward){depthDelta=-depthDelta;}var directionFactor=1;if(position===Position.LEFT){directionFactor=-1;}var oppositePos=Position.opposite(position);var delta=depthDelta*directionFactor;var oppositeDepth=depth+delta;this.setDepth(position,depth);this.setDepth(oppositePos,oppositeDepth);};DirectedEdge.prototype.getEdgeRing=function getEdgeRing(){return this._edgeRing;};DirectedEdge.prototype.isInResult=function isInResult(){return this._isInResult;};DirectedEdge.prototype.setNext=function setNext(next){this._next=next;};DirectedEdge.prototype.isVisited=function isVisited(){return this._isVisited;};DirectedEdge.prototype.interfaces_=function interfaces_(){return [];};DirectedEdge.prototype.getClass=function getClass(){return DirectedEdge;};DirectedEdge.depthFactor=function depthFactor(currLocation,nextLocation){if(currLocation===Location.EXTERIOR&&nextLocation===Location.INTERIOR){return 1;}else if(currLocation===Location.INTERIOR&&nextLocation===Location.EXTERIOR){return -1;}return 0;};return DirectedEdge;}(EdgeEnd);var NodeFactory=function NodeFactory(){};NodeFactory.prototype.createNode=function createNode(coord){return new Node$1(coord,null);};NodeFactory.prototype.interfaces_=function interfaces_(){return [];};NodeFactory.prototype.getClass=function getClass(){return NodeFactory;};var PlanarGraph=function PlanarGraph(){this._edges=new ArrayList();this._nodes=null;this._edgeEndList=new ArrayList();if(arguments.length===0){this._nodes=new NodeMap(new NodeFactory());}else if(arguments.length===1){var nodeFact=arguments[0];this._nodes=new NodeMap(nodeFact);}};PlanarGraph.prototype.printEdges=function printEdges(out){var this$1=this;out.println('Edges:');for(var i=0;i<this._edges.size();i++){out.println('edge '+i+':');var e=this$1._edges.get(i);e.print(out);e.eiList.print(out);}};PlanarGraph.prototype.find=function find(coord){return this._nodes.find(coord);};PlanarGraph.prototype.addNode=function addNode(){if(arguments[0]instanceof Node$1){var node=arguments[0];return this._nodes.addNode(node);}else if(arguments[0]instanceof Coordinate){var coord=arguments[0];return this._nodes.addNode(coord);}};PlanarGraph.prototype.getNodeIterator=function getNodeIterator(){return this._nodes.iterator();};PlanarGraph.prototype.linkResultDirectedEdges=function linkResultDirectedEdges(){for(var nodeit=this._nodes.iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().linkResultDirectedEdges();}};PlanarGraph.prototype.debugPrintln=function debugPrintln(o){System.out.println(o);};PlanarGraph.prototype.isBoundaryNode=function isBoundaryNode(geomIndex,coord){var node=this._nodes.find(coord);if(node===null){return false;}var label=node.getLabel();if(label!==null&&label.getLocation(geomIndex)===Location.BOUNDARY){return true;}return false;};PlanarGraph.prototype.linkAllDirectedEdges=function linkAllDirectedEdges(){for(var nodeit=this._nodes.iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().linkAllDirectedEdges();}};PlanarGraph.prototype.matchInSameDirection=function matchInSameDirection(p0,p1,ep0,ep1){if(!p0.equals(ep0)){return false;}if(CGAlgorithms.computeOrientation(p0,p1,ep1)===CGAlgorithms.COLLINEAR&&Quadrant.quadrant(p0,p1)===Quadrant.quadrant(ep0,ep1)){return true;}return false;};PlanarGraph.prototype.getEdgeEnds=function getEdgeEnds(){return this._edgeEndList;};PlanarGraph.prototype.debugPrint=function debugPrint(o){System.out.print(o);};PlanarGraph.prototype.getEdgeIterator=function getEdgeIterator(){return this._edges.iterator();};PlanarGraph.prototype.findEdgeInSameDirection=function findEdgeInSameDirection(p0,p1){var this$1=this;for(var i=0;i<this._edges.size();i++){var e=this$1._edges.get(i);var eCoord=e.getCoordinates();if(this$1.matchInSameDirection(p0,p1,eCoord[0],eCoord[1])){return e;}if(this$1.matchInSameDirection(p0,p1,eCoord[eCoord.length-1],eCoord[eCoord.length-2])){return e;}}return null;};PlanarGraph.prototype.insertEdge=function insertEdge(e){this._edges.add(e);};PlanarGraph.prototype.findEdgeEnd=function findEdgeEnd(e){for(var i=this.getEdgeEnds().iterator();i.hasNext();){var ee=i.next();if(ee.getEdge()===e){return ee;}}return null;};PlanarGraph.prototype.addEdges=function addEdges(edgesToAdd){var this$1=this;for(var it=edgesToAdd.iterator();it.hasNext();){var e=it.next();this$1._edges.add(e);var de1=new DirectedEdge(e,true);var de2=new DirectedEdge(e,false);de1.setSym(de2);de2.setSym(de1);this$1.add(de1);this$1.add(de2);}};PlanarGraph.prototype.add=function add(e){this._nodes.add(e);this._edgeEndList.add(e);};PlanarGraph.prototype.getNodes=function getNodes(){return this._nodes.values();};PlanarGraph.prototype.findEdge=function findEdge(p0,p1){var this$1=this;for(var i=0;i<this._edges.size();i++){var e=this$1._edges.get(i);var eCoord=e.getCoordinates();if(p0.equals(eCoord[0])&&p1.equals(eCoord[1])){return e;}}return null;};PlanarGraph.prototype.interfaces_=function interfaces_(){return [];};PlanarGraph.prototype.getClass=function getClass(){return PlanarGraph;};PlanarGraph.linkResultDirectedEdges=function linkResultDirectedEdges(nodes){for(var nodeit=nodes.iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().linkResultDirectedEdges();}};var PolygonBuilder=function PolygonBuilder(){this._geometryFactory=null;this._shellList=new ArrayList();var geometryFactory=arguments[0];this._geometryFactory=geometryFactory;};PolygonBuilder.prototype.sortShellsAndHoles=function sortShellsAndHoles(edgeRings,shellList,freeHoleList){for(var it=edgeRings.iterator();it.hasNext();){var er=it.next();if(er.isHole()){freeHoleList.add(er);}else {shellList.add(er);}}};PolygonBuilder.prototype.computePolygons=function computePolygons(shellList){var this$1=this;var resultPolyList=new ArrayList();for(var it=shellList.iterator();it.hasNext();){var er=it.next();var poly=er.toPolygon(this$1._geometryFactory);resultPolyList.add(poly);}return resultPolyList;};PolygonBuilder.prototype.placeFreeHoles=function placeFreeHoles(shellList,freeHoleList){var this$1=this;for(var it=freeHoleList.iterator();it.hasNext();){var hole=it.next();if(hole.getShell()===null){var shell=this$1.findEdgeRingContaining(hole,shellList);if(shell===null){throw new TopologyException('unable to assign hole to a shell',hole.getCoordinate(0));}hole.setShell(shell);}}};PolygonBuilder.prototype.buildMinimalEdgeRings=function buildMinimalEdgeRings(maxEdgeRings,shellList,freeHoleList){var this$1=this;var edgeRings=new ArrayList();for(var it=maxEdgeRings.iterator();it.hasNext();){var er=it.next();if(er.getMaxNodeDegree()>2){er.linkDirectedEdgesForMinimalEdgeRings();var minEdgeRings=er.buildMinimalRings();var shell=this$1.findShell(minEdgeRings);if(shell!==null){this$1.placePolygonHoles(shell,minEdgeRings);shellList.add(shell);}else {freeHoleList.addAll(minEdgeRings);}}else {edgeRings.add(er);}}return edgeRings;};PolygonBuilder.prototype.containsPoint=function containsPoint(p){for(var it=this._shellList.iterator();it.hasNext();){var er=it.next();if(er.containsPoint(p)){return true;}}return false;};PolygonBuilder.prototype.buildMaximalEdgeRings=function buildMaximalEdgeRings(dirEdges){var this$1=this;var maxEdgeRings=new ArrayList();for(var it=dirEdges.iterator();it.hasNext();){var de=it.next();if(de.isInResult()&&de.getLabel().isArea()){if(de.getEdgeRing()===null){var er=new MaximalEdgeRing(de,this$1._geometryFactory);maxEdgeRings.add(er);er.setInResult();}}}return maxEdgeRings;};PolygonBuilder.prototype.placePolygonHoles=function placePolygonHoles(shell,minEdgeRings){for(var it=minEdgeRings.iterator();it.hasNext();){var er=it.next();if(er.isHole()){er.setShell(shell);}}};PolygonBuilder.prototype.getPolygons=function getPolygons(){var resultPolyList=this.computePolygons(this._shellList);return resultPolyList;};PolygonBuilder.prototype.findEdgeRingContaining=function findEdgeRingContaining(testEr,shellList){var testRing=testEr.getLinearRing();var testEnv=testRing.getEnvelopeInternal();var testPt=testRing.getCoordinateN(0);var minShell=null;var minEnv=null;for(var it=shellList.iterator();it.hasNext();){var tryShell=it.next();var tryRing=tryShell.getLinearRing();var tryEnv=tryRing.getEnvelopeInternal();if(minShell!==null){minEnv=minShell.getLinearRing().getEnvelopeInternal();}var isContained=false;if(tryEnv.contains(testEnv)&&CGAlgorithms.isPointInRing(testPt,tryRing.getCoordinates())){isContained=true;}if(isContained){if(minShell===null||minEnv.contains(tryEnv)){minShell=tryShell;}}}return minShell;};PolygonBuilder.prototype.findShell=function findShell(minEdgeRings){var shellCount=0;var shell=null;for(var it=minEdgeRings.iterator();it.hasNext();){var er=it.next();if(!er.isHole()){shell=er;shellCount++;}}Assert.isTrue(shellCount<=1,'found two shells in MinimalEdgeRing list');return shell;};PolygonBuilder.prototype.add=function add(){if(arguments.length===1){var graph=arguments[0];this.add(graph.getEdgeEnds(),graph.getNodes());}else if(arguments.length===2){var dirEdges=arguments[0];var nodes=arguments[1];PlanarGraph.linkResultDirectedEdges(nodes);var maxEdgeRings=this.buildMaximalEdgeRings(dirEdges);var freeHoleList=new ArrayList();var edgeRings=this.buildMinimalEdgeRings(maxEdgeRings,this._shellList,freeHoleList);this.sortShellsAndHoles(edgeRings,this._shellList,freeHoleList);this.placeFreeHoles(this._shellList,freeHoleList);}};PolygonBuilder.prototype.interfaces_=function interfaces_(){return [];};PolygonBuilder.prototype.getClass=function getClass(){return PolygonBuilder;};var Boundable=function Boundable(){};Boundable.prototype.getBounds=function getBounds(){};Boundable.prototype.interfaces_=function interfaces_(){return [];};Boundable.prototype.getClass=function getClass(){return Boundable;};var ItemBoundable=function ItemBoundable(){this._bounds=null;this._item=null;var bounds=arguments[0];var item=arguments[1];this._bounds=bounds;this._item=item;};ItemBoundable.prototype.getItem=function getItem(){return this._item;};ItemBoundable.prototype.getBounds=function getBounds(){return this._bounds;};ItemBoundable.prototype.interfaces_=function interfaces_(){return [Boundable,Serializable];};ItemBoundable.prototype.getClass=function getClass(){return ItemBoundable;};var PriorityQueue=function PriorityQueue(){this._size=null;this._items=null;this._size=0;this._items=new ArrayList();this._items.add(null);};PriorityQueue.prototype.poll=function poll(){if(this.isEmpty()){return null;}var minItem=this._items.get(1);this._items.set(1,this._items.get(this._size));this._size-=1;this.reorder(1);return minItem;};PriorityQueue.prototype.size=function size(){return this._size;};PriorityQueue.prototype.reorder=function reorder(hole){var this$1=this;var child=null;var tmp=this._items.get(hole);for(;hole*2<=this._size;hole=child){child=hole*2;if(child!==this$1._size&&this$1._items.get(child+1).compareTo(this$1._items.get(child))<0){child++;}if(this$1._items.get(child).compareTo(tmp)<0){this$1._items.set(hole,this$1._items.get(child));}else {break;}}this._items.set(hole,tmp);};PriorityQueue.prototype.clear=function clear(){this._size=0;this._items.clear();};PriorityQueue.prototype.isEmpty=function isEmpty(){return this._size===0;};PriorityQueue.prototype.add=function add(x){var this$1=this;this._items.add(null);this._size+=1;var hole=this._size;this._items.set(0,x);for(;x.compareTo(this._items.get(Math.trunc(hole/2)))<0;hole/=2){this$1._items.set(hole,this$1._items.get(Math.trunc(hole/2)));}this._items.set(hole,x);};PriorityQueue.prototype.interfaces_=function interfaces_(){return [];};PriorityQueue.prototype.getClass=function getClass(){return PriorityQueue;};var ItemVisitor=function ItemVisitor(){};ItemVisitor.prototype.visitItem=function visitItem(item){};ItemVisitor.prototype.interfaces_=function interfaces_(){return [];};ItemVisitor.prototype.getClass=function getClass(){return ItemVisitor;};var SpatialIndex=function SpatialIndex(){};SpatialIndex.prototype.insert=function insert(itemEnv,item){};SpatialIndex.prototype.remove=function remove(itemEnv,item){};SpatialIndex.prototype.query=function query(){// if (arguments.length === 1) {
  // const searchEnv = arguments[0]
  // } else if (arguments.length === 2) {
  // const searchEnv = arguments[0]
  // const visitor = arguments[1]
  // }
  };SpatialIndex.prototype.interfaces_=function interfaces_(){return [];};SpatialIndex.prototype.getClass=function getClass(){return SpatialIndex;};var AbstractNode=function AbstractNode(){this._childBoundables=new ArrayList();this._bounds=null;this._level=null;if(arguments.length===0);else if(arguments.length===1){var level=arguments[0];this._level=level;}};var staticAccessors$22={serialVersionUID:{configurable:true}};AbstractNode.prototype.getLevel=function getLevel(){return this._level;};AbstractNode.prototype.size=function size(){return this._childBoundables.size();};AbstractNode.prototype.getChildBoundables=function getChildBoundables(){return this._childBoundables;};AbstractNode.prototype.addChildBoundable=function addChildBoundable(childBoundable){Assert.isTrue(this._bounds===null);this._childBoundables.add(childBoundable);};AbstractNode.prototype.isEmpty=function isEmpty(){return this._childBoundables.isEmpty();};AbstractNode.prototype.getBounds=function getBounds(){if(this._bounds===null){this._bounds=this.computeBounds();}return this._bounds;};AbstractNode.prototype.interfaces_=function interfaces_(){return [Boundable,Serializable];};AbstractNode.prototype.getClass=function getClass(){return AbstractNode;};staticAccessors$22.serialVersionUID.get=function(){return 6493722185909573708;};Object.defineProperties(AbstractNode,staticAccessors$22);var Collections=function Collections(){};Collections.reverseOrder=function reverseOrder(){return {compare:function compare(a,b){return b.compareTo(a);}};};Collections.min=function min(l){Collections.sort(l);return l.get(0);};Collections.sort=function sort(l,c){var a=l.toArray();if(c){Arrays.sort(a,c);}else {Arrays.sort(a);}var i=l.iterator();for(var pos=0,alen=a.length;pos<alen;pos++){i.next();i.set(a[pos]);}};Collections.singletonList=function singletonList(o){var arrayList=new ArrayList();arrayList.add(o);return arrayList;};var BoundablePair=function BoundablePair(){this._boundable1=null;this._boundable2=null;this._distance=null;this._itemDistance=null;var boundable1=arguments[0];var boundable2=arguments[1];var itemDistance=arguments[2];this._boundable1=boundable1;this._boundable2=boundable2;this._itemDistance=itemDistance;this._distance=this.distance();};BoundablePair.prototype.expandToQueue=function expandToQueue(priQ,minDistance){var isComp1=BoundablePair.isComposite(this._boundable1);var isComp2=BoundablePair.isComposite(this._boundable2);if(isComp1&&isComp2){if(BoundablePair.area(this._boundable1)>BoundablePair.area(this._boundable2)){this.expand(this._boundable1,this._boundable2,priQ,minDistance);return null;}else {this.expand(this._boundable2,this._boundable1,priQ,minDistance);return null;}}else if(isComp1){this.expand(this._boundable1,this._boundable2,priQ,minDistance);return null;}else if(isComp2){this.expand(this._boundable2,this._boundable1,priQ,minDistance);return null;}throw new IllegalArgumentException('neither boundable is composite');};BoundablePair.prototype.isLeaves=function isLeaves(){return !(BoundablePair.isComposite(this._boundable1)||BoundablePair.isComposite(this._boundable2));};BoundablePair.prototype.compareTo=function compareTo(o){var nd=o;if(this._distance<nd._distance){return -1;}if(this._distance>nd._distance){return 1;}return 0;};BoundablePair.prototype.expand=function expand(bndComposite,bndOther,priQ,minDistance){var this$1=this;var children=bndComposite.getChildBoundables();for(var i=children.iterator();i.hasNext();){var child=i.next();var bp=new BoundablePair(child,bndOther,this$1._itemDistance);if(bp.getDistance()<minDistance){priQ.add(bp);}}};BoundablePair.prototype.getBoundable=function getBoundable(i){if(i===0){return this._boundable1;}return this._boundable2;};BoundablePair.prototype.getDistance=function getDistance(){return this._distance;};BoundablePair.prototype.distance=function distance(){if(this.isLeaves()){return this._itemDistance.distance(this._boundable1,this._boundable2);}return this._boundable1.getBounds().distance(this._boundable2.getBounds());};BoundablePair.prototype.interfaces_=function interfaces_(){return [Comparable];};BoundablePair.prototype.getClass=function getClass(){return BoundablePair;};BoundablePair.area=function area(b){return b.getBounds().getArea();};BoundablePair.isComposite=function isComposite(item){return item instanceof AbstractNode;};var AbstractSTRtree=function AbstractSTRtree(){this._root=null;this._built=false;this._itemBoundables=new ArrayList();this._nodeCapacity=null;if(arguments.length===0){var nodeCapacity=AbstractSTRtree.DEFAULT_NODE_CAPACITY;this._nodeCapacity=nodeCapacity;}else if(arguments.length===1){var nodeCapacity$1=arguments[0];Assert.isTrue(nodeCapacity$1>1,'Node capacity must be greater than 1');this._nodeCapacity=nodeCapacity$1;}};var staticAccessors$23={IntersectsOp:{configurable:true},serialVersionUID:{configurable:true},DEFAULT_NODE_CAPACITY:{configurable:true}};AbstractSTRtree.prototype.getNodeCapacity=function getNodeCapacity(){return this._nodeCapacity;};AbstractSTRtree.prototype.lastNode=function lastNode(nodes){return nodes.get(nodes.size()-1);};AbstractSTRtree.prototype.size=function size(){var this$1=this;if(arguments.length===0){if(this.isEmpty()){return 0;}this.build();return this.size(this._root);}else if(arguments.length===1){var node=arguments[0];var size=0;for(var i=node.getChildBoundables().iterator();i.hasNext();){var childBoundable=i.next();if(childBoundable instanceof AbstractNode){size+=this$1.size(childBoundable);}else if(childBoundable instanceof ItemBoundable){size+=1;}}return size;}};AbstractSTRtree.prototype.removeItem=function removeItem(node,item){var childToRemove=null;for(var i=node.getChildBoundables().iterator();i.hasNext();){var childBoundable=i.next();if(childBoundable instanceof ItemBoundable){if(childBoundable.getItem()===item){childToRemove=childBoundable;}}}if(childToRemove!==null){node.getChildBoundables().remove(childToRemove);return true;}return false;};AbstractSTRtree.prototype.itemsTree=function itemsTree(){var this$1=this;if(arguments.length===0){this.build();var valuesTree=this.itemsTree(this._root);if(valuesTree===null){return new ArrayList();}return valuesTree;}else if(arguments.length===1){var node=arguments[0];var valuesTreeForNode=new ArrayList();for(var i=node.getChildBoundables().iterator();i.hasNext();){var childBoundable=i.next();if(childBoundable instanceof AbstractNode){var valuesTreeForChild=this$1.itemsTree(childBoundable);if(valuesTreeForChild!==null){valuesTreeForNode.add(valuesTreeForChild);}}else if(childBoundable instanceof ItemBoundable){valuesTreeForNode.add(childBoundable.getItem());}else {Assert.shouldNeverReachHere();}}if(valuesTreeForNode.size()<=0){return null;}return valuesTreeForNode;}};AbstractSTRtree.prototype.insert=function insert(bounds,item){Assert.isTrue(!this._built,'Cannot insert items into an STR packed R-tree after it has been built.');this._itemBoundables.add(new ItemBoundable(bounds,item));};AbstractSTRtree.prototype.boundablesAtLevel=function boundablesAtLevel(){var this$1=this;if(arguments.length===1){var level=arguments[0];var boundables=new ArrayList();this.boundablesAtLevel(level,this._root,boundables);return boundables;}else if(arguments.length===3){var level$1=arguments[0];var top=arguments[1];var boundables$1=arguments[2];Assert.isTrue(level$1>-2);if(top.getLevel()===level$1){boundables$1.add(top);return null;}for(var i=top.getChildBoundables().iterator();i.hasNext();){var boundable=i.next();if(boundable instanceof AbstractNode){this$1.boundablesAtLevel(level$1,boundable,boundables$1);}else {Assert.isTrue(boundable instanceof ItemBoundable);if(level$1===-1){boundables$1.add(boundable);}}}return null;}};AbstractSTRtree.prototype.query=function query(){var this$1=this;if(arguments.length===1){var searchBounds=arguments[0];this.build();var matches=new ArrayList();if(this.isEmpty()){return matches;}if(this.getIntersectsOp().intersects(this._root.getBounds(),searchBounds)){this.query(searchBounds,this._root,matches);}return matches;}else if(arguments.length===2){var searchBounds$1=arguments[0];var visitor=arguments[1];this.build();if(this.isEmpty()){return null;}if(this.getIntersectsOp().intersects(this._root.getBounds(),searchBounds$1)){this.query(searchBounds$1,this._root,visitor);}}else if(arguments.length===3){if(hasInterface(arguments[2],ItemVisitor)&&arguments[0]instanceof Object&&arguments[1]instanceof AbstractNode){var searchBounds$2=arguments[0];var node=arguments[1];var visitor$1=arguments[2];var childBoundables=node.getChildBoundables();for(var i=0;i<childBoundables.size();i++){var childBoundable=childBoundables.get(i);if(!this$1.getIntersectsOp().intersects(childBoundable.getBounds(),searchBounds$2)){continue;}if(childBoundable instanceof AbstractNode){this$1.query(searchBounds$2,childBoundable,visitor$1);}else if(childBoundable instanceof ItemBoundable){visitor$1.visitItem(childBoundable.getItem());}else {Assert.shouldNeverReachHere();}}}else if(hasInterface(arguments[2],List)&&arguments[0]instanceof Object&&arguments[1]instanceof AbstractNode){var searchBounds$3=arguments[0];var node$1=arguments[1];var matches$1=arguments[2];var childBoundables$1=node$1.getChildBoundables();for(var i$1=0;i$1<childBoundables$1.size();i$1++){var childBoundable$1=childBoundables$1.get(i$1);if(!this$1.getIntersectsOp().intersects(childBoundable$1.getBounds(),searchBounds$3)){continue;}if(childBoundable$1 instanceof AbstractNode){this$1.query(searchBounds$3,childBoundable$1,matches$1);}else if(childBoundable$1 instanceof ItemBoundable){matches$1.add(childBoundable$1.getItem());}else {Assert.shouldNeverReachHere();}}}}};AbstractSTRtree.prototype.build=function build(){if(this._built){return null;}this._root=this._itemBoundables.isEmpty()?this.createNode(0):this.createHigherLevels(this._itemBoundables,-1);this._itemBoundables=null;this._built=true;};AbstractSTRtree.prototype.getRoot=function getRoot(){this.build();return this._root;};AbstractSTRtree.prototype.remove=function remove(){var this$1=this;if(arguments.length===2){var searchBounds=arguments[0];var item=arguments[1];this.build();if(this.getIntersectsOp().intersects(this._root.getBounds(),searchBounds)){return this.remove(searchBounds,this._root,item);}return false;}else if(arguments.length===3){var searchBounds$1=arguments[0];var node=arguments[1];var item$1=arguments[2];var found=this.removeItem(node,item$1);if(found){return true;}var childToPrune=null;for(var i=node.getChildBoundables().iterator();i.hasNext();){var childBoundable=i.next();if(!this$1.getIntersectsOp().intersects(childBoundable.getBounds(),searchBounds$1)){continue;}if(childBoundable instanceof AbstractNode){found=this$1.remove(searchBounds$1,childBoundable,item$1);if(found){childToPrune=childBoundable;break;}}}if(childToPrune!==null){if(childToPrune.getChildBoundables().isEmpty()){node.getChildBoundables().remove(childToPrune);}}return found;}};AbstractSTRtree.prototype.createHigherLevels=function createHigherLevels(boundablesOfALevel,level){Assert.isTrue(!boundablesOfALevel.isEmpty());var parentBoundables=this.createParentBoundables(boundablesOfALevel,level+1);if(parentBoundables.size()===1){return parentBoundables.get(0);}return this.createHigherLevels(parentBoundables,level+1);};AbstractSTRtree.prototype.depth=function depth(){var this$1=this;if(arguments.length===0){if(this.isEmpty()){return 0;}this.build();return this.depth(this._root);}else if(arguments.length===1){var node=arguments[0];var maxChildDepth=0;for(var i=node.getChildBoundables().iterator();i.hasNext();){var childBoundable=i.next();if(childBoundable instanceof AbstractNode){var childDepth=this$1.depth(childBoundable);if(childDepth>maxChildDepth){maxChildDepth=childDepth;}}}return maxChildDepth+1;}};AbstractSTRtree.prototype.createParentBoundables=function createParentBoundables(childBoundables,newLevel){var this$1=this;Assert.isTrue(!childBoundables.isEmpty());var parentBoundables=new ArrayList();parentBoundables.add(this.createNode(newLevel));var sortedChildBoundables=new ArrayList(childBoundables);Collections.sort(sortedChildBoundables,this.getComparator());for(var i=sortedChildBoundables.iterator();i.hasNext();){var childBoundable=i.next();if(this$1.lastNode(parentBoundables).getChildBoundables().size()===this$1.getNodeCapacity()){parentBoundables.add(this$1.createNode(newLevel));}this$1.lastNode(parentBoundables).addChildBoundable(childBoundable);}return parentBoundables;};AbstractSTRtree.prototype.isEmpty=function isEmpty(){if(!this._built){return this._itemBoundables.isEmpty();}return this._root.isEmpty();};AbstractSTRtree.prototype.interfaces_=function interfaces_(){return [Serializable];};AbstractSTRtree.prototype.getClass=function getClass(){return AbstractSTRtree;};AbstractSTRtree.compareDoubles=function compareDoubles(a,b){return a>b?1:a<b?-1:0;};staticAccessors$23.IntersectsOp.get=function(){return IntersectsOp;};staticAccessors$23.serialVersionUID.get=function(){return -3886435814360241337;};staticAccessors$23.DEFAULT_NODE_CAPACITY.get=function(){return 10;};Object.defineProperties(AbstractSTRtree,staticAccessors$23);var IntersectsOp=function IntersectsOp(){};var ItemDistance=function ItemDistance(){};ItemDistance.prototype.distance=function distance(item1,item2){};ItemDistance.prototype.interfaces_=function interfaces_(){return [];};ItemDistance.prototype.getClass=function getClass(){return ItemDistance;};var STRtree=function(AbstractSTRtree$$1){function STRtree(nodeCapacity){nodeCapacity=nodeCapacity||STRtree.DEFAULT_NODE_CAPACITY;AbstractSTRtree$$1.call(this,nodeCapacity);}if(AbstractSTRtree$$1)STRtree.__proto__=AbstractSTRtree$$1;STRtree.prototype=Object.create(AbstractSTRtree$$1&&AbstractSTRtree$$1.prototype);STRtree.prototype.constructor=STRtree;var staticAccessors={STRtreeNode:{configurable:true},serialVersionUID:{configurable:true},xComparator:{configurable:true},yComparator:{configurable:true},intersectsOp:{configurable:true},DEFAULT_NODE_CAPACITY:{configurable:true}};STRtree.prototype.createParentBoundablesFromVerticalSlices=function createParentBoundablesFromVerticalSlices(verticalSlices,newLevel){var this$1=this;Assert.isTrue(verticalSlices.length>0);var parentBoundables=new ArrayList();for(var i=0;i<verticalSlices.length;i++){parentBoundables.addAll(this$1.createParentBoundablesFromVerticalSlice(verticalSlices[i],newLevel));}return parentBoundables;};STRtree.prototype.createNode=function createNode(level){return new STRtreeNode(level);};STRtree.prototype.size=function size(){if(arguments.length===0){return AbstractSTRtree$$1.prototype.size.call(this);}else {return AbstractSTRtree$$1.prototype.size.apply(this,arguments);}};STRtree.prototype.insert=function insert(){if(arguments.length===2){var itemEnv=arguments[0];var item=arguments[1];if(itemEnv.isNull()){return null;}AbstractSTRtree$$1.prototype.insert.call(this,itemEnv,item);}else {return AbstractSTRtree$$1.prototype.insert.apply(this,arguments);}};STRtree.prototype.getIntersectsOp=function getIntersectsOp(){return STRtree.intersectsOp;};STRtree.prototype.verticalSlices=function verticalSlices(childBoundables,sliceCount){var sliceCapacity=Math.trunc(Math.ceil(childBoundables.size()/sliceCount));var slices=new Array(sliceCount).fill(null);var i=childBoundables.iterator();for(var j=0;j<sliceCount;j++){slices[j]=new ArrayList();var boundablesAddedToSlice=0;while(i.hasNext()&&boundablesAddedToSlice<sliceCapacity){var childBoundable=i.next();slices[j].add(childBoundable);boundablesAddedToSlice++;}}return slices;};STRtree.prototype.query=function query(){if(arguments.length===1){var searchEnv=arguments[0];return AbstractSTRtree$$1.prototype.query.call(this,searchEnv);}else if(arguments.length===2){var searchEnv$1=arguments[0];var visitor=arguments[1];AbstractSTRtree$$1.prototype.query.call(this,searchEnv$1,visitor);}else if(arguments.length===3){if(hasInterface(arguments[2],ItemVisitor)&&arguments[0]instanceof Object&&arguments[1]instanceof AbstractNode){var searchBounds=arguments[0];var node=arguments[1];var visitor$1=arguments[2];AbstractSTRtree$$1.prototype.query.call(this,searchBounds,node,visitor$1);}else if(hasInterface(arguments[2],List)&&arguments[0]instanceof Object&&arguments[1]instanceof AbstractNode){var searchBounds$1=arguments[0];var node$1=arguments[1];var matches=arguments[2];AbstractSTRtree$$1.prototype.query.call(this,searchBounds$1,node$1,matches);}}};STRtree.prototype.getComparator=function getComparator(){return STRtree.yComparator;};STRtree.prototype.createParentBoundablesFromVerticalSlice=function createParentBoundablesFromVerticalSlice(childBoundables,newLevel){return AbstractSTRtree$$1.prototype.createParentBoundables.call(this,childBoundables,newLevel);};STRtree.prototype.remove=function remove(){if(arguments.length===2){var itemEnv=arguments[0];var item=arguments[1];return AbstractSTRtree$$1.prototype.remove.call(this,itemEnv,item);}else {return AbstractSTRtree$$1.prototype.remove.apply(this,arguments);}};STRtree.prototype.depth=function depth(){if(arguments.length===0){return AbstractSTRtree$$1.prototype.depth.call(this);}else {return AbstractSTRtree$$1.prototype.depth.apply(this,arguments);}};STRtree.prototype.createParentBoundables=function createParentBoundables(childBoundables,newLevel){Assert.isTrue(!childBoundables.isEmpty());var minLeafCount=Math.trunc(Math.ceil(childBoundables.size()/this.getNodeCapacity()));var sortedChildBoundables=new ArrayList(childBoundables);Collections.sort(sortedChildBoundables,STRtree.xComparator);var verticalSlices=this.verticalSlices(sortedChildBoundables,Math.trunc(Math.ceil(Math.sqrt(minLeafCount))));return this.createParentBoundablesFromVerticalSlices(verticalSlices,newLevel);};STRtree.prototype.nearestNeighbour=function nearestNeighbour(){if(arguments.length===1){if(hasInterface(arguments[0],ItemDistance)){var itemDist=arguments[0];var bp=new BoundablePair(this.getRoot(),this.getRoot(),itemDist);return this.nearestNeighbour(bp);}else if(arguments[0]instanceof BoundablePair){var initBndPair=arguments[0];return this.nearestNeighbour(initBndPair,Double.POSITIVE_INFINITY);}}else if(arguments.length===2){if(arguments[0]instanceof STRtree&&hasInterface(arguments[1],ItemDistance)){var tree=arguments[0];var itemDist$1=arguments[1];var bp$1=new BoundablePair(this.getRoot(),tree.getRoot(),itemDist$1);return this.nearestNeighbour(bp$1);}else if(arguments[0]instanceof BoundablePair&&typeof arguments[1]==='number'){var initBndPair$1=arguments[0];var maxDistance=arguments[1];var distanceLowerBound=maxDistance;var minPair=null;var priQ=new PriorityQueue();priQ.add(initBndPair$1);while(!priQ.isEmpty()&&distanceLowerBound>0.0){var bndPair=priQ.poll();var currentDistance=bndPair.getDistance();if(currentDistance>=distanceLowerBound){break;}if(bndPair.isLeaves()){distanceLowerBound=currentDistance;minPair=bndPair;}else {bndPair.expandToQueue(priQ,distanceLowerBound);}}return [minPair.getBoundable(0).getItem(),minPair.getBoundable(1).getItem()];}}else if(arguments.length===3){var env=arguments[0];var item=arguments[1];var itemDist$2=arguments[2];var bnd=new ItemBoundable(env,item);var bp$2=new BoundablePair(this.getRoot(),bnd,itemDist$2);return this.nearestNeighbour(bp$2)[0];}};STRtree.prototype.interfaces_=function interfaces_(){return [SpatialIndex,Serializable];};STRtree.prototype.getClass=function getClass(){return STRtree;};STRtree.centreX=function centreX(e){return STRtree.avg(e.getMinX(),e.getMaxX());};STRtree.avg=function avg(a,b){return (a+b)/2;};STRtree.centreY=function centreY(e){return STRtree.avg(e.getMinY(),e.getMaxY());};staticAccessors.STRtreeNode.get=function(){return STRtreeNode;};staticAccessors.serialVersionUID.get=function(){return 259274702368956900;};staticAccessors.xComparator.get=function(){return {interfaces_:function interfaces_(){return [Comparator];},compare:function compare(o1,o2){return AbstractSTRtree$$1.compareDoubles(STRtree.centreX(o1.getBounds()),STRtree.centreX(o2.getBounds()));}};};staticAccessors.yComparator.get=function(){return {interfaces_:function interfaces_(){return [Comparator];},compare:function compare(o1,o2){return AbstractSTRtree$$1.compareDoubles(STRtree.centreY(o1.getBounds()),STRtree.centreY(o2.getBounds()));}};};staticAccessors.intersectsOp.get=function(){return {interfaces_:function interfaces_(){return [AbstractSTRtree$$1.IntersectsOp];},intersects:function intersects(aBounds,bBounds){return aBounds.intersects(bBounds);}};};staticAccessors.DEFAULT_NODE_CAPACITY.get=function(){return 10;};Object.defineProperties(STRtree,staticAccessors);return STRtree;}(AbstractSTRtree);var STRtreeNode=function(AbstractNode$$1){function STRtreeNode(){var level=arguments[0];AbstractNode$$1.call(this,level);}if(AbstractNode$$1)STRtreeNode.__proto__=AbstractNode$$1;STRtreeNode.prototype=Object.create(AbstractNode$$1&&AbstractNode$$1.prototype);STRtreeNode.prototype.constructor=STRtreeNode;STRtreeNode.prototype.computeBounds=function computeBounds(){var bounds=null;for(var i=this.getChildBoundables().iterator();i.hasNext();){var childBoundable=i.next();if(bounds===null){bounds=new Envelope(childBoundable.getBounds());}else {bounds.expandToInclude(childBoundable.getBounds());}}return bounds;};STRtreeNode.prototype.interfaces_=function interfaces_(){return [];};STRtreeNode.prototype.getClass=function getClass(){return STRtreeNode;};return STRtreeNode;}(AbstractNode);var SegmentPointComparator=function SegmentPointComparator(){};SegmentPointComparator.prototype.interfaces_=function interfaces_(){return [];};SegmentPointComparator.prototype.getClass=function getClass(){return SegmentPointComparator;};SegmentPointComparator.relativeSign=function relativeSign(x0,x1){if(x0<x1){return -1;}if(x0>x1){return 1;}return 0;};SegmentPointComparator.compare=function compare(octant,p0,p1){if(p0.equals2D(p1)){return 0;}var xSign=SegmentPointComparator.relativeSign(p0.x,p1.x);var ySign=SegmentPointComparator.relativeSign(p0.y,p1.y);switch(octant){case 0:return SegmentPointComparator.compareValue(xSign,ySign);case 1:return SegmentPointComparator.compareValue(ySign,xSign);case 2:return SegmentPointComparator.compareValue(ySign,-xSign);case 3:return SegmentPointComparator.compareValue(-xSign,ySign);case 4:return SegmentPointComparator.compareValue(-xSign,-ySign);case 5:return SegmentPointComparator.compareValue(-ySign,-xSign);case 6:return SegmentPointComparator.compareValue(-ySign,xSign);case 7:return SegmentPointComparator.compareValue(xSign,-ySign);}Assert.shouldNeverReachHere('invalid octant value');return 0;};SegmentPointComparator.compareValue=function compareValue(compareSign0,compareSign1){if(compareSign0<0){return -1;}if(compareSign0>0){return 1;}if(compareSign1<0){return -1;}if(compareSign1>0){return 1;}return 0;};var SegmentNode=function SegmentNode(){this._segString=null;this.coord=null;this.segmentIndex=null;this._segmentOctant=null;this._isInterior=null;var segString=arguments[0];var coord=arguments[1];var segmentIndex=arguments[2];var segmentOctant=arguments[3];this._segString=segString;this.coord=new Coordinate(coord);this.segmentIndex=segmentIndex;this._segmentOctant=segmentOctant;this._isInterior=!coord.equals2D(segString.getCoordinate(segmentIndex));};SegmentNode.prototype.getCoordinate=function getCoordinate(){return this.coord;};SegmentNode.prototype.print=function print(out){out.print(this.coord);out.print(' seg # = '+this.segmentIndex);};SegmentNode.prototype.compareTo=function compareTo(obj){var other=obj;if(this.segmentIndex<other.segmentIndex){return -1;}if(this.segmentIndex>other.segmentIndex){return 1;}if(this.coord.equals2D(other.coord)){return 0;}return SegmentPointComparator.compare(this._segmentOctant,this.coord,other.coord);};SegmentNode.prototype.isEndPoint=function isEndPoint(maxSegmentIndex){if(this.segmentIndex===0&&!this._isInterior){return true;}if(this.segmentIndex===maxSegmentIndex){return true;}return false;};SegmentNode.prototype.isInterior=function isInterior(){return this._isInterior;};SegmentNode.prototype.interfaces_=function interfaces_(){return [Comparable];};SegmentNode.prototype.getClass=function getClass(){return SegmentNode;};// import Iterator from '../../../../java/util/Iterator'
  var SegmentNodeList=function SegmentNodeList(){this._nodeMap=new TreeMap();this._edge=null;var edge=arguments[0];this._edge=edge;};SegmentNodeList.prototype.getSplitCoordinates=function getSplitCoordinates(){var this$1=this;var coordList=new CoordinateList();this.addEndpoints();var it=this.iterator();var eiPrev=it.next();while(it.hasNext()){var ei=it.next();this$1.addEdgeCoordinates(eiPrev,ei,coordList);eiPrev=ei;}return coordList.toCoordinateArray();};SegmentNodeList.prototype.addCollapsedNodes=function addCollapsedNodes(){var this$1=this;var collapsedVertexIndexes=new ArrayList();this.findCollapsesFromInsertedNodes(collapsedVertexIndexes);this.findCollapsesFromExistingVertices(collapsedVertexIndexes);for(var it=collapsedVertexIndexes.iterator();it.hasNext();){var vertexIndex=it.next().intValue();this$1.add(this$1._edge.getCoordinate(vertexIndex),vertexIndex);}};SegmentNodeList.prototype.print=function print(out){out.println('Intersections:');for(var it=this.iterator();it.hasNext();){var ei=it.next();ei.print(out);}};SegmentNodeList.prototype.findCollapsesFromExistingVertices=function findCollapsesFromExistingVertices(collapsedVertexIndexes){var this$1=this;for(var i=0;i<this._edge.size()-2;i++){var p0=this$1._edge.getCoordinate(i);// const p1 = this._edge.getCoordinate(i + 1)
  var p2=this$1._edge.getCoordinate(i+2);if(p0.equals2D(p2)){collapsedVertexIndexes.add(new Integer(i+1));}}};SegmentNodeList.prototype.addEdgeCoordinates=function addEdgeCoordinates(ei0,ei1,coordList){var this$1=this;// let npts = ei1.segmentIndex - ei0.segmentIndex + 2
  var lastSegStartPt=this._edge.getCoordinate(ei1.segmentIndex);var useIntPt1=ei1.isInterior()||!ei1.coord.equals2D(lastSegStartPt);// if (!useIntPt1) {
  // npts--
  // }
  // const ipt = 0
  coordList.add(new Coordinate(ei0.coord),false);for(var i=ei0.segmentIndex+1;i<=ei1.segmentIndex;i++){coordList.add(this$1._edge.getCoordinate(i));}if(useIntPt1){coordList.add(new Coordinate(ei1.coord));}};SegmentNodeList.prototype.iterator=function iterator(){return this._nodeMap.values().iterator();};SegmentNodeList.prototype.addSplitEdges=function addSplitEdges(edgeList){var this$1=this;this.addEndpoints();this.addCollapsedNodes();var it=this.iterator();var eiPrev=it.next();while(it.hasNext()){var ei=it.next();var newEdge=this$1.createSplitEdge(eiPrev,ei);edgeList.add(newEdge);eiPrev=ei;}};SegmentNodeList.prototype.findCollapseIndex=function findCollapseIndex(ei0,ei1,collapsedVertexIndex){if(!ei0.coord.equals2D(ei1.coord)){return false;}var numVerticesBetween=ei1.segmentIndex-ei0.segmentIndex;if(!ei1.isInterior()){numVerticesBetween--;}if(numVerticesBetween===1){collapsedVertexIndex[0]=ei0.segmentIndex+1;return true;}return false;};SegmentNodeList.prototype.findCollapsesFromInsertedNodes=function findCollapsesFromInsertedNodes(collapsedVertexIndexes){var this$1=this;var collapsedVertexIndex=new Array(1).fill(null);var it=this.iterator();var eiPrev=it.next();while(it.hasNext()){var ei=it.next();var isCollapsed=this$1.findCollapseIndex(eiPrev,ei,collapsedVertexIndex);if(isCollapsed){collapsedVertexIndexes.add(new Integer(collapsedVertexIndex[0]));}eiPrev=ei;}};SegmentNodeList.prototype.getEdge=function getEdge(){return this._edge;};SegmentNodeList.prototype.addEndpoints=function addEndpoints(){var maxSegIndex=this._edge.size()-1;this.add(this._edge.getCoordinate(0),0);this.add(this._edge.getCoordinate(maxSegIndex),maxSegIndex);};SegmentNodeList.prototype.createSplitEdge=function createSplitEdge(ei0,ei1){var this$1=this;var npts=ei1.segmentIndex-ei0.segmentIndex+2;var lastSegStartPt=this._edge.getCoordinate(ei1.segmentIndex);var useIntPt1=ei1.isInterior()||!ei1.coord.equals2D(lastSegStartPt);if(!useIntPt1){npts--;}var pts=new Array(npts).fill(null);var ipt=0;pts[ipt++]=new Coordinate(ei0.coord);for(var i=ei0.segmentIndex+1;i<=ei1.segmentIndex;i++){pts[ipt++]=this$1._edge.getCoordinate(i);}if(useIntPt1){pts[ipt]=new Coordinate(ei1.coord);}return new NodedSegmentString(pts,this._edge.getData());};SegmentNodeList.prototype.add=function add(intPt,segmentIndex){var eiNew=new SegmentNode(this._edge,intPt,segmentIndex,this._edge.getSegmentOctant(segmentIndex));var ei=this._nodeMap.get(eiNew);if(ei!==null){Assert.isTrue(ei.coord.equals2D(intPt),'Found equal nodes with different coordinates');return ei;}this._nodeMap.put(eiNew,eiNew);return eiNew;};SegmentNodeList.prototype.checkSplitEdgesCorrectness=function checkSplitEdgesCorrectness(splitEdges){var edgePts=this._edge.getCoordinates();var split0=splitEdges.get(0);var pt0=split0.getCoordinate(0);if(!pt0.equals2D(edgePts[0])){throw new RuntimeException('bad split edge start point at '+pt0);}var splitn=splitEdges.get(splitEdges.size()-1);var splitnPts=splitn.getCoordinates();var ptn=splitnPts[splitnPts.length-1];if(!ptn.equals2D(edgePts[edgePts.length-1])){throw new RuntimeException('bad split edge end point at '+ptn);}};SegmentNodeList.prototype.interfaces_=function interfaces_(){return [];};SegmentNodeList.prototype.getClass=function getClass(){return SegmentNodeList;};// class NodeVertexIterator {
  //   constructor () {
  //     this._nodeList = null
  //     this._edge = null
  //     this._nodeIt = null
  //     this._currNode = null
  //     this._nextNode = null
  //     this._currSegIndex = 0
  //     let nodeList = arguments[0]
  //     this._nodeList = nodeList
  //     this._edge = nodeList.getEdge()
  //     this._nodeIt = nodeList.iterator()
  //     this.readNextNode()
  //   }
  //   next () {
  //     if (this._currNode === null) {
  //       this._currNode = this._nextNode
  //       this._currSegIndex = this._currNode.segmentIndex
  //       this.readNextNode()
  //       return this._currNode
  //     }
  //     if (this._nextNode === null) return null
  //     if (this._nextNode.segmentIndex === this._currNode.segmentIndex) {
  //       this._currNode = this._nextNode
  //       this._currSegIndex = this._currNode.segmentIndex
  //       this.readNextNode()
  //       return this._currNode
  //     }
  //     if (this._nextNode.segmentIndex > this._currNode.segmentIndex) {}
  //     return null
  //   }
  //   remove () {
  //     // throw new UnsupportedOperationException(this.getClass().getName())
  //   }
  //   hasNext () {
  //     if (this._nextNode === null) return false
  //     return true
  //   }
  //   readNextNode () {
  //     if (this._nodeIt.hasNext()) this._nextNode = this._nodeIt.next(); else this._nextNode = null
  //   }
  //   interfaces_ () {
  //     return [Iterator]
  //   }
  //   getClass () {
  //     return NodeVertexIterator
  //   }
  // }
  var Octant=function Octant(){};Octant.prototype.interfaces_=function interfaces_(){return [];};Octant.prototype.getClass=function getClass(){return Octant;};Octant.octant=function octant(){if(typeof arguments[0]==='number'&&typeof arguments[1]==='number'){var dx=arguments[0];var dy=arguments[1];if(dx===0.0&&dy===0.0){throw new IllegalArgumentException('Cannot compute the octant for point ( '+dx+', '+dy+' )');}var adx=Math.abs(dx);var ady=Math.abs(dy);if(dx>=0){if(dy>=0){if(adx>=ady){return 0;}else {return 1;}}else {if(adx>=ady){return 7;}else {return 6;}}}else {if(dy>=0){if(adx>=ady){return 3;}else {return 2;}}else {if(adx>=ady){return 4;}else {return 5;}}}}else if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Coordinate){var p0=arguments[0];var p1=arguments[1];var dx$1=p1.x-p0.x;var dy$1=p1.y-p0.y;if(dx$1===0.0&&dy$1===0.0){throw new IllegalArgumentException('Cannot compute the octant for two identical points '+p0);}return Octant.octant(dx$1,dy$1);}};var SegmentString=function SegmentString(){};SegmentString.prototype.getCoordinates=function getCoordinates(){};SegmentString.prototype.size=function size(){};SegmentString.prototype.getCoordinate=function getCoordinate(i){};SegmentString.prototype.isClosed=function isClosed(){};SegmentString.prototype.setData=function setData(data){};SegmentString.prototype.getData=function getData(){};SegmentString.prototype.interfaces_=function interfaces_(){return [];};SegmentString.prototype.getClass=function getClass(){return SegmentString;};var NodableSegmentString=function NodableSegmentString(){};NodableSegmentString.prototype.addIntersection=function addIntersection(intPt,segmentIndex){};NodableSegmentString.prototype.interfaces_=function interfaces_(){return [SegmentString];};NodableSegmentString.prototype.getClass=function getClass(){return NodableSegmentString;};var NodedSegmentString=function NodedSegmentString(){this._nodeList=new SegmentNodeList(this);this._pts=null;this._data=null;var pts=arguments[0];var data=arguments[1];this._pts=pts;this._data=data;};NodedSegmentString.prototype.getCoordinates=function getCoordinates(){return this._pts;};NodedSegmentString.prototype.size=function size(){return this._pts.length;};NodedSegmentString.prototype.getCoordinate=function getCoordinate(i){return this._pts[i];};NodedSegmentString.prototype.isClosed=function isClosed(){return this._pts[0].equals(this._pts[this._pts.length-1]);};NodedSegmentString.prototype.getSegmentOctant=function getSegmentOctant(index){if(index===this._pts.length-1){return -1;}return this.safeOctant(this.getCoordinate(index),this.getCoordinate(index+1));};NodedSegmentString.prototype.setData=function setData(data){this._data=data;};NodedSegmentString.prototype.safeOctant=function safeOctant(p0,p1){if(p0.equals2D(p1)){return 0;}return Octant.octant(p0,p1);};NodedSegmentString.prototype.getData=function getData(){return this._data;};NodedSegmentString.prototype.addIntersection=function addIntersection(){if(arguments.length===2){var intPt$1=arguments[0];var segmentIndex=arguments[1];this.addIntersectionNode(intPt$1,segmentIndex);}else if(arguments.length===4){var li=arguments[0];var segmentIndex$1=arguments[1];// const geomIndex = arguments[2]
  var intIndex=arguments[3];var intPt=new Coordinate(li.getIntersection(intIndex));this.addIntersection(intPt,segmentIndex$1);}};NodedSegmentString.prototype.toString=function toString(){return WKTWriter.toLineString(new CoordinateArraySequence(this._pts));};NodedSegmentString.prototype.getNodeList=function getNodeList(){return this._nodeList;};NodedSegmentString.prototype.addIntersectionNode=function addIntersectionNode(intPt,segmentIndex){var normalizedSegmentIndex=segmentIndex;var nextSegIndex=normalizedSegmentIndex+1;if(nextSegIndex<this._pts.length){var nextPt=this._pts[nextSegIndex];if(intPt.equals2D(nextPt)){normalizedSegmentIndex=nextSegIndex;}}var ei=this._nodeList.add(intPt,normalizedSegmentIndex);return ei;};NodedSegmentString.prototype.addIntersections=function addIntersections(li,segmentIndex,geomIndex){var this$1=this;for(var i=0;i<li.getIntersectionNum();i++){this$1.addIntersection(li,segmentIndex,geomIndex,i);}};NodedSegmentString.prototype.interfaces_=function interfaces_(){return [NodableSegmentString];};NodedSegmentString.prototype.getClass=function getClass(){return NodedSegmentString;};NodedSegmentString.getNodedSubstrings=function getNodedSubstrings(){if(arguments.length===1){var segStrings=arguments[0];var resultEdgelist=new ArrayList();NodedSegmentString.getNodedSubstrings(segStrings,resultEdgelist);return resultEdgelist;}else if(arguments.length===2){var segStrings$1=arguments[0];var resultEdgelist$1=arguments[1];for(var i=segStrings$1.iterator();i.hasNext();){var ss=i.next();ss.getNodeList().addSplitEdges(resultEdgelist$1);}}};var LineSegment=function LineSegment(){this.p0=null;this.p1=null;if(arguments.length===0){this.p0=new Coordinate();this.p1=new Coordinate();}else if(arguments.length===1){var ls=arguments[0];this.p0=new Coordinate(ls.p0);this.p1=new Coordinate(ls.p1);}else if(arguments.length===2){this.p0=arguments[0];this.p1=arguments[1];}else if(arguments.length===4){var x0=arguments[0];var y0=arguments[1];var x1=arguments[2];var y1=arguments[3];this.p0=new Coordinate(x0,y0);this.p1=new Coordinate(x1,y1);}};var staticAccessors$24={serialVersionUID:{configurable:true}};LineSegment.prototype.minX=function minX(){return Math.min(this.p0.x,this.p1.x);};LineSegment.prototype.orientationIndex=function orientationIndex(){if(arguments[0]instanceof LineSegment){var seg=arguments[0];var orient0=CGAlgorithms.orientationIndex(this.p0,this.p1,seg.p0);var orient1=CGAlgorithms.orientationIndex(this.p0,this.p1,seg.p1);if(orient0>=0&&orient1>=0){return Math.max(orient0,orient1);}if(orient0<=0&&orient1<=0){return Math.max(orient0,orient1);}return 0;}else if(arguments[0]instanceof Coordinate){var p=arguments[0];return CGAlgorithms.orientationIndex(this.p0,this.p1,p);}};LineSegment.prototype.toGeometry=function toGeometry(geomFactory){return geomFactory.createLineString([this.p0,this.p1]);};LineSegment.prototype.isVertical=function isVertical(){return this.p0.x===this.p1.x;};LineSegment.prototype.equals=function equals(o){if(!(o instanceof LineSegment)){return false;}var other=o;return this.p0.equals(other.p0)&&this.p1.equals(other.p1);};LineSegment.prototype.intersection=function intersection(line){var li=new RobustLineIntersector();li.computeIntersection(this.p0,this.p1,line.p0,line.p1);if(li.hasIntersection()){return li.getIntersection(0);}return null;};LineSegment.prototype.project=function project(){if(arguments[0]instanceof Coordinate){var p=arguments[0];if(p.equals(this.p0)||p.equals(this.p1)){return new Coordinate(p);}var r=this.projectionFactor(p);var coord=new Coordinate();coord.x=this.p0.x+r*(this.p1.x-this.p0.x);coord.y=this.p0.y+r*(this.p1.y-this.p0.y);return coord;}else if(arguments[0]instanceof LineSegment){var seg=arguments[0];var pf0=this.projectionFactor(seg.p0);var pf1=this.projectionFactor(seg.p1);if(pf0>=1.0&&pf1>=1.0){return null;}if(pf0<=0.0&&pf1<=0.0){return null;}var newp0=this.project(seg.p0);if(pf0<0.0){newp0=this.p0;}if(pf0>1.0){newp0=this.p1;}var newp1=this.project(seg.p1);if(pf1<0.0){newp1=this.p0;}if(pf1>1.0){newp1=this.p1;}return new LineSegment(newp0,newp1);}};LineSegment.prototype.normalize=function normalize(){if(this.p1.compareTo(this.p0)<0){this.reverse();}};LineSegment.prototype.angle=function angle(){return Math.atan2(this.p1.y-this.p0.y,this.p1.x-this.p0.x);};LineSegment.prototype.getCoordinate=function getCoordinate(i){if(i===0){return this.p0;}return this.p1;};LineSegment.prototype.distancePerpendicular=function distancePerpendicular(p){return CGAlgorithms.distancePointLinePerpendicular(p,this.p0,this.p1);};LineSegment.prototype.minY=function minY(){return Math.min(this.p0.y,this.p1.y);};LineSegment.prototype.midPoint=function midPoint(){return LineSegment.midPoint(this.p0,this.p1);};LineSegment.prototype.projectionFactor=function projectionFactor(p){if(p.equals(this.p0)){return 0.0;}if(p.equals(this.p1)){return 1.0;}var dx=this.p1.x-this.p0.x;var dy=this.p1.y-this.p0.y;var len=dx*dx+dy*dy;if(len<=0.0){return Double.NaN;}var r=((p.x-this.p0.x)*dx+(p.y-this.p0.y)*dy)/len;return r;};LineSegment.prototype.closestPoints=function closestPoints(line){var intPt=this.intersection(line);if(intPt!==null){return [intPt,intPt];}var closestPt=new Array(2).fill(null);var minDistance=Double.MAX_VALUE;var dist=null;var close00=this.closestPoint(line.p0);minDistance=close00.distance(line.p0);closestPt[0]=close00;closestPt[1]=line.p0;var close01=this.closestPoint(line.p1);dist=close01.distance(line.p1);if(dist<minDistance){minDistance=dist;closestPt[0]=close01;closestPt[1]=line.p1;}var close10=line.closestPoint(this.p0);dist=close10.distance(this.p0);if(dist<minDistance){minDistance=dist;closestPt[0]=this.p0;closestPt[1]=close10;}var close11=line.closestPoint(this.p1);dist=close11.distance(this.p1);if(dist<minDistance){minDistance=dist;closestPt[0]=this.p1;closestPt[1]=close11;}return closestPt;};LineSegment.prototype.closestPoint=function closestPoint(p){var factor=this.projectionFactor(p);if(factor>0&&factor<1){return this.project(p);}var dist0=this.p0.distance(p);var dist1=this.p1.distance(p);if(dist0<dist1){return this.p0;}return this.p1;};LineSegment.prototype.maxX=function maxX(){return Math.max(this.p0.x,this.p1.x);};LineSegment.prototype.getLength=function getLength(){return this.p0.distance(this.p1);};LineSegment.prototype.compareTo=function compareTo(o){var other=o;var comp0=this.p0.compareTo(other.p0);if(comp0!==0){return comp0;}return this.p1.compareTo(other.p1);};LineSegment.prototype.reverse=function reverse(){var temp=this.p0;this.p0=this.p1;this.p1=temp;};LineSegment.prototype.equalsTopo=function equalsTopo(other){return this.p0.equals(other.p0)&&(this.p1.equals(other.p1)||this.p0.equals(other.p1))&&this.p1.equals(other.p0);};LineSegment.prototype.lineIntersection=function lineIntersection(line){try{var intPt=HCoordinate.intersection(this.p0,this.p1,line.p0,line.p1);return intPt;}catch(ex){if(ex instanceof NotRepresentableException);else {throw ex;}}finally{}return null;};LineSegment.prototype.maxY=function maxY(){return Math.max(this.p0.y,this.p1.y);};LineSegment.prototype.pointAlongOffset=function pointAlongOffset(segmentLengthFraction,offsetDistance){var segx=this.p0.x+segmentLengthFraction*(this.p1.x-this.p0.x);var segy=this.p0.y+segmentLengthFraction*(this.p1.y-this.p0.y);var dx=this.p1.x-this.p0.x;var dy=this.p1.y-this.p0.y;var len=Math.sqrt(dx*dx+dy*dy);var ux=0.0;var uy=0.0;if(offsetDistance!==0.0){if(len<=0.0){throw new Error('Cannot compute offset from zero-length line segment');}ux=offsetDistance*dx/len;uy=offsetDistance*dy/len;}var offsetx=segx-uy;var offsety=segy+ux;var coord=new Coordinate(offsetx,offsety);return coord;};LineSegment.prototype.setCoordinates=function setCoordinates(){if(arguments.length===1){var ls=arguments[0];this.setCoordinates(ls.p0,ls.p1);}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];this.p0.x=p0.x;this.p0.y=p0.y;this.p1.x=p1.x;this.p1.y=p1.y;}};LineSegment.prototype.segmentFraction=function segmentFraction(inputPt){var segFrac=this.projectionFactor(inputPt);if(segFrac<0.0){segFrac=0.0;}else if(segFrac>1.0||Double.isNaN(segFrac)){segFrac=1.0;}return segFrac;};LineSegment.prototype.toString=function toString(){return 'LINESTRING( '+this.p0.x+' '+this.p0.y+', '+this.p1.x+' '+this.p1.y+')';};LineSegment.prototype.isHorizontal=function isHorizontal(){return this.p0.y===this.p1.y;};LineSegment.prototype.distance=function distance(){if(arguments[0]instanceof LineSegment){var ls=arguments[0];return CGAlgorithms.distanceLineLine(this.p0,this.p1,ls.p0,ls.p1);}else if(arguments[0]instanceof Coordinate){var p=arguments[0];return CGAlgorithms.distancePointLine(p,this.p0,this.p1);}};LineSegment.prototype.pointAlong=function pointAlong(segmentLengthFraction){var coord=new Coordinate();coord.x=this.p0.x+segmentLengthFraction*(this.p1.x-this.p0.x);coord.y=this.p0.y+segmentLengthFraction*(this.p1.y-this.p0.y);return coord;};LineSegment.prototype.hashCode=function hashCode(){var bits0=Double.doubleToLongBits(this.p0.x);bits0^=Double.doubleToLongBits(this.p0.y)*31;var hash0=Math.trunc(bits0)^Math.trunc(bits0>>32);var bits1=Double.doubleToLongBits(this.p1.x);bits1^=Double.doubleToLongBits(this.p1.y)*31;var hash1=Math.trunc(bits1)^Math.trunc(bits1>>32);return hash0^hash1;};LineSegment.prototype.interfaces_=function interfaces_(){return [Comparable,Serializable];};LineSegment.prototype.getClass=function getClass(){return LineSegment;};LineSegment.midPoint=function midPoint(p0,p1){return new Coordinate((p0.x+p1.x)/2,(p0.y+p1.y)/2);};staticAccessors$24.serialVersionUID.get=function(){return 3252005833466256227;};Object.defineProperties(LineSegment,staticAccessors$24);var MonotoneChainOverlapAction=function MonotoneChainOverlapAction(){this.tempEnv1=new Envelope();this.tempEnv2=new Envelope();this._overlapSeg1=new LineSegment();this._overlapSeg2=new LineSegment();};MonotoneChainOverlapAction.prototype.overlap=function overlap(){if(arguments.length===2);else if(arguments.length===4){var mc1=arguments[0];var start1=arguments[1];var mc2=arguments[2];var start2=arguments[3];mc1.getLineSegment(start1,this._overlapSeg1);mc2.getLineSegment(start2,this._overlapSeg2);this.overlap(this._overlapSeg1,this._overlapSeg2);}};MonotoneChainOverlapAction.prototype.interfaces_=function interfaces_(){return [];};MonotoneChainOverlapAction.prototype.getClass=function getClass(){return MonotoneChainOverlapAction;};var MonotoneChain=function MonotoneChain(){this._pts=null;this._start=null;this._end=null;this._env=null;this._context=null;this._id=null;var pts=arguments[0];var start=arguments[1];var end=arguments[2];var context=arguments[3];this._pts=pts;this._start=start;this._end=end;this._context=context;};MonotoneChain.prototype.getLineSegment=function getLineSegment(index,ls){ls.p0=this._pts[index];ls.p1=this._pts[index+1];};MonotoneChain.prototype.computeSelect=function computeSelect(searchEnv,start0,end0,mcs){var p0=this._pts[start0];var p1=this._pts[end0];mcs.tempEnv1.init(p0,p1);if(end0-start0===1){mcs.select(this,start0);return null;}if(!searchEnv.intersects(mcs.tempEnv1)){return null;}var mid=Math.trunc((start0+end0)/2);if(start0<mid){this.computeSelect(searchEnv,start0,mid,mcs);}if(mid<end0){this.computeSelect(searchEnv,mid,end0,mcs);}};MonotoneChain.prototype.getCoordinates=function getCoordinates(){var this$1=this;var coord=new Array(this._end-this._start+1).fill(null);var index=0;for(var i=this._start;i<=this._end;i++){coord[index++]=this$1._pts[i];}return coord;};MonotoneChain.prototype.computeOverlaps=function computeOverlaps(mc,mco){this.computeOverlapsInternal(this._start,this._end,mc,mc._start,mc._end,mco);};MonotoneChain.prototype.setId=function setId(id){this._id=id;};MonotoneChain.prototype.select=function select(searchEnv,mcs){this.computeSelect(searchEnv,this._start,this._end,mcs);};MonotoneChain.prototype.getEnvelope=function getEnvelope(){if(this._env===null){var p0=this._pts[this._start];var p1=this._pts[this._end];this._env=new Envelope(p0,p1);}return this._env;};MonotoneChain.prototype.getEndIndex=function getEndIndex(){return this._end;};MonotoneChain.prototype.getStartIndex=function getStartIndex(){return this._start;};MonotoneChain.prototype.getContext=function getContext(){return this._context;};MonotoneChain.prototype.getId=function getId(){return this._id;};MonotoneChain.prototype.computeOverlapsInternal=function computeOverlapsInternal(start0,end0,mc,start1,end1,mco){var p00=this._pts[start0];var p01=this._pts[end0];var p10=mc._pts[start1];var p11=mc._pts[end1];if(end0-start0===1&&end1-start1===1){mco.overlap(this,start0,mc,start1);return null;}mco.tempEnv1.init(p00,p01);mco.tempEnv2.init(p10,p11);if(!mco.tempEnv1.intersects(mco.tempEnv2)){return null;}var mid0=Math.trunc((start0+end0)/2);var mid1=Math.trunc((start1+end1)/2);if(start0<mid0){if(start1<mid1){this.computeOverlapsInternal(start0,mid0,mc,start1,mid1,mco);}if(mid1<end1){this.computeOverlapsInternal(start0,mid0,mc,mid1,end1,mco);}}if(mid0<end0){if(start1<mid1){this.computeOverlapsInternal(mid0,end0,mc,start1,mid1,mco);}if(mid1<end1){this.computeOverlapsInternal(mid0,end0,mc,mid1,end1,mco);}}};MonotoneChain.prototype.interfaces_=function interfaces_(){return [];};MonotoneChain.prototype.getClass=function getClass(){return MonotoneChain;};var MonotoneChainBuilder=function MonotoneChainBuilder(){};MonotoneChainBuilder.prototype.interfaces_=function interfaces_(){return [];};MonotoneChainBuilder.prototype.getClass=function getClass(){return MonotoneChainBuilder;};MonotoneChainBuilder.getChainStartIndices=function getChainStartIndices(pts){var start=0;var startIndexList=new ArrayList();startIndexList.add(new Integer(start));do{var last=MonotoneChainBuilder.findChainEnd(pts,start);startIndexList.add(new Integer(last));start=last;}while(start<pts.length-1);var startIndex=MonotoneChainBuilder.toIntArray(startIndexList);return startIndex;};MonotoneChainBuilder.findChainEnd=function findChainEnd(pts,start){var safeStart=start;while(safeStart<pts.length-1&&pts[safeStart].equals2D(pts[safeStart+1])){safeStart++;}if(safeStart>=pts.length-1){return pts.length-1;}var chainQuad=Quadrant.quadrant(pts[safeStart],pts[safeStart+1]);var last=start+1;while(last<pts.length){if(!pts[last-1].equals2D(pts[last])){var quad=Quadrant.quadrant(pts[last-1],pts[last]);if(quad!==chainQuad){break;}}last++;}return last-1;};MonotoneChainBuilder.getChains=function getChains(){if(arguments.length===1){var pts=arguments[0];return MonotoneChainBuilder.getChains(pts,null);}else if(arguments.length===2){var pts$1=arguments[0];var context=arguments[1];var mcList=new ArrayList();var startIndex=MonotoneChainBuilder.getChainStartIndices(pts$1);for(var i=0;i<startIndex.length-1;i++){var mc=new MonotoneChain(pts$1,startIndex[i],startIndex[i+1],context);mcList.add(mc);}return mcList;}};MonotoneChainBuilder.toIntArray=function toIntArray(list){var array=new Array(list.size()).fill(null);for(var i=0;i<array.length;i++){array[i]=list.get(i).intValue();}return array;};var Noder=function Noder(){};Noder.prototype.computeNodes=function computeNodes(segStrings){};Noder.prototype.getNodedSubstrings=function getNodedSubstrings(){};Noder.prototype.interfaces_=function interfaces_(){return [];};Noder.prototype.getClass=function getClass(){return Noder;};var SinglePassNoder=function SinglePassNoder(){this._segInt=null;if(arguments.length===0);else if(arguments.length===1){var segInt=arguments[0];this.setSegmentIntersector(segInt);}};SinglePassNoder.prototype.setSegmentIntersector=function setSegmentIntersector(segInt){this._segInt=segInt;};SinglePassNoder.prototype.interfaces_=function interfaces_(){return [Noder];};SinglePassNoder.prototype.getClass=function getClass(){return SinglePassNoder;};var MCIndexNoder=function(SinglePassNoder$$1){function MCIndexNoder(si){if(si){SinglePassNoder$$1.call(this,si);}else {SinglePassNoder$$1.call(this);}this._monoChains=new ArrayList();this._index=new STRtree();this._idCounter=0;this._nodedSegStrings=null;this._nOverlaps=0;}if(SinglePassNoder$$1)MCIndexNoder.__proto__=SinglePassNoder$$1;MCIndexNoder.prototype=Object.create(SinglePassNoder$$1&&SinglePassNoder$$1.prototype);MCIndexNoder.prototype.constructor=MCIndexNoder;var staticAccessors={SegmentOverlapAction:{configurable:true}};MCIndexNoder.prototype.getMonotoneChains=function getMonotoneChains(){return this._monoChains;};MCIndexNoder.prototype.getNodedSubstrings=function getNodedSubstrings(){return NodedSegmentString.getNodedSubstrings(this._nodedSegStrings);};MCIndexNoder.prototype.getIndex=function getIndex(){return this._index;};MCIndexNoder.prototype.add=function add(segStr){var this$1=this;var segChains=MonotoneChainBuilder.getChains(segStr.getCoordinates(),segStr);for(var i=segChains.iterator();i.hasNext();){var mc=i.next();mc.setId(this$1._idCounter++);this$1._index.insert(mc.getEnvelope(),mc);this$1._monoChains.add(mc);}};MCIndexNoder.prototype.computeNodes=function computeNodes(inputSegStrings){var this$1=this;this._nodedSegStrings=inputSegStrings;for(var i=inputSegStrings.iterator();i.hasNext();){this$1.add(i.next());}this.intersectChains();};MCIndexNoder.prototype.intersectChains=function intersectChains(){var this$1=this;var overlapAction=new SegmentOverlapAction(this._segInt);for(var i=this._monoChains.iterator();i.hasNext();){var queryChain=i.next();var overlapChains=this$1._index.query(queryChain.getEnvelope());for(var j=overlapChains.iterator();j.hasNext();){var testChain=j.next();if(testChain.getId()>queryChain.getId()){queryChain.computeOverlaps(testChain,overlapAction);this$1._nOverlaps++;}if(this$1._segInt.isDone()){return null;}}}};MCIndexNoder.prototype.interfaces_=function interfaces_(){return [];};MCIndexNoder.prototype.getClass=function getClass(){return MCIndexNoder;};staticAccessors.SegmentOverlapAction.get=function(){return SegmentOverlapAction;};Object.defineProperties(MCIndexNoder,staticAccessors);return MCIndexNoder;}(SinglePassNoder);var SegmentOverlapAction=function(MonotoneChainOverlapAction$$1){function SegmentOverlapAction(){MonotoneChainOverlapAction$$1.call(this);this._si=null;var si=arguments[0];this._si=si;}if(MonotoneChainOverlapAction$$1)SegmentOverlapAction.__proto__=MonotoneChainOverlapAction$$1;SegmentOverlapAction.prototype=Object.create(MonotoneChainOverlapAction$$1&&MonotoneChainOverlapAction$$1.prototype);SegmentOverlapAction.prototype.constructor=SegmentOverlapAction;SegmentOverlapAction.prototype.overlap=function overlap(){if(arguments.length===4){var mc1=arguments[0];var start1=arguments[1];var mc2=arguments[2];var start2=arguments[3];var ss1=mc1.getContext();var ss2=mc2.getContext();this._si.processIntersections(ss1,start1,ss2,start2);}else {return MonotoneChainOverlapAction$$1.prototype.overlap.apply(this,arguments);}};SegmentOverlapAction.prototype.interfaces_=function interfaces_(){return [];};SegmentOverlapAction.prototype.getClass=function getClass(){return SegmentOverlapAction;};return SegmentOverlapAction;}(MonotoneChainOverlapAction);var BufferParameters=function BufferParameters(){this._quadrantSegments=BufferParameters.DEFAULT_QUADRANT_SEGMENTS;this._endCapStyle=BufferParameters.CAP_ROUND;this._joinStyle=BufferParameters.JOIN_ROUND;this._mitreLimit=BufferParameters.DEFAULT_MITRE_LIMIT;this._isSingleSided=false;this._simplifyFactor=BufferParameters.DEFAULT_SIMPLIFY_FACTOR;if(arguments.length===0);else if(arguments.length===1){var quadrantSegments=arguments[0];this.setQuadrantSegments(quadrantSegments);}else if(arguments.length===2){var quadrantSegments$1=arguments[0];var endCapStyle=arguments[1];this.setQuadrantSegments(quadrantSegments$1);this.setEndCapStyle(endCapStyle);}else if(arguments.length===4){var quadrantSegments$2=arguments[0];var endCapStyle$1=arguments[1];var joinStyle=arguments[2];var mitreLimit=arguments[3];this.setQuadrantSegments(quadrantSegments$2);this.setEndCapStyle(endCapStyle$1);this.setJoinStyle(joinStyle);this.setMitreLimit(mitreLimit);}};var staticAccessors$25={CAP_ROUND:{configurable:true},CAP_FLAT:{configurable:true},CAP_SQUARE:{configurable:true},JOIN_ROUND:{configurable:true},JOIN_MITRE:{configurable:true},JOIN_BEVEL:{configurable:true},DEFAULT_QUADRANT_SEGMENTS:{configurable:true},DEFAULT_MITRE_LIMIT:{configurable:true},DEFAULT_SIMPLIFY_FACTOR:{configurable:true}};BufferParameters.prototype.getEndCapStyle=function getEndCapStyle(){return this._endCapStyle;};BufferParameters.prototype.isSingleSided=function isSingleSided(){return this._isSingleSided;};BufferParameters.prototype.setQuadrantSegments=function setQuadrantSegments(quadSegs){this._quadrantSegments=quadSegs;if(this._quadrantSegments===0){this._joinStyle=BufferParameters.JOIN_BEVEL;}if(this._quadrantSegments<0){this._joinStyle=BufferParameters.JOIN_MITRE;this._mitreLimit=Math.abs(this._quadrantSegments);}if(quadSegs<=0){this._quadrantSegments=1;}if(this._joinStyle!==BufferParameters.JOIN_ROUND){this._quadrantSegments=BufferParameters.DEFAULT_QUADRANT_SEGMENTS;}};BufferParameters.prototype.getJoinStyle=function getJoinStyle(){return this._joinStyle;};BufferParameters.prototype.setJoinStyle=function setJoinStyle(joinStyle){this._joinStyle=joinStyle;};BufferParameters.prototype.setSimplifyFactor=function setSimplifyFactor(simplifyFactor){this._simplifyFactor=simplifyFactor<0?0:simplifyFactor;};BufferParameters.prototype.getSimplifyFactor=function getSimplifyFactor(){return this._simplifyFactor;};BufferParameters.prototype.getQuadrantSegments=function getQuadrantSegments(){return this._quadrantSegments;};BufferParameters.prototype.setEndCapStyle=function setEndCapStyle(endCapStyle){this._endCapStyle=endCapStyle;};BufferParameters.prototype.getMitreLimit=function getMitreLimit(){return this._mitreLimit;};BufferParameters.prototype.setMitreLimit=function setMitreLimit(mitreLimit){this._mitreLimit=mitreLimit;};BufferParameters.prototype.setSingleSided=function setSingleSided(isSingleSided){this._isSingleSided=isSingleSided;};BufferParameters.prototype.interfaces_=function interfaces_(){return [];};BufferParameters.prototype.getClass=function getClass(){return BufferParameters;};BufferParameters.bufferDistanceError=function bufferDistanceError(quadSegs){var alpha=Math.PI/2.0/quadSegs;return 1-Math.cos(alpha/2.0);};staticAccessors$25.CAP_ROUND.get=function(){return 1;};staticAccessors$25.CAP_FLAT.get=function(){return 2;};staticAccessors$25.CAP_SQUARE.get=function(){return 3;};staticAccessors$25.JOIN_ROUND.get=function(){return 1;};staticAccessors$25.JOIN_MITRE.get=function(){return 2;};staticAccessors$25.JOIN_BEVEL.get=function(){return 3;};staticAccessors$25.DEFAULT_QUADRANT_SEGMENTS.get=function(){return 8;};staticAccessors$25.DEFAULT_MITRE_LIMIT.get=function(){return 5.0;};staticAccessors$25.DEFAULT_SIMPLIFY_FACTOR.get=function(){return 0.01;};Object.defineProperties(BufferParameters,staticAccessors$25);var BufferInputLineSimplifier=function BufferInputLineSimplifier(inputLine){this._distanceTol=null;this._isDeleted=null;this._angleOrientation=CGAlgorithms.COUNTERCLOCKWISE;this._inputLine=inputLine||null;};var staticAccessors$26={INIT:{configurable:true},DELETE:{configurable:true},KEEP:{configurable:true},NUM_PTS_TO_CHECK:{configurable:true}};BufferInputLineSimplifier.prototype.isDeletable=function isDeletable(i0,i1,i2,distanceTol){var p0=this._inputLine[i0];var p1=this._inputLine[i1];var p2=this._inputLine[i2];if(!this.isConcave(p0,p1,p2)){return false;}if(!this.isShallow(p0,p1,p2,distanceTol)){return false;}return this.isShallowSampled(p0,p1,i0,i2,distanceTol);};BufferInputLineSimplifier.prototype.deleteShallowConcavities=function deleteShallowConcavities(){var this$1=this;var index=1;// const maxIndex = this._inputLine.length - 1
  var midIndex=this.findNextNonDeletedIndex(index);var lastIndex=this.findNextNonDeletedIndex(midIndex);var isChanged=false;while(lastIndex<this._inputLine.length){var isMiddleVertexDeleted=false;if(this$1.isDeletable(index,midIndex,lastIndex,this$1._distanceTol)){this$1._isDeleted[midIndex]=BufferInputLineSimplifier.DELETE;isMiddleVertexDeleted=true;isChanged=true;}if(isMiddleVertexDeleted){index=lastIndex;}else {index=midIndex;}midIndex=this$1.findNextNonDeletedIndex(index);lastIndex=this$1.findNextNonDeletedIndex(midIndex);}return isChanged;};BufferInputLineSimplifier.prototype.isShallowConcavity=function isShallowConcavity(p0,p1,p2,distanceTol){var orientation=CGAlgorithms.computeOrientation(p0,p1,p2);var isAngleToSimplify=orientation===this._angleOrientation;if(!isAngleToSimplify){return false;}var dist=CGAlgorithms.distancePointLine(p1,p0,p2);return dist<distanceTol;};BufferInputLineSimplifier.prototype.isShallowSampled=function isShallowSampled(p0,p2,i0,i2,distanceTol){var this$1=this;var inc=Math.trunc((i2-i0)/BufferInputLineSimplifier.NUM_PTS_TO_CHECK);if(inc<=0){inc=1;}for(var i=i0;i<i2;i+=inc){if(!this$1.isShallow(p0,p2,this$1._inputLine[i],distanceTol)){return false;}}return true;};BufferInputLineSimplifier.prototype.isConcave=function isConcave(p0,p1,p2){var orientation=CGAlgorithms.computeOrientation(p0,p1,p2);var isConcave=orientation===this._angleOrientation;return isConcave;};BufferInputLineSimplifier.prototype.simplify=function simplify(distanceTol){var this$1=this;this._distanceTol=Math.abs(distanceTol);if(distanceTol<0){this._angleOrientation=CGAlgorithms.CLOCKWISE;}this._isDeleted=new Array(this._inputLine.length).fill(null);var isChanged=false;do{isChanged=this$1.deleteShallowConcavities();}while(isChanged);return this.collapseLine();};BufferInputLineSimplifier.prototype.findNextNonDeletedIndex=function findNextNonDeletedIndex(index){var next=index+1;while(next<this._inputLine.length&&this._isDeleted[next]===BufferInputLineSimplifier.DELETE){next++;}return next;};BufferInputLineSimplifier.prototype.isShallow=function isShallow(p0,p1,p2,distanceTol){var dist=CGAlgorithms.distancePointLine(p1,p0,p2);return dist<distanceTol;};BufferInputLineSimplifier.prototype.collapseLine=function collapseLine(){var this$1=this;var coordList=new CoordinateList();for(var i=0;i<this._inputLine.length;i++){if(this$1._isDeleted[i]!==BufferInputLineSimplifier.DELETE){coordList.add(this$1._inputLine[i]);}}return coordList.toCoordinateArray();};BufferInputLineSimplifier.prototype.interfaces_=function interfaces_(){return [];};BufferInputLineSimplifier.prototype.getClass=function getClass(){return BufferInputLineSimplifier;};BufferInputLineSimplifier.simplify=function simplify(inputLine,distanceTol){var simp=new BufferInputLineSimplifier(inputLine);return simp.simplify(distanceTol);};staticAccessors$26.INIT.get=function(){return 0;};staticAccessors$26.DELETE.get=function(){return 1;};staticAccessors$26.KEEP.get=function(){return 1;};staticAccessors$26.NUM_PTS_TO_CHECK.get=function(){return 10;};Object.defineProperties(BufferInputLineSimplifier,staticAccessors$26);var OffsetSegmentString=function OffsetSegmentString(){this._ptList=null;this._precisionModel=null;this._minimimVertexDistance=0.0;this._ptList=new ArrayList();};var staticAccessors$28={COORDINATE_ARRAY_TYPE:{configurable:true}};OffsetSegmentString.prototype.getCoordinates=function getCoordinates(){var coord=this._ptList.toArray(OffsetSegmentString.COORDINATE_ARRAY_TYPE);return coord;};OffsetSegmentString.prototype.setPrecisionModel=function setPrecisionModel(precisionModel){this._precisionModel=precisionModel;};OffsetSegmentString.prototype.addPt=function addPt(pt){var bufPt=new Coordinate(pt);this._precisionModel.makePrecise(bufPt);if(this.isRedundant(bufPt)){return null;}this._ptList.add(bufPt);};OffsetSegmentString.prototype.revere=function revere(){};OffsetSegmentString.prototype.addPts=function addPts(pt,isForward){var this$1=this;if(isForward){for(var i=0;i<pt.length;i++){this$1.addPt(pt[i]);}}else {for(var i$1=pt.length-1;i$1>=0;i$1--){this$1.addPt(pt[i$1]);}}};OffsetSegmentString.prototype.isRedundant=function isRedundant(pt){if(this._ptList.size()<1){return false;}var lastPt=this._ptList.get(this._ptList.size()-1);var ptDist=pt.distance(lastPt);if(ptDist<this._minimimVertexDistance){return true;}return false;};OffsetSegmentString.prototype.toString=function toString(){var fact=new GeometryFactory();var line=fact.createLineString(this.getCoordinates());return line.toString();};OffsetSegmentString.prototype.closeRing=function closeRing(){if(this._ptList.size()<1){return null;}var startPt=new Coordinate(this._ptList.get(0));var lastPt=this._ptList.get(this._ptList.size()-1);// const last2Pt = null
  // if (this._ptList.size() >= 2) last2Pt = this._ptList.get(this._ptList.size() - 2)
  if(startPt.equals(lastPt)){return null;}this._ptList.add(startPt);};OffsetSegmentString.prototype.setMinimumVertexDistance=function setMinimumVertexDistance(minimimVertexDistance){this._minimimVertexDistance=minimimVertexDistance;};OffsetSegmentString.prototype.interfaces_=function interfaces_(){return [];};OffsetSegmentString.prototype.getClass=function getClass(){return OffsetSegmentString;};staticAccessors$28.COORDINATE_ARRAY_TYPE.get=function(){return new Array(0).fill(null);};Object.defineProperties(OffsetSegmentString,staticAccessors$28);var Angle=function Angle(){};var staticAccessors$29={PI_TIMES_2:{configurable:true},PI_OVER_2:{configurable:true},PI_OVER_4:{configurable:true},COUNTERCLOCKWISE:{configurable:true},CLOCKWISE:{configurable:true},NONE:{configurable:true}};Angle.prototype.interfaces_=function interfaces_(){return [];};Angle.prototype.getClass=function getClass(){return Angle;};Angle.toDegrees=function toDegrees(radians){return radians*180/Math.PI;};Angle.normalize=function normalize(angle){while(angle>Math.PI){angle-=Angle.PI_TIMES_2;}while(angle<=-Math.PI){angle+=Angle.PI_TIMES_2;}return angle;};Angle.angle=function angle(){if(arguments.length===1){var p=arguments[0];return Math.atan2(p.y,p.x);}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];var dx=p1.x-p0.x;var dy=p1.y-p0.y;return Math.atan2(dy,dx);}};Angle.isAcute=function isAcute(p0,p1,p2){var dx0=p0.x-p1.x;var dy0=p0.y-p1.y;var dx1=p2.x-p1.x;var dy1=p2.y-p1.y;var dotprod=dx0*dx1+dy0*dy1;return dotprod>0;};Angle.isObtuse=function isObtuse(p0,p1,p2){var dx0=p0.x-p1.x;var dy0=p0.y-p1.y;var dx1=p2.x-p1.x;var dy1=p2.y-p1.y;var dotprod=dx0*dx1+dy0*dy1;return dotprod<0;};Angle.interiorAngle=function interiorAngle(p0,p1,p2){var anglePrev=Angle.angle(p1,p0);var angleNext=Angle.angle(p1,p2);return Math.abs(angleNext-anglePrev);};Angle.normalizePositive=function normalizePositive(angle){if(angle<0.0){while(angle<0.0){angle+=Angle.PI_TIMES_2;}if(angle>=Angle.PI_TIMES_2){angle=0.0;}}else {while(angle>=Angle.PI_TIMES_2){angle-=Angle.PI_TIMES_2;}if(angle<0.0){angle=0.0;}}return angle;};Angle.angleBetween=function angleBetween(tip1,tail,tip2){var a1=Angle.angle(tail,tip1);var a2=Angle.angle(tail,tip2);return Angle.diff(a1,a2);};Angle.diff=function diff(ang1,ang2){var delAngle=null;if(ang1<ang2){delAngle=ang2-ang1;}else {delAngle=ang1-ang2;}if(delAngle>Math.PI){delAngle=2*Math.PI-delAngle;}return delAngle;};Angle.toRadians=function toRadians(angleDegrees){return angleDegrees*Math.PI/180.0;};Angle.getTurn=function getTurn(ang1,ang2){var crossproduct=Math.sin(ang2-ang1);if(crossproduct>0){return Angle.COUNTERCLOCKWISE;}if(crossproduct<0){return Angle.CLOCKWISE;}return Angle.NONE;};Angle.angleBetweenOriented=function angleBetweenOriented(tip1,tail,tip2){var a1=Angle.angle(tail,tip1);var a2=Angle.angle(tail,tip2);var angDel=a2-a1;if(angDel<=-Math.PI){return angDel+Angle.PI_TIMES_2;}if(angDel>Math.PI){return angDel-Angle.PI_TIMES_2;}return angDel;};staticAccessors$29.PI_TIMES_2.get=function(){return 2.0*Math.PI;};staticAccessors$29.PI_OVER_2.get=function(){return Math.PI/2.0;};staticAccessors$29.PI_OVER_4.get=function(){return Math.PI/4.0;};staticAccessors$29.COUNTERCLOCKWISE.get=function(){return CGAlgorithms.COUNTERCLOCKWISE;};staticAccessors$29.CLOCKWISE.get=function(){return CGAlgorithms.CLOCKWISE;};staticAccessors$29.NONE.get=function(){return CGAlgorithms.COLLINEAR;};Object.defineProperties(Angle,staticAccessors$29);var OffsetSegmentGenerator=function OffsetSegmentGenerator(){this._maxCurveSegmentError=0.0;this._filletAngleQuantum=null;this._closingSegLengthFactor=1;this._segList=null;this._distance=0.0;this._precisionModel=null;this._bufParams=null;this._li=null;this._s0=null;this._s1=null;this._s2=null;this._seg0=new LineSegment();this._seg1=new LineSegment();this._offset0=new LineSegment();this._offset1=new LineSegment();this._side=0;this._hasNarrowConcaveAngle=false;var precisionModel=arguments[0];var bufParams=arguments[1];var distance=arguments[2];this._precisionModel=precisionModel;this._bufParams=bufParams;this._li=new RobustLineIntersector();this._filletAngleQuantum=Math.PI/2.0/bufParams.getQuadrantSegments();if(bufParams.getQuadrantSegments()>=8&&bufParams.getJoinStyle()===BufferParameters.JOIN_ROUND){this._closingSegLengthFactor=OffsetSegmentGenerator.MAX_CLOSING_SEG_LEN_FACTOR;}this.init(distance);};var staticAccessors$27={OFFSET_SEGMENT_SEPARATION_FACTOR:{configurable:true},INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR:{configurable:true},CURVE_VERTEX_SNAP_DISTANCE_FACTOR:{configurable:true},MAX_CLOSING_SEG_LEN_FACTOR:{configurable:true}};OffsetSegmentGenerator.prototype.addNextSegment=function addNextSegment(p,addStartPoint){this._s0=this._s1;this._s1=this._s2;this._s2=p;this._seg0.setCoordinates(this._s0,this._s1);this.computeOffsetSegment(this._seg0,this._side,this._distance,this._offset0);this._seg1.setCoordinates(this._s1,this._s2);this.computeOffsetSegment(this._seg1,this._side,this._distance,this._offset1);if(this._s1.equals(this._s2)){return null;}var orientation=CGAlgorithms.computeOrientation(this._s0,this._s1,this._s2);var outsideTurn=orientation===CGAlgorithms.CLOCKWISE&&this._side===Position.LEFT||orientation===CGAlgorithms.COUNTERCLOCKWISE&&this._side===Position.RIGHT;if(orientation===0){this.addCollinear(addStartPoint);}else if(outsideTurn){this.addOutsideTurn(orientation,addStartPoint);}else {this.addInsideTurn(orientation,addStartPoint);}};OffsetSegmentGenerator.prototype.addLineEndCap=function addLineEndCap(p0,p1){var seg=new LineSegment(p0,p1);var offsetL=new LineSegment();this.computeOffsetSegment(seg,Position.LEFT,this._distance,offsetL);var offsetR=new LineSegment();this.computeOffsetSegment(seg,Position.RIGHT,this._distance,offsetR);var dx=p1.x-p0.x;var dy=p1.y-p0.y;var angle=Math.atan2(dy,dx);switch(this._bufParams.getEndCapStyle()){case BufferParameters.CAP_ROUND:this._segList.addPt(offsetL.p1);this.addFilletArc(p1,angle+Math.PI/2,angle-Math.PI/2,CGAlgorithms.CLOCKWISE,this._distance);this._segList.addPt(offsetR.p1);break;case BufferParameters.CAP_FLAT:this._segList.addPt(offsetL.p1);this._segList.addPt(offsetR.p1);break;case BufferParameters.CAP_SQUARE:var squareCapSideOffset=new Coordinate();squareCapSideOffset.x=Math.abs(this._distance)*Math.cos(angle);squareCapSideOffset.y=Math.abs(this._distance)*Math.sin(angle);var squareCapLOffset=new Coordinate(offsetL.p1.x+squareCapSideOffset.x,offsetL.p1.y+squareCapSideOffset.y);var squareCapROffset=new Coordinate(offsetR.p1.x+squareCapSideOffset.x,offsetR.p1.y+squareCapSideOffset.y);this._segList.addPt(squareCapLOffset);this._segList.addPt(squareCapROffset);break;}};OffsetSegmentGenerator.prototype.getCoordinates=function getCoordinates(){var pts=this._segList.getCoordinates();return pts;};OffsetSegmentGenerator.prototype.addMitreJoin=function addMitreJoin(p,offset0,offset1,distance){var isMitreWithinLimit=true;var intPt=null;try{intPt=HCoordinate.intersection(offset0.p0,offset0.p1,offset1.p0,offset1.p1);var mitreRatio=distance<=0.0?1.0:intPt.distance(p)/Math.abs(distance);if(mitreRatio>this._bufParams.getMitreLimit()){isMitreWithinLimit=false;}}catch(ex){if(ex instanceof NotRepresentableException){intPt=new Coordinate(0,0);isMitreWithinLimit=false;}else {throw ex;}}finally{}if(isMitreWithinLimit){this._segList.addPt(intPt);}else {this.addLimitedMitreJoin(offset0,offset1,distance,this._bufParams.getMitreLimit());}};OffsetSegmentGenerator.prototype.addFilletCorner=function addFilletCorner(p,p0,p1,direction,radius){var dx0=p0.x-p.x;var dy0=p0.y-p.y;var startAngle=Math.atan2(dy0,dx0);var dx1=p1.x-p.x;var dy1=p1.y-p.y;var endAngle=Math.atan2(dy1,dx1);if(direction===CGAlgorithms.CLOCKWISE){if(startAngle<=endAngle){startAngle+=2.0*Math.PI;}}else {if(startAngle>=endAngle){startAngle-=2.0*Math.PI;}}this._segList.addPt(p0);this.addFilletArc(p,startAngle,endAngle,direction,radius);this._segList.addPt(p1);};OffsetSegmentGenerator.prototype.addOutsideTurn=function addOutsideTurn(orientation,addStartPoint){if(this._offset0.p1.distance(this._offset1.p0)<this._distance*OffsetSegmentGenerator.OFFSET_SEGMENT_SEPARATION_FACTOR){this._segList.addPt(this._offset0.p1);return null;}if(this._bufParams.getJoinStyle()===BufferParameters.JOIN_MITRE){this.addMitreJoin(this._s1,this._offset0,this._offset1,this._distance);}else if(this._bufParams.getJoinStyle()===BufferParameters.JOIN_BEVEL){this.addBevelJoin(this._offset0,this._offset1);}else {if(addStartPoint){this._segList.addPt(this._offset0.p1);}this.addFilletCorner(this._s1,this._offset0.p1,this._offset1.p0,orientation,this._distance);this._segList.addPt(this._offset1.p0);}};OffsetSegmentGenerator.prototype.createSquare=function createSquare(p){this._segList.addPt(new Coordinate(p.x+this._distance,p.y+this._distance));this._segList.addPt(new Coordinate(p.x+this._distance,p.y-this._distance));this._segList.addPt(new Coordinate(p.x-this._distance,p.y-this._distance));this._segList.addPt(new Coordinate(p.x-this._distance,p.y+this._distance));this._segList.closeRing();};OffsetSegmentGenerator.prototype.addSegments=function addSegments(pt,isForward){this._segList.addPts(pt,isForward);};OffsetSegmentGenerator.prototype.addFirstSegment=function addFirstSegment(){this._segList.addPt(this._offset1.p0);};OffsetSegmentGenerator.prototype.addLastSegment=function addLastSegment(){this._segList.addPt(this._offset1.p1);};OffsetSegmentGenerator.prototype.initSideSegments=function initSideSegments(s1,s2,side){this._s1=s1;this._s2=s2;this._side=side;this._seg1.setCoordinates(s1,s2);this.computeOffsetSegment(this._seg1,side,this._distance,this._offset1);};OffsetSegmentGenerator.prototype.addLimitedMitreJoin=function addLimitedMitreJoin(offset0,offset1,distance,mitreLimit){var basePt=this._seg0.p1;var ang0=Angle.angle(basePt,this._seg0.p0);// const ang1 = Angle.angle(basePt, this._seg1.p1)
  var angDiff=Angle.angleBetweenOriented(this._seg0.p0,basePt,this._seg1.p1);var angDiffHalf=angDiff/2;var midAng=Angle.normalize(ang0+angDiffHalf);var mitreMidAng=Angle.normalize(midAng+Math.PI);var mitreDist=mitreLimit*distance;var bevelDelta=mitreDist*Math.abs(Math.sin(angDiffHalf));var bevelHalfLen=distance-bevelDelta;var bevelMidX=basePt.x+mitreDist*Math.cos(mitreMidAng);var bevelMidY=basePt.y+mitreDist*Math.sin(mitreMidAng);var bevelMidPt=new Coordinate(bevelMidX,bevelMidY);var mitreMidLine=new LineSegment(basePt,bevelMidPt);var bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);var bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);if(this._side===Position.LEFT){this._segList.addPt(bevelEndLeft);this._segList.addPt(bevelEndRight);}else {this._segList.addPt(bevelEndRight);this._segList.addPt(bevelEndLeft);}};OffsetSegmentGenerator.prototype.computeOffsetSegment=function computeOffsetSegment(seg,side,distance,offset){var sideSign=side===Position.LEFT?1:-1;var dx=seg.p1.x-seg.p0.x;var dy=seg.p1.y-seg.p0.y;var len=Math.sqrt(dx*dx+dy*dy);var ux=sideSign*distance*dx/len;var uy=sideSign*distance*dy/len;offset.p0.x=seg.p0.x-uy;offset.p0.y=seg.p0.y+ux;offset.p1.x=seg.p1.x-uy;offset.p1.y=seg.p1.y+ux;};OffsetSegmentGenerator.prototype.addFilletArc=function addFilletArc(p,startAngle,endAngle,direction,radius){var this$1=this;var directionFactor=direction===CGAlgorithms.CLOCKWISE?-1:1;var totalAngle=Math.abs(startAngle-endAngle);var nSegs=Math.trunc(totalAngle/this._filletAngleQuantum+0.5);if(nSegs<1){return null;}var initAngle=0.0;var currAngleInc=totalAngle/nSegs;var currAngle=initAngle;var pt=new Coordinate();while(currAngle<totalAngle){var angle=startAngle+directionFactor*currAngle;pt.x=p.x+radius*Math.cos(angle);pt.y=p.y+radius*Math.sin(angle);this$1._segList.addPt(pt);currAngle+=currAngleInc;}};OffsetSegmentGenerator.prototype.addInsideTurn=function addInsideTurn(orientation,addStartPoint){this._li.computeIntersection(this._offset0.p0,this._offset0.p1,this._offset1.p0,this._offset1.p1);if(this._li.hasIntersection()){this._segList.addPt(this._li.getIntersection(0));}else {this._hasNarrowConcaveAngle=true;if(this._offset0.p1.distance(this._offset1.p0)<this._distance*OffsetSegmentGenerator.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR){this._segList.addPt(this._offset0.p1);}else {this._segList.addPt(this._offset0.p1);if(this._closingSegLengthFactor>0){var mid0=new Coordinate((this._closingSegLengthFactor*this._offset0.p1.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset0.p1.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(mid0);var mid1=new Coordinate((this._closingSegLengthFactor*this._offset1.p0.x+this._s1.x)/(this._closingSegLengthFactor+1),(this._closingSegLengthFactor*this._offset1.p0.y+this._s1.y)/(this._closingSegLengthFactor+1));this._segList.addPt(mid1);}else {this._segList.addPt(this._s1);}this._segList.addPt(this._offset1.p0);}}};OffsetSegmentGenerator.prototype.createCircle=function createCircle(p){var pt=new Coordinate(p.x+this._distance,p.y);this._segList.addPt(pt);this.addFilletArc(p,0.0,2.0*Math.PI,-1,this._distance);this._segList.closeRing();};OffsetSegmentGenerator.prototype.addBevelJoin=function addBevelJoin(offset0,offset1){this._segList.addPt(offset0.p1);this._segList.addPt(offset1.p0);};OffsetSegmentGenerator.prototype.init=function init(distance){this._distance=distance;this._maxCurveSegmentError=distance*(1-Math.cos(this._filletAngleQuantum/2.0));this._segList=new OffsetSegmentString();this._segList.setPrecisionModel(this._precisionModel);this._segList.setMinimumVertexDistance(distance*OffsetSegmentGenerator.CURVE_VERTEX_SNAP_DISTANCE_FACTOR);};OffsetSegmentGenerator.prototype.addCollinear=function addCollinear(addStartPoint){this._li.computeIntersection(this._s0,this._s1,this._s1,this._s2);var numInt=this._li.getIntersectionNum();if(numInt>=2){if(this._bufParams.getJoinStyle()===BufferParameters.JOIN_BEVEL||this._bufParams.getJoinStyle()===BufferParameters.JOIN_MITRE){if(addStartPoint){this._segList.addPt(this._offset0.p1);}this._segList.addPt(this._offset1.p0);}else {this.addFilletCorner(this._s1,this._offset0.p1,this._offset1.p0,CGAlgorithms.CLOCKWISE,this._distance);}}};OffsetSegmentGenerator.prototype.closeRing=function closeRing(){this._segList.closeRing();};OffsetSegmentGenerator.prototype.hasNarrowConcaveAngle=function hasNarrowConcaveAngle(){return this._hasNarrowConcaveAngle;};OffsetSegmentGenerator.prototype.interfaces_=function interfaces_(){return [];};OffsetSegmentGenerator.prototype.getClass=function getClass(){return OffsetSegmentGenerator;};staticAccessors$27.OFFSET_SEGMENT_SEPARATION_FACTOR.get=function(){return 1.0E-3;};staticAccessors$27.INSIDE_TURN_VERTEX_SNAP_DISTANCE_FACTOR.get=function(){return 1.0E-3;};staticAccessors$27.CURVE_VERTEX_SNAP_DISTANCE_FACTOR.get=function(){return 1.0E-6;};staticAccessors$27.MAX_CLOSING_SEG_LEN_FACTOR.get=function(){return 80;};Object.defineProperties(OffsetSegmentGenerator,staticAccessors$27);var OffsetCurveBuilder=function OffsetCurveBuilder(){this._distance=0.0;this._precisionModel=null;this._bufParams=null;var precisionModel=arguments[0];var bufParams=arguments[1];this._precisionModel=precisionModel;this._bufParams=bufParams;};OffsetCurveBuilder.prototype.getOffsetCurve=function getOffsetCurve(inputPts,distance){this._distance=distance;if(distance===0.0){return null;}var isRightSide=distance<0.0;var posDistance=Math.abs(distance);var segGen=this.getSegGen(posDistance);if(inputPts.length<=1){this.computePointCurve(inputPts[0],segGen);}else {this.computeOffsetCurve(inputPts,isRightSide,segGen);}var curvePts=segGen.getCoordinates();if(isRightSide){CoordinateArrays.reverse(curvePts);}return curvePts;};OffsetCurveBuilder.prototype.computeSingleSidedBufferCurve=function computeSingleSidedBufferCurve(inputPts,isRightSide,segGen){var distTol=this.simplifyTolerance(this._distance);if(isRightSide){segGen.addSegments(inputPts,true);var simp2=BufferInputLineSimplifier.simplify(inputPts,-distTol);var n2=simp2.length-1;segGen.initSideSegments(simp2[n2],simp2[n2-1],Position.LEFT);segGen.addFirstSegment();for(var i=n2-2;i>=0;i--){segGen.addNextSegment(simp2[i],true);}}else {segGen.addSegments(inputPts,false);var simp1=BufferInputLineSimplifier.simplify(inputPts,distTol);var n1=simp1.length-1;segGen.initSideSegments(simp1[0],simp1[1],Position.LEFT);segGen.addFirstSegment();for(var i$1=2;i$1<=n1;i$1++){segGen.addNextSegment(simp1[i$1],true);}}segGen.addLastSegment();segGen.closeRing();};OffsetCurveBuilder.prototype.computeRingBufferCurve=function computeRingBufferCurve(inputPts,side,segGen){var distTol=this.simplifyTolerance(this._distance);if(side===Position.RIGHT){distTol=-distTol;}var simp=BufferInputLineSimplifier.simplify(inputPts,distTol);var n=simp.length-1;segGen.initSideSegments(simp[n-1],simp[0],side);for(var i=1;i<=n;i++){var addStartPoint=i!==1;segGen.addNextSegment(simp[i],addStartPoint);}segGen.closeRing();};OffsetCurveBuilder.prototype.computeLineBufferCurve=function computeLineBufferCurve(inputPts,segGen){var distTol=this.simplifyTolerance(this._distance);var simp1=BufferInputLineSimplifier.simplify(inputPts,distTol);var n1=simp1.length-1;segGen.initSideSegments(simp1[0],simp1[1],Position.LEFT);for(var i=2;i<=n1;i++){segGen.addNextSegment(simp1[i],true);}segGen.addLastSegment();segGen.addLineEndCap(simp1[n1-1],simp1[n1]);var simp2=BufferInputLineSimplifier.simplify(inputPts,-distTol);var n2=simp2.length-1;segGen.initSideSegments(simp2[n2],simp2[n2-1],Position.LEFT);for(var i$1=n2-2;i$1>=0;i$1--){segGen.addNextSegment(simp2[i$1],true);}segGen.addLastSegment();segGen.addLineEndCap(simp2[1],simp2[0]);segGen.closeRing();};OffsetCurveBuilder.prototype.computePointCurve=function computePointCurve(pt,segGen){switch(this._bufParams.getEndCapStyle()){case BufferParameters.CAP_ROUND:segGen.createCircle(pt);break;case BufferParameters.CAP_SQUARE:segGen.createSquare(pt);break;}};OffsetCurveBuilder.prototype.getLineCurve=function getLineCurve(inputPts,distance){this._distance=distance;if(distance<0.0&&!this._bufParams.isSingleSided()){return null;}if(distance===0.0){return null;}var posDistance=Math.abs(distance);var segGen=this.getSegGen(posDistance);if(inputPts.length<=1){this.computePointCurve(inputPts[0],segGen);}else {if(this._bufParams.isSingleSided()){var isRightSide=distance<0.0;this.computeSingleSidedBufferCurve(inputPts,isRightSide,segGen);}else {this.computeLineBufferCurve(inputPts,segGen);}}var lineCoord=segGen.getCoordinates();return lineCoord;};OffsetCurveBuilder.prototype.getBufferParameters=function getBufferParameters(){return this._bufParams;};OffsetCurveBuilder.prototype.simplifyTolerance=function simplifyTolerance(bufDistance){return bufDistance*this._bufParams.getSimplifyFactor();};OffsetCurveBuilder.prototype.getRingCurve=function getRingCurve(inputPts,side,distance){this._distance=distance;if(inputPts.length<=2){return this.getLineCurve(inputPts,distance);}if(distance===0.0){return OffsetCurveBuilder.copyCoordinates(inputPts);}var segGen=this.getSegGen(distance);this.computeRingBufferCurve(inputPts,side,segGen);return segGen.getCoordinates();};OffsetCurveBuilder.prototype.computeOffsetCurve=function computeOffsetCurve(inputPts,isRightSide,segGen){var distTol=this.simplifyTolerance(this._distance);if(isRightSide){var simp2=BufferInputLineSimplifier.simplify(inputPts,-distTol);var n2=simp2.length-1;segGen.initSideSegments(simp2[n2],simp2[n2-1],Position.LEFT);segGen.addFirstSegment();for(var i=n2-2;i>=0;i--){segGen.addNextSegment(simp2[i],true);}}else {var simp1=BufferInputLineSimplifier.simplify(inputPts,distTol);var n1=simp1.length-1;segGen.initSideSegments(simp1[0],simp1[1],Position.LEFT);segGen.addFirstSegment();for(var i$1=2;i$1<=n1;i$1++){segGen.addNextSegment(simp1[i$1],true);}}segGen.addLastSegment();};OffsetCurveBuilder.prototype.getSegGen=function getSegGen(distance){return new OffsetSegmentGenerator(this._precisionModel,this._bufParams,distance);};OffsetCurveBuilder.prototype.interfaces_=function interfaces_(){return [];};OffsetCurveBuilder.prototype.getClass=function getClass(){return OffsetCurveBuilder;};OffsetCurveBuilder.copyCoordinates=function copyCoordinates(pts){var copy=new Array(pts.length).fill(null);for(var i=0;i<copy.length;i++){copy[i]=new Coordinate(pts[i]);}return copy;};var SubgraphDepthLocater=function SubgraphDepthLocater(){this._subgraphs=null;this._seg=new LineSegment();this._cga=new CGAlgorithms();var subgraphs=arguments[0];this._subgraphs=subgraphs;};var staticAccessors$30={DepthSegment:{configurable:true}};SubgraphDepthLocater.prototype.findStabbedSegments=function findStabbedSegments(){var this$1=this;if(arguments.length===1){var stabbingRayLeftPt=arguments[0];var stabbedSegments=new ArrayList();for(var i=this._subgraphs.iterator();i.hasNext();){var bsg=i.next();var env=bsg.getEnvelope();if(stabbingRayLeftPt.y<env.getMinY()||stabbingRayLeftPt.y>env.getMaxY()){continue;}this$1.findStabbedSegments(stabbingRayLeftPt,bsg.getDirectedEdges(),stabbedSegments);}return stabbedSegments;}else if(arguments.length===3){if(hasInterface(arguments[2],List)&&arguments[0]instanceof Coordinate&&arguments[1]instanceof DirectedEdge){var stabbingRayLeftPt$1=arguments[0];var dirEdge=arguments[1];var stabbedSegments$1=arguments[2];var pts=dirEdge.getEdge().getCoordinates();for(var i$1=0;i$1<pts.length-1;i$1++){this$1._seg.p0=pts[i$1];this$1._seg.p1=pts[i$1+1];if(this$1._seg.p0.y>this$1._seg.p1.y){this$1._seg.reverse();}var maxx=Math.max(this$1._seg.p0.x,this$1._seg.p1.x);if(maxx<stabbingRayLeftPt$1.x){continue;}if(this$1._seg.isHorizontal()){continue;}if(stabbingRayLeftPt$1.y<this$1._seg.p0.y||stabbingRayLeftPt$1.y>this$1._seg.p1.y){continue;}if(CGAlgorithms.computeOrientation(this$1._seg.p0,this$1._seg.p1,stabbingRayLeftPt$1)===CGAlgorithms.RIGHT){continue;}var depth=dirEdge.getDepth(Position.LEFT);if(!this$1._seg.p0.equals(pts[i$1])){depth=dirEdge.getDepth(Position.RIGHT);}var ds=new DepthSegment(this$1._seg,depth);stabbedSegments$1.add(ds);}}else if(hasInterface(arguments[2],List)&&arguments[0]instanceof Coordinate&&hasInterface(arguments[1],List)){var stabbingRayLeftPt$2=arguments[0];var dirEdges=arguments[1];var stabbedSegments$2=arguments[2];for(var i$2=dirEdges.iterator();i$2.hasNext();){var de=i$2.next();if(!de.isForward()){continue;}this$1.findStabbedSegments(stabbingRayLeftPt$2,de,stabbedSegments$2);}}}};SubgraphDepthLocater.prototype.getDepth=function getDepth(p){var stabbedSegments=this.findStabbedSegments(p);if(stabbedSegments.size()===0){return 0;}var ds=Collections.min(stabbedSegments);return ds._leftDepth;};SubgraphDepthLocater.prototype.interfaces_=function interfaces_(){return [];};SubgraphDepthLocater.prototype.getClass=function getClass(){return SubgraphDepthLocater;};staticAccessors$30.DepthSegment.get=function(){return DepthSegment;};Object.defineProperties(SubgraphDepthLocater,staticAccessors$30);var DepthSegment=function DepthSegment(){this._upwardSeg=null;this._leftDepth=null;var seg=arguments[0];var depth=arguments[1];this._upwardSeg=new LineSegment(seg);this._leftDepth=depth;};DepthSegment.prototype.compareTo=function compareTo(obj){var other=obj;if(this._upwardSeg.minX()>=other._upwardSeg.maxX()){return 1;}if(this._upwardSeg.maxX()<=other._upwardSeg.minX()){return -1;}var orientIndex=this._upwardSeg.orientationIndex(other._upwardSeg);if(orientIndex!==0){return orientIndex;}orientIndex=-1*other._upwardSeg.orientationIndex(this._upwardSeg);if(orientIndex!==0){return orientIndex;}return this._upwardSeg.compareTo(other._upwardSeg);};DepthSegment.prototype.compareX=function compareX(seg0,seg1){var compare0=seg0.p0.compareTo(seg1.p0);if(compare0!==0){return compare0;}return seg0.p1.compareTo(seg1.p1);};DepthSegment.prototype.toString=function toString(){return this._upwardSeg.toString();};DepthSegment.prototype.interfaces_=function interfaces_(){return [Comparable];};DepthSegment.prototype.getClass=function getClass(){return DepthSegment;};var Triangle=function Triangle(p0,p1,p2){this.p0=p0||null;this.p1=p1||null;this.p2=p2||null;};Triangle.prototype.area=function area(){return Triangle.area(this.p0,this.p1,this.p2);};Triangle.prototype.signedArea=function signedArea(){return Triangle.signedArea(this.p0,this.p1,this.p2);};Triangle.prototype.interpolateZ=function interpolateZ(p){if(p===null){throw new IllegalArgumentException('Supplied point is null.');}return Triangle.interpolateZ(p,this.p0,this.p1,this.p2);};Triangle.prototype.longestSideLength=function longestSideLength(){return Triangle.longestSideLength(this.p0,this.p1,this.p2);};Triangle.prototype.isAcute=function isAcute(){return Triangle.isAcute(this.p0,this.p1,this.p2);};Triangle.prototype.circumcentre=function circumcentre(){return Triangle.circumcentre(this.p0,this.p1,this.p2);};Triangle.prototype.area3D=function area3D(){return Triangle.area3D(this.p0,this.p1,this.p2);};Triangle.prototype.centroid=function centroid(){return Triangle.centroid(this.p0,this.p1,this.p2);};Triangle.prototype.inCentre=function inCentre(){return Triangle.inCentre(this.p0,this.p1,this.p2);};Triangle.prototype.interfaces_=function interfaces_(){return [];};Triangle.prototype.getClass=function getClass(){return Triangle;};Triangle.area=function area(a,b,c){return Math.abs(((c.x-a.x)*(b.y-a.y)-(b.x-a.x)*(c.y-a.y))/2);};Triangle.signedArea=function signedArea(a,b,c){return ((c.x-a.x)*(b.y-a.y)-(b.x-a.x)*(c.y-a.y))/2;};Triangle.det=function det(m00,m01,m10,m11){return m00*m11-m01*m10;};Triangle.interpolateZ=function interpolateZ(p,v0,v1,v2){var x0=v0.x;var y0=v0.y;var a=v1.x-x0;var b=v2.x-x0;var c=v1.y-y0;var d=v2.y-y0;var det=a*d-b*c;var dx=p.x-x0;var dy=p.y-y0;var t=(d*dx-b*dy)/det;var u=(-c*dx+a*dy)/det;var z=v0.z+t*(v1.z-v0.z)+u*(v2.z-v0.z);return z;};Triangle.longestSideLength=function longestSideLength(a,b,c){var lenAB=a.distance(b);var lenBC=b.distance(c);var lenCA=c.distance(a);var maxLen=lenAB;if(lenBC>maxLen){maxLen=lenBC;}if(lenCA>maxLen){maxLen=lenCA;}return maxLen;};Triangle.isAcute=function isAcute(a,b,c){if(!Angle.isAcute(a,b,c)){return false;}if(!Angle.isAcute(b,c,a)){return false;}if(!Angle.isAcute(c,a,b)){return false;}return true;};Triangle.circumcentre=function circumcentre(a,b,c){var cx=c.x;var cy=c.y;var ax=a.x-cx;var ay=a.y-cy;var bx=b.x-cx;var by=b.y-cy;var denom=2*Triangle.det(ax,ay,bx,by);var numx=Triangle.det(ay,ax*ax+ay*ay,by,bx*bx+by*by);var numy=Triangle.det(ax,ax*ax+ay*ay,bx,bx*bx+by*by);var ccx=cx-numx/denom;var ccy=cy+numy/denom;return new Coordinate(ccx,ccy);};Triangle.perpendicularBisector=function perpendicularBisector(a,b){var dx=b.x-a.x;var dy=b.y-a.y;var l1=new HCoordinate(a.x+dx/2.0,a.y+dy/2.0,1.0);var l2=new HCoordinate(a.x-dy+dx/2.0,a.y+dx+dy/2.0,1.0);return new HCoordinate(l1,l2);};Triangle.angleBisector=function angleBisector(a,b,c){var len0=b.distance(a);var len2=b.distance(c);var frac=len0/(len0+len2);var dx=c.x-a.x;var dy=c.y-a.y;var splitPt=new Coordinate(a.x+frac*dx,a.y+frac*dy);return splitPt;};Triangle.area3D=function area3D(a,b,c){var ux=b.x-a.x;var uy=b.y-a.y;var uz=b.z-a.z;var vx=c.x-a.x;var vy=c.y-a.y;var vz=c.z-a.z;var crossx=uy*vz-uz*vy;var crossy=uz*vx-ux*vz;var crossz=ux*vy-uy*vx;var absSq=crossx*crossx+crossy*crossy+crossz*crossz;var area3D=Math.sqrt(absSq)/2;return area3D;};Triangle.centroid=function centroid(a,b,c){var x=(a.x+b.x+c.x)/3;var y=(a.y+b.y+c.y)/3;return new Coordinate(x,y);};Triangle.inCentre=function inCentre(a,b,c){var len0=b.distance(c);var len1=a.distance(c);var len2=a.distance(b);var circum=len0+len1+len2;var inCentreX=(len0*a.x+len1*b.x+len2*c.x)/circum;var inCentreY=(len0*a.y+len1*b.y+len2*c.y)/circum;return new Coordinate(inCentreX,inCentreY);};var OffsetCurveSetBuilder=function OffsetCurveSetBuilder(){this._inputGeom=null;this._distance=null;this._curveBuilder=null;this._curveList=new ArrayList();var inputGeom=arguments[0];var distance=arguments[1];var curveBuilder=arguments[2];this._inputGeom=inputGeom;this._distance=distance;this._curveBuilder=curveBuilder;};OffsetCurveSetBuilder.prototype.addPoint=function addPoint(p){if(this._distance<=0.0){return null;}var coord=p.getCoordinates();var curve=this._curveBuilder.getLineCurve(coord,this._distance);this.addCurve(curve,Location.EXTERIOR,Location.INTERIOR);};OffsetCurveSetBuilder.prototype.addPolygon=function addPolygon(p){var this$1=this;var offsetDistance=this._distance;var offsetSide=Position.LEFT;if(this._distance<0.0){offsetDistance=-this._distance;offsetSide=Position.RIGHT;}var shell=p.getExteriorRing();var shellCoord=CoordinateArrays.removeRepeatedPoints(shell.getCoordinates());if(this._distance<0.0&&this.isErodedCompletely(shell,this._distance)){return null;}if(this._distance<=0.0&&shellCoord.length<3){return null;}this.addPolygonRing(shellCoord,offsetDistance,offsetSide,Location.EXTERIOR,Location.INTERIOR);for(var i=0;i<p.getNumInteriorRing();i++){var hole=p.getInteriorRingN(i);var holeCoord=CoordinateArrays.removeRepeatedPoints(hole.getCoordinates());if(this$1._distance>0.0&&this$1.isErodedCompletely(hole,-this$1._distance)){continue;}this$1.addPolygonRing(holeCoord,offsetDistance,Position.opposite(offsetSide),Location.INTERIOR,Location.EXTERIOR);}};OffsetCurveSetBuilder.prototype.isTriangleErodedCompletely=function isTriangleErodedCompletely(triangleCoord,bufferDistance){var tri=new Triangle(triangleCoord[0],triangleCoord[1],triangleCoord[2]);var inCentre=tri.inCentre();var distToCentre=CGAlgorithms.distancePointLine(inCentre,tri.p0,tri.p1);return distToCentre<Math.abs(bufferDistance);};OffsetCurveSetBuilder.prototype.addLineString=function addLineString(line){if(this._distance<=0.0&&!this._curveBuilder.getBufferParameters().isSingleSided()){return null;}var coord=CoordinateArrays.removeRepeatedPoints(line.getCoordinates());var curve=this._curveBuilder.getLineCurve(coord,this._distance);this.addCurve(curve,Location.EXTERIOR,Location.INTERIOR);};OffsetCurveSetBuilder.prototype.addCurve=function addCurve(coord,leftLoc,rightLoc){if(coord===null||coord.length<2){return null;}var e=new NodedSegmentString(coord,new Label(0,Location.BOUNDARY,leftLoc,rightLoc));this._curveList.add(e);};OffsetCurveSetBuilder.prototype.getCurves=function getCurves(){this.add(this._inputGeom);return this._curveList;};OffsetCurveSetBuilder.prototype.addPolygonRing=function addPolygonRing(coord,offsetDistance,side,cwLeftLoc,cwRightLoc){if(offsetDistance===0.0&&coord.length<LinearRing.MINIMUM_VALID_SIZE){return null;}var leftLoc=cwLeftLoc;var rightLoc=cwRightLoc;if(coord.length>=LinearRing.MINIMUM_VALID_SIZE&&CGAlgorithms.isCCW(coord)){leftLoc=cwRightLoc;rightLoc=cwLeftLoc;side=Position.opposite(side);}var curve=this._curveBuilder.getRingCurve(coord,side,offsetDistance);this.addCurve(curve,leftLoc,rightLoc);};OffsetCurveSetBuilder.prototype.add=function add(g){if(g.isEmpty()){return null;}if(g instanceof Polygon){this.addPolygon(g);}else if(g instanceof LineString){this.addLineString(g);}else if(g instanceof Point){this.addPoint(g);}else if(g instanceof MultiPoint){this.addCollection(g);}else if(g instanceof MultiLineString){this.addCollection(g);}else if(g instanceof MultiPolygon){this.addCollection(g);}else if(g instanceof GeometryCollection){this.addCollection(g);}// else throw new UnsupportedOperationException(g.getClass().getName())
  };OffsetCurveSetBuilder.prototype.isErodedCompletely=function isErodedCompletely(ring,bufferDistance){var ringCoord=ring.getCoordinates();// const minDiam = 0.0
  if(ringCoord.length<4){return bufferDistance<0;}if(ringCoord.length===4){return this.isTriangleErodedCompletely(ringCoord,bufferDistance);}var env=ring.getEnvelopeInternal();var envMinDimension=Math.min(env.getHeight(),env.getWidth());if(bufferDistance<0.0&&2*Math.abs(bufferDistance)>envMinDimension){return true;}return false;};OffsetCurveSetBuilder.prototype.addCollection=function addCollection(gc){var this$1=this;for(var i=0;i<gc.getNumGeometries();i++){var g=gc.getGeometryN(i);this$1.add(g);}};OffsetCurveSetBuilder.prototype.interfaces_=function interfaces_(){return [];};OffsetCurveSetBuilder.prototype.getClass=function getClass(){return OffsetCurveSetBuilder;};var PointOnGeometryLocator=function PointOnGeometryLocator(){};PointOnGeometryLocator.prototype.locate=function locate(p){};PointOnGeometryLocator.prototype.interfaces_=function interfaces_(){return [];};PointOnGeometryLocator.prototype.getClass=function getClass(){return PointOnGeometryLocator;};var GeometryCollectionIterator=function GeometryCollectionIterator(){this._parent=null;this._atStart=null;this._max=null;this._index=null;this._subcollectionIterator=null;var parent=arguments[0];this._parent=parent;this._atStart=true;this._index=0;this._max=parent.getNumGeometries();};GeometryCollectionIterator.prototype.next=function next(){if(this._atStart){this._atStart=false;if(GeometryCollectionIterator.isAtomic(this._parent)){this._index++;}return this._parent;}if(this._subcollectionIterator!==null){if(this._subcollectionIterator.hasNext()){return this._subcollectionIterator.next();}else {this._subcollectionIterator=null;}}if(this._index>=this._max){throw new NoSuchElementException();}var obj=this._parent.getGeometryN(this._index++);if(obj instanceof GeometryCollection){this._subcollectionIterator=new GeometryCollectionIterator(obj);return this._subcollectionIterator.next();}return obj;};GeometryCollectionIterator.prototype.remove=function remove(){throw new Error(this.getClass().getName());};GeometryCollectionIterator.prototype.hasNext=function hasNext(){if(this._atStart){return true;}if(this._subcollectionIterator!==null){if(this._subcollectionIterator.hasNext()){return true;}this._subcollectionIterator=null;}if(this._index>=this._max){return false;}return true;};GeometryCollectionIterator.prototype.interfaces_=function interfaces_(){return [Iterator];};GeometryCollectionIterator.prototype.getClass=function getClass(){return GeometryCollectionIterator;};GeometryCollectionIterator.isAtomic=function isAtomic(geom){return !(geom instanceof GeometryCollection);};var SimplePointInAreaLocator=function SimplePointInAreaLocator(){this._geom=null;var geom=arguments[0];this._geom=geom;};SimplePointInAreaLocator.prototype.locate=function locate(p){return SimplePointInAreaLocator.locate(p,this._geom);};SimplePointInAreaLocator.prototype.interfaces_=function interfaces_(){return [PointOnGeometryLocator];};SimplePointInAreaLocator.prototype.getClass=function getClass(){return SimplePointInAreaLocator;};SimplePointInAreaLocator.isPointInRing=function isPointInRing(p,ring){if(!ring.getEnvelopeInternal().intersects(p)){return false;}return CGAlgorithms.isPointInRing(p,ring.getCoordinates());};SimplePointInAreaLocator.containsPointInPolygon=function containsPointInPolygon(p,poly){if(poly.isEmpty()){return false;}var shell=poly.getExteriorRing();if(!SimplePointInAreaLocator.isPointInRing(p,shell)){return false;}for(var i=0;i<poly.getNumInteriorRing();i++){var hole=poly.getInteriorRingN(i);if(SimplePointInAreaLocator.isPointInRing(p,hole)){return false;}}return true;};SimplePointInAreaLocator.containsPoint=function containsPoint(p,geom){if(geom instanceof Polygon){return SimplePointInAreaLocator.containsPointInPolygon(p,geom);}else if(geom instanceof GeometryCollection){var geomi=new GeometryCollectionIterator(geom);while(geomi.hasNext()){var g2=geomi.next();if(g2!==geom){if(SimplePointInAreaLocator.containsPoint(p,g2)){return true;}}}}return false;};SimplePointInAreaLocator.locate=function locate(p,geom){if(geom.isEmpty()){return Location.EXTERIOR;}if(SimplePointInAreaLocator.containsPoint(p,geom)){return Location.INTERIOR;}return Location.EXTERIOR;};var EdgeEndStar=function EdgeEndStar(){this._edgeMap=new TreeMap();this._edgeList=null;this._ptInAreaLocation=[Location.NONE,Location.NONE];};EdgeEndStar.prototype.getNextCW=function getNextCW(ee){this.getEdges();var i=this._edgeList.indexOf(ee);var iNextCW=i-1;if(i===0){iNextCW=this._edgeList.size()-1;}return this._edgeList.get(iNextCW);};EdgeEndStar.prototype.propagateSideLabels=function propagateSideLabels(geomIndex){var startLoc=Location.NONE;for(var it=this.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();if(label.isArea(geomIndex)&&label.getLocation(geomIndex,Position.LEFT)!==Location.NONE){startLoc=label.getLocation(geomIndex,Position.LEFT);}}if(startLoc===Location.NONE){return null;}var currLoc=startLoc;for(var it$1=this.iterator();it$1.hasNext();){var e$1=it$1.next();var label$1=e$1.getLabel();if(label$1.getLocation(geomIndex,Position.ON)===Location.NONE){label$1.setLocation(geomIndex,Position.ON,currLoc);}if(label$1.isArea(geomIndex)){var leftLoc=label$1.getLocation(geomIndex,Position.LEFT);var rightLoc=label$1.getLocation(geomIndex,Position.RIGHT);if(rightLoc!==Location.NONE){if(rightLoc!==currLoc){throw new TopologyException('side location conflict',e$1.getCoordinate());}if(leftLoc===Location.NONE){Assert.shouldNeverReachHere('found single null side (at '+e$1.getCoordinate()+')');}currLoc=leftLoc;}else {Assert.isTrue(label$1.getLocation(geomIndex,Position.LEFT)===Location.NONE,'found single null side');label$1.setLocation(geomIndex,Position.RIGHT,currLoc);label$1.setLocation(geomIndex,Position.LEFT,currLoc);}}}};EdgeEndStar.prototype.getCoordinate=function getCoordinate(){var it=this.iterator();if(!it.hasNext()){return null;}var e=it.next();return e.getCoordinate();};EdgeEndStar.prototype.print=function print(out){System.out.println('EdgeEndStar:   '+this.getCoordinate());for(var it=this.iterator();it.hasNext();){var e=it.next();e.print(out);}};EdgeEndStar.prototype.isAreaLabelsConsistent=function isAreaLabelsConsistent(geomGraph){this.computeEdgeEndLabels(geomGraph.getBoundaryNodeRule());return this.checkAreaLabelsConsistent(0);};EdgeEndStar.prototype.checkAreaLabelsConsistent=function checkAreaLabelsConsistent(geomIndex){var edges=this.getEdges();if(edges.size()<=0){return true;}var lastEdgeIndex=edges.size()-1;var startLabel=edges.get(lastEdgeIndex).getLabel();var startLoc=startLabel.getLocation(geomIndex,Position.LEFT);Assert.isTrue(startLoc!==Location.NONE,'Found unlabelled area edge');var currLoc=startLoc;for(var it=this.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();Assert.isTrue(label.isArea(geomIndex),'Found non-area edge');var leftLoc=label.getLocation(geomIndex,Position.LEFT);var rightLoc=label.getLocation(geomIndex,Position.RIGHT);if(leftLoc===rightLoc){return false;}if(rightLoc!==currLoc){return false;}currLoc=leftLoc;}return true;};EdgeEndStar.prototype.findIndex=function findIndex(eSearch){var this$1=this;this.iterator();for(var i=0;i<this._edgeList.size();i++){var e=this$1._edgeList.get(i);if(e===eSearch){return i;}}return -1;};EdgeEndStar.prototype.iterator=function iterator(){return this.getEdges().iterator();};EdgeEndStar.prototype.getEdges=function getEdges(){if(this._edgeList===null){this._edgeList=new ArrayList(this._edgeMap.values());}return this._edgeList;};EdgeEndStar.prototype.getLocation=function getLocation(geomIndex,p,geom){if(this._ptInAreaLocation[geomIndex]===Location.NONE){this._ptInAreaLocation[geomIndex]=SimplePointInAreaLocator.locate(p,geom[geomIndex].getGeometry());}return this._ptInAreaLocation[geomIndex];};EdgeEndStar.prototype.toString=function toString(){var buf=new StringBuffer();buf.append('EdgeEndStar:   '+this.getCoordinate());buf.append('\n');for(var it=this.iterator();it.hasNext();){var e=it.next();buf.append(e);buf.append('\n');}return buf.toString();};EdgeEndStar.prototype.computeEdgeEndLabels=function computeEdgeEndLabels(boundaryNodeRule){for(var it=this.iterator();it.hasNext();){var ee=it.next();ee.computeLabel(boundaryNodeRule);}};EdgeEndStar.prototype.computeLabelling=function computeLabelling(geomGraph){var this$1=this;this.computeEdgeEndLabels(geomGraph[0].getBoundaryNodeRule());this.propagateSideLabels(0);this.propagateSideLabels(1);var hasDimensionalCollapseEdge=[false,false];for(var it=this.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();for(var geomi=0;geomi<2;geomi++){if(label.isLine(geomi)&&label.getLocation(geomi)===Location.BOUNDARY){hasDimensionalCollapseEdge[geomi]=true;}}}for(var it$1=this.iterator();it$1.hasNext();){var e$1=it$1.next();var label$1=e$1.getLabel();for(var geomi$1=0;geomi$1<2;geomi$1++){if(label$1.isAnyNull(geomi$1)){var loc=Location.NONE;if(hasDimensionalCollapseEdge[geomi$1]){loc=Location.EXTERIOR;}else {var p=e$1.getCoordinate();loc=this$1.getLocation(geomi$1,p,geomGraph);}label$1.setAllLocationsIfNull(geomi$1,loc);}}}};EdgeEndStar.prototype.getDegree=function getDegree(){return this._edgeMap.size();};EdgeEndStar.prototype.insertEdgeEnd=function insertEdgeEnd(e,obj){this._edgeMap.put(e,obj);this._edgeList=null;};EdgeEndStar.prototype.interfaces_=function interfaces_(){return [];};EdgeEndStar.prototype.getClass=function getClass(){return EdgeEndStar;};var DirectedEdgeStar=function(EdgeEndStar$$1){function DirectedEdgeStar(){EdgeEndStar$$1.call(this);this._resultAreaEdgeList=null;this._label=null;this._SCANNING_FOR_INCOMING=1;this._LINKING_TO_OUTGOING=2;}if(EdgeEndStar$$1)DirectedEdgeStar.__proto__=EdgeEndStar$$1;DirectedEdgeStar.prototype=Object.create(EdgeEndStar$$1&&EdgeEndStar$$1.prototype);DirectedEdgeStar.prototype.constructor=DirectedEdgeStar;DirectedEdgeStar.prototype.linkResultDirectedEdges=function linkResultDirectedEdges(){var this$1=this;this.getResultAreaEdges();var firstOut=null;var incoming=null;var state=this._SCANNING_FOR_INCOMING;for(var i=0;i<this._resultAreaEdgeList.size();i++){var nextOut=this$1._resultAreaEdgeList.get(i);var nextIn=nextOut.getSym();if(!nextOut.getLabel().isArea()){continue;}if(firstOut===null&&nextOut.isInResult()){firstOut=nextOut;}switch(state){case this$1._SCANNING_FOR_INCOMING:if(!nextIn.isInResult()){continue;}incoming=nextIn;state=this$1._LINKING_TO_OUTGOING;break;case this$1._LINKING_TO_OUTGOING:if(!nextOut.isInResult()){continue;}incoming.setNext(nextOut);state=this$1._SCANNING_FOR_INCOMING;break;}}if(state===this._LINKING_TO_OUTGOING){if(firstOut===null){throw new TopologyException('no outgoing dirEdge found',this.getCoordinate());}Assert.isTrue(firstOut.isInResult(),'unable to link last incoming dirEdge');incoming.setNext(firstOut);}};DirectedEdgeStar.prototype.insert=function insert(ee){var de=ee;this.insertEdgeEnd(de,de);};DirectedEdgeStar.prototype.getRightmostEdge=function getRightmostEdge(){var edges=this.getEdges();var size=edges.size();if(size<1){return null;}var de0=edges.get(0);if(size===1){return de0;}var deLast=edges.get(size-1);var quad0=de0.getQuadrant();var quad1=deLast.getQuadrant();if(Quadrant.isNorthern(quad0)&&Quadrant.isNorthern(quad1)){return de0;}else if(!Quadrant.isNorthern(quad0)&&!Quadrant.isNorthern(quad1)){return deLast;}else {// const nonHorizontalEdge = null
  if(de0.getDy()!==0){return de0;}else if(deLast.getDy()!==0){return deLast;}}Assert.shouldNeverReachHere('found two horizontal edges incident on node');return null;};DirectedEdgeStar.prototype.print=function print(out){System.out.println('DirectedEdgeStar: '+this.getCoordinate());for(var it=this.iterator();it.hasNext();){var de=it.next();out.print('out ');de.print(out);out.println();out.print('in ');de.getSym().print(out);out.println();}};DirectedEdgeStar.prototype.getResultAreaEdges=function getResultAreaEdges(){var this$1=this;if(this._resultAreaEdgeList!==null){return this._resultAreaEdgeList;}this._resultAreaEdgeList=new ArrayList();for(var it=this.iterator();it.hasNext();){var de=it.next();if(de.isInResult()||de.getSym().isInResult()){this$1._resultAreaEdgeList.add(de);}}return this._resultAreaEdgeList;};DirectedEdgeStar.prototype.updateLabelling=function updateLabelling(nodeLabel){for(var it=this.iterator();it.hasNext();){var de=it.next();var label=de.getLabel();label.setAllLocationsIfNull(0,nodeLabel.getLocation(0));label.setAllLocationsIfNull(1,nodeLabel.getLocation(1));}};DirectedEdgeStar.prototype.linkAllDirectedEdges=function linkAllDirectedEdges(){var this$1=this;this.getEdges();var prevOut=null;var firstIn=null;for(var i=this._edgeList.size()-1;i>=0;i--){var nextOut=this$1._edgeList.get(i);var nextIn=nextOut.getSym();if(firstIn===null){firstIn=nextIn;}if(prevOut!==null){nextIn.setNext(prevOut);}prevOut=nextOut;}firstIn.setNext(prevOut);};DirectedEdgeStar.prototype.computeDepths=function computeDepths(){var this$1=this;if(arguments.length===1){var de=arguments[0];var edgeIndex=this.findIndex(de);// const label = de.getLabel()
  var startDepth=de.getDepth(Position.LEFT);var targetLastDepth=de.getDepth(Position.RIGHT);var nextDepth=this.computeDepths(edgeIndex+1,this._edgeList.size(),startDepth);var lastDepth=this.computeDepths(0,edgeIndex,nextDepth);if(lastDepth!==targetLastDepth){throw new TopologyException('depth mismatch at '+de.getCoordinate());}}else if(arguments.length===3){var startIndex=arguments[0];var endIndex=arguments[1];var startDepth$1=arguments[2];var currDepth=startDepth$1;for(var i=startIndex;i<endIndex;i++){var nextDe=this$1._edgeList.get(i);// const label = nextDe.getLabel()
  nextDe.setEdgeDepths(Position.RIGHT,currDepth);currDepth=nextDe.getDepth(Position.LEFT);}return currDepth;}};DirectedEdgeStar.prototype.mergeSymLabels=function mergeSymLabels(){for(var it=this.iterator();it.hasNext();){var de=it.next();var label=de.getLabel();label.merge(de.getSym().getLabel());}};DirectedEdgeStar.prototype.linkMinimalDirectedEdges=function linkMinimalDirectedEdges(er){var this$1=this;var firstOut=null;var incoming=null;var state=this._SCANNING_FOR_INCOMING;for(var i=this._resultAreaEdgeList.size()-1;i>=0;i--){var nextOut=this$1._resultAreaEdgeList.get(i);var nextIn=nextOut.getSym();if(firstOut===null&&nextOut.getEdgeRing()===er){firstOut=nextOut;}switch(state){case this$1._SCANNING_FOR_INCOMING:if(nextIn.getEdgeRing()!==er){continue;}incoming=nextIn;state=this$1._LINKING_TO_OUTGOING;break;case this$1._LINKING_TO_OUTGOING:if(nextOut.getEdgeRing()!==er){continue;}incoming.setNextMin(nextOut);state=this$1._SCANNING_FOR_INCOMING;break;}}if(state===this._LINKING_TO_OUTGOING){Assert.isTrue(firstOut!==null,'found null for first outgoing dirEdge');Assert.isTrue(firstOut.getEdgeRing()===er,'unable to link last incoming dirEdge');incoming.setNextMin(firstOut);}};DirectedEdgeStar.prototype.getOutgoingDegree=function getOutgoingDegree(){if(arguments.length===0){var degree=0;for(var it=this.iterator();it.hasNext();){var de=it.next();if(de.isInResult()){degree++;}}return degree;}else if(arguments.length===1){var er=arguments[0];var degree$1=0;for(var it$1=this.iterator();it$1.hasNext();){var de$1=it$1.next();if(de$1.getEdgeRing()===er){degree$1++;}}return degree$1;}};DirectedEdgeStar.prototype.getLabel=function getLabel(){return this._label;};DirectedEdgeStar.prototype.findCoveredLineEdges=function findCoveredLineEdges(){var startLoc=Location.NONE;for(var it=this.iterator();it.hasNext();){var nextOut=it.next();var nextIn=nextOut.getSym();if(!nextOut.isLineEdge()){if(nextOut.isInResult()){startLoc=Location.INTERIOR;break;}if(nextIn.isInResult()){startLoc=Location.EXTERIOR;break;}}}if(startLoc===Location.NONE){return null;}var currLoc=startLoc;for(var it$1=this.iterator();it$1.hasNext();){var nextOut$1=it$1.next();var nextIn$1=nextOut$1.getSym();if(nextOut$1.isLineEdge()){nextOut$1.getEdge().setCovered(currLoc===Location.INTERIOR);}else {if(nextOut$1.isInResult()){currLoc=Location.EXTERIOR;}if(nextIn$1.isInResult()){currLoc=Location.INTERIOR;}}}};DirectedEdgeStar.prototype.computeLabelling=function computeLabelling(geom){var this$1=this;EdgeEndStar$$1.prototype.computeLabelling.call(this,geom);this._label=new Label(Location.NONE);for(var it=this.iterator();it.hasNext();){var ee=it.next();var e=ee.getEdge();var eLabel=e.getLabel();for(var i=0;i<2;i++){var eLoc=eLabel.getLocation(i);if(eLoc===Location.INTERIOR||eLoc===Location.BOUNDARY){this$1._label.setLocation(i,Location.INTERIOR);}}}};DirectedEdgeStar.prototype.interfaces_=function interfaces_(){return [];};DirectedEdgeStar.prototype.getClass=function getClass(){return DirectedEdgeStar;};return DirectedEdgeStar;}(EdgeEndStar);var OverlayNodeFactory=function(NodeFactory$$1){function OverlayNodeFactory(){NodeFactory$$1.apply(this,arguments);}if(NodeFactory$$1)OverlayNodeFactory.__proto__=NodeFactory$$1;OverlayNodeFactory.prototype=Object.create(NodeFactory$$1&&NodeFactory$$1.prototype);OverlayNodeFactory.prototype.constructor=OverlayNodeFactory;OverlayNodeFactory.prototype.createNode=function createNode(coord){return new Node$1(coord,new DirectedEdgeStar());};OverlayNodeFactory.prototype.interfaces_=function interfaces_(){return [];};OverlayNodeFactory.prototype.getClass=function getClass(){return OverlayNodeFactory;};return OverlayNodeFactory;}(NodeFactory);var OrientedCoordinateArray=function OrientedCoordinateArray(){this._pts=null;this._orientation=null;var pts=arguments[0];this._pts=pts;this._orientation=OrientedCoordinateArray.orientation(pts);};OrientedCoordinateArray.prototype.compareTo=function compareTo(o1){var oca=o1;var comp=OrientedCoordinateArray.compareOriented(this._pts,this._orientation,oca._pts,oca._orientation);return comp;};OrientedCoordinateArray.prototype.interfaces_=function interfaces_(){return [Comparable];};OrientedCoordinateArray.prototype.getClass=function getClass(){return OrientedCoordinateArray;};OrientedCoordinateArray.orientation=function orientation(pts){return CoordinateArrays.increasingDirection(pts)===1;};OrientedCoordinateArray.compareOriented=function compareOriented(pts1,orientation1,pts2,orientation2){var dir1=orientation1?1:-1;var dir2=orientation2?1:-1;var limit1=orientation1?pts1.length:-1;var limit2=orientation2?pts2.length:-1;var i1=orientation1?0:pts1.length-1;var i2=orientation2?0:pts2.length-1;// const comp = 0
  while(true){var compPt=pts1[i1].compareTo(pts2[i2]);if(compPt!==0){return compPt;}i1+=dir1;i2+=dir2;var done1=i1===limit1;var done2=i2===limit2;if(done1&&!done2){return -1;}if(!done1&&done2){return 1;}if(done1&&done2){return 0;}}};var EdgeList=function EdgeList(){this._edges=new ArrayList();this._ocaMap=new TreeMap();};EdgeList.prototype.print=function print(out){var this$1=this;out.print('MULTILINESTRING ( ');for(var j=0;j<this._edges.size();j++){var e=this$1._edges.get(j);if(j>0){out.print(',');}out.print('(');var pts=e.getCoordinates();for(var i=0;i<pts.length;i++){if(i>0){out.print(',');}out.print(pts[i].x+' '+pts[i].y);}out.println(')');}out.print(')  ');};EdgeList.prototype.addAll=function addAll(edgeColl){var this$1=this;for(var i=edgeColl.iterator();i.hasNext();){this$1.add(i.next());}};EdgeList.prototype.findEdgeIndex=function findEdgeIndex(e){var this$1=this;for(var i=0;i<this._edges.size();i++){if(this$1._edges.get(i).equals(e)){return i;}}return -1;};EdgeList.prototype.iterator=function iterator(){return this._edges.iterator();};EdgeList.prototype.getEdges=function getEdges(){return this._edges;};EdgeList.prototype.get=function get(i){return this._edges.get(i);};EdgeList.prototype.findEqualEdge=function findEqualEdge(e){var oca=new OrientedCoordinateArray(e.getCoordinates());var matchEdge=this._ocaMap.get(oca);return matchEdge;};EdgeList.prototype.add=function add(e){this._edges.add(e);var oca=new OrientedCoordinateArray(e.getCoordinates());this._ocaMap.put(oca,e);};EdgeList.prototype.interfaces_=function interfaces_(){return [];};EdgeList.prototype.getClass=function getClass(){return EdgeList;};var SegmentIntersector=function SegmentIntersector(){};SegmentIntersector.prototype.processIntersections=function processIntersections(e0,segIndex0,e1,segIndex1){};SegmentIntersector.prototype.isDone=function isDone(){};SegmentIntersector.prototype.interfaces_=function interfaces_(){return [];};SegmentIntersector.prototype.getClass=function getClass(){return SegmentIntersector;};var IntersectionAdder=function IntersectionAdder(){this._hasIntersection=false;this._hasProper=false;this._hasProperInterior=false;this._hasInterior=false;this._properIntersectionPoint=null;this._li=null;this._isSelfIntersection=null;this.numIntersections=0;this.numInteriorIntersections=0;this.numProperIntersections=0;this.numTests=0;var li=arguments[0];this._li=li;};IntersectionAdder.prototype.isTrivialIntersection=function isTrivialIntersection(e0,segIndex0,e1,segIndex1){if(e0===e1){if(this._li.getIntersectionNum()===1){if(IntersectionAdder.isAdjacentSegments(segIndex0,segIndex1)){return true;}if(e0.isClosed()){var maxSegIndex=e0.size()-1;if(segIndex0===0&&segIndex1===maxSegIndex||segIndex1===0&&segIndex0===maxSegIndex){return true;}}}}return false;};IntersectionAdder.prototype.getProperIntersectionPoint=function getProperIntersectionPoint(){return this._properIntersectionPoint;};IntersectionAdder.prototype.hasProperInteriorIntersection=function hasProperInteriorIntersection(){return this._hasProperInterior;};IntersectionAdder.prototype.getLineIntersector=function getLineIntersector(){return this._li;};IntersectionAdder.prototype.hasProperIntersection=function hasProperIntersection(){return this._hasProper;};IntersectionAdder.prototype.processIntersections=function processIntersections(e0,segIndex0,e1,segIndex1){if(e0===e1&&segIndex0===segIndex1){return null;}this.numTests++;var p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this._li.computeIntersection(p00,p01,p10,p11);if(this._li.hasIntersection()){this.numIntersections++;if(this._li.isInteriorIntersection()){this.numInteriorIntersections++;this._hasInterior=true;}if(!this.isTrivialIntersection(e0,segIndex0,e1,segIndex1)){this._hasIntersection=true;e0.addIntersections(this._li,segIndex0,0);e1.addIntersections(this._li,segIndex1,1);if(this._li.isProper()){this.numProperIntersections++;this._hasProper=true;this._hasProperInterior=true;}}}};IntersectionAdder.prototype.hasIntersection=function hasIntersection(){return this._hasIntersection;};IntersectionAdder.prototype.isDone=function isDone(){return false;};IntersectionAdder.prototype.hasInteriorIntersection=function hasInteriorIntersection(){return this._hasInterior;};IntersectionAdder.prototype.interfaces_=function interfaces_(){return [SegmentIntersector];};IntersectionAdder.prototype.getClass=function getClass(){return IntersectionAdder;};IntersectionAdder.isAdjacentSegments=function isAdjacentSegments(i1,i2){return Math.abs(i1-i2)===1;};var EdgeIntersection=function EdgeIntersection(){this.coord=null;this.segmentIndex=null;this.dist=null;var coord=arguments[0];var segmentIndex=arguments[1];var dist=arguments[2];this.coord=new Coordinate(coord);this.segmentIndex=segmentIndex;this.dist=dist;};EdgeIntersection.prototype.getSegmentIndex=function getSegmentIndex(){return this.segmentIndex;};EdgeIntersection.prototype.getCoordinate=function getCoordinate(){return this.coord;};EdgeIntersection.prototype.print=function print(out){out.print(this.coord);out.print(' seg # = '+this.segmentIndex);out.println(' dist = '+this.dist);};EdgeIntersection.prototype.compareTo=function compareTo(obj){var other=obj;return this.compare(other.segmentIndex,other.dist);};EdgeIntersection.prototype.isEndPoint=function isEndPoint(maxSegmentIndex){if(this.segmentIndex===0&&this.dist===0.0){return true;}if(this.segmentIndex===maxSegmentIndex){return true;}return false;};EdgeIntersection.prototype.toString=function toString(){return this.coord+' seg # = '+this.segmentIndex+' dist = '+this.dist;};EdgeIntersection.prototype.getDistance=function getDistance(){return this.dist;};EdgeIntersection.prototype.compare=function compare(segmentIndex,dist){if(this.segmentIndex<segmentIndex){return -1;}if(this.segmentIndex>segmentIndex){return 1;}if(this.dist<dist){return -1;}if(this.dist>dist){return 1;}return 0;};EdgeIntersection.prototype.interfaces_=function interfaces_(){return [Comparable];};EdgeIntersection.prototype.getClass=function getClass(){return EdgeIntersection;};var EdgeIntersectionList=function EdgeIntersectionList(){this._nodeMap=new TreeMap();this.edge=null;var edge=arguments[0];this.edge=edge;};EdgeIntersectionList.prototype.print=function print(out){out.println('Intersections:');for(var it=this.iterator();it.hasNext();){var ei=it.next();ei.print(out);}};EdgeIntersectionList.prototype.iterator=function iterator(){return this._nodeMap.values().iterator();};EdgeIntersectionList.prototype.addSplitEdges=function addSplitEdges(edgeList){var this$1=this;this.addEndpoints();var it=this.iterator();var eiPrev=it.next();while(it.hasNext()){var ei=it.next();var newEdge=this$1.createSplitEdge(eiPrev,ei);edgeList.add(newEdge);eiPrev=ei;}};EdgeIntersectionList.prototype.addEndpoints=function addEndpoints(){var maxSegIndex=this.edge.pts.length-1;this.add(this.edge.pts[0],0,0.0);this.add(this.edge.pts[maxSegIndex],maxSegIndex,0.0);};EdgeIntersectionList.prototype.createSplitEdge=function createSplitEdge(ei0,ei1){var this$1=this;var npts=ei1.segmentIndex-ei0.segmentIndex+2;var lastSegStartPt=this.edge.pts[ei1.segmentIndex];var useIntPt1=ei1.dist>0.0||!ei1.coord.equals2D(lastSegStartPt);if(!useIntPt1){npts--;}var pts=new Array(npts).fill(null);var ipt=0;pts[ipt++]=new Coordinate(ei0.coord);for(var i=ei0.segmentIndex+1;i<=ei1.segmentIndex;i++){pts[ipt++]=this$1.edge.pts[i];}if(useIntPt1){pts[ipt]=ei1.coord;}return new Edge(pts,new Label(this.edge._label));};EdgeIntersectionList.prototype.add=function add(intPt,segmentIndex,dist){var eiNew=new EdgeIntersection(intPt,segmentIndex,dist);var ei=this._nodeMap.get(eiNew);if(ei!==null){return ei;}this._nodeMap.put(eiNew,eiNew);return eiNew;};EdgeIntersectionList.prototype.isIntersection=function isIntersection(pt){for(var it=this.iterator();it.hasNext();){var ei=it.next();if(ei.coord.equals(pt)){return true;}}return false;};EdgeIntersectionList.prototype.interfaces_=function interfaces_(){return [];};EdgeIntersectionList.prototype.getClass=function getClass(){return EdgeIntersectionList;};var MonotoneChainIndexer=function MonotoneChainIndexer(){};MonotoneChainIndexer.prototype.getChainStartIndices=function getChainStartIndices(pts){var this$1=this;var start=0;var startIndexList=new ArrayList();startIndexList.add(new Integer(start));do{var last=this$1.findChainEnd(pts,start);startIndexList.add(new Integer(last));start=last;}while(start<pts.length-1);var startIndex=MonotoneChainIndexer.toIntArray(startIndexList);return startIndex;};MonotoneChainIndexer.prototype.findChainEnd=function findChainEnd(pts,start){var chainQuad=Quadrant.quadrant(pts[start],pts[start+1]);var last=start+1;while(last<pts.length){var quad=Quadrant.quadrant(pts[last-1],pts[last]);if(quad!==chainQuad){break;}last++;}return last-1;};MonotoneChainIndexer.prototype.interfaces_=function interfaces_(){return [];};MonotoneChainIndexer.prototype.getClass=function getClass(){return MonotoneChainIndexer;};MonotoneChainIndexer.toIntArray=function toIntArray(list){var array=new Array(list.size()).fill(null);for(var i=0;i<array.length;i++){array[i]=list.get(i).intValue();}return array;};var MonotoneChainEdge=function MonotoneChainEdge(){this.e=null;this.pts=null;this.startIndex=null;this.env1=new Envelope();this.env2=new Envelope();var e=arguments[0];this.e=e;this.pts=e.getCoordinates();var mcb=new MonotoneChainIndexer();this.startIndex=mcb.getChainStartIndices(this.pts);};MonotoneChainEdge.prototype.getCoordinates=function getCoordinates(){return this.pts;};MonotoneChainEdge.prototype.getMaxX=function getMaxX(chainIndex){var x1=this.pts[this.startIndex[chainIndex]].x;var x2=this.pts[this.startIndex[chainIndex+1]].x;return x1>x2?x1:x2;};MonotoneChainEdge.prototype.getMinX=function getMinX(chainIndex){var x1=this.pts[this.startIndex[chainIndex]].x;var x2=this.pts[this.startIndex[chainIndex+1]].x;return x1<x2?x1:x2;};MonotoneChainEdge.prototype.computeIntersectsForChain=function computeIntersectsForChain(){if(arguments.length===4){var chainIndex0=arguments[0];var mce=arguments[1];var chainIndex1=arguments[2];var si=arguments[3];this.computeIntersectsForChain(this.startIndex[chainIndex0],this.startIndex[chainIndex0+1],mce,mce.startIndex[chainIndex1],mce.startIndex[chainIndex1+1],si);}else if(arguments.length===6){var start0=arguments[0];var end0=arguments[1];var mce$1=arguments[2];var start1=arguments[3];var end1=arguments[4];var ei=arguments[5];var p00=this.pts[start0];var p01=this.pts[end0];var p10=mce$1.pts[start1];var p11=mce$1.pts[end1];if(end0-start0===1&&end1-start1===1){ei.addIntersections(this.e,start0,mce$1.e,start1);return null;}this.env1.init(p00,p01);this.env2.init(p10,p11);if(!this.env1.intersects(this.env2)){return null;}var mid0=Math.trunc((start0+end0)/2);var mid1=Math.trunc((start1+end1)/2);if(start0<mid0){if(start1<mid1){this.computeIntersectsForChain(start0,mid0,mce$1,start1,mid1,ei);}if(mid1<end1){this.computeIntersectsForChain(start0,mid0,mce$1,mid1,end1,ei);}}if(mid0<end0){if(start1<mid1){this.computeIntersectsForChain(mid0,end0,mce$1,start1,mid1,ei);}if(mid1<end1){this.computeIntersectsForChain(mid0,end0,mce$1,mid1,end1,ei);}}}};MonotoneChainEdge.prototype.getStartIndexes=function getStartIndexes(){return this.startIndex;};MonotoneChainEdge.prototype.computeIntersects=function computeIntersects(mce,si){var this$1=this;for(var i=0;i<this.startIndex.length-1;i++){for(var j=0;j<mce.startIndex.length-1;j++){this$1.computeIntersectsForChain(i,mce,j,si);}}};MonotoneChainEdge.prototype.interfaces_=function interfaces_(){return [];};MonotoneChainEdge.prototype.getClass=function getClass(){return MonotoneChainEdge;};var Depth=function Depth(){var this$1=this;this._depth=Array(2).fill().map(function(){return Array(3);});for(var i=0;i<2;i++){for(var j=0;j<3;j++){this$1._depth[i][j]=Depth.NULL_VALUE;}}};var staticAccessors$31={NULL_VALUE:{configurable:true}};Depth.prototype.getDepth=function getDepth(geomIndex,posIndex){return this._depth[geomIndex][posIndex];};Depth.prototype.setDepth=function setDepth(geomIndex,posIndex,depthValue){this._depth[geomIndex][posIndex]=depthValue;};Depth.prototype.isNull=function isNull(){var this$1=this;if(arguments.length===0){for(var i=0;i<2;i++){for(var j=0;j<3;j++){if(this$1._depth[i][j]!==Depth.NULL_VALUE){return false;}}}return true;}else if(arguments.length===1){var geomIndex=arguments[0];return this._depth[geomIndex][1]===Depth.NULL_VALUE;}else if(arguments.length===2){var geomIndex$1=arguments[0];var posIndex=arguments[1];return this._depth[geomIndex$1][posIndex]===Depth.NULL_VALUE;}};Depth.prototype.normalize=function normalize(){var this$1=this;for(var i=0;i<2;i++){if(!this$1.isNull(i)){var minDepth=this$1._depth[i][1];if(this$1._depth[i][2]<minDepth){minDepth=this$1._depth[i][2];}if(minDepth<0){minDepth=0;}for(var j=1;j<3;j++){var newValue=0;if(this$1._depth[i][j]>minDepth){newValue=1;}this$1._depth[i][j]=newValue;}}}};Depth.prototype.getDelta=function getDelta(geomIndex){return this._depth[geomIndex][Position.RIGHT]-this._depth[geomIndex][Position.LEFT];};Depth.prototype.getLocation=function getLocation(geomIndex,posIndex){if(this._depth[geomIndex][posIndex]<=0){return Location.EXTERIOR;}return Location.INTERIOR;};Depth.prototype.toString=function toString(){return 'A: '+this._depth[0][1]+','+this._depth[0][2]+' B: '+this._depth[1][1]+','+this._depth[1][2];};Depth.prototype.add=function add(){var this$1=this;if(arguments.length===1){var lbl=arguments[0];for(var i=0;i<2;i++){for(var j=1;j<3;j++){var loc=lbl.getLocation(i,j);if(loc===Location.EXTERIOR||loc===Location.INTERIOR){if(this$1.isNull(i,j)){this$1._depth[i][j]=Depth.depthAtLocation(loc);}else {this$1._depth[i][j]+=Depth.depthAtLocation(loc);}}}}}else if(arguments.length===3){var geomIndex=arguments[0];var posIndex=arguments[1];var location=arguments[2];if(location===Location.INTERIOR){this._depth[geomIndex][posIndex]++;}}};Depth.prototype.interfaces_=function interfaces_(){return [];};Depth.prototype.getClass=function getClass(){return Depth;};Depth.depthAtLocation=function depthAtLocation(location){if(location===Location.EXTERIOR){return 0;}if(location===Location.INTERIOR){return 1;}return Depth.NULL_VALUE;};staticAccessors$31.NULL_VALUE.get=function(){return -1;};Object.defineProperties(Depth,staticAccessors$31);var Edge=function(GraphComponent$$1){function Edge(){GraphComponent$$1.call(this);this.pts=null;this._env=null;this.eiList=new EdgeIntersectionList(this);this._name=null;this._mce=null;this._isIsolated=true;this._depth=new Depth();this._depthDelta=0;if(arguments.length===1){var pts=arguments[0];Edge.call(this,pts,null);}else if(arguments.length===2){var pts$1=arguments[0];var label=arguments[1];this.pts=pts$1;this._label=label;}}if(GraphComponent$$1)Edge.__proto__=GraphComponent$$1;Edge.prototype=Object.create(GraphComponent$$1&&GraphComponent$$1.prototype);Edge.prototype.constructor=Edge;Edge.prototype.getDepth=function getDepth(){return this._depth;};Edge.prototype.getCollapsedEdge=function getCollapsedEdge(){var newPts=new Array(2).fill(null);newPts[0]=this.pts[0];newPts[1]=this.pts[1];var newe=new Edge(newPts,Label.toLineLabel(this._label));return newe;};Edge.prototype.isIsolated=function isIsolated(){return this._isIsolated;};Edge.prototype.getCoordinates=function getCoordinates(){return this.pts;};Edge.prototype.setIsolated=function setIsolated(isIsolated){this._isIsolated=isIsolated;};Edge.prototype.setName=function setName(name){this._name=name;};Edge.prototype.equals=function equals(o){var this$1=this;if(!(o instanceof Edge)){return false;}var e=o;if(this.pts.length!==e.pts.length){return false;}var isEqualForward=true;var isEqualReverse=true;var iRev=this.pts.length;for(var i=0;i<this.pts.length;i++){if(!this$1.pts[i].equals2D(e.pts[i])){isEqualForward=false;}if(!this$1.pts[i].equals2D(e.pts[--iRev])){isEqualReverse=false;}if(!isEqualForward&&!isEqualReverse){return false;}}return true;};Edge.prototype.getCoordinate=function getCoordinate(){if(arguments.length===0){if(this.pts.length>0){return this.pts[0];}return null;}else if(arguments.length===1){var i=arguments[0];return this.pts[i];}};Edge.prototype.print=function print(out){var this$1=this;out.print('edge '+this._name+': ');out.print('LINESTRING (');for(var i=0;i<this.pts.length;i++){if(i>0){out.print(',');}out.print(this$1.pts[i].x+' '+this$1.pts[i].y);}out.print(')  '+this._label+' '+this._depthDelta);};Edge.prototype.computeIM=function computeIM(im){Edge.updateIM(this._label,im);};Edge.prototype.isCollapsed=function isCollapsed(){if(!this._label.isArea()){return false;}if(this.pts.length!==3){return false;}if(this.pts[0].equals(this.pts[2])){return true;}return false;};Edge.prototype.isClosed=function isClosed(){return this.pts[0].equals(this.pts[this.pts.length-1]);};Edge.prototype.getMaximumSegmentIndex=function getMaximumSegmentIndex(){return this.pts.length-1;};Edge.prototype.getDepthDelta=function getDepthDelta(){return this._depthDelta;};Edge.prototype.getNumPoints=function getNumPoints(){return this.pts.length;};Edge.prototype.printReverse=function printReverse(out){var this$1=this;out.print('edge '+this._name+': ');for(var i=this.pts.length-1;i>=0;i--){out.print(this$1.pts[i]+' ');}out.println('');};Edge.prototype.getMonotoneChainEdge=function getMonotoneChainEdge(){if(this._mce===null){this._mce=new MonotoneChainEdge(this);}return this._mce;};Edge.prototype.getEnvelope=function getEnvelope(){var this$1=this;if(this._env===null){this._env=new Envelope();for(var i=0;i<this.pts.length;i++){this$1._env.expandToInclude(this$1.pts[i]);}}return this._env;};Edge.prototype.addIntersection=function addIntersection(li,segmentIndex,geomIndex,intIndex){var intPt=new Coordinate(li.getIntersection(intIndex));var normalizedSegmentIndex=segmentIndex;var dist=li.getEdgeDistance(geomIndex,intIndex);var nextSegIndex=normalizedSegmentIndex+1;if(nextSegIndex<this.pts.length){var nextPt=this.pts[nextSegIndex];if(intPt.equals2D(nextPt)){normalizedSegmentIndex=nextSegIndex;dist=0.0;}}this.eiList.add(intPt,normalizedSegmentIndex,dist);};Edge.prototype.toString=function toString(){var this$1=this;var buf=new StringBuffer();buf.append('edge '+this._name+': ');buf.append('LINESTRING (');for(var i=0;i<this.pts.length;i++){if(i>0){buf.append(',');}buf.append(this$1.pts[i].x+' '+this$1.pts[i].y);}buf.append(')  '+this._label+' '+this._depthDelta);return buf.toString();};Edge.prototype.isPointwiseEqual=function isPointwiseEqual(e){var this$1=this;if(this.pts.length!==e.pts.length){return false;}for(var i=0;i<this.pts.length;i++){if(!this$1.pts[i].equals2D(e.pts[i])){return false;}}return true;};Edge.prototype.setDepthDelta=function setDepthDelta(depthDelta){this._depthDelta=depthDelta;};Edge.prototype.getEdgeIntersectionList=function getEdgeIntersectionList(){return this.eiList;};Edge.prototype.addIntersections=function addIntersections(li,segmentIndex,geomIndex){var this$1=this;for(var i=0;i<li.getIntersectionNum();i++){this$1.addIntersection(li,segmentIndex,geomIndex,i);}};Edge.prototype.interfaces_=function interfaces_(){return [];};Edge.prototype.getClass=function getClass(){return Edge;};Edge.updateIM=function updateIM(){if(arguments.length===2){var label=arguments[0];var im=arguments[1];im.setAtLeastIfValid(label.getLocation(0,Position.ON),label.getLocation(1,Position.ON),1);if(label.isArea()){im.setAtLeastIfValid(label.getLocation(0,Position.LEFT),label.getLocation(1,Position.LEFT),2);im.setAtLeastIfValid(label.getLocation(0,Position.RIGHT),label.getLocation(1,Position.RIGHT),2);}}else {return GraphComponent$$1.prototype.updateIM.apply(this,arguments);}};return Edge;}(GraphComponent);var BufferBuilder=function BufferBuilder(bufParams){this._workingPrecisionModel=null;this._workingNoder=null;this._geomFact=null;this._graph=null;this._edgeList=new EdgeList();this._bufParams=bufParams||null;};BufferBuilder.prototype.setWorkingPrecisionModel=function setWorkingPrecisionModel(pm){this._workingPrecisionModel=pm;};BufferBuilder.prototype.insertUniqueEdge=function insertUniqueEdge(e){var existingEdge=this._edgeList.findEqualEdge(e);if(existingEdge!==null){var existingLabel=existingEdge.getLabel();var labelToMerge=e.getLabel();if(!existingEdge.isPointwiseEqual(e)){labelToMerge=new Label(e.getLabel());labelToMerge.flip();}existingLabel.merge(labelToMerge);var mergeDelta=BufferBuilder.depthDelta(labelToMerge);var existingDelta=existingEdge.getDepthDelta();var newDelta=existingDelta+mergeDelta;existingEdge.setDepthDelta(newDelta);}else {this._edgeList.add(e);e.setDepthDelta(BufferBuilder.depthDelta(e.getLabel()));}};BufferBuilder.prototype.buildSubgraphs=function buildSubgraphs(subgraphList,polyBuilder){var processedGraphs=new ArrayList();for(var i=subgraphList.iterator();i.hasNext();){var subgraph=i.next();var p=subgraph.getRightmostCoordinate();var locater=new SubgraphDepthLocater(processedGraphs);var outsideDepth=locater.getDepth(p);subgraph.computeDepth(outsideDepth);subgraph.findResultEdges();processedGraphs.add(subgraph);polyBuilder.add(subgraph.getDirectedEdges(),subgraph.getNodes());}};BufferBuilder.prototype.createSubgraphs=function createSubgraphs(graph){var subgraphList=new ArrayList();for(var i=graph.getNodes().iterator();i.hasNext();){var node=i.next();if(!node.isVisited()){var subgraph=new BufferSubgraph();subgraph.create(node);subgraphList.add(subgraph);}}Collections.sort(subgraphList,Collections.reverseOrder());return subgraphList;};BufferBuilder.prototype.createEmptyResultGeometry=function createEmptyResultGeometry(){var emptyGeom=this._geomFact.createPolygon();return emptyGeom;};BufferBuilder.prototype.getNoder=function getNoder(precisionModel){if(this._workingNoder!==null){return this._workingNoder;}var noder=new MCIndexNoder();var li=new RobustLineIntersector();li.setPrecisionModel(precisionModel);noder.setSegmentIntersector(new IntersectionAdder(li));return noder;};BufferBuilder.prototype.buffer=function buffer(g,distance){var precisionModel=this._workingPrecisionModel;if(precisionModel===null){precisionModel=g.getPrecisionModel();}this._geomFact=g.getFactory();var curveBuilder=new OffsetCurveBuilder(precisionModel,this._bufParams);var curveSetBuilder=new OffsetCurveSetBuilder(g,distance,curveBuilder);var bufferSegStrList=curveSetBuilder.getCurves();if(bufferSegStrList.size()<=0){return this.createEmptyResultGeometry();}this.computeNodedEdges(bufferSegStrList,precisionModel);this._graph=new PlanarGraph(new OverlayNodeFactory());this._graph.addEdges(this._edgeList.getEdges());var subgraphList=this.createSubgraphs(this._graph);var polyBuilder=new PolygonBuilder(this._geomFact);this.buildSubgraphs(subgraphList,polyBuilder);var resultPolyList=polyBuilder.getPolygons();if(resultPolyList.size()<=0){return this.createEmptyResultGeometry();}var resultGeom=this._geomFact.buildGeometry(resultPolyList);return resultGeom;};BufferBuilder.prototype.computeNodedEdges=function computeNodedEdges(bufferSegStrList,precisionModel){var this$1=this;var noder=this.getNoder(precisionModel);noder.computeNodes(bufferSegStrList);var nodedSegStrings=noder.getNodedSubstrings();for(var i=nodedSegStrings.iterator();i.hasNext();){var segStr=i.next();var pts=segStr.getCoordinates();if(pts.length===2&&pts[0].equals2D(pts[1])){continue;}var oldLabel=segStr.getData();var edge=new Edge(segStr.getCoordinates(),new Label(oldLabel));this$1.insertUniqueEdge(edge);}};BufferBuilder.prototype.setNoder=function setNoder(noder){this._workingNoder=noder;};BufferBuilder.prototype.interfaces_=function interfaces_(){return [];};BufferBuilder.prototype.getClass=function getClass(){return BufferBuilder;};BufferBuilder.depthDelta=function depthDelta(label){var lLoc=label.getLocation(0,Position.LEFT);var rLoc=label.getLocation(0,Position.RIGHT);if(lLoc===Location.INTERIOR&&rLoc===Location.EXTERIOR){return 1;}else if(lLoc===Location.EXTERIOR&&rLoc===Location.INTERIOR){return -1;}return 0;};BufferBuilder.convertSegStrings=function convertSegStrings(it){var fact=new GeometryFactory();var lines=new ArrayList();while(it.hasNext()){var ss=it.next();var line=fact.createLineString(ss.getCoordinates());lines.add(line);}return fact.buildGeometry(lines);};var ScaledNoder=function ScaledNoder(){this._noder=null;this._scaleFactor=null;this._offsetX=null;this._offsetY=null;this._isScaled=false;if(arguments.length===2){var noder=arguments[0];var scaleFactor=arguments[1];this._noder=noder;this._scaleFactor=scaleFactor;this._offsetX=0.0;this._offsetY=0.0;this._isScaled=!this.isIntegerPrecision();}else if(arguments.length===4){var noder$1=arguments[0];var scaleFactor$1=arguments[1];var offsetX=arguments[2];var offsetY=arguments[3];this._noder=noder$1;this._scaleFactor=scaleFactor$1;this._offsetX=offsetX;this._offsetY=offsetY;this._isScaled=!this.isIntegerPrecision();}};ScaledNoder.prototype.rescale=function rescale(){var this$1=this;if(hasInterface(arguments[0],Collection)){var segStrings=arguments[0];for(var i=segStrings.iterator();i.hasNext();){var ss=i.next();this$1.rescale(ss.getCoordinates());}}else if(arguments[0]instanceof Array){var pts=arguments[0];// let p0 = null
  // let p1 = null
  // if (pts.length === 2) {
  // p0 = new Coordinate(pts[0])
  // p1 = new Coordinate(pts[1])
  // }
  for(var i$1=0;i$1<pts.length;i$1++){pts[i$1].x=pts[i$1].x/this$1._scaleFactor+this$1._offsetX;pts[i$1].y=pts[i$1].y/this$1._scaleFactor+this$1._offsetY;}if(pts.length===2&&pts[0].equals2D(pts[1])){System.out.println(pts);}}};ScaledNoder.prototype.scale=function scale(){var this$1=this;if(hasInterface(arguments[0],Collection)){var segStrings=arguments[0];var nodedSegmentStrings=new ArrayList();for(var i=segStrings.iterator();i.hasNext();){var ss=i.next();nodedSegmentStrings.add(new NodedSegmentString(this$1.scale(ss.getCoordinates()),ss.getData()));}return nodedSegmentStrings;}else if(arguments[0]instanceof Array){var pts=arguments[0];var roundPts=new Array(pts.length).fill(null);for(var i$1=0;i$1<pts.length;i$1++){roundPts[i$1]=new Coordinate(Math.round((pts[i$1].x-this$1._offsetX)*this$1._scaleFactor),Math.round((pts[i$1].y-this$1._offsetY)*this$1._scaleFactor),pts[i$1].z);}var roundPtsNoDup=CoordinateArrays.removeRepeatedPoints(roundPts);return roundPtsNoDup;}};ScaledNoder.prototype.isIntegerPrecision=function isIntegerPrecision(){return this._scaleFactor===1.0;};ScaledNoder.prototype.getNodedSubstrings=function getNodedSubstrings(){var splitSS=this._noder.getNodedSubstrings();if(this._isScaled){this.rescale(splitSS);}return splitSS;};ScaledNoder.prototype.computeNodes=function computeNodes(inputSegStrings){var intSegStrings=inputSegStrings;if(this._isScaled){intSegStrings=this.scale(inputSegStrings);}this._noder.computeNodes(intSegStrings);};ScaledNoder.prototype.interfaces_=function interfaces_(){return [Noder];};ScaledNoder.prototype.getClass=function getClass(){return ScaledNoder;};var NodingValidator=function NodingValidator(){this._li=new RobustLineIntersector();this._segStrings=null;var segStrings=arguments[0];this._segStrings=segStrings;};var staticAccessors$33={fact:{configurable:true}};NodingValidator.prototype.checkEndPtVertexIntersections=function checkEndPtVertexIntersections(){var this$1=this;if(arguments.length===0){for(var i=this._segStrings.iterator();i.hasNext();){var ss=i.next();var pts=ss.getCoordinates();this$1.checkEndPtVertexIntersections(pts[0],this$1._segStrings);this$1.checkEndPtVertexIntersections(pts[pts.length-1],this$1._segStrings);}}else if(arguments.length===2){var testPt=arguments[0];var segStrings=arguments[1];for(var i$1=segStrings.iterator();i$1.hasNext();){var ss$1=i$1.next();var pts$1=ss$1.getCoordinates();for(var j=1;j<pts$1.length-1;j++){if(pts$1[j].equals(testPt)){throw new RuntimeException('found endpt/interior pt intersection at index '+j+' :pt '+testPt);}}}}};NodingValidator.prototype.checkInteriorIntersections=function checkInteriorIntersections(){var this$1=this;if(arguments.length===0){for(var i=this._segStrings.iterator();i.hasNext();){var ss0=i.next();for(var j=this._segStrings.iterator();j.hasNext();){var ss1=j.next();this$1.checkInteriorIntersections(ss0,ss1);}}}else if(arguments.length===2){var ss0$1=arguments[0];var ss1$1=arguments[1];var pts0=ss0$1.getCoordinates();var pts1=ss1$1.getCoordinates();for(var i0=0;i0<pts0.length-1;i0++){for(var i1=0;i1<pts1.length-1;i1++){this$1.checkInteriorIntersections(ss0$1,i0,ss1$1,i1);}}}else if(arguments.length===4){var e0=arguments[0];var segIndex0=arguments[1];var e1=arguments[2];var segIndex1=arguments[3];if(e0===e1&&segIndex0===segIndex1){return null;}var p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this._li.computeIntersection(p00,p01,p10,p11);if(this._li.hasIntersection()){if(this._li.isProper()||this.hasInteriorIntersection(this._li,p00,p01)||this.hasInteriorIntersection(this._li,p10,p11)){throw new RuntimeException('found non-noded intersection at '+p00+'-'+p01+' and '+p10+'-'+p11);}}}};NodingValidator.prototype.checkValid=function checkValid(){this.checkEndPtVertexIntersections();this.checkInteriorIntersections();this.checkCollapses();};NodingValidator.prototype.checkCollapses=function checkCollapses(){var this$1=this;if(arguments.length===0){for(var i=this._segStrings.iterator();i.hasNext();){var ss=i.next();this$1.checkCollapses(ss);}}else if(arguments.length===1){var ss$1=arguments[0];var pts=ss$1.getCoordinates();for(var i$1=0;i$1<pts.length-2;i$1++){this$1.checkCollapse(pts[i$1],pts[i$1+1],pts[i$1+2]);}}};NodingValidator.prototype.hasInteriorIntersection=function hasInteriorIntersection(li,p0,p1){for(var i=0;i<li.getIntersectionNum();i++){var intPt=li.getIntersection(i);if(!(intPt.equals(p0)||intPt.equals(p1))){return true;}}return false;};NodingValidator.prototype.checkCollapse=function checkCollapse(p0,p1,p2){if(p0.equals(p2)){throw new RuntimeException('found non-noded collapse at '+NodingValidator.fact.createLineString([p0,p1,p2]));}};NodingValidator.prototype.interfaces_=function interfaces_(){return [];};NodingValidator.prototype.getClass=function getClass(){return NodingValidator;};staticAccessors$33.fact.get=function(){return new GeometryFactory();};Object.defineProperties(NodingValidator,staticAccessors$33);var HotPixel=function HotPixel(){this._li=null;this._pt=null;this._originalPt=null;this._ptScaled=null;this._p0Scaled=null;this._p1Scaled=null;this._scaleFactor=null;this._minx=null;this._maxx=null;this._miny=null;this._maxy=null;this._corner=new Array(4).fill(null);this._safeEnv=null;var pt=arguments[0];var scaleFactor=arguments[1];var li=arguments[2];this._originalPt=pt;this._pt=pt;this._scaleFactor=scaleFactor;this._li=li;if(scaleFactor<=0){throw new IllegalArgumentException('Scale factor must be non-zero');}if(scaleFactor!==1.0){this._pt=new Coordinate(this.scale(pt.x),this.scale(pt.y));this._p0Scaled=new Coordinate();this._p1Scaled=new Coordinate();}this.initCorners(this._pt);};var staticAccessors$34={SAFE_ENV_EXPANSION_FACTOR:{configurable:true}};HotPixel.prototype.intersectsScaled=function intersectsScaled(p0,p1){var segMinx=Math.min(p0.x,p1.x);var segMaxx=Math.max(p0.x,p1.x);var segMiny=Math.min(p0.y,p1.y);var segMaxy=Math.max(p0.y,p1.y);var isOutsidePixelEnv=this._maxx<segMinx||this._minx>segMaxx||this._maxy<segMiny||this._miny>segMaxy;if(isOutsidePixelEnv){return false;}var intersects=this.intersectsToleranceSquare(p0,p1);Assert.isTrue(!(isOutsidePixelEnv&&intersects),'Found bad envelope test');return intersects;};HotPixel.prototype.initCorners=function initCorners(pt){var tolerance=0.5;this._minx=pt.x-tolerance;this._maxx=pt.x+tolerance;this._miny=pt.y-tolerance;this._maxy=pt.y+tolerance;this._corner[0]=new Coordinate(this._maxx,this._maxy);this._corner[1]=new Coordinate(this._minx,this._maxy);this._corner[2]=new Coordinate(this._minx,this._miny);this._corner[3]=new Coordinate(this._maxx,this._miny);};HotPixel.prototype.intersects=function intersects(p0,p1){if(this._scaleFactor===1.0){return this.intersectsScaled(p0,p1);}this.copyScaled(p0,this._p0Scaled);this.copyScaled(p1,this._p1Scaled);return this.intersectsScaled(this._p0Scaled,this._p1Scaled);};HotPixel.prototype.scale=function scale(val){return Math.round(val*this._scaleFactor);};HotPixel.prototype.getCoordinate=function getCoordinate(){return this._originalPt;};HotPixel.prototype.copyScaled=function copyScaled(p,pScaled){pScaled.x=this.scale(p.x);pScaled.y=this.scale(p.y);};HotPixel.prototype.getSafeEnvelope=function getSafeEnvelope(){if(this._safeEnv===null){var safeTolerance=HotPixel.SAFE_ENV_EXPANSION_FACTOR/this._scaleFactor;this._safeEnv=new Envelope(this._originalPt.x-safeTolerance,this._originalPt.x+safeTolerance,this._originalPt.y-safeTolerance,this._originalPt.y+safeTolerance);}return this._safeEnv;};HotPixel.prototype.intersectsPixelClosure=function intersectsPixelClosure(p0,p1){this._li.computeIntersection(p0,p1,this._corner[0],this._corner[1]);if(this._li.hasIntersection()){return true;}this._li.computeIntersection(p0,p1,this._corner[1],this._corner[2]);if(this._li.hasIntersection()){return true;}this._li.computeIntersection(p0,p1,this._corner[2],this._corner[3]);if(this._li.hasIntersection()){return true;}this._li.computeIntersection(p0,p1,this._corner[3],this._corner[0]);if(this._li.hasIntersection()){return true;}return false;};HotPixel.prototype.intersectsToleranceSquare=function intersectsToleranceSquare(p0,p1){var intersectsLeft=false;var intersectsBottom=false;this._li.computeIntersection(p0,p1,this._corner[0],this._corner[1]);if(this._li.isProper()){return true;}this._li.computeIntersection(p0,p1,this._corner[1],this._corner[2]);if(this._li.isProper()){return true;}if(this._li.hasIntersection()){intersectsLeft=true;}this._li.computeIntersection(p0,p1,this._corner[2],this._corner[3]);if(this._li.isProper()){return true;}if(this._li.hasIntersection()){intersectsBottom=true;}this._li.computeIntersection(p0,p1,this._corner[3],this._corner[0]);if(this._li.isProper()){return true;}if(intersectsLeft&&intersectsBottom){return true;}if(p0.equals(this._pt)){return true;}if(p1.equals(this._pt)){return true;}return false;};HotPixel.prototype.addSnappedNode=function addSnappedNode(segStr,segIndex){var p0=segStr.getCoordinate(segIndex);var p1=segStr.getCoordinate(segIndex+1);if(this.intersects(p0,p1)){segStr.addIntersection(this.getCoordinate(),segIndex);return true;}return false;};HotPixel.prototype.interfaces_=function interfaces_(){return [];};HotPixel.prototype.getClass=function getClass(){return HotPixel;};staticAccessors$34.SAFE_ENV_EXPANSION_FACTOR.get=function(){return 0.75;};Object.defineProperties(HotPixel,staticAccessors$34);var MonotoneChainSelectAction=function MonotoneChainSelectAction(){this.tempEnv1=new Envelope();this.selectedSegment=new LineSegment();};MonotoneChainSelectAction.prototype.select=function select(){if(arguments.length===1);else if(arguments.length===2){var mc=arguments[0];var startIndex=arguments[1];mc.getLineSegment(startIndex,this.selectedSegment);this.select(this.selectedSegment);}};MonotoneChainSelectAction.prototype.interfaces_=function interfaces_(){return [];};MonotoneChainSelectAction.prototype.getClass=function getClass(){return MonotoneChainSelectAction;};var MCIndexPointSnapper=function MCIndexPointSnapper(){this._index=null;var index=arguments[0];this._index=index;};var staticAccessors$35={HotPixelSnapAction:{configurable:true}};MCIndexPointSnapper.prototype.snap=function snap(){if(arguments.length===1){var hotPixel=arguments[0];return this.snap(hotPixel,null,-1);}else if(arguments.length===3){var hotPixel$1=arguments[0];var parentEdge=arguments[1];var hotPixelVertexIndex=arguments[2];var pixelEnv=hotPixel$1.getSafeEnvelope();var hotPixelSnapAction=new HotPixelSnapAction(hotPixel$1,parentEdge,hotPixelVertexIndex);this._index.query(pixelEnv,{interfaces_:function interfaces_(){return [ItemVisitor];},visitItem:function visitItem(item){var testChain=item;testChain.select(pixelEnv,hotPixelSnapAction);}});return hotPixelSnapAction.isNodeAdded();}};MCIndexPointSnapper.prototype.interfaces_=function interfaces_(){return [];};MCIndexPointSnapper.prototype.getClass=function getClass(){return MCIndexPointSnapper;};staticAccessors$35.HotPixelSnapAction.get=function(){return HotPixelSnapAction;};Object.defineProperties(MCIndexPointSnapper,staticAccessors$35);var HotPixelSnapAction=function(MonotoneChainSelectAction$$1){function HotPixelSnapAction(){MonotoneChainSelectAction$$1.call(this);this._hotPixel=null;this._parentEdge=null;this._hotPixelVertexIndex=null;this._isNodeAdded=false;var hotPixel=arguments[0];var parentEdge=arguments[1];var hotPixelVertexIndex=arguments[2];this._hotPixel=hotPixel;this._parentEdge=parentEdge;this._hotPixelVertexIndex=hotPixelVertexIndex;}if(MonotoneChainSelectAction$$1)HotPixelSnapAction.__proto__=MonotoneChainSelectAction$$1;HotPixelSnapAction.prototype=Object.create(MonotoneChainSelectAction$$1&&MonotoneChainSelectAction$$1.prototype);HotPixelSnapAction.prototype.constructor=HotPixelSnapAction;HotPixelSnapAction.prototype.isNodeAdded=function isNodeAdded(){return this._isNodeAdded;};HotPixelSnapAction.prototype.select=function select(){if(arguments.length===2){var mc=arguments[0];var startIndex=arguments[1];var ss=mc.getContext();if(this._parentEdge!==null){if(ss===this._parentEdge&&startIndex===this._hotPixelVertexIndex){return null;}}this._isNodeAdded=this._hotPixel.addSnappedNode(ss,startIndex);}else {return MonotoneChainSelectAction$$1.prototype.select.apply(this,arguments);}};HotPixelSnapAction.prototype.interfaces_=function interfaces_(){return [];};HotPixelSnapAction.prototype.getClass=function getClass(){return HotPixelSnapAction;};return HotPixelSnapAction;}(MonotoneChainSelectAction);var InteriorIntersectionFinderAdder=function InteriorIntersectionFinderAdder(){this._li=null;this._interiorIntersections=null;var li=arguments[0];this._li=li;this._interiorIntersections=new ArrayList();};InteriorIntersectionFinderAdder.prototype.processIntersections=function processIntersections(e0,segIndex0,e1,segIndex1){var this$1=this;if(e0===e1&&segIndex0===segIndex1){return null;}var p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this._li.computeIntersection(p00,p01,p10,p11);if(this._li.hasIntersection()){if(this._li.isInteriorIntersection()){for(var intIndex=0;intIndex<this._li.getIntersectionNum();intIndex++){this$1._interiorIntersections.add(this$1._li.getIntersection(intIndex));}e0.addIntersections(this._li,segIndex0,0);e1.addIntersections(this._li,segIndex1,1);}}};InteriorIntersectionFinderAdder.prototype.isDone=function isDone(){return false;};InteriorIntersectionFinderAdder.prototype.getInteriorIntersections=function getInteriorIntersections(){return this._interiorIntersections;};InteriorIntersectionFinderAdder.prototype.interfaces_=function interfaces_(){return [SegmentIntersector];};InteriorIntersectionFinderAdder.prototype.getClass=function getClass(){return InteriorIntersectionFinderAdder;};var MCIndexSnapRounder=function MCIndexSnapRounder(){this._pm=null;this._li=null;this._scaleFactor=null;this._noder=null;this._pointSnapper=null;this._nodedSegStrings=null;var pm=arguments[0];this._pm=pm;this._li=new RobustLineIntersector();this._li.setPrecisionModel(pm);this._scaleFactor=pm.getScale();};MCIndexSnapRounder.prototype.checkCorrectness=function checkCorrectness(inputSegmentStrings){var resultSegStrings=NodedSegmentString.getNodedSubstrings(inputSegmentStrings);var nv=new NodingValidator(resultSegStrings);try{nv.checkValid();}catch(ex){if(ex instanceof Exception){ex.printStackTrace();}else {throw ex;}}finally{}};MCIndexSnapRounder.prototype.getNodedSubstrings=function getNodedSubstrings(){return NodedSegmentString.getNodedSubstrings(this._nodedSegStrings);};MCIndexSnapRounder.prototype.snapRound=function snapRound(segStrings,li){var intersections=this.findInteriorIntersections(segStrings,li);this.computeIntersectionSnaps(intersections);this.computeVertexSnaps(segStrings);};MCIndexSnapRounder.prototype.findInteriorIntersections=function findInteriorIntersections(segStrings,li){var intFinderAdder=new InteriorIntersectionFinderAdder(li);this._noder.setSegmentIntersector(intFinderAdder);this._noder.computeNodes(segStrings);return intFinderAdder.getInteriorIntersections();};MCIndexSnapRounder.prototype.computeVertexSnaps=function computeVertexSnaps(){var this$1=this;if(hasInterface(arguments[0],Collection)){var edges=arguments[0];for(var i0=edges.iterator();i0.hasNext();){var edge0=i0.next();this$1.computeVertexSnaps(edge0);}}else if(arguments[0]instanceof NodedSegmentString){var e=arguments[0];var pts0=e.getCoordinates();for(var i=0;i<pts0.length;i++){var hotPixel=new HotPixel(pts0[i],this$1._scaleFactor,this$1._li);var isNodeAdded=this$1._pointSnapper.snap(hotPixel,e,i);if(isNodeAdded){e.addIntersection(pts0[i],i);}}}};MCIndexSnapRounder.prototype.computeNodes=function computeNodes(inputSegmentStrings){this._nodedSegStrings=inputSegmentStrings;this._noder=new MCIndexNoder();this._pointSnapper=new MCIndexPointSnapper(this._noder.getIndex());this.snapRound(inputSegmentStrings,this._li);};MCIndexSnapRounder.prototype.computeIntersectionSnaps=function computeIntersectionSnaps(snapPts){var this$1=this;for(var it=snapPts.iterator();it.hasNext();){var snapPt=it.next();var hotPixel=new HotPixel(snapPt,this$1._scaleFactor,this$1._li);this$1._pointSnapper.snap(hotPixel);}};MCIndexSnapRounder.prototype.interfaces_=function interfaces_(){return [Noder];};MCIndexSnapRounder.prototype.getClass=function getClass(){return MCIndexSnapRounder;};var BufferOp=function BufferOp(){this._argGeom=null;this._distance=null;this._bufParams=new BufferParameters();this._resultGeometry=null;this._saveException=null;if(arguments.length===1){var g=arguments[0];this._argGeom=g;}else if(arguments.length===2){var g$1=arguments[0];var bufParams=arguments[1];this._argGeom=g$1;this._bufParams=bufParams;}};var staticAccessors$32={CAP_ROUND:{configurable:true},CAP_BUTT:{configurable:true},CAP_FLAT:{configurable:true},CAP_SQUARE:{configurable:true},MAX_PRECISION_DIGITS:{configurable:true}};BufferOp.prototype.bufferFixedPrecision=function bufferFixedPrecision(fixedPM){var noder=new ScaledNoder(new MCIndexSnapRounder(new PrecisionModel(1.0)),fixedPM.getScale());var bufBuilder=new BufferBuilder(this._bufParams);bufBuilder.setWorkingPrecisionModel(fixedPM);bufBuilder.setNoder(noder);this._resultGeometry=bufBuilder.buffer(this._argGeom,this._distance);};BufferOp.prototype.bufferReducedPrecision=function bufferReducedPrecision(){var this$1=this;if(arguments.length===0){for(var precDigits=BufferOp.MAX_PRECISION_DIGITS;precDigits>=0;precDigits--){try{this$1.bufferReducedPrecision(precDigits);}catch(ex){if(ex instanceof TopologyException){this$1._saveException=ex;}else {throw ex;}}finally{}if(this$1._resultGeometry!==null){return null;}}throw this._saveException;}else if(arguments.length===1){var precisionDigits=arguments[0];var sizeBasedScaleFactor=BufferOp.precisionScaleFactor(this._argGeom,this._distance,precisionDigits);var fixedPM=new PrecisionModel(sizeBasedScaleFactor);this.bufferFixedPrecision(fixedPM);}};BufferOp.prototype.computeGeometry=function computeGeometry(){this.bufferOriginalPrecision();if(this._resultGeometry!==null){return null;}var argPM=this._argGeom.getFactory().getPrecisionModel();if(argPM.getType()===PrecisionModel.FIXED){this.bufferFixedPrecision(argPM);}else {this.bufferReducedPrecision();}};BufferOp.prototype.setQuadrantSegments=function setQuadrantSegments(quadrantSegments){this._bufParams.setQuadrantSegments(quadrantSegments);};BufferOp.prototype.bufferOriginalPrecision=function bufferOriginalPrecision(){try{var bufBuilder=new BufferBuilder(this._bufParams);this._resultGeometry=bufBuilder.buffer(this._argGeom,this._distance);}catch(ex){if(ex instanceof RuntimeException){this._saveException=ex;}else {throw ex;}}finally{}};BufferOp.prototype.getResultGeometry=function getResultGeometry(distance){this._distance=distance;this.computeGeometry();return this._resultGeometry;};BufferOp.prototype.setEndCapStyle=function setEndCapStyle(endCapStyle){this._bufParams.setEndCapStyle(endCapStyle);};BufferOp.prototype.interfaces_=function interfaces_(){return [];};BufferOp.prototype.getClass=function getClass(){return BufferOp;};BufferOp.bufferOp=function bufferOp(){if(arguments.length===2){var g=arguments[0];var distance=arguments[1];var gBuf=new BufferOp(g);var geomBuf=gBuf.getResultGeometry(distance);return geomBuf;}else if(arguments.length===3){if(Number.isInteger(arguments[2])&&arguments[0]instanceof Geometry&&typeof arguments[1]==='number'){var g$1=arguments[0];var distance$1=arguments[1];var quadrantSegments=arguments[2];var bufOp=new BufferOp(g$1);bufOp.setQuadrantSegments(quadrantSegments);var geomBuf$1=bufOp.getResultGeometry(distance$1);return geomBuf$1;}else if(arguments[2]instanceof BufferParameters&&arguments[0]instanceof Geometry&&typeof arguments[1]==='number'){var g$2=arguments[0];var distance$2=arguments[1];var params=arguments[2];var bufOp$1=new BufferOp(g$2,params);var geomBuf$2=bufOp$1.getResultGeometry(distance$2);return geomBuf$2;}}else if(arguments.length===4){var g$3=arguments[0];var distance$3=arguments[1];var quadrantSegments$1=arguments[2];var endCapStyle=arguments[3];var bufOp$2=new BufferOp(g$3);bufOp$2.setQuadrantSegments(quadrantSegments$1);bufOp$2.setEndCapStyle(endCapStyle);var geomBuf$3=bufOp$2.getResultGeometry(distance$3);return geomBuf$3;}};BufferOp.precisionScaleFactor=function precisionScaleFactor(g,distance,maxPrecisionDigits){var env=g.getEnvelopeInternal();var envMax=MathUtil.max(Math.abs(env.getMaxX()),Math.abs(env.getMaxY()),Math.abs(env.getMinX()),Math.abs(env.getMinY()));var expandByDistance=distance>0.0?distance:0.0;var bufEnvMax=envMax+2*expandByDistance;var bufEnvPrecisionDigits=Math.trunc(Math.log(bufEnvMax)/Math.log(10)+1.0);var minUnitLog10=maxPrecisionDigits-bufEnvPrecisionDigits;var scaleFactor=Math.pow(10.0,minUnitLog10);return scaleFactor;};staticAccessors$32.CAP_ROUND.get=function(){return BufferParameters.CAP_ROUND;};staticAccessors$32.CAP_BUTT.get=function(){return BufferParameters.CAP_FLAT;};staticAccessors$32.CAP_FLAT.get=function(){return BufferParameters.CAP_FLAT;};staticAccessors$32.CAP_SQUARE.get=function(){return BufferParameters.CAP_SQUARE;};staticAccessors$32.MAX_PRECISION_DIGITS.get=function(){return 12;};Object.defineProperties(BufferOp,staticAccessors$32);var PointPairDistance=function PointPairDistance(){this._pt=[new Coordinate(),new Coordinate()];this._distance=Double.NaN;this._isNull=true;};PointPairDistance.prototype.getCoordinates=function getCoordinates(){return this._pt;};PointPairDistance.prototype.getCoordinate=function getCoordinate(i){return this._pt[i];};PointPairDistance.prototype.setMinimum=function setMinimum(){if(arguments.length===1){var ptDist=arguments[0];this.setMinimum(ptDist._pt[0],ptDist._pt[1]);}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];if(this._isNull){this.initialize(p0,p1);return null;}var dist=p0.distance(p1);if(dist<this._distance){this.initialize(p0,p1,dist);}}};PointPairDistance.prototype.initialize=function initialize(){if(arguments.length===0){this._isNull=true;}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];this._pt[0].setCoordinate(p0);this._pt[1].setCoordinate(p1);this._distance=p0.distance(p1);this._isNull=false;}else if(arguments.length===3){var p0$1=arguments[0];var p1$1=arguments[1];var distance=arguments[2];this._pt[0].setCoordinate(p0$1);this._pt[1].setCoordinate(p1$1);this._distance=distance;this._isNull=false;}};PointPairDistance.prototype.getDistance=function getDistance(){return this._distance;};PointPairDistance.prototype.setMaximum=function setMaximum(){if(arguments.length===1){var ptDist=arguments[0];this.setMaximum(ptDist._pt[0],ptDist._pt[1]);}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];if(this._isNull){this.initialize(p0,p1);return null;}var dist=p0.distance(p1);if(dist>this._distance){this.initialize(p0,p1,dist);}}};PointPairDistance.prototype.interfaces_=function interfaces_(){return [];};PointPairDistance.prototype.getClass=function getClass(){return PointPairDistance;};var DistanceToPointFinder=function DistanceToPointFinder(){};DistanceToPointFinder.prototype.interfaces_=function interfaces_(){return [];};DistanceToPointFinder.prototype.getClass=function getClass(){return DistanceToPointFinder;};DistanceToPointFinder.computeDistance=function computeDistance(){if(arguments[2]instanceof PointPairDistance&&arguments[0]instanceof LineString&&arguments[1]instanceof Coordinate){var line=arguments[0];var pt=arguments[1];var ptDist=arguments[2];var coords=line.getCoordinates();var tempSegment=new LineSegment();for(var i=0;i<coords.length-1;i++){tempSegment.setCoordinates(coords[i],coords[i+1]);var closestPt=tempSegment.closestPoint(pt);ptDist.setMinimum(closestPt,pt);}}else if(arguments[2]instanceof PointPairDistance&&arguments[0]instanceof Polygon&&arguments[1]instanceof Coordinate){var poly=arguments[0];var pt$1=arguments[1];var ptDist$1=arguments[2];DistanceToPointFinder.computeDistance(poly.getExteriorRing(),pt$1,ptDist$1);for(var i$1=0;i$1<poly.getNumInteriorRing();i$1++){DistanceToPointFinder.computeDistance(poly.getInteriorRingN(i$1),pt$1,ptDist$1);}}else if(arguments[2]instanceof PointPairDistance&&arguments[0]instanceof Geometry&&arguments[1]instanceof Coordinate){var geom=arguments[0];var pt$2=arguments[1];var ptDist$2=arguments[2];if(geom instanceof LineString){DistanceToPointFinder.computeDistance(geom,pt$2,ptDist$2);}else if(geom instanceof Polygon){DistanceToPointFinder.computeDistance(geom,pt$2,ptDist$2);}else if(geom instanceof GeometryCollection){var gc=geom;for(var i$2=0;i$2<gc.getNumGeometries();i$2++){var g=gc.getGeometryN(i$2);DistanceToPointFinder.computeDistance(g,pt$2,ptDist$2);}}else {ptDist$2.setMinimum(geom.getCoordinate(),pt$2);}}else if(arguments[2]instanceof PointPairDistance&&arguments[0]instanceof LineSegment&&arguments[1]instanceof Coordinate){var segment=arguments[0];var pt$3=arguments[1];var ptDist$3=arguments[2];var closestPt$1=segment.closestPoint(pt$3);ptDist$3.setMinimum(closestPt$1,pt$3);}};var BufferCurveMaximumDistanceFinder=function BufferCurveMaximumDistanceFinder(inputGeom){this._maxPtDist=new PointPairDistance();this._inputGeom=inputGeom||null;};var staticAccessors$36={MaxPointDistanceFilter:{configurable:true},MaxMidpointDistanceFilter:{configurable:true}};BufferCurveMaximumDistanceFinder.prototype.computeMaxMidpointDistance=function computeMaxMidpointDistance(curve){var distFilter=new MaxMidpointDistanceFilter(this._inputGeom);curve.apply(distFilter);this._maxPtDist.setMaximum(distFilter.getMaxPointDistance());};BufferCurveMaximumDistanceFinder.prototype.computeMaxVertexDistance=function computeMaxVertexDistance(curve){var distFilter=new MaxPointDistanceFilter(this._inputGeom);curve.apply(distFilter);this._maxPtDist.setMaximum(distFilter.getMaxPointDistance());};BufferCurveMaximumDistanceFinder.prototype.findDistance=function findDistance(bufferCurve){this.computeMaxVertexDistance(bufferCurve);this.computeMaxMidpointDistance(bufferCurve);return this._maxPtDist.getDistance();};BufferCurveMaximumDistanceFinder.prototype.getDistancePoints=function getDistancePoints(){return this._maxPtDist;};BufferCurveMaximumDistanceFinder.prototype.interfaces_=function interfaces_(){return [];};BufferCurveMaximumDistanceFinder.prototype.getClass=function getClass(){return BufferCurveMaximumDistanceFinder;};staticAccessors$36.MaxPointDistanceFilter.get=function(){return MaxPointDistanceFilter;};staticAccessors$36.MaxMidpointDistanceFilter.get=function(){return MaxMidpointDistanceFilter;};Object.defineProperties(BufferCurveMaximumDistanceFinder,staticAccessors$36);var MaxPointDistanceFilter=function MaxPointDistanceFilter(geom){this._maxPtDist=new PointPairDistance();this._minPtDist=new PointPairDistance();this._geom=geom||null;};MaxPointDistanceFilter.prototype.filter=function filter(pt){this._minPtDist.initialize();DistanceToPointFinder.computeDistance(this._geom,pt,this._minPtDist);this._maxPtDist.setMaximum(this._minPtDist);};MaxPointDistanceFilter.prototype.getMaxPointDistance=function getMaxPointDistance(){return this._maxPtDist;};MaxPointDistanceFilter.prototype.interfaces_=function interfaces_(){return [CoordinateFilter];};MaxPointDistanceFilter.prototype.getClass=function getClass(){return MaxPointDistanceFilter;};var MaxMidpointDistanceFilter=function MaxMidpointDistanceFilter(geom){this._maxPtDist=new PointPairDistance();this._minPtDist=new PointPairDistance();this._geom=geom||null;};MaxMidpointDistanceFilter.prototype.filter=function filter(seq,index){if(index===0){return null;}var p0=seq.getCoordinate(index-1);var p1=seq.getCoordinate(index);var midPt=new Coordinate((p0.x+p1.x)/2,(p0.y+p1.y)/2);this._minPtDist.initialize();DistanceToPointFinder.computeDistance(this._geom,midPt,this._minPtDist);this._maxPtDist.setMaximum(this._minPtDist);};MaxMidpointDistanceFilter.prototype.isDone=function isDone(){return false;};MaxMidpointDistanceFilter.prototype.isGeometryChanged=function isGeometryChanged(){return false;};MaxMidpointDistanceFilter.prototype.getMaxPointDistance=function getMaxPointDistance(){return this._maxPtDist;};MaxMidpointDistanceFilter.prototype.interfaces_=function interfaces_(){return [CoordinateSequenceFilter];};MaxMidpointDistanceFilter.prototype.getClass=function getClass(){return MaxMidpointDistanceFilter;};var PolygonExtracter=function PolygonExtracter(comps){this._comps=comps||null;};PolygonExtracter.prototype.filter=function filter(geom){if(geom instanceof Polygon){this._comps.add(geom);}};PolygonExtracter.prototype.interfaces_=function interfaces_(){return [GeometryFilter];};PolygonExtracter.prototype.getClass=function getClass(){return PolygonExtracter;};PolygonExtracter.getPolygons=function getPolygons(){if(arguments.length===1){var geom=arguments[0];return PolygonExtracter.getPolygons(geom,new ArrayList());}else if(arguments.length===2){var geom$1=arguments[0];var list=arguments[1];if(geom$1 instanceof Polygon){list.add(geom$1);}else if(geom$1 instanceof GeometryCollection){geom$1.apply(new PolygonExtracter(list));}return list;}};var LinearComponentExtracter=function LinearComponentExtracter(){this._lines=null;this._isForcedToLineString=false;if(arguments.length===1){var lines=arguments[0];this._lines=lines;}else if(arguments.length===2){var lines$1=arguments[0];var isForcedToLineString=arguments[1];this._lines=lines$1;this._isForcedToLineString=isForcedToLineString;}};LinearComponentExtracter.prototype.filter=function filter(geom){if(this._isForcedToLineString&&geom instanceof LinearRing){var line=geom.getFactory().createLineString(geom.getCoordinateSequence());this._lines.add(line);return null;}if(geom instanceof LineString){this._lines.add(geom);}};LinearComponentExtracter.prototype.setForceToLineString=function setForceToLineString(isForcedToLineString){this._isForcedToLineString=isForcedToLineString;};LinearComponentExtracter.prototype.interfaces_=function interfaces_(){return [GeometryComponentFilter];};LinearComponentExtracter.prototype.getClass=function getClass(){return LinearComponentExtracter;};LinearComponentExtracter.getGeometry=function getGeometry(){if(arguments.length===1){var geom=arguments[0];return geom.getFactory().buildGeometry(LinearComponentExtracter.getLines(geom));}else if(arguments.length===2){var geom$1=arguments[0];var forceToLineString=arguments[1];return geom$1.getFactory().buildGeometry(LinearComponentExtracter.getLines(geom$1,forceToLineString));}};LinearComponentExtracter.getLines=function getLines(){if(arguments.length===1){var geom=arguments[0];return LinearComponentExtracter.getLines(geom,false);}else if(arguments.length===2){if(hasInterface(arguments[0],Collection)&&hasInterface(arguments[1],Collection)){var geoms=arguments[0];var lines$1=arguments[1];for(var i=geoms.iterator();i.hasNext();){var g=i.next();LinearComponentExtracter.getLines(g,lines$1);}return lines$1;}else if(arguments[0]instanceof Geometry&&typeof arguments[1]==='boolean'){var geom$1=arguments[0];var forceToLineString=arguments[1];var lines=new ArrayList();geom$1.apply(new LinearComponentExtracter(lines,forceToLineString));return lines;}else if(arguments[0]instanceof Geometry&&hasInterface(arguments[1],Collection)){var geom$2=arguments[0];var lines$2=arguments[1];if(geom$2 instanceof LineString){lines$2.add(geom$2);}else {geom$2.apply(new LinearComponentExtracter(lines$2));}return lines$2;}}else if(arguments.length===3){if(typeof arguments[2]==='boolean'&&hasInterface(arguments[0],Collection)&&hasInterface(arguments[1],Collection)){var geoms$1=arguments[0];var lines$3=arguments[1];var forceToLineString$1=arguments[2];for(var i$1=geoms$1.iterator();i$1.hasNext();){var g$1=i$1.next();LinearComponentExtracter.getLines(g$1,lines$3,forceToLineString$1);}return lines$3;}else if(typeof arguments[2]==='boolean'&&arguments[0]instanceof Geometry&&hasInterface(arguments[1],Collection)){var geom$3=arguments[0];var lines$4=arguments[1];var forceToLineString$2=arguments[2];geom$3.apply(new LinearComponentExtracter(lines$4,forceToLineString$2));return lines$4;}}};var PointLocator=function PointLocator(){this._boundaryRule=BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE;this._isIn=null;this._numBoundaries=null;if(arguments.length===0);else if(arguments.length===1){var boundaryRule=arguments[0];if(boundaryRule===null){throw new IllegalArgumentException('Rule must be non-null');}this._boundaryRule=boundaryRule;}};PointLocator.prototype.locateInternal=function locateInternal(){var this$1=this;if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Polygon){var p=arguments[0];var poly=arguments[1];if(poly.isEmpty()){return Location.EXTERIOR;}var shell=poly.getExteriorRing();var shellLoc=this.locateInPolygonRing(p,shell);if(shellLoc===Location.EXTERIOR){return Location.EXTERIOR;}if(shellLoc===Location.BOUNDARY){return Location.BOUNDARY;}for(var i=0;i<poly.getNumInteriorRing();i++){var hole=poly.getInteriorRingN(i);var holeLoc=this$1.locateInPolygonRing(p,hole);if(holeLoc===Location.INTERIOR){return Location.EXTERIOR;}if(holeLoc===Location.BOUNDARY){return Location.BOUNDARY;}}return Location.INTERIOR;}else if(arguments[0]instanceof Coordinate&&arguments[1]instanceof LineString){var p$1=arguments[0];var l=arguments[1];if(!l.getEnvelopeInternal().intersects(p$1)){return Location.EXTERIOR;}var pt=l.getCoordinates();if(!l.isClosed()){if(p$1.equals(pt[0])||p$1.equals(pt[pt.length-1])){return Location.BOUNDARY;}}if(CGAlgorithms.isOnLine(p$1,pt)){return Location.INTERIOR;}return Location.EXTERIOR;}else if(arguments[0]instanceof Coordinate&&arguments[1]instanceof Point){var p$2=arguments[0];var pt$1=arguments[1];var ptCoord=pt$1.getCoordinate();if(ptCoord.equals2D(p$2)){return Location.INTERIOR;}return Location.EXTERIOR;}};PointLocator.prototype.locateInPolygonRing=function locateInPolygonRing(p,ring){if(!ring.getEnvelopeInternal().intersects(p)){return Location.EXTERIOR;}return CGAlgorithms.locatePointInRing(p,ring.getCoordinates());};PointLocator.prototype.intersects=function intersects(p,geom){return this.locate(p,geom)!==Location.EXTERIOR;};PointLocator.prototype.updateLocationInfo=function updateLocationInfo(loc){if(loc===Location.INTERIOR){this._isIn=true;}if(loc===Location.BOUNDARY){this._numBoundaries++;}};PointLocator.prototype.computeLocation=function computeLocation(p,geom){var this$1=this;if(geom instanceof Point){this.updateLocationInfo(this.locateInternal(p,geom));}if(geom instanceof LineString){this.updateLocationInfo(this.locateInternal(p,geom));}else if(geom instanceof Polygon){this.updateLocationInfo(this.locateInternal(p,geom));}else if(geom instanceof MultiLineString){var ml=geom;for(var i=0;i<ml.getNumGeometries();i++){var l=ml.getGeometryN(i);this$1.updateLocationInfo(this$1.locateInternal(p,l));}}else if(geom instanceof MultiPolygon){var mpoly=geom;for(var i$1=0;i$1<mpoly.getNumGeometries();i$1++){var poly=mpoly.getGeometryN(i$1);this$1.updateLocationInfo(this$1.locateInternal(p,poly));}}else if(geom instanceof GeometryCollection){var geomi=new GeometryCollectionIterator(geom);while(geomi.hasNext()){var g2=geomi.next();if(g2!==geom){this$1.computeLocation(p,g2);}}}};PointLocator.prototype.locate=function locate(p,geom){if(geom.isEmpty()){return Location.EXTERIOR;}if(geom instanceof LineString){return this.locateInternal(p,geom);}else if(geom instanceof Polygon){return this.locateInternal(p,geom);}this._isIn=false;this._numBoundaries=0;this.computeLocation(p,geom);if(this._boundaryRule.isInBoundary(this._numBoundaries)){return Location.BOUNDARY;}if(this._numBoundaries>0||this._isIn){return Location.INTERIOR;}return Location.EXTERIOR;};PointLocator.prototype.interfaces_=function interfaces_(){return [];};PointLocator.prototype.getClass=function getClass(){return PointLocator;};var GeometryLocation=function GeometryLocation(){this._component=null;this._segIndex=null;this._pt=null;if(arguments.length===2){var component=arguments[0];var pt=arguments[1];GeometryLocation.call(this,component,GeometryLocation.INSIDE_AREA,pt);}else if(arguments.length===3){var component$1=arguments[0];var segIndex=arguments[1];var pt$1=arguments[2];this._component=component$1;this._segIndex=segIndex;this._pt=pt$1;}};var staticAccessors$38={INSIDE_AREA:{configurable:true}};GeometryLocation.prototype.isInsideArea=function isInsideArea(){return this._segIndex===GeometryLocation.INSIDE_AREA;};GeometryLocation.prototype.getCoordinate=function getCoordinate(){return this._pt;};GeometryLocation.prototype.getGeometryComponent=function getGeometryComponent(){return this._component;};GeometryLocation.prototype.getSegmentIndex=function getSegmentIndex(){return this._segIndex;};GeometryLocation.prototype.interfaces_=function interfaces_(){return [];};GeometryLocation.prototype.getClass=function getClass(){return GeometryLocation;};staticAccessors$38.INSIDE_AREA.get=function(){return -1;};Object.defineProperties(GeometryLocation,staticAccessors$38);var PointExtracter=function PointExtracter(pts){this._pts=pts||null;};PointExtracter.prototype.filter=function filter(geom){if(geom instanceof Point){this._pts.add(geom);}};PointExtracter.prototype.interfaces_=function interfaces_(){return [GeometryFilter];};PointExtracter.prototype.getClass=function getClass(){return PointExtracter;};PointExtracter.getPoints=function getPoints(){if(arguments.length===1){var geom=arguments[0];if(geom instanceof Point){return Collections.singletonList(geom);}return PointExtracter.getPoints(geom,new ArrayList());}else if(arguments.length===2){var geom$1=arguments[0];var list=arguments[1];if(geom$1 instanceof Point){list.add(geom$1);}else if(geom$1 instanceof GeometryCollection){geom$1.apply(new PointExtracter(list));}return list;}};var ConnectedElementLocationFilter=function ConnectedElementLocationFilter(){this._locations=null;var locations=arguments[0];this._locations=locations;};ConnectedElementLocationFilter.prototype.filter=function filter(geom){if(geom instanceof Point||geom instanceof LineString||geom instanceof Polygon){this._locations.add(new GeometryLocation(geom,0,geom.getCoordinate()));}};ConnectedElementLocationFilter.prototype.interfaces_=function interfaces_(){return [GeometryFilter];};ConnectedElementLocationFilter.prototype.getClass=function getClass(){return ConnectedElementLocationFilter;};ConnectedElementLocationFilter.getLocations=function getLocations(geom){var locations=new ArrayList();geom.apply(new ConnectedElementLocationFilter(locations));return locations;};var DistanceOp=function DistanceOp(){this._geom=null;this._terminateDistance=0.0;this._ptLocator=new PointLocator();this._minDistanceLocation=null;this._minDistance=Double.MAX_VALUE;if(arguments.length===2){var g0=arguments[0];var g1=arguments[1];this._geom=[g0,g1];this._terminateDistance=0.0;}else if(arguments.length===3){var g0$1=arguments[0];var g1$1=arguments[1];var terminateDistance=arguments[2];this._geom=new Array(2).fill(null);this._geom[0]=g0$1;this._geom[1]=g1$1;this._terminateDistance=terminateDistance;}};DistanceOp.prototype.computeContainmentDistance=function computeContainmentDistance(){var this$1=this;if(arguments.length===0){var locPtPoly=new Array(2).fill(null);this.computeContainmentDistance(0,locPtPoly);if(this._minDistance<=this._terminateDistance){return null;}this.computeContainmentDistance(1,locPtPoly);}else if(arguments.length===2){var polyGeomIndex=arguments[0];var locPtPoly$1=arguments[1];var locationsIndex=1-polyGeomIndex;var polys=PolygonExtracter.getPolygons(this._geom[polyGeomIndex]);if(polys.size()>0){var insideLocs=ConnectedElementLocationFilter.getLocations(this._geom[locationsIndex]);this.computeContainmentDistance(insideLocs,polys,locPtPoly$1);if(this._minDistance<=this._terminateDistance){this._minDistanceLocation[locationsIndex]=locPtPoly$1[0];this._minDistanceLocation[polyGeomIndex]=locPtPoly$1[1];return null;}}}else if(arguments.length===3){if(arguments[2]instanceof Array&&hasInterface(arguments[0],List)&&hasInterface(arguments[1],List)){var locs=arguments[0];var polys$1=arguments[1];var locPtPoly$2=arguments[2];for(var i=0;i<locs.size();i++){var loc=locs.get(i);for(var j=0;j<polys$1.size();j++){this$1.computeContainmentDistance(loc,polys$1.get(j),locPtPoly$2);if(this$1._minDistance<=this$1._terminateDistance){return null;}}}}else if(arguments[2]instanceof Array&&arguments[0]instanceof GeometryLocation&&arguments[1]instanceof Polygon){var ptLoc=arguments[0];var poly=arguments[1];var locPtPoly$3=arguments[2];var pt=ptLoc.getCoordinate();if(Location.EXTERIOR!==this._ptLocator.locate(pt,poly)){this._minDistance=0.0;locPtPoly$3[0]=ptLoc;locPtPoly$3[1]=new GeometryLocation(poly,pt);return null;}}}};DistanceOp.prototype.computeMinDistanceLinesPoints=function computeMinDistanceLinesPoints(lines,points,locGeom){var this$1=this;for(var i=0;i<lines.size();i++){var line=lines.get(i);for(var j=0;j<points.size();j++){var pt=points.get(j);this$1.computeMinDistance(line,pt,locGeom);if(this$1._minDistance<=this$1._terminateDistance){return null;}}}};DistanceOp.prototype.computeFacetDistance=function computeFacetDistance(){var locGeom=new Array(2).fill(null);var lines0=LinearComponentExtracter.getLines(this._geom[0]);var lines1=LinearComponentExtracter.getLines(this._geom[1]);var pts0=PointExtracter.getPoints(this._geom[0]);var pts1=PointExtracter.getPoints(this._geom[1]);this.computeMinDistanceLines(lines0,lines1,locGeom);this.updateMinDistance(locGeom,false);if(this._minDistance<=this._terminateDistance){return null;}locGeom[0]=null;locGeom[1]=null;this.computeMinDistanceLinesPoints(lines0,pts1,locGeom);this.updateMinDistance(locGeom,false);if(this._minDistance<=this._terminateDistance){return null;}locGeom[0]=null;locGeom[1]=null;this.computeMinDistanceLinesPoints(lines1,pts0,locGeom);this.updateMinDistance(locGeom,true);if(this._minDistance<=this._terminateDistance){return null;}locGeom[0]=null;locGeom[1]=null;this.computeMinDistancePoints(pts0,pts1,locGeom);this.updateMinDistance(locGeom,false);};DistanceOp.prototype.nearestLocations=function nearestLocations(){this.computeMinDistance();return this._minDistanceLocation;};DistanceOp.prototype.updateMinDistance=function updateMinDistance(locGeom,flip){if(locGeom[0]===null){return null;}if(flip){this._minDistanceLocation[0]=locGeom[1];this._minDistanceLocation[1]=locGeom[0];}else {this._minDistanceLocation[0]=locGeom[0];this._minDistanceLocation[1]=locGeom[1];}};DistanceOp.prototype.nearestPoints=function nearestPoints(){this.computeMinDistance();var nearestPts=[this._minDistanceLocation[0].getCoordinate(),this._minDistanceLocation[1].getCoordinate()];return nearestPts;};DistanceOp.prototype.computeMinDistance=function computeMinDistance(){var this$1=this;if(arguments.length===0){if(this._minDistanceLocation!==null){return null;}this._minDistanceLocation=new Array(2).fill(null);this.computeContainmentDistance();if(this._minDistance<=this._terminateDistance){return null;}this.computeFacetDistance();}else if(arguments.length===3){if(arguments[2]instanceof Array&&arguments[0]instanceof LineString&&arguments[1]instanceof Point){var line=arguments[0];var pt=arguments[1];var locGeom=arguments[2];if(line.getEnvelopeInternal().distance(pt.getEnvelopeInternal())>this._minDistance){return null;}var coord0=line.getCoordinates();var coord=pt.getCoordinate();for(var i=0;i<coord0.length-1;i++){var dist=CGAlgorithms.distancePointLine(coord,coord0[i],coord0[i+1]);if(dist<this$1._minDistance){this$1._minDistance=dist;var seg=new LineSegment(coord0[i],coord0[i+1]);var segClosestPoint=seg.closestPoint(coord);locGeom[0]=new GeometryLocation(line,i,segClosestPoint);locGeom[1]=new GeometryLocation(pt,0,coord);}if(this$1._minDistance<=this$1._terminateDistance){return null;}}}else if(arguments[2]instanceof Array&&arguments[0]instanceof LineString&&arguments[1]instanceof LineString){var line0=arguments[0];var line1=arguments[1];var locGeom$1=arguments[2];if(line0.getEnvelopeInternal().distance(line1.getEnvelopeInternal())>this._minDistance){return null;}var coord0$1=line0.getCoordinates();var coord1=line1.getCoordinates();for(var i$1=0;i$1<coord0$1.length-1;i$1++){for(var j=0;j<coord1.length-1;j++){var dist$1=CGAlgorithms.distanceLineLine(coord0$1[i$1],coord0$1[i$1+1],coord1[j],coord1[j+1]);if(dist$1<this$1._minDistance){this$1._minDistance=dist$1;var seg0=new LineSegment(coord0$1[i$1],coord0$1[i$1+1]);var seg1=new LineSegment(coord1[j],coord1[j+1]);var closestPt=seg0.closestPoints(seg1);locGeom$1[0]=new GeometryLocation(line0,i$1,closestPt[0]);locGeom$1[1]=new GeometryLocation(line1,j,closestPt[1]);}if(this$1._minDistance<=this$1._terminateDistance){return null;}}}}}};DistanceOp.prototype.computeMinDistancePoints=function computeMinDistancePoints(points0,points1,locGeom){var this$1=this;for(var i=0;i<points0.size();i++){var pt0=points0.get(i);for(var j=0;j<points1.size();j++){var pt1=points1.get(j);var dist=pt0.getCoordinate().distance(pt1.getCoordinate());if(dist<this$1._minDistance){this$1._minDistance=dist;locGeom[0]=new GeometryLocation(pt0,0,pt0.getCoordinate());locGeom[1]=new GeometryLocation(pt1,0,pt1.getCoordinate());}if(this$1._minDistance<=this$1._terminateDistance){return null;}}}};DistanceOp.prototype.distance=function distance(){if(this._geom[0]===null||this._geom[1]===null){throw new IllegalArgumentException('null geometries are not supported');}if(this._geom[0].isEmpty()||this._geom[1].isEmpty()){return 0.0;}this.computeMinDistance();return this._minDistance;};DistanceOp.prototype.computeMinDistanceLines=function computeMinDistanceLines(lines0,lines1,locGeom){var this$1=this;for(var i=0;i<lines0.size();i++){var line0=lines0.get(i);for(var j=0;j<lines1.size();j++){var line1=lines1.get(j);this$1.computeMinDistance(line0,line1,locGeom);if(this$1._minDistance<=this$1._terminateDistance){return null;}}}};DistanceOp.prototype.interfaces_=function interfaces_(){return [];};DistanceOp.prototype.getClass=function getClass(){return DistanceOp;};DistanceOp.distance=function distance(g0,g1){var distOp=new DistanceOp(g0,g1);return distOp.distance();};DistanceOp.isWithinDistance=function isWithinDistance(g0,g1,distance){var distOp=new DistanceOp(g0,g1,distance);return distOp.distance()<=distance;};DistanceOp.nearestPoints=function nearestPoints(g0,g1){var distOp=new DistanceOp(g0,g1);return distOp.nearestPoints();};var PointPairDistance$2=function PointPairDistance(){this._pt=[new Coordinate(),new Coordinate()];this._distance=Double.NaN;this._isNull=true;};PointPairDistance$2.prototype.getCoordinates=function getCoordinates(){return this._pt;};PointPairDistance$2.prototype.getCoordinate=function getCoordinate(i){return this._pt[i];};PointPairDistance$2.prototype.setMinimum=function setMinimum(){if(arguments.length===1){var ptDist=arguments[0];this.setMinimum(ptDist._pt[0],ptDist._pt[1]);}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];if(this._isNull){this.initialize(p0,p1);return null;}var dist=p0.distance(p1);if(dist<this._distance){this.initialize(p0,p1,dist);}}};PointPairDistance$2.prototype.initialize=function initialize(){if(arguments.length===0){this._isNull=true;}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];this._pt[0].setCoordinate(p0);this._pt[1].setCoordinate(p1);this._distance=p0.distance(p1);this._isNull=false;}else if(arguments.length===3){var p0$1=arguments[0];var p1$1=arguments[1];var distance=arguments[2];this._pt[0].setCoordinate(p0$1);this._pt[1].setCoordinate(p1$1);this._distance=distance;this._isNull=false;}};PointPairDistance$2.prototype.toString=function toString(){return WKTWriter.toLineString(this._pt[0],this._pt[1]);};PointPairDistance$2.prototype.getDistance=function getDistance(){return this._distance;};PointPairDistance$2.prototype.setMaximum=function setMaximum(){if(arguments.length===1){var ptDist=arguments[0];this.setMaximum(ptDist._pt[0],ptDist._pt[1]);}else if(arguments.length===2){var p0=arguments[0];var p1=arguments[1];if(this._isNull){this.initialize(p0,p1);return null;}var dist=p0.distance(p1);if(dist>this._distance){this.initialize(p0,p1,dist);}}};PointPairDistance$2.prototype.interfaces_=function interfaces_(){return [];};PointPairDistance$2.prototype.getClass=function getClass(){return PointPairDistance$2;};var DistanceToPoint=function DistanceToPoint(){};DistanceToPoint.prototype.interfaces_=function interfaces_(){return [];};DistanceToPoint.prototype.getClass=function getClass(){return DistanceToPoint;};DistanceToPoint.computeDistance=function computeDistance(){if(arguments[2]instanceof PointPairDistance$2&&arguments[0]instanceof LineString&&arguments[1]instanceof Coordinate){var line=arguments[0];var pt=arguments[1];var ptDist=arguments[2];var tempSegment=new LineSegment();var coords=line.getCoordinates();for(var i=0;i<coords.length-1;i++){tempSegment.setCoordinates(coords[i],coords[i+1]);var closestPt=tempSegment.closestPoint(pt);ptDist.setMinimum(closestPt,pt);}}else if(arguments[2]instanceof PointPairDistance$2&&arguments[0]instanceof Polygon&&arguments[1]instanceof Coordinate){var poly=arguments[0];var pt$1=arguments[1];var ptDist$1=arguments[2];DistanceToPoint.computeDistance(poly.getExteriorRing(),pt$1,ptDist$1);for(var i$1=0;i$1<poly.getNumInteriorRing();i$1++){DistanceToPoint.computeDistance(poly.getInteriorRingN(i$1),pt$1,ptDist$1);}}else if(arguments[2]instanceof PointPairDistance$2&&arguments[0]instanceof Geometry&&arguments[1]instanceof Coordinate){var geom=arguments[0];var pt$2=arguments[1];var ptDist$2=arguments[2];if(geom instanceof LineString){DistanceToPoint.computeDistance(geom,pt$2,ptDist$2);}else if(geom instanceof Polygon){DistanceToPoint.computeDistance(geom,pt$2,ptDist$2);}else if(geom instanceof GeometryCollection){var gc=geom;for(var i$2=0;i$2<gc.getNumGeometries();i$2++){var g=gc.getGeometryN(i$2);DistanceToPoint.computeDistance(g,pt$2,ptDist$2);}}else {ptDist$2.setMinimum(geom.getCoordinate(),pt$2);}}else if(arguments[2]instanceof PointPairDistance$2&&arguments[0]instanceof LineSegment&&arguments[1]instanceof Coordinate){var segment=arguments[0];var pt$3=arguments[1];var ptDist$3=arguments[2];var closestPt$1=segment.closestPoint(pt$3);ptDist$3.setMinimum(closestPt$1,pt$3);}};var DiscreteHausdorffDistance=function DiscreteHausdorffDistance(){this._g0=null;this._g1=null;this._ptDist=new PointPairDistance$2();this._densifyFrac=0.0;var g0=arguments[0];var g1=arguments[1];this._g0=g0;this._g1=g1;};var staticAccessors$39={MaxPointDistanceFilter:{configurable:true},MaxDensifiedByFractionDistanceFilter:{configurable:true}};DiscreteHausdorffDistance.prototype.getCoordinates=function getCoordinates(){return this._ptDist.getCoordinates();};DiscreteHausdorffDistance.prototype.setDensifyFraction=function setDensifyFraction(densifyFrac){if(densifyFrac>1.0||densifyFrac<=0.0){throw new IllegalArgumentException('Fraction is not in range (0.0 - 1.0]');}this._densifyFrac=densifyFrac;};DiscreteHausdorffDistance.prototype.compute=function compute(g0,g1){this.computeOrientedDistance(g0,g1,this._ptDist);this.computeOrientedDistance(g1,g0,this._ptDist);};DiscreteHausdorffDistance.prototype.distance=function distance(){this.compute(this._g0,this._g1);return this._ptDist.getDistance();};DiscreteHausdorffDistance.prototype.computeOrientedDistance=function computeOrientedDistance(discreteGeom,geom,ptDist){var distFilter=new MaxPointDistanceFilter$1(geom);discreteGeom.apply(distFilter);ptDist.setMaximum(distFilter.getMaxPointDistance());if(this._densifyFrac>0){var fracFilter=new MaxDensifiedByFractionDistanceFilter(geom,this._densifyFrac);discreteGeom.apply(fracFilter);ptDist.setMaximum(fracFilter.getMaxPointDistance());}};DiscreteHausdorffDistance.prototype.orientedDistance=function orientedDistance(){this.computeOrientedDistance(this._g0,this._g1,this._ptDist);return this._ptDist.getDistance();};DiscreteHausdorffDistance.prototype.interfaces_=function interfaces_(){return [];};DiscreteHausdorffDistance.prototype.getClass=function getClass(){return DiscreteHausdorffDistance;};DiscreteHausdorffDistance.distance=function distance(){if(arguments.length===2){var g0=arguments[0];var g1=arguments[1];var dist=new DiscreteHausdorffDistance(g0,g1);return dist.distance();}else if(arguments.length===3){var g0$1=arguments[0];var g1$1=arguments[1];var densifyFrac=arguments[2];var dist$1=new DiscreteHausdorffDistance(g0$1,g1$1);dist$1.setDensifyFraction(densifyFrac);return dist$1.distance();}};staticAccessors$39.MaxPointDistanceFilter.get=function(){return MaxPointDistanceFilter$1;};staticAccessors$39.MaxDensifiedByFractionDistanceFilter.get=function(){return MaxDensifiedByFractionDistanceFilter;};Object.defineProperties(DiscreteHausdorffDistance,staticAccessors$39);var MaxPointDistanceFilter$1=function MaxPointDistanceFilter(){this._maxPtDist=new PointPairDistance$2();this._minPtDist=new PointPairDistance$2();this._euclideanDist=new DistanceToPoint();this._geom=null;var geom=arguments[0];this._geom=geom;};MaxPointDistanceFilter$1.prototype.filter=function filter(pt){this._minPtDist.initialize();DistanceToPoint.computeDistance(this._geom,pt,this._minPtDist);this._maxPtDist.setMaximum(this._minPtDist);};MaxPointDistanceFilter$1.prototype.getMaxPointDistance=function getMaxPointDistance(){return this._maxPtDist;};MaxPointDistanceFilter$1.prototype.interfaces_=function interfaces_(){return [CoordinateFilter];};MaxPointDistanceFilter$1.prototype.getClass=function getClass(){return MaxPointDistanceFilter$1;};var MaxDensifiedByFractionDistanceFilter=function MaxDensifiedByFractionDistanceFilter(){this._maxPtDist=new PointPairDistance$2();this._minPtDist=new PointPairDistance$2();this._geom=null;this._numSubSegs=0;var geom=arguments[0];var fraction=arguments[1];this._geom=geom;this._numSubSegs=Math.trunc(Math.round(1.0/fraction));};MaxDensifiedByFractionDistanceFilter.prototype.filter=function filter(seq,index){var this$1=this;if(index===0){return null;}var p0=seq.getCoordinate(index-1);var p1=seq.getCoordinate(index);var delx=(p1.x-p0.x)/this._numSubSegs;var dely=(p1.y-p0.y)/this._numSubSegs;for(var i=0;i<this._numSubSegs;i++){var x=p0.x+i*delx;var y=p0.y+i*dely;var pt=new Coordinate(x,y);this$1._minPtDist.initialize();DistanceToPoint.computeDistance(this$1._geom,pt,this$1._minPtDist);this$1._maxPtDist.setMaximum(this$1._minPtDist);}};MaxDensifiedByFractionDistanceFilter.prototype.isDone=function isDone(){return false;};MaxDensifiedByFractionDistanceFilter.prototype.isGeometryChanged=function isGeometryChanged(){return false;};MaxDensifiedByFractionDistanceFilter.prototype.getMaxPointDistance=function getMaxPointDistance(){return this._maxPtDist;};MaxDensifiedByFractionDistanceFilter.prototype.interfaces_=function interfaces_(){return [CoordinateSequenceFilter];};MaxDensifiedByFractionDistanceFilter.prototype.getClass=function getClass(){return MaxDensifiedByFractionDistanceFilter;};var BufferDistanceValidator=function BufferDistanceValidator(input,bufDistance,result){this._minValidDistance=null;this._maxValidDistance=null;this._minDistanceFound=null;this._maxDistanceFound=null;this._isValid=true;this._errMsg=null;this._errorLocation=null;this._errorIndicator=null;this._input=input||null;this._bufDistance=bufDistance||null;this._result=result||null;};var staticAccessors$37={VERBOSE:{configurable:true},MAX_DISTANCE_DIFF_FRAC:{configurable:true}};BufferDistanceValidator.prototype.checkMaximumDistance=function checkMaximumDistance(input,bufCurve,maxDist){var haus=new DiscreteHausdorffDistance(bufCurve,input);haus.setDensifyFraction(0.25);this._maxDistanceFound=haus.orientedDistance();if(this._maxDistanceFound>maxDist){this._isValid=false;var pts=haus.getCoordinates();this._errorLocation=pts[1];this._errorIndicator=input.getFactory().createLineString(pts);this._errMsg='Distance between buffer curve and input is too large ('+this._maxDistanceFound+' at '+WKTWriter.toLineString(pts[0],pts[1])+')';}};BufferDistanceValidator.prototype.isValid=function isValid(){var posDistance=Math.abs(this._bufDistance);var distDelta=BufferDistanceValidator.MAX_DISTANCE_DIFF_FRAC*posDistance;this._minValidDistance=posDistance-distDelta;this._maxValidDistance=posDistance+distDelta;if(this._input.isEmpty()||this._result.isEmpty()){return true;}if(this._bufDistance>0.0){this.checkPositiveValid();}else {this.checkNegativeValid();}if(BufferDistanceValidator.VERBOSE){System.out.println('Min Dist= '+this._minDistanceFound+'  err= '+(1.0-this._minDistanceFound/this._bufDistance)+'  Max Dist= '+this._maxDistanceFound+'  err= '+(this._maxDistanceFound/this._bufDistance-1.0));}return this._isValid;};BufferDistanceValidator.prototype.checkNegativeValid=function checkNegativeValid(){if(!(this._input instanceof Polygon||this._input instanceof MultiPolygon||this._input instanceof GeometryCollection)){return null;}var inputCurve=this.getPolygonLines(this._input);this.checkMinimumDistance(inputCurve,this._result,this._minValidDistance);if(!this._isValid){return null;}this.checkMaximumDistance(inputCurve,this._result,this._maxValidDistance);};BufferDistanceValidator.prototype.getErrorIndicator=function getErrorIndicator(){return this._errorIndicator;};BufferDistanceValidator.prototype.checkMinimumDistance=function checkMinimumDistance(g1,g2,minDist){var distOp=new DistanceOp(g1,g2,minDist);this._minDistanceFound=distOp.distance();if(this._minDistanceFound<minDist){this._isValid=false;var pts=distOp.nearestPoints();this._errorLocation=distOp.nearestPoints()[1];this._errorIndicator=g1.getFactory().createLineString(pts);this._errMsg='Distance between buffer curve and input is too small ('+this._minDistanceFound+' at '+WKTWriter.toLineString(pts[0],pts[1])+' )';}};BufferDistanceValidator.prototype.checkPositiveValid=function checkPositiveValid(){var bufCurve=this._result.getBoundary();this.checkMinimumDistance(this._input,bufCurve,this._minValidDistance);if(!this._isValid){return null;}this.checkMaximumDistance(this._input,bufCurve,this._maxValidDistance);};BufferDistanceValidator.prototype.getErrorLocation=function getErrorLocation(){return this._errorLocation;};BufferDistanceValidator.prototype.getPolygonLines=function getPolygonLines(g){var lines=new ArrayList();var lineExtracter=new LinearComponentExtracter(lines);var polys=PolygonExtracter.getPolygons(g);for(var i=polys.iterator();i.hasNext();){var poly=i.next();poly.apply(lineExtracter);}return g.getFactory().buildGeometry(lines);};BufferDistanceValidator.prototype.getErrorMessage=function getErrorMessage(){return this._errMsg;};BufferDistanceValidator.prototype.interfaces_=function interfaces_(){return [];};BufferDistanceValidator.prototype.getClass=function getClass(){return BufferDistanceValidator;};staticAccessors$37.VERBOSE.get=function(){return false;};staticAccessors$37.MAX_DISTANCE_DIFF_FRAC.get=function(){return 0.012;};Object.defineProperties(BufferDistanceValidator,staticAccessors$37);var BufferResultValidator=function BufferResultValidator(input,distance,result){this._isValid=true;this._errorMsg=null;this._errorLocation=null;this._errorIndicator=null;this._input=input||null;this._distance=distance||null;this._result=result||null;};var staticAccessors$40={VERBOSE:{configurable:true},MAX_ENV_DIFF_FRAC:{configurable:true}};BufferResultValidator.prototype.isValid=function isValid(){this.checkPolygonal();if(!this._isValid){return this._isValid;}this.checkExpectedEmpty();if(!this._isValid){return this._isValid;}this.checkEnvelope();if(!this._isValid){return this._isValid;}this.checkArea();if(!this._isValid){return this._isValid;}this.checkDistance();return this._isValid;};BufferResultValidator.prototype.checkEnvelope=function checkEnvelope(){if(this._distance<0.0){return null;}var padding=this._distance*BufferResultValidator.MAX_ENV_DIFF_FRAC;if(padding===0.0){padding=0.001;}var expectedEnv=new Envelope(this._input.getEnvelopeInternal());expectedEnv.expandBy(this._distance);var bufEnv=new Envelope(this._result.getEnvelopeInternal());bufEnv.expandBy(padding);if(!bufEnv.contains(expectedEnv)){this._isValid=false;this._errorMsg='Buffer envelope is incorrect';this._errorIndicator=this._input.getFactory().toGeometry(bufEnv);}this.report('Envelope');};BufferResultValidator.prototype.checkDistance=function checkDistance(){var distValid=new BufferDistanceValidator(this._input,this._distance,this._result);if(!distValid.isValid()){this._isValid=false;this._errorMsg=distValid.getErrorMessage();this._errorLocation=distValid.getErrorLocation();this._errorIndicator=distValid.getErrorIndicator();}this.report('Distance');};BufferResultValidator.prototype.checkArea=function checkArea(){var inputArea=this._input.getArea();var resultArea=this._result.getArea();if(this._distance>0.0&&inputArea>resultArea){this._isValid=false;this._errorMsg='Area of positive buffer is smaller than input';this._errorIndicator=this._result;}if(this._distance<0.0&&inputArea<resultArea){this._isValid=false;this._errorMsg='Area of negative buffer is larger than input';this._errorIndicator=this._result;}this.report('Area');};BufferResultValidator.prototype.checkPolygonal=function checkPolygonal(){if(!(this._result instanceof Polygon||this._result instanceof MultiPolygon)){this._isValid=false;}this._errorMsg='Result is not polygonal';this._errorIndicator=this._result;this.report('Polygonal');};BufferResultValidator.prototype.getErrorIndicator=function getErrorIndicator(){return this._errorIndicator;};BufferResultValidator.prototype.getErrorLocation=function getErrorLocation(){return this._errorLocation;};BufferResultValidator.prototype.checkExpectedEmpty=function checkExpectedEmpty(){if(this._input.getDimension()>=2){return null;}if(this._distance>0.0){return null;}if(!this._result.isEmpty()){this._isValid=false;this._errorMsg='Result is non-empty';this._errorIndicator=this._result;}this.report('ExpectedEmpty');};BufferResultValidator.prototype.report=function report(checkName){if(!BufferResultValidator.VERBOSE){return null;}System.out.println('Check '+checkName+': '+(this._isValid?'passed':'FAILED'));};BufferResultValidator.prototype.getErrorMessage=function getErrorMessage(){return this._errorMsg;};BufferResultValidator.prototype.interfaces_=function interfaces_(){return [];};BufferResultValidator.prototype.getClass=function getClass(){return BufferResultValidator;};BufferResultValidator.isValidMsg=function isValidMsg(g,distance,result){var validator=new BufferResultValidator(g,distance,result);if(!validator.isValid()){return validator.getErrorMessage();}return null;};BufferResultValidator.isValid=function isValid(g,distance,result){var validator=new BufferResultValidator(g,distance,result);if(validator.isValid()){return true;}return false;};staticAccessors$40.VERBOSE.get=function(){return false;};staticAccessors$40.MAX_ENV_DIFF_FRAC.get=function(){return 0.012;};Object.defineProperties(BufferResultValidator,staticAccessors$40);// operation.buffer
  var BasicSegmentString=function BasicSegmentString(){this._pts=null;this._data=null;var pts=arguments[0];var data=arguments[1];this._pts=pts;this._data=data;};BasicSegmentString.prototype.getCoordinates=function getCoordinates(){return this._pts;};BasicSegmentString.prototype.size=function size(){return this._pts.length;};BasicSegmentString.prototype.getCoordinate=function getCoordinate(i){return this._pts[i];};BasicSegmentString.prototype.isClosed=function isClosed(){return this._pts[0].equals(this._pts[this._pts.length-1]);};BasicSegmentString.prototype.getSegmentOctant=function getSegmentOctant(index){if(index===this._pts.length-1){return -1;}return Octant.octant(this.getCoordinate(index),this.getCoordinate(index+1));};BasicSegmentString.prototype.setData=function setData(data){this._data=data;};BasicSegmentString.prototype.getData=function getData(){return this._data;};BasicSegmentString.prototype.toString=function toString(){return WKTWriter.toLineString(new CoordinateArraySequence(this._pts));};BasicSegmentString.prototype.interfaces_=function interfaces_(){return [SegmentString];};BasicSegmentString.prototype.getClass=function getClass(){return BasicSegmentString;};var InteriorIntersectionFinder=function InteriorIntersectionFinder(){this._findAllIntersections=false;this._isCheckEndSegmentsOnly=false;this._li=null;this._interiorIntersection=null;this._intSegments=null;this._intersections=new ArrayList();this._intersectionCount=0;this._keepIntersections=true;var li=arguments[0];this._li=li;this._interiorIntersection=null;};InteriorIntersectionFinder.prototype.getInteriorIntersection=function getInteriorIntersection(){return this._interiorIntersection;};InteriorIntersectionFinder.prototype.setCheckEndSegmentsOnly=function setCheckEndSegmentsOnly(isCheckEndSegmentsOnly){this._isCheckEndSegmentsOnly=isCheckEndSegmentsOnly;};InteriorIntersectionFinder.prototype.getIntersectionSegments=function getIntersectionSegments(){return this._intSegments;};InteriorIntersectionFinder.prototype.count=function count(){return this._intersectionCount;};InteriorIntersectionFinder.prototype.getIntersections=function getIntersections(){return this._intersections;};InteriorIntersectionFinder.prototype.setFindAllIntersections=function setFindAllIntersections(findAllIntersections){this._findAllIntersections=findAllIntersections;};InteriorIntersectionFinder.prototype.setKeepIntersections=function setKeepIntersections(keepIntersections){this._keepIntersections=keepIntersections;};InteriorIntersectionFinder.prototype.processIntersections=function processIntersections(e0,segIndex0,e1,segIndex1){if(!this._findAllIntersections&&this.hasIntersection()){return null;}if(e0===e1&&segIndex0===segIndex1){return null;}if(this._isCheckEndSegmentsOnly){var isEndSegPresent=this.isEndSegment(e0,segIndex0)||this.isEndSegment(e1,segIndex1);if(!isEndSegPresent){return null;}}var p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this._li.computeIntersection(p00,p01,p10,p11);if(this._li.hasIntersection()){if(this._li.isInteriorIntersection()){this._intSegments=new Array(4).fill(null);this._intSegments[0]=p00;this._intSegments[1]=p01;this._intSegments[2]=p10;this._intSegments[3]=p11;this._interiorIntersection=this._li.getIntersection(0);if(this._keepIntersections){this._intersections.add(this._interiorIntersection);}this._intersectionCount++;}}};InteriorIntersectionFinder.prototype.isEndSegment=function isEndSegment(segStr,index){if(index===0){return true;}if(index>=segStr.size()-2){return true;}return false;};InteriorIntersectionFinder.prototype.hasIntersection=function hasIntersection(){return this._interiorIntersection!==null;};InteriorIntersectionFinder.prototype.isDone=function isDone(){if(this._findAllIntersections){return false;}return this._interiorIntersection!==null;};InteriorIntersectionFinder.prototype.interfaces_=function interfaces_(){return [SegmentIntersector];};InteriorIntersectionFinder.prototype.getClass=function getClass(){return InteriorIntersectionFinder;};InteriorIntersectionFinder.createAllIntersectionsFinder=function createAllIntersectionsFinder(li){var finder=new InteriorIntersectionFinder(li);finder.setFindAllIntersections(true);return finder;};InteriorIntersectionFinder.createAnyIntersectionFinder=function createAnyIntersectionFinder(li){return new InteriorIntersectionFinder(li);};InteriorIntersectionFinder.createIntersectionCounter=function createIntersectionCounter(li){var finder=new InteriorIntersectionFinder(li);finder.setFindAllIntersections(true);finder.setKeepIntersections(false);return finder;};var FastNodingValidator=function FastNodingValidator(){this._li=new RobustLineIntersector();this._segStrings=null;this._findAllIntersections=false;this._segInt=null;this._isValid=true;var segStrings=arguments[0];this._segStrings=segStrings;};FastNodingValidator.prototype.execute=function execute(){if(this._segInt!==null){return null;}this.checkInteriorIntersections();};FastNodingValidator.prototype.getIntersections=function getIntersections(){return this._segInt.getIntersections();};FastNodingValidator.prototype.isValid=function isValid(){this.execute();return this._isValid;};FastNodingValidator.prototype.setFindAllIntersections=function setFindAllIntersections(findAllIntersections){this._findAllIntersections=findAllIntersections;};FastNodingValidator.prototype.checkInteriorIntersections=function checkInteriorIntersections(){this._isValid=true;this._segInt=new InteriorIntersectionFinder(this._li);this._segInt.setFindAllIntersections(this._findAllIntersections);var noder=new MCIndexNoder();noder.setSegmentIntersector(this._segInt);noder.computeNodes(this._segStrings);if(this._segInt.hasIntersection()){this._isValid=false;return null;}};FastNodingValidator.prototype.checkValid=function checkValid(){this.execute();if(!this._isValid){throw new TopologyException(this.getErrorMessage(),this._segInt.getInteriorIntersection());}};FastNodingValidator.prototype.getErrorMessage=function getErrorMessage(){if(this._isValid){return 'no intersections found';}var intSegs=this._segInt.getIntersectionSegments();return 'found non-noded intersection between '+WKTWriter.toLineString(intSegs[0],intSegs[1])+' and '+WKTWriter.toLineString(intSegs[2],intSegs[3]);};FastNodingValidator.prototype.interfaces_=function interfaces_(){return [];};FastNodingValidator.prototype.getClass=function getClass(){return FastNodingValidator;};FastNodingValidator.computeIntersections=function computeIntersections(segStrings){var nv=new FastNodingValidator(segStrings);nv.setFindAllIntersections(true);nv.isValid();return nv.getIntersections();};var EdgeNodingValidator=function EdgeNodingValidator(){this._nv=null;var edges=arguments[0];this._nv=new FastNodingValidator(EdgeNodingValidator.toSegmentStrings(edges));};EdgeNodingValidator.prototype.checkValid=function checkValid(){this._nv.checkValid();};EdgeNodingValidator.prototype.interfaces_=function interfaces_(){return [];};EdgeNodingValidator.prototype.getClass=function getClass(){return EdgeNodingValidator;};EdgeNodingValidator.toSegmentStrings=function toSegmentStrings(edges){var segStrings=new ArrayList();for(var i=edges.iterator();i.hasNext();){var e=i.next();segStrings.add(new BasicSegmentString(e.getCoordinates(),e));}return segStrings;};EdgeNodingValidator.checkValid=function checkValid(edges){var validator=new EdgeNodingValidator(edges);validator.checkValid();};var GeometryCollectionMapper=function GeometryCollectionMapper(mapOp){this._mapOp=mapOp;};GeometryCollectionMapper.prototype.map=function map(gc){var this$1=this;var mapped=new ArrayList();for(var i=0;i<gc.getNumGeometries();i++){var g=this$1._mapOp.map(gc.getGeometryN(i));if(!g.isEmpty()){mapped.add(g);}}return gc.getFactory().createGeometryCollection(GeometryFactory.toGeometryArray(mapped));};GeometryCollectionMapper.prototype.interfaces_=function interfaces_(){return [];};GeometryCollectionMapper.prototype.getClass=function getClass(){return GeometryCollectionMapper;};GeometryCollectionMapper.map=function map(gc,op){var mapper=new GeometryCollectionMapper(op);return mapper.map(gc);};var LineBuilder=function LineBuilder(){this._op=null;this._geometryFactory=null;this._ptLocator=null;this._lineEdgesList=new ArrayList();this._resultLineList=new ArrayList();var op=arguments[0];var geometryFactory=arguments[1];var ptLocator=arguments[2];this._op=op;this._geometryFactory=geometryFactory;this._ptLocator=ptLocator;};LineBuilder.prototype.collectLines=function collectLines(opCode){var this$1=this;for(var it=this._op.getGraph().getEdgeEnds().iterator();it.hasNext();){var de=it.next();this$1.collectLineEdge(de,opCode,this$1._lineEdgesList);this$1.collectBoundaryTouchEdge(de,opCode,this$1._lineEdgesList);}};LineBuilder.prototype.labelIsolatedLine=function labelIsolatedLine(e,targetIndex){var loc=this._ptLocator.locate(e.getCoordinate(),this._op.getArgGeometry(targetIndex));e.getLabel().setLocation(targetIndex,loc);};LineBuilder.prototype.build=function build(opCode){this.findCoveredLineEdges();this.collectLines(opCode);this.buildLines(opCode);return this._resultLineList;};LineBuilder.prototype.collectLineEdge=function collectLineEdge(de,opCode,edges){var label=de.getLabel();var e=de.getEdge();if(de.isLineEdge()){if(!de.isVisited()&&OverlayOp.isResultOfOp(label,opCode)&&!e.isCovered()){edges.add(e);de.setVisitedEdge(true);}}};LineBuilder.prototype.findCoveredLineEdges=function findCoveredLineEdges(){var this$1=this;for(var nodeit=this._op.getGraph().getNodes().iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().findCoveredLineEdges();}for(var it=this._op.getGraph().getEdgeEnds().iterator();it.hasNext();){var de=it.next();var e=de.getEdge();if(de.isLineEdge()&&!e.isCoveredSet()){var isCovered=this$1._op.isCoveredByA(de.getCoordinate());e.setCovered(isCovered);}}};LineBuilder.prototype.labelIsolatedLines=function labelIsolatedLines(edgesList){var this$1=this;for(var it=edgesList.iterator();it.hasNext();){var e=it.next();var label=e.getLabel();if(e.isIsolated()){if(label.isNull(0)){this$1.labelIsolatedLine(e,0);}else {this$1.labelIsolatedLine(e,1);}}}};LineBuilder.prototype.buildLines=function buildLines(opCode){var this$1=this;for(var it=this._lineEdgesList.iterator();it.hasNext();){var e=it.next();// const label = e.getLabel()
  var line=this$1._geometryFactory.createLineString(e.getCoordinates());this$1._resultLineList.add(line);e.setInResult(true);}};LineBuilder.prototype.collectBoundaryTouchEdge=function collectBoundaryTouchEdge(de,opCode,edges){var label=de.getLabel();if(de.isLineEdge()){return null;}if(de.isVisited()){return null;}if(de.isInteriorAreaEdge()){return null;}if(de.getEdge().isInResult()){return null;}Assert.isTrue(!(de.isInResult()||de.getSym().isInResult())||!de.getEdge().isInResult());if(OverlayOp.isResultOfOp(label,opCode)&&opCode===OverlayOp.INTERSECTION){edges.add(de.getEdge());de.setVisitedEdge(true);}};LineBuilder.prototype.interfaces_=function interfaces_(){return [];};LineBuilder.prototype.getClass=function getClass(){return LineBuilder;};var PointBuilder=function PointBuilder(){this._op=null;this._geometryFactory=null;this._resultPointList=new ArrayList();var op=arguments[0];var geometryFactory=arguments[1];// const ptLocator = arguments[2]
  this._op=op;this._geometryFactory=geometryFactory;};PointBuilder.prototype.filterCoveredNodeToPoint=function filterCoveredNodeToPoint(n){var coord=n.getCoordinate();if(!this._op.isCoveredByLA(coord)){var pt=this._geometryFactory.createPoint(coord);this._resultPointList.add(pt);}};PointBuilder.prototype.extractNonCoveredResultNodes=function extractNonCoveredResultNodes(opCode){var this$1=this;for(var nodeit=this._op.getGraph().getNodes().iterator();nodeit.hasNext();){var n=nodeit.next();if(n.isInResult()){continue;}if(n.isIncidentEdgeInResult()){continue;}if(n.getEdges().getDegree()===0||opCode===OverlayOp.INTERSECTION){var label=n.getLabel();if(OverlayOp.isResultOfOp(label,opCode)){this$1.filterCoveredNodeToPoint(n);}}}};PointBuilder.prototype.build=function build(opCode){this.extractNonCoveredResultNodes(opCode);return this._resultPointList;};PointBuilder.prototype.interfaces_=function interfaces_(){return [];};PointBuilder.prototype.getClass=function getClass(){return PointBuilder;};var GeometryTransformer=function GeometryTransformer(){this._inputGeom=null;this._factory=null;this._pruneEmptyGeometry=true;this._preserveGeometryCollectionType=true;this._preserveCollections=false;this._preserveType=false;};GeometryTransformer.prototype.transformPoint=function transformPoint(geom,parent){return this._factory.createPoint(this.transformCoordinates(geom.getCoordinateSequence(),geom));};GeometryTransformer.prototype.transformPolygon=function transformPolygon(geom,parent){var this$1=this;var isAllValidLinearRings=true;var shell=this.transformLinearRing(geom.getExteriorRing(),geom);if(shell===null||!(shell instanceof LinearRing)||shell.isEmpty()){isAllValidLinearRings=false;}var holes=new ArrayList();for(var i=0;i<geom.getNumInteriorRing();i++){var hole=this$1.transformLinearRing(geom.getInteriorRingN(i),geom);if(hole===null||hole.isEmpty()){continue;}if(!(hole instanceof LinearRing)){isAllValidLinearRings=false;}holes.add(hole);}if(isAllValidLinearRings){return this._factory.createPolygon(shell,holes.toArray([]));}else {var components=new ArrayList();if(shell!==null){components.add(shell);}components.addAll(holes);return this._factory.buildGeometry(components);}};GeometryTransformer.prototype.createCoordinateSequence=function createCoordinateSequence(coords){return this._factory.getCoordinateSequenceFactory().create(coords);};GeometryTransformer.prototype.getInputGeometry=function getInputGeometry(){return this._inputGeom;};GeometryTransformer.prototype.transformMultiLineString=function transformMultiLineString(geom,parent){var this$1=this;var transGeomList=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var transformGeom=this$1.transformLineString(geom.getGeometryN(i),geom);if(transformGeom===null){continue;}if(transformGeom.isEmpty()){continue;}transGeomList.add(transformGeom);}return this._factory.buildGeometry(transGeomList);};GeometryTransformer.prototype.transformCoordinates=function transformCoordinates(coords,parent){return this.copy(coords);};GeometryTransformer.prototype.transformLineString=function transformLineString(geom,parent){return this._factory.createLineString(this.transformCoordinates(geom.getCoordinateSequence(),geom));};GeometryTransformer.prototype.transformMultiPoint=function transformMultiPoint(geom,parent){var this$1=this;var transGeomList=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var transformGeom=this$1.transformPoint(geom.getGeometryN(i),geom);if(transformGeom===null){continue;}if(transformGeom.isEmpty()){continue;}transGeomList.add(transformGeom);}return this._factory.buildGeometry(transGeomList);};GeometryTransformer.prototype.transformMultiPolygon=function transformMultiPolygon(geom,parent){var this$1=this;var transGeomList=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var transformGeom=this$1.transformPolygon(geom.getGeometryN(i),geom);if(transformGeom===null){continue;}if(transformGeom.isEmpty()){continue;}transGeomList.add(transformGeom);}return this._factory.buildGeometry(transGeomList);};GeometryTransformer.prototype.copy=function copy(seq){return seq.copy();};GeometryTransformer.prototype.transformGeometryCollection=function transformGeometryCollection(geom,parent){var this$1=this;var transGeomList=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var transformGeom=this$1.transform(geom.getGeometryN(i));if(transformGeom===null){continue;}if(this$1._pruneEmptyGeometry&&transformGeom.isEmpty()){continue;}transGeomList.add(transformGeom);}if(this._preserveGeometryCollectionType){return this._factory.createGeometryCollection(GeometryFactory.toGeometryArray(transGeomList));}return this._factory.buildGeometry(transGeomList);};GeometryTransformer.prototype.transform=function transform(inputGeom){this._inputGeom=inputGeom;this._factory=inputGeom.getFactory();if(inputGeom instanceof Point){return this.transformPoint(inputGeom,null);}if(inputGeom instanceof MultiPoint){return this.transformMultiPoint(inputGeom,null);}if(inputGeom instanceof LinearRing){return this.transformLinearRing(inputGeom,null);}if(inputGeom instanceof LineString){return this.transformLineString(inputGeom,null);}if(inputGeom instanceof MultiLineString){return this.transformMultiLineString(inputGeom,null);}if(inputGeom instanceof Polygon){return this.transformPolygon(inputGeom,null);}if(inputGeom instanceof MultiPolygon){return this.transformMultiPolygon(inputGeom,null);}if(inputGeom instanceof GeometryCollection){return this.transformGeometryCollection(inputGeom,null);}throw new IllegalArgumentException('Unknown Geometry subtype: '+inputGeom.getClass().getName());};GeometryTransformer.prototype.transformLinearRing=function transformLinearRing(geom,parent){var seq=this.transformCoordinates(geom.getCoordinateSequence(),geom);if(seq===null){return this._factory.createLinearRing(null);}var seqSize=seq.size();if(seqSize>0&&seqSize<4&&!this._preserveType){return this._factory.createLineString(seq);}return this._factory.createLinearRing(seq);};GeometryTransformer.prototype.interfaces_=function interfaces_(){return [];};GeometryTransformer.prototype.getClass=function getClass(){return GeometryTransformer;};var LineStringSnapper=function LineStringSnapper(){this._snapTolerance=0.0;this._srcPts=null;this._seg=new LineSegment();this._allowSnappingToSourceVertices=false;this._isClosed=false;if(arguments[0]instanceof LineString&&typeof arguments[1]==='number'){var srcLine=arguments[0];var snapTolerance=arguments[1];LineStringSnapper.call(this,srcLine.getCoordinates(),snapTolerance);}else if(arguments[0]instanceof Array&&typeof arguments[1]==='number'){var srcPts=arguments[0];var snapTolerance$1=arguments[1];this._srcPts=srcPts;this._isClosed=LineStringSnapper.isClosed(srcPts);this._snapTolerance=snapTolerance$1;}};LineStringSnapper.prototype.snapVertices=function snapVertices(srcCoords,snapPts){var this$1=this;var end=this._isClosed?srcCoords.size()-1:srcCoords.size();for(var i=0;i<end;i++){var srcPt=srcCoords.get(i);var snapVert=this$1.findSnapForVertex(srcPt,snapPts);if(snapVert!==null){srcCoords.set(i,new Coordinate(snapVert));if(i===0&&this$1._isClosed){srcCoords.set(srcCoords.size()-1,new Coordinate(snapVert));}}}};LineStringSnapper.prototype.findSnapForVertex=function findSnapForVertex(pt,snapPts){var this$1=this;for(var i=0;i<snapPts.length;i++){if(pt.equals2D(snapPts[i])){return null;}if(pt.distance(snapPts[i])<this$1._snapTolerance){return snapPts[i];}}return null;};LineStringSnapper.prototype.snapTo=function snapTo(snapPts){var coordList=new CoordinateList(this._srcPts);this.snapVertices(coordList,snapPts);this.snapSegments(coordList,snapPts);var newPts=coordList.toCoordinateArray();return newPts;};LineStringSnapper.prototype.snapSegments=function snapSegments(srcCoords,snapPts){var this$1=this;if(snapPts.length===0){return null;}var distinctPtCount=snapPts.length;if(snapPts[0].equals2D(snapPts[snapPts.length-1])){distinctPtCount=snapPts.length-1;}for(var i=0;i<distinctPtCount;i++){var snapPt=snapPts[i];var index=this$1.findSegmentIndexToSnap(snapPt,srcCoords);if(index>=0){srcCoords.add(index+1,new Coordinate(snapPt),false);}}};LineStringSnapper.prototype.findSegmentIndexToSnap=function findSegmentIndexToSnap(snapPt,srcCoords){var this$1=this;var minDist=Double.MAX_VALUE;var snapIndex=-1;for(var i=0;i<srcCoords.size()-1;i++){this$1._seg.p0=srcCoords.get(i);this$1._seg.p1=srcCoords.get(i+1);if(this$1._seg.p0.equals2D(snapPt)||this$1._seg.p1.equals2D(snapPt)){if(this$1._allowSnappingToSourceVertices){continue;}else {return -1;}}var dist=this$1._seg.distance(snapPt);if(dist<this$1._snapTolerance&&dist<minDist){minDist=dist;snapIndex=i;}}return snapIndex;};LineStringSnapper.prototype.setAllowSnappingToSourceVertices=function setAllowSnappingToSourceVertices(allowSnappingToSourceVertices){this._allowSnappingToSourceVertices=allowSnappingToSourceVertices;};LineStringSnapper.prototype.interfaces_=function interfaces_(){return [];};LineStringSnapper.prototype.getClass=function getClass(){return LineStringSnapper;};LineStringSnapper.isClosed=function isClosed(pts){if(pts.length<=1){return false;}return pts[0].equals2D(pts[pts.length-1]);};var GeometrySnapper=function GeometrySnapper(srcGeom){this._srcGeom=srcGeom||null;};var staticAccessors$41={SNAP_PRECISION_FACTOR:{configurable:true}};GeometrySnapper.prototype.snapTo=function snapTo(snapGeom,snapTolerance){var snapPts=this.extractTargetCoordinates(snapGeom);var snapTrans=new SnapTransformer(snapTolerance,snapPts);return snapTrans.transform(this._srcGeom);};GeometrySnapper.prototype.snapToSelf=function snapToSelf(snapTolerance,cleanResult){var snapPts=this.extractTargetCoordinates(this._srcGeom);var snapTrans=new SnapTransformer(snapTolerance,snapPts,true);var snappedGeom=snapTrans.transform(this._srcGeom);var result=snappedGeom;if(cleanResult&&hasInterface(result,Polygonal)){result=snappedGeom.buffer(0);}return result;};GeometrySnapper.prototype.computeSnapTolerance=function computeSnapTolerance(ringPts){var minSegLen=this.computeMinimumSegmentLength(ringPts);var snapTol=minSegLen/10;return snapTol;};GeometrySnapper.prototype.extractTargetCoordinates=function extractTargetCoordinates(g){var ptSet=new TreeSet();var pts=g.getCoordinates();for(var i=0;i<pts.length;i++){ptSet.add(pts[i]);}return ptSet.toArray(new Array(0).fill(null));};GeometrySnapper.prototype.computeMinimumSegmentLength=function computeMinimumSegmentLength(pts){var minSegLen=Double.MAX_VALUE;for(var i=0;i<pts.length-1;i++){var segLen=pts[i].distance(pts[i+1]);if(segLen<minSegLen){minSegLen=segLen;}}return minSegLen;};GeometrySnapper.prototype.interfaces_=function interfaces_(){return [];};GeometrySnapper.prototype.getClass=function getClass(){return GeometrySnapper;};GeometrySnapper.snap=function snap(g0,g1,snapTolerance){var snapGeom=new Array(2).fill(null);var snapper0=new GeometrySnapper(g0);snapGeom[0]=snapper0.snapTo(g1,snapTolerance);var snapper1=new GeometrySnapper(g1);snapGeom[1]=snapper1.snapTo(snapGeom[0],snapTolerance);return snapGeom;};GeometrySnapper.computeOverlaySnapTolerance=function computeOverlaySnapTolerance(){if(arguments.length===1){var g=arguments[0];var snapTolerance=GeometrySnapper.computeSizeBasedSnapTolerance(g);var pm=g.getPrecisionModel();if(pm.getType()===PrecisionModel.FIXED){var fixedSnapTol=1/pm.getScale()*2/1.415;if(fixedSnapTol>snapTolerance){snapTolerance=fixedSnapTol;}}return snapTolerance;}else if(arguments.length===2){var g0=arguments[0];var g1=arguments[1];return Math.min(GeometrySnapper.computeOverlaySnapTolerance(g0),GeometrySnapper.computeOverlaySnapTolerance(g1));}};GeometrySnapper.computeSizeBasedSnapTolerance=function computeSizeBasedSnapTolerance(g){var env=g.getEnvelopeInternal();var minDimension=Math.min(env.getHeight(),env.getWidth());var snapTol=minDimension*GeometrySnapper.SNAP_PRECISION_FACTOR;return snapTol;};GeometrySnapper.snapToSelf=function snapToSelf(geom,snapTolerance,cleanResult){var snapper0=new GeometrySnapper(geom);return snapper0.snapToSelf(snapTolerance,cleanResult);};staticAccessors$41.SNAP_PRECISION_FACTOR.get=function(){return 1e-9;};Object.defineProperties(GeometrySnapper,staticAccessors$41);var SnapTransformer=function(GeometryTransformer$$1){function SnapTransformer(snapTolerance,snapPts,isSelfSnap){GeometryTransformer$$1.call(this);this._snapTolerance=snapTolerance||null;this._snapPts=snapPts||null;this._isSelfSnap=isSelfSnap!==undefined?isSelfSnap:false;}if(GeometryTransformer$$1)SnapTransformer.__proto__=GeometryTransformer$$1;SnapTransformer.prototype=Object.create(GeometryTransformer$$1&&GeometryTransformer$$1.prototype);SnapTransformer.prototype.constructor=SnapTransformer;SnapTransformer.prototype.snapLine=function snapLine(srcPts,snapPts){var snapper=new LineStringSnapper(srcPts,this._snapTolerance);snapper.setAllowSnappingToSourceVertices(this._isSelfSnap);return snapper.snapTo(snapPts);};SnapTransformer.prototype.transformCoordinates=function transformCoordinates(coords,parent){var srcPts=coords.toCoordinateArray();var newPts=this.snapLine(srcPts,this._snapPts);return this._factory.getCoordinateSequenceFactory().create(newPts);};SnapTransformer.prototype.interfaces_=function interfaces_(){return [];};SnapTransformer.prototype.getClass=function getClass(){return SnapTransformer;};return SnapTransformer;}(GeometryTransformer);var CommonBits=function CommonBits(){this._isFirst=true;this._commonMantissaBitsCount=53;this._commonBits=0;this._commonSignExp=null;};CommonBits.prototype.getCommon=function getCommon(){return Double.longBitsToDouble(this._commonBits);};CommonBits.prototype.add=function add(num){var numBits=Double.doubleToLongBits(num);if(this._isFirst){this._commonBits=numBits;this._commonSignExp=CommonBits.signExpBits(this._commonBits);this._isFirst=false;return null;}var numSignExp=CommonBits.signExpBits(numBits);if(numSignExp!==this._commonSignExp){this._commonBits=0;return null;}this._commonMantissaBitsCount=CommonBits.numCommonMostSigMantissaBits(this._commonBits,numBits);this._commonBits=CommonBits.zeroLowerBits(this._commonBits,64-(12+this._commonMantissaBitsCount));};CommonBits.prototype.toString=function toString(){if(arguments.length===1){var bits=arguments[0];var x=Double.longBitsToDouble(bits);var numStr=Double.toBinaryString(bits);var padStr='0000000000000000000000000000000000000000000000000000000000000000'+numStr;var bitStr=padStr.substring(padStr.length-64);var str=bitStr.substring(0,1)+'  '+bitStr.substring(1,12)+'(exp) '+bitStr.substring(12)+' [ '+x+' ]';return str;}};CommonBits.prototype.interfaces_=function interfaces_(){return [];};CommonBits.prototype.getClass=function getClass(){return CommonBits;};CommonBits.getBit=function getBit(bits,i){var mask=1<<i;return (bits&mask)!==0?1:0;};CommonBits.signExpBits=function signExpBits(num){return num>>52;};CommonBits.zeroLowerBits=function zeroLowerBits(bits,nBits){var invMask=(1<<nBits)-1;var mask=~invMask;var zeroed=bits&mask;return zeroed;};CommonBits.numCommonMostSigMantissaBits=function numCommonMostSigMantissaBits(num1,num2){var count=0;for(var i=52;i>=0;i--){if(CommonBits.getBit(num1,i)!==CommonBits.getBit(num2,i)){return count;}count++;}return 52;};var CommonBitsRemover=function CommonBitsRemover(){this._commonCoord=null;this._ccFilter=new CommonCoordinateFilter();};var staticAccessors$42={CommonCoordinateFilter:{configurable:true},Translater:{configurable:true}};CommonBitsRemover.prototype.addCommonBits=function addCommonBits(geom){var trans=new Translater(this._commonCoord);geom.apply(trans);geom.geometryChanged();};CommonBitsRemover.prototype.removeCommonBits=function removeCommonBits(geom){if(this._commonCoord.x===0.0&&this._commonCoord.y===0.0){return geom;}var invCoord=new Coordinate(this._commonCoord);invCoord.x=-invCoord.x;invCoord.y=-invCoord.y;var trans=new Translater(invCoord);geom.apply(trans);geom.geometryChanged();return geom;};CommonBitsRemover.prototype.getCommonCoordinate=function getCommonCoordinate(){return this._commonCoord;};CommonBitsRemover.prototype.add=function add(geom){geom.apply(this._ccFilter);this._commonCoord=this._ccFilter.getCommonCoordinate();};CommonBitsRemover.prototype.interfaces_=function interfaces_(){return [];};CommonBitsRemover.prototype.getClass=function getClass(){return CommonBitsRemover;};staticAccessors$42.CommonCoordinateFilter.get=function(){return CommonCoordinateFilter;};staticAccessors$42.Translater.get=function(){return Translater;};Object.defineProperties(CommonBitsRemover,staticAccessors$42);var CommonCoordinateFilter=function CommonCoordinateFilter(){this._commonBitsX=new CommonBits();this._commonBitsY=new CommonBits();};CommonCoordinateFilter.prototype.filter=function filter(coord){this._commonBitsX.add(coord.x);this._commonBitsY.add(coord.y);};CommonCoordinateFilter.prototype.getCommonCoordinate=function getCommonCoordinate(){return new Coordinate(this._commonBitsX.getCommon(),this._commonBitsY.getCommon());};CommonCoordinateFilter.prototype.interfaces_=function interfaces_(){return [CoordinateFilter];};CommonCoordinateFilter.prototype.getClass=function getClass(){return CommonCoordinateFilter;};var Translater=function Translater(){this.trans=null;var trans=arguments[0];this.trans=trans;};Translater.prototype.filter=function filter(seq,i){var xp=seq.getOrdinate(i,0)+this.trans.x;var yp=seq.getOrdinate(i,1)+this.trans.y;seq.setOrdinate(i,0,xp);seq.setOrdinate(i,1,yp);};Translater.prototype.isDone=function isDone(){return false;};Translater.prototype.isGeometryChanged=function isGeometryChanged(){return true;};Translater.prototype.interfaces_=function interfaces_(){return [CoordinateSequenceFilter];};Translater.prototype.getClass=function getClass(){return Translater;};var SnapOverlayOp=function SnapOverlayOp(g1,g2){this._geom=new Array(2).fill(null);this._snapTolerance=null;this._cbr=null;this._geom[0]=g1;this._geom[1]=g2;this.computeSnapTolerance();};SnapOverlayOp.prototype.selfSnap=function selfSnap(geom){var snapper0=new GeometrySnapper(geom);var snapGeom=snapper0.snapTo(geom,this._snapTolerance);return snapGeom;};SnapOverlayOp.prototype.removeCommonBits=function removeCommonBits(geom){this._cbr=new CommonBitsRemover();this._cbr.add(geom[0]);this._cbr.add(geom[1]);var remGeom=new Array(2).fill(null);remGeom[0]=this._cbr.removeCommonBits(geom[0].copy());remGeom[1]=this._cbr.removeCommonBits(geom[1].copy());return remGeom;};SnapOverlayOp.prototype.prepareResult=function prepareResult(geom){this._cbr.addCommonBits(geom);return geom;};SnapOverlayOp.prototype.getResultGeometry=function getResultGeometry(opCode){var prepGeom=this.snap(this._geom);var result=OverlayOp.overlayOp(prepGeom[0],prepGeom[1],opCode);return this.prepareResult(result);};SnapOverlayOp.prototype.checkValid=function checkValid(g){if(!g.isValid()){System.out.println('Snapped geometry is invalid');}};SnapOverlayOp.prototype.computeSnapTolerance=function computeSnapTolerance(){this._snapTolerance=GeometrySnapper.computeOverlaySnapTolerance(this._geom[0],this._geom[1]);};SnapOverlayOp.prototype.snap=function snap(geom){var remGeom=this.removeCommonBits(geom);var snapGeom=GeometrySnapper.snap(remGeom[0],remGeom[1],this._snapTolerance);return snapGeom;};SnapOverlayOp.prototype.interfaces_=function interfaces_(){return [];};SnapOverlayOp.prototype.getClass=function getClass(){return SnapOverlayOp;};SnapOverlayOp.overlayOp=function overlayOp(g0,g1,opCode){var op=new SnapOverlayOp(g0,g1);return op.getResultGeometry(opCode);};SnapOverlayOp.union=function union(g0,g1){return SnapOverlayOp.overlayOp(g0,g1,OverlayOp.UNION);};SnapOverlayOp.intersection=function intersection(g0,g1){return SnapOverlayOp.overlayOp(g0,g1,OverlayOp.INTERSECTION);};SnapOverlayOp.symDifference=function symDifference(g0,g1){return SnapOverlayOp.overlayOp(g0,g1,OverlayOp.SYMDIFFERENCE);};SnapOverlayOp.difference=function difference(g0,g1){return SnapOverlayOp.overlayOp(g0,g1,OverlayOp.DIFFERENCE);};var SnapIfNeededOverlayOp=function SnapIfNeededOverlayOp(g1,g2){this._geom=new Array(2).fill(null);this._geom[0]=g1;this._geom[1]=g2;};SnapIfNeededOverlayOp.prototype.getResultGeometry=function getResultGeometry(opCode){var result=null;var isSuccess=false;var savedException=null;try{result=OverlayOp.overlayOp(this._geom[0],this._geom[1],opCode);var isValid=true;if(isValid){isSuccess=true;}}catch(ex){if(ex instanceof RuntimeException){savedException=ex;}else {throw ex;}}finally{}if(!isSuccess){try{result=SnapOverlayOp.overlayOp(this._geom[0],this._geom[1],opCode);}catch(ex){if(ex instanceof RuntimeException){throw savedException;}else {throw ex;}}finally{}}return result;};SnapIfNeededOverlayOp.prototype.interfaces_=function interfaces_(){return [];};SnapIfNeededOverlayOp.prototype.getClass=function getClass(){return SnapIfNeededOverlayOp;};SnapIfNeededOverlayOp.overlayOp=function overlayOp(g0,g1,opCode){var op=new SnapIfNeededOverlayOp(g0,g1);return op.getResultGeometry(opCode);};SnapIfNeededOverlayOp.union=function union(g0,g1){return SnapIfNeededOverlayOp.overlayOp(g0,g1,OverlayOp.UNION);};SnapIfNeededOverlayOp.intersection=function intersection(g0,g1){return SnapIfNeededOverlayOp.overlayOp(g0,g1,OverlayOp.INTERSECTION);};SnapIfNeededOverlayOp.symDifference=function symDifference(g0,g1){return SnapIfNeededOverlayOp.overlayOp(g0,g1,OverlayOp.SYMDIFFERENCE);};SnapIfNeededOverlayOp.difference=function difference(g0,g1){return SnapIfNeededOverlayOp.overlayOp(g0,g1,OverlayOp.DIFFERENCE);};var MonotoneChain$2=function MonotoneChain(){this.mce=null;this.chainIndex=null;var mce=arguments[0];var chainIndex=arguments[1];this.mce=mce;this.chainIndex=chainIndex;};MonotoneChain$2.prototype.computeIntersections=function computeIntersections(mc,si){this.mce.computeIntersectsForChain(this.chainIndex,mc.mce,mc.chainIndex,si);};MonotoneChain$2.prototype.interfaces_=function interfaces_(){return [];};MonotoneChain$2.prototype.getClass=function getClass(){return MonotoneChain$2;};var SweepLineEvent=function SweepLineEvent(){this._label=null;this._xValue=null;this._eventType=null;this._insertEvent=null;this._deleteEventIndex=null;this._obj=null;if(arguments.length===2){var x=arguments[0];var insertEvent=arguments[1];this._eventType=SweepLineEvent.DELETE;this._xValue=x;this._insertEvent=insertEvent;}else if(arguments.length===3){var label=arguments[0];var x$1=arguments[1];var obj=arguments[2];this._eventType=SweepLineEvent.INSERT;this._label=label;this._xValue=x$1;this._obj=obj;}};var staticAccessors$43={INSERT:{configurable:true},DELETE:{configurable:true}};SweepLineEvent.prototype.isDelete=function isDelete(){return this._eventType===SweepLineEvent.DELETE;};SweepLineEvent.prototype.setDeleteEventIndex=function setDeleteEventIndex(deleteEventIndex){this._deleteEventIndex=deleteEventIndex;};SweepLineEvent.prototype.getObject=function getObject(){return this._obj;};SweepLineEvent.prototype.compareTo=function compareTo(o){var pe=o;if(this._xValue<pe._xValue){return -1;}if(this._xValue>pe._xValue){return 1;}if(this._eventType<pe._eventType){return -1;}if(this._eventType>pe._eventType){return 1;}return 0;};SweepLineEvent.prototype.getInsertEvent=function getInsertEvent(){return this._insertEvent;};SweepLineEvent.prototype.isInsert=function isInsert(){return this._eventType===SweepLineEvent.INSERT;};SweepLineEvent.prototype.isSameLabel=function isSameLabel(ev){if(this._label===null){return false;}return this._label===ev._label;};SweepLineEvent.prototype.getDeleteEventIndex=function getDeleteEventIndex(){return this._deleteEventIndex;};SweepLineEvent.prototype.interfaces_=function interfaces_(){return [Comparable];};SweepLineEvent.prototype.getClass=function getClass(){return SweepLineEvent;};staticAccessors$43.INSERT.get=function(){return 1;};staticAccessors$43.DELETE.get=function(){return 2;};Object.defineProperties(SweepLineEvent,staticAccessors$43);var EdgeSetIntersector=function EdgeSetIntersector(){};EdgeSetIntersector.prototype.interfaces_=function interfaces_(){return [];};EdgeSetIntersector.prototype.getClass=function getClass(){return EdgeSetIntersector;};var SegmentIntersector$2=function SegmentIntersector(){this._hasIntersection=false;this._hasProper=false;this._hasProperInterior=false;this._properIntersectionPoint=null;this._li=null;this._includeProper=null;this._recordIsolated=null;this._isSelfIntersection=null;this._numIntersections=0;this.numTests=0;this._bdyNodes=null;this._isDone=false;this._isDoneWhenProperInt=false;var li=arguments[0];var includeProper=arguments[1];var recordIsolated=arguments[2];this._li=li;this._includeProper=includeProper;this._recordIsolated=recordIsolated;};SegmentIntersector$2.prototype.isTrivialIntersection=function isTrivialIntersection(e0,segIndex0,e1,segIndex1){if(e0===e1){if(this._li.getIntersectionNum()===1){if(SegmentIntersector$2.isAdjacentSegments(segIndex0,segIndex1)){return true;}if(e0.isClosed()){var maxSegIndex=e0.getNumPoints()-1;if(segIndex0===0&&segIndex1===maxSegIndex||segIndex1===0&&segIndex0===maxSegIndex){return true;}}}}return false;};SegmentIntersector$2.prototype.getProperIntersectionPoint=function getProperIntersectionPoint(){return this._properIntersectionPoint;};SegmentIntersector$2.prototype.setIsDoneIfProperInt=function setIsDoneIfProperInt(isDoneWhenProperInt){this._isDoneWhenProperInt=isDoneWhenProperInt;};SegmentIntersector$2.prototype.hasProperInteriorIntersection=function hasProperInteriorIntersection(){return this._hasProperInterior;};SegmentIntersector$2.prototype.isBoundaryPointInternal=function isBoundaryPointInternal(li,bdyNodes){for(var i=bdyNodes.iterator();i.hasNext();){var node=i.next();var pt=node.getCoordinate();if(li.isIntersection(pt)){return true;}}return false;};SegmentIntersector$2.prototype.hasProperIntersection=function hasProperIntersection(){return this._hasProper;};SegmentIntersector$2.prototype.hasIntersection=function hasIntersection(){return this._hasIntersection;};SegmentIntersector$2.prototype.isDone=function isDone(){return this._isDone;};SegmentIntersector$2.prototype.isBoundaryPoint=function isBoundaryPoint(li,bdyNodes){if(bdyNodes===null){return false;}if(this.isBoundaryPointInternal(li,bdyNodes[0])){return true;}if(this.isBoundaryPointInternal(li,bdyNodes[1])){return true;}return false;};SegmentIntersector$2.prototype.setBoundaryNodes=function setBoundaryNodes(bdyNodes0,bdyNodes1){this._bdyNodes=new Array(2).fill(null);this._bdyNodes[0]=bdyNodes0;this._bdyNodes[1]=bdyNodes1;};SegmentIntersector$2.prototype.addIntersections=function addIntersections(e0,segIndex0,e1,segIndex1){if(e0===e1&&segIndex0===segIndex1){return null;}this.numTests++;var p00=e0.getCoordinates()[segIndex0];var p01=e0.getCoordinates()[segIndex0+1];var p10=e1.getCoordinates()[segIndex1];var p11=e1.getCoordinates()[segIndex1+1];this._li.computeIntersection(p00,p01,p10,p11);if(this._li.hasIntersection()){if(this._recordIsolated){e0.setIsolated(false);e1.setIsolated(false);}this._numIntersections++;if(!this.isTrivialIntersection(e0,segIndex0,e1,segIndex1)){this._hasIntersection=true;if(this._includeProper||!this._li.isProper()){e0.addIntersections(this._li,segIndex0,0);e1.addIntersections(this._li,segIndex1,1);}if(this._li.isProper()){this._properIntersectionPoint=this._li.getIntersection(0).copy();this._hasProper=true;if(this._isDoneWhenProperInt){this._isDone=true;}if(!this.isBoundaryPoint(this._li,this._bdyNodes)){this._hasProperInterior=true;}}}}};SegmentIntersector$2.prototype.interfaces_=function interfaces_(){return [];};SegmentIntersector$2.prototype.getClass=function getClass(){return SegmentIntersector$2;};SegmentIntersector$2.isAdjacentSegments=function isAdjacentSegments(i1,i2){return Math.abs(i1-i2)===1;};var SimpleMCSweepLineIntersector=function(EdgeSetIntersector$$1){function SimpleMCSweepLineIntersector(){EdgeSetIntersector$$1.call(this);this.events=new ArrayList();this.nOverlaps=null;}if(EdgeSetIntersector$$1)SimpleMCSweepLineIntersector.__proto__=EdgeSetIntersector$$1;SimpleMCSweepLineIntersector.prototype=Object.create(EdgeSetIntersector$$1&&EdgeSetIntersector$$1.prototype);SimpleMCSweepLineIntersector.prototype.constructor=SimpleMCSweepLineIntersector;SimpleMCSweepLineIntersector.prototype.prepareEvents=function prepareEvents(){var this$1=this;Collections.sort(this.events);for(var i=0;i<this.events.size();i++){var ev=this$1.events.get(i);if(ev.isDelete()){ev.getInsertEvent().setDeleteEventIndex(i);}}};SimpleMCSweepLineIntersector.prototype.computeIntersections=function computeIntersections(){var this$1=this;if(arguments.length===1){var si=arguments[0];this.nOverlaps=0;this.prepareEvents();for(var i=0;i<this.events.size();i++){var ev=this$1.events.get(i);if(ev.isInsert()){this$1.processOverlaps(i,ev.getDeleteEventIndex(),ev,si);}if(si.isDone()){break;}}}else if(arguments.length===3){if(arguments[2]instanceof SegmentIntersector$2&&hasInterface(arguments[0],List)&&hasInterface(arguments[1],List)){var edges0=arguments[0];var edges1=arguments[1];var si$1=arguments[2];this.addEdges(edges0,edges0);this.addEdges(edges1,edges1);this.computeIntersections(si$1);}else if(typeof arguments[2]==='boolean'&&hasInterface(arguments[0],List)&&arguments[1]instanceof SegmentIntersector$2){var edges=arguments[0];var si$2=arguments[1];var testAllSegments=arguments[2];if(testAllSegments){this.addEdges(edges,null);}else {this.addEdges(edges);}this.computeIntersections(si$2);}}};SimpleMCSweepLineIntersector.prototype.addEdge=function addEdge(edge,edgeSet){var this$1=this;var mce=edge.getMonotoneChainEdge();var startIndex=mce.getStartIndexes();for(var i=0;i<startIndex.length-1;i++){var mc=new MonotoneChain$2(mce,i);var insertEvent=new SweepLineEvent(edgeSet,mce.getMinX(i),mc);this$1.events.add(insertEvent);this$1.events.add(new SweepLineEvent(mce.getMaxX(i),insertEvent));}};SimpleMCSweepLineIntersector.prototype.processOverlaps=function processOverlaps(start,end,ev0,si){var this$1=this;var mc0=ev0.getObject();for(var i=start;i<end;i++){var ev1=this$1.events.get(i);if(ev1.isInsert()){var mc1=ev1.getObject();if(!ev0.isSameLabel(ev1)){mc0.computeIntersections(mc1,si);this$1.nOverlaps++;}}}};SimpleMCSweepLineIntersector.prototype.addEdges=function addEdges(){var this$1=this;if(arguments.length===1){var edges=arguments[0];for(var i=edges.iterator();i.hasNext();){var edge=i.next();this$1.addEdge(edge,edge);}}else if(arguments.length===2){var edges$1=arguments[0];var edgeSet=arguments[1];for(var i$1=edges$1.iterator();i$1.hasNext();){var edge$1=i$1.next();this$1.addEdge(edge$1,edgeSet);}}};SimpleMCSweepLineIntersector.prototype.interfaces_=function interfaces_(){return [];};SimpleMCSweepLineIntersector.prototype.getClass=function getClass(){return SimpleMCSweepLineIntersector;};return SimpleMCSweepLineIntersector;}(EdgeSetIntersector);var IntervalRTreeNode=function IntervalRTreeNode(){this._min=Double.POSITIVE_INFINITY;this._max=Double.NEGATIVE_INFINITY;};var staticAccessors$45={NodeComparator:{configurable:true}};IntervalRTreeNode.prototype.getMin=function getMin(){return this._min;};IntervalRTreeNode.prototype.intersects=function intersects(queryMin,queryMax){if(this._min>queryMax||this._max<queryMin){return false;}return true;};IntervalRTreeNode.prototype.getMax=function getMax(){return this._max;};IntervalRTreeNode.prototype.toString=function toString(){return WKTWriter.toLineString(new Coordinate(this._min,0),new Coordinate(this._max,0));};IntervalRTreeNode.prototype.interfaces_=function interfaces_(){return [];};IntervalRTreeNode.prototype.getClass=function getClass(){return IntervalRTreeNode;};staticAccessors$45.NodeComparator.get=function(){return NodeComparator;};Object.defineProperties(IntervalRTreeNode,staticAccessors$45);var NodeComparator=function NodeComparator(){};NodeComparator.prototype.compare=function compare(o1,o2){var n1=o1;var n2=o2;var mid1=(n1._min+n1._max)/2;var mid2=(n2._min+n2._max)/2;if(mid1<mid2){return -1;}if(mid1>mid2){return 1;}return 0;};NodeComparator.prototype.interfaces_=function interfaces_(){return [Comparator];};NodeComparator.prototype.getClass=function getClass(){return NodeComparator;};var IntervalRTreeLeafNode=function(IntervalRTreeNode$$1){function IntervalRTreeLeafNode(){IntervalRTreeNode$$1.call(this);this._item=null;var min=arguments[0];var max=arguments[1];var item=arguments[2];this._min=min;this._max=max;this._item=item;}if(IntervalRTreeNode$$1)IntervalRTreeLeafNode.__proto__=IntervalRTreeNode$$1;IntervalRTreeLeafNode.prototype=Object.create(IntervalRTreeNode$$1&&IntervalRTreeNode$$1.prototype);IntervalRTreeLeafNode.prototype.constructor=IntervalRTreeLeafNode;IntervalRTreeLeafNode.prototype.query=function query(queryMin,queryMax,visitor){if(!this.intersects(queryMin,queryMax)){return null;}visitor.visitItem(this._item);};IntervalRTreeLeafNode.prototype.interfaces_=function interfaces_(){return [];};IntervalRTreeLeafNode.prototype.getClass=function getClass(){return IntervalRTreeLeafNode;};return IntervalRTreeLeafNode;}(IntervalRTreeNode);var IntervalRTreeBranchNode=function(IntervalRTreeNode$$1){function IntervalRTreeBranchNode(){IntervalRTreeNode$$1.call(this);this._node1=null;this._node2=null;var n1=arguments[0];var n2=arguments[1];this._node1=n1;this._node2=n2;this.buildExtent(this._node1,this._node2);}if(IntervalRTreeNode$$1)IntervalRTreeBranchNode.__proto__=IntervalRTreeNode$$1;IntervalRTreeBranchNode.prototype=Object.create(IntervalRTreeNode$$1&&IntervalRTreeNode$$1.prototype);IntervalRTreeBranchNode.prototype.constructor=IntervalRTreeBranchNode;IntervalRTreeBranchNode.prototype.buildExtent=function buildExtent(n1,n2){this._min=Math.min(n1._min,n2._min);this._max=Math.max(n1._max,n2._max);};IntervalRTreeBranchNode.prototype.query=function query(queryMin,queryMax,visitor){if(!this.intersects(queryMin,queryMax)){return null;}if(this._node1!==null){this._node1.query(queryMin,queryMax,visitor);}if(this._node2!==null){this._node2.query(queryMin,queryMax,visitor);}};IntervalRTreeBranchNode.prototype.interfaces_=function interfaces_(){return [];};IntervalRTreeBranchNode.prototype.getClass=function getClass(){return IntervalRTreeBranchNode;};return IntervalRTreeBranchNode;}(IntervalRTreeNode);var SortedPackedIntervalRTree=function SortedPackedIntervalRTree(){this._leaves=new ArrayList();this._root=null;this._level=0;};SortedPackedIntervalRTree.prototype.buildTree=function buildTree(){var this$1=this;Collections.sort(this._leaves,new IntervalRTreeNode.NodeComparator());var src=this._leaves;var temp=null;var dest=new ArrayList();while(true){this$1.buildLevel(src,dest);if(dest.size()===1){return dest.get(0);}temp=src;src=dest;dest=temp;}};SortedPackedIntervalRTree.prototype.insert=function insert(min,max,item){if(this._root!==null){throw new Error('Index cannot be added to once it has been queried');}this._leaves.add(new IntervalRTreeLeafNode(min,max,item));};SortedPackedIntervalRTree.prototype.query=function query(min,max,visitor){this.init();this._root.query(min,max,visitor);};SortedPackedIntervalRTree.prototype.buildRoot=function buildRoot(){if(this._root!==null){return null;}this._root=this.buildTree();};SortedPackedIntervalRTree.prototype.printNode=function printNode(node){System.out.println(WKTWriter.toLineString(new Coordinate(node._min,this._level),new Coordinate(node._max,this._level)));};SortedPackedIntervalRTree.prototype.init=function init(){if(this._root!==null){return null;}this.buildRoot();};SortedPackedIntervalRTree.prototype.buildLevel=function buildLevel(src,dest){this._level++;dest.clear();for(var i=0;i<src.size();i+=2){var n1=src.get(i);var n2=i+1<src.size()?src.get(i):null;if(n2===null){dest.add(n1);}else {var node=new IntervalRTreeBranchNode(src.get(i),src.get(i+1));dest.add(node);}}};SortedPackedIntervalRTree.prototype.interfaces_=function interfaces_(){return [];};SortedPackedIntervalRTree.prototype.getClass=function getClass(){return SortedPackedIntervalRTree;};var ArrayListVisitor=function ArrayListVisitor(){this._items=new ArrayList();};ArrayListVisitor.prototype.visitItem=function visitItem(item){this._items.add(item);};ArrayListVisitor.prototype.getItems=function getItems(){return this._items;};ArrayListVisitor.prototype.interfaces_=function interfaces_(){return [ItemVisitor];};ArrayListVisitor.prototype.getClass=function getClass(){return ArrayListVisitor;};var IndexedPointInAreaLocator=function IndexedPointInAreaLocator(){this._index=null;var g=arguments[0];if(!hasInterface(g,Polygonal)){throw new IllegalArgumentException('Argument must be Polygonal');}this._index=new IntervalIndexedGeometry(g);};var staticAccessors$44={SegmentVisitor:{configurable:true},IntervalIndexedGeometry:{configurable:true}};IndexedPointInAreaLocator.prototype.locate=function locate(p){var rcc=new RayCrossingCounter(p);var visitor=new SegmentVisitor(rcc);this._index.query(p.y,p.y,visitor);return rcc.getLocation();};IndexedPointInAreaLocator.prototype.interfaces_=function interfaces_(){return [PointOnGeometryLocator];};IndexedPointInAreaLocator.prototype.getClass=function getClass(){return IndexedPointInAreaLocator;};staticAccessors$44.SegmentVisitor.get=function(){return SegmentVisitor;};staticAccessors$44.IntervalIndexedGeometry.get=function(){return IntervalIndexedGeometry;};Object.defineProperties(IndexedPointInAreaLocator,staticAccessors$44);var SegmentVisitor=function SegmentVisitor(){this._counter=null;var counter=arguments[0];this._counter=counter;};SegmentVisitor.prototype.visitItem=function visitItem(item){var seg=item;this._counter.countSegment(seg.getCoordinate(0),seg.getCoordinate(1));};SegmentVisitor.prototype.interfaces_=function interfaces_(){return [ItemVisitor];};SegmentVisitor.prototype.getClass=function getClass(){return SegmentVisitor;};var IntervalIndexedGeometry=function IntervalIndexedGeometry(){this._index=new SortedPackedIntervalRTree();var geom=arguments[0];this.init(geom);};IntervalIndexedGeometry.prototype.init=function init(geom){var this$1=this;var lines=LinearComponentExtracter.getLines(geom);for(var i=lines.iterator();i.hasNext();){var line=i.next();var pts=line.getCoordinates();this$1.addLine(pts);}};IntervalIndexedGeometry.prototype.addLine=function addLine(pts){var this$1=this;for(var i=1;i<pts.length;i++){var seg=new LineSegment(pts[i-1],pts[i]);var min=Math.min(seg.p0.y,seg.p1.y);var max=Math.max(seg.p0.y,seg.p1.y);this$1._index.insert(min,max,seg);}};IntervalIndexedGeometry.prototype.query=function query(){if(arguments.length===2){var min=arguments[0];var max=arguments[1];var visitor=new ArrayListVisitor();this._index.query(min,max,visitor);return visitor.getItems();}else if(arguments.length===3){var min$1=arguments[0];var max$1=arguments[1];var visitor$1=arguments[2];this._index.query(min$1,max$1,visitor$1);}};IntervalIndexedGeometry.prototype.interfaces_=function interfaces_(){return [];};IntervalIndexedGeometry.prototype.getClass=function getClass(){return IntervalIndexedGeometry;};var GeometryGraph=function(PlanarGraph$$1){function GeometryGraph(){PlanarGraph$$1.call(this);this._parentGeom=null;this._lineEdgeMap=new HashMap();this._boundaryNodeRule=null;this._useBoundaryDeterminationRule=true;this._argIndex=null;this._boundaryNodes=null;this._hasTooFewPoints=false;this._invalidPoint=null;this._areaPtLocator=null;this._ptLocator=new PointLocator();if(arguments.length===2){var argIndex=arguments[0];var parentGeom=arguments[1];var boundaryNodeRule=BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE;this._argIndex=argIndex;this._parentGeom=parentGeom;this._boundaryNodeRule=boundaryNodeRule;if(parentGeom!==null){this.add(parentGeom);}}else if(arguments.length===3){var argIndex$1=arguments[0];var parentGeom$1=arguments[1];var boundaryNodeRule$1=arguments[2];this._argIndex=argIndex$1;this._parentGeom=parentGeom$1;this._boundaryNodeRule=boundaryNodeRule$1;if(parentGeom$1!==null){this.add(parentGeom$1);}}}if(PlanarGraph$$1)GeometryGraph.__proto__=PlanarGraph$$1;GeometryGraph.prototype=Object.create(PlanarGraph$$1&&PlanarGraph$$1.prototype);GeometryGraph.prototype.constructor=GeometryGraph;GeometryGraph.prototype.insertBoundaryPoint=function insertBoundaryPoint(argIndex,coord){var n=this._nodes.addNode(coord);var lbl=n.getLabel();var boundaryCount=1;var loc=Location.NONE;loc=lbl.getLocation(argIndex,Position.ON);if(loc===Location.BOUNDARY){boundaryCount++;}var newLoc=GeometryGraph.determineBoundary(this._boundaryNodeRule,boundaryCount);lbl.setLocation(argIndex,newLoc);};GeometryGraph.prototype.computeSelfNodes=function computeSelfNodes(){if(arguments.length===2){var li=arguments[0];var computeRingSelfNodes=arguments[1];return this.computeSelfNodes(li,computeRingSelfNodes,false);}else if(arguments.length===3){var li$1=arguments[0];var computeRingSelfNodes$1=arguments[1];var isDoneIfProperInt=arguments[2];var si=new SegmentIntersector$2(li$1,true,false);si.setIsDoneIfProperInt(isDoneIfProperInt);var esi=this.createEdgeSetIntersector();var isRings=this._parentGeom instanceof LinearRing||this._parentGeom instanceof Polygon||this._parentGeom instanceof MultiPolygon;var computeAllSegments=computeRingSelfNodes$1||!isRings;esi.computeIntersections(this._edges,si,computeAllSegments);this.addSelfIntersectionNodes(this._argIndex);return si;}};GeometryGraph.prototype.computeSplitEdges=function computeSplitEdges(edgelist){for(var i=this._edges.iterator();i.hasNext();){var e=i.next();e.eiList.addSplitEdges(edgelist);}};GeometryGraph.prototype.computeEdgeIntersections=function computeEdgeIntersections(g,li,includeProper){var si=new SegmentIntersector$2(li,includeProper,true);si.setBoundaryNodes(this.getBoundaryNodes(),g.getBoundaryNodes());var esi=this.createEdgeSetIntersector();esi.computeIntersections(this._edges,g._edges,si);return si;};GeometryGraph.prototype.getGeometry=function getGeometry(){return this._parentGeom;};GeometryGraph.prototype.getBoundaryNodeRule=function getBoundaryNodeRule(){return this._boundaryNodeRule;};GeometryGraph.prototype.hasTooFewPoints=function hasTooFewPoints(){return this._hasTooFewPoints;};GeometryGraph.prototype.addPoint=function addPoint(){if(arguments[0]instanceof Point){var p=arguments[0];var coord=p.getCoordinate();this.insertPoint(this._argIndex,coord,Location.INTERIOR);}else if(arguments[0]instanceof Coordinate){var pt=arguments[0];this.insertPoint(this._argIndex,pt,Location.INTERIOR);}};GeometryGraph.prototype.addPolygon=function addPolygon(p){var this$1=this;this.addPolygonRing(p.getExteriorRing(),Location.EXTERIOR,Location.INTERIOR);for(var i=0;i<p.getNumInteriorRing();i++){var hole=p.getInteriorRingN(i);this$1.addPolygonRing(hole,Location.INTERIOR,Location.EXTERIOR);}};GeometryGraph.prototype.addEdge=function addEdge(e){this.insertEdge(e);var coord=e.getCoordinates();this.insertPoint(this._argIndex,coord[0],Location.BOUNDARY);this.insertPoint(this._argIndex,coord[coord.length-1],Location.BOUNDARY);};GeometryGraph.prototype.addLineString=function addLineString(line){var coord=CoordinateArrays.removeRepeatedPoints(line.getCoordinates());if(coord.length<2){this._hasTooFewPoints=true;this._invalidPoint=coord[0];return null;}var e=new Edge(coord,new Label(this._argIndex,Location.INTERIOR));this._lineEdgeMap.put(line,e);this.insertEdge(e);Assert.isTrue(coord.length>=2,'found LineString with single point');this.insertBoundaryPoint(this._argIndex,coord[0]);this.insertBoundaryPoint(this._argIndex,coord[coord.length-1]);};GeometryGraph.prototype.getInvalidPoint=function getInvalidPoint(){return this._invalidPoint;};GeometryGraph.prototype.getBoundaryPoints=function getBoundaryPoints(){var coll=this.getBoundaryNodes();var pts=new Array(coll.size()).fill(null);var i=0;for(var it=coll.iterator();it.hasNext();){var node=it.next();pts[i++]=node.getCoordinate().copy();}return pts;};GeometryGraph.prototype.getBoundaryNodes=function getBoundaryNodes(){if(this._boundaryNodes===null){this._boundaryNodes=this._nodes.getBoundaryNodes(this._argIndex);}return this._boundaryNodes;};GeometryGraph.prototype.addSelfIntersectionNode=function addSelfIntersectionNode(argIndex,coord,loc){if(this.isBoundaryNode(argIndex,coord)){return null;}if(loc===Location.BOUNDARY&&this._useBoundaryDeterminationRule){this.insertBoundaryPoint(argIndex,coord);}else {this.insertPoint(argIndex,coord,loc);}};GeometryGraph.prototype.addPolygonRing=function addPolygonRing(lr,cwLeft,cwRight){if(lr.isEmpty()){return null;}var coord=CoordinateArrays.removeRepeatedPoints(lr.getCoordinates());if(coord.length<4){this._hasTooFewPoints=true;this._invalidPoint=coord[0];return null;}var left=cwLeft;var right=cwRight;if(CGAlgorithms.isCCW(coord)){left=cwRight;right=cwLeft;}var e=new Edge(coord,new Label(this._argIndex,Location.BOUNDARY,left,right));this._lineEdgeMap.put(lr,e);this.insertEdge(e);this.insertPoint(this._argIndex,coord[0],Location.BOUNDARY);};GeometryGraph.prototype.insertPoint=function insertPoint(argIndex,coord,onLocation){var n=this._nodes.addNode(coord);var lbl=n.getLabel();if(lbl===null){n._label=new Label(argIndex,onLocation);}else {lbl.setLocation(argIndex,onLocation);}};GeometryGraph.prototype.createEdgeSetIntersector=function createEdgeSetIntersector(){return new SimpleMCSweepLineIntersector();};GeometryGraph.prototype.addSelfIntersectionNodes=function addSelfIntersectionNodes(argIndex){var this$1=this;for(var i=this._edges.iterator();i.hasNext();){var e=i.next();var eLoc=e.getLabel().getLocation(argIndex);for(var eiIt=e.eiList.iterator();eiIt.hasNext();){var ei=eiIt.next();this$1.addSelfIntersectionNode(argIndex,ei.coord,eLoc);}}};GeometryGraph.prototype.add=function add(){if(arguments.length===1){var g=arguments[0];if(g.isEmpty()){return null;}if(g instanceof MultiPolygon){this._useBoundaryDeterminationRule=false;}if(g instanceof Polygon){this.addPolygon(g);}else if(g instanceof LineString){this.addLineString(g);}else if(g instanceof Point){this.addPoint(g);}else if(g instanceof MultiPoint){this.addCollection(g);}else if(g instanceof MultiLineString){this.addCollection(g);}else if(g instanceof MultiPolygon){this.addCollection(g);}else if(g instanceof GeometryCollection){this.addCollection(g);}else {throw new Error(g.getClass().getName());}}else {return PlanarGraph$$1.prototype.add.apply(this,arguments);}};GeometryGraph.prototype.addCollection=function addCollection(gc){var this$1=this;for(var i=0;i<gc.getNumGeometries();i++){var g=gc.getGeometryN(i);this$1.add(g);}};GeometryGraph.prototype.locate=function locate(pt){if(hasInterface(this._parentGeom,Polygonal)&&this._parentGeom.getNumGeometries()>50){if(this._areaPtLocator===null){this._areaPtLocator=new IndexedPointInAreaLocator(this._parentGeom);}return this._areaPtLocator.locate(pt);}return this._ptLocator.locate(pt,this._parentGeom);};GeometryGraph.prototype.findEdge=function findEdge(){if(arguments.length===1){var line=arguments[0];return this._lineEdgeMap.get(line);}else {return PlanarGraph$$1.prototype.findEdge.apply(this,arguments);}};GeometryGraph.prototype.interfaces_=function interfaces_(){return [];};GeometryGraph.prototype.getClass=function getClass(){return GeometryGraph;};GeometryGraph.determineBoundary=function determineBoundary(boundaryNodeRule,boundaryCount){return boundaryNodeRule.isInBoundary(boundaryCount)?Location.BOUNDARY:Location.INTERIOR;};return GeometryGraph;}(PlanarGraph);var GeometryGraphOp=function GeometryGraphOp(){this._li=new RobustLineIntersector();this._resultPrecisionModel=null;this._arg=null;if(arguments.length===1){var g0=arguments[0];this.setComputationPrecision(g0.getPrecisionModel());this._arg=new Array(1).fill(null);this._arg[0]=new GeometryGraph(0,g0);}else if(arguments.length===2){var g0$1=arguments[0];var g1=arguments[1];var boundaryNodeRule=BoundaryNodeRule.OGC_SFS_BOUNDARY_RULE;if(g0$1.getPrecisionModel().compareTo(g1.getPrecisionModel())>=0){this.setComputationPrecision(g0$1.getPrecisionModel());}else {this.setComputationPrecision(g1.getPrecisionModel());}this._arg=new Array(2).fill(null);this._arg[0]=new GeometryGraph(0,g0$1,boundaryNodeRule);this._arg[1]=new GeometryGraph(1,g1,boundaryNodeRule);}else if(arguments.length===3){var g0$2=arguments[0];var g1$1=arguments[1];var boundaryNodeRule$1=arguments[2];if(g0$2.getPrecisionModel().compareTo(g1$1.getPrecisionModel())>=0){this.setComputationPrecision(g0$2.getPrecisionModel());}else {this.setComputationPrecision(g1$1.getPrecisionModel());}this._arg=new Array(2).fill(null);this._arg[0]=new GeometryGraph(0,g0$2,boundaryNodeRule$1);this._arg[1]=new GeometryGraph(1,g1$1,boundaryNodeRule$1);}};GeometryGraphOp.prototype.getArgGeometry=function getArgGeometry(i){return this._arg[i].getGeometry();};GeometryGraphOp.prototype.setComputationPrecision=function setComputationPrecision(pm){this._resultPrecisionModel=pm;this._li.setPrecisionModel(this._resultPrecisionModel);};GeometryGraphOp.prototype.interfaces_=function interfaces_(){return [];};GeometryGraphOp.prototype.getClass=function getClass(){return GeometryGraphOp;};// operation.geometrygraph
  var GeometryMapper=function GeometryMapper(){};GeometryMapper.prototype.interfaces_=function interfaces_(){return [];};GeometryMapper.prototype.getClass=function getClass(){return GeometryMapper;};GeometryMapper.map=function map(){if(arguments[0]instanceof Geometry&&hasInterface(arguments[1],GeometryMapper.MapOp)){var geom=arguments[0];var op=arguments[1];var mapped=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var g=op.map(geom.getGeometryN(i));if(g!==null){mapped.add(g);}}return geom.getFactory().buildGeometry(mapped);}else if(hasInterface(arguments[0],Collection)&&hasInterface(arguments[1],GeometryMapper.MapOp)){var geoms=arguments[0];var op$1=arguments[1];var mapped$1=new ArrayList();for(var i$1=geoms.iterator();i$1.hasNext();){var g$1=i$1.next();var gr=op$1.map(g$1);if(gr!==null){mapped$1.add(gr);}}return mapped$1;}};GeometryMapper.MapOp=function MapOp(){};var OverlayOp=function(GeometryGraphOp){function OverlayOp(){var g0=arguments[0];var g1=arguments[1];GeometryGraphOp.call(this,g0,g1);this._ptLocator=new PointLocator();this._geomFact=null;this._resultGeom=null;this._graph=null;this._edgeList=new EdgeList();this._resultPolyList=new ArrayList();this._resultLineList=new ArrayList();this._resultPointList=new ArrayList();this._graph=new PlanarGraph(new OverlayNodeFactory());this._geomFact=g0.getFactory();}if(GeometryGraphOp)OverlayOp.__proto__=GeometryGraphOp;OverlayOp.prototype=Object.create(GeometryGraphOp&&GeometryGraphOp.prototype);OverlayOp.prototype.constructor=OverlayOp;OverlayOp.prototype.insertUniqueEdge=function insertUniqueEdge(e){var existingEdge=this._edgeList.findEqualEdge(e);if(existingEdge!==null){var existingLabel=existingEdge.getLabel();var labelToMerge=e.getLabel();if(!existingEdge.isPointwiseEqual(e)){labelToMerge=new Label(e.getLabel());labelToMerge.flip();}var depth=existingEdge.getDepth();if(depth.isNull()){depth.add(existingLabel);}depth.add(labelToMerge);existingLabel.merge(labelToMerge);}else {this._edgeList.add(e);}};OverlayOp.prototype.getGraph=function getGraph(){return this._graph;};OverlayOp.prototype.cancelDuplicateResultEdges=function cancelDuplicateResultEdges(){for(var it=this._graph.getEdgeEnds().iterator();it.hasNext();){var de=it.next();var sym=de.getSym();if(de.isInResult()&&sym.isInResult()){de.setInResult(false);sym.setInResult(false);}}};OverlayOp.prototype.isCoveredByLA=function isCoveredByLA(coord){if(this.isCovered(coord,this._resultLineList)){return true;}if(this.isCovered(coord,this._resultPolyList)){return true;}return false;};OverlayOp.prototype.computeGeometry=function computeGeometry(resultPointList,resultLineList,resultPolyList,opcode){var geomList=new ArrayList();geomList.addAll(resultPointList);geomList.addAll(resultLineList);geomList.addAll(resultPolyList);if(geomList.isEmpty()){return OverlayOp.createEmptyResult(opcode,this._arg[0].getGeometry(),this._arg[1].getGeometry(),this._geomFact);}return this._geomFact.buildGeometry(geomList);};OverlayOp.prototype.mergeSymLabels=function mergeSymLabels(){for(var nodeit=this._graph.getNodes().iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().mergeSymLabels();}};OverlayOp.prototype.isCovered=function isCovered(coord,geomList){var this$1=this;for(var it=geomList.iterator();it.hasNext();){var geom=it.next();var loc=this$1._ptLocator.locate(coord,geom);if(loc!==Location.EXTERIOR){return true;}}return false;};OverlayOp.prototype.replaceCollapsedEdges=function replaceCollapsedEdges(){var newEdges=new ArrayList();for(var it=this._edgeList.iterator();it.hasNext();){var e=it.next();if(e.isCollapsed()){it.remove();newEdges.add(e.getCollapsedEdge());}}this._edgeList.addAll(newEdges);};OverlayOp.prototype.updateNodeLabelling=function updateNodeLabelling(){for(var nodeit=this._graph.getNodes().iterator();nodeit.hasNext();){var node=nodeit.next();var lbl=node.getEdges().getLabel();node.getLabel().merge(lbl);}};OverlayOp.prototype.getResultGeometry=function getResultGeometry(overlayOpCode){this.computeOverlay(overlayOpCode);return this._resultGeom;};OverlayOp.prototype.insertUniqueEdges=function insertUniqueEdges(edges){var this$1=this;for(var i=edges.iterator();i.hasNext();){var e=i.next();this$1.insertUniqueEdge(e);}};OverlayOp.prototype.computeOverlay=function computeOverlay(opCode){this.copyPoints(0);this.copyPoints(1);this._arg[0].computeSelfNodes(this._li,false);this._arg[1].computeSelfNodes(this._li,false);this._arg[0].computeEdgeIntersections(this._arg[1],this._li,true);var baseSplitEdges=new ArrayList();this._arg[0].computeSplitEdges(baseSplitEdges);this._arg[1].computeSplitEdges(baseSplitEdges);// const splitEdges = baseSplitEdges
  this.insertUniqueEdges(baseSplitEdges);this.computeLabelsFromDepths();this.replaceCollapsedEdges();EdgeNodingValidator.checkValid(this._edgeList.getEdges());this._graph.addEdges(this._edgeList.getEdges());this.computeLabelling();this.labelIncompleteNodes();this.findResultAreaEdges(opCode);this.cancelDuplicateResultEdges();var polyBuilder=new PolygonBuilder(this._geomFact);polyBuilder.add(this._graph);this._resultPolyList=polyBuilder.getPolygons();var lineBuilder=new LineBuilder(this,this._geomFact,this._ptLocator);this._resultLineList=lineBuilder.build(opCode);var pointBuilder=new PointBuilder(this,this._geomFact,this._ptLocator);this._resultPointList=pointBuilder.build(opCode);this._resultGeom=this.computeGeometry(this._resultPointList,this._resultLineList,this._resultPolyList,opCode);};OverlayOp.prototype.labelIncompleteNode=function labelIncompleteNode(n,targetIndex){var loc=this._ptLocator.locate(n.getCoordinate(),this._arg[targetIndex].getGeometry());n.getLabel().setLocation(targetIndex,loc);};OverlayOp.prototype.copyPoints=function copyPoints(argIndex){var this$1=this;for(var i=this._arg[argIndex].getNodeIterator();i.hasNext();){var graphNode=i.next();var newNode=this$1._graph.addNode(graphNode.getCoordinate());newNode.setLabel(argIndex,graphNode.getLabel().getLocation(argIndex));}};OverlayOp.prototype.findResultAreaEdges=function findResultAreaEdges(opCode){for(var it=this._graph.getEdgeEnds().iterator();it.hasNext();){var de=it.next();var label=de.getLabel();if(label.isArea()&&!de.isInteriorAreaEdge()&&OverlayOp.isResultOfOp(label.getLocation(0,Position.RIGHT),label.getLocation(1,Position.RIGHT),opCode)){de.setInResult(true);}}};OverlayOp.prototype.computeLabelsFromDepths=function computeLabelsFromDepths(){for(var it=this._edgeList.iterator();it.hasNext();){var e=it.next();var lbl=e.getLabel();var depth=e.getDepth();if(!depth.isNull()){depth.normalize();for(var i=0;i<2;i++){if(!lbl.isNull(i)&&lbl.isArea()&&!depth.isNull(i)){if(depth.getDelta(i)===0){lbl.toLine(i);}else {Assert.isTrue(!depth.isNull(i,Position.LEFT),'depth of LEFT side has not been initialized');lbl.setLocation(i,Position.LEFT,depth.getLocation(i,Position.LEFT));Assert.isTrue(!depth.isNull(i,Position.RIGHT),'depth of RIGHT side has not been initialized');lbl.setLocation(i,Position.RIGHT,depth.getLocation(i,Position.RIGHT));}}}}}};OverlayOp.prototype.computeLabelling=function computeLabelling(){var this$1=this;for(var nodeit=this._graph.getNodes().iterator();nodeit.hasNext();){var node=nodeit.next();node.getEdges().computeLabelling(this$1._arg);}this.mergeSymLabels();this.updateNodeLabelling();};OverlayOp.prototype.labelIncompleteNodes=function labelIncompleteNodes(){var this$1=this;// let nodeCount = 0
  for(var ni=this._graph.getNodes().iterator();ni.hasNext();){var n=ni.next();var label=n.getLabel();if(n.isIsolated()){// nodeCount++
  if(label.isNull(0)){this$1.labelIncompleteNode(n,0);}else {this$1.labelIncompleteNode(n,1);}}n.getEdges().updateLabelling(label);}};OverlayOp.prototype.isCoveredByA=function isCoveredByA(coord){if(this.isCovered(coord,this._resultPolyList)){return true;}return false;};OverlayOp.prototype.interfaces_=function interfaces_(){return [];};OverlayOp.prototype.getClass=function getClass(){return OverlayOp;};return OverlayOp;}(GeometryGraphOp);OverlayOp.overlayOp=function(geom0,geom1,opCode){var gov=new OverlayOp(geom0,geom1);var geomOv=gov.getResultGeometry(opCode);return geomOv;};OverlayOp.intersection=function(g,other){if(g.isEmpty()||other.isEmpty()){return OverlayOp.createEmptyResult(OverlayOp.INTERSECTION,g,other,g.getFactory());}if(g.isGeometryCollection()){var g2=other;return GeometryCollectionMapper.map(g,{interfaces_:function interfaces_(){return [GeometryMapper.MapOp];},map:function map(g){return g.intersection(g2);}});}g.checkNotGeometryCollection(g);g.checkNotGeometryCollection(other);return SnapIfNeededOverlayOp.overlayOp(g,other,OverlayOp.INTERSECTION);};OverlayOp.symDifference=function(g,other){if(g.isEmpty()||other.isEmpty()){if(g.isEmpty()&&other.isEmpty()){return OverlayOp.createEmptyResult(OverlayOp.SYMDIFFERENCE,g,other,g.getFactory());}if(g.isEmpty()){return other.copy();}if(other.isEmpty()){return g.copy();}}g.checkNotGeometryCollection(g);g.checkNotGeometryCollection(other);return SnapIfNeededOverlayOp.overlayOp(g,other,OverlayOp.SYMDIFFERENCE);};OverlayOp.resultDimension=function(opCode,g0,g1){var dim0=g0.getDimension();var dim1=g1.getDimension();var resultDimension=-1;switch(opCode){case OverlayOp.INTERSECTION:resultDimension=Math.min(dim0,dim1);break;case OverlayOp.UNION:resultDimension=Math.max(dim0,dim1);break;case OverlayOp.DIFFERENCE:resultDimension=dim0;break;case OverlayOp.SYMDIFFERENCE:resultDimension=Math.max(dim0,dim1);break;}return resultDimension;};OverlayOp.createEmptyResult=function(overlayOpCode,a,b,geomFact){var result=null;switch(OverlayOp.resultDimension(overlayOpCode,a,b)){case-1:result=geomFact.createGeometryCollection(new Array(0).fill(null));break;case 0:result=geomFact.createPoint();break;case 1:result=geomFact.createLineString();break;case 2:result=geomFact.createPolygon();break;}return result;};OverlayOp.difference=function(g,other){if(g.isEmpty()){return OverlayOp.createEmptyResult(OverlayOp.DIFFERENCE,g,other,g.getFactory());}if(other.isEmpty()){return g.copy();}g.checkNotGeometryCollection(g);g.checkNotGeometryCollection(other);return SnapIfNeededOverlayOp.overlayOp(g,other,OverlayOp.DIFFERENCE);};OverlayOp.isResultOfOp=function(){if(arguments.length===2){var label=arguments[0];var opCode=arguments[1];var loc0=label.getLocation(0);var loc1=label.getLocation(1);return OverlayOp.isResultOfOp(loc0,loc1,opCode);}else if(arguments.length===3){var loc0$1=arguments[0];var loc1$1=arguments[1];var overlayOpCode=arguments[2];if(loc0$1===Location.BOUNDARY){loc0$1=Location.INTERIOR;}if(loc1$1===Location.BOUNDARY){loc1$1=Location.INTERIOR;}switch(overlayOpCode){case OverlayOp.INTERSECTION:return loc0$1===Location.INTERIOR&&loc1$1===Location.INTERIOR;case OverlayOp.UNION:return loc0$1===Location.INTERIOR||loc1$1===Location.INTERIOR;case OverlayOp.DIFFERENCE:return loc0$1===Location.INTERIOR&&loc1$1!==Location.INTERIOR;case OverlayOp.SYMDIFFERENCE:return loc0$1===Location.INTERIOR&&loc1$1!==Location.INTERIOR||loc0$1!==Location.INTERIOR&&loc1$1===Location.INTERIOR;}return false;}};OverlayOp.INTERSECTION=1;OverlayOp.UNION=2;OverlayOp.DIFFERENCE=3;OverlayOp.SYMDIFFERENCE=4;var FuzzyPointLocator=function FuzzyPointLocator(){this._g=null;this._boundaryDistanceTolerance=null;this._linework=null;this._ptLocator=new PointLocator();this._seg=new LineSegment();var g=arguments[0];var boundaryDistanceTolerance=arguments[1];this._g=g;this._boundaryDistanceTolerance=boundaryDistanceTolerance;this._linework=this.extractLinework(g);};FuzzyPointLocator.prototype.isWithinToleranceOfBoundary=function isWithinToleranceOfBoundary(pt){var this$1=this;for(var i=0;i<this._linework.getNumGeometries();i++){var line=this$1._linework.getGeometryN(i);var seq=line.getCoordinateSequence();for(var j=0;j<seq.size()-1;j++){seq.getCoordinate(j,this$1._seg.p0);seq.getCoordinate(j+1,this$1._seg.p1);var dist=this$1._seg.distance(pt);if(dist<=this$1._boundaryDistanceTolerance){return true;}}}return false;};FuzzyPointLocator.prototype.getLocation=function getLocation(pt){if(this.isWithinToleranceOfBoundary(pt)){return Location.BOUNDARY;}return this._ptLocator.locate(pt,this._g);};FuzzyPointLocator.prototype.extractLinework=function extractLinework(g){var extracter=new PolygonalLineworkExtracter();g.apply(extracter);var linework=extracter.getLinework();var lines=GeometryFactory.toLineStringArray(linework);return g.getFactory().createMultiLineString(lines);};FuzzyPointLocator.prototype.interfaces_=function interfaces_(){return [];};FuzzyPointLocator.prototype.getClass=function getClass(){return FuzzyPointLocator;};var PolygonalLineworkExtracter=function PolygonalLineworkExtracter(){this._linework=null;this._linework=new ArrayList();};PolygonalLineworkExtracter.prototype.getLinework=function getLinework(){return this._linework;};PolygonalLineworkExtracter.prototype.filter=function filter(g){var this$1=this;if(g instanceof Polygon){var poly=g;this._linework.add(poly.getExteriorRing());for(var i=0;i<poly.getNumInteriorRing();i++){this$1._linework.add(poly.getInteriorRingN(i));}}};PolygonalLineworkExtracter.prototype.interfaces_=function interfaces_(){return [GeometryFilter];};PolygonalLineworkExtracter.prototype.getClass=function getClass(){return PolygonalLineworkExtracter;};var OffsetPointGenerator=function OffsetPointGenerator(){this._g=null;this._doLeft=true;this._doRight=true;var g=arguments[0];this._g=g;};OffsetPointGenerator.prototype.extractPoints=function extractPoints(line,offsetDistance,offsetPts){var this$1=this;var pts=line.getCoordinates();for(var i=0;i<pts.length-1;i++){this$1.computeOffsetPoints(pts[i],pts[i+1],offsetDistance,offsetPts);}};OffsetPointGenerator.prototype.setSidesToGenerate=function setSidesToGenerate(doLeft,doRight){this._doLeft=doLeft;this._doRight=doRight;};OffsetPointGenerator.prototype.getPoints=function getPoints(offsetDistance){var this$1=this;var offsetPts=new ArrayList();var lines=LinearComponentExtracter.getLines(this._g);for(var i=lines.iterator();i.hasNext();){var line=i.next();this$1.extractPoints(line,offsetDistance,offsetPts);}return offsetPts;};OffsetPointGenerator.prototype.computeOffsetPoints=function computeOffsetPoints(p0,p1,offsetDistance,offsetPts){var dx=p1.x-p0.x;var dy=p1.y-p0.y;var len=Math.sqrt(dx*dx+dy*dy);var ux=offsetDistance*dx/len;var uy=offsetDistance*dy/len;var midX=(p1.x+p0.x)/2;var midY=(p1.y+p0.y)/2;if(this._doLeft){var offsetLeft=new Coordinate(midX-uy,midY+ux);offsetPts.add(offsetLeft);}if(this._doRight){var offsetRight=new Coordinate(midX+uy,midY-ux);offsetPts.add(offsetRight);}};OffsetPointGenerator.prototype.interfaces_=function interfaces_(){return [];};OffsetPointGenerator.prototype.getClass=function getClass(){return OffsetPointGenerator;};var OverlayResultValidator=function OverlayResultValidator(){this._geom=null;this._locFinder=null;this._location=new Array(3).fill(null);this._invalidLocation=null;this._boundaryDistanceTolerance=OverlayResultValidator.TOLERANCE;this._testCoords=new ArrayList();var a=arguments[0];var b=arguments[1];var result=arguments[2];this._boundaryDistanceTolerance=OverlayResultValidator.computeBoundaryDistanceTolerance(a,b);this._geom=[a,b,result];this._locFinder=[new FuzzyPointLocator(this._geom[0],this._boundaryDistanceTolerance),new FuzzyPointLocator(this._geom[1],this._boundaryDistanceTolerance),new FuzzyPointLocator(this._geom[2],this._boundaryDistanceTolerance)];};var staticAccessors$46={TOLERANCE:{configurable:true}};OverlayResultValidator.prototype.reportResult=function reportResult(overlayOp,location,expectedInterior){System.out.println('Overlay result invalid - A:'+Location.toLocationSymbol(location[0])+' B:'+Location.toLocationSymbol(location[1])+' expected:'+(expectedInterior?'i':'e')+' actual:'+Location.toLocationSymbol(location[2]));};OverlayResultValidator.prototype.isValid=function isValid(overlayOp){this.addTestPts(this._geom[0]);this.addTestPts(this._geom[1]);var isValid=this.checkValid(overlayOp);return isValid;};OverlayResultValidator.prototype.checkValid=function checkValid(){var this$1=this;if(arguments.length===1){var overlayOp=arguments[0];for(var i=0;i<this._testCoords.size();i++){var pt=this$1._testCoords.get(i);if(!this$1.checkValid(overlayOp,pt)){this$1._invalidLocation=pt;return false;}}return true;}else if(arguments.length===2){var overlayOp$1=arguments[0];var pt$1=arguments[1];this._location[0]=this._locFinder[0].getLocation(pt$1);this._location[1]=this._locFinder[1].getLocation(pt$1);this._location[2]=this._locFinder[2].getLocation(pt$1);if(OverlayResultValidator.hasLocation(this._location,Location.BOUNDARY)){return true;}return this.isValidResult(overlayOp$1,this._location);}};OverlayResultValidator.prototype.addTestPts=function addTestPts(g){var ptGen=new OffsetPointGenerator(g);this._testCoords.addAll(ptGen.getPoints(5*this._boundaryDistanceTolerance));};OverlayResultValidator.prototype.isValidResult=function isValidResult(overlayOp,location){var expectedInterior=OverlayOp.isResultOfOp(location[0],location[1],overlayOp);var resultInInterior=location[2]===Location.INTERIOR;var isValid=!(expectedInterior^resultInInterior);if(!isValid){this.reportResult(overlayOp,location,expectedInterior);}return isValid;};OverlayResultValidator.prototype.getInvalidLocation=function getInvalidLocation(){return this._invalidLocation;};OverlayResultValidator.prototype.interfaces_=function interfaces_(){return [];};OverlayResultValidator.prototype.getClass=function getClass(){return OverlayResultValidator;};OverlayResultValidator.hasLocation=function hasLocation(location,loc){for(var i=0;i<3;i++){if(location[i]===loc){return true;}}return false;};OverlayResultValidator.computeBoundaryDistanceTolerance=function computeBoundaryDistanceTolerance(g0,g1){return Math.min(GeometrySnapper.computeSizeBasedSnapTolerance(g0),GeometrySnapper.computeSizeBasedSnapTolerance(g1));};OverlayResultValidator.isValid=function isValid(a,b,overlayOp,result){var validator=new OverlayResultValidator(a,b,result);return validator.isValid(overlayOp);};staticAccessors$46.TOLERANCE.get=function(){return 0.000001;};Object.defineProperties(OverlayResultValidator,staticAccessors$46);// operation.overlay
  var GeometryCombiner=function GeometryCombiner(geoms){this._geomFactory=null;this._skipEmpty=false;this._inputGeoms=null;this._geomFactory=GeometryCombiner.extractFactory(geoms);this._inputGeoms=geoms;};GeometryCombiner.prototype.extractElements=function extractElements(geom,elems){var this$1=this;if(geom===null){return null;}for(var i=0;i<geom.getNumGeometries();i++){var elemGeom=geom.getGeometryN(i);if(this$1._skipEmpty&&elemGeom.isEmpty()){continue;}elems.add(elemGeom);}};GeometryCombiner.prototype.combine=function combine(){var this$1=this;var elems=new ArrayList();for(var i=this._inputGeoms.iterator();i.hasNext();){var g=i.next();this$1.extractElements(g,elems);}if(elems.size()===0){if(this._geomFactory!==null){return this._geomFactory.createGeometryCollection(null);}return null;}return this._geomFactory.buildGeometry(elems);};GeometryCombiner.prototype.interfaces_=function interfaces_(){return [];};GeometryCombiner.prototype.getClass=function getClass(){return GeometryCombiner;};GeometryCombiner.combine=function combine(){if(arguments.length===1){var geoms=arguments[0];var combiner=new GeometryCombiner(geoms);return combiner.combine();}else if(arguments.length===2){var g0=arguments[0];var g1=arguments[1];var combiner$1=new GeometryCombiner(GeometryCombiner.createList(g0,g1));return combiner$1.combine();}else if(arguments.length===3){var g0$1=arguments[0];var g1$1=arguments[1];var g2=arguments[2];var combiner$2=new GeometryCombiner(GeometryCombiner.createList(g0$1,g1$1,g2));return combiner$2.combine();}};GeometryCombiner.extractFactory=function extractFactory(geoms){if(geoms.isEmpty()){return null;}return geoms.iterator().next().getFactory();};GeometryCombiner.createList=function createList(){if(arguments.length===2){var obj0=arguments[0];var obj1=arguments[1];var list=new ArrayList();list.add(obj0);list.add(obj1);return list;}else if(arguments.length===3){var obj0$1=arguments[0];var obj1$1=arguments[1];var obj2=arguments[2];var list$1=new ArrayList();list$1.add(obj0$1);list$1.add(obj1$1);list$1.add(obj2);return list$1;}};var CascadedPolygonUnion=function CascadedPolygonUnion(){this._inputPolys=null;this._geomFactory=null;var polys=arguments[0];this._inputPolys=polys;if(this._inputPolys===null){this._inputPolys=new ArrayList();}};var staticAccessors$47={STRTREE_NODE_CAPACITY:{configurable:true}};CascadedPolygonUnion.prototype.reduceToGeometries=function reduceToGeometries(geomTree){var this$1=this;var geoms=new ArrayList();for(var i=geomTree.iterator();i.hasNext();){var o=i.next();var geom=null;if(hasInterface(o,List)){geom=this$1.unionTree(o);}else if(o instanceof Geometry){geom=o;}geoms.add(geom);}return geoms;};CascadedPolygonUnion.prototype.extractByEnvelope=function extractByEnvelope(env,geom,disjointGeoms){var intersectingGeoms=new ArrayList();for(var i=0;i<geom.getNumGeometries();i++){var elem=geom.getGeometryN(i);if(elem.getEnvelopeInternal().intersects(env)){intersectingGeoms.add(elem);}else {disjointGeoms.add(elem);}}return this._geomFactory.buildGeometry(intersectingGeoms);};CascadedPolygonUnion.prototype.unionOptimized=function unionOptimized(g0,g1){var g0Env=g0.getEnvelopeInternal();var g1Env=g1.getEnvelopeInternal();if(!g0Env.intersects(g1Env)){var combo=GeometryCombiner.combine(g0,g1);return combo;}if(g0.getNumGeometries()<=1&&g1.getNumGeometries()<=1){return this.unionActual(g0,g1);}var commonEnv=g0Env.intersection(g1Env);return this.unionUsingEnvelopeIntersection(g0,g1,commonEnv);};CascadedPolygonUnion.prototype.union=function union(){if(this._inputPolys===null){throw new Error('union() method cannot be called twice');}if(this._inputPolys.isEmpty()){return null;}this._geomFactory=this._inputPolys.iterator().next().getFactory();var index=new STRtree(CascadedPolygonUnion.STRTREE_NODE_CAPACITY);for(var i=this._inputPolys.iterator();i.hasNext();){var item=i.next();index.insert(item.getEnvelopeInternal(),item);}this._inputPolys=null;var itemTree=index.itemsTree();var unionAll=this.unionTree(itemTree);return unionAll;};CascadedPolygonUnion.prototype.binaryUnion=function binaryUnion(){if(arguments.length===1){var geoms=arguments[0];return this.binaryUnion(geoms,0,geoms.size());}else if(arguments.length===3){var geoms$1=arguments[0];var start=arguments[1];var end=arguments[2];if(end-start<=1){var g0=CascadedPolygonUnion.getGeometry(geoms$1,start);return this.unionSafe(g0,null);}else if(end-start===2){return this.unionSafe(CascadedPolygonUnion.getGeometry(geoms$1,start),CascadedPolygonUnion.getGeometry(geoms$1,start+1));}else {var mid=Math.trunc((end+start)/2);var g0$1=this.binaryUnion(geoms$1,start,mid);var g1=this.binaryUnion(geoms$1,mid,end);return this.unionSafe(g0$1,g1);}}};CascadedPolygonUnion.prototype.repeatedUnion=function repeatedUnion(geoms){var union=null;for(var i=geoms.iterator();i.hasNext();){var g=i.next();if(union===null){union=g.copy();}else {union=union.union(g);}}return union;};CascadedPolygonUnion.prototype.unionSafe=function unionSafe(g0,g1){if(g0===null&&g1===null){return null;}if(g0===null){return g1.copy();}if(g1===null){return g0.copy();}return this.unionOptimized(g0,g1);};CascadedPolygonUnion.prototype.unionActual=function unionActual(g0,g1){return CascadedPolygonUnion.restrictToPolygons(g0.union(g1));};CascadedPolygonUnion.prototype.unionTree=function unionTree(geomTree){var geoms=this.reduceToGeometries(geomTree);var union=this.binaryUnion(geoms);return union;};CascadedPolygonUnion.prototype.unionUsingEnvelopeIntersection=function unionUsingEnvelopeIntersection(g0,g1,common){var disjointPolys=new ArrayList();var g0Int=this.extractByEnvelope(common,g0,disjointPolys);var g1Int=this.extractByEnvelope(common,g1,disjointPolys);var union=this.unionActual(g0Int,g1Int);disjointPolys.add(union);var overallUnion=GeometryCombiner.combine(disjointPolys);return overallUnion;};CascadedPolygonUnion.prototype.bufferUnion=function bufferUnion(){if(arguments.length===1){var geoms=arguments[0];var factory=geoms.get(0).getFactory();var gColl=factory.buildGeometry(geoms);var unionAll=gColl.buffer(0.0);return unionAll;}else if(arguments.length===2){var g0=arguments[0];var g1=arguments[1];var factory$1=g0.getFactory();var gColl$1=factory$1.createGeometryCollection([g0,g1]);var unionAll$1=gColl$1.buffer(0.0);return unionAll$1;}};CascadedPolygonUnion.prototype.interfaces_=function interfaces_(){return [];};CascadedPolygonUnion.prototype.getClass=function getClass(){return CascadedPolygonUnion;};CascadedPolygonUnion.restrictToPolygons=function restrictToPolygons(g){if(hasInterface(g,Polygonal)){return g;}var polygons=PolygonExtracter.getPolygons(g);if(polygons.size()===1){return polygons.get(0);}return g.getFactory().createMultiPolygon(GeometryFactory.toPolygonArray(polygons));};CascadedPolygonUnion.getGeometry=function getGeometry(list,index){if(index>=list.size()){return null;}return list.get(index);};CascadedPolygonUnion.union=function union(polys){var op=new CascadedPolygonUnion(polys);return op.union();};staticAccessors$47.STRTREE_NODE_CAPACITY.get=function(){return 4;};Object.defineProperties(CascadedPolygonUnion,staticAccessors$47);var UnionOp=function UnionOp(){};UnionOp.prototype.interfaces_=function interfaces_(){return [];};UnionOp.prototype.getClass=function getClass(){return UnionOp;};UnionOp.union=function union(g,other){if(g.isEmpty()||other.isEmpty()){if(g.isEmpty()&&other.isEmpty()){return OverlayOp.createEmptyResult(OverlayOp.UNION,g,other,g.getFactory());}if(g.isEmpty()){return other.copy();}if(other.isEmpty()){return g.copy();}}g.checkNotGeometryCollection(g);g.checkNotGeometryCollection(other);return SnapIfNeededOverlayOp.overlayOp(g,other,OverlayOp.UNION);};// operation.union

  // Adds floating point numbers with twice the normal precision.
  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
  // 305–363 (1997).
  // Code adapted from GeographicLib by Charles F. F. Karney,
  // http://geographiclib.sourceforge.net/
  function adder () {
    return new Adder();
  }

  function Adder() {
    this.reset();
  }

  Adder.prototype = {
    constructor: Adder,
    reset: function reset() {
      this.s = // rounded value
      this.t = 0; // exact error
    },
    add: function add(y) {
      _add(temp, y, this.t);

      _add(this, temp.s, this.s);

      if (this.s) this.t += temp.t;else this.s = temp.t;
    },
    valueOf: function valueOf() {
      return this.s;
    }
  };
  var temp = new Adder();

  function _add(adder, a, b) {
    var x = adder.s = a + b,
        bv = x - a,
        av = x - bv;
    adder.t = a - av + (b - bv);
  }

  var epsilon = 1e-6;
  var pi = Math.PI;
  var halfPi = pi / 2;
  var quarterPi = pi / 4;
  var tau = pi * 2;
  var degrees = 180 / pi;
  var radians = pi / 180;
  var abs = Math.abs;
  var atan = Math.atan;
  var atan2 = Math.atan2;
  var cos = Math.cos;
  var sin = Math.sin;
  var sqrt = Math.sqrt;
  function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
  }
  function asin(x) {
    return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
  }

  function noop() {}

  function streamGeometry(geometry, stream) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
      streamGeometryType[geometry.type](geometry, stream);
    }
  }

  var streamObjectType = {
    Feature: function Feature(object, stream) {
      streamGeometry(object.geometry, stream);
    },
    FeatureCollection: function FeatureCollection(object, stream) {
      var features = object.features,
          i = -1,
          n = features.length;

      while (++i < n) {
        streamGeometry(features[i].geometry, stream);
      }
    }
  };
  var streamGeometryType = {
    Sphere: function Sphere(object, stream) {
      stream.sphere();
    },
    Point: function Point(object, stream) {
      object = object.coordinates;
      stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function MultiPoint(object, stream) {
      var coordinates = object.coordinates,
          i = -1,
          n = coordinates.length;

      while (++i < n) {
        object = coordinates[i], stream.point(object[0], object[1], object[2]);
      }
    },
    LineString: function LineString(object, stream) {
      streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function MultiLineString(object, stream) {
      var coordinates = object.coordinates,
          i = -1,
          n = coordinates.length;

      while (++i < n) {
        streamLine(coordinates[i], stream, 0);
      }
    },
    Polygon: function Polygon(object, stream) {
      streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function MultiPolygon(object, stream) {
      var coordinates = object.coordinates,
          i = -1,
          n = coordinates.length;

      while (++i < n) {
        streamPolygon(coordinates[i], stream);
      }
    },
    GeometryCollection: function GeometryCollection(object, stream) {
      var geometries = object.geometries,
          i = -1,
          n = geometries.length;

      while (++i < n) {
        streamGeometry(geometries[i], stream);
      }
    }
  };

  function streamLine(coordinates, stream, closed) {
    var i = -1,
        n = coordinates.length - closed,
        coordinate;
    stream.lineStart();

    while (++i < n) {
      coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
    }

    stream.lineEnd();
  }

  function streamPolygon(coordinates, stream) {
    var i = -1,
        n = coordinates.length;
    stream.polygonStart();

    while (++i < n) {
      streamLine(coordinates[i], stream, 1);
    }

    stream.polygonEnd();
  }

  function geoStream (object, stream) {
    if (object && streamObjectType.hasOwnProperty(object.type)) {
      streamObjectType[object.type](object, stream);
    } else {
      streamGeometry(object, stream);
    }
  }

  adder();
  adder();

  function spherical(cartesian) {
    return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
  }
  function cartesian(spherical) {
    var lambda = spherical[0],
        phi = spherical[1],
        cosPhi = cos(phi);
    return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
  }
  function cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function cartesianCross(a, b) {
    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
  } // TODO return a

  function cartesianAddInPlace(a, b) {
    a[0] += b[0], a[1] += b[1], a[2] += b[2];
  }
  function cartesianScale(vector, k) {
    return [vector[0] * k, vector[1] * k, vector[2] * k];
  } // TODO return d

  function cartesianNormalizeInPlace(d) {
    var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l, d[1] /= l, d[2] /= l;
  }

  // previous 3D point
  adder();

  function compose (a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }

    if (a.invert && b.invert) compose.invert = function (x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }

  function rotationIdentity(lambda, phi) {
    return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
  }

  rotationIdentity.invert = rotationIdentity;
  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
    return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
  }

  function forwardRotationLambda(deltaLambda) {
    return function (lambda, phi) {
      return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
    };
  }

  function rotationLambda(deltaLambda) {
    var rotation = forwardRotationLambda(deltaLambda);
    rotation.invert = forwardRotationLambda(-deltaLambda);
    return rotation;
  }

  function rotationPhiGamma(deltaPhi, deltaGamma) {
    var cosDeltaPhi = cos(deltaPhi),
        sinDeltaPhi = sin(deltaPhi),
        cosDeltaGamma = cos(deltaGamma),
        sinDeltaGamma = sin(deltaGamma);

    function rotation(lambda, phi) {
      var cosPhi = cos(phi),
          x = cos(lambda) * cosPhi,
          y = sin(lambda) * cosPhi,
          z = sin(phi),
          k = z * cosDeltaPhi + x * sinDeltaPhi;
      return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin(k * cosDeltaGamma + y * sinDeltaGamma)];
    }

    rotation.invert = function (lambda, phi) {
      var cosPhi = cos(phi),
          x = cos(lambda) * cosPhi,
          y = sin(lambda) * cosPhi,
          z = sin(phi),
          k = z * cosDeltaGamma - y * sinDeltaGamma;
      return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin(k * cosDeltaPhi - x * sinDeltaPhi)];
    };

    return rotation;
  }

  function circleStream(stream, radius, delta, direction, t0, t1) {
    if (!delta) return;
    var cosRadius = cos(radius),
        sinRadius = sin(radius),
        step = direction * delta;

    if (t0 == null) {
      t0 = radius + direction * tau;
      t1 = radius - step / 2;
    } else {
      t0 = circleRadius(cosRadius, t0);
      t1 = circleRadius(cosRadius, t1);
      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;
    }

    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
      point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
      stream.point(point[0], point[1]);
    }
  } // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].

  function circleRadius(cosRadius, point) {
    point = cartesian(point), point[0] -= cosRadius;
    cartesianNormalizeInPlace(point);
    var radius = acos(-point[1]);
    return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
  }

  function clipBuffer () {
    var lines = [],
        line;
    return {
      point: function point(x, y) {
        line.push([x, y]);
      },
      lineStart: function lineStart() {
        lines.push(line = []);
      },
      lineEnd: noop,
      rejoin: function rejoin() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      },
      result: function result() {
        var result = lines;
        lines = [];
        line = null;
        return result;
      }
    };
  }

  function clipLine (a, b, x0, y0, x1, y1) {
    var ax = a[0],
        ay = a[1],
        bx = b[0],
        by = b[1],
        t0 = 0,
        t1 = 1,
        dx = bx - ax,
        dy = by - ay,
        r;
    r = x0 - ax;
    if (!dx && r > 0) return;
    r /= dx;

    if (dx < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dx > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = x1 - ax;
    if (!dx && r < 0) return;
    r /= dx;

    if (dx < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dx > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    r = y0 - ay;
    if (!dy && r > 0) return;
    r /= dy;

    if (dy < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dy > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = y1 - ay;
    if (!dy && r < 0) return;
    r /= dy;

    if (dy < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dy > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
    return true;
  }

  function pointEqual (a, b) {
    return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
  }

  function Intersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other; // another intersection

    this.e = entry; // is an entry?

    this.v = false; // visited

    this.n = this.p = null; // next & previous
  } // A generalized polygon clipping algorithm: given a polygon that has been cut
  // into its visible line segments, and rejoins the segments by interpolating
  // along the clip edge.


  function clipPolygon (segments, compareIntersection, startInside, interpolate, stream) {
    var subject = [],
        clip = [],
        i,
        n;
    segments.forEach(function (segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n,
          p0 = segment[0],
          p1 = segment[n],
          x; // If the first and last points of a segment are coincident, then treat as a
      // closed ring. TODO if all rings are closed, then the winding order of the
      // exterior ring should be checked.

      if (pointEqual(p0, p1)) {
        stream.lineStart();

        for (i = 0; i < n; ++i) {
          stream.point((p0 = segment[i])[0], p0[1]);
        }

        stream.lineEnd();
        return;
      }

      subject.push(x = new Intersection(p0, segment, null, true));
      clip.push(x.o = new Intersection(p0, null, x, false));
      subject.push(x = new Intersection(p1, segment, null, false));
      clip.push(x.o = new Intersection(p1, null, x, true));
    });
    if (!subject.length) return;
    clip.sort(compareIntersection);
    link(subject);
    link(clip);

    for (i = 0, n = clip.length; i < n; ++i) {
      clip[i].e = startInside = !startInside;
    }

    var start = subject[0],
        points,
        point;

    while (1) {
      // Find first unvisited intersection.
      var current = start,
          isSubject = true;

      while (current.v) {
        if ((current = current.n) === start) return;
      }

      points = current.z;
      stream.lineStart();

      do {
        current.v = current.o.v = true;

        if (current.e) {
          if (isSubject) {
            for (i = 0, n = points.length; i < n; ++i) {
              stream.point((point = points[i])[0], point[1]);
            }
          } else {
            interpolate(current.x, current.n.x, 1, stream);
          }

          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;

            for (i = points.length - 1; i >= 0; --i) {
              stream.point((point = points[i])[0], point[1]);
            }
          } else {
            interpolate(current.x, current.p.x, -1, stream);
          }

          current = current.p;
        }

        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);

      stream.lineEnd();
    }
  }

  function link(array) {
    if (!(n = array.length)) return;
    var n,
        i = 0,
        a = array[0],
        b;

    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }

    a.n = b = array[0];
    b.p = a;
  }

  function ascending (a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }

  function bisector (compare) {
    if (compare.length === 1) compare = ascendingComparator(compare);
    return {
      left: function left(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;

        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
        }

        return lo;
      },
      right: function right(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;

        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
        }

        return lo;
      }
    };
  }

  function ascendingComparator(f) {
    return function (d, x) {
      return ascending(f(d), x);
    };
  }

  bisector(ascending);

  function merge (arrays) {
    var n = arrays.length,
        m,
        i = -1,
        j = 0,
        merged,
        array;

    while (++i < n) {
      j += arrays[i].length;
    }

    merged = new Array(j);

    while (--n >= 0) {
      array = arrays[n];
      m = array.length;

      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }

    return merged;
  }

  var clipMax = 1e9,
      clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?
  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

  function clipExtent(x0, y0, x1, y1) {
    function visible(x, y) {
      return x0 <= x && x <= x1 && y0 <= y && y <= y1;
    }

    function interpolate(from, to, direction, stream) {
      var a = 0,
          a1 = 0;

      if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
        do {
          stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
        } while ((a = (a + direction + 4) % 4) !== a1);
      } else {
        stream.point(to[0], to[1]);
      }
    }

    function corner(p, direction) {
      return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
    }

    function compareIntersection(a, b) {
      return comparePoint(a.x, b.x);
    }

    function comparePoint(a, b) {
      var ca = corner(a, 1),
          cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }

    return function (stream) {
      var activeStream = stream,
          bufferStream = clipBuffer(),
          segments,
          polygon,
          ring,
          x__,
          y__,
          v__,
          // first point
      x_,
          y_,
          v_,
          // previous point
      first,
          clean;
      var clipStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: polygonStart,
        polygonEnd: polygonEnd
      };

      function point(x, y) {
        if (visible(x, y)) activeStream.point(x, y);
      }

      function polygonInside() {
        var winding = 0;

        for (var i = 0, n = polygon.length; i < n; ++i) {
          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

            if (a1 <= y1) {
              if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
            } else {
              if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
            }
          }
        }

        return winding;
      } // Buffer geometry within a polygon and then clip it en masse.


      function polygonStart() {
        activeStream = bufferStream, segments = [], polygon = [], clean = true;
      }

      function polygonEnd() {
        var startInside = polygonInside(),
            cleanInside = clean && startInside,
            visible = (segments = merge(segments)).length;

        if (cleanInside || visible) {
          stream.polygonStart();

          if (cleanInside) {
            stream.lineStart();
            interpolate(null, null, 1, stream);
            stream.lineEnd();
          }

          if (visible) {
            clipPolygon(segments, compareIntersection, startInside, interpolate, stream);
          }

          stream.polygonEnd();
        }

        activeStream = stream, segments = polygon = ring = null;
      }

      function lineStart() {
        clipStream.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      } // TODO rather than special-case polygons, simply handle them separately.
      // Ideally, coincident intersection points should be jittered to avoid
      // clipping issues.


      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferStream.rejoin();
          segments.push(bufferStream.result());
        }

        clipStream.point = point;
        if (v_) activeStream.lineEnd();
      }

      function linePoint(x, y) {
        var v = visible(x, y);
        if (polygon) ring.push([x, y]);

        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;

          if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
          }
        } else {
          if (v && v_) activeStream.point(x, y);else {
            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

            if (clipLine(a, b, x0, y0, x1, y1)) {
              if (!v_) {
                activeStream.lineStart();
                activeStream.point(a[0], a[1]);
              }

              activeStream.point(b[0], b[1]);
              if (!v) activeStream.lineEnd();
              clean = false;
            } else if (v) {
              activeStream.lineStart();
              activeStream.point(x, y);
              clean = false;
            }
          }
        }

        x_ = x, y_ = y, v_ = v;
      }

      return clipStream;
    };
  }

  var sum = adder();
  function polygonContains (polygon, point) {
    var lambda = point[0],
        phi = point[1],
        normal = [sin(lambda), -cos(lambda), 0],
        angle = 0,
        winding = 0;
    sum.reset();

    for (var i = 0, n = polygon.length; i < n; ++i) {
      if (!(m = (ring = polygon[i]).length)) continue;
      var ring,
          m,
          point0 = ring[m - 1],
          lambda0 = point0[0],
          phi0 = point0[1] / 2 + quarterPi,
          sinPhi0 = sin(phi0),
          cosPhi0 = cos(phi0);

      for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
        var point1 = ring[j],
            lambda1 = point1[0],
            phi1 = point1[1] / 2 + quarterPi,
            sinPhi1 = sin(phi1),
            cosPhi1 = cos(phi1),
            delta = lambda1 - lambda0,
            sign = delta >= 0 ? 1 : -1,
            absDelta = sign * delta,
            antimeridian = absDelta > pi,
            k = sinPhi0 * sinPhi1;
        sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));
        angle += antimeridian ? delta + sign * tau : delta; // Are the longitudes either side of the point’s meridian (lambda),
        // and are the latitudes smaller than the parallel (phi)?

        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
          var arc = cartesianCross(cartesian(point0), cartesian(point1));
          cartesianNormalizeInPlace(arc);
          var intersection = cartesianCross(normal, arc);
          cartesianNormalizeInPlace(intersection);
          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);

          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
            winding += antimeridian ^ delta >= 0 ? 1 : -1;
          }
        }
      }
    } // First, determine whether the South pole is inside or outside:
    //
    // It is inside if:
    // * the polygon winds around it in a clockwise direction.
    // * the polygon does not (cumulatively) wind around it, but has a negative
    //   (counter-clockwise) area.
    //
    // Second, count the (signed) number of times a segment crosses a lambda
    // from the point to the South pole.  If it is zero, then the point is the
    // same side as the South pole.


    return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ winding & 1;
  }

  adder();

  function identity (x) {
    return x;
  }

  adder();
      adder();

  var x0 = Infinity,
      y0 = x0,
      x1 = -x0,
      y1 = x1;
  var boundsStream = {
    point: boundsPoint,
    lineStart: noop,
    lineEnd: noop,
    polygonStart: noop,
    polygonEnd: noop,
    result: function result() {
      var bounds = [[x0, y0], [x1, y1]];
      x1 = y1 = -(y0 = x0 = Infinity);
      return bounds;
    }
  };

  function boundsPoint(x, y) {
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  }

  adder();

  function clip (pointVisible, clipLine, interpolate, start) {
    return function (rotate, sink) {
      var line = clipLine(sink),
          rotatedStart = rotate.invert(start[0], start[1]),
          ringBuffer = clipBuffer(),
          ringSink = clipLine(ringBuffer),
          polygonStarted = false,
          polygon,
          segments,
          ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function polygonStart() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function polygonEnd() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = merge(segments);
          var startInside = polygonContains(polygon, rotatedStart);

          if (segments.length) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
          } else if (startInside) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            sink.lineStart();
            interpolate(null, null, 1, sink);
            sink.lineEnd();
          }

          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function sphere() {
          sink.polygonStart();
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
          sink.polygonEnd();
        }
      };

      function point(lambda, phi) {
        var point = rotate(lambda, phi);
        if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
      }

      function pointLine(lambda, phi) {
        var point = rotate(lambda, phi);
        line.point(point[0], point[1]);
      }

      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }

      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }

      function pointRing(lambda, phi) {
        ring.push([lambda, phi]);
        var point = rotate(lambda, phi);
        ringSink.point(point[0], point[1]);
      }

      function ringStart() {
        ringSink.lineStart();
        ring = [];
      }

      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringSink.lineEnd();
        var clean = ringSink.clean(),
            ringSegments = ringBuffer.result(),
            i,
            n = ringSegments.length,
            m,
            segment,
            point;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return; // No intersections.

        if (clean & 1) {
          segment = ringSegments[0];

          if ((m = segment.length - 1) > 0) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            sink.lineStart();

            for (i = 0; i < m; ++i) {
              sink.point((point = segment[i])[0], point[1]);
            }

            sink.lineEnd();
          }

          return;
        } // Rejoin connected segments.
        // TODO reuse ringBuffer.rejoin()?


        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(validSegment));
      }

      return clip;
    };
  }

  function validSegment(segment) {
    return segment.length > 1;
  } // Intersections are sorted along the clip edge. For both antimeridian cutting
  // and circle clipping, the same comparison is used.


  function compareIntersection(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
  }

  var clipAntimeridian = clip(function () {
    return true;
  }, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi, -halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were
  // intersections or the line was empty; 1 - no intersections; 2 - there were
  // intersections, and the first and last segments should be rejoined.

  function clipAntimeridianLine(stream) {
    var lambda0 = NaN,
        phi0 = NaN,
        sign0 = NaN,
        _clean; // no intersections


    return {
      lineStart: function lineStart() {
        stream.lineStart();
        _clean = 1;
      },
      point: function point(lambda1, phi1) {
        var sign1 = lambda1 > 0 ? pi : -pi,
            delta = abs(lambda1 - lambda0);

        if (abs(delta - pi) < epsilon) {
          // line crosses a pole
          stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
          stream.point(sign0, phi0);
          stream.lineEnd();
          stream.lineStart();
          stream.point(sign1, phi0);
          stream.point(lambda1, phi0);
          _clean = 0;
        } else if (sign0 !== sign1 && delta >= pi) {
          // line crosses antimeridian
          if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies

          if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;
          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
          stream.point(sign0, phi0);
          stream.lineEnd();
          stream.lineStart();
          stream.point(sign1, phi0);
          _clean = 0;
        }

        stream.point(lambda0 = lambda1, phi0 = phi1);
        sign0 = sign1;
      },
      lineEnd: function lineEnd() {
        stream.lineEnd();
        lambda0 = phi0 = NaN;
      },
      clean: function clean() {
        return 2 - _clean; // if intersections, rejoin first and last segments
      }
    };
  }

  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
    var cosPhi0,
        cosPhi1,
        sinLambda0Lambda1 = sin(lambda0 - lambda1);
    return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
  }

  function clipAntimeridianInterpolate(from, to, direction, stream) {
    var phi;

    if (from == null) {
      phi = direction * halfPi;
      stream.point(-pi, phi);
      stream.point(0, phi);
      stream.point(pi, phi);
      stream.point(pi, 0);
      stream.point(pi, -phi);
      stream.point(0, -phi);
      stream.point(-pi, -phi);
      stream.point(-pi, 0);
      stream.point(-pi, phi);
    } else if (abs(from[0] - to[0]) > epsilon) {
      var lambda = from[0] < to[0] ? pi : -pi;
      phi = direction * lambda / 2;
      stream.point(-lambda, phi);
      stream.point(0, phi);
      stream.point(lambda, phi);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function clipCircle (radius, delta) {
    var cr = cos(radius),
        smallRadius = cr > 0,
        notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case

    function interpolate(from, to, direction, stream) {
      circleStream(stream, radius, delta, direction, from, to);
    }

    function visible(lambda, phi) {
      return cos(lambda) * cos(phi) > cr;
    } // Takes a line and cuts into visible segments. Return values used for polygon
    // clipping: 0 - there were intersections or the line was empty; 1 - no
    // intersections 2 - there were intersections, and the first and last segments
    // should be rejoined.


    function clipLine(stream) {
      var point0, // previous point
      c0, // code for previous point
      v0, // visibility of previous point
      v00, // visibility of first point
      _clean; // no intersections


      return {
        lineStart: function lineStart() {
          v00 = v0 = false;
          _clean = 1;
        },
        point: function point(lambda, phi) {
          var point1 = [lambda, phi],
              point2,
              v = visible(lambda, phi),
              c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
          if (!point0 && (v00 = v0 = v)) stream.lineStart(); // Handle degeneracies.
          // TODO ignore if not clipping polygons.

          if (v !== v0) {
            point2 = intersect(point0, point1);

            if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {
              point1[0] += epsilon;
              point1[1] += epsilon;
              v = visible(point1[0], point1[1]);
            }
          }

          if (v !== v0) {
            _clean = 0;

            if (v) {
              // outside going in
              stream.lineStart();
              point2 = intersect(point1, point0);
              stream.point(point2[0], point2[1]);
            } else {
              // inside going out
              point2 = intersect(point0, point1);
              stream.point(point2[0], point2[1]);
              stream.lineEnd();
            }

            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t; // If the codes for two points are different, or are both zero,
            // and there this segment intersects with the small circle.

            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              _clean = 0;

              if (smallRadius) {
                stream.lineStart();
                stream.point(t[0][0], t[0][1]);
                stream.point(t[1][0], t[1][1]);
                stream.lineEnd();
              } else {
                stream.point(t[1][0], t[1][1]);
                stream.lineEnd();
                stream.lineStart();
                stream.point(t[0][0], t[0][1]);
              }
            }
          }

          if (v && (!point0 || !pointEqual(point0, point1))) {
            stream.point(point1[0], point1[1]);
          }

          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function lineEnd() {
          if (v0) stream.lineEnd();
          point0 = null;
        },
        // Rejoin first and last segments if there were intersections and the first
        // and last points were visible.
        clean: function clean() {
          return _clean | (v00 && v0) << 1;
        }
      };
    } // Intersects the great circle between a and b with the clip circle.


    function intersect(a, b, two) {
      var pa = cartesian(a),
          pb = cartesian(b); // We have two planes, n1.p = d1 and n2.p = d2.
      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).

      var n1 = [1, 0, 0],
          // normal
      n2 = cartesianCross(pa, pb),
          n2n2 = cartesianDot(n2, n2),
          n1n2 = n2[0],
          // cartesianDot(n1, n2),
      determinant = n2n2 - n1n2 * n1n2; // Two polar points.

      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant,
          c2 = -cr * n1n2 / determinant,
          n1xn2 = cartesianCross(n1, n2),
          A = cartesianScale(n1, c1),
          B = cartesianScale(n2, c2);
      cartesianAddInPlace(A, B); // Solve |p(t)|^2 = 1.

      var u = n1xn2,
          w = cartesianDot(A, u),
          uu = cartesianDot(u, u),
          t2 = w * w - uu * (cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = sqrt(t2),
          q = cartesianScale(u, (-w - t) / uu);
      cartesianAddInPlace(q, A);
      q = spherical(q);
      if (!two) return q; // Two intersection points.

      var lambda0 = a[0],
          lambda1 = b[0],
          phi0 = a[1],
          phi1 = b[1],
          z;
      if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
      var delta = lambda1 - lambda0,
          polar = abs(delta - pi) < epsilon,
          meridian = polar || delta < epsilon;
      if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.

      if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
        var q1 = cartesianScale(u, (-w + t) / uu);
        cartesianAddInPlace(q1, A);
        return [q, spherical(q1)];
      }
    } // Generates a 4-bit vector representing the location of a point relative to
    // the small circle's bounding box.


    function code(lambda, phi) {
      var r = smallRadius ? radius : pi - radius,
          code = 0;
      if (lambda < -r) code |= 1; // left
      else if (lambda > r) code |= 2; // right

      if (phi < -r) code |= 4; // below
      else if (phi > r) code |= 8; // above

      return code;
    }

    return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
  }

  function transformer(methods) {
    return function (stream) {
      var s = new TransformStream();

      for (var key in methods) {
        s[key] = methods[key];
      }

      s.stream = stream;
      return s;
    };
  }

  function TransformStream() {}

  TransformStream.prototype = {
    constructor: TransformStream,
    point: function point(x, y) {
      this.stream.point(x, y);
    },
    sphere: function sphere() {
      this.stream.sphere();
    },
    lineStart: function lineStart() {
      this.stream.lineStart();
    },
    lineEnd: function lineEnd() {
      this.stream.lineEnd();
    },
    polygonStart: function polygonStart() {
      this.stream.polygonStart();
    },
    polygonEnd: function polygonEnd() {
      this.stream.polygonEnd();
    }
  };

  function fitExtent(projection, extent, object) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        clip = projection.clipExtent && projection.clipExtent();
    projection.scale(150).translate([0, 0]);
    if (clip != null) projection.clipExtent(null);
    geoStream(object, projection.stream(boundsStream));
    var b = boundsStream.result(),
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    if (clip != null) projection.clipExtent(clip);
    return projection.scale(k * 150).translate([x, y]);
  }
  function fitSize(projection, size, object) {
    return fitExtent(projection, [[0, 0], size], object);
  }

  var maxDepth = 16,
      // maximum depth of subdivision
  cosMinDistance = cos(30 * radians); // cos(minimum angular distance)

  function resample (project, delta2) {
    return +delta2 ? resample$1(project, delta2) : resampleNone(project);
  }

  function resampleNone(project) {
    return transformer({
      point: function point(x, y) {
        x = project(x, y);
        this.stream.point(x[0], x[1]);
      }
    });
  }

  function resample$1(project, delta2) {
    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0,
          dy = y1 - y0,
          d2 = dx * dx + dy * dy;

      if (d2 > 4 * delta2 && depth--) {
        var a = a0 + a1,
            b = b0 + b1,
            c = c0 + c1,
            m = sqrt(a * a + b * b + c * c),
            phi2 = asin(c /= m),
            lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),
            p = project(lambda2, phi2),
            x2 = p[0],
            y2 = p[1],
            dx2 = x2 - x0,
            dy2 = y2 - y0,
            dz = dy * dx2 - dx * dy2;

        if (dz * dz / d2 > delta2 // perpendicular projected distance
        || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
        || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          // angular distance
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
        }
      }
    }

    return function (stream) {
      var lambda00, x00, y00, a00, b00, c00, // first point
      lambda0, x0, y0, a0, b0, c0; // previous point

      var resampleStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function polygonStart() {
          stream.polygonStart();
          resampleStream.lineStart = ringStart;
        },
        polygonEnd: function polygonEnd() {
          stream.polygonEnd();
          resampleStream.lineStart = lineStart;
        }
      };

      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }

      function lineStart() {
        x0 = NaN;
        resampleStream.point = linePoint;
        stream.lineStart();
      }

      function linePoint(lambda, phi) {
        var c = cartesian([lambda, phi]),
            p = project(lambda, phi);
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }

      function lineEnd() {
        resampleStream.point = point;
        stream.lineEnd();
      }

      function ringStart() {
        lineStart();
        resampleStream.point = ringPoint;
        resampleStream.lineEnd = ringEnd;
      }

      function ringPoint(lambda, phi) {
        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resampleStream.point = linePoint;
      }

      function ringEnd() {
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
        resampleStream.lineEnd = lineEnd;
        lineEnd();
      }

      return resampleStream;
    };
  }

  var transformRadians = transformer({
    point: function point(x, y) {
      this.stream.point(x * radians, y * radians);
    }
  });
  function projection(project) {
    return projectionMutator(function () {
      return project;
    })();
  }
  function projectionMutator(projectAt) {
    var project,
        k = 150,
        // scale
    x = 480,
        y = 250,
        // translate
    dx,
        dy,
        lambda = 0,
        phi = 0,
        // center
    deltaLambda = 0,
        deltaPhi = 0,
        deltaGamma = 0,
        rotate,
        projectRotate,
        // rotate
    theta = null,
        preclip = clipAntimeridian,
        // clip angle
    x0 = null,
        y0,
        x1,
        y1,
        postclip = identity,
        // clip extent
    delta2 = 0.5,
        projectResample = resample(projectTransform, delta2),
        // precision
    cache,
        cacheStream;

    function projection(point) {
      point = projectRotate(point[0] * radians, point[1] * radians);
      return [point[0] * k + dx, dy - point[1] * k];
    }

    function invert(point) {
      point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
      return point && [point[0] * degrees, point[1] * degrees];
    }

    function projectTransform(x, y) {
      return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
    }

    projection.stream = function (stream) {
      return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
    };

    projection.clipAngle = function (_) {
      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
    };

    projection.clipExtent = function (_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    };

    projection.scale = function (_) {
      return arguments.length ? (k = +_, recenter()) : k;
    };

    projection.translate = function (_) {
      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
    };

    projection.center = function (_) {
      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
    };

    projection.rotate = function (_) {
      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
    };

    projection.precision = function (_) {
      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
    };

    projection.fitExtent = function (extent, object) {
      return fitExtent(projection, extent, object);
    };

    projection.fitSize = function (size, object) {
      return fitSize(projection, size, object);
    };

    function recenter() {
      projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
      var center = project(lambda, phi);
      dx = x - center[0] * k;
      dy = y + center[1] * k;
      return reset();
    }

    function reset() {
      cache = cacheStream = null;
      return projection;
    }

    return function () {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return recenter();
    };
  }

  function azimuthalRaw(scale) {
    return function (x, y) {
      var cx = cos(x),
          cy = cos(y),
          k = scale(cx * cy);
      return [k * cy * sin(x), k * sin(y)];
    };
  }
  function azimuthalInvert(angle) {
    return function (x, y) {
      var z = sqrt(x * x + y * y),
          c = angle(z),
          sc = sin(c),
          cc = cos(c);
      return [atan2(x * sc, z * cc), asin(z && y * sc / z)];
    };
  }

  var azimuthalEquidistantRaw = azimuthalRaw(function (c) {
    return (c = acos(c)) && c / sin(c);
  });
  azimuthalEquidistantRaw.invert = azimuthalInvert(function (z) {
    return z;
  });
  function geoAzimuthalEquidistant () {
    return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
  }

  /**
   * Calculates a buffer for input features for a given radius. Units supported are miles, kilometers, and degrees.
   *
   * When using a negative radius, the resulting geometry may be invalid if
   * it's too small compared to the radius magnitude. If the input is a
   * FeatureCollection, only valid members will be returned in the output
   * FeatureCollection - i.e., the output collection may have fewer members than
   * the input, or even be empty.
   *
   * @name buffer
   * @param {FeatureCollection|Geometry|Feature<any>} geojson input to be buffered
   * @param {number} radius distance to draw the buffer (negative values are allowed)
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units="kilometers"] any of the options supported by turf units
   * @param {number} [options.steps=8] number of steps
   * @returns {FeatureCollection|Feature<Polygon|MultiPolygon>|undefined} buffered features
   * @example
   * var point = turf.point([-90.548630, 14.616599]);
   * var buffered = turf.buffer(point, 500, {units: 'miles'});
   *
   * //addToMap
   * var addToMap = [point, buffered]
   */

  function buffer(geojson, radius, options) {
    // Optional params
    options = options || {}; // use user supplied options or default values

    var units = options.units || "kilometers";
    var steps = options.steps || 8; // validation

    if (!geojson) throw new Error("geojson is required");
    if (_typeof(options) !== "object") throw new Error("options must be an object");
    if (typeof steps !== "number") throw new Error("steps must be an number"); // Allow negative buffers ("erosion") or zero-sized buffers ("repair geometry")

    if (radius === undefined) throw new Error("radius is required");
    if (steps <= 0) throw new Error("steps must be greater than 0");
    var results = [];

    switch (geojson.type) {
      case "GeometryCollection":
        geomEach$1(geojson, function (geometry) {
          var buffered = bufferFeature(geometry, radius, units, steps);
          if (buffered) results.push(buffered);
        });
        return featureCollection$1(results);

      case "FeatureCollection":
        featureEach$2(geojson, function (feature) {
          var multiBuffered = bufferFeature(feature, radius, units, steps);

          if (multiBuffered) {
            featureEach$2(multiBuffered, function (buffered) {
              if (buffered) results.push(buffered);
            });
          }
        });
        return featureCollection$1(results);
    }

    return bufferFeature(geojson, radius, units, steps);
  }
  /**
   * Buffer single Feature/Geometry
   *
   * @private
   * @param {Feature<any>} geojson input to be buffered
   * @param {number} radius distance to draw the buffer
   * @param {string} [units='kilometers'] any of the options supported by turf units
   * @param {number} [steps=8] number of steps
   * @returns {Feature<Polygon|MultiPolygon>} buffered feature
   */


  function bufferFeature(geojson, radius, units, steps) {
    var properties = geojson.properties || {};
    var geometry = geojson.type === "Feature" ? geojson.geometry : geojson; // Geometry Types faster than jsts

    if (geometry.type === "GeometryCollection") {
      var results = [];
      geomEach$1(geojson, function (geometry) {
        var buffered = bufferFeature(geometry, radius, units, steps);
        if (buffered) results.push(buffered);
      });
      return featureCollection$1(results);
    } // Project GeoJSON to Azimuthal Equidistant projection (convert to Meters)


    var projection = defineProjection(geometry);
    var projected = {
      type: geometry.type,
      coordinates: projectCoords(geometry.coordinates, projection)
    }; // JSTS buffer operation

    var reader = new GeoJSONReader();
    var geom = reader.read(projected);
    var distance = radiansToLength(lengthToRadians(radius, units), "meters");
    var buffered = BufferOp.bufferOp(geom, distance, steps);
    var writer = new GeoJSONWriter();
    buffered = writer.write(buffered); // Detect if empty geometries

    if (coordsIsNaN(buffered.coordinates)) return undefined; // Unproject coordinates (convert to Degrees)

    var result = {
      type: buffered.type,
      coordinates: unprojectCoords(buffered.coordinates, projection)
    };
    return feature(result, properties);
  }
  /**
   * Coordinates isNaN
   *
   * @private
   * @param {Array<any>} coords GeoJSON Coordinates
   * @returns {boolean} if NaN exists
   */


  function coordsIsNaN(coords) {
    if (Array.isArray(coords[0])) return coordsIsNaN(coords[0]);
    return isNaN(coords[0]);
  }
  /**
   * Project coordinates to projection
   *
   * @private
   * @param {Array<any>} coords to project
   * @param {GeoProjection} proj D3 Geo Projection
   * @returns {Array<any>} projected coordinates
   */


  function projectCoords(coords, proj) {
    if (_typeof(coords[0]) !== "object") return proj(coords);
    return coords.map(function (coord) {
      return projectCoords(coord, proj);
    });
  }
  /**
   * Un-Project coordinates to projection
   *
   * @private
   * @param {Array<any>} coords to un-project
   * @param {GeoProjection} proj D3 Geo Projection
   * @returns {Array<any>} un-projected coordinates
   */


  function unprojectCoords(coords, proj) {
    if (_typeof(coords[0]) !== "object") return proj.invert(coords);
    return coords.map(function (coord) {
      return unprojectCoords(coord, proj);
    });
  }
  /**
   * Define Azimuthal Equidistant projection
   *
   * @private
   * @param {Geometry|Feature<any>} geojson Base projection on center of GeoJSON
   * @returns {GeoProjection} D3 Geo Azimuthal Equidistant Projection
   */


  function defineProjection(geojson) {
    var coords = center(geojson).geometry.coordinates;
    var rotation = [-coords[0], -coords[1]];
    return geoAzimuthalEquidistant().rotate(rotation).scale(earthRadius);
  }

  /**
   * Takes two {@link (Multi)Polygon(s)} and returns a combined polygon. If the input polygons are not contiguous, this function returns a {@link MultiPolygon} feature.
   *
   * @name union
   * @param {Feature<Polygon|MultiPolygon>} polygon1 input Polygon feature
   * @param {Feature<Polygon|MultiPolygon>} polygon2 Polygon feature to difference from polygon1
   * @param {Object} [options={}] Optional Parameters
   * @param {Object} [options.properties={}] Translate Properties to output Feature
   * @returns {Feature<(Polygon|MultiPolygon)>} a combined {@link Polygon} or {@link MultiPolygon} feature, or null if the inputs are empty
   * @example
   * var poly1 = turf.polygon([[
   *     [-82.574787, 35.594087],
   *     [-82.574787, 35.615581],
   *     [-82.545261, 35.615581],
   *     [-82.545261, 35.594087],
   *     [-82.574787, 35.594087]
   * ]], {"fill": "#0f0"});
   * var poly2 = turf.polygon([[
   *     [-82.560024, 35.585153],
   *     [-82.560024, 35.602602],
   *     [-82.52964, 35.602602],
   *     [-82.52964, 35.585153],
   *     [-82.560024, 35.585153]
   * ]], {"fill": "#00f"});
   *
   * var union = turf.union(poly1, poly2);
   *
   * //addToMap
   * var addToMap = [poly1, poly2, union];
   */

  function union(poly1, poly2, options) {
    if (options === void 0) {
      options = {};
    }

    var geom1 = getGeom(poly1);
    var geom2 = getGeom(poly2);
    var unioned = index.union(geom1.coordinates, geom2.coordinates);
    if (unioned.length === 0) return null;
    if (unioned.length === 1) return polygon(unioned[0], options.properties);else return multiPolygon(unioned, options.properties);
  }

  /**
   * Takes two {@link Polygon|polygon} or {@link MultiPolygon|multi-polygon} geometries and
   * finds their polygonal intersection. If they don't intersect, returns null.
   *
   * @name intersect
   * @param {Feature<Polygon | MultiPolygon>} poly1 the first polygon or multipolygon
   * @param {Feature<Polygon | MultiPolygon>} poly2 the second polygon or multipolygon
   * @param {Object} [options={}] Optional Parameters
   * @param {Object} [options.properties={}] Translate GeoJSON Properties to Feature
   * @returns {Feature|null} returns a feature representing the area they share (either a {@link Polygon} or
   * {@link MultiPolygon}). If they do not share any area, returns `null`.
   * @example
   * var poly1 = turf.polygon([[
   *   [-122.801742, 45.48565],
   *   [-122.801742, 45.60491],
   *   [-122.584762, 45.60491],
   *   [-122.584762, 45.48565],
   *   [-122.801742, 45.48565]
   * ]]);
   *
   * var poly2 = turf.polygon([[
   *   [-122.520217, 45.535693],
   *   [-122.64038, 45.553967],
   *   [-122.720031, 45.526554],
   *   [-122.669906, 45.507309],
   *   [-122.723464, 45.446643],
   *   [-122.532577, 45.408574],
   *   [-122.487258, 45.477466],
   *   [-122.520217, 45.535693]
   * ]]);
   *
   * var intersection = turf.intersect(poly1, poly2);
   *
   * //addToMap
   * var addToMap = [poly1, poly2, intersection];
   */

  function intersect(poly1, poly2, options) {
    if (options === void 0) {
      options = {};
    }

    var geom1 = getGeom(poly1);
    var geom2 = getGeom(poly2);
    var intersection = index.intersection(geom1.coordinates, geom2.coordinates);
    if (intersection.length === 0) return null;
    if (intersection.length === 1) return polygon(intersection[0], options.properties);
    return multiPolygon(intersection, options.properties);
  }

  /**
   * Dissolves a FeatureCollection of {@link polygon} features, filtered by an optional property name:value.
   * Note that {@link mulitpolygon} features within the collection are not supported
   *
   * @name dissolve
   * @param {FeatureCollection<Polygon>} featureCollection input feature collection to be dissolved
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.propertyName] features with the same `propertyName` value will be dissolved.
   * @returns {FeatureCollection<Polygon>} a FeatureCollection containing the dissolved polygons
   * @example
   * var features = turf.featureCollection([
   *   turf.polygon([[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]], {combine: 'yes'}),
   *   turf.polygon([[[0, -1], [0, 0], [1, 0], [1, -1], [0,-1]]], {combine: 'yes'}),
   *   turf.polygon([[[1,-1],[1, 0], [2, 0], [2, -1], [1, -1]]], {combine: 'no'}),
   * ]);
   *
   * var dissolved = turf.dissolve(features, {propertyName: 'combine'});
   *
   * //addToMap
   * var addToMap = [features, dissolved]
   */

  function dissolve(fc, options) {
    // Optional parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var propertyName = options.propertyName; // Input validation

    collectionOf(fc, "Polygon", "dissolve"); // Main

    var outFeatures = [];

    if (!options.propertyName) {
      return flatten(multiPolygon(index.union.apply(null, fc.features.map(function (f) {
        return f.geometry.coordinates;
      }))));
    } else {
      var uniquePropertyVals = {};
      featureEach$2(fc, function (feature) {
        if (!Object.prototype.hasOwnProperty.call(uniquePropertyVals, feature.properties[propertyName])) {
          uniquePropertyVals[feature.properties[propertyName]] = [];
        }

        uniquePropertyVals[feature.properties[propertyName]].push(feature);
      });
      var vals = Object.keys(uniquePropertyVals);

      for (var i = 0; i < vals.length; i++) {
        var mp = multiPolygon(index.union.apply(null, uniquePropertyVals[vals[i]].map(function (f) {
          return f.geometry.coordinates;
        })));
        mp.properties[propertyName] = vals[i];
        outFeatures.push(mp);
      }
    }

    return flatten(featureCollection$1(outFeatures));
  }

  /**
   * Takes a bounding box and the diameter of the cell and returns a {@link FeatureCollection} of flat-topped
   * hexagons or triangles ({@link Polygon} features) aligned in an "odd-q" vertical grid as
   * described in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/).
   *
   * @name hexGrid
   * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order
   * @param {number} cellSide length of the side of the the hexagons or triangles, in units. It will also coincide with the
   * radius of the circumcircle of the hexagons.
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] used in calculating cell size, can be degrees, radians, miles, or kilometers
   * @param {Object} [options.properties={}] passed to each hexagon or triangle of the grid
   * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it
   * @param {boolean} [options.triangles=false] whether to return as triangles instead of hexagons
   * @returns {FeatureCollection<Polygon>} a hexagonal grid
   * @example
   * var bbox = [-96,31,-84,40];
   * var cellSide = 50;
   * var options = {units: 'miles'};
   *
   * var hexgrid = turf.hexGrid(bbox, cellSide, options);
   *
   * //addToMap
   * var addToMap = [hexgrid];
   */

  function hexGrid(bbox, cellSide, options) {
    if (options === void 0) {
      options = {};
    } // Issue => https://github.com/Turfjs/turf/issues/1284


    var clonedProperties = JSON.stringify(options.properties || {});
    var west = bbox[0],
        south = bbox[1],
        east = bbox[2],
        north = bbox[3];
    var centerY = (south + north) / 2;
    var centerX = (west + east) / 2; // https://github.com/Turfjs/turf/issues/758

    var xFraction = cellSide * 2 / distance$1([west, centerY], [east, centerY], options);
    var cellWidth = xFraction * (east - west);
    var yFraction = cellSide * 2 / distance$1([centerX, south], [centerX, north], options);
    var cellHeight = yFraction * (north - south);
    var radius = cellWidth / 2;
    var hex_width = radius * 2;
    var hex_height = Math.sqrt(3) / 2 * cellHeight;
    var box_width = east - west;
    var box_height = north - south;
    var x_interval = 3 / 4 * hex_width;
    var y_interval = hex_height; // adjust box_width so all hexagons will be inside the bbox

    var x_span = (box_width - hex_width) / (hex_width - radius / 2);
    var x_count = Math.floor(x_span);
    var x_adjust = (x_count * x_interval - radius / 2 - box_width) / 2 - radius / 2 + x_interval / 2; // adjust box_height so all hexagons will be inside the bbox

    var y_count = Math.floor((box_height - hex_height) / hex_height);
    var y_adjust = (box_height - y_count * hex_height) / 2;
    var hasOffsetY = y_count * hex_height - box_height > hex_height / 2;

    if (hasOffsetY) {
      y_adjust -= hex_height / 4;
    } // Precompute cosines and sines of angles used in hexagon creation for performance gain


    var cosines = [];
    var sines = [];

    for (var i = 0; i < 6; i++) {
      var angle = 2 * Math.PI / 6 * i;
      cosines.push(Math.cos(angle));
      sines.push(Math.sin(angle));
    }

    var results = [];

    for (var x = 0; x <= x_count; x++) {
      for (var y = 0; y <= y_count; y++) {
        var isOdd = x % 2 === 1;
        if (y === 0 && isOdd) continue;
        if (y === 0 && hasOffsetY) continue;
        var center_x = x * x_interval + west - x_adjust;
        var center_y = y * y_interval + south + y_adjust;

        if (isOdd) {
          center_y -= hex_height / 2;
        }

        if (options.triangles === true) {
          hexTriangles([center_x, center_y], cellWidth / 2, cellHeight / 2, JSON.parse(clonedProperties), cosines, sines).forEach(function (triangle) {
            if (options.mask) {
              if (intersect(options.mask, triangle)) results.push(triangle);
            } else {
              results.push(triangle);
            }
          });
        } else {
          var hex = hexagon([center_x, center_y], cellWidth / 2, cellHeight / 2, JSON.parse(clonedProperties), cosines, sines);

          if (options.mask) {
            if (intersect(options.mask, hex)) results.push(hex);
          } else {
            results.push(hex);
          }
        }
      }
    }

    return featureCollection$1(results);
  }
  /**
   * Creates hexagon
   *
   * @private
   * @param {Array<number>} center of the hexagon
   * @param {number} rx half hexagon width
   * @param {number} ry half hexagon height
   * @param {Object} properties passed to each hexagon
   * @param {Array<number>} cosines precomputed
   * @param {Array<number>} sines precomputed
   * @returns {Feature<Polygon>} hexagon
   */


  function hexagon(center, rx, ry, properties, cosines, sines) {
    var vertices = [];

    for (var i = 0; i < 6; i++) {
      var x = center[0] + rx * cosines[i];
      var y = center[1] + ry * sines[i];
      vertices.push([x, y]);
    } //first and last vertex must be the same


    vertices.push(vertices[0].slice());
    return polygon([vertices], properties);
  }
  /**
   * Creates triangles composing an hexagon
   *
   * @private
   * @param {Array<number>} center of the hexagon
   * @param {number} rx half triangle width
   * @param {number} ry half triangle height
   * @param {Object} properties passed to each triangle
   * @param {Array<number>} cosines precomputed
   * @param {Array<number>} sines precomputed
   * @returns {Array<Feature<Polygon>>} triangles
   */


  function hexTriangles(center, rx, ry, properties, cosines, sines) {
    var triangles = [];

    for (var i = 0; i < 6; i++) {
      var vertices = [];
      vertices.push(center);
      vertices.push([center[0] + rx * cosines[i], center[1] + ry * sines[i]]);
      vertices.push([center[0] + rx * cosines[(i + 1) % 6], center[1] + ry * sines[(i + 1) % 6]]);
      vertices.push(center);
      triangles.push(polygon([vertices], properties));
    }

    return triangles;
  }

  /**
   * Takes any type of {@link Polygon|polygon} and an optional mask and returns a {@link Polygon|polygon} exterior ring with holes.
   *
   * @name mask
   * @param {FeatureCollection|Feature<Polygon|MultiPolygon>} polygon GeoJSON Polygon used as interior rings or holes.
   * @param {Feature<Polygon>} [mask] GeoJSON Polygon used as the exterior ring (if undefined, the world extent is used)
   * @returns {Feature<Polygon>} Masked Polygon (exterior ring with holes).
   * @example
   * var polygon = turf.polygon([[[112, -21], [116, -36], [146, -39], [153, -24], [133, -10], [112, -21]]]);
   * var mask = turf.polygon([[[90, -55], [170, -55], [170, 10], [90, 10], [90, -55]]]);
   *
   * var masked = turf.mask(polygon, mask);
   *
   * //addToMap
   * var addToMap = [masked]
   */

  function mask(polygon, mask) {
    // Define mask
    var maskPolygon = createMask(mask);
    var polygonOuters = null;
    if (polygon.type === "FeatureCollection") polygonOuters = unionFc(polygon);else polygonOuters = createGeomFromPolygonClippingOutput(index.union(polygon.geometry.coordinates));
    polygonOuters.geometry.coordinates.forEach(function (contour) {
      maskPolygon.geometry.coordinates.push(contour[0]);
    });
    return maskPolygon;
  }

  function unionFc(fc) {
    var unioned = fc.features.length === 2 ? index.union(fc.features[0].geometry.coordinates, fc.features[1].geometry.coordinates) : index.union.apply(index, fc.features.map(function (f) {
      return f.geometry.coordinates;
    }));
    return createGeomFromPolygonClippingOutput(unioned);
  }

  function createGeomFromPolygonClippingOutput(unioned) {
    return multiPolygon(unioned);
  }
  /**
   * Create Mask Coordinates
   *
   * @private
   * @param {Feature<Polygon>} [mask] default to world if undefined
   * @returns {Feature<Polygon>} mask coordinate
   */


  function createMask(mask) {
    var world = [[[180, 90], [-180, 90], [-180, -90], [180, -90], [180, 90]]];
    var coordinates = mask && mask.geometry.coordinates || world;
    return polygon(coordinates);
  }

  /**
   * Creates a grid of rectangles from a bounding box, {@link Feature} or {@link FeatureCollection}.
   *
   * @name rectangleGrid
   * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
   * @param {number} cellWidth of each cell, in units
   * @param {number} cellHeight of each cell, in units
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] units ("degrees", "radians", "miles", "kilometers") that the given cellWidth
   * and cellHeight are expressed in. Converted at the southern border.
   * @param {Feature<Polygon|MultiPolygon>} [options.mask] if passed a Polygon or MultiPolygon,
   * the grid Points will be created only inside it
   * @param {Object} [options.properties={}] passed to each point of the grid
   * @returns {FeatureCollection<Polygon>} a grid of polygons
   * @example
   * var bbox = [-95, 30 ,-85, 40];
   * var cellWidth = 50;
   * var cellHeight = 20;
   * var options = {units: 'miles'};
   *
   * var rectangleGrid = turf.rectangleGrid(bbox, cellWidth, cellHeight, options);
   *
   * //addToMap
   * var addToMap = [rectangleGrid]
   */

  function rectangleGrid(bbox, cellWidth, cellHeight, options) {
    if (options === void 0) {
      options = {};
    } // Containers


    var results = [];
    var west = bbox[0];
    var south = bbox[1];
    var east = bbox[2];
    var north = bbox[3];
    var xFraction = cellWidth / distance$1([west, south], [east, south], options);
    var cellWidthDeg = xFraction * (east - west);
    var yFraction = cellHeight / distance$1([west, south], [west, north], options);
    var cellHeightDeg = yFraction * (north - south); // rows & columns

    var bboxWidth = east - west;
    var bboxHeight = north - south;
    var columns = Math.floor(bboxWidth / cellWidthDeg);
    var rows = Math.floor(bboxHeight / cellHeightDeg); // if the grid does not fill the bbox perfectly, center it.

    var deltaX = (bboxWidth - columns * cellWidthDeg) / 2;
    var deltaY = (bboxHeight - rows * cellHeightDeg) / 2; // iterate over columns & rows

    var currentX = west + deltaX;

    for (var column = 0; column < columns; column++) {
      var currentY = south + deltaY;

      for (var row = 0; row < rows; row++) {
        var cellPoly = polygon([[[currentX, currentY], [currentX, currentY + cellHeightDeg], [currentX + cellWidthDeg, currentY + cellHeightDeg], [currentX + cellWidthDeg, currentY], [currentX, currentY]]], options.properties);

        if (options.mask) {
          if (booleanIntersects(options.mask, cellPoly)) {
            results.push(cellPoly);
          }
        } else {
          results.push(cellPoly);
        }

        currentY += cellHeightDeg;
      }

      currentX += cellWidthDeg;
    }

    return featureCollection$1(results);
  }

  /**
   * Creates a square grid from a bounding box.
   *
   * @name squareGrid
   * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
   * @param {number} cellSide of each cell, in units
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] used in calculating cellSide, can be degrees,
   * radians, miles, or kilometers
   * @param {Feature<Polygon|MultiPolygon>} [options.mask] if passed a Polygon or MultiPolygon,
   * the grid Points will be created only inside it
   * @param {Object} [options.properties={}] passed to each point of the grid
   * @returns {FeatureCollection<Polygon>} grid a grid of polygons
   * @example
   * var bbox = [-95, 30 ,-85, 40];
   * var cellSide = 50;
   * var options = {units: 'miles'};
   *
   * var squareGrid = turf.squareGrid(bbox, cellSide, options);
   *
   * //addToMap
   * var addToMap = [squareGrid]
   */

  function squareGrid(bbox, cellSide, options) {
    if (options === void 0) {
      options = {};
    }

    return rectangleGrid(bbox, cellSide, cellSide, options);
  }

  /**
   * Takes a bounding box and a cell depth and returns a set of triangular {@link Polygon|polygons} in a grid.
   *
   * @name triangleGrid
   * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order
   * @param {number} cellSide dimension of each cell
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] used in calculating cellSide, can be degrees, radians, miles, or kilometers
   * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it
   * @param {Object} [options.properties={}] passed to each point of the grid
   * @returns {FeatureCollection<Polygon>} grid of polygons
   * @example
   * var bbox = [-95, 30 ,-85, 40];
   * var cellSide = 50;
   * var options = {units: 'miles'};
   *
   * var triangleGrid = turf.triangleGrid(bbox, cellSide, options);
   *
   * //addToMap
   * var addToMap = [triangleGrid];
   */

  function triangleGrid(bbox, cellSide, options) {
    if (options === void 0) {
      options = {};
    } // Containers


    var results = []; // Input Validation is being handled by Typescript
    // if (cellSide === null || cellSide === undefined) throw new Error('cellSide is required');
    // if (!isNumber(cellSide)) throw new Error('cellSide is invalid');
    // if (!bbox) throw new Error('bbox is required');
    // if (!Array.isArray(bbox)) throw new Error('bbox must be array');
    // if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');
    // if (mask && ['Polygon', 'MultiPolygon'].indexOf(getType(mask)) === -1) throw new Error('options.mask must be a (Multi)Polygon');
    // Main

    var xFraction = cellSide / distance$1([bbox[0], bbox[1]], [bbox[2], bbox[1]], options);
    var cellWidth = xFraction * (bbox[2] - bbox[0]);
    var yFraction = cellSide / distance$1([bbox[0], bbox[1]], [bbox[0], bbox[3]], options);
    var cellHeight = yFraction * (bbox[3] - bbox[1]);
    var xi = 0;
    var currentX = bbox[0];

    while (currentX <= bbox[2]) {
      var yi = 0;
      var currentY = bbox[1];

      while (currentY <= bbox[3]) {
        var cellTriangle1 = null;
        var cellTriangle2 = null;

        if (xi % 2 === 0 && yi % 2 === 0) {
          cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);
          cellTriangle2 = polygon([[[currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY + cellHeight]]], options.properties);
        } else if (xi % 2 === 0 && yi % 2 === 1) {
          cellTriangle1 = polygon([[[currentX, currentY], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);
          cellTriangle2 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX, currentY]]], options.properties);
        } else if (yi % 2 === 0 && xi % 2 === 1) {
          cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX, currentY]]], options.properties);
          cellTriangle2 = polygon([[[currentX, currentY], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);
        } else if (yi % 2 === 1 && xi % 2 === 1) {
          cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);
          cellTriangle2 = polygon([[[currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY + cellHeight]]], options.properties);
        }

        if (options.mask) {
          if (intersect(options.mask, cellTriangle1)) results.push(cellTriangle1);
          if (intersect(options.mask, cellTriangle2)) results.push(cellTriangle2);
        } else {
          results.push(cellTriangle1);
          results.push(cellTriangle2);
        }

        currentY += cellHeight;
        yi++;
      }

      xi++;
      currentX += cellWidth;
    }

    return featureCollection$1(results);
  }

  /**
   * Takes a set of points and estimates their 'property' values on a grid using the [Inverse Distance Weighting (IDW) method](https://en.wikipedia.org/wiki/Inverse_distance_weighting).
   *
   * @name interpolate
   * @param {FeatureCollection<Point>} points with known value
   * @param {number} cellSize the distance across each grid point
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.gridType='square'] defines the output format based on a Grid Type (options: 'square' | 'point' | 'hex' | 'triangle')
   * @param {string} [options.property='elevation'] the property name in `points` from which z-values will be pulled, zValue fallbacks to 3rd coordinate if no property exists.
   * @param {string} [options.units='kilometers'] used in calculating cellSize, can be degrees, radians, miles, or kilometers
   * @param {number} [options.weight=1] exponent regulating the distance-decay weighting
   * @returns {FeatureCollection<Point|Polygon>} grid of points or polygons with interpolated 'property'
   * @example
   * var points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});
   *
   * // add a random property to each point
   * turf.featureEach(points, function(point) {
   *     point.properties.solRad = Math.random() * 50;
   * });
   * var options = {gridType: 'points', property: 'solRad', units: 'miles'};
   * var grid = turf.interpolate(points, 100, options);
   *
   * //addToMap
   * var addToMap = [grid];
   */

  function interpolate(points, cellSize, options) {
    // Optional parameters
    options = options || {};
    if (_typeof(options) !== "object") throw new Error("options is invalid");
    var gridType = options.gridType;
    var property = options.property;
    var weight = options.weight; // validation

    if (!points) throw new Error("points is required");
    collectionOf(points, "Point", "input must contain Points");
    if (!cellSize) throw new Error("cellSize is required");
    if (weight !== undefined && typeof weight !== "number") throw new Error("weight must be a number"); // default values

    property = property || "elevation";
    gridType = gridType || "square";
    weight = weight || 1;
    var box = bbox$2(points);
    var grid;

    switch (gridType) {
      case "point":
      case "points":
        grid = pointGrid(box, cellSize, options);
        break;

      case "square":
      case "squares":
        grid = squareGrid(box, cellSize, options);
        break;

      case "hex":
      case "hexes":
        grid = hexGrid(box, cellSize, options);
        break;

      case "triangle":
      case "triangles":
        grid = triangleGrid(box, cellSize, options);
        break;

      default:
        throw new Error("invalid gridType");
    }

    var results = [];
    featureEach$2(grid, function (gridFeature) {
      var zw = 0;
      var sw = 0; // calculate the distance from each input point to the grid points

      featureEach$2(points, function (point) {
        var gridPoint = gridType === "point" ? gridFeature : centroid(gridFeature);
        var d = distance$1(gridPoint, point, options);
        var zValue; // property has priority for zValue, fallbacks to 3rd coordinate from geometry

        if (property !== undefined) zValue = point.properties[property];
        if (zValue === undefined) zValue = point.geometry.coordinates[2];
        if (zValue === undefined) throw new Error("zValue is missing");
        if (d === 0) zw = zValue;
        var w = 1.0 / Math.pow(d, weight);
        sw += w;
        zw += w * zValue;
      }); // write interpolated value for each grid point

      var newFeature = clone(gridFeature);
      newFeature.properties[property] = zw / sw;
      results.push(newFeature);
    });
    return featureCollection$1(results);
  }

  var turf = /*#__PURE__*/Object.freeze({
    __proto__: null,
    projection: index$3,
    random: index$2,
    clusters: index$1,
    helpers: index$7,
    invariant: index$5,
    meta: index$6,
    isolines: isolines,
    convex: convex,
    pointsWithinPolygon: pointsWithinPolygon,
    within: pointsWithinPolygon,
    concave: concave,
    collect: collect,
    flip: flip,
    simplify: simplify$1,
    bezier: bezier,
    bezierSpline: bezier,
    tag: tag,
    sample: sample,
    envelope: envelope,
    square: square,
    circle: circle,
    midpoint: midpoint,
    center: center,
    centerOfMass: centerOfMass,
    centroid: centroid,
    combine: combine,
    distance: distance$1,
    explode: explode$1,
    bbox: bbox$2,
    tesselate: tesselate,
    bboxPolygon: bboxPolygon,
    booleanPointInPolygon: booleanPointInPolygon,
    inside: booleanPointInPolygon,
    nearest: nearestPoint,
    nearestPoint: nearestPoint,
    nearestPointOnLine: nearestPointOnLine,
    pointOnLine: nearestPointOnLine,
    nearestPointToLine: nearestPointToLine,
    planepoint: planepoint,
    tin: tin,
    bearing: bearing,
    destination: destination,
    kinks: kinks,
    pointOnFeature: pointOnFeature,
    pointOnSurface: pointOnFeature,
    area: area,
    along: along,
    length: length$1,
    lineDistance: length$1,
    lineSlice: lineSlice,
    lineSliceAlong: lineSliceAlong,
    pointGrid: pointGrid,
    truncate: truncate,
    flatten: flatten,
    lineIntersect: lineIntersect,
    lineChunk: lineChunk,
    unkinkPolygon: unkinkPolygon,
    greatCircle: greatCircle,
    lineSegment: lineSegment,
    lineSplit: lineSplit,
    lineArc: lineArc,
    polygonToLine: polygonToLine,
    polygonToLineString: polygonToLine,
    lineStringToPolygon: lineToPolygon,
    lineToPolygon: lineToPolygon,
    bboxClip: bboxClip,
    lineOverlap: lineOverlap,
    sector: sector,
    rhumbBearing: rhumbBearing,
    rhumbDistance: rhumbDistance,
    rhumbDestination: rhumbDestination,
    polygonTangents: polygonTangents,
    rewind: rewind,
    isobands: isobands,
    transformRotate: transformRotate,
    transformScale: transformScale,
    transformTranslate: transformTranslate,
    lineOffset: lineOffset,
    polygonize: polygonize,
    booleanDisjoint: booleanDisjoint,
    booleanContains: booleanContains,
    booleanCrosses: booleanCrosses,
    booleanClockwise: booleanClockwise,
    booleanOverlap: booleanOverlap,
    booleanPointOnLine: booleanPointOnLine,
    booleanEqual: booleanEqual,
    booleanWithin: booleanWithin,
    booleanIntersects: booleanIntersects,
    clone: clone,
    cleanCoords: cleanCoords,
    clustersDbscan: clustersDbscan,
    clustersKmeans: clustersKmeans,
    pointToLineDistance: pointToLineDistance,
    booleanParallel: booleanParallel,
    shortestPath: shortestPath,
    voronoi: voronoi,
    ellipse: ellipse,
    centerMean: centerMean,
    centerMedian: centerMedian,
    standardDeviationalEllipse: standardDeviationalEllipse,
    angle: angle,
    polygonSmooth: polygonSmooth,
    moranIndex: index$4,
    distanceWeight: distanceWeight,
    bearingToAngle: bearingToAzimuth,
    convertDistance: convertLength,
    degrees2radians: degreesToRadians,
    distanceToDegrees: lengthToDegrees,
    distanceToRadians: lengthToRadians,
    radians2degrees: radiansToDegrees,
    radiansToDistance: radiansToLength,
    difference: difference,
    buffer: buffer,
    union: union,
    intersect: intersect,
    dissolve: dissolve,
    hexGrid: hexGrid,
    mask: mask,
    squareGrid: squareGrid,
    triangleGrid: triangleGrid,
    interpolate: interpolate,
    toMercator: toMercator,
    toWgs84: toWgs84,
    randomPosition: randomPosition,
    randomPoint: randomPoint,
    randomPolygon: randomPolygon,
    randomLineString: randomLineString,
    getCluster: getCluster,
    clusterEach: clusterEach,
    clusterReduce: clusterReduce,
    createBins: createBins,
    applyFilter: applyFilter,
    propertiesContainsFilter: propertiesContainsFilter,
    filterProperties: filterProperties,
    earthRadius: earthRadius,
    factors: factors,
    unitsFactors: unitsFactors,
    areaFactors: areaFactors,
    feature: feature,
    geometry: geometry$1,
    point: point,
    points: points,
    polygon: polygon,
    polygons: polygons,
    lineString: lineString,
    lineStrings: lineStrings,
    featureCollection: featureCollection$1,
    multiLineString: multiLineString,
    multiPoint: multiPoint,
    multiPolygon: multiPolygon,
    geometryCollection: geometryCollection,
    round: round,
    radiansToLength: radiansToLength,
    lengthToRadians: lengthToRadians,
    lengthToDegrees: lengthToDegrees,
    bearingToAzimuth: bearingToAzimuth,
    radiansToDegrees: radiansToDegrees,
    degreesToRadians: degreesToRadians,
    convertLength: convertLength,
    convertArea: convertArea,
    isNumber: isNumber,
    isObject: isObject,
    validateBBox: validateBBox,
    validateId: validateId,
    getCoord: getCoord,
    getCoords: getCoords,
    containsNumber: containsNumber,
    geojsonType: geojsonType,
    featureOf: featureOf,
    collectionOf: collectionOf,
    getGeom: getGeom,
    getType: getType$1,
    coordAll: coordAll$1,
    coordEach: coordEach$1,
    coordReduce: coordReduce$1,
    featureEach: featureEach$2,
    featureReduce: featureReduce$1,
    findPoint: findPoint$1,
    findSegment: findSegment$1,
    flattenEach: flattenEach$1,
    flattenReduce: flattenReduce$1,
    geomEach: geomEach$1,
    geomReduce: geomReduce$1,
    lineEach: lineEach$1,
    lineReduce: lineReduce$1,
    propEach: propEach$1,
    propReduce: propReduce$1,
    segmentEach: segmentEach$1,
    segmentReduce: segmentReduce$1
  });

  var App = /*#__PURE__*/function () {
    function App() {
      _classCallCheck$1(this, App);

      this.regonNotExists = true; // Czy REGON istnieje w bazie KBF

      this.regonFound = true; // Czy REGON istnieje w bazie KBF

      this.regonErrorVisible = false; // Czy wyswietlony jest blad regon

      this.imageName = 'logo-placeholder.jpg';
      this.imageType = 'image/jpg';
      this.init();
      this.addListeners();
    }

    _createClass$1(App, [{
      key: "init",
      value: function init() {
        var instance = this;
        this.areas = areas.features; // Dane o powiatach

        this.turf = turf;
        this.$form = $('form[name="register-company"]');
        this.companyInfo = $('.company-info')[0];
        this.companyDescription = $('.company-description')[0];
        this.companyInfoContents = this.companyInfo.innerHTML; // Placeholder z informacjami o firmie

        this.companyDescriptionContents = this.companyDescription.innerHTML; // Placeholder z informacjami o firmie

        this.$kbfMiniMapContainer = $('#kbf-minimap').parent();
        this.searchByREGONButtonPreloader = new KbfPreloaderButton('.kbf-search-button'); // Cropper

        this.$modal = $('#modal');
        this.image = document.getElementById('sample_image');
        this.cropper = null;
        this.$companyLogo = $('#company_logo');
        this.$logoPlaceholder = $('.kbf-logo-uploader-image'); // Przycisk wyszukiwania po numerze REGON

        this.$searchByREGONButton = $('.kbf-search-button');
        this.$searchByREGONButton.attr('disabled', 'disabled'); //Tagify

        new KbfTagify('input.kbf-keywords'); // Sprawdz czy walidator istnieje

        if (!$.fn.validate) throw errors.noValidator(); // Ustaw walidator dla branz

        $.validator.addMethod('industries', function (value, element) {
          return this.optional(element) || value !== 'Wybierz';
        }, "Nazwa branży musi zostać wybrana."); // Ustaw walidator dla numeru REGON

        $.validator.addMethod('regon-not-exists', function (value, element) {
          return this.optional(element) || instance.regonNotExists;
        }, "REGON jest już zarejestrowany w KBF.");
        $.validator.addMethod('regon-not-found', function (value, element) {
          return this.optional(element) || instance.regonFound;
        }, "Firma o podanym numerze REGON nie została odnaleziona."); // Walidacja

        this.validatorConfig = {
          formName: 'register-company',
          ignore: [],
          rules: {
            // Ustaw reguly dla branz
            industry: {
              required: true,
              industries: true
            },
            "sub-industry": {
              required: true,
              industries: true
            },
            "company_regon": {
              "regon-not-exists": true,
              "regon-not-found": true
            }
          },
          // Umiejscowienie komunikatu o bledzie
          errorPlacement: function errorPlacement($label, $element) {
            $label.addClass('kbf-error-message');
            var $column = $element.closest('[class*="col"]');

            if ($column.length > 0) {
              $column.append($label);
            } else $label.insertAfter($element);
          }
        };
        this.stepper = new KbfStepper('.kbf-stepper', this.validatorConfig);
        this.$kbfStepper = this.stepper.$kbfStepper; // Ustaw przyciski w zaleznosci od szerokosci urzadzenia

        if (window.innerWidth >= 768) {
          this.$prevButton = this.$kbfStepper.find('.button-prev.button-desktop');
          this.$nextButton = this.$kbfStepper.find('.button-next.button-desktop');
          this.$registerButton = this.$kbfStepper.find('.button-register.button-desktop');
          this.registerCompanyPreloader = new KbfPreloaderButton('.button-register.button-desktop button');
        } else {
          this.$prevButton = this.$kbfStepper.find('.button-prev');
          this.$nextButton = this.$kbfStepper.find('.button-next');
          this.$registerButton = this.$kbfStepper.find('.button-register');
          this.registerCompanyPreloader = new KbfPreloaderButton('.button-register button');
        } // Wybor branz


        this.industrySwitcher = new KbfIndustrySwitcher('industries', 'sub-industries', "Wybierz", window.innerWidth <= 768, false);
        this.industrySwitcher.on('industries-changed', this.stepper.validateCurrentPage.bind(this.stepper)); // Wysiwyg

        this.wysiwyg = new KbfWysiwyg('.wysiwyg', '[name="company_description_hidden"]');
        this.wysiwyg.on('change', this.stepper.validateCurrentPage.bind(this.stepper)); // Cropper

        this.$companyLogo.change(function (event) {
          var files = event.target.files;
          instance.imageName = files[0].name;
          instance.imageType = files[0].type;

          var done = function done(url) {
            instance.image.src = url;
            instance.$modal.modal('show');
          };

          if (files && files.length > 0) {
            var reader = new FileReader();

            reader.onload = function (event) {
              done(reader.result);
            };

            reader.readAsDataURL(files[0]);
          }

          instance.$companyLogo.val('');
        });
        this.$modal.on('shown.bs.modal', function () {
          instance.cropper = new Cropper(instance.image, {
            // aspectRatio: 3,
            viewMode: 1,
            preview: '.preview'
          });
          $('#crop').click(function () {
            var canvas = instance.cropper.getCroppedCanvas({
              width: 400,
              height: 400
            });
            canvas.toBlob(function (blob) {
              var file = new File([blob], instance.imageName, {
                type: instance.imageType,
                lastModified: new Date().getTime()
              });
              var container = new DataTransfer();
              container.items.add(file);
              instance.$companyLogo[0].files = container.files;
              var reader = new FileReader();
              reader.readAsDataURL(blob);

              reader.onloadend = function () {
                var base64data = reader.result;
                instance.$logoPlaceholder.attr('src', base64data);
                instance.$modal.modal('hide');
              };
            });
          });
        }).on('hidden.bs.modal', function () {
          instance.cropper.destroy();
          instance.cropper = null;
        });
      }
    }, {
      key: "addListeners",
      value: function addListeners() {
        var instance = this;
        this.$prevButton.on('click', this.prevPage.bind(this));
        this.$nextButton.on('click', this.nextPage.bind(this));
        this.$registerButton.on('click', this.submitRegister.bind(this)); // TODO
        // Pole REGON

        var $regonField = $('[name="company_regon"]');
        $regonField.on('change', this.regonFieldHandler($regonField).bind(this));
        $regonField.on('input', this.regonFieldHandler($regonField).bind(this));
        $regonField.on('paste', this.regonFieldHandler($regonField).bind(this));
        this.searchByREGONButtonPreloader.on('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var data, $companyNameField, $companyNipField, $companyAddressField, $companyZipField, $companyCityField, $latField, $lonField, isError;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (instance.regonErrorVisible) {
                    $('.kbf-error-message').css('display', 'none');
                  }

                  instance.regonErrorVisible = false;
                  _context.next = 4;
                  return instance.getDataFromREGON($regonField.val());

                case 4:
                  data = _context.sent;
                  $companyNameField = $('[name="company_name"]');
                  $companyNipField = $('[name="company_nip"]');
                  $companyAddressField = $('[name="company_address"]');
                  $companyZipField = $('[name="company_zip"]');
                  $companyCityField = $('[name="company_city"]');
                  $latField = $('[name="lat"]');
                  $lonField = $('[name="lon"]');
                  $companyNameField.val('');
                  $companyNipField.val('');
                  $companyAddressField.val('');
                  $companyZipField.val('');
                  $companyCityField.val('');
                  $latField.val('');
                  $lonField.val('');
                  instance.regonFound = true;
                  instance.regonNotExists = true;
                  isError = data['error'] !== undefined;

                  if (isError) {
                    if (data['error'] === 'No data found') instance.regonFound = false;
                    if (data['error'] === 'Regon exists') instance.regonNotExists = false;
                    instance.regonErrorVisible = true;
                  }

                  if (instance.regonNotExists && !isError) {
                    // Ustaw wartosci dla pol
                    $companyNameField.val(data["company_name"]);
                    $companyNameField[0].removeAttribute('disabled');
                    $companyNipField.val(data["company_nip"]);
                    $companyNipField[0].removeAttribute('disabled');
                    $companyAddressField.val(data["company_address"]);
                    $companyAddressField[0].removeAttribute('disabled');
                    $companyZipField.val(data["company_zip"]);
                    $companyZipField[0].removeAttribute('disabled');
                    $companyCityField.val(data["company_city"]);
                    $companyCityField[0].removeAttribute('disabled');
                    instance.searchByREGONButtonPreloader.stopPreloader(); // Znajdz nazwe wojewodztwa, powiatu, lat, lon

                    $.ajax({
                      url: config.apiEndpoint + "api/get-lat-lon/?company_address=".concat($companyAddressField.val(), "&company_city=").concat($companyCityField.val()),
                      success: function success(res) {
                        $latField.val(res.lat);
                        $lonField.val(res.lon);
                        var addressPoint = instance.turf.point([res.lon, res.lat]);
                        var currentArea = instance.areas.filter(function (area) {
                          var ret = false;
                          area.geometry.coordinates.forEach(function (geometry) {
                            var _set = new Set(geometry);

                            var _geometry = _toConsumableArray(_set);

                            if (_geometry.length === 1) _geometry = _geometry[0];
                            ret = booleanPointInPolygon(addressPoint, instance.turf.polygon([_geometry]));
                          });
                          return ret;
                        });

                        if (currentArea.length > 0) {
                          var $companyProvince = $('[name="province_name"]');
                          var $companyArea = $('[name="area_name"]');
                          $companyProvince.val(currentArea[0].properties.province);
                          $companyArea.val(currentArea[0].properties.name);
                        }
                      },
                      complete: function complete() {
                        instance.stepper.validateCurrentPage();
                      }
                    });
                  }

                case 24:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })));
      }
    }, {
      key: "nextPage",
      value: function nextPage(e) {
        this.stepper.nextPage(e);
        if (this.stepper.currentPageIdx > 0) this.$prevButton.find('button').removeAttr('disabled');

        if (this.stepper.currentPageIdx === this.stepper.lastPageIdx) {
          this.$nextButton.hide();
          this.$registerButton.show();
          this.$registerButton.find('button').addClass('show');
        }

        this.setSummary();
      }
    }, {
      key: "prevPage",
      value: function prevPage(e) {
        this.stepper.prevPage(e);

        if (this.stepper.currentPageIdx < this.stepper.lastPageIdx) {
          this.$registerButton.hide();
          this.$registerButton.find('button').removeClass('show');
          this.$nextButton.show();
        }

        if (this.stepper.currentPageIdx === 0) {
          this.$prevButton.find('button').attr('disabled', 'disabled');
        }

        this.setSummary();
      } // Przygotowuje podsumowanie wpisu

    }, {
      key: "setSummary",
      value: function setSummary() {
        var industry = $('[name="industry"]').val();
        var subIndustry = $('[name="sub-industry"]').val();
        var lat = $('[name="lat"]').val();
        var lon = $('[name="lon"]').val(); // Ukryj minimape jezeli nie pobrano wspolrzednych

        if (this.stepper.currentPageIdx === this.stepper.lastPageIdx) {
          if (!lat || !lon) {
            this.$kbfMiniMapContainer.hide();
          }
        }

        this.companyInfo.innerHTML = replacePlaceholders({
          '{company_name}': $('[name="company_name"]').val() || '{company_name}',
          '{company_address}': $('[name="company_address"]').val() || '{company_address}',
          '{company_regon}': $('[name="company_regon"]').val() || '{company_regon}',
          '{company_zip}': $('[name="company_zip"]').val() || '{company_zip}',
          '{company_city}': $('[name="company_city"]').val() || '{company_city}',
          '{company_phone_1}': $('[name="company_phone_1"]').val() || '{company_phone_1}',
          '{company_www}': $('[name="company_www"]').val() || '',
          '{company_email}': $('[name="company_email"]').val() || '{company_email}',
          '{company_industry}': industry !== 'Wybierz' ? industry : '{company_industry}' ,
          '{company_sub_industry}': subIndustry !== 'Wybierz' ? subIndustry : '{company_sub_industry}'
        }, this.companyInfoContents); // Usun logo WWW jezel nie podano w formularzu

        if (!$('[name="company_www"]').val()) {
          var $companyWWW = $('.company-www');
          $companyWWW.removeClass('d-block');
          $companyWWW.addClass('d-none');
        } else {
          var _$companyWWW = $('.company-www');

          _$companyWWW.addClass('d-block');

          _$companyWWW.removeClass('d-none');
        }

        this.companyDescription.innerHTML = replacePlaceholders({
          '{company_description_html}': $('[name="company_description_html"]').val() || ''
        }, this.companyDescriptionContents);
      } // Aktywuje przycisk wyszukiwania jezeli dlugosc REGON jest prawidlowa

    }, {
      key: "regonFieldHandler",
      value: function regonFieldHandler($regonField) {
        return function () {
          if ($regonField.val().length >= 7) this.$searchByREGONButton.attr('disabled', false);else this.$searchByREGONButton.attr('disabled', 'disabled');
        };
      } // Potwierdza rejestracje

    }, {
      key: "submitRegister",
      value: function submitRegister(e) {
        e.preventDefault();
        e.stopPropagation();
        this.$prevButton.find('button').attr('disabled', 'disabled').off('click'); // Wylacz prev button

        this.$form.submit();
      }
    }, {
      key: "getDataFromREGON",
      value: function () {
        var _getDataFromREGON = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(regon) {
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (regon) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt("return", []);

                case 2:
                  _context2.next = 4;
                  return $.get(config.apiEndpoint + "/api/regon/?regon=".concat(regon));

                case 4:
                  return _context2.abrupt("return", _context2.sent);

                case 5:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function getDataFromREGON(_x) {
          return _getDataFromREGON.apply(this, arguments);
        }

        return getDataFromREGON;
      }()
    }]);

    return App;
  }();

  (function ($) {
    $(document).ready(function () {
      new App();
    });
  })(window.$);

}());
//# sourceMappingURL=register-company.js.map
